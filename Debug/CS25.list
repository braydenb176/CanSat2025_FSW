
CS25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015520  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  08015700  08015700  00016700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015c90  08015c90  000172b8  2**0
                  CONTENTS
  4 .ARM          00000008  08015c90  08015c90  00016c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015c98  08015c98  000172b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015c98  08015c98  00016c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015c9c  08015c9c  00016c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b8  20000000  08015ca0  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001454  200002b8  08015f58  000172b8  2**2
                  ALLOC
 10 ._user_heap_stack 00001504  2000170c  08015f58  0001770c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000172b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033966  00000000  00000000  000172e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006dee  00000000  00000000  0004ac4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b28  00000000  00000000  00051a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000213d  00000000  00000000  00054568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a75e  00000000  00000000  000566a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000366c4  00000000  00000000  00060e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010032c  00000000  00000000  000974c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001977f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cb1c  00000000  00000000  00197838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001a4354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002b8 	.word	0x200002b8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080156e8 	.word	0x080156e8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002bc 	.word	0x200002bc
 800021c:	080156e8 	.word	0x080156e8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <init_mission_data>:
volatile uint8_t simulation_enable = 0;

Mission_Data global_mission_data = {0};

void init_mission_data(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	memset(&global_mission_data, 0, sizeof(global_mission_data));
 8000f8c:	226c      	movs	r2, #108	@ 0x6c
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4829      	ldr	r0, [pc, #164]	@ (8001038 <init_mission_data+0xb0>)
 8000f92:	f011 fbf9 	bl	8012788 <memset>

	global_mission_data.TEAM_ID = 3174;
 8000f96:	4b28      	ldr	r3, [pc, #160]	@ (8001038 <init_mission_data+0xb0>)
 8000f98:	f640 4266 	movw	r2, #3174	@ 0xc66
 8000f9c:	801a      	strh	r2, [r3, #0]
	strcpy(global_mission_data.MISSION_TIME, "XX:XX:XX"); // TEMP
 8000f9e:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <init_mission_data+0xb0>)
 8000fa0:	4926      	ldr	r1, [pc, #152]	@ (800103c <init_mission_data+0xb4>)
 8000fa2:	1c9a      	adds	r2, r3, #2
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	cb03      	ldmia	r3!, {r0, r1}
 8000fa8:	6010      	str	r0, [r2, #0]
 8000faa:	6051      	str	r1, [r2, #4]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	7213      	strb	r3, [r2, #8]
	global_mission_data.PACKET_COUNT = 0;				  // TEMP
 8000fb0:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <init_mission_data+0xb0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
	global_mission_data.MODE = 'F';
 8000fb6:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <init_mission_data+0xb0>)
 8000fb8:	2246      	movs	r2, #70	@ 0x46
 8000fba:	741a      	strb	r2, [r3, #16]
	strcpy(global_mission_data.STATE, "LAUNCH_PAD");
 8000fbc:	4a20      	ldr	r2, [pc, #128]	@ (8001040 <init_mission_data+0xb8>)
 8000fbe:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <init_mission_data+0xbc>)
 8000fc0:	cb03      	ldmia	r3!, {r0, r1}
 8000fc2:	6010      	str	r0, [r2, #0]
 8000fc4:	6051      	str	r1, [r2, #4]
 8000fc6:	8819      	ldrh	r1, [r3, #0]
 8000fc8:	789b      	ldrb	r3, [r3, #2]
 8000fca:	8111      	strh	r1, [r2, #8]
 8000fcc:	7293      	strb	r3, [r2, #10]
	global_mission_data.ALTITUDE = 0.0;				  // temp
 8000fce:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <init_mission_data+0xb0>)
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
	global_mission_data.MAG_R = 0.0;				  // TEMP
 8000fd6:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <init_mission_data+0xb0>)
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	63da      	str	r2, [r3, #60]	@ 0x3c
	global_mission_data.MAG_P = 0.0;				  // TEMP
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <init_mission_data+0xb0>)
 8000fe0:	f04f 0200 	mov.w	r2, #0
 8000fe4:	641a      	str	r2, [r3, #64]	@ 0x40
	global_mission_data.MAG_Y = 0.0;				  // TEMP
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <init_mission_data+0xb0>)
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	645a      	str	r2, [r3, #68]	@ 0x44
	global_mission_data.AUTO_GYRO_ROTATION_RATE = 0;  // TEMP
 8000fee:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <init_mission_data+0xb0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	strcpy(global_mission_data.GPS_TIME, "XX:XX:XX"); // TEMP
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <init_mission_data+0xb0>)
 8000ff8:	4910      	ldr	r1, [pc, #64]	@ (800103c <init_mission_data+0xb4>)
 8000ffa:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 8000ffe:	460b      	mov	r3, r1
 8001000:	cb03      	ldmia	r3!, {r0, r1}
 8001002:	6010      	str	r0, [r2, #0]
 8001004:	6051      	str	r1, [r2, #4]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	7213      	strb	r3, [r2, #8]
	global_mission_data.GPS_ALTITUDE = 0.0;			  // TEMP
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <init_mission_data+0xb0>)
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	655a      	str	r2, [r3, #84]	@ 0x54
	global_mission_data.GPS_LATITUDE = 0.0;			  // TEMP
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <init_mission_data+0xb0>)
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	659a      	str	r2, [r3, #88]	@ 0x58
	global_mission_data.GPS_LONGITUDE = 0.0;		  // TEMP
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <init_mission_data+0xb0>)
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	65da      	str	r2, [r3, #92]	@ 0x5c
	global_mission_data.GPS_SATS = 0;				  // TEMP
 8001022:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <init_mission_data+0xb0>)
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
	strcpy(global_mission_data.CMD_ECHO, "CMD");	  // TEMP
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <init_mission_data+0xc0>)
 800102c:	4a07      	ldr	r2, [pc, #28]	@ (800104c <init_mission_data+0xc4>)
 800102e:	6810      	ldr	r0, [r2, #0]
 8001030:	6018      	str	r0, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200002d4 	.word	0x200002d4
 800103c:	08015700 	.word	0x08015700
 8001040:	200002e5 	.word	0x200002e5
 8001044:	0801570c 	.word	0x0801570c
 8001048:	20000335 	.word	0x20000335
 800104c:	08015718 	.word	0x08015718

08001050 <_write>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int fd, char *ptr, int len)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  // ignore fd, just send to UART3
  HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	b29a      	uxth	r2, r3
 8001060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	4804      	ldr	r0, [pc, #16]	@ (8001078 <_write+0x28>)
 8001068:	f00b f933 	bl	800c2d2 <HAL_UART_Transmit>
  return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000075c 	.word	0x2000075c

0800107c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800107c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001080:	b0f1      	sub	sp, #452	@ 0x1c4
 8001082:	af12      	add	r7, sp, #72	@ 0x48

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8001084:	f003 f8a2 	bl	80041cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001088:	f000 fa2e 	bl	80014e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108c:	f000 ffee 	bl	800206c <MX_GPIO_Init>
  MX_DMA_Init();
 8001090:	f000 ffc2 	bl	8002018 <MX_DMA_Init>
  MX_ADC1_Init();
 8001094:	f000 faba 	bl	800160c <MX_ADC1_Init>
  MX_I2C3_Init();
 8001098:	f000 fb58 	bl	800174c <MX_I2C3_Init>
  MX_IRTIM_Init();
 800109c:	f000 fb96 	bl	80017cc <MX_IRTIM_Init>
  MX_RTC_Init();
 80010a0:	f000 fbb2 	bl	8001808 <MX_RTC_Init>
  MX_SPI2_Init();
 80010a4:	f000 fbe4 	bl	8001870 <MX_SPI2_Init>
  MX_TIM1_Init();
 80010a8:	f000 fc20 	bl	80018ec <MX_TIM1_Init>
  MX_TIM3_Init();
 80010ac:	f000 fc98 	bl	80019e0 <MX_TIM3_Init>
  MX_TIM8_Init();
 80010b0:	f000 fd2e 	bl	8001b10 <MX_TIM8_Init>
  MX_TIM15_Init();
 80010b4:	f000 fda6 	bl	8001c04 <MX_TIM15_Init>
  MX_TIM16_Init();
 80010b8:	f000 fe2a 	bl	8001d10 <MX_TIM16_Init>
  MX_TIM17_Init();
 80010bc:	f000 fe9e 	bl	8001dfc <MX_TIM17_Init>
  MX_UART5_Init();
 80010c0:	f000 ff12 	bl	8001ee8 <MX_UART5_Init>
  MX_RNG_Init();
 80010c4:	f000 fb8a 	bl	80017dc <MX_RNG_Init>
  MX_USB_Device_Init();
 80010c8:	f010 f898 	bl	80111fc <MX_USB_Device_Init>
  MX_USART3_UART_Init();
 80010cc:	f000 ff58 	bl	8001f80 <MX_USART3_UART_Init>
  MX_CORDIC_Init();
 80010d0:	f000 fb14 	bl	80016fc <MX_CORDIC_Init>
  MX_FMAC_Init();
 80010d4:	f000 fb26 	bl	8001724 <MX_FMAC_Init>
  /* USER CODE BEGIN 2 */
  // Feedback LED
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2180      	movs	r1, #128	@ 0x80
 80010dc:	48be      	ldr	r0, [pc, #760]	@ (80013d8 <main+0x35c>)
 80010de:	f004 ff81 	bl	8005fe4 <HAL_GPIO_WritePin>

  // Enable GPS and XBEE
  HAL_GPIO_WritePin(XBEE_RST_GPIO_Port, XBEE_RST_Pin, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ec:	f004 ff7a 	bl	8005fe4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2120      	movs	r1, #32
 80010f4:	48b8      	ldr	r0, [pc, #736]	@ (80013d8 <main+0x35c>)
 80010f6:	f004 ff75 	bl	8005fe4 <HAL_GPIO_WritePin>
  HAL_Delay(3000); // wait for the Xbee to get brought back up again
 80010fa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80010fe:	f003 f89b 	bl	8004238 <HAL_Delay>

  // Disable ALL chip selects
  HAL_GPIO_WritePin(IMU_nCS_GPIO_Port, IMU_nCS_Pin, GPIO_PIN_SET);
 8001102:	2201      	movs	r2, #1
 8001104:	2104      	movs	r1, #4
 8001106:	48b4      	ldr	r0, [pc, #720]	@ (80013d8 <main+0x35c>)
 8001108:	f004 ff6c 	bl	8005fe4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BMP_nCS_GPIO_Port, BMP_nCS_Pin, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001112:	48b1      	ldr	r0, [pc, #708]	@ (80013d8 <main+0x35c>)
 8001114:	f004 ff66 	bl	8005fe4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MAG_nCS_GPIO_Port, MAG_nCS_Pin, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800111e:	48ae      	ldr	r0, [pc, #696]	@ (80013d8 <main+0x35c>)
 8001120:	f004 ff60 	bl	8005fe4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MAGEXT_nCS_GPIO_Port, MAGEXT_nCS_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800112a:	48ab      	ldr	r0, [pc, #684]	@ (80013d8 <main+0x35c>)
 800112c:	f004 ff5a 	bl	8005fe4 <HAL_GPIO_WritePin>

  // Initialize IMU
  ICM42688P_init(&hspi2, IMU_nCS_GPIO_Port, IMU_nCS_Pin);
 8001130:	2204      	movs	r2, #4
 8001132:	49a9      	ldr	r1, [pc, #676]	@ (80013d8 <main+0x35c>)
 8001134:	48a9      	ldr	r0, [pc, #676]	@ (80013dc <main+0x360>)
 8001136:	f002 fa87 	bl	8003648 <ICM42688P_init>

  // Initialize MS5607
  MS5607_Init(&hspi2, BMP_nCS_GPIO_Port, BMP_nCS_Pin);
 800113a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800113e:	49a6      	ldr	r1, [pc, #664]	@ (80013d8 <main+0x35c>)
 8001140:	48a6      	ldr	r0, [pc, #664]	@ (80013dc <main+0x360>)
 8001142:	f002 fb9f 	bl	8003884 <MS5607_Init>

  // Initialize BMM150
  struct bmm150_dev bmm150 = BMM150_spi_init(&hspi2, MAG_nCS_GPIO_Port, MAG_nCS_Pin);
 8001146:	f507 70a2 	add.w	r0, r7, #324	@ 0x144
 800114a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800114e:	4aa2      	ldr	r2, [pc, #648]	@ (80013d8 <main+0x35c>)
 8001150:	49a2      	ldr	r1, [pc, #648]	@ (80013dc <main+0x360>)
 8001152:	f002 f83f 	bl	80031d4 <BMM150_spi_init>

  // Initialize LC76G
  LC76G_init();
 8001156:	f002 fb3f 	bl	80037d8 <LC76G_init>

  // Initializing AMT10E2
  QENC_Init_Encoder0();
 800115a:	f001 ff65 	bl	8003028 <QENC_Init_Encoder0>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
  int strlen = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
  MS5607Readings bmp_data;
  ICM42688P_AccelData imu_data;
  BMM150_mag_data mag_data;
  LC76G_gps_data gps_data;

  bmp_data = MS5607ReadValues();
 800116a:	f002 ff6b 	bl	8004044 <MS5607ReadValues>
 800116e:	eeb0 6a40 	vmov.f32	s12, s0
 8001172:	eef0 6a60 	vmov.f32	s13, s1
 8001176:	eeb0 7a41 	vmov.f32	s14, s2
 800117a:	eef0 7a61 	vmov.f32	s15, s3
 800117e:	ed87 6b4c 	vstr	d6, [r7, #304]	@ 0x130
 8001182:	ed87 7b4e 	vstr	d7, [r7, #312]	@ 0x138
  global_mission_data.ALTITUDE = calculateAltitude(bmp_data.pressure_kPa, 1);
 8001186:	ed97 7b4c 	vldr	d7, [r7, #304]	@ 0x130
 800118a:	2001      	movs	r0, #1
 800118c:	eeb0 0a47 	vmov.f32	s0, s14
 8001190:	eef0 0a67 	vmov.f32	s1, s15
 8001194:	f002 ffb4 	bl	8004100 <calculateAltitude>
 8001198:	ee07 0a90 	vmov	s15, r0
 800119c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a0:	4b8f      	ldr	r3, [pc, #572]	@ (80013e0 <main+0x364>)
 80011a2:	edc3 7a08 	vstr	s15, [r3, #32]

  init_mission_data();
 80011a6:	f7ff feef 	bl	8000f88 <init_mission_data>

  while (1)
  {
    bmp_data = MS5607ReadValues();
 80011aa:	f002 ff4b 	bl	8004044 <MS5607ReadValues>
 80011ae:	eeb0 6a40 	vmov.f32	s12, s0
 80011b2:	eef0 6a60 	vmov.f32	s13, s1
 80011b6:	eeb0 7a41 	vmov.f32	s14, s2
 80011ba:	eef0 7a61 	vmov.f32	s15, s3
 80011be:	ed87 6b4c 	vstr	d6, [r7, #304]	@ 0x130
 80011c2:	ed87 7b4e 	vstr	d7, [r7, #312]	@ 0x138
    imu_data = ICM42688P_read_data();
 80011c6:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 fa66 	bl	800369c <ICM42688P_read_data>
    gps_data = LC76G_read_data();
 80011d0:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f002 fb2d 	bl	8003834 <LC76G_read_data>

    global_mission_data.ALTITUDE = calculateAltitude(bmp_data.pressure_kPa, 0);
 80011da:	ed97 7b4c 	vldr	d7, [r7, #304]	@ 0x130
 80011de:	2000      	movs	r0, #0
 80011e0:	eeb0 0a47 	vmov.f32	s0, s14
 80011e4:	eef0 0a67 	vmov.f32	s1, s15
 80011e8:	f002 ff8a 	bl	8004100 <calculateAltitude>
 80011ec:	ee07 0a90 	vmov	s15, r0
 80011f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f4:	4b7a      	ldr	r3, [pc, #488]	@ (80013e0 <main+0x364>)
 80011f6:	edc3 7a08 	vstr	s15, [r3, #32]
    global_mission_data.TEMPERATURE = bmp_data.temperature_C;
 80011fa:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f7ff fcf9 	bl	8000bf8 <__aeabi_d2f>
 8001206:	4603      	mov	r3, r0
 8001208:	4a75      	ldr	r2, [pc, #468]	@ (80013e0 <main+0x364>)
 800120a:	6253      	str	r3, [r2, #36]	@ 0x24
    global_mission_data.PRESSURE = bmp_data.pressure_kPa;
 800120c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fcf0 	bl	8000bf8 <__aeabi_d2f>
 8001218:	4603      	mov	r3, r0
 800121a:	4a71      	ldr	r2, [pc, #452]	@ (80013e0 <main+0x364>)
 800121c:	6293      	str	r3, [r2, #40]	@ 0x28
    // global_mission_data.VOLTAGE = (7.62 + (0.0002 * (float)(uint8_t)rand()));
    uint16_t battery_mV = 37;
 800121e:	2325      	movs	r3, #37	@ 0x25
 8001220:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
    BQ28Z610_ReadVoltage(&hi2c3, &battery_mV); // global_mission_data.VOLTAGE = BQ28Z610_ReadVoltage(&hi2c2, )
 8001224:	f107 03ee 	add.w	r3, r7, #238	@ 0xee
 8001228:	4619      	mov	r1, r3
 800122a:	486e      	ldr	r0, [pc, #440]	@ (80013e4 <main+0x368>)
 800122c:	f002 f9a3 	bl	8003576 <BQ28Z610_ReadVoltage>
    printf("Voltage: %.2f", battery_mV);
 8001230:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8001234:	4619      	mov	r1, r3
 8001236:	486c      	ldr	r0, [pc, #432]	@ (80013e8 <main+0x36c>)
 8001238:	f011 fa94 	bl	8012764 <iprintf>
    global_mission_data.VOLTAGE = battery_mV;
 800123c:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	@ 0xee
 8001240:	4b67      	ldr	r3, [pc, #412]	@ (80013e0 <main+0x364>)
 8001242:	859a      	strh	r2, [r3, #44]	@ 0x2c
    global_mission_data.GYRO_R = imu_data.gyro_z;
 8001244:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8001248:	b21a      	sxth	r2, r3
 800124a:	4b65      	ldr	r3, [pc, #404]	@ (80013e0 <main+0x364>)
 800124c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    global_mission_data.GYRO_P = imu_data.gyro_x;
 800124e:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001252:	b21a      	sxth	r2, r3
 8001254:	4b62      	ldr	r3, [pc, #392]	@ (80013e0 <main+0x364>)
 8001256:	861a      	strh	r2, [r3, #48]	@ 0x30
    global_mission_data.GYRO_Y = imu_data.gyro_y;
 8001258:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 800125c:	b21a      	sxth	r2, r3
 800125e:	4b60      	ldr	r3, [pc, #384]	@ (80013e0 <main+0x364>)
 8001260:	865a      	strh	r2, [r3, #50]	@ 0x32
    global_mission_data.AUTO_GYRO_ROTATION_RATE = QENC_Get_Encoder0_Count();
 8001262:	f001 ff1d 	bl	80030a0 <QENC_Get_Encoder0_Count>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b5d      	ldr	r3, [pc, #372]	@ (80013e0 <main+0x364>)
 800126c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

    // needs to be updated
    global_mission_data.ACCEL_R = imu_data.accel_z;
 8001270:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8001274:	b21a      	sxth	r2, r3
 8001276:	4b5a      	ldr	r3, [pc, #360]	@ (80013e0 <main+0x364>)
 8001278:	869a      	strh	r2, [r3, #52]	@ 0x34
    global_mission_data.ACCEL_P = imu_data.accel_x;
 800127a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 800127e:	b21a      	sxth	r2, r3
 8001280:	4b57      	ldr	r3, [pc, #348]	@ (80013e0 <main+0x364>)
 8001282:	86da      	strh	r2, [r3, #54]	@ 0x36
    global_mission_data.ACCEL_Y = imu_data.accel_y;
 8001284:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8001288:	b21a      	sxth	r2, r3
 800128a:	4b55      	ldr	r3, [pc, #340]	@ (80013e0 <main+0x364>)
 800128c:	871a      	strh	r2, [r3, #56]	@ 0x38

    strlen = sprintf(global_mission_data.GPS_TIME, "%d:%d:%d",
                     gps_data.time_H,
 800128e:	f897 30f0 	ldrb.w	r3, [r7, #240]	@ 0xf0
    strlen = sprintf(global_mission_data.GPS_TIME, "%d:%d:%d",
 8001292:	461a      	mov	r2, r3
                     gps_data.time_M,
 8001294:	f897 30f1 	ldrb.w	r3, [r7, #241]	@ 0xf1
    strlen = sprintf(global_mission_data.GPS_TIME, "%d:%d:%d",
 8001298:	4619      	mov	r1, r3
                     gps_data.time_S);
 800129a:	f897 30f2 	ldrb.w	r3, [r7, #242]	@ 0xf2
    strlen = sprintf(global_mission_data.GPS_TIME, "%d:%d:%d",
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	460b      	mov	r3, r1
 80012a2:	4952      	ldr	r1, [pc, #328]	@ (80013ec <main+0x370>)
 80012a4:	4852      	ldr	r0, [pc, #328]	@ (80013f0 <main+0x374>)
 80012a6:	f011 f97b 	bl	80125a0 <siprintf>
 80012aa:	f8c7 0170 	str.w	r0, [r7, #368]	@ 0x170
    global_mission_data.GPS_ALTITUDE = gps_data.altitude;
 80012ae:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc9f 	bl	8000bf8 <__aeabi_d2f>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a48      	ldr	r2, [pc, #288]	@ (80013e0 <main+0x364>)
 80012be:	6553      	str	r3, [r2, #84]	@ 0x54
    global_mission_data.GPS_LATITUDE = gps_data.lat;
 80012c0:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	@ 0xf8
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fc96 	bl	8000bf8 <__aeabi_d2f>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a44      	ldr	r2, [pc, #272]	@ (80013e0 <main+0x364>)
 80012d0:	6593      	str	r3, [r2, #88]	@ 0x58
    global_mission_data.GPS_LONGITUDE = gps_data.lon;
 80012d2:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff fc8d 	bl	8000bf8 <__aeabi_d2f>
 80012de:	4603      	mov	r3, r0
 80012e0:	4a3f      	ldr	r2, [pc, #252]	@ (80013e0 <main+0x364>)
 80012e2:	65d3      	str	r3, [r2, #92]	@ 0x5c
    global_mission_data.GPS_SATS = gps_data.num_sat_used;
 80012e4:	f897 2110 	ldrb.w	r2, [r7, #272]	@ 0x110
 80012e8:	4b3d      	ldr	r3, [pc, #244]	@ (80013e0 <main+0x364>)
 80012ea:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

    // model packet
    char telemetry_string[200];
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%d,%d,%d,%d",
                     global_mission_data.TEAM_ID,      // team id
 80012ee:	4b3c      	ldr	r3, [pc, #240]	@ (80013e0 <main+0x364>)
 80012f0:	f9b3 3000 	ldrsh.w	r3, [r3]
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%d,%d,%d,%d",
 80012f4:	469a      	mov	sl, r3
 80012f6:	4b3a      	ldr	r3, [pc, #232]	@ (80013e0 <main+0x364>)
 80012f8:	68de      	ldr	r6, [r3, #12]
                     global_mission_data.MISSION_TIME, // temp; mission time
                     global_mission_data.PACKET_COUNT, // temp; packet count
                     global_mission_data.MODE,         // mode
 80012fa:	4b39      	ldr	r3, [pc, #228]	@ (80013e0 <main+0x364>)
 80012fc:	7c1b      	ldrb	r3, [r3, #16]
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%d,%d,%d,%d",
 80012fe:	61fb      	str	r3, [r7, #28]
                     global_mission_data.STATE,        // state
                     global_mission_data.ALTITUDE,     // temp; altitude
 8001300:	4b37      	ldr	r3, [pc, #220]	@ (80013e0 <main+0x364>)
 8001302:	6a1b      	ldr	r3, [r3, #32]
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%d,%d,%d,%d",
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f947 	bl	8000598 <__aeabi_f2d>
 800130a:	4604      	mov	r4, r0
 800130c:	460d      	mov	r5, r1
                     global_mission_data.TEMPERATURE,  // temperature
 800130e:	4b34      	ldr	r3, [pc, #208]	@ (80013e0 <main+0x364>)
 8001310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%d,%d,%d,%d",
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f940 	bl	8000598 <__aeabi_f2d>
 8001318:	4680      	mov	r8, r0
 800131a:	4689      	mov	r9, r1
                     global_mission_data.PRESSURE,     // pressure
 800131c:	4b30      	ldr	r3, [pc, #192]	@ (80013e0 <main+0x364>)
 800131e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%d,%d,%d,%d",
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f939 	bl	8000598 <__aeabi_f2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
                     global_mission_data.VOLTAGE,
 800132a:	492d      	ldr	r1, [pc, #180]	@ (80013e0 <main+0x364>)
 800132c:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%d,%d,%d,%d",
 800132e:	61b9      	str	r1, [r7, #24]
                     global_mission_data.GYRO_R, // gyro_r
 8001330:	492b      	ldr	r1, [pc, #172]	@ (80013e0 <main+0x364>)
 8001332:	f9b1 102e 	ldrsh.w	r1, [r1, #46]	@ 0x2e
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%d,%d,%d,%d",
 8001336:	6179      	str	r1, [r7, #20]
                     global_mission_data.GYRO_P, // gyro_p
 8001338:	4929      	ldr	r1, [pc, #164]	@ (80013e0 <main+0x364>)
 800133a:	f9b1 1030 	ldrsh.w	r1, [r1, #48]	@ 0x30
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%d,%d,%d,%d",
 800133e:	60b9      	str	r1, [r7, #8]
                     global_mission_data.GYRO_Y
 8001340:	4927      	ldr	r1, [pc, #156]	@ (80013e0 <main+0x364>)
 8001342:	f9b1 1032 	ldrsh.w	r1, [r1, #50]	@ 0x32
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%d,%d,%d,%d",
 8001346:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800134a:	910d      	str	r1, [sp, #52]	@ 0x34
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	910c      	str	r1, [sp, #48]	@ 0x30
 8001350:	6979      	ldr	r1, [r7, #20]
 8001352:	910b      	str	r1, [sp, #44]	@ 0x2c
 8001354:	69b9      	ldr	r1, [r7, #24]
 8001356:	910a      	str	r1, [sp, #40]	@ 0x28
 8001358:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800135c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001360:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001364:	4b23      	ldr	r3, [pc, #140]	@ (80013f4 <main+0x378>)
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	9600      	str	r6, [sp, #0]
 800136e:	4b22      	ldr	r3, [pc, #136]	@ (80013f8 <main+0x37c>)
 8001370:	4652      	mov	r2, sl
 8001372:	4922      	ldr	r1, [pc, #136]	@ (80013fc <main+0x380>)
 8001374:	f011 f914 	bl	80125a0 <siprintf>
 8001378:	f8c7 0170 	str.w	r0, [r7, #368]	@ 0x170
                     // gyro_y
    );
    // strlen = sizeof(telemetry_string);
    HAL_UART_Transmit(&huart3, telemetry_string, strlen, HAL_MAX_DELAY);
 800137c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001380:	b29a      	uxth	r2, r3
 8001382:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800138a:	481d      	ldr	r0, [pc, #116]	@ (8001400 <main+0x384>)
 800138c:	f00a ffa1 	bl	800c2d2 <HAL_UART_Transmit>
    memset(telemetry_string, 0, sizeof(telemetry_string)); // flush array
 8001390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001394:	22c8      	movs	r2, #200	@ 0xc8
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f011 f9f5 	bl	8012788 <memset>
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
                     global_mission_data.ACCEL_R, // accel_r
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <main+0x364>)
 80013a0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80013a4:	61fb      	str	r3, [r7, #28]
                     global_mission_data.ACCEL_P, // accel_p
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <main+0x364>)
 80013a8:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80013ac:	61bb      	str	r3, [r7, #24]
                     global_mission_data.ACCEL_Y,
 80013ae:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <main+0x364>)
 80013b0:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80013b4:	617b      	str	r3, [r7, #20]
                     global_mission_data.MAG_R,                   // temp; mag_r
 80013b6:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <main+0x364>)
 80013b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f8ec 	bl	8000598 <__aeabi_f2d>
 80013c0:	4605      	mov	r5, r0
 80013c2:	460e      	mov	r6, r1
                     global_mission_data.MAG_P,                   // temp; mag_p
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <main+0x364>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f8e5 	bl	8000598 <__aeabi_f2d>
 80013ce:	e9c7 0102 	strd	r0, r1, [r7, #8]
                     global_mission_data.MAG_Y,                   // temp; mag_y
 80013d2:	4b03      	ldr	r3, [pc, #12]	@ (80013e0 <main+0x364>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d6:	e015      	b.n	8001404 <main+0x388>
 80013d8:	48000400 	.word	0x48000400
 80013dc:	2000049c 	.word	0x2000049c
 80013e0:	200002d4 	.word	0x200002d4
 80013e4:	2000040c 	.word	0x2000040c
 80013e8:	0801571c 	.word	0x0801571c
 80013ec:	0801572c 	.word	0x0801572c
 80013f0:	2000031e 	.word	0x2000031e
 80013f4:	200002e5 	.word	0x200002e5
 80013f8:	200002d6 	.word	0x200002d6
 80013fc:	08015738 	.word	0x08015738
 8001400:	2000075c 	.word	0x2000075c
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f8c7 	bl	8000598 <__aeabi_f2d>
 800140a:	e9c7 0100 	strd	r0, r1, [r7]
                     global_mission_data.AUTO_GYRO_ROTATION_RATE, // temp; auto-gyro rotation rate
 800140e:	4b30      	ldr	r3, [pc, #192]	@ (80014d0 <main+0x454>)
 8001410:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001414:	613b      	str	r3, [r7, #16]
                     global_mission_data.GPS_TIME,                // temp; gps time
                     global_mission_data.GPS_ALTITUDE,            // temp; gps altitude
 8001416:	4b2e      	ldr	r3, [pc, #184]	@ (80014d0 <main+0x454>)
 8001418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f8bc 	bl	8000598 <__aeabi_f2d>
 8001420:	4682      	mov	sl, r0
 8001422:	468b      	mov	fp, r1
                     global_mission_data.GPS_LATITUDE,            // temp; gps latitude
 8001424:	4b2a      	ldr	r3, [pc, #168]	@ (80014d0 <main+0x454>)
 8001426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f8b5 	bl	8000598 <__aeabi_f2d>
 800142e:	4680      	mov	r8, r0
 8001430:	4689      	mov	r9, r1
                     global_mission_data.GPS_LONGITUDE,           // temp; gps longitude
 8001432:	4b27      	ldr	r3, [pc, #156]	@ (80014d0 <main+0x454>)
 8001434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f8ae 	bl	8000598 <__aeabi_f2d>
                     global_mission_data.GPS_SATS,                // temp; # of gps satellites
 800143c:	4b24      	ldr	r3, [pc, #144]	@ (80014d0 <main+0x454>)
 800143e:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001442:	461a      	mov	r2, r3
 8001444:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001448:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <main+0x458>)
 800144a:	9311      	str	r3, [sp, #68]	@ 0x44
 800144c:	9210      	str	r2, [sp, #64]	@ 0x40
 800144e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8001452:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 8001456:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 800145a:	4b1f      	ldr	r3, [pc, #124]	@ (80014d8 <main+0x45c>)
 800145c:	9309      	str	r3, [sp, #36]	@ 0x24
 800145e:	6939      	ldr	r1, [r7, #16]
 8001460:	9108      	str	r1, [sp, #32]
 8001462:	ed97 7b00 	vldr	d7, [r7]
 8001466:	ed8d 7b06 	vstr	d7, [sp, #24]
 800146a:	ed97 7b02 	vldr	d7, [r7, #8]
 800146e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001472:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8001476:	6979      	ldr	r1, [r7, #20]
 8001478:	9100      	str	r1, [sp, #0]
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	69fa      	ldr	r2, [r7, #28]
 800147e:	4917      	ldr	r1, [pc, #92]	@ (80014dc <main+0x460>)
 8001480:	4620      	mov	r0, r4
 8001482:	f011 f88d 	bl	80125a0 <siprintf>
 8001486:	f8c7 0170 	str.w	r0, [r7, #368]	@ 0x170
                     global_mission_data.CMD_ECHO);
    HAL_UART_Transmit(&huart3, telemetry_string, strlen, HAL_MAX_DELAY);
 800148a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800148e:	b29a      	uxth	r2, r3
 8001490:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001494:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001498:	4811      	ldr	r0, [pc, #68]	@ (80014e0 <main+0x464>)
 800149a:	f00a ff1a 	bl	800c2d2 <HAL_UART_Transmit>

    global_mission_data.PACKET_COUNT = global_mission_data.PACKET_COUNT + 1;
 800149e:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <main+0x454>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a0a      	ldr	r2, [pc, #40]	@ (80014d0 <main+0x454>)
 80014a6:	60d3      	str	r3, [r2, #12]

    HAL_Delay(1000);
 80014a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014ac:	f002 fec4 	bl	8004238 <HAL_Delay>

    HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2180      	movs	r1, #128	@ 0x80
 80014b4:	480b      	ldr	r0, [pc, #44]	@ (80014e4 <main+0x468>)
 80014b6:	f004 fd95 	bl	8005fe4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80014ba:	2064      	movs	r0, #100	@ 0x64
 80014bc:	f002 febc 	bl	8004238 <HAL_Delay>
    HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2180      	movs	r1, #128	@ 0x80
 80014c4:	4807      	ldr	r0, [pc, #28]	@ (80014e4 <main+0x468>)
 80014c6:	f004 fd8d 	bl	8005fe4 <HAL_GPIO_WritePin>
  {
 80014ca:	bf00      	nop
 80014cc:	e66d      	b.n	80011aa <main+0x12e>
 80014ce:	bf00      	nop
 80014d0:	200002d4 	.word	0x200002d4
 80014d4:	20000335 	.word	0x20000335
 80014d8:	2000031e 	.word	0x2000031e
 80014dc:	08015764 	.word	0x08015764
 80014e0:	2000075c 	.word	0x2000075c
 80014e4:	48000400 	.word	0x48000400

080014e8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b09a      	sub	sp, #104	@ 0x68
 80014ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014f2:	2238      	movs	r2, #56	@ 0x38
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f011 f946 	bl	8012788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  RCC_CRSInitTypeDef pInit = {0};
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
 800151a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800151c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001520:	f007 f860 	bl	80085e4 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 8001524:	f006 ffce 	bl	80084c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001528:	4b37      	ldr	r3, [pc, #220]	@ (8001608 <SystemClock_Config+0x120>)
 800152a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800152e:	4a36      	ldr	r2, [pc, #216]	@ (8001608 <SystemClock_Config+0x120>)
 8001530:	f023 0318 	bic.w	r3, r3, #24
 8001534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 8001538:	232e      	movs	r3, #46	@ 0x2e
 800153a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800153c:	2301      	movs	r3, #1
 800153e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001540:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001544:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001546:	2340      	movs	r3, #64	@ 0x40
 8001548:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800154a:	2301      	movs	r3, #1
 800154c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800154e:	2301      	movs	r3, #1
 8001550:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001552:	2302      	movs	r3, #2
 8001554:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001556:	2302      	movs	r3, #2
 8001558:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800155a:	2301      	movs	r3, #1
 800155c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 800155e:	2308      	movs	r3, #8
 8001560:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001562:	2302      	movs	r3, #2
 8001564:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001566:	2302      	movs	r3, #2
 8001568:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800156a:	2302      	movs	r3, #2
 800156c:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001572:	4618      	mov	r0, r3
 8001574:	f007 f8ea 	bl	800874c <HAL_RCC_OscConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800157e:	f000 fe79 	bl	8002274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001582:	230f      	movs	r3, #15
 8001584:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001586:	2303      	movs	r3, #3
 8001588:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800158e:	2300      	movs	r3, #0
 8001590:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	2102      	movs	r1, #2
 800159c:	4618      	mov	r0, r3
 800159e:	f007 fbe7 	bl	8008d70 <HAL_RCC_ClockConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80015a8:	f000 fe64 	bl	8002274 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 80015b2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80015b6:	f007 fd17 	bl	8008fe8 <HAL_RCC_MCOConfig>
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSE);
 80015ba:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80015be:	f008 f8a7 	bl	8009710 <HAL_RCCEx_EnableLSCO>

  /** Enable the SYSCFG APB clock
   */
  __HAL_RCC_CRS_CLK_ENABLE();
 80015c2:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <SystemClock_Config+0x120>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c6:	4a10      	ldr	r2, [pc, #64]	@ (8001608 <SystemClock_Config+0x120>)
 80015c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <SystemClock_Config+0x120>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]

  /** Configures CRS
   */
  pInit.Prescaler = RCC_CRS_SYNC_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
  pInit.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80015de:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80015e2:	60bb      	str	r3, [r7, #8]
  pInit.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  pInit.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 32768);
 80015e8:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 80015ec:	613b      	str	r3, [r7, #16]
  pInit.ErrorLimitValue = 34;
 80015ee:	2322      	movs	r3, #34	@ 0x22
 80015f0:	617b      	str	r3, [r7, #20]
  pInit.HSI48CalibrationValue = 32;
 80015f2:	2320      	movs	r3, #32
 80015f4:	61bb      	str	r3, [r7, #24]

  HAL_RCCEx_CRSConfig(&pInit);
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	4618      	mov	r0, r3
 80015fa:	f008 f8f3 	bl	80097e4 <HAL_RCCEx_CRSConfig>
}
 80015fe:	bf00      	nop
 8001600:	3768      	adds	r7, #104	@ 0x68
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000

0800160c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	@ 0x30
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001612:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2220      	movs	r2, #32
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f011 f8af 	bl	8012788 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 800162a:	4b32      	ldr	r3, [pc, #200]	@ (80016f4 <MX_ADC1_Init+0xe8>)
 800162c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001630:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001632:	4b30      	ldr	r3, [pc, #192]	@ (80016f4 <MX_ADC1_Init+0xe8>)
 8001634:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001638:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800163a:	4b2e      	ldr	r3, [pc, #184]	@ (80016f4 <MX_ADC1_Init+0xe8>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001640:	4b2c      	ldr	r3, [pc, #176]	@ (80016f4 <MX_ADC1_Init+0xe8>)
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001646:	4b2b      	ldr	r3, [pc, #172]	@ (80016f4 <MX_ADC1_Init+0xe8>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800164c:	4b29      	ldr	r3, [pc, #164]	@ (80016f4 <MX_ADC1_Init+0xe8>)
 800164e:	2200      	movs	r2, #0
 8001650:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001652:	4b28      	ldr	r3, [pc, #160]	@ (80016f4 <MX_ADC1_Init+0xe8>)
 8001654:	2204      	movs	r2, #4
 8001656:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001658:	4b26      	ldr	r3, [pc, #152]	@ (80016f4 <MX_ADC1_Init+0xe8>)
 800165a:	2200      	movs	r2, #0
 800165c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800165e:	4b25      	ldr	r3, [pc, #148]	@ (80016f4 <MX_ADC1_Init+0xe8>)
 8001660:	2200      	movs	r2, #0
 8001662:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001664:	4b23      	ldr	r3, [pc, #140]	@ (80016f4 <MX_ADC1_Init+0xe8>)
 8001666:	2201      	movs	r2, #1
 8001668:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800166a:	4b22      	ldr	r3, [pc, #136]	@ (80016f4 <MX_ADC1_Init+0xe8>)
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001672:	4b20      	ldr	r3, [pc, #128]	@ (80016f4 <MX_ADC1_Init+0xe8>)
 8001674:	2200      	movs	r2, #0
 8001676:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001678:	4b1e      	ldr	r3, [pc, #120]	@ (80016f4 <MX_ADC1_Init+0xe8>)
 800167a:	2200      	movs	r2, #0
 800167c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800167e:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <MX_ADC1_Init+0xe8>)
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001686:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <MX_ADC1_Init+0xe8>)
 8001688:	2200      	movs	r2, #0
 800168a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800168c:	4b19      	ldr	r3, [pc, #100]	@ (80016f4 <MX_ADC1_Init+0xe8>)
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001694:	4817      	ldr	r0, [pc, #92]	@ (80016f4 <MX_ADC1_Init+0xe8>)
 8001696:	f002 ffeb 	bl	8004670 <HAL_ADC_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80016a0:	f000 fde8 	bl	8002274 <Error_Handler>
  }

  /** Configure the ADC multi-mode
   */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80016a4:	2300      	movs	r3, #0
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80016a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ac:	4619      	mov	r1, r3
 80016ae:	4811      	ldr	r0, [pc, #68]	@ (80016f4 <MX_ADC1_Init+0xe8>)
 80016b0:	f003 fdde 	bl	8005270 <HAL_ADCEx_MultiModeConfigChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80016ba:	f000 fddb 	bl	8002274 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_9;
 80016be:	4b0e      	ldr	r3, [pc, #56]	@ (80016f8 <MX_ADC1_Init+0xec>)
 80016c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016c2:	2306      	movs	r3, #6
 80016c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016ca:	237f      	movs	r3, #127	@ 0x7f
 80016cc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016ce:	2304      	movs	r3, #4
 80016d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	4619      	mov	r1, r3
 80016da:	4806      	ldr	r0, [pc, #24]	@ (80016f4 <MX_ADC1_Init+0xe8>)
 80016dc:	f003 f976 	bl	80049cc <HAL_ADC_ConfigChannel>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80016e6:	f000 fdc5 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80016ea:	bf00      	nop
 80016ec:	3730      	adds	r7, #48	@ 0x30
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000340 	.word	0x20000340
 80016f8:	25b00200 	.word	0x25b00200

080016fc <MX_CORDIC_Init>:
 * @brief CORDIC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CORDIC_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <MX_CORDIC_Init+0x20>)
 8001702:	4a07      	ldr	r2, [pc, #28]	@ (8001720 <MX_CORDIC_Init+0x24>)
 8001704:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	@ (800171c <MX_CORDIC_Init+0x20>)
 8001708:	f003 fe9a 	bl	8005440 <HAL_CORDIC_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001712:	f000 fdaf 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200003ac 	.word	0x200003ac
 8001720:	40020c00 	.word	0x40020c00

08001724 <MX_FMAC_Init>:
 * @brief FMAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_FMAC_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8001728:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <MX_FMAC_Init+0x20>)
 800172a:	4a07      	ldr	r2, [pc, #28]	@ (8001748 <MX_FMAC_Init+0x24>)
 800172c:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	@ (8001744 <MX_FMAC_Init+0x20>)
 8001730:	f004 fa12 	bl	8005b58 <HAL_FMAC_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 800173a:	f000 fd9b 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200003d4 	.word	0x200003d4
 8001748:	40021400 	.word	0x40021400

0800174c <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001750:	4b1b      	ldr	r3, [pc, #108]	@ (80017c0 <MX_I2C3_Init+0x74>)
 8001752:	4a1c      	ldr	r2, [pc, #112]	@ (80017c4 <MX_I2C3_Init+0x78>)
 8001754:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10B17DB5;
 8001756:	4b1a      	ldr	r3, [pc, #104]	@ (80017c0 <MX_I2C3_Init+0x74>)
 8001758:	4a1b      	ldr	r2, [pc, #108]	@ (80017c8 <MX_I2C3_Init+0x7c>)
 800175a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800175c:	4b18      	ldr	r3, [pc, #96]	@ (80017c0 <MX_I2C3_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001762:	4b17      	ldr	r3, [pc, #92]	@ (80017c0 <MX_I2C3_Init+0x74>)
 8001764:	2201      	movs	r2, #1
 8001766:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001768:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <MX_I2C3_Init+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800176e:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <MX_I2C3_Init+0x74>)
 8001770:	2200      	movs	r2, #0
 8001772:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001774:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <MX_I2C3_Init+0x74>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800177a:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <MX_I2C3_Init+0x74>)
 800177c:	2200      	movs	r2, #0
 800177e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001780:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <MX_I2C3_Init+0x74>)
 8001782:	2200      	movs	r2, #0
 8001784:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001786:	480e      	ldr	r0, [pc, #56]	@ (80017c0 <MX_I2C3_Init+0x74>)
 8001788:	f004 fc44 	bl	8006014 <HAL_I2C_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001792:	f000 fd6f 	bl	8002274 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001796:	2100      	movs	r1, #0
 8001798:	4809      	ldr	r0, [pc, #36]	@ (80017c0 <MX_I2C3_Init+0x74>)
 800179a:	f005 f85f 	bl	800685c <HAL_I2CEx_ConfigAnalogFilter>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80017a4:	f000 fd66 	bl	8002274 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80017a8:	2100      	movs	r1, #0
 80017aa:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <MX_I2C3_Init+0x74>)
 80017ac:	f005 f8a1 	bl	80068f2 <HAL_I2CEx_ConfigDigitalFilter>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80017b6:	f000 fd5d 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	2000040c 	.word	0x2000040c
 80017c4:	40007800 	.word	0x40007800
 80017c8:	10b17db5 	.word	0x10b17db5

080017cc <MX_IRTIM_Init>:
 * @brief IRTIM Initialization Function
 * @param None
 * @retval None
 */
static void MX_IRTIM_Init(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END IRTIM_Init 1 */
  /* USER CODE BEGIN IRTIM_Init 2 */

  /* USER CODE END IRTIM_Init 2 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <MX_RNG_Init>:
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80017e0:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <MX_RNG_Init+0x24>)
 80017e2:	4a08      	ldr	r2, [pc, #32]	@ (8001804 <MX_RNG_Init+0x28>)
 80017e4:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80017e6:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <MX_RNG_Init+0x24>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80017ec:	4804      	ldr	r0, [pc, #16]	@ (8001800 <MX_RNG_Init+0x24>)
 80017ee:	f008 f83b 	bl	8009868 <HAL_RNG_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80017f8:	f000 fd3c 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000460 	.word	0x20000460
 8001804:	50060800 	.word	0x50060800

08001808 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 800180c:	4b16      	ldr	r3, [pc, #88]	@ (8001868 <MX_RTC_Init+0x60>)
 800180e:	4a17      	ldr	r2, [pc, #92]	@ (800186c <MX_RTC_Init+0x64>)
 8001810:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <MX_RTC_Init+0x60>)
 8001814:	2200      	movs	r2, #0
 8001816:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001818:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <MX_RTC_Init+0x60>)
 800181a:	227f      	movs	r2, #127	@ 0x7f
 800181c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800181e:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <MX_RTC_Init+0x60>)
 8001820:	22ff      	movs	r2, #255	@ 0xff
 8001822:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001824:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <MX_RTC_Init+0x60>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800182a:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <MX_RTC_Init+0x60>)
 800182c:	2200      	movs	r2, #0
 800182e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001830:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <MX_RTC_Init+0x60>)
 8001832:	2200      	movs	r2, #0
 8001834:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001836:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <MX_RTC_Init+0x60>)
 8001838:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800183c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800183e:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <MX_RTC_Init+0x60>)
 8001840:	2200      	movs	r2, #0
 8001842:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001844:	4808      	ldr	r0, [pc, #32]	@ (8001868 <MX_RTC_Init+0x60>)
 8001846:	f008 f844 	bl	80098d2 <HAL_RTC_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8001850:	f000 fd10 	bl	8002274 <Error_Handler>
  }

  /** Enable the reference Clock input
   */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8001854:	4804      	ldr	r0, [pc, #16]	@ (8001868 <MX_RTC_Init+0x60>)
 8001856:	f008 f958 	bl	8009b0a <HAL_RTCEx_SetRefClock>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001860:	f000 fd08 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000474 	.word	0x20000474
 800186c:	40002800 	.word	0x40002800

08001870 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001874:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <MX_SPI2_Init+0x74>)
 8001876:	4a1c      	ldr	r2, [pc, #112]	@ (80018e8 <MX_SPI2_Init+0x78>)
 8001878:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800187a:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <MX_SPI2_Init+0x74>)
 800187c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001880:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001882:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <MX_SPI2_Init+0x74>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001888:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <MX_SPI2_Init+0x74>)
 800188a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800188e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001890:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <MX_SPI2_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001896:	4b13      	ldr	r3, [pc, #76]	@ (80018e4 <MX_SPI2_Init+0x74>)
 8001898:	2200      	movs	r2, #0
 800189a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800189c:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <MX_SPI2_Init+0x74>)
 800189e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018a2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <MX_SPI2_Init+0x74>)
 80018a6:	2210      	movs	r2, #16
 80018a8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <MX_SPI2_Init+0x74>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	@ (80018e4 <MX_SPI2_Init+0x74>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <MX_SPI2_Init+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80018bc:	4b09      	ldr	r3, [pc, #36]	@ (80018e4 <MX_SPI2_Init+0x74>)
 80018be:	2207      	movs	r2, #7
 80018c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018c2:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <MX_SPI2_Init+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018c8:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <MX_SPI2_Init+0x74>)
 80018ca:	2208      	movs	r2, #8
 80018cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018ce:	4805      	ldr	r0, [pc, #20]	@ (80018e4 <MX_SPI2_Init+0x74>)
 80018d0:	f008 f95f 	bl	8009b92 <HAL_SPI_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80018da:	f000 fccb 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	2000049c 	.word	0x2000049c
 80018e8:	40003800 	.word	0x40003800

080018ec <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b092      	sub	sp, #72	@ 0x48
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f6:	2224      	movs	r2, #36	@ 0x24
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f010 ff44 	bl	8012788 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001900:	f107 0318 	add.w	r3, r7, #24
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 800190c:	463b      	mov	r3, r7
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]
 800191a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800191c:	4b2e      	ldr	r3, [pc, #184]	@ (80019d8 <MX_TIM1_Init+0xec>)
 800191e:	4a2f      	ldr	r2, [pc, #188]	@ (80019dc <MX_TIM1_Init+0xf0>)
 8001920:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001922:	4b2d      	ldr	r3, [pc, #180]	@ (80019d8 <MX_TIM1_Init+0xec>)
 8001924:	2200      	movs	r2, #0
 8001926:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001928:	4b2b      	ldr	r3, [pc, #172]	@ (80019d8 <MX_TIM1_Init+0xec>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800192e:	4b2a      	ldr	r3, [pc, #168]	@ (80019d8 <MX_TIM1_Init+0xec>)
 8001930:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001934:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001936:	4b28      	ldr	r3, [pc, #160]	@ (80019d8 <MX_TIM1_Init+0xec>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800193c:	4b26      	ldr	r3, [pc, #152]	@ (80019d8 <MX_TIM1_Init+0xec>)
 800193e:	2200      	movs	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001942:	4b25      	ldr	r3, [pc, #148]	@ (80019d8 <MX_TIM1_Init+0xec>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001948:	2301      	movs	r3, #1
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800194c:	2300      	movs	r3, #0
 800194e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001950:	2301      	movs	r3, #1
 8001952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001954:	2300      	movs	r3, #0
 8001956:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800195c:	2300      	movs	r3, #0
 800195e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001960:	2301      	movs	r3, #1
 8001962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800196c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001970:	4619      	mov	r1, r3
 8001972:	4819      	ldr	r0, [pc, #100]	@ (80019d8 <MX_TIM1_Init+0xec>)
 8001974:	f009 f961 	bl	800ac3a <HAL_TIM_Encoder_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800197e:	f000 fc79 	bl	8002274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800198e:	f107 0318 	add.w	r3, r7, #24
 8001992:	4619      	mov	r1, r3
 8001994:	4810      	ldr	r0, [pc, #64]	@ (80019d8 <MX_TIM1_Init+0xec>)
 8001996:	f00a faa9 	bl	800beec <HAL_TIMEx_MasterConfigSynchronization>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 80019a0:	f000 fc68 	bl	8002274 <Error_Handler>
  }
  sEncoderIndexConfig.Polarity = TIM_ENCODERINDEX_POLARITY_NONINVERTED;
 80019a4:	2300      	movs	r3, #0
 80019a6:	603b      	str	r3, [r7, #0]
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	607b      	str	r3, [r7, #4]
  sEncoderIndexConfig.Filter = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60bb      	str	r3, [r7, #8]
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	733b      	strb	r3, [r7, #12]
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_00;
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_ConfigEncoderIndex(&htim1, &sEncoderIndexConfig) != HAL_OK)
 80019bc:	463b      	mov	r3, r7
 80019be:	4619      	mov	r1, r3
 80019c0:	4805      	ldr	r0, [pc, #20]	@ (80019d8 <MX_TIM1_Init+0xec>)
 80019c2:	f00a fbb5 	bl	800c130 <HAL_TIMEx_ConfigEncoderIndex>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80019cc:	f000 fc52 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
}
 80019d0:	bf00      	nop
 80019d2:	3748      	adds	r7, #72	@ 0x48
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000500 	.word	0x20000500
 80019dc:	40012c00 	.word	0x40012c00

080019e0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08e      	sub	sp, #56	@ 0x38
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a00:	463b      	mov	r3, r7
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
 8001a0c:	611a      	str	r2, [r3, #16]
 8001a0e:	615a      	str	r2, [r3, #20]
 8001a10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a12:	4b3d      	ldr	r3, [pc, #244]	@ (8001b08 <MX_TIM3_Init+0x128>)
 8001a14:	4a3d      	ldr	r2, [pc, #244]	@ (8001b0c <MX_TIM3_Init+0x12c>)
 8001a16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a18:	4b3b      	ldr	r3, [pc, #236]	@ (8001b08 <MX_TIM3_Init+0x128>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b08 <MX_TIM3_Init+0x128>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a24:	4b38      	ldr	r3, [pc, #224]	@ (8001b08 <MX_TIM3_Init+0x128>)
 8001a26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2c:	4b36      	ldr	r3, [pc, #216]	@ (8001b08 <MX_TIM3_Init+0x128>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a32:	4b35      	ldr	r3, [pc, #212]	@ (8001b08 <MX_TIM3_Init+0x128>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a38:	4833      	ldr	r0, [pc, #204]	@ (8001b08 <MX_TIM3_Init+0x128>)
 8001a3a:	f008 ffdf 	bl	800a9fc <HAL_TIM_Base_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001a44:	f000 fc16 	bl	8002274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a52:	4619      	mov	r1, r3
 8001a54:	482c      	ldr	r0, [pc, #176]	@ (8001b08 <MX_TIM3_Init+0x128>)
 8001a56:	f009 fc87 	bl	800b368 <HAL_TIM_ConfigClockSource>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001a60:	f000 fc08 	bl	8002274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a64:	4828      	ldr	r0, [pc, #160]	@ (8001b08 <MX_TIM3_Init+0x128>)
 8001a66:	f009 f891 	bl	800ab8c <HAL_TIM_PWM_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001a70:	f000 fc00 	bl	8002274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a7c:	f107 031c 	add.w	r3, r7, #28
 8001a80:	4619      	mov	r1, r3
 8001a82:	4821      	ldr	r0, [pc, #132]	@ (8001b08 <MX_TIM3_Init+0x128>)
 8001a84:	f00a fa32 	bl	800beec <HAL_TIMEx_MasterConfigSynchronization>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001a8e:	f000 fbf1 	bl	8002274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a92:	2360      	movs	r3, #96	@ 0x60
 8001a94:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4817      	ldr	r0, [pc, #92]	@ (8001b08 <MX_TIM3_Init+0x128>)
 8001aaa:	f009 fb49 	bl	800b140 <HAL_TIM_PWM_ConfigChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001ab4:	f000 fbde 	bl	8002274 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ab8:	463b      	mov	r3, r7
 8001aba:	2204      	movs	r2, #4
 8001abc:	4619      	mov	r1, r3
 8001abe:	4812      	ldr	r0, [pc, #72]	@ (8001b08 <MX_TIM3_Init+0x128>)
 8001ac0:	f009 fb3e 	bl	800b140 <HAL_TIM_PWM_ConfigChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001aca:	f000 fbd3 	bl	8002274 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ace:	463b      	mov	r3, r7
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480c      	ldr	r0, [pc, #48]	@ (8001b08 <MX_TIM3_Init+0x128>)
 8001ad6:	f009 fb33 	bl	800b140 <HAL_TIM_PWM_ConfigChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001ae0:	f000 fbc8 	bl	8002274 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4807      	ldr	r0, [pc, #28]	@ (8001b08 <MX_TIM3_Init+0x128>)
 8001aec:	f009 fb28 	bl	800b140 <HAL_TIM_PWM_ConfigChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001af6:	f000 fbbd 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001afa:	4803      	ldr	r0, [pc, #12]	@ (8001b08 <MX_TIM3_Init+0x128>)
 8001afc:	f000 feb8 	bl	8002870 <HAL_TIM_MspPostInit>
}
 8001b00:	bf00      	nop
 8001b02:	3738      	adds	r7, #56	@ 0x38
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	2000054c 	.word	0x2000054c
 8001b0c:	40000400 	.word	0x40000400

08001b10 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b092      	sub	sp, #72	@ 0x48
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b1a:	2224      	movs	r2, #36	@ 0x24
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f010 fe32 	bl	8012788 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b24:	f107 0318 	add.w	r3, r7, #24
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 8001b30:	463b      	mov	r3, r7
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]
 8001b3e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b40:	4b2e      	ldr	r3, [pc, #184]	@ (8001bfc <MX_TIM8_Init+0xec>)
 8001b42:	4a2f      	ldr	r2, [pc, #188]	@ (8001c00 <MX_TIM8_Init+0xf0>)
 8001b44:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b46:	4b2d      	ldr	r3, [pc, #180]	@ (8001bfc <MX_TIM8_Init+0xec>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bfc <MX_TIM8_Init+0xec>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b52:	4b2a      	ldr	r3, [pc, #168]	@ (8001bfc <MX_TIM8_Init+0xec>)
 8001b54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b58:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5a:	4b28      	ldr	r3, [pc, #160]	@ (8001bfc <MX_TIM8_Init+0xec>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b60:	4b26      	ldr	r3, [pc, #152]	@ (8001bfc <MX_TIM8_Init+0xec>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b66:	4b25      	ldr	r3, [pc, #148]	@ (8001bfc <MX_TIM8_Init+0xec>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b74:	2301      	movs	r3, #1
 8001b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b80:	2300      	movs	r3, #0
 8001b82:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b84:	2301      	movs	r3, #1
 8001b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001b90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b94:	4619      	mov	r1, r3
 8001b96:	4819      	ldr	r0, [pc, #100]	@ (8001bfc <MX_TIM8_Init+0xec>)
 8001b98:	f009 f84f 	bl	800ac3a <HAL_TIM_Encoder_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001ba2:	f000 fb67 	bl	8002274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001bb2:	f107 0318 	add.w	r3, r7, #24
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4810      	ldr	r0, [pc, #64]	@ (8001bfc <MX_TIM8_Init+0xec>)
 8001bba:	f00a f997 	bl	800beec <HAL_TIMEx_MasterConfigSynchronization>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8001bc4:	f000 fb56 	bl	8002274 <Error_Handler>
  }
  sEncoderIndexConfig.Polarity = TIM_ENCODERINDEX_POLARITY_NONINVERTED;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	603b      	str	r3, [r7, #0]
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	607b      	str	r3, [r7, #4]
  sEncoderIndexConfig.Filter = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	733b      	strb	r3, [r7, #12]
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_00;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	613b      	str	r3, [r7, #16]
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_ConfigEncoderIndex(&htim8, &sEncoderIndexConfig) != HAL_OK)
 8001be0:	463b      	mov	r3, r7
 8001be2:	4619      	mov	r1, r3
 8001be4:	4805      	ldr	r0, [pc, #20]	@ (8001bfc <MX_TIM8_Init+0xec>)
 8001be6:	f00a faa3 	bl	800c130 <HAL_TIMEx_ConfigEncoderIndex>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM8_Init+0xe4>
  {
    Error_Handler();
 8001bf0:	f000 fb40 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
}
 8001bf4:	bf00      	nop
 8001bf6:	3748      	adds	r7, #72	@ 0x48
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000598 	.word	0x20000598
 8001c00:	40013400 	.word	0x40013400

08001c04 <MX_TIM15_Init>:
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b098      	sub	sp, #96	@ 0x60
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c16:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
 8001c24:	611a      	str	r2, [r3, #16]
 8001c26:	615a      	str	r2, [r3, #20]
 8001c28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	2234      	movs	r2, #52	@ 0x34
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f010 fda9 	bl	8012788 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001c36:	4b34      	ldr	r3, [pc, #208]	@ (8001d08 <MX_TIM15_Init+0x104>)
 8001c38:	4a34      	ldr	r2, [pc, #208]	@ (8001d0c <MX_TIM15_Init+0x108>)
 8001c3a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001c3c:	4b32      	ldr	r3, [pc, #200]	@ (8001d08 <MX_TIM15_Init+0x104>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c42:	4b31      	ldr	r3, [pc, #196]	@ (8001d08 <MX_TIM15_Init+0x104>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001c48:	4b2f      	ldr	r3, [pc, #188]	@ (8001d08 <MX_TIM15_Init+0x104>)
 8001c4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c4e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c50:	4b2d      	ldr	r3, [pc, #180]	@ (8001d08 <MX_TIM15_Init+0x104>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001c56:	4b2c      	ldr	r3, [pc, #176]	@ (8001d08 <MX_TIM15_Init+0x104>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001d08 <MX_TIM15_Init+0x104>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001c62:	4829      	ldr	r0, [pc, #164]	@ (8001d08 <MX_TIM15_Init+0x104>)
 8001c64:	f008 ff92 	bl	800ab8c <HAL_TIM_PWM_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001c6e:	f000 fb01 	bl	8002274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001c7a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4821      	ldr	r0, [pc, #132]	@ (8001d08 <MX_TIM15_Init+0x104>)
 8001c82:	f00a f933 	bl	800beec <HAL_TIMEx_MasterConfigSynchronization>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001c8c:	f000 faf2 	bl	8002274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c90:	2360      	movs	r3, #96	@ 0x60
 8001c92:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4814      	ldr	r0, [pc, #80]	@ (8001d08 <MX_TIM15_Init+0x104>)
 8001cb6:	f009 fa43 	bl	800b140 <HAL_TIM_PWM_ConfigChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001cc0:	f000 fad8 	bl	8002274 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cdc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4807      	ldr	r0, [pc, #28]	@ (8001d08 <MX_TIM15_Init+0x104>)
 8001cec:	f00a f98c 	bl	800c008 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001cf6:	f000 fabd 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001cfa:	4803      	ldr	r0, [pc, #12]	@ (8001d08 <MX_TIM15_Init+0x104>)
 8001cfc:	f000 fdb8 	bl	8002870 <HAL_TIM_MspPostInit>
}
 8001d00:	bf00      	nop
 8001d02:	3760      	adds	r7, #96	@ 0x60
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	200005e4 	.word	0x200005e4
 8001d0c:	40014000 	.word	0x40014000

08001d10 <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b094      	sub	sp, #80	@ 0x50
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d16:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	611a      	str	r2, [r3, #16]
 8001d26:	615a      	str	r2, [r3, #20]
 8001d28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d2a:	463b      	mov	r3, r7
 8001d2c:	2234      	movs	r2, #52	@ 0x34
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f010 fd29 	bl	8012788 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d36:	4b2f      	ldr	r3, [pc, #188]	@ (8001df4 <MX_TIM16_Init+0xe4>)
 8001d38:	4a2f      	ldr	r2, [pc, #188]	@ (8001df8 <MX_TIM16_Init+0xe8>)
 8001d3a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001df4 <MX_TIM16_Init+0xe4>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d42:	4b2c      	ldr	r3, [pc, #176]	@ (8001df4 <MX_TIM16_Init+0xe4>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001d48:	4b2a      	ldr	r3, [pc, #168]	@ (8001df4 <MX_TIM16_Init+0xe4>)
 8001d4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d4e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d50:	4b28      	ldr	r3, [pc, #160]	@ (8001df4 <MX_TIM16_Init+0xe4>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d56:	4b27      	ldr	r3, [pc, #156]	@ (8001df4 <MX_TIM16_Init+0xe4>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5c:	4b25      	ldr	r3, [pc, #148]	@ (8001df4 <MX_TIM16_Init+0xe4>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001d62:	4824      	ldr	r0, [pc, #144]	@ (8001df4 <MX_TIM16_Init+0xe4>)
 8001d64:	f008 fe4a 	bl	800a9fc <HAL_TIM_Base_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001d6e:	f000 fa81 	bl	8002274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001d72:	4820      	ldr	r0, [pc, #128]	@ (8001df4 <MX_TIM16_Init+0xe4>)
 8001d74:	f008 ff0a 	bl	800ab8c <HAL_TIM_PWM_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001d7e:	f000 fa79 	bl	8002274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d82:	2360      	movs	r3, #96	@ 0x60
 8001d84:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d9e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001da2:	2200      	movs	r2, #0
 8001da4:	4619      	mov	r1, r3
 8001da6:	4813      	ldr	r0, [pc, #76]	@ (8001df4 <MX_TIM16_Init+0xe4>)
 8001da8:	f009 f9ca 	bl	800b140 <HAL_TIM_PWM_ConfigChannel>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001db2:	f000 fa5f 	bl	8002274 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001dca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001dd8:	463b      	mov	r3, r7
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4805      	ldr	r0, [pc, #20]	@ (8001df4 <MX_TIM16_Init+0xe4>)
 8001dde:	f00a f913 	bl	800c008 <HAL_TIMEx_ConfigBreakDeadTime>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001de8:	f000 fa44 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 8001dec:	bf00      	nop
 8001dee:	3750      	adds	r7, #80	@ 0x50
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000630 	.word	0x20000630
 8001df8:	40014400 	.word	0x40014400

08001dfc <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b094      	sub	sp, #80	@ 0x50
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e02:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
 8001e10:	611a      	str	r2, [r3, #16]
 8001e12:	615a      	str	r2, [r3, #20]
 8001e14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e16:	463b      	mov	r3, r7
 8001e18:	2234      	movs	r2, #52	@ 0x34
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f010 fcb3 	bl	8012788 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001e22:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee0 <MX_TIM17_Init+0xe4>)
 8001e24:	4a2f      	ldr	r2, [pc, #188]	@ (8001ee4 <MX_TIM17_Init+0xe8>)
 8001e26:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001e28:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee0 <MX_TIM17_Init+0xe4>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee0 <MX_TIM17_Init+0xe4>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001e34:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee0 <MX_TIM17_Init+0xe4>)
 8001e36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e3a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ee0 <MX_TIM17_Init+0xe4>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001e42:	4b27      	ldr	r3, [pc, #156]	@ (8001ee0 <MX_TIM17_Init+0xe4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e48:	4b25      	ldr	r3, [pc, #148]	@ (8001ee0 <MX_TIM17_Init+0xe4>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001e4e:	4824      	ldr	r0, [pc, #144]	@ (8001ee0 <MX_TIM17_Init+0xe4>)
 8001e50:	f008 fdd4 	bl	800a9fc <HAL_TIM_Base_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001e5a:	f000 fa0b 	bl	8002274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001e5e:	4820      	ldr	r0, [pc, #128]	@ (8001ee0 <MX_TIM17_Init+0xe4>)
 8001e60:	f008 fe94 	bl	800ab8c <HAL_TIM_PWM_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001e6a:	f000 fa03 	bl	8002274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e6e:	2360      	movs	r3, #96	@ 0x60
 8001e70:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e76:	2300      	movs	r3, #0
 8001e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e8a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e8e:	2200      	movs	r2, #0
 8001e90:	4619      	mov	r1, r3
 8001e92:	4813      	ldr	r0, [pc, #76]	@ (8001ee0 <MX_TIM17_Init+0xe4>)
 8001e94:	f009 f954 	bl	800b140 <HAL_TIM_PWM_ConfigChannel>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001e9e:	f000 f9e9 	bl	8002274 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001eb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001eba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4805      	ldr	r0, [pc, #20]	@ (8001ee0 <MX_TIM17_Init+0xe4>)
 8001eca:	f00a f89d 	bl	800c008 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001ed4:	f000 f9ce 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
}
 8001ed8:	bf00      	nop
 8001eda:	3750      	adds	r7, #80	@ 0x50
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	2000067c 	.word	0x2000067c
 8001ee4:	40014800 	.word	0x40014800

08001ee8 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001eec:	4b22      	ldr	r3, [pc, #136]	@ (8001f78 <MX_UART5_Init+0x90>)
 8001eee:	4a23      	ldr	r2, [pc, #140]	@ (8001f7c <MX_UART5_Init+0x94>)
 8001ef0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001ef2:	4b21      	ldr	r3, [pc, #132]	@ (8001f78 <MX_UART5_Init+0x90>)
 8001ef4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ef8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001efa:	4b1f      	ldr	r3, [pc, #124]	@ (8001f78 <MX_UART5_Init+0x90>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001f00:	4b1d      	ldr	r3, [pc, #116]	@ (8001f78 <MX_UART5_Init+0x90>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001f06:	4b1c      	ldr	r3, [pc, #112]	@ (8001f78 <MX_UART5_Init+0x90>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f78 <MX_UART5_Init+0x90>)
 8001f0e:	220c      	movs	r2, #12
 8001f10:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f12:	4b19      	ldr	r3, [pc, #100]	@ (8001f78 <MX_UART5_Init+0x90>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f18:	4b17      	ldr	r3, [pc, #92]	@ (8001f78 <MX_UART5_Init+0x90>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f1e:	4b16      	ldr	r3, [pc, #88]	@ (8001f78 <MX_UART5_Init+0x90>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f24:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <MX_UART5_Init+0x90>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f2a:	4b13      	ldr	r3, [pc, #76]	@ (8001f78 <MX_UART5_Init+0x90>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f30:	4811      	ldr	r0, [pc, #68]	@ (8001f78 <MX_UART5_Init+0x90>)
 8001f32:	f00a f97e 	bl	800c232 <HAL_UART_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001f3c:	f000 f99a 	bl	8002274 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f40:	2100      	movs	r1, #0
 8001f42:	480d      	ldr	r0, [pc, #52]	@ (8001f78 <MX_UART5_Init+0x90>)
 8001f44:	f00b fc2d 	bl	800d7a2 <HAL_UARTEx_SetTxFifoThreshold>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001f4e:	f000 f991 	bl	8002274 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f52:	2100      	movs	r1, #0
 8001f54:	4808      	ldr	r0, [pc, #32]	@ (8001f78 <MX_UART5_Init+0x90>)
 8001f56:	f00b fc62 	bl	800d81e <HAL_UARTEx_SetRxFifoThreshold>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001f60:	f000 f988 	bl	8002274 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001f64:	4804      	ldr	r0, [pc, #16]	@ (8001f78 <MX_UART5_Init+0x90>)
 8001f66:	f00b fbe3 	bl	800d730 <HAL_UARTEx_DisableFifoMode>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001f70:	f000 f980 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	200006c8 	.word	0x200006c8
 8001f7c:	40005000 	.word	0x40005000

08001f80 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f84:	4b22      	ldr	r3, [pc, #136]	@ (8002010 <MX_USART3_UART_Init+0x90>)
 8001f86:	4a23      	ldr	r2, [pc, #140]	@ (8002014 <MX_USART3_UART_Init+0x94>)
 8001f88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8001f8a:	4b21      	ldr	r3, [pc, #132]	@ (8002010 <MX_USART3_UART_Init+0x90>)
 8001f8c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001f90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f92:	4b1f      	ldr	r3, [pc, #124]	@ (8002010 <MX_USART3_UART_Init+0x90>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f98:	4b1d      	ldr	r3, [pc, #116]	@ (8002010 <MX_USART3_UART_Init+0x90>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002010 <MX_USART3_UART_Init+0x90>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <MX_USART3_UART_Init+0x90>)
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001faa:	4b19      	ldr	r3, [pc, #100]	@ (8002010 <MX_USART3_UART_Init+0x90>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb0:	4b17      	ldr	r3, [pc, #92]	@ (8002010 <MX_USART3_UART_Init+0x90>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fb6:	4b16      	ldr	r3, [pc, #88]	@ (8002010 <MX_USART3_UART_Init+0x90>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fbc:	4b14      	ldr	r3, [pc, #80]	@ (8002010 <MX_USART3_UART_Init+0x90>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fc2:	4b13      	ldr	r3, [pc, #76]	@ (8002010 <MX_USART3_UART_Init+0x90>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fc8:	4811      	ldr	r0, [pc, #68]	@ (8002010 <MX_USART3_UART_Init+0x90>)
 8001fca:	f00a f932 	bl	800c232 <HAL_UART_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001fd4:	f000 f94e 	bl	8002274 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fd8:	2100      	movs	r1, #0
 8001fda:	480d      	ldr	r0, [pc, #52]	@ (8002010 <MX_USART3_UART_Init+0x90>)
 8001fdc:	f00b fbe1 	bl	800d7a2 <HAL_UARTEx_SetTxFifoThreshold>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001fe6:	f000 f945 	bl	8002274 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fea:	2100      	movs	r1, #0
 8001fec:	4808      	ldr	r0, [pc, #32]	@ (8002010 <MX_USART3_UART_Init+0x90>)
 8001fee:	f00b fc16 	bl	800d81e <HAL_UARTEx_SetRxFifoThreshold>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ff8:	f000 f93c 	bl	8002274 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001ffc:	4804      	ldr	r0, [pc, #16]	@ (8002010 <MX_USART3_UART_Init+0x90>)
 8001ffe:	f00b fb97 	bl	800d730 <HAL_UARTEx_DisableFifoMode>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002008:	f000 f934 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	2000075c 	.word	0x2000075c
 8002014:	40004800 	.word	0x40004800

08002018 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800201e:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <MX_DMA_Init+0x50>)
 8002020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002022:	4a11      	ldr	r2, [pc, #68]	@ (8002068 <MX_DMA_Init+0x50>)
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	6493      	str	r3, [r2, #72]	@ 0x48
 800202a:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <MX_DMA_Init+0x50>)
 800202c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002036:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <MX_DMA_Init+0x50>)
 8002038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800203a:	4a0b      	ldr	r2, [pc, #44]	@ (8002068 <MX_DMA_Init+0x50>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6493      	str	r3, [r2, #72]	@ 0x48
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <MX_DMA_Init+0x50>)
 8002044:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	2100      	movs	r1, #0
 8002052:	200d      	movs	r0, #13
 8002054:	f003 fade 	bl	8005614 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002058:	200d      	movs	r0, #13
 800205a:	f003 faf5 	bl	8005648 <HAL_NVIC_EnableIRQ>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000

0800206c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	@ 0x28
 8002070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
 8002080:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002082:	4b6e      	ldr	r3, [pc, #440]	@ (800223c <MX_GPIO_Init+0x1d0>)
 8002084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002086:	4a6d      	ldr	r2, [pc, #436]	@ (800223c <MX_GPIO_Init+0x1d0>)
 8002088:	f043 0304 	orr.w	r3, r3, #4
 800208c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800208e:	4b6b      	ldr	r3, [pc, #428]	@ (800223c <MX_GPIO_Init+0x1d0>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800209a:	4b68      	ldr	r3, [pc, #416]	@ (800223c <MX_GPIO_Init+0x1d0>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209e:	4a67      	ldr	r2, [pc, #412]	@ (800223c <MX_GPIO_Init+0x1d0>)
 80020a0:	f043 0320 	orr.w	r3, r3, #32
 80020a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020a6:	4b65      	ldr	r3, [pc, #404]	@ (800223c <MX_GPIO_Init+0x1d0>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	4b62      	ldr	r3, [pc, #392]	@ (800223c <MX_GPIO_Init+0x1d0>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	4a61      	ldr	r2, [pc, #388]	@ (800223c <MX_GPIO_Init+0x1d0>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020be:	4b5f      	ldr	r3, [pc, #380]	@ (800223c <MX_GPIO_Init+0x1d0>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ca:	4b5c      	ldr	r3, [pc, #368]	@ (800223c <MX_GPIO_Init+0x1d0>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ce:	4a5b      	ldr	r2, [pc, #364]	@ (800223c <MX_GPIO_Init+0x1d0>)
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d6:	4b59      	ldr	r3, [pc, #356]	@ (800223c <MX_GPIO_Init+0x1d0>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020e2:	4b56      	ldr	r3, [pc, #344]	@ (800223c <MX_GPIO_Init+0x1d0>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e6:	4a55      	ldr	r2, [pc, #340]	@ (800223c <MX_GPIO_Init+0x1d0>)
 80020e8:	f043 0308 	orr.w	r3, r3, #8
 80020ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ee:	4b53      	ldr	r3, [pc, #332]	@ (800223c <MX_GPIO_Init+0x1d0>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STAT_BKUP_Pin | EN_5V_Pin | CAM1_CTRL_Pin, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	f242 0124 	movw	r1, #8228	@ 0x2024
 8002100:	484f      	ldr	r0, [pc, #316]	@ (8002240 <MX_GPIO_Init+0x1d4>)
 8002102:	f003 ff6f 	bl	8005fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRV_DIR_Pin | CAM0_CTRL_Pin | XBEE_RST_Pin, GPIO_PIN_RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	f248 0130 	movw	r1, #32816	@ 0x8030
 800210c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002110:	f003 ff68 	bl	8005fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_nCS_Pin | MAGEXT_nCS_Pin | MAG_nCS_Pin | BMP_nCS_Pin | GPS_RST_Pin | USR_LED_Pin, GPIO_PIN_RESET);
 8002114:	2200      	movs	r2, #0
 8002116:	f641 41a4 	movw	r1, #7332	@ 0x1ca4
 800211a:	484a      	ldr	r0, [pc, #296]	@ (8002244 <MX_GPIO_Init+0x1d8>)
 800211c:	f003 ff62 	bl	8005fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STAT_BKUP_Pin EN_5V_Pin CAM1_CTRL_Pin */
  GPIO_InitStruct.Pin = STAT_BKUP_Pin | EN_5V_Pin | CAM1_CTRL_Pin;
 8002120:	f242 0324 	movw	r3, #8228	@ 0x2024
 8002124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002126:	2301      	movs	r3, #1
 8002128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	4619      	mov	r1, r3
 8002138:	4841      	ldr	r0, [pc, #260]	@ (8002240 <MX_GPIO_Init+0x1d4>)
 800213a:	f003 fdb9 	bl	8005cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_STAT2_Pin CHG_STAT1_Pin */
  GPIO_InitStruct.Pin = CHG_STAT2_Pin | CHG_STAT1_Pin;
 800213e:	2303      	movs	r3, #3
 8002140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4619      	mov	r1, r3
 8002150:	483d      	ldr	r0, [pc, #244]	@ (8002248 <MX_GPIO_Init+0x1dc>)
 8002152:	f003 fdad 	bl	8005cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_32K_Pin */
  GPIO_InitStruct.Pin = CLK_32K_Pin;
 8002156:	2304      	movs	r3, #4
 8002158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800215a:	2303      	movs	r3, #3
 800215c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CLK_32K_GPIO_Port, &GPIO_InitStruct);
 8002162:	f107 0314 	add.w	r3, r7, #20
 8002166:	4619      	mov	r1, r3
 8002168:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800216c:	f003 fda0 	bl	8005cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRV_DIR_Pin CAM0_CTRL_Pin XBEE_RST_Pin */
  GPIO_InitStruct.Pin = DRV_DIR_Pin | CAM0_CTRL_Pin | XBEE_RST_Pin;
 8002170:	f248 0330 	movw	r3, #32816	@ 0x8030
 8002174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002176:	2301      	movs	r3, #1
 8002178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217e:	2300      	movs	r3, #0
 8002180:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002182:	f107 0314 	add.w	r3, r7, #20
 8002186:	4619      	mov	r1, r3
 8002188:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800218c:	f003 fd90 	bl	8005cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_nCS_Pin MAGEXT_nCS_Pin MAG_nCS_Pin BMP_nCS_Pin
                           USR_LED_Pin */
  GPIO_InitStruct.Pin = IMU_nCS_Pin | MAGEXT_nCS_Pin | MAG_nCS_Pin | BMP_nCS_Pin | USR_LED_Pin;
 8002190:	f641 4384 	movw	r3, #7300	@ 0x1c84
 8002194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002196:	2301      	movs	r3, #1
 8002198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a2:	f107 0314 	add.w	r3, r7, #20
 80021a6:	4619      	mov	r1, r3
 80021a8:	4826      	ldr	r0, [pc, #152]	@ (8002244 <MX_GPIO_Init+0x1d8>)
 80021aa:	f003 fd81 	bl	8005cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	2300      	movs	r3, #0
 80021be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4619      	mov	r1, r3
 80021ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021ce:	f003 fd6f 	bl	8005cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
 80021d2:	2350      	movs	r3, #80	@ 0x50
 80021d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021d6:	2303      	movs	r3, #3
 80021d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4619      	mov	r1, r3
 80021e4:	4817      	ldr	r0, [pc, #92]	@ (8002244 <MX_GPIO_Init+0x1d8>)
 80021e6:	f003 fd63 	bl	8005cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 80021ea:	2320      	movs	r3, #32
 80021ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80021ee:	2311      	movs	r3, #17
 80021f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4619      	mov	r1, r3
 8002200:	4810      	ldr	r0, [pc, #64]	@ (8002244 <MX_GPIO_Init+0x1d8>)
 8002202:	f003 fd55 	bl	8005cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8002206:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800220a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2300      	movs	r3, #0
 8002216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_IR;
 8002218:	2306      	movs	r3, #6
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	4619      	mov	r1, r3
 8002222:	4808      	ldr	r0, [pc, #32]	@ (8002244 <MX_GPIO_Init+0x1d8>)
 8002224:	f003 fd44 	bl	8005cb0 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8002228:	4b08      	ldr	r3, [pc, #32]	@ (800224c <MX_GPIO_Init+0x1e0>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4a07      	ldr	r2, [pc, #28]	@ (800224c <MX_GPIO_Init+0x1e0>)
 800222e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002232:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002234:	bf00      	nop
 8002236:	3728      	adds	r7, #40	@ 0x28
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	48000800 	.word	0x48000800
 8002244:	48000400 	.word	0x48000400
 8002248:	48001400 	.word	0x48001400
 800224c:	40010000 	.word	0x40010000

08002250 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a04      	ldr	r2, [pc, #16]	@ (8002270 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d101      	bne.n	8002266 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002262:	f001 ffcb 	bl	80041fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40001000 	.word	0x40001000

08002274 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002278:	b672      	cpsid	i
}
 800227a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800227c:	bf00      	nop
 800227e:	e7fd      	b.n	800227c <Error_Handler+0x8>

08002280 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8002286:	f107 0308 	add.w	r3, r7, #8
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002290:	4b16      	ldr	r3, [pc, #88]	@ (80022ec <HAL_MspInit+0x6c>)
 8002292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002294:	4a15      	ldr	r2, [pc, #84]	@ (80022ec <HAL_MspInit+0x6c>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6613      	str	r3, [r2, #96]	@ 0x60
 800229c:	4b13      	ldr	r3, [pc, #76]	@ (80022ec <HAL_MspInit+0x6c>)
 800229e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a8:	4b10      	ldr	r3, [pc, #64]	@ (80022ec <HAL_MspInit+0x6c>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ac:	4a0f      	ldr	r2, [pc, #60]	@ (80022ec <HAL_MspInit+0x6c>)
 80022ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80022b4:	4b0d      	ldr	r3, [pc, #52]	@ (80022ec <HAL_MspInit+0x6c>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80022c8:	f107 0308 	add.w	r3, r7, #8
 80022cc:	4618      	mov	r0, r3
 80022ce:	f006 f919 	bl	8008504 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80022d2:	f006 f977 	bl	80085c4 <HAL_PWR_EnablePVD>

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80022d6:	f001 ffe5 	bl	80042a4 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80022da:	2002      	movs	r0, #2
 80022dc:	f001 ffce 	bl	800427c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80022e0:	f006 fa24 	bl	800872c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000

080022f0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b09e      	sub	sp, #120	@ 0x78
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	2250      	movs	r2, #80	@ 0x50
 800230e:	2100      	movs	r1, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f010 fa39 	bl	8012788 <memset>
  if(hadc->Instance==ADC1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800231e:	d133      	bne.n	8002388 <HAL_ADC_MspInit+0x98>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002320:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002324:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002326:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800232a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	4618      	mov	r0, r3
 8002332:	f006 ffb1 	bl	8009298 <HAL_RCCEx_PeriphCLKConfig>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800233c:	f7ff ff9a 	bl	8002274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002340:	4b13      	ldr	r3, [pc, #76]	@ (8002390 <HAL_ADC_MspInit+0xa0>)
 8002342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002344:	4a12      	ldr	r2, [pc, #72]	@ (8002390 <HAL_ADC_MspInit+0xa0>)
 8002346:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800234a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800234c:	4b10      	ldr	r3, [pc, #64]	@ (8002390 <HAL_ADC_MspInit+0xa0>)
 800234e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002350:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002358:	4b0d      	ldr	r3, [pc, #52]	@ (8002390 <HAL_ADC_MspInit+0xa0>)
 800235a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235c:	4a0c      	ldr	r2, [pc, #48]	@ (8002390 <HAL_ADC_MspInit+0xa0>)
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002364:	4b0a      	ldr	r3, [pc, #40]	@ (8002390 <HAL_ADC_MspInit+0xa0>)
 8002366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VUSB_Pin;
 8002370:	2308      	movs	r3, #8
 8002372:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002374:	2303      	movs	r3, #3
 8002376:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(VUSB_GPIO_Port, &GPIO_InitStruct);
 800237c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002380:	4619      	mov	r1, r3
 8002382:	4804      	ldr	r0, [pc, #16]	@ (8002394 <HAL_ADC_MspInit+0xa4>)
 8002384:	f003 fc94 	bl	8005cb0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002388:	bf00      	nop
 800238a:	3778      	adds	r7, #120	@ 0x78
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	48000800 	.word	0x48000800

08002398 <HAL_CORDIC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcordic: CORDIC handle pointer
  * @retval None
  */
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0a      	ldr	r2, [pc, #40]	@ (80023d0 <HAL_CORDIC_MspInit+0x38>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d10b      	bne.n	80023c2 <HAL_CORDIC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CORDIC_MspInit 0 */

    /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80023aa:	4b0a      	ldr	r3, [pc, #40]	@ (80023d4 <HAL_CORDIC_MspInit+0x3c>)
 80023ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ae:	4a09      	ldr	r2, [pc, #36]	@ (80023d4 <HAL_CORDIC_MspInit+0x3c>)
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	6493      	str	r3, [r2, #72]	@ 0x48
 80023b6:	4b07      	ldr	r3, [pc, #28]	@ (80023d4 <HAL_CORDIC_MspInit+0x3c>)
 80023b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CORDIC_MspInit 1 */

  }

}
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40020c00 	.word	0x40020c00
 80023d4:	40021000 	.word	0x40021000

080023d8 <HAL_FMAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfmac: FMAC handle pointer
  * @retval None
  */
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002410 <HAL_FMAC_MspInit+0x38>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d10b      	bne.n	8002402 <HAL_FMAC_MspInit+0x2a>
  {
    /* USER CODE BEGIN FMAC_MspInit 0 */

    /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80023ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <HAL_FMAC_MspInit+0x3c>)
 80023ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ee:	4a09      	ldr	r2, [pc, #36]	@ (8002414 <HAL_FMAC_MspInit+0x3c>)
 80023f0:	f043 0310 	orr.w	r3, r3, #16
 80023f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80023f6:	4b07      	ldr	r3, [pc, #28]	@ (8002414 <HAL_FMAC_MspInit+0x3c>)
 80023f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END FMAC_MspInit 1 */

  }

}
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40021400 	.word	0x40021400
 8002414:	40021000 	.word	0x40021000

08002418 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b09e      	sub	sp, #120	@ 0x78
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	2250      	movs	r2, #80	@ 0x50
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f010 f9a5 	bl	8012788 <memset>
  if(hi2c->Instance==I2C3)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a1f      	ldr	r2, [pc, #124]	@ (80024c0 <HAL_I2C_MspInit+0xa8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d137      	bne.n	80024b8 <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002448:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800244c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800244e:	2300      	movs	r3, #0
 8002450:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002452:	f107 0314 	add.w	r3, r7, #20
 8002456:	4618      	mov	r0, r3
 8002458:	f006 ff1e 	bl	8009298 <HAL_RCCEx_PeriphCLKConfig>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002462:	f7ff ff07 	bl	8002274 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002466:	4b17      	ldr	r3, [pc, #92]	@ (80024c4 <HAL_I2C_MspInit+0xac>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	4a16      	ldr	r2, [pc, #88]	@ (80024c4 <HAL_I2C_MspInit+0xac>)
 800246c:	f043 0304 	orr.w	r3, r3, #4
 8002470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002472:	4b14      	ldr	r3, [pc, #80]	@ (80024c4 <HAL_I2C_MspInit+0xac>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800247e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002482:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002484:	2312      	movs	r3, #18
 8002486:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002490:	2308      	movs	r3, #8
 8002492:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002494:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002498:	4619      	mov	r1, r3
 800249a:	480b      	ldr	r0, [pc, #44]	@ (80024c8 <HAL_I2C_MspInit+0xb0>)
 800249c:	f003 fc08 	bl	8005cb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80024a0:	4b08      	ldr	r3, [pc, #32]	@ (80024c4 <HAL_I2C_MspInit+0xac>)
 80024a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a4:	4a07      	ldr	r2, [pc, #28]	@ (80024c4 <HAL_I2C_MspInit+0xac>)
 80024a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80024aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80024ac:	4b05      	ldr	r3, [pc, #20]	@ (80024c4 <HAL_I2C_MspInit+0xac>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80024b8:	bf00      	nop
 80024ba:	3778      	adds	r7, #120	@ 0x78
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40007800 	.word	0x40007800
 80024c4:	40021000 	.word	0x40021000
 80024c8:	48000800 	.word	0x48000800

080024cc <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b098      	sub	sp, #96	@ 0x60
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024d4:	f107 0310 	add.w	r3, r7, #16
 80024d8:	2250      	movs	r2, #80	@ 0x50
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f010 f953 	bl	8012788 <memset>
  if(hrng->Instance==RNG)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a11      	ldr	r2, [pc, #68]	@ (800252c <HAL_RNG_MspInit+0x60>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d11a      	bne.n	8002522 <HAL_RNG_MspInit+0x56>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80024ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80024f2:	2300      	movs	r3, #0
 80024f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024f6:	f107 0310 	add.w	r3, r7, #16
 80024fa:	4618      	mov	r0, r3
 80024fc:	f006 fecc 	bl	8009298 <HAL_RCCEx_PeriphCLKConfig>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_RNG_MspInit+0x3e>
    {
      Error_Handler();
 8002506:	f7ff feb5 	bl	8002274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800250a:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <HAL_RNG_MspInit+0x64>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250e:	4a08      	ldr	r2, [pc, #32]	@ (8002530 <HAL_RNG_MspInit+0x64>)
 8002510:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002516:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <HAL_RNG_MspInit+0x64>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8002522:	bf00      	nop
 8002524:	3760      	adds	r7, #96	@ 0x60
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	50060800 	.word	0x50060800
 8002530:	40021000 	.word	0x40021000

08002534 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b09e      	sub	sp, #120	@ 0x78
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	2250      	movs	r2, #80	@ 0x50
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f010 f917 	bl	8012788 <memset>
  if(hrtc->Instance==RTC)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a24      	ldr	r2, [pc, #144]	@ (80025f0 <HAL_RTC_MspInit+0xbc>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d140      	bne.n	80025e6 <HAL_RTC_MspInit+0xb2>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002564:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002568:	617b      	str	r3, [r7, #20]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800256a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800256e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	4618      	mov	r0, r3
 8002576:	f006 fe8f 	bl	8009298 <HAL_RCCEx_PeriphCLKConfig>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8002580:	f7ff fe78 	bl	8002274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002584:	4b1b      	ldr	r3, [pc, #108]	@ (80025f4 <HAL_RTC_MspInit+0xc0>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258a:	4a1a      	ldr	r2, [pc, #104]	@ (80025f4 <HAL_RTC_MspInit+0xc0>)
 800258c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002594:	4b17      	ldr	r3, [pc, #92]	@ (80025f4 <HAL_RTC_MspInit+0xc0>)
 8002596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002598:	4a16      	ldr	r2, [pc, #88]	@ (80025f4 <HAL_RTC_MspInit+0xc0>)
 800259a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800259e:	6593      	str	r3, [r2, #88]	@ 0x58
 80025a0:	4b14      	ldr	r3, [pc, #80]	@ (80025f4 <HAL_RTC_MspInit+0xc0>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ac:	4b11      	ldr	r3, [pc, #68]	@ (80025f4 <HAL_RTC_MspInit+0xc0>)
 80025ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b0:	4a10      	ldr	r2, [pc, #64]	@ (80025f4 <HAL_RTC_MspInit+0xc0>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025b8:	4b0e      	ldr	r3, [pc, #56]	@ (80025f4 <HAL_RTC_MspInit+0xc0>)
 80025ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PA1     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 80025c4:	2302      	movs	r3, #2
 80025c6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c8:	2302      	movs	r3, #2
 80025ca:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d0:	2300      	movs	r3, #0
 80025d2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 80025d4:	2300      	movs	r3, #0
 80025d6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 80025d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025dc:	4619      	mov	r1, r3
 80025de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025e2:	f003 fb65 	bl	8005cb0 <HAL_GPIO_Init>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80025e6:	bf00      	nop
 80025e8:	3778      	adds	r7, #120	@ 0x78
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40002800 	.word	0x40002800
 80025f4:	40021000 	.word	0x40021000

080025f8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	@ 0x28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a17      	ldr	r2, [pc, #92]	@ (8002674 <HAL_SPI_MspInit+0x7c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d128      	bne.n	800266c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800261a:	4b17      	ldr	r3, [pc, #92]	@ (8002678 <HAL_SPI_MspInit+0x80>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261e:	4a16      	ldr	r2, [pc, #88]	@ (8002678 <HAL_SPI_MspInit+0x80>)
 8002620:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002624:	6593      	str	r3, [r2, #88]	@ 0x58
 8002626:	4b14      	ldr	r3, [pc, #80]	@ (8002678 <HAL_SPI_MspInit+0x80>)
 8002628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	4b11      	ldr	r3, [pc, #68]	@ (8002678 <HAL_SPI_MspInit+0x80>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	4a10      	ldr	r2, [pc, #64]	@ (8002678 <HAL_SPI_MspInit+0x80>)
 8002638:	f043 0302 	orr.w	r3, r3, #2
 800263c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800263e:	4b0e      	ldr	r3, [pc, #56]	@ (8002678 <HAL_SPI_MspInit+0x80>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800264a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800264e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	2300      	movs	r3, #0
 8002656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002658:	2300      	movs	r3, #0
 800265a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800265c:	2305      	movs	r3, #5
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	4619      	mov	r1, r3
 8002666:	4805      	ldr	r0, [pc, #20]	@ (800267c <HAL_SPI_MspInit+0x84>)
 8002668:	f003 fb22 	bl	8005cb0 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 800266c:	bf00      	nop
 800266e:	3728      	adds	r7, #40	@ 0x28
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40003800 	.word	0x40003800
 8002678:	40021000 	.word	0x40021000
 800267c:	48000400 	.word	0x48000400

08002680 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08c      	sub	sp, #48	@ 0x30
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002688:	f107 031c 	add.w	r3, r7, #28
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a3c      	ldr	r2, [pc, #240]	@ (8002790 <HAL_TIM_Encoder_MspInit+0x110>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d128      	bne.n	80026f4 <HAL_TIM_Encoder_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x114>)
 80026a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x114>)
 80026a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80026ae:	4b39      	ldr	r3, [pc, #228]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x114>)
 80026b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ba:	4b36      	ldr	r3, [pc, #216]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x114>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026be:	4a35      	ldr	r2, [pc, #212]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x114>)
 80026c0:	f043 0304 	orr.w	r3, r3, #4
 80026c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026c6:	4b33      	ldr	r3, [pc, #204]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x114>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC4     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = ENC0_A_Pin|ENC0_B_Pin|ENC0_Z_Pin;
 80026d2:	2313      	movs	r3, #19
 80026d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80026e2:	2302      	movs	r3, #2
 80026e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e6:	f107 031c 	add.w	r3, r7, #28
 80026ea:	4619      	mov	r1, r3
 80026ec:	482a      	ldr	r0, [pc, #168]	@ (8002798 <HAL_TIM_Encoder_MspInit+0x118>)
 80026ee:	f003 fadf 	bl	8005cb0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80026f2:	e049      	b.n	8002788 <HAL_TIM_Encoder_MspInit+0x108>
  else if(htim_encoder->Instance==TIM8)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a28      	ldr	r2, [pc, #160]	@ (800279c <HAL_TIM_Encoder_MspInit+0x11c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d144      	bne.n	8002788 <HAL_TIM_Encoder_MspInit+0x108>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026fe:	4b25      	ldr	r3, [pc, #148]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x114>)
 8002700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002702:	4a24      	ldr	r2, [pc, #144]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x114>)
 8002704:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002708:	6613      	str	r3, [r2, #96]	@ 0x60
 800270a:	4b22      	ldr	r3, [pc, #136]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x114>)
 800270c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800270e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002716:	4b1f      	ldr	r3, [pc, #124]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x114>)
 8002718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271a:	4a1e      	ldr	r2, [pc, #120]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x114>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002722:	4b1c      	ldr	r3, [pc, #112]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x114>)
 8002724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800272e:	4b19      	ldr	r3, [pc, #100]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x114>)
 8002730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002732:	4a18      	ldr	r2, [pc, #96]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x114>)
 8002734:	f043 0304 	orr.w	r3, r3, #4
 8002738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800273a:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x114>)
 800273c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC1_Z_Pin;
 8002746:	2301      	movs	r3, #1
 8002748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274a:	2302      	movs	r3, #2
 800274c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002752:	2300      	movs	r3, #0
 8002754:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002756:	230a      	movs	r3, #10
 8002758:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ENC1_Z_GPIO_Port, &GPIO_InitStruct);
 800275a:	f107 031c 	add.w	r3, r7, #28
 800275e:	4619      	mov	r1, r3
 8002760:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002764:	f003 faa4 	bl	8005cb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 8002768:	23c0      	movs	r3, #192	@ 0xc0
 800276a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2300      	movs	r3, #0
 8002776:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002778:	2304      	movs	r3, #4
 800277a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800277c:	f107 031c 	add.w	r3, r7, #28
 8002780:	4619      	mov	r1, r3
 8002782:	4805      	ldr	r0, [pc, #20]	@ (8002798 <HAL_TIM_Encoder_MspInit+0x118>)
 8002784:	f003 fa94 	bl	8005cb0 <HAL_GPIO_Init>
}
 8002788:	bf00      	nop
 800278a:	3730      	adds	r7, #48	@ 0x30
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40012c00 	.word	0x40012c00
 8002794:	40021000 	.word	0x40021000
 8002798:	48000800 	.word	0x48000800
 800279c:	40013400 	.word	0x40013400

080027a0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002820 <HAL_TIM_Base_MspInit+0x80>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d10c      	bne.n	80027cc <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002824 <HAL_TIM_Base_MspInit+0x84>)
 80027b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002824 <HAL_TIM_Base_MspInit+0x84>)
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80027be:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <HAL_TIM_Base_MspInit+0x84>)
 80027c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 80027ca:	e022      	b.n	8002812 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a15      	ldr	r2, [pc, #84]	@ (8002828 <HAL_TIM_Base_MspInit+0x88>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d10c      	bne.n	80027f0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80027d6:	4b13      	ldr	r3, [pc, #76]	@ (8002824 <HAL_TIM_Base_MspInit+0x84>)
 80027d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027da:	4a12      	ldr	r2, [pc, #72]	@ (8002824 <HAL_TIM_Base_MspInit+0x84>)
 80027dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80027e2:	4b10      	ldr	r3, [pc, #64]	@ (8002824 <HAL_TIM_Base_MspInit+0x84>)
 80027e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	693b      	ldr	r3, [r7, #16]
}
 80027ee:	e010      	b.n	8002812 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM17)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0d      	ldr	r2, [pc, #52]	@ (800282c <HAL_TIM_Base_MspInit+0x8c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d10b      	bne.n	8002812 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80027fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002824 <HAL_TIM_Base_MspInit+0x84>)
 80027fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027fe:	4a09      	ldr	r2, [pc, #36]	@ (8002824 <HAL_TIM_Base_MspInit+0x84>)
 8002800:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002804:	6613      	str	r3, [r2, #96]	@ 0x60
 8002806:	4b07      	ldr	r3, [pc, #28]	@ (8002824 <HAL_TIM_Base_MspInit+0x84>)
 8002808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800280a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
}
 8002812:	bf00      	nop
 8002814:	371c      	adds	r7, #28
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40000400 	.word	0x40000400
 8002824:	40021000 	.word	0x40021000
 8002828:	40014400 	.word	0x40014400
 800282c:	40014800 	.word	0x40014800

08002830 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0a      	ldr	r2, [pc, #40]	@ (8002868 <HAL_TIM_PWM_MspInit+0x38>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d10b      	bne.n	800285a <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM15_MspInit 0 */

    /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002842:	4b0a      	ldr	r3, [pc, #40]	@ (800286c <HAL_TIM_PWM_MspInit+0x3c>)
 8002844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002846:	4a09      	ldr	r2, [pc, #36]	@ (800286c <HAL_TIM_PWM_MspInit+0x3c>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800284c:	6613      	str	r3, [r2, #96]	@ 0x60
 800284e:	4b07      	ldr	r3, [pc, #28]	@ (800286c <HAL_TIM_PWM_MspInit+0x3c>)
 8002850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002852:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM15_MspInit 1 */

  }

}
 800285a:	bf00      	nop
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40014000 	.word	0x40014000
 800286c:	40021000 	.word	0x40021000

08002870 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	@ 0x28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 0314 	add.w	r3, r7, #20
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a31      	ldr	r2, [pc, #196]	@ (8002954 <HAL_TIM_MspPostInit+0xe4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d139      	bne.n	8002906 <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	4b31      	ldr	r3, [pc, #196]	@ (8002958 <HAL_TIM_MspPostInit+0xe8>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002896:	4a30      	ldr	r2, [pc, #192]	@ (8002958 <HAL_TIM_MspPostInit+0xe8>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800289e:	4b2e      	ldr	r3, [pc, #184]	@ (8002958 <HAL_TIM_MspPostInit+0xe8>)
 80028a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002958 <HAL_TIM_MspPostInit+0xe8>)
 80028ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002958 <HAL_TIM_MspPostInit+0xe8>)
 80028b0:	f043 0302 	orr.w	r3, r3, #2
 80028b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028b6:	4b28      	ldr	r3, [pc, #160]	@ (8002958 <HAL_TIM_MspPostInit+0xe8>)
 80028b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = SERVO_PWM0_Pin|SERVO_PWM1_Pin;
 80028c2:	23c0      	movs	r3, #192	@ 0xc0
 80028c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c6:	2302      	movs	r3, #2
 80028c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	2300      	movs	r3, #0
 80028d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028d2:	2302      	movs	r3, #2
 80028d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d6:	f107 0314 	add.w	r3, r7, #20
 80028da:	4619      	mov	r1, r3
 80028dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028e0:	f003 f9e6 	bl	8005cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SERVO_PWM2_Pin|SERVO_PWM3_Pin;
 80028e4:	2303      	movs	r3, #3
 80028e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f0:	2300      	movs	r3, #0
 80028f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028f4:	2302      	movs	r3, #2
 80028f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	4619      	mov	r1, r3
 80028fe:	4817      	ldr	r0, [pc, #92]	@ (800295c <HAL_TIM_MspPostInit+0xec>)
 8002900:	f003 f9d6 	bl	8005cb0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002904:	e021      	b.n	800294a <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM15)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a15      	ldr	r2, [pc, #84]	@ (8002960 <HAL_TIM_MspPostInit+0xf0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d11c      	bne.n	800294a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002910:	4b11      	ldr	r3, [pc, #68]	@ (8002958 <HAL_TIM_MspPostInit+0xe8>)
 8002912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002914:	4a10      	ldr	r2, [pc, #64]	@ (8002958 <HAL_TIM_MspPostInit+0xe8>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800291c:	4b0e      	ldr	r3, [pc, #56]	@ (8002958 <HAL_TIM_MspPostInit+0xe8>)
 800291e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DRV_PWM_Pin;
 8002928:	2308      	movs	r3, #8
 800292a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292c:	2302      	movs	r3, #2
 800292e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002934:	2300      	movs	r3, #0
 8002936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002938:	2309      	movs	r3, #9
 800293a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DRV_PWM_GPIO_Port, &GPIO_InitStruct);
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	4619      	mov	r1, r3
 8002942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002946:	f003 f9b3 	bl	8005cb0 <HAL_GPIO_Init>
}
 800294a:	bf00      	nop
 800294c:	3728      	adds	r7, #40	@ 0x28
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40000400 	.word	0x40000400
 8002958:	40021000 	.word	0x40021000
 800295c:	48000400 	.word	0x48000400
 8002960:	40014000 	.word	0x40014000

08002964 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b0a0      	sub	sp, #128	@ 0x80
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800297c:	f107 031c 	add.w	r3, r7, #28
 8002980:	2250      	movs	r2, #80	@ 0x50
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f00f feff 	bl	8012788 <memset>
  if(huart->Instance==UART5)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a64      	ldr	r2, [pc, #400]	@ (8002b20 <HAL_UART_MspInit+0x1bc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d153      	bne.n	8002a3c <HAL_UART_MspInit+0xd8>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002994:	2310      	movs	r3, #16
 8002996:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002998:	2300      	movs	r3, #0
 800299a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800299c:	f107 031c 	add.w	r3, r7, #28
 80029a0:	4618      	mov	r0, r3
 80029a2:	f006 fc79 	bl	8009298 <HAL_RCCEx_PeriphCLKConfig>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029ac:	f7ff fc62 	bl	8002274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80029b0:	4b5c      	ldr	r3, [pc, #368]	@ (8002b24 <HAL_UART_MspInit+0x1c0>)
 80029b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b4:	4a5b      	ldr	r2, [pc, #364]	@ (8002b24 <HAL_UART_MspInit+0x1c0>)
 80029b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80029bc:	4b59      	ldr	r3, [pc, #356]	@ (8002b24 <HAL_UART_MspInit+0x1c0>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c8:	4b56      	ldr	r3, [pc, #344]	@ (8002b24 <HAL_UART_MspInit+0x1c0>)
 80029ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029cc:	4a55      	ldr	r2, [pc, #340]	@ (8002b24 <HAL_UART_MspInit+0x1c0>)
 80029ce:	f043 0304 	orr.w	r3, r3, #4
 80029d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029d4:	4b53      	ldr	r3, [pc, #332]	@ (8002b24 <HAL_UART_MspInit+0x1c0>)
 80029d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029e0:	4b50      	ldr	r3, [pc, #320]	@ (8002b24 <HAL_UART_MspInit+0x1c0>)
 80029e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002b24 <HAL_UART_MspInit+0x1c0>)
 80029e6:	f043 0308 	orr.w	r3, r3, #8
 80029ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002b24 <HAL_UART_MspInit+0x1c0>)
 80029ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 80029f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	2302      	movs	r3, #2
 8002a00:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a06:	2300      	movs	r3, #0
 8002a08:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002a0a:	2305      	movs	r3, #5
 8002a0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 8002a0e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002a12:	4619      	mov	r1, r3
 8002a14:	4844      	ldr	r0, [pc, #272]	@ (8002b28 <HAL_UART_MspInit+0x1c4>)
 8002a16:	f003 f94b 	bl	8005cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_TX_Pin;
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a26:	2300      	movs	r3, #0
 8002a28:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002a2a:	2305      	movs	r3, #5
 8002a2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 8002a2e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002a32:	4619      	mov	r1, r3
 8002a34:	483d      	ldr	r0, [pc, #244]	@ (8002b2c <HAL_UART_MspInit+0x1c8>)
 8002a36:	f003 f93b 	bl	8005cb0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a3a:	e06c      	b.n	8002b16 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a3b      	ldr	r2, [pc, #236]	@ (8002b30 <HAL_UART_MspInit+0x1cc>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d167      	bne.n	8002b16 <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a46:	2304      	movs	r3, #4
 8002a48:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a4e:	f107 031c 	add.w	r3, r7, #28
 8002a52:	4618      	mov	r0, r3
 8002a54:	f006 fc20 	bl	8009298 <HAL_RCCEx_PeriphCLKConfig>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8002a5e:	f7ff fc09 	bl	8002274 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a62:	4b30      	ldr	r3, [pc, #192]	@ (8002b24 <HAL_UART_MspInit+0x1c0>)
 8002a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a66:	4a2f      	ldr	r2, [pc, #188]	@ (8002b24 <HAL_UART_MspInit+0x1c0>)
 8002a68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b24 <HAL_UART_MspInit+0x1c0>)
 8002a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b24 <HAL_UART_MspInit+0x1c0>)
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7e:	4a29      	ldr	r2, [pc, #164]	@ (8002b24 <HAL_UART_MspInit+0x1c0>)
 8002a80:	f043 0304 	orr.w	r3, r3, #4
 8002a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a86:	4b27      	ldr	r3, [pc, #156]	@ (8002b24 <HAL_UART_MspInit+0x1c0>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a92:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002a96:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002aa4:	2307      	movs	r3, #7
 8002aa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002aac:	4619      	mov	r1, r3
 8002aae:	481e      	ldr	r0, [pc, #120]	@ (8002b28 <HAL_UART_MspInit+0x1c4>)
 8002ab0:	f003 f8fe 	bl	8005cb0 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel3;
 8002ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b34 <HAL_UART_MspInit+0x1d0>)
 8002ab6:	4a20      	ldr	r2, [pc, #128]	@ (8002b38 <HAL_UART_MspInit+0x1d4>)
 8002ab8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002aba:	4b1e      	ldr	r3, [pc, #120]	@ (8002b34 <HAL_UART_MspInit+0x1d0>)
 8002abc:	221d      	movs	r2, #29
 8002abe:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b34 <HAL_UART_MspInit+0x1d0>)
 8002ac2:	2210      	movs	r2, #16
 8002ac4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b34 <HAL_UART_MspInit+0x1d0>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002acc:	4b19      	ldr	r3, [pc, #100]	@ (8002b34 <HAL_UART_MspInit+0x1d0>)
 8002ace:	2280      	movs	r2, #128	@ 0x80
 8002ad0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ad2:	4b18      	ldr	r3, [pc, #96]	@ (8002b34 <HAL_UART_MspInit+0x1d0>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ad8:	4b16      	ldr	r3, [pc, #88]	@ (8002b34 <HAL_UART_MspInit+0x1d0>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002ade:	4b15      	ldr	r3, [pc, #84]	@ (8002b34 <HAL_UART_MspInit+0x1d0>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ae4:	4b13      	ldr	r3, [pc, #76]	@ (8002b34 <HAL_UART_MspInit+0x1d0>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002aea:	4812      	ldr	r0, [pc, #72]	@ (8002b34 <HAL_UART_MspInit+0x1d0>)
 8002aec:	f002 fdba 	bl	8005664 <HAL_DMA_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_UART_MspInit+0x196>
      Error_Handler();
 8002af6:	f7ff fbbd 	bl	8002274 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a0d      	ldr	r2, [pc, #52]	@ (8002b34 <HAL_UART_MspInit+0x1d0>)
 8002afe:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002b00:	4a0c      	ldr	r2, [pc, #48]	@ (8002b34 <HAL_UART_MspInit+0x1d0>)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 14, 0);
 8002b06:	2200      	movs	r2, #0
 8002b08:	210e      	movs	r1, #14
 8002b0a:	2027      	movs	r0, #39	@ 0x27
 8002b0c:	f002 fd82 	bl	8005614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b10:	2027      	movs	r0, #39	@ 0x27
 8002b12:	f002 fd99 	bl	8005648 <HAL_NVIC_EnableIRQ>
}
 8002b16:	bf00      	nop
 8002b18:	3780      	adds	r7, #128	@ 0x80
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40005000 	.word	0x40005000
 8002b24:	40021000 	.word	0x40021000
 8002b28:	48000800 	.word	0x48000800
 8002b2c:	48000c00 	.word	0x48000c00
 8002b30:	40004800 	.word	0x40004800
 8002b34:	200007f0 	.word	0x200007f0
 8002b38:	40020030 	.word	0x40020030

08002b3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08c      	sub	sp, #48	@ 0x30
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b4c:	4b2c      	ldr	r3, [pc, #176]	@ (8002c00 <HAL_InitTick+0xc4>)
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b50:	4a2b      	ldr	r2, [pc, #172]	@ (8002c00 <HAL_InitTick+0xc4>)
 8002b52:	f043 0310 	orr.w	r3, r3, #16
 8002b56:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b58:	4b29      	ldr	r3, [pc, #164]	@ (8002c00 <HAL_InitTick+0xc4>)
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b64:	f107 020c 	add.w	r2, r7, #12
 8002b68:	f107 0310 	add.w	r3, r7, #16
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f006 fb1a 	bl	80091a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b74:	f006 faec 	bl	8009150 <HAL_RCC_GetPCLK1Freq>
 8002b78:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b7c:	4a21      	ldr	r2, [pc, #132]	@ (8002c04 <HAL_InitTick+0xc8>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	0c9b      	lsrs	r3, r3, #18
 8002b84:	3b01      	subs	r3, #1
 8002b86:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b88:	4b1f      	ldr	r3, [pc, #124]	@ (8002c08 <HAL_InitTick+0xcc>)
 8002b8a:	4a20      	ldr	r2, [pc, #128]	@ (8002c0c <HAL_InitTick+0xd0>)
 8002b8c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c08 <HAL_InitTick+0xcc>)
 8002b90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b94:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002b96:	4a1c      	ldr	r2, [pc, #112]	@ (8002c08 <HAL_InitTick+0xcc>)
 8002b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c08 <HAL_InitTick+0xcc>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba2:	4b19      	ldr	r3, [pc, #100]	@ (8002c08 <HAL_InitTick+0xcc>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002ba8:	4817      	ldr	r0, [pc, #92]	@ (8002c08 <HAL_InitTick+0xcc>)
 8002baa:	f007 ff27 	bl	800a9fc <HAL_TIM_Base_Init>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002bb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d11b      	bne.n	8002bf4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002bbc:	4812      	ldr	r0, [pc, #72]	@ (8002c08 <HAL_InitTick+0xcc>)
 8002bbe:	f007 ff75 	bl	800aaac <HAL_TIM_Base_Start_IT>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002bc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d111      	bne.n	8002bf4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002bd0:	2036      	movs	r0, #54	@ 0x36
 8002bd2:	f002 fd39 	bl	8005648 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b0f      	cmp	r3, #15
 8002bda:	d808      	bhi.n	8002bee <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	2036      	movs	r0, #54	@ 0x36
 8002be2:	f002 fd17 	bl	8005614 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002be6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c10 <HAL_InitTick+0xd4>)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	e002      	b.n	8002bf4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002bf4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3730      	adds	r7, #48	@ 0x30
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	431bde83 	.word	0x431bde83
 8002c08:	20000850 	.word	0x20000850
 8002c0c:	40001000 	.word	0x40001000
 8002c10:	20000004 	.word	0x20000004

08002c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <NMI_Handler+0x4>

08002c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c20:	bf00      	nop
 8002c22:	e7fd      	b.n	8002c20 <HardFault_Handler+0x4>

08002c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <MemManage_Handler+0x4>

08002c2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <BusFault_Handler+0x4>

08002c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <UsageFault_Handler+0x4>

08002c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002c78:	4802      	ldr	r0, [pc, #8]	@ (8002c84 <DMA1_Channel3_IRQHandler+0x10>)
 8002c7a:	f002 fe5b 	bl	8005934 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200007f0 	.word	0x200007f0

08002c88 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c8c:	4802      	ldr	r0, [pc, #8]	@ (8002c98 <USB_LP_IRQHandler+0x10>)
 8002c8e:	f003 ff8e 	bl	8006bae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000ec8 	.word	0x20000ec8

08002c9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ca0:	4802      	ldr	r0, [pc, #8]	@ (8002cac <USART3_IRQHandler+0x10>)
 8002ca2:	f009 fc6d 	bl	800c580 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	2000075c 	.word	0x2000075c

08002cb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002cb4:	4802      	ldr	r0, [pc, #8]	@ (8002cc0 <TIM6_DAC_IRQHandler+0x10>)
 8002cb6:	f008 f8f4 	bl	800aea2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000850 	.word	0x20000850

08002cc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return 1;
 8002cc8:	2301      	movs	r3, #1
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <_kill>:

int _kill(int pid, int sig)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cde:	f00f fd6f 	bl	80127c0 <__errno>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2216      	movs	r2, #22
 8002ce6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ce8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <_exit>:

void _exit (int status)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cfc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff ffe7 	bl	8002cd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d06:	bf00      	nop
 8002d08:	e7fd      	b.n	8002d06 <_exit+0x12>

08002d0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b086      	sub	sp, #24
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e00a      	b.n	8002d32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d1c:	f3af 8000 	nop.w
 8002d20:	4601      	mov	r1, r0
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	60ba      	str	r2, [r7, #8]
 8002d28:	b2ca      	uxtb	r2, r1
 8002d2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	dbf0      	blt.n	8002d1c <_read+0x12>
  }

  return len;
 8002d3a:	687b      	ldr	r3, [r7, #4]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d6c:	605a      	str	r2, [r3, #4]
  return 0;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <_isatty>:

int _isatty(int file)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d84:	2301      	movs	r3, #1
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b085      	sub	sp, #20
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002db4:	4a14      	ldr	r2, [pc, #80]	@ (8002e08 <_sbrk+0x5c>)
 8002db6:	4b15      	ldr	r3, [pc, #84]	@ (8002e0c <_sbrk+0x60>)
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dc0:	4b13      	ldr	r3, [pc, #76]	@ (8002e10 <_sbrk+0x64>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d102      	bne.n	8002dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dc8:	4b11      	ldr	r3, [pc, #68]	@ (8002e10 <_sbrk+0x64>)
 8002dca:	4a12      	ldr	r2, [pc, #72]	@ (8002e14 <_sbrk+0x68>)
 8002dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dce:	4b10      	ldr	r3, [pc, #64]	@ (8002e10 <_sbrk+0x64>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d207      	bcs.n	8002dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ddc:	f00f fcf0 	bl	80127c0 <__errno>
 8002de0:	4603      	mov	r3, r0
 8002de2:	220c      	movs	r2, #12
 8002de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002de6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dea:	e009      	b.n	8002e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dec:	4b08      	ldr	r3, [pc, #32]	@ (8002e10 <_sbrk+0x64>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002df2:	4b07      	ldr	r3, [pc, #28]	@ (8002e10 <_sbrk+0x64>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	4a05      	ldr	r2, [pc, #20]	@ (8002e10 <_sbrk+0x64>)
 8002dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	2001c000 	.word	0x2001c000
 8002e0c:	00000600 	.word	0x00000600
 8002e10:	2000089c 	.word	0x2000089c
 8002e14:	20001710 	.word	0x20001710

08002e18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e1c:	4b06      	ldr	r3, [pc, #24]	@ (8002e38 <SystemInit+0x20>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e22:	4a05      	ldr	r2, [pc, #20]	@ (8002e38 <SystemInit+0x20>)
 8002e24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e3c:	480d      	ldr	r0, [pc, #52]	@ (8002e74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e3e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e40:	f7ff ffea 	bl	8002e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e44:	480c      	ldr	r0, [pc, #48]	@ (8002e78 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e46:	490d      	ldr	r1, [pc, #52]	@ (8002e7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e48:	4a0d      	ldr	r2, [pc, #52]	@ (8002e80 <LoopForever+0xe>)
  movs r3, #0
 8002e4a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002e4c:	e002      	b.n	8002e54 <LoopCopyDataInit>

08002e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e52:	3304      	adds	r3, #4

08002e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e58:	d3f9      	bcc.n	8002e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e5c:	4c0a      	ldr	r4, [pc, #40]	@ (8002e88 <LoopForever+0x16>)
  movs r3, #0
 8002e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e60:	e001      	b.n	8002e66 <LoopFillZerobss>

08002e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e64:	3204      	adds	r2, #4

08002e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e68:	d3fb      	bcc.n	8002e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e6a:	f00f fcaf 	bl	80127cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e6e:	f7fe f905 	bl	800107c <main>

08002e72 <LoopForever>:

LoopForever:
    b LoopForever
 8002e72:	e7fe      	b.n	8002e72 <LoopForever>
  ldr   r0, =_estack
 8002e74:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e7c:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8002e80:	08015ca0 	.word	0x08015ca0
  ldr r2, =_sbss
 8002e84:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8002e88:	2000170c 	.word	0x2000170c

08002e8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e8c:	e7fe      	b.n	8002e8c <ADC1_2_IRQHandler>

08002e8e <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d105      	bne.n	8002ea8 <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002e9c:	b672      	cpsid	i
}
 8002e9e:	bf00      	nop
 8002ea0:	f7ff f9e8 	bl	8002274 <Error_Handler>
 8002ea4:	bf00      	nop
 8002ea6:	e7fd      	b.n	8002ea4 <stm32_lock_init+0x16>
  lock->flag = 0;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	705a      	strb	r2, [r3, #1]
}
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002eca:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ed4:	b672      	cpsid	i
}
 8002ed6:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ed8:	f3bf 8f4f 	dsb	sy
}
 8002edc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002ede:	f3bf 8f6f 	isb	sy
}
 8002ee2:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d105      	bne.n	8002ef6 <stm32_lock_acquire+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002eea:	b672      	cpsid	i
}
 8002eec:	bf00      	nop
 8002eee:	f7ff f9c1 	bl	8002274 <Error_Handler>
 8002ef2:	bf00      	nop
 8002ef4:	e7fd      	b.n	8002ef2 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	785b      	ldrb	r3, [r3, #1]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d103      	bne.n	8002f06 <stm32_lock_acquire+0x4a>
  {
    lock->flag = flag;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	701a      	strb	r2, [r3, #0]
 8002f04:	e009      	b.n	8002f1a <stm32_lock_acquire+0x5e>
  }
  else if (lock->counter == UINT8_MAX)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	785b      	ldrb	r3, [r3, #1]
 8002f0a:	2bff      	cmp	r3, #255	@ 0xff
 8002f0c:	d105      	bne.n	8002f1a <stm32_lock_acquire+0x5e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f0e:	b672      	cpsid	i
}
 8002f10:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8002f12:	f7ff f9af 	bl	8002274 <Error_Handler>
 8002f16:	bf00      	nop
 8002f18:	e7fd      	b.n	8002f16 <stm32_lock_acquire+0x5a>
  }
  lock->counter++;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	785b      	ldrb	r3, [r3, #1]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	705a      	strb	r2, [r3, #1]
}
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d105      	bne.n	8002f48 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f3c:	b672      	cpsid	i
}
 8002f3e:	bf00      	nop
 8002f40:	f7ff f998 	bl	8002274 <Error_Handler>
 8002f44:	bf00      	nop
 8002f46:	e7fd      	b.n	8002f44 <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	785b      	ldrb	r3, [r3, #1]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <stm32_lock_release+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f50:	b672      	cpsid	i
}
 8002f52:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8002f54:	f7ff f98e 	bl	8002274 <Error_Handler>
 8002f58:	bf00      	nop
 8002f5a:	e7fd      	b.n	8002f58 <stm32_lock_release+0x2a>
  }
  lock->counter--;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	785b      	ldrb	r3, [r3, #1]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	785b      	ldrb	r3, [r3, #1]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d105      	bne.n	8002f7c <stm32_lock_release+0x4e>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <stm32_lock_release+0x4e>
  __ASM volatile ("cpsie i" : : : "memory");
 8002f78:	b662      	cpsie	i
}
 8002f7a:	bf00      	nop
  {
    __enable_irq();
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d105      	bne.n	8002f9e <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8002f92:	f00f fc15 	bl	80127c0 <__errno>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2216      	movs	r2, #22
 8002f9a:	601a      	str	r2, [r3, #0]
    return;
 8002f9c:	e016      	b.n	8002fcc <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002f9e:	2002      	movs	r0, #2
 8002fa0:	f00f f8ba 	bl	8012118 <malloc>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff ff68 	bl	8002e8e <stm32_lock_init>
    return;
 8002fbe:	e005      	b.n	8002fcc <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8002fc0:	b672      	cpsid	i
}
 8002fc2:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8002fc4:	f7ff f956 	bl	8002274 <Error_Handler>
 8002fc8:	bf00      	nop
 8002fca:	e7fd      	b.n	8002fc8 <__retarget_lock_init_recursive+0x44>
}
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe0:	b672      	cpsid	i
}
 8002fe2:	bf00      	nop
 8002fe4:	f7ff f946 	bl	8002274 <Error_Handler>
 8002fe8:	bf00      	nop
 8002fea:	e7fd      	b.n	8002fe8 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff ff64 	bl	8002ebc <stm32_lock_acquire>
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d105      	bne.n	8003016 <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 800300a:	b672      	cpsid	i
}
 800300c:	bf00      	nop
 800300e:	f7ff f931 	bl	8002274 <Error_Handler>
 8003012:	bf00      	nop
 8003014:	e7fd      	b.n	8003012 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ff88 	bl	8002f2e <stm32_lock_release>
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <QENC_Init_Encoder0>:
#include "AMT10E2.h"

// Initialize encoder interface on TIM1
void QENC_Init_Encoder0(void) {
 8003028:	b580      	push	{r7, lr}
 800302a:	b08a      	sub	sp, #40	@ 0x28
 800302c:	af00      	add	r7, sp, #0
    TIM_Encoder_InitTypeDef encoderConfig = {0};
 800302e:	1d3b      	adds	r3, r7, #4
 8003030:	2224      	movs	r2, #36	@ 0x24
 8003032:	2100      	movs	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f00f fba7 	bl	8012788 <memset>

    encoderConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800303a:	2303      	movs	r3, #3
 800303c:	607b      	str	r3, [r7, #4]
    encoderConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800303e:	2300      	movs	r3, #0
 8003040:	60bb      	str	r3, [r7, #8]
    encoderConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003042:	2301      	movs	r3, #1
 8003044:	60fb      	str	r3, [r7, #12]
    encoderConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
    encoderConfig.IC1Filter = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]

    encoderConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800304e:	2300      	movs	r3, #0
 8003050:	61bb      	str	r3, [r7, #24]
    encoderConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003052:	2301      	movs	r3, #1
 8003054:	61fb      	str	r3, [r7, #28]
    encoderConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003056:	2300      	movs	r3, #0
 8003058:	623b      	str	r3, [r7, #32]
    encoderConfig.IC2Filter = 0;
 800305a:	2300      	movs	r3, #0
 800305c:	627b      	str	r3, [r7, #36]	@ 0x24

    htim1.Instance = TIM1;
 800305e:	4b0e      	ldr	r3, [pc, #56]	@ (8003098 <QENC_Init_Encoder0+0x70>)
 8003060:	4a0e      	ldr	r2, [pc, #56]	@ (800309c <QENC_Init_Encoder0+0x74>)
 8003062:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 0;
 8003064:	4b0c      	ldr	r3, [pc, #48]	@ (8003098 <QENC_Init_Encoder0+0x70>)
 8003066:	2200      	movs	r2, #0
 8003068:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800306a:	4b0b      	ldr	r3, [pc, #44]	@ (8003098 <QENC_Init_Encoder0+0x70>)
 800306c:	2200      	movs	r2, #0
 800306e:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 0xFFFF;
 8003070:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <QENC_Init_Encoder0+0x70>)
 8003072:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003076:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003078:	4b07      	ldr	r3, [pc, #28]	@ (8003098 <QENC_Init_Encoder0+0x70>)
 800307a:	2200      	movs	r2, #0
 800307c:	611a      	str	r2, [r3, #16]

    HAL_TIM_Encoder_Init(&htim1, &encoderConfig);
 800307e:	1d3b      	adds	r3, r7, #4
 8003080:	4619      	mov	r1, r3
 8003082:	4805      	ldr	r0, [pc, #20]	@ (8003098 <QENC_Init_Encoder0+0x70>)
 8003084:	f007 fdd9 	bl	800ac3a <HAL_TIM_Encoder_Init>
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8003088:	213c      	movs	r1, #60	@ 0x3c
 800308a:	4803      	ldr	r0, [pc, #12]	@ (8003098 <QENC_Init_Encoder0+0x70>)
 800308c:	f007 fe7b 	bl	800ad86 <HAL_TIM_Encoder_Start>
}
 8003090:	bf00      	nop
 8003092:	3728      	adds	r7, #40	@ 0x28
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000500 	.word	0x20000500
 800309c:	40012c00 	.word	0x40012c00

080030a0 <QENC_Get_Encoder0_Count>:
    HAL_TIM_Encoder_Init(&htim8, &encoderConfig);
    HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
}

// Get signed count from Encoder 0
int16_t QENC_Get_Encoder0_Count(void) {
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
    return (int16_t)__HAL_TIM_GET_COUNTER(&htim1);
 80030a4:	4b04      	ldr	r3, [pc, #16]	@ (80030b8 <QENC_Get_Encoder0_Count+0x18>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030aa:	b21b      	sxth	r3, r3
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	20000500 	.word	0x20000500

080030bc <BMM150_enable_chip_select>:
	GPIO_TypeDef* chip_select_port;
	uint16_t chip_select_pin;
};

void BMM150_enable_chip_select(GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(cs_port, cs_gpio_pin, GPIO_PIN_RESET);
 80030c8:	887b      	ldrh	r3, [r7, #2]
 80030ca:	2200      	movs	r2, #0
 80030cc:	4619      	mov	r1, r3
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f002 ff88 	bl	8005fe4 <HAL_GPIO_WritePin>
}
 80030d4:	bf00      	nop
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <BMM150_disable_chip_select>:

void BMM150_disable_chip_select(GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(cs_port, cs_gpio_pin, GPIO_PIN_SET);
 80030e8:	887b      	ldrh	r3, [r7, #2]
 80030ea:	2201      	movs	r2, #1
 80030ec:	4619      	mov	r1, r3
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f002 ff78 	bl	8005fe4 <HAL_GPIO_WritePin>
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <BMM150_SPI_read>:
	osDelay(period_in_micro_s / tick_amount);
}
*/

BMM150_INTF_RET_TYPE BMM150_SPI_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	4603      	mov	r3, r0
 800310a:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	75fb      	strb	r3, [r7, #23]
	struct spi_interface *spi = (struct spi_interface *)intf_ptr;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	613b      	str	r3, [r7, #16]

	BMM150_enable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	891b      	ldrh	r3, [r3, #8]
 800311c:	4619      	mov	r1, r3
 800311e:	4610      	mov	r0, r2
 8003120:	f7ff ffcc 	bl	80030bc <BMM150_enable_chip_select>

	status = HAL_SPI_Transmit(spi->spi_handle, reg_addr, sizeof(reg_addr), BMM150_TIMEOUT_DURATION);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	7bfb      	ldrb	r3, [r7, #15]
 800312a:	4619      	mov	r1, r3
 800312c:	230a      	movs	r3, #10
 800312e:	2201      	movs	r2, #1
 8003130:	f006 fdda 	bl	8009ce8 <HAL_SPI_Transmit>
 8003134:	4603      	mov	r3, r0
 8003136:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(spi->spi_handle, reg_data, length, BMM150_TIMEOUT_DURATION);
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	b29a      	uxth	r2, r3
 8003140:	230a      	movs	r3, #10
 8003142:	68b9      	ldr	r1, [r7, #8]
 8003144:	f006 ff46 	bl	8009fd4 <HAL_SPI_Receive>
 8003148:	4603      	mov	r3, r0
 800314a:	75fb      	strb	r3, [r7, #23]

	BMM150_disable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	891b      	ldrh	r3, [r3, #8]
 8003154:	4619      	mov	r1, r3
 8003156:	4610      	mov	r0, r2
 8003158:	f7ff ffc0 	bl	80030dc <BMM150_disable_chip_select>


	return (BMM150_INTF_RET_TYPE)status;
 800315c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <BMM150_SPI_write>:

BMM150_INTF_RET_TYPE BMM150_SPI_write(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	4603      	mov	r3, r0
 8003176:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	75fb      	strb	r3, [r7, #23]
	struct spi_interface *spi = (struct spi_interface *)intf_ptr;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	613b      	str	r3, [r7, #16]

	BMM150_enable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	891b      	ldrh	r3, [r3, #8]
 8003188:	4619      	mov	r1, r3
 800318a:	4610      	mov	r0, r2
 800318c:	f7ff ff96 	bl	80030bc <BMM150_enable_chip_select>

	status = HAL_SPI_Transmit(spi->spi_handle, reg_addr, sizeof(reg_addr), BMM150_TIMEOUT_DURATION);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	4619      	mov	r1, r3
 8003198:	230a      	movs	r3, #10
 800319a:	2201      	movs	r2, #1
 800319c:	f006 fda4 	bl	8009ce8 <HAL_SPI_Transmit>
 80031a0:	4603      	mov	r3, r0
 80031a2:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Transmit(spi->spi_handle, reg_data, length, BMM150_TIMEOUT_DURATION);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	230a      	movs	r3, #10
 80031ae:	68b9      	ldr	r1, [r7, #8]
 80031b0:	f006 fd9a 	bl	8009ce8 <HAL_SPI_Transmit>
 80031b4:	4603      	mov	r3, r0
 80031b6:	75fb      	strb	r3, [r7, #23]

	BMM150_disable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	891b      	ldrh	r3, [r3, #8]
 80031c0:	4619      	mov	r1, r3
 80031c2:	4610      	mov	r0, r2
 80031c4:	f7ff ff8a 	bl	80030dc <BMM150_disable_chip_select>

	return (BMM150_INTF_RET_TYPE)status;
 80031c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <BMM150_spi_init>:

struct bmm150_dev BMM150_spi_init(SPI_HandleTypeDef *spi_handle, GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 80031d4:	b5b0      	push	{r4, r5, r7, lr}
 80031d6:	b09e      	sub	sp, #120	@ 0x78
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	807b      	strh	r3, [r7, #2]
	struct bmm150_dev bmm150 = (struct bmm150_dev){ 0 };
 80031e2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80031e6:	222c      	movs	r2, #44	@ 0x2c
 80031e8:	2100      	movs	r1, #0
 80031ea:	4618      	mov	r0, r3
 80031ec:	f00f facc 	bl	8012788 <memset>

	if (spi_handle == NULL)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10f      	bne.n	8003216 <BMM150_spi_init+0x42>
	{
		bmm150.intf_rslt = BMM150_E_NULL_PTR;
 80031f6:	23ff      	movs	r3, #255	@ 0xff
 80031f8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
		return bmm150;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	461d      	mov	r5, r3
 8003200:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8003204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800320a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800320c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003210:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003214:	e026      	b.n	8003264 <BMM150_spi_init+0x90>
	}

	struct spi_interface my_spi = {
 8003216:	f107 0308 	add.w	r3, r7, #8
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	1d3b      	adds	r3, r7, #4
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	887b      	ldrh	r3, [r7, #2]
 8003222:	83bb      	strh	r3, [r7, #28]
		.spi_handle = &spi_handle,
		.chip_select_port = &cs_port,
		.chip_select_pin = cs_gpio_pin
	};

	bmm150.intf = BMM150_SPI_INTF;
 8003224:	2300      	movs	r3, #0
 8003226:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	bmm150.read = BMM150_SPI_read;
 800322a:	4b10      	ldr	r3, [pc, #64]	@ (800326c <BMM150_spi_init+0x98>)
 800322c:	65bb      	str	r3, [r7, #88]	@ 0x58
	bmm150.write = BMM150_SPI_write;
 800322e:	4b10      	ldr	r3, [pc, #64]	@ (8003270 <BMM150_spi_init+0x9c>)
 8003230:	65fb      	str	r3, [r7, #92]	@ 0x5c
	bmm150.delay_us = HAL_Delay;
 8003232:	4b10      	ldr	r3, [pc, #64]	@ (8003274 <BMM150_spi_init+0xa0>)
 8003234:	663b      	str	r3, [r7, #96]	@ 0x60
	bmm150.intf_ptr = &my_spi;
 8003236:	f107 0314 	add.w	r3, r7, #20
 800323a:	653b      	str	r3, [r7, #80]	@ 0x50

	//NOTE: Potential error: is chip id initialized properly?
	bmm150.intf_rslt = bmm150_init(&bmm150);
 800323c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003240:	4618      	mov	r0, r3
 8003242:	f000 f819 	bl	8003278 <bmm150_init>
 8003246:	4603      	mov	r3, r0
 8003248:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	return bmm150;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	461d      	mov	r5, r3
 8003250:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8003254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800325a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800325c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003260:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	3778      	adds	r7, #120	@ 0x78
 8003268:	46bd      	mov	sp, r7
 800326a:	bdb0      	pop	{r4, r5, r7, pc}
 800326c:	080030fd 	.word	0x080030fd
 8003270:	08003169 	.word	0x08003169
 8003274:	08004239 	.word	0x08004239

08003278 <bmm150_init>:
 *  @brief This API is the entry point, Call this API before using other APIs.
 *  This API reads the chip-id of the sensor which is the first step to
 *  verify the sensor and updates the trim parameters of the sensor.
 */
int8_t bmm150_init(struct bmm150_dev *dev)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	73bb      	strb	r3, [r7, #14]

    /* Power up the sensor from suspend to sleep mode */
    rslt = set_power_control_bit(BMM150_POWER_CNTRL_ENABLE, dev);
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	2001      	movs	r0, #1
 8003288:	f000 f8ac 	bl	80033e4 <set_power_control_bit>
 800328c:	4603      	mov	r3, r0
 800328e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 8003290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d11e      	bne.n	80032d6 <bmm150_init+0x5e>
    {
        /* Start-up time delay of 3ms */
        dev->delay_us(BMM150_START_UP_TIME, dev->intf_ptr);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6852      	ldr	r2, [r2, #4]
 80032a0:	4611      	mov	r1, r2
 80032a2:	2003      	movs	r0, #3
 80032a4:	4798      	blx	r3

        /* Chip ID of the sensor is read */
        rslt = bmm150_get_regs(BMM150_REG_CHIP_ID, &chip_id, 1, dev);
 80032a6:	f107 010e 	add.w	r1, r7, #14
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	2040      	movs	r0, #64	@ 0x40
 80032b0:	f000 f843 	bl	800333a <bmm150_get_regs>
 80032b4:	4603      	mov	r3, r0
 80032b6:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMM150_OK)
 80032b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10a      	bne.n	80032d6 <bmm150_init+0x5e>
        {
            /* Check for chip id validity */
            if (chip_id == BMM150_CHIP_ID)
 80032c0:	7bbb      	ldrb	r3, [r7, #14]
 80032c2:	2b32      	cmp	r3, #50	@ 0x32
 80032c4:	d107      	bne.n	80032d6 <bmm150_init+0x5e>
            {
                dev->chip_id = chip_id;
 80032c6:	7bba      	ldrb	r2, [r7, #14]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	701a      	strb	r2, [r3, #0]

                /* Function to update trim values */
                rslt = read_trim_registers(dev);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f8c3 	bl	8003458 <read_trim_registers>
 80032d2:	4603      	mov	r3, r0
 80032d4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80032d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <bmm150_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmm150_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 80032e2:	b590      	push	{r4, r7, lr}
 80032e4:	b087      	sub	sp, #28
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	4603      	mov	r3, r0
 80032f0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80032f2:	6838      	ldr	r0, [r7, #0]
 80032f4:	f000 f852 	bl	800339c <null_ptr_check>
 80032f8:	4603      	mov	r3, r0
 80032fa:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL) && (len != 0))
 80032fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d112      	bne.n	800332a <bmm150_set_regs+0x48>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00f      	beq.n	800332a <bmm150_set_regs+0x48>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00c      	beq.n	800332a <bmm150_set_regs+0x48>
        /* Write the data to the reg_addr */

        /* SPI write requires to set The MSB of reg_addr as 0
         * but in default the MSB is always 0
         */
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	691c      	ldr	r4, [r3, #16]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	7bf8      	ldrb	r0, [r7, #15]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	47a0      	blx	r4
 8003320:	4603      	mov	r3, r0
 8003322:	461a      	mov	r2, r3
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	721a      	strb	r2, [r3, #8]
 8003328:	e001      	b.n	800332e <bmm150_set_regs+0x4c>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 800332a:	23ff      	movs	r3, #255	@ 0xff
 800332c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800332e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003332:	4618      	mov	r0, r3
 8003334:	371c      	adds	r7, #28
 8003336:	46bd      	mov	sp, r7
 8003338:	bd90      	pop	{r4, r7, pc}

0800333a <bmm150_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmm150_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 800333a:	b590      	push	{r4, r7, lr}
 800333c:	b087      	sub	sp, #28
 800333e:	af00      	add	r7, sp, #0
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	4603      	mov	r3, r0
 8003348:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800334a:	6838      	ldr	r0, [r7, #0]
 800334c:	f000 f826 	bl	800339c <null_ptr_check>
 8003350:	4603      	mov	r3, r0
 8003352:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL))
 8003354:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d117      	bne.n	800338c <bmm150_get_regs+0x52>
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d014      	beq.n	800338c <bmm150_get_regs+0x52>
    {
        if (dev->intf != BMM150_I2C_INTF)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	785b      	ldrb	r3, [r3, #1]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d003      	beq.n	8003372 <bmm150_get_regs+0x38>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | 0x80;
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003370:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68dc      	ldr	r4, [r3, #12]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	7bf8      	ldrb	r0, [r7, #15]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	47a0      	blx	r4
 8003382:	4603      	mov	r3, r0
 8003384:	461a      	mov	r2, r3
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	721a      	strb	r2, [r3, #8]
 800338a:	e001      	b.n	8003390 <bmm150_get_regs+0x56>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 800338c:	23ff      	movs	r3, #255	@ 0xff
 800338e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003390:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003394:	4618      	mov	r0, r3
 8003396:	371c      	adds	r7, #28
 8003398:	46bd      	mov	sp, r7
 800339a:	bd90      	pop	{r4, r7, pc}

0800339c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmm150_dev *dev)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00f      	beq.n	80033ca <null_ptr_check+0x2e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00b      	beq.n	80033ca <null_ptr_check+0x2e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d007      	beq.n	80033ca <null_ptr_check+0x2e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d102      	bne.n	80033d0 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMM150_E_NULL_PTR;
 80033ca:	23ff      	movs	r3, #255	@ 0xff
 80033cc:	73fb      	strb	r3, [r7, #15]
 80033ce:	e001      	b.n	80033d4 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMM150_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80033d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <set_power_control_bit>:

/*!
 * @brief This internal API sets/resets the power control bit of 0x4B register.
 */
static int8_t set_power_control_bit(uint8_t pwrcntrl_bit, struct bmm150_dev *dev)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	6039      	str	r1, [r7, #0]
 80033ee:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data = 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	73bb      	strb	r3, [r7, #14]

    /* Power control register 0x4B is read */
    rslt = bmm150_get_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 80033f4:	f107 010e 	add.w	r1, r7, #14
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	2201      	movs	r2, #1
 80033fc:	204b      	movs	r0, #75	@ 0x4b
 80033fe:	f7ff ff9c 	bl	800333a <bmm150_get_regs>
 8003402:	4603      	mov	r3, r0
 8003404:	73fb      	strb	r3, [r7, #15]

    /* Proceed if everything is fine until now */
    if (rslt == BMM150_OK)
 8003406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d11e      	bne.n	800344c <set_power_control_bit+0x68>
    {
        /* Sets the value of power control bit */
        reg_data = BMM150_SET_BITS_POS_0(reg_data, BMM150_PWR_CNTRL, pwrcntrl_bit);
 800340e:	7bbb      	ldrb	r3, [r7, #14]
 8003410:	b25b      	sxtb	r3, r3
 8003412:	f023 0301 	bic.w	r3, r3, #1
 8003416:	b25a      	sxtb	r2, r3
 8003418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	b25b      	sxtb	r3, r3
 8003422:	4313      	orrs	r3, r2
 8003424:	b25b      	sxtb	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 800342a:	f107 010e 	add.w	r1, r7, #14
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2201      	movs	r2, #1
 8003432:	204b      	movs	r0, #75	@ 0x4b
 8003434:	f7ff ff55 	bl	80032e2 <bmm150_set_regs>
 8003438:	4603      	mov	r3, r0
 800343a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMM150_OK)
 800343c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d103      	bne.n	800344c <set_power_control_bit+0x68>
        {
            /* Store the power control bit
             * value in dev structure
             */
            dev->pwr_cntrl_bit = pwrcntrl_bit;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	79fa      	ldrb	r2, [r7, #7]
 8003448:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        }
    }

    return rslt;
 800344c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <read_trim_registers>:
/*!
 * @brief This internal API reads the trim registers of the sensor and stores
 * the trim values in the "trim_data" of device structure.
 */
static int8_t read_trim_registers(struct bmm150_dev *dev)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t trim_x1y1[2] = { 0 };
 8003460:	2300      	movs	r3, #0
 8003462:	833b      	strh	r3, [r7, #24]
    uint8_t trim_xyz_data[4] = { 0 };
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
    uint8_t trim_xy1xy2[10] = { 0 };
 8003468:	2300      	movs	r3, #0
 800346a:	60bb      	str	r3, [r7, #8]
 800346c:	f107 030c 	add.w	r3, r7, #12
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	809a      	strh	r2, [r3, #4]
    uint16_t temp_msb = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	83bb      	strh	r3, [r7, #28]

    /* Trim register value is read */
    rslt = bmm150_get_regs(BMM150_DIG_X1, trim_x1y1, 2, dev);
 800347a:	f107 0118 	add.w	r1, r7, #24
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	205d      	movs	r0, #93	@ 0x5d
 8003484:	f7ff ff59 	bl	800333a <bmm150_get_regs>
 8003488:	4603      	mov	r3, r0
 800348a:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 800348c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d16a      	bne.n	800356a <read_trim_registers+0x112>
    {
        rslt = bmm150_get_regs(BMM150_DIG_Z4_LSB, trim_xyz_data, 4, dev);
 8003494:	f107 0114 	add.w	r1, r7, #20
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2204      	movs	r2, #4
 800349c:	2062      	movs	r0, #98	@ 0x62
 800349e:	f7ff ff4c 	bl	800333a <bmm150_get_regs>
 80034a2:	4603      	mov	r3, r0
 80034a4:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMM150_OK)
 80034a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d15d      	bne.n	800356a <read_trim_registers+0x112>
        {
            rslt = bmm150_get_regs(BMM150_DIG_Z2_LSB, trim_xy1xy2, 10, dev);
 80034ae:	f107 0108 	add.w	r1, r7, #8
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	220a      	movs	r2, #10
 80034b6:	2068      	movs	r0, #104	@ 0x68
 80034b8:	f7ff ff3f 	bl	800333a <bmm150_get_regs>
 80034bc:	4603      	mov	r3, r0
 80034be:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMM150_OK)
 80034c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d150      	bne.n	800356a <read_trim_registers+0x112>
            {
                /* Trim data which is read is updated
                 * in the device structure
                 */
                dev->trim_data.dig_x1 = (int8_t)trim_x1y1[0];
 80034c8:	7e3b      	ldrb	r3, [r7, #24]
 80034ca:	b25a      	sxtb	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	761a      	strb	r2, [r3, #24]
                dev->trim_data.dig_y1 = (int8_t)trim_x1y1[1];
 80034d0:	7e7b      	ldrb	r3, [r7, #25]
 80034d2:	b25a      	sxtb	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	765a      	strb	r2, [r3, #25]
                dev->trim_data.dig_x2 = (int8_t)trim_xyz_data[2];
 80034d8:	7dbb      	ldrb	r3, [r7, #22]
 80034da:	b25a      	sxtb	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	769a      	strb	r2, [r3, #26]
                dev->trim_data.dig_y2 = (int8_t)trim_xyz_data[3];
 80034e0:	7dfb      	ldrb	r3, [r7, #23]
 80034e2:	b25a      	sxtb	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	76da      	strb	r2, [r3, #27]
                temp_msb = ((uint16_t)trim_xy1xy2[3]) << 8;
 80034e8:	7afb      	ldrb	r3, [r7, #11]
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z1 = (uint16_t)(temp_msb | trim_xy1xy2[2]);
 80034ee:	7abb      	ldrb	r3, [r7, #10]
 80034f0:	461a      	mov	r2, r3
 80034f2:	8bbb      	ldrh	r3, [r7, #28]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	839a      	strh	r2, [r3, #28]
                temp_msb = ((uint16_t)trim_xy1xy2[1]) << 8;
 80034fc:	7a7b      	ldrb	r3, [r7, #9]
 80034fe:	021b      	lsls	r3, r3, #8
 8003500:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z2 = (int16_t)(temp_msb | trim_xy1xy2[0]);
 8003502:	7a3b      	ldrb	r3, [r7, #8]
 8003504:	461a      	mov	r2, r3
 8003506:	8bbb      	ldrh	r3, [r7, #28]
 8003508:	4313      	orrs	r3, r2
 800350a:	b29b      	uxth	r3, r3
 800350c:	b21a      	sxth	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	83da      	strh	r2, [r3, #30]
                temp_msb = ((uint16_t)trim_xy1xy2[7]) << 8;
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z3 = (int16_t)(temp_msb | trim_xy1xy2[6]);
 8003518:	7bbb      	ldrb	r3, [r7, #14]
 800351a:	461a      	mov	r2, r3
 800351c:	8bbb      	ldrh	r3, [r7, #28]
 800351e:	4313      	orrs	r3, r2
 8003520:	b29b      	uxth	r3, r3
 8003522:	b21a      	sxth	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	841a      	strh	r2, [r3, #32]
                temp_msb = ((uint16_t)trim_xyz_data[1]) << 8;
 8003528:	7d7b      	ldrb	r3, [r7, #21]
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z4 = (int16_t)(temp_msb | trim_xyz_data[0]);
 800352e:	7d3b      	ldrb	r3, [r7, #20]
 8003530:	461a      	mov	r2, r3
 8003532:	8bbb      	ldrh	r3, [r7, #28]
 8003534:	4313      	orrs	r3, r2
 8003536:	b29b      	uxth	r3, r3
 8003538:	b21a      	sxth	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	845a      	strh	r2, [r3, #34]	@ 0x22
                dev->trim_data.dig_xy1 = trim_xy1xy2[9];
 800353e:	7c7a      	ldrb	r2, [r7, #17]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                dev->trim_data.dig_xy2 = (int8_t)trim_xy1xy2[8];
 8003546:	7c3b      	ldrb	r3, [r7, #16]
 8003548:	b25a      	sxtb	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
 8003550:	7b7b      	ldrb	r3, [r7, #13]
 8003552:	021b      	lsls	r3, r3, #8
 8003554:	b29b      	uxth	r3, r3
 8003556:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 800355a:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
 800355c:	7b3b      	ldrb	r3, [r7, #12]
 800355e:	461a      	mov	r2, r3
 8003560:	8bbb      	ldrh	r3, [r7, #28]
 8003562:	4313      	orrs	r3, r2
 8003564:	b29a      	uxth	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	84da      	strh	r2, [r3, #38]	@ 0x26
            }
        }
    }

    return rslt;
 800356a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3720      	adds	r7, #32
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <BQ28Z610_ReadVoltage>:

#define CMD_VOLTAGE 0x08
#define BQ28Z610_I2C_ADDR (0x55 << 1)

HAL_StatusTypeDef BQ28Z610_ReadVoltage(I2C_HandleTypeDef *hi2c, uint16_t *voltage)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b088      	sub	sp, #32
 800357a:	af04      	add	r7, sp, #16
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
	uint8_t rx[2];
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, BQ28Z610_I2C_ADDR, CMD_VOLTAGE, I2C_MEMADD_SIZE_8BIT, rx, 2, HAL_MAX_DELAY);
 8003580:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003584:	9302      	str	r3, [sp, #8]
 8003586:	2302      	movs	r3, #2
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	f107 0308 	add.w	r3, r7, #8
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	2301      	movs	r3, #1
 8003592:	2208      	movs	r2, #8
 8003594:	21aa      	movs	r1, #170	@ 0xaa
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f002 fdd8 	bl	800614c <HAL_I2C_Mem_Read>
 800359c:	4603      	mov	r3, r0
 800359e:	73fb      	strb	r3, [r7, #15]

	if (status == HAL_OK)
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10a      	bne.n	80035bc <BQ28Z610_ReadVoltage+0x46>
	{
		uint16_t shifted = rx[1] << 8;
 80035a6:	7a7b      	ldrb	r3, [r7, #9]
 80035a8:	021b      	lsls	r3, r3, #8
 80035aa:	81bb      	strh	r3, [r7, #12]
		uint16_t lower = rx[0];
 80035ac:	7a3b      	ldrb	r3, [r7, #8]
 80035ae:	817b      	strh	r3, [r7, #10]
		*voltage = shifted | lower;
 80035b0:	89ba      	ldrh	r2, [r7, #12]
 80035b2:	897b      	ldrh	r3, [r7, #10]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	801a      	strh	r2, [r3, #0]
	}
	return status;
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
};
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <ICM42688P_disable_chip_select>:
/* Private GPIO CS Pin Variables */
static GPIO_TypeDef *ChipSelect_GPIO_Port;
static uint16_t ChipSelect_Pin;

static void ICM42688P_disable_chip_select()
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_RESET);
 80035cc:	4b04      	ldr	r3, [pc, #16]	@ (80035e0 <ICM42688P_disable_chip_select+0x18>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a04      	ldr	r2, [pc, #16]	@ (80035e4 <ICM42688P_disable_chip_select+0x1c>)
 80035d2:	8811      	ldrh	r1, [r2, #0]
 80035d4:	2200      	movs	r2, #0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f002 fd04 	bl	8005fe4 <HAL_GPIO_WritePin>
}
 80035dc:	bf00      	nop
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	200008ac 	.word	0x200008ac
 80035e4:	200008b0 	.word	0x200008b0

080035e8 <ICM42688P_enable_chip_select>:

static void ICM42688P_enable_chip_select()
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_SET);
 80035ec:	4b04      	ldr	r3, [pc, #16]	@ (8003600 <ICM42688P_enable_chip_select+0x18>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a04      	ldr	r2, [pc, #16]	@ (8003604 <ICM42688P_enable_chip_select+0x1c>)
 80035f2:	8811      	ldrh	r1, [r2, #0]
 80035f4:	2201      	movs	r2, #1
 80035f6:	4618      	mov	r0, r3
 80035f8:	f002 fcf4 	bl	8005fe4 <HAL_GPIO_WritePin>
}
 80035fc:	bf00      	nop
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	200008ac 	.word	0x200008ac
 8003604:	200008b0 	.word	0x200008b0

08003608 <ICM42688P_write_reg>:

static HAL_StatusTypeDef ICM42688P_write_reg(uint8_t reg, uint8_t data)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	460a      	mov	r2, r1
 8003612:	71fb      	strb	r3, [r7, #7]
 8003614:	4613      	mov	r3, r2
 8003616:	71bb      	strb	r3, [r7, #6]
    uint8_t tx[2] = {reg, data};
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	733b      	strb	r3, [r7, #12]
 800361c:	79bb      	ldrb	r3, [r7, #6]
 800361e:	737b      	strb	r3, [r7, #13]
    ICM42688P_disable_chip_select();
 8003620:	f7ff ffd2 	bl	80035c8 <ICM42688P_disable_chip_select>
    HAL_SPI_Transmit(hspi, tx, 2, HAL_MAX_DELAY);
 8003624:	4b07      	ldr	r3, [pc, #28]	@ (8003644 <ICM42688P_write_reg+0x3c>)
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	f107 010c 	add.w	r1, r7, #12
 800362c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003630:	2202      	movs	r2, #2
 8003632:	f006 fb59 	bl	8009ce8 <HAL_SPI_Transmit>
    ICM42688P_enable_chip_select();
 8003636:	f7ff ffd7 	bl	80035e8 <ICM42688P_enable_chip_select>
    return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	200008a8 	.word	0x200008a8

08003648 <ICM42688P_init>:
    ICM42688P_enable_chip_select();
    return rx;
}

uint8_t ICM42688P_init(SPI_TypeDef *spi_handle, GPIO_TypeDef *chip_select_port, uint16_t chip_select_gpio_pin)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	4613      	mov	r3, r2
 8003654:	80fb      	strh	r3, [r7, #6]
    hspi = spi_handle;
 8003656:	4a0e      	ldr	r2, [pc, #56]	@ (8003690 <ICM42688P_init+0x48>)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6013      	str	r3, [r2, #0]
    ChipSelect_GPIO_Port = chip_select_port;
 800365c:	4a0d      	ldr	r2, [pc, #52]	@ (8003694 <ICM42688P_init+0x4c>)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	6013      	str	r3, [r2, #0]
    ChipSelect_Pin = chip_select_gpio_pin;
 8003662:	4a0d      	ldr	r2, [pc, #52]	@ (8003698 <ICM42688P_init+0x50>)
 8003664:	88fb      	ldrh	r3, [r7, #6]
 8003666:	8013      	strh	r3, [r2, #0]
    HAL_Delay(100);
    ICM42688P_write_reg(0x11, 0x00);  // Power management
    ICM42688P_write_reg(0x10, 0x0F);  // Gyro and accel config
    */

    ICM42688P_write_reg(0x11, 0x01); // Reset Device
 8003668:	2101      	movs	r1, #1
 800366a:	2011      	movs	r0, #17
 800366c:	f7ff ffcc 	bl	8003608 <ICM42688P_write_reg>
    HAL_Delay(100);
 8003670:	2064      	movs	r0, #100	@ 0x64
 8003672:	f000 fde1 	bl	8004238 <HAL_Delay>
    ICM42688P_write_reg(0x4E, (0b11 << 2) | (0b11 << 0)); // Enable gyro & accelerometer
 8003676:	210f      	movs	r1, #15
 8003678:	204e      	movs	r0, #78	@ 0x4e
 800367a:	f7ff ffc5 	bl	8003608 <ICM42688P_write_reg>
    ICM42688P_write_reg(0x7B, (0b10 << 1));               // Enable CLKIN
 800367e:	2104      	movs	r1, #4
 8003680:	207b      	movs	r0, #123	@ 0x7b
 8003682:	f7ff ffc1 	bl	8003608 <ICM42688P_write_reg>

    return 0;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	200008a8 	.word	0x200008a8
 8003694:	200008ac 	.word	0x200008ac
 8003698:	200008b0 	.word	0x200008b0

0800369c <ICM42688P_read_data>:

ICM42688P_AccelData ICM42688P_read_data()
{
 800369c:	b590      	push	{r4, r7, lr}
 800369e:	b08b      	sub	sp, #44	@ 0x2c
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
    ICM42688P_AccelData data = {0};
 80036a4:	f107 0318 	add.w	r3, r7, #24
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]

    uint8_t buffer[12];
    ICM42688P_disable_chip_select();
 80036b0:	f7ff ff8a 	bl	80035c8 <ICM42688P_disable_chip_select>
    // This register should be correct
    uint8_t reg = 0x1F | (1 << 7);
 80036b4:	239f      	movs	r3, #159	@ 0x9f
 80036b6:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(hspi, &reg, 1, HAL_MAX_DELAY);
 80036b8:	4b32      	ldr	r3, [pc, #200]	@ (8003784 <ICM42688P_read_data+0xe8>)
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	f107 010b 	add.w	r1, r7, #11
 80036c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036c4:	2201      	movs	r2, #1
 80036c6:	f006 fb0f 	bl	8009ce8 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, buffer, sizeof(buffer) / sizeof(buffer[0]), HAL_MAX_DELAY);
 80036ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003784 <ICM42688P_read_data+0xe8>)
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	f107 010c 	add.w	r1, r7, #12
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036d6:	220c      	movs	r2, #12
 80036d8:	f006 fc7c 	bl	8009fd4 <HAL_SPI_Receive>
    ICM42688P_enable_chip_select();
 80036dc:	f7ff ff84 	bl	80035e8 <ICM42688P_enable_chip_select>

    data.accel_x = (buffer[0] << 8) | buffer[1];
 80036e0:	7b3b      	ldrb	r3, [r7, #12]
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	b21a      	sxth	r2, r3
 80036e6:	7b7b      	ldrb	r3, [r7, #13]
 80036e8:	b21b      	sxth	r3, r3
 80036ea:	4313      	orrs	r3, r2
 80036ec:	b21b      	sxth	r3, r3
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	833b      	strh	r3, [r7, #24]
    data.accel_y = (buffer[2] << 8) | buffer[3];
 80036f2:	7bbb      	ldrb	r3, [r7, #14]
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	b21a      	sxth	r2, r3
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	b21b      	sxth	r3, r3
 80036fc:	4313      	orrs	r3, r2
 80036fe:	b21b      	sxth	r3, r3
 8003700:	b29b      	uxth	r3, r3
 8003702:	837b      	strh	r3, [r7, #26]
    data.accel_z = ((buffer[4] << 8) | buffer[5]) * -1;
 8003704:	7c3b      	ldrb	r3, [r7, #16]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	b21a      	sxth	r2, r3
 800370a:	7c7b      	ldrb	r3, [r7, #17]
 800370c:	b21b      	sxth	r3, r3
 800370e:	4313      	orrs	r3, r2
 8003710:	b21b      	sxth	r3, r3
 8003712:	b29b      	uxth	r3, r3
 8003714:	425b      	negs	r3, r3
 8003716:	b29b      	uxth	r3, r3
 8003718:	83bb      	strh	r3, [r7, #28]

    // Get new information.
    uint32_t time = HAL_GetTick();
 800371a:	f000 fd81 	bl	8004220 <HAL_GetTick>
 800371e:	6278      	str	r0, [r7, #36]	@ 0x24
    data.gyro_x = (buffer[6] << 8) | buffer[7];
 8003720:	7cbb      	ldrb	r3, [r7, #18]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	b21a      	sxth	r2, r3
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	b21b      	sxth	r3, r3
 800372a:	4313      	orrs	r3, r2
 800372c:	b21b      	sxth	r3, r3
 800372e:	b29b      	uxth	r3, r3
 8003730:	83fb      	strh	r3, [r7, #30]
    data.gyro_y = (buffer[8] << 8) | buffer[9];
 8003732:	7d3b      	ldrb	r3, [r7, #20]
 8003734:	021b      	lsls	r3, r3, #8
 8003736:	b21a      	sxth	r2, r3
 8003738:	7d7b      	ldrb	r3, [r7, #21]
 800373a:	b21b      	sxth	r3, r3
 800373c:	4313      	orrs	r3, r2
 800373e:	b21b      	sxth	r3, r3
 8003740:	b29b      	uxth	r3, r3
 8003742:	843b      	strh	r3, [r7, #32]
    data.gyro_z = ((buffer[10] << 8) | buffer[11]) * -1;
 8003744:	7dbb      	ldrb	r3, [r7, #22]
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	b21a      	sxth	r2, r3
 800374a:	7dfb      	ldrb	r3, [r7, #23]
 800374c:	b21b      	sxth	r3, r3
 800374e:	4313      	orrs	r3, r2
 8003750:	b21b      	sxth	r3, r3
 8003752:	b29b      	uxth	r3, r3
 8003754:	425b      	negs	r3, r3
 8003756:	b29b      	uxth	r3, r3
 8003758:	847b      	strh	r3, [r7, #34]	@ 0x22
    // Calculate acceraltion from two gyro data points / time difference.
    // data.accel_x = Get_Accel_X(data.gyro_x, time);
    // data.accel_y = Get_Accel_Y(data.gyro_y, time);
    // data.accel_z = Get_Accel_Z(data.gyro_z, time);

    Transfer_Data(data.gyro_x, data.gyro_y, data.gyro_z, time);
 800375a:	8bfb      	ldrh	r3, [r7, #30]
 800375c:	4618      	mov	r0, r3
 800375e:	8c3b      	ldrh	r3, [r7, #32]
 8003760:	4619      	mov	r1, r3
 8003762:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003764:	461a      	mov	r2, r3
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	f000 f80e 	bl	8003788 <Transfer_Data>

    return data;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	461c      	mov	r4, r3
 8003770:	f107 0318 	add.w	r3, r7, #24
 8003774:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003776:	6020      	str	r0, [r4, #0]
 8003778:	6061      	str	r1, [r4, #4]
 800377a:	60a2      	str	r2, [r4, #8]
}
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	372c      	adds	r7, #44	@ 0x2c
 8003780:	46bd      	mov	sp, r7
 8003782:	bd90      	pop	{r4, r7, pc}
 8003784:	200008a8 	.word	0x200008a8

08003788 <Transfer_Data>:
int16_t gyro_old_y = 0;
int16_t gyro_old_z = 0;
int32_t old_time = 0; // Might need to reinitialized to actual start.

void Transfer_Data(uint16_t x, uint16_t y, uint16_t z, uint32_t time)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	607b      	str	r3, [r7, #4]
 8003790:	4603      	mov	r3, r0
 8003792:	81fb      	strh	r3, [r7, #14]
 8003794:	460b      	mov	r3, r1
 8003796:	81bb      	strh	r3, [r7, #12]
 8003798:	4613      	mov	r3, r2
 800379a:	817b      	strh	r3, [r7, #10]
    gyro_old_x = x;
 800379c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80037a0:	4b09      	ldr	r3, [pc, #36]	@ (80037c8 <Transfer_Data+0x40>)
 80037a2:	801a      	strh	r2, [r3, #0]
    gyro_old_y = y;
 80037a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80037a8:	4b08      	ldr	r3, [pc, #32]	@ (80037cc <Transfer_Data+0x44>)
 80037aa:	801a      	strh	r2, [r3, #0]
    gyro_old_z = z;
 80037ac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80037b0:	4b07      	ldr	r3, [pc, #28]	@ (80037d0 <Transfer_Data+0x48>)
 80037b2:	801a      	strh	r2, [r3, #0]
    old_time = time;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a07      	ldr	r2, [pc, #28]	@ (80037d4 <Transfer_Data+0x4c>)
 80037b8:	6013      	str	r3, [r2, #0]
}
 80037ba:	bf00      	nop
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	200008b2 	.word	0x200008b2
 80037cc:	200008b4 	.word	0x200008b4
 80037d0:	200008b6 	.word	0x200008b6
 80037d4:	200008b8 	.word	0x200008b8

080037d8 <LC76G_init>:
#include "LC76G.h"

void LC76G_init()
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart5,LC76G_ENABLE_GGA_FORMAT, strlen(LC76G_ENABLE_GGA_FORMAT), TIMEOUT);
    HAL_Delay(100);
    */

    // Ensure that there is a GPS fix
    char buf[2] = {0};
 80037de:	2300      	movs	r3, #0
 80037e0:	80bb      	strh	r3, [r7, #4]
    uint16_t num_iters = 1;
 80037e2:	2301      	movs	r3, #1
 80037e4:	80fb      	strh	r3, [r7, #6]
    while (buf == '\0' || num_iters == 0)
 80037e6:	e01a      	b.n	800381e <LC76G_init+0x46>
    {
        // Skip everything before <Quality> field
        HAL_UART_Receive(&huart5, NULL, 41, TIMEOUT);
 80037e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037ec:	2229      	movs	r2, #41	@ 0x29
 80037ee:	2100      	movs	r1, #0
 80037f0:	480f      	ldr	r0, [pc, #60]	@ (8003830 <LC76G_init+0x58>)
 80037f2:	f008 fdfc 	bl	800c3ee <HAL_UART_Receive>
        HAL_UART_Receive(&huart5, buf, 1, TIMEOUT);
 80037f6:	1d39      	adds	r1, r7, #4
 80037f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037fc:	2201      	movs	r2, #1
 80037fe:	480c      	ldr	r0, [pc, #48]	@ (8003830 <LC76G_init+0x58>)
 8003800:	f008 fdf5 	bl	800c3ee <HAL_UART_Receive>
        // Skip everything after <Quality> field
        HAL_UART_Receive(&huart5, NULL, 31, TIMEOUT);
 8003804:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003808:	221f      	movs	r2, #31
 800380a:	2100      	movs	r1, #0
 800380c:	4808      	ldr	r0, [pc, #32]	@ (8003830 <LC76G_init+0x58>)
 800380e:	f008 fdee 	bl	800c3ee <HAL_UART_Receive>
        HAL_Delay(100);
 8003812:	2064      	movs	r0, #100	@ 0x64
 8003814:	f000 fd10 	bl	8004238 <HAL_Delay>

        // If this value overflows then we've been in this loop far too long
        num_iters++;
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	3301      	adds	r3, #1
 800381c:	80fb      	strh	r3, [r7, #6]
    while (buf == '\0' || num_iters == 0)
 800381e:	88fb      	ldrh	r3, [r7, #6]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0e1      	beq.n	80037e8 <LC76G_init+0x10>
    }

    // Inform caller that a GPS fix was not acquired
    //  if (num_iters == 0)
    //  handle error
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	200006c8 	.word	0x200006c8

08003834 <LC76G_read_data>:

LC76G_gps_data LC76G_read_data()
{
 8003834:	b5b0      	push	{r4, r5, r7, lr}
 8003836:	b0a0      	sub	sp, #128	@ 0x80
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
    LC76G_gps_data gps_data;

    // Zero-initalized buffer
    char buf[80] = {0};
 800383c:	2300      	movs	r3, #0
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	f107 030c 	add.w	r3, r7, #12
 8003844:	224c      	movs	r2, #76	@ 0x4c
 8003846:	2100      	movs	r1, #0
 8003848:	4618      	mov	r0, r3
 800384a:	f00e ff9d 	bl	8012788 <memset>

    Example:
    GNGGA,040143.000,3149.334166,N,11706.941670,E,2,36,0.48,61.496,M,-0.335,M,,*58
    */

    HAL_UART_Receive(&huart5, buf, 79, TIMEOUT);
 800384e:	f107 0108 	add.w	r1, r7, #8
 8003852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003856:	224f      	movs	r2, #79	@ 0x4f
 8003858:	4809      	ldr	r0, [pc, #36]	@ (8003880 <LC76G_read_data+0x4c>)
 800385a:	f008 fdc8 	bl	800c3ee <HAL_UART_Receive>

    // Skip the rest of the transmission:
    // (,M,<Sep>,M,<DiffAge>,<DiffStation>*<Checksum><CR><LF>)
    HAL_UART_Receive(&huart5, NULL, 16, TIMEOUT);
    */
    return gps_data;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	461d      	mov	r5, r3
 8003862:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8003866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800386a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800386c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800386e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003872:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	3780      	adds	r7, #128	@ 0x80
 800387a:	46bd      	mov	sp, r7
 800387c:	bdb0      	pop	{r4, r5, r7, pc}
 800387e:	bf00      	nop
 8003880:	200006c8 	.word	0x200006c8

08003884 <MS5607_Init>:
/** Reset and prepare for general usage.
 * This will reset the device and perform the PROM reading to find the conversion values and if
 * the communication is working.
 */
MS5607StateTypeDef MS5607_Init(SPI_HandleTypeDef *spi_handle, GPIO_TypeDef *chip_select_port, uint16_t chip_select_gpio_pin)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	4613      	mov	r3, r2
 8003890:	80fb      	strh	r3, [r7, #6]
  hspi = spi_handle;
 8003892:	4a16      	ldr	r2, [pc, #88]	@ (80038ec <MS5607_Init+0x68>)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6013      	str	r3, [r2, #0]
  ChipSelect_GPIO_Port = chip_select_port;
 8003898:	4a15      	ldr	r2, [pc, #84]	@ (80038f0 <MS5607_Init+0x6c>)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	6013      	str	r3, [r2, #0]
  ChipSelect_Pin = chip_select_gpio_pin;
 800389e:	4a15      	ldr	r2, [pc, #84]	@ (80038f4 <MS5607_Init+0x70>)
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	8013      	strh	r3, [r2, #0]

  enableCSB();
 80038a4:	f000 fc0a 	bl	80040bc <enableCSB>
  SPITransmitData = RESET_COMMAND;
 80038a8:	4b13      	ldr	r3, [pc, #76]	@ (80038f8 <MS5607_Init+0x74>)
 80038aa:	221e      	movs	r2, #30
 80038ac:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 80038ae:	4b0f      	ldr	r3, [pc, #60]	@ (80038ec <MS5607_Init+0x68>)
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	230a      	movs	r3, #10
 80038b4:	2201      	movs	r2, #1
 80038b6:	4910      	ldr	r1, [pc, #64]	@ (80038f8 <MS5607_Init+0x74>)
 80038b8:	f006 fa16 	bl	8009ce8 <HAL_SPI_Transmit>
  HAL_Delay(3);
 80038bc:	2003      	movs	r0, #3
 80038be:	f000 fcbb 	bl	8004238 <HAL_Delay>
  disableCSB();
 80038c2:	f000 fc0b 	bl	80040dc <disableCSB>

  MS5607PromRead(&promData);
 80038c6:	480d      	ldr	r0, [pc, #52]	@ (80038fc <MS5607_Init+0x78>)
 80038c8:	f000 f81a 	bl	8003900 <MS5607PromRead>

  if (promData.reserved == 0x00 || promData.reserved == 0xff)
 80038cc:	4b0b      	ldr	r3, [pc, #44]	@ (80038fc <MS5607_Init+0x78>)
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <MS5607_Init+0x58>
 80038d4:	4b09      	ldr	r3, [pc, #36]	@ (80038fc <MS5607_Init+0x78>)
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	2bff      	cmp	r3, #255	@ 0xff
 80038da:	d101      	bne.n	80038e0 <MS5607_Init+0x5c>
    return MS5607_STATE_FAILED;
 80038dc:	2300      	movs	r3, #0
 80038de:	e000      	b.n	80038e2 <MS5607_Init+0x5e>
  else
    return MS5607_STATE_READY;
 80038e0:	2301      	movs	r3, #1
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	200008bc 	.word	0x200008bc
 80038f0:	200008c0 	.word	0x200008c0
 80038f4:	200008c4 	.word	0x200008c4
 80038f8:	200008c6 	.word	0x200008c6
 80038fc:	200008cc 	.word	0x200008cc

08003900 <MS5607PromRead>:

/* Performs a reading on the devices PROM. */
void MS5607PromRead(struct promData *prom)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint8_t address;
  uint16_t *structPointer;

  /* As the PROM is made of 8 16bit addresses I used a pointer for accessing the data structure */
  structPointer = (uint16_t *)prom;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	613b      	str	r3, [r7, #16]

  for (address = 0; address < 8; address++)
 800390c:	2300      	movs	r3, #0
 800390e:	75fb      	strb	r3, [r7, #23]
 8003910:	e020      	b.n	8003954 <MS5607PromRead+0x54>
  {
    SPITransmitData = PROM_READ(address);
 8003912:	7dfb      	ldrb	r3, [r7, #23]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	b25b      	sxtb	r3, r3
 8003918:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 800391c:	b25b      	sxtb	r3, r3
 800391e:	b2da      	uxtb	r2, r3
 8003920:	4b1e      	ldr	r3, [pc, #120]	@ (800399c <MS5607PromRead+0x9c>)
 8003922:	701a      	strb	r2, [r3, #0]
    enableCSB();
 8003924:	f000 fbca 	bl	80040bc <enableCSB>
    HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003928:	4b1d      	ldr	r3, [pc, #116]	@ (80039a0 <MS5607PromRead+0xa0>)
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	230a      	movs	r3, #10
 800392e:	2201      	movs	r2, #1
 8003930:	491a      	ldr	r1, [pc, #104]	@ (800399c <MS5607PromRead+0x9c>)
 8003932:	f006 f9d9 	bl	8009ce8 <HAL_SPI_Transmit>
    /* Receive two bytes at once and stores it directly at the structure */
    HAL_SPI_Receive(hspi, structPointer, 2, 10);
 8003936:	4b1a      	ldr	r3, [pc, #104]	@ (80039a0 <MS5607PromRead+0xa0>)
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	230a      	movs	r3, #10
 800393c:	2202      	movs	r2, #2
 800393e:	6939      	ldr	r1, [r7, #16]
 8003940:	f006 fb48 	bl	8009fd4 <HAL_SPI_Receive>
    disableCSB();
 8003944:	f000 fbca 	bl	80040dc <disableCSB>
    structPointer++;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	3302      	adds	r3, #2
 800394c:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 800394e:	7dfb      	ldrb	r3, [r7, #23]
 8003950:	3301      	adds	r3, #1
 8003952:	75fb      	strb	r3, [r7, #23]
 8003954:	7dfb      	ldrb	r3, [r7, #23]
 8003956:	2b07      	cmp	r3, #7
 8003958:	d9db      	bls.n	8003912 <MS5607PromRead+0x12>
  }

  /* Byte swap on 16bit integers*/
  structPointer = (uint16_t *)prom;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 800395e:	2300      	movs	r3, #0
 8003960:	75fb      	strb	r3, [r7, #23]
 8003962:	e012      	b.n	800398a <MS5607PromRead+0x8a>
  {
    uint8_t *toSwap = (uint8_t *)structPointer;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	60fb      	str	r3, [r7, #12]
    uint8_t secondByte = toSwap[0];
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	72fb      	strb	r3, [r7, #11]
    toSwap[0] = toSwap[1];
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	785a      	ldrb	r2, [r3, #1]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	701a      	strb	r2, [r3, #0]
    toSwap[1] = secondByte;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	3301      	adds	r3, #1
 800397a:	7afa      	ldrb	r2, [r7, #11]
 800397c:	701a      	strb	r2, [r3, #0]
    structPointer++;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	3302      	adds	r3, #2
 8003982:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 8003984:	7dfb      	ldrb	r3, [r7, #23]
 8003986:	3301      	adds	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
 800398a:	7dfb      	ldrb	r3, [r7, #23]
 800398c:	2b07      	cmp	r3, #7
 800398e:	d9e9      	bls.n	8003964 <MS5607PromRead+0x64>
  }
}
 8003990:	bf00      	nop
 8003992:	bf00      	nop
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	200008c6 	.word	0x200008c6
 80039a0:	200008bc 	.word	0x200008bc

080039a4 <MS5607UncompensatedRead>:

/* Performs a reading on the devices PROM. */
void MS5607UncompensatedRead(struct MS5607UncompensatedValues *uncompValues)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]

  /*Sensor reply data buffer*/
  uint8_t reply[3];

  enableCSB();
 80039ac:	f000 fb86 	bl	80040bc <enableCSB>
  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D1_COMMAND | Pressure_OSR;
 80039b0:	4b54      	ldr	r3, [pc, #336]	@ (8003b04 <MS5607UncompensatedRead+0x160>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	4b53      	ldr	r3, [pc, #332]	@ (8003b08 <MS5607UncompensatedRead+0x164>)
 80039bc:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 80039be:	4b53      	ldr	r3, [pc, #332]	@ (8003b0c <MS5607UncompensatedRead+0x168>)
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	230a      	movs	r3, #10
 80039c4:	2201      	movs	r2, #1
 80039c6:	4950      	ldr	r1, [pc, #320]	@ (8003b08 <MS5607UncompensatedRead+0x164>)
 80039c8:	f006 f98e 	bl	8009ce8 <HAL_SPI_Transmit>

  if (Pressure_OSR == 0x00)
 80039cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003b04 <MS5607UncompensatedRead+0x160>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d103      	bne.n	80039dc <MS5607UncompensatedRead+0x38>
    HAL_Delay(1);
 80039d4:	2001      	movs	r0, #1
 80039d6:	f000 fc2f 	bl	8004238 <HAL_Delay>
 80039da:	e01a      	b.n	8003a12 <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x02)
 80039dc:	4b49      	ldr	r3, [pc, #292]	@ (8003b04 <MS5607UncompensatedRead+0x160>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d103      	bne.n	80039ec <MS5607UncompensatedRead+0x48>
    HAL_Delay(2);
 80039e4:	2002      	movs	r0, #2
 80039e6:	f000 fc27 	bl	8004238 <HAL_Delay>
 80039ea:	e012      	b.n	8003a12 <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x04)
 80039ec:	4b45      	ldr	r3, [pc, #276]	@ (8003b04 <MS5607UncompensatedRead+0x160>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d103      	bne.n	80039fc <MS5607UncompensatedRead+0x58>
    HAL_Delay(3);
 80039f4:	2003      	movs	r0, #3
 80039f6:	f000 fc1f 	bl	8004238 <HAL_Delay>
 80039fa:	e00a      	b.n	8003a12 <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x06)
 80039fc:	4b41      	ldr	r3, [pc, #260]	@ (8003b04 <MS5607UncompensatedRead+0x160>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b06      	cmp	r3, #6
 8003a02:	d103      	bne.n	8003a0c <MS5607UncompensatedRead+0x68>
    HAL_Delay(5);
 8003a04:	2005      	movs	r0, #5
 8003a06:	f000 fc17 	bl	8004238 <HAL_Delay>
 8003a0a:	e002      	b.n	8003a12 <MS5607UncompensatedRead+0x6e>
  else
    HAL_Delay(10);
 8003a0c:	200a      	movs	r0, #10
 8003a0e:	f000 fc13 	bl	8004238 <HAL_Delay>

  disableCSB();
 8003a12:	f000 fb63 	bl	80040dc <disableCSB>

  /* Performs the reading of the 24 bits from the ADC */

  enableCSB();
 8003a16:	f000 fb51 	bl	80040bc <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 8003a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b08 <MS5607UncompensatedRead+0x164>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003a20:	4b3a      	ldr	r3, [pc, #232]	@ (8003b0c <MS5607UncompensatedRead+0x168>)
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	230a      	movs	r3, #10
 8003a26:	2201      	movs	r2, #1
 8003a28:	4937      	ldr	r1, [pc, #220]	@ (8003b08 <MS5607UncompensatedRead+0x164>)
 8003a2a:	f006 f95d 	bl	8009ce8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, reply, 3, 10);
 8003a2e:	4b37      	ldr	r3, [pc, #220]	@ (8003b0c <MS5607UncompensatedRead+0x168>)
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	f107 010c 	add.w	r1, r7, #12
 8003a36:	230a      	movs	r3, #10
 8003a38:	2203      	movs	r2, #3
 8003a3a:	f006 facb 	bl	8009fd4 <HAL_SPI_Receive>

  disableCSB();
 8003a3e:	f000 fb4d 	bl	80040dc <disableCSB>

  /* Tranfer the 24bits read into a 32bit int */
  uncompValues->pressure = ((uint32_t)reply[0] << 16) | ((uint32_t)reply[1] << 8) | (uint32_t)reply[2];
 8003a42:	7b3b      	ldrb	r3, [r7, #12]
 8003a44:	041a      	lsls	r2, r3, #16
 8003a46:	7b7b      	ldrb	r3, [r7, #13]
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	7bba      	ldrb	r2, [r7, #14]
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	601a      	str	r2, [r3, #0]

  enableCSB();
 8003a54:	f000 fb32 	bl	80040bc <enableCSB>

  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D2_COMMAND | Temperature_OSR;
 8003a58:	4b2d      	ldr	r3, [pc, #180]	@ (8003b10 <MS5607UncompensatedRead+0x16c>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	4b29      	ldr	r3, [pc, #164]	@ (8003b08 <MS5607UncompensatedRead+0x164>)
 8003a64:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003a66:	4b29      	ldr	r3, [pc, #164]	@ (8003b0c <MS5607UncompensatedRead+0x168>)
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	230a      	movs	r3, #10
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	4926      	ldr	r1, [pc, #152]	@ (8003b08 <MS5607UncompensatedRead+0x164>)
 8003a70:	f006 f93a 	bl	8009ce8 <HAL_SPI_Transmit>

  if (Temperature_OSR == 0x00)
 8003a74:	4b26      	ldr	r3, [pc, #152]	@ (8003b10 <MS5607UncompensatedRead+0x16c>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d103      	bne.n	8003a84 <MS5607UncompensatedRead+0xe0>
    HAL_Delay(1);
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	f000 fbdb 	bl	8004238 <HAL_Delay>
 8003a82:	e01a      	b.n	8003aba <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x02)
 8003a84:	4b22      	ldr	r3, [pc, #136]	@ (8003b10 <MS5607UncompensatedRead+0x16c>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d103      	bne.n	8003a94 <MS5607UncompensatedRead+0xf0>
    HAL_Delay(2);
 8003a8c:	2002      	movs	r0, #2
 8003a8e:	f000 fbd3 	bl	8004238 <HAL_Delay>
 8003a92:	e012      	b.n	8003aba <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x04)
 8003a94:	4b1e      	ldr	r3, [pc, #120]	@ (8003b10 <MS5607UncompensatedRead+0x16c>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d103      	bne.n	8003aa4 <MS5607UncompensatedRead+0x100>
    HAL_Delay(3);
 8003a9c:	2003      	movs	r0, #3
 8003a9e:	f000 fbcb 	bl	8004238 <HAL_Delay>
 8003aa2:	e00a      	b.n	8003aba <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x06)
 8003aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b10 <MS5607UncompensatedRead+0x16c>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b06      	cmp	r3, #6
 8003aaa:	d103      	bne.n	8003ab4 <MS5607UncompensatedRead+0x110>
    HAL_Delay(5);
 8003aac:	2005      	movs	r0, #5
 8003aae:	f000 fbc3 	bl	8004238 <HAL_Delay>
 8003ab2:	e002      	b.n	8003aba <MS5607UncompensatedRead+0x116>
  else
    HAL_Delay(10);
 8003ab4:	200a      	movs	r0, #10
 8003ab6:	f000 fbbf 	bl	8004238 <HAL_Delay>

  disableCSB();
 8003aba:	f000 fb0f 	bl	80040dc <disableCSB>

  enableCSB();
 8003abe:	f000 fafd 	bl	80040bc <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 8003ac2:	4b11      	ldr	r3, [pc, #68]	@ (8003b08 <MS5607UncompensatedRead+0x164>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003ac8:	4b10      	ldr	r3, [pc, #64]	@ (8003b0c <MS5607UncompensatedRead+0x168>)
 8003aca:	6818      	ldr	r0, [r3, #0]
 8003acc:	230a      	movs	r3, #10
 8003ace:	2201      	movs	r2, #1
 8003ad0:	490d      	ldr	r1, [pc, #52]	@ (8003b08 <MS5607UncompensatedRead+0x164>)
 8003ad2:	f006 f909 	bl	8009ce8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, reply, 3, 10);
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8003b0c <MS5607UncompensatedRead+0x168>)
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	f107 010c 	add.w	r1, r7, #12
 8003ade:	230a      	movs	r3, #10
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	f006 fa77 	bl	8009fd4 <HAL_SPI_Receive>

  disableCSB();
 8003ae6:	f000 faf9 	bl	80040dc <disableCSB>

  /* Assemble the conversion command based on previously set OSR */
  uncompValues->temperature = ((uint32_t)reply[0] << 16) | ((uint32_t)reply[1] << 8) | (uint32_t)reply[2];
 8003aea:	7b3b      	ldrb	r3, [r7, #12]
 8003aec:	041a      	lsls	r2, r3, #16
 8003aee:	7b7b      	ldrb	r3, [r7, #13]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	4313      	orrs	r3, r2
 8003af4:	7bba      	ldrb	r2, [r7, #14]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	605a      	str	r2, [r3, #4]
}
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	200008c7 	.word	0x200008c7
 8003b08:	200008c6 	.word	0x200008c6
 8003b0c:	200008bc 	.word	0x200008bc
 8003b10:	200008c8 	.word	0x200008c8

08003b14 <MS5607Convert>:

/* Performs the data conversion according to the MS5607 datasheet */
void MS5607Convert(struct MS5607UncompensatedValues *sample, struct MS5607IntReadings *value)
{
 8003b14:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003b18:	b0d7      	sub	sp, #348	@ 0x15c
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8003b20:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
  int32_t dT;
  int32_t TEMP;
  int64_t OFF;
  int64_t SENS;

  dT = sample->temperature - ((int32_t)(promData.tref << 8));
 8003b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	4bda      	ldr	r3, [pc, #872]	@ (8003e94 <MS5607Convert+0x380>)
 8003b2c:	895b      	ldrh	r3, [r3, #10]
 8003b2e:	021b      	lsls	r3, r3, #8
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

  TEMP = 2000 + (((int64_t)dT * promData.tempsens) >> 23);
 8003b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003b3a:	17da      	asrs	r2, r3, #31
 8003b3c:	469a      	mov	sl, r3
 8003b3e:	4693      	mov	fp, r2
 8003b40:	4bd4      	ldr	r3, [pc, #848]	@ (8003e94 <MS5607Convert+0x380>)
 8003b42:	899b      	ldrh	r3, [r3, #12]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2200      	movs	r2, #0
 8003b48:	4698      	mov	r8, r3
 8003b4a:	4691      	mov	r9, r2
 8003b4c:	fb08 f20b 	mul.w	r2, r8, fp
 8003b50:	fb0a f309 	mul.w	r3, sl, r9
 8003b54:	4413      	add	r3, r2
 8003b56:	fbaa 4508 	umull	r4, r5, sl, r8
 8003b5a:	442b      	add	r3, r5
 8003b5c:	461d      	mov	r5, r3
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	0de2      	lsrs	r2, r4, #23
 8003b68:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 8003b6c:	15eb      	asrs	r3, r5, #23
 8003b6e:	4613      	mov	r3, r2
 8003b70:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003b74:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

  OFF = ((int64_t)promData.off << 17) + (((int64_t)promData.tco * dT) >> 6);
 8003b78:	4bc6      	ldr	r3, [pc, #792]	@ (8003e94 <MS5607Convert+0x380>)
 8003b7a:	889b      	ldrh	r3, [r3, #4]
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b84:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b88:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	0bdb      	lsrs	r3, r3, #15
 8003b90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003b94:	460b      	mov	r3, r1
 8003b96:	045b      	lsls	r3, r3, #17
 8003b98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b9c:	4bbd      	ldr	r3, [pc, #756]	@ (8003e94 <MS5607Convert+0x380>)
 8003b9e:	891b      	ldrh	r3, [r3, #8]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ba8:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8003bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003bb0:	17da      	asrs	r2, r3, #31
 8003bb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bb6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003bba:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8003bbe:	462b      	mov	r3, r5
 8003bc0:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	fb02 f203 	mul.w	r2, r2, r3
 8003bca:	464b      	mov	r3, r9
 8003bcc:	4621      	mov	r1, r4
 8003bce:	fb01 f303 	mul.w	r3, r1, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	4622      	mov	r2, r4
 8003bd6:	4641      	mov	r1, r8
 8003bd8:	fba2 1201 	umull	r1, r2, r2, r1
 8003bdc:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8003be0:	460a      	mov	r2, r1
 8003be2:	f8c7 2108 	str.w	r2, [r7, #264]	@ 0x108
 8003be6:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8003bea:	4413      	add	r3, r2
 8003bec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	098a      	lsrs	r2, r1, #6
 8003c00:	4629      	mov	r1, r5
 8003c02:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8003c06:	4629      	mov	r1, r5
 8003c08:	118b      	asrs	r3, r1, #6
 8003c0a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8003c0e:	4621      	mov	r1, r4
 8003c10:	1889      	adds	r1, r1, r2
 8003c12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c14:	4629      	mov	r1, r5
 8003c16:	eb43 0101 	adc.w	r1, r3, r1
 8003c1a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8003c1c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8003c20:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
  SENS = ((int64_t)promData.sens << 16) + (((int64_t)promData.tcs * dT) >> 7);
 8003c24:	4b9b      	ldr	r3, [pc, #620]	@ (8003e94 <MS5607Convert+0x380>)
 8003c26:	885b      	ldrh	r3, [r3, #2]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c34:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003c38:	460b      	mov	r3, r1
 8003c3a:	0c1b      	lsrs	r3, r3, #16
 8003c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c40:	460b      	mov	r3, r1
 8003c42:	041b      	lsls	r3, r3, #16
 8003c44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c48:	4b92      	ldr	r3, [pc, #584]	@ (8003e94 <MS5607Convert+0x380>)
 8003c4a:	88db      	ldrh	r3, [r3, #6]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003c5c:	17da      	asrs	r2, r3, #31
 8003c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c66:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8003c6a:	462b      	mov	r3, r5
 8003c6c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c70:	4642      	mov	r2, r8
 8003c72:	fb02 f203 	mul.w	r2, r2, r3
 8003c76:	464b      	mov	r3, r9
 8003c78:	4621      	mov	r1, r4
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	4622      	mov	r2, r4
 8003c82:	4641      	mov	r1, r8
 8003c84:	fba2 1201 	umull	r1, r2, r2, r1
 8003c88:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8003c8c:	460a      	mov	r2, r1
 8003c8e:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8003c92:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8003c96:	4413      	add	r3, r2
 8003c98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8003ca8:	4621      	mov	r1, r4
 8003caa:	09ca      	lsrs	r2, r1, #7
 8003cac:	4629      	mov	r1, r5
 8003cae:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8003cb2:	4629      	mov	r1, r5
 8003cb4:	11cb      	asrs	r3, r1, #7
 8003cb6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8003cba:	4621      	mov	r1, r4
 8003cbc:	1889      	adds	r1, r1, r2
 8003cbe:	6339      	str	r1, [r7, #48]	@ 0x30
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	eb43 0101 	adc.w	r1, r3, r1
 8003cc6:	6379      	str	r1, [r7, #52]	@ 0x34
 8003cc8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003ccc:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140

  /**/
  if (TEMP < 2000)
 8003cd0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003cd4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003cd8:	f280 8152 	bge.w	8003f80 <MS5607Convert+0x46c>
  {
    int32_t T2 = ((int64_t)dT * (int64_t)dT) >> 31;
 8003cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003ce0:	17da      	asrs	r2, r3, #31
 8003ce2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ce6:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003cee:	17da      	asrs	r2, r3, #31
 8003cf0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cf4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cf8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8003cfc:	462b      	mov	r3, r5
 8003cfe:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8003d02:	4642      	mov	r2, r8
 8003d04:	fb02 f203 	mul.w	r2, r2, r3
 8003d08:	464b      	mov	r3, r9
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	fb01 f303 	mul.w	r3, r1, r3
 8003d10:	4413      	add	r3, r2
 8003d12:	4622      	mov	r2, r4
 8003d14:	4641      	mov	r1, r8
 8003d16:	fba2 1201 	umull	r1, r2, r2, r1
 8003d1a:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8003d1e:	460a      	mov	r2, r1
 8003d20:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8003d24:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8003d28:	4413      	add	r3, r2
 8003d2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	f04f 0300 	mov.w	r3, #0
 8003d36:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	0fca      	lsrs	r2, r1, #31
 8003d3e:	4629      	mov	r1, r5
 8003d40:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003d44:	4629      	mov	r1, r5
 8003d46:	17cb      	asrs	r3, r1, #31
 8003d48:	4613      	mov	r3, r2
 8003d4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    int32_t TEMPM = TEMP - 2000;
 8003d4e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003d52:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8003d56:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    int64_t OFF2 = (61 * (int64_t)TEMPM * (int64_t)TEMPM) >> 4;
 8003d5a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003d5e:	17da      	asrs	r2, r3, #31
 8003d60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d68:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003d6c:	17da      	asrs	r2, r3, #31
 8003d6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d72:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003d76:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8003d7a:	462b      	mov	r3, r5
 8003d7c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8003d80:	4642      	mov	r2, r8
 8003d82:	fb02 f203 	mul.w	r2, r2, r3
 8003d86:	464b      	mov	r3, r9
 8003d88:	4621      	mov	r1, r4
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	4413      	add	r3, r2
 8003d90:	4622      	mov	r2, r4
 8003d92:	4641      	mov	r1, r8
 8003d94:	fba2 1201 	umull	r1, r2, r2, r1
 8003d98:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003d9c:	460a      	mov	r2, r1
 8003d9e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8003da2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8003da6:	4413      	add	r3, r2
 8003da8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003dac:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8003db0:	4622      	mov	r2, r4
 8003db2:	462b      	mov	r3, r5
 8003db4:	f04f 0000 	mov.w	r0, #0
 8003db8:	f04f 0100 	mov.w	r1, #0
 8003dbc:	0119      	lsls	r1, r3, #4
 8003dbe:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8003dc2:	0110      	lsls	r0, r2, #4
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4621      	mov	r1, r4
 8003dca:	1a51      	subs	r1, r2, r1
 8003dcc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003dce:	4629      	mov	r1, r5
 8003dd0:	eb63 0301 	sbc.w	r3, r3, r1
 8003dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003de2:	4649      	mov	r1, r9
 8003de4:	008b      	lsls	r3, r1, #2
 8003de6:	4641      	mov	r1, r8
 8003de8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dec:	4641      	mov	r1, r8
 8003dee:	008a      	lsls	r2, r1, #2
 8003df0:	4610      	mov	r0, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	4603      	mov	r3, r0
 8003df6:	4622      	mov	r2, r4
 8003df8:	189b      	adds	r3, r3, r2
 8003dfa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dfc:	462b      	mov	r3, r5
 8003dfe:	460a      	mov	r2, r1
 8003e00:	eb42 0303 	adc.w	r3, r2, r3
 8003e04:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003e12:	4621      	mov	r1, r4
 8003e14:	090a      	lsrs	r2, r1, #4
 8003e16:	4629      	mov	r1, r5
 8003e18:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8003e1c:	4629      	mov	r1, r5
 8003e1e:	110b      	asrs	r3, r1, #4
 8003e20:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    int64_t SENS2 = 2 * (int64_t)TEMPM * (int64_t)TEMPM;
 8003e24:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003e28:	17da      	asrs	r2, r3, #31
 8003e2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e2c:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e2e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003e32:	17da      	asrs	r2, r3, #31
 8003e34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e38:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8003e3c:	462b      	mov	r3, r5
 8003e3e:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8003e42:	4642      	mov	r2, r8
 8003e44:	fb02 f203 	mul.w	r2, r2, r3
 8003e48:	464b      	mov	r3, r9
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	4413      	add	r3, r2
 8003e52:	4622      	mov	r2, r4
 8003e54:	4641      	mov	r1, r8
 8003e56:	fba2 1201 	umull	r1, r2, r2, r1
 8003e5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e5e:	460a      	mov	r2, r1
 8003e60:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8003e64:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003e68:	4413      	add	r3, r2
 8003e6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003e6e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003e72:	460b      	mov	r3, r1
 8003e74:	18db      	adds	r3, r3, r3
 8003e76:	623b      	str	r3, [r7, #32]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	eb42 0303 	adc.w	r3, r2, r3
 8003e7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e80:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003e84:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    if (TEMP < -1500)
 8003e88:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8003e8c:	4b02      	ldr	r3, [pc, #8]	@ (8003e98 <MS5607Convert+0x384>)
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	da55      	bge.n	8003f3e <MS5607Convert+0x42a>
 8003e92:	e003      	b.n	8003e9c <MS5607Convert+0x388>
 8003e94:	200008cc 	.word	0x200008cc
 8003e98:	fffffa24 	.word	0xfffffa24
    {
      int32_t TEMPP = TEMP + 1500;
 8003e9c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003ea0:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8003ea4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      int32_t TEMPP2 = TEMPP * TEMPP;
 8003ea8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003eac:	fb03 f303 	mul.w	r3, r3, r3
 8003eb0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
      OFF2 = OFF2 + (int64_t)15 * TEMPP2;
 8003eb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003eb8:	17da      	asrs	r2, r3, #31
 8003eba:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ebc:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ebe:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003ec2:	4622      	mov	r2, r4
 8003ec4:	462b      	mov	r3, r5
 8003ec6:	f04f 0000 	mov.w	r0, #0
 8003eca:	f04f 0100 	mov.w	r1, #0
 8003ece:	0119      	lsls	r1, r3, #4
 8003ed0:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8003ed4:	0110      	lsls	r0, r2, #4
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4621      	mov	r1, r4
 8003edc:	1a51      	subs	r1, r2, r1
 8003ede:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ee6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ee8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8003eec:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	1851      	adds	r1, r2, r1
 8003ef4:	61b9      	str	r1, [r7, #24]
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	eb43 0101 	adc.w	r1, r3, r1
 8003efc:	61f9      	str	r1, [r7, #28]
 8003efe:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003f02:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
      SENS2 = SENS2 + (int64_t)8 * TEMPP2;
 8003f06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f0a:	17da      	asrs	r2, r3, #31
 8003f0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f0e:	657a      	str	r2, [r7, #84]	@ 0x54
 8003f10:	f04f 0000 	mov.w	r0, #0
 8003f14:	f04f 0100 	mov.w	r1, #0
 8003f18:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8003f1c:	462b      	mov	r3, r5
 8003f1e:	00d9      	lsls	r1, r3, #3
 8003f20:	4623      	mov	r3, r4
 8003f22:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8003f26:	4623      	mov	r3, r4
 8003f28:	00d8      	lsls	r0, r3, #3
 8003f2a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8003f2e:	1814      	adds	r4, r2, r0
 8003f30:	613c      	str	r4, [r7, #16]
 8003f32:	414b      	adcs	r3, r1
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003f3a:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    }
    TEMP -= T2;
 8003f3e:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8003f42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    OFF -= OFF2;
 8003f4c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8003f50:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8003f54:	1a84      	subs	r4, r0, r2
 8003f56:	60bc      	str	r4, [r7, #8]
 8003f58:	eb61 0303 	sbc.w	r3, r1, r3
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003f62:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
    SENS -= SENS2;
 8003f66:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8003f6a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8003f6e:	1a84      	subs	r4, r0, r2
 8003f70:	603c      	str	r4, [r7, #0]
 8003f72:	eb61 0303 	sbc.w	r3, r1, r3
 8003f76:	607b      	str	r3, [r7, #4]
 8003f78:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003f7c:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
  }

  value->pressure = ((((int64_t)sample->pressure * SENS) >> 21) - OFF) >> 15;
 8003f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2200      	movs	r2, #0
 8003f88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f8a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003f8c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003f90:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003f94:	462a      	mov	r2, r5
 8003f96:	fb02 f203 	mul.w	r2, r2, r3
 8003f9a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	fb01 f303 	mul.w	r3, r1, r3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8003faa:	4621      	mov	r1, r4
 8003fac:	fba2 1201 	umull	r1, r2, r2, r1
 8003fb0:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8003fb4:	460a      	mov	r2, r1
 8003fb6:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8003fba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	0d4a      	lsrs	r2, r1, #21
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8003fda:	4629      	mov	r1, r5
 8003fdc:	154b      	asrs	r3, r1, #21
 8003fde:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8003fe2:	1a14      	subs	r4, r2, r0
 8003fe4:	643c      	str	r4, [r7, #64]	@ 0x40
 8003fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fea:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	0bca      	lsrs	r2, r1, #15
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8004002:	4629      	mov	r1, r5
 8004004:	13cb      	asrs	r3, r1, #15
 8004006:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800400a:	601a      	str	r2, [r3, #0]
  value->temperature = TEMP;
 800400c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004010:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8004014:	605a      	str	r2, [r3, #4]
}
 8004016:	bf00      	nop
 8004018:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 800401c:	46bd      	mov	sp, r7
 800401e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004022:	4770      	bx	lr

08004024 <MS5607Update>:

/* Performs the sensor reading updating the data structures */
void MS5607Update(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  MS5607UncompensatedRead(&uncompValues);
 8004028:	4804      	ldr	r0, [pc, #16]	@ (800403c <MS5607Update+0x18>)
 800402a:	f7ff fcbb 	bl	80039a4 <MS5607UncompensatedRead>
  MS5607Convert(&uncompValues, &readings);
 800402e:	4904      	ldr	r1, [pc, #16]	@ (8004040 <MS5607Update+0x1c>)
 8004030:	4802      	ldr	r0, [pc, #8]	@ (800403c <MS5607Update+0x18>)
 8004032:	f7ff fd6f 	bl	8003b14 <MS5607Convert>
}
 8004036:	bf00      	nop
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	200008dc 	.word	0x200008dc
 8004040:	200008e4 	.word	0x200008e4

08004044 <MS5607ReadValues>:

MS5607Readings MS5607ReadValues(void)
{
 8004044:	b5b0      	push	{r4, r5, r7, lr}
 8004046:	b08c      	sub	sp, #48	@ 0x30
 8004048:	af00      	add	r7, sp, #0
  MS5607Update();
 800404a:	f7ff ffeb 	bl	8004024 <MS5607Update>
  return (MS5607Readings){.pressure_kPa = readings.pressure / 1000.0, .temperature_C = readings.temperature / 100.0};
 800404e:	4b18      	ldr	r3, [pc, #96]	@ (80040b0 <MS5607ReadValues+0x6c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f7fc fa8e 	bl	8000574 <__aeabi_i2d>
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	4b15      	ldr	r3, [pc, #84]	@ (80040b4 <MS5607ReadValues+0x70>)
 800405e:	f7fc fc1d 	bl	800089c <__aeabi_ddiv>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4614      	mov	r4, r2
 8004068:	461d      	mov	r5, r3
 800406a:	4b11      	ldr	r3, [pc, #68]	@ (80040b0 <MS5607ReadValues+0x6c>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	4618      	mov	r0, r3
 8004070:	f7fc fa80 	bl	8000574 <__aeabi_i2d>
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	4b0f      	ldr	r3, [pc, #60]	@ (80040b8 <MS5607ReadValues+0x74>)
 800407a:	f7fc fc0f 	bl	800089c <__aeabi_ddiv>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	e9c7 4508 	strd	r4, r5, [r7, #32]
 8004086:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800408a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800408e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004092:	ec41 0b16 	vmov	d6, r0, r1
 8004096:	ec43 2b17 	vmov	d7, r2, r3
}
 800409a:	eeb0 0a46 	vmov.f32	s0, s12
 800409e:	eef0 0a66 	vmov.f32	s1, s13
 80040a2:	eeb0 1a47 	vmov.f32	s2, s14
 80040a6:	eef0 1a67 	vmov.f32	s3, s15
 80040aa:	3730      	adds	r7, #48	@ 0x30
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bdb0      	pop	{r4, r5, r7, pc}
 80040b0:	200008e4 	.word	0x200008e4
 80040b4:	408f4000 	.word	0x408f4000
 80040b8:	40590000 	.word	0x40590000

080040bc <enableCSB>:
  return readings.pressure / 1000.0;
}

/* Sets the CS pin */
void enableCSB(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_RESET);
 80040c0:	4b04      	ldr	r3, [pc, #16]	@ (80040d4 <enableCSB+0x18>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a04      	ldr	r2, [pc, #16]	@ (80040d8 <enableCSB+0x1c>)
 80040c6:	8811      	ldrh	r1, [r2, #0]
 80040c8:	2200      	movs	r2, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 ff8a 	bl	8005fe4 <HAL_GPIO_WritePin>
}
 80040d0:	bf00      	nop
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	200008c0 	.word	0x200008c0
 80040d8:	200008c4 	.word	0x200008c4

080040dc <disableCSB>:

/* Sets the CS pin */
void disableCSB(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_SET);
 80040e0:	4b04      	ldr	r3, [pc, #16]	@ (80040f4 <disableCSB+0x18>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a04      	ldr	r2, [pc, #16]	@ (80040f8 <disableCSB+0x1c>)
 80040e6:	8811      	ldrh	r1, [r2, #0]
 80040e8:	2201      	movs	r2, #1
 80040ea:	4618      	mov	r0, r3
 80040ec:	f001 ff7a 	bl	8005fe4 <HAL_GPIO_WritePin>
}
 80040f0:	bf00      	nop
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	200008c0 	.word	0x200008c0
 80040f8:	200008c4 	.word	0x200008c4
 80040fc:	00000000 	.word	0x00000000

08004100 <calculateAltitude>:

// https://www.weather.gov/media/epz/wxcalc/pressureAltitude.pdf
// The altitude equation is for absolute altitude.
// calibraing : 1 = True, 0 = False
float calculateAltitude(double pressure, int calibrating)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	ed87 0b02 	vstr	d0, [r7, #8]
 800410a:	6078      	str	r0, [r7, #4]
  float h_meter = 0.3048 * ((1 - pow((pressure / 1013.25), 0.190284)) * 145366.54);
 800410c:	a32d      	add	r3, pc, #180	@ (adr r3, 80041c4 <calculateAltitude+0xc4>)
 800410e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004112:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004116:	f7fc fbc1 	bl	800089c <__aeabi_ddiv>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	ec43 2b17 	vmov	d7, r2, r3
 8004122:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 80041a0 <calculateAltitude+0xa0>
 8004126:	eeb0 0a47 	vmov.f32	s0, s14
 800412a:	eef0 0a67 	vmov.f32	s1, s15
 800412e:	f010 fb7d 	bl	801482c <pow>
 8004132:	ec53 2b10 	vmov	r2, r3, d0
 8004136:	f04f 0000 	mov.w	r0, #0
 800413a:	491f      	ldr	r1, [pc, #124]	@ (80041b8 <calculateAltitude+0xb8>)
 800413c:	f7fc f8cc 	bl	80002d8 <__aeabi_dsub>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4610      	mov	r0, r2
 8004146:	4619      	mov	r1, r3
 8004148:	a317      	add	r3, pc, #92	@ (adr r3, 80041a8 <calculateAltitude+0xa8>)
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	f7fc fa7b 	bl	8000648 <__aeabi_dmul>
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4610      	mov	r0, r2
 8004158:	4619      	mov	r1, r3
 800415a:	a315      	add	r3, pc, #84	@ (adr r3, 80041b0 <calculateAltitude+0xb0>)
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	f7fc fa72 	bl	8000648 <__aeabi_dmul>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4610      	mov	r0, r2
 800416a:	4619      	mov	r1, r3
 800416c:	f7fc fd44 	bl	8000bf8 <__aeabi_d2f>
 8004170:	4603      	mov	r3, r0
 8004172:	617b      	str	r3, [r7, #20]
  if (calibrating == 1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d105      	bne.n	8004186 <calculateAltitude+0x86>
  {
    // Absolute Altitude of the ground station
    calibrated_altitude = h_meter;
 800417a:	4a10      	ldr	r2, [pc, #64]	@ (80041bc <calculateAltitude+0xbc>)
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	6013      	str	r3, [r2, #0]
    // Relative Altitude of GCS
    return 0;
 8004180:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80041c0 <calculateAltitude+0xc0>
 8004184:	e006      	b.n	8004194 <calculateAltitude+0x94>
  }
  else
  {
    // Relative Altitude of CanSat
    return h_meter - calibrated_altitude;
 8004186:	4b0d      	ldr	r3, [pc, #52]	@ (80041bc <calculateAltitude+0xbc>)
 8004188:	edd3 7a00 	vldr	s15, [r3]
 800418c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004190:	ee77 7a67 	vsub.f32	s15, s14, s15
  }
}
 8004194:	eeb0 0a67 	vmov.f32	s0, s15
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	e279dd3c 	.word	0xe279dd3c
 80041a4:	3fc85b39 	.word	0x3fc85b39
 80041a8:	51eb851f 	.word	0x51eb851f
 80041ac:	4101beb4 	.word	0x4101beb4
 80041b0:	dbf487fd 	.word	0xdbf487fd
 80041b4:	3fd381d7 	.word	0x3fd381d7
 80041b8:	3ff00000 	.word	0x3ff00000
 80041bc:	200008ec 	.word	0x200008ec
	...
 80041c8:	408faa00 	.word	0x408faa00

080041cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041d6:	2003      	movs	r0, #3
 80041d8:	f001 fa11 	bl	80055fe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041dc:	200f      	movs	r0, #15
 80041de:	f7fe fcad 	bl	8002b3c <HAL_InitTick>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	71fb      	strb	r3, [r7, #7]
 80041ec:	e001      	b.n	80041f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80041ee:	f7fe f847 	bl	8002280 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80041f2:	79fb      	ldrb	r3, [r7, #7]

}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004200:	4b05      	ldr	r3, [pc, #20]	@ (8004218 <HAL_IncTick+0x1c>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	4b05      	ldr	r3, [pc, #20]	@ (800421c <HAL_IncTick+0x20>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4413      	add	r3, r2
 800420a:	4a03      	ldr	r2, [pc, #12]	@ (8004218 <HAL_IncTick+0x1c>)
 800420c:	6013      	str	r3, [r2, #0]
}
 800420e:	bf00      	nop
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	200008f0 	.word	0x200008f0
 800421c:	20000008 	.word	0x20000008

08004220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  return uwTick;
 8004224:	4b03      	ldr	r3, [pc, #12]	@ (8004234 <HAL_GetTick+0x14>)
 8004226:	681b      	ldr	r3, [r3, #0]
}
 8004228:	4618      	mov	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	200008f0 	.word	0x200008f0

08004238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004240:	f7ff ffee 	bl	8004220 <HAL_GetTick>
 8004244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004250:	d004      	beq.n	800425c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004252:	4b09      	ldr	r3, [pc, #36]	@ (8004278 <HAL_Delay+0x40>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4413      	add	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800425c:	bf00      	nop
 800425e:	f7ff ffdf 	bl	8004220 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	429a      	cmp	r2, r3
 800426c:	d8f7      	bhi.n	800425e <HAL_Delay+0x26>
  {
  }
}
 800426e:	bf00      	nop
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20000008 	.word	0x20000008

0800427c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8004284:	4b06      	ldr	r3, [pc, #24]	@ (80042a0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f023 0202 	bic.w	r2, r3, #2
 800428c:	4904      	ldr	r1, [pc, #16]	@ (80042a0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4313      	orrs	r3, r2
 8004292:	600b      	str	r3, [r1, #0]
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	40010030 	.word	0x40010030

080042a4 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80042a8:	4b05      	ldr	r3, [pc, #20]	@ (80042c0 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a04      	ldr	r2, [pc, #16]	@ (80042c0 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80042ae:	f023 0301 	bic.w	r3, r3, #1
 80042b2:	6013      	str	r3, [r2, #0]
}
 80042b4:	bf00      	nop
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40010030 	.word	0x40010030

080042c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	609a      	str	r2, [r3, #8]
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	609a      	str	r2, [r3, #8]
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3360      	adds	r3, #96	@ 0x60
 800433e:	461a      	mov	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4b08      	ldr	r3, [pc, #32]	@ (8004370 <LL_ADC_SetOffset+0x44>)
 800434e:	4013      	ands	r3, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	4313      	orrs	r3, r2
 800435c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004364:	bf00      	nop
 8004366:	371c      	adds	r7, #28
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	03fff000 	.word	0x03fff000

08004374 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3360      	adds	r3, #96	@ 0x60
 8004382:	461a      	mov	r2, r3
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004394:	4618      	mov	r0, r3
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3360      	adds	r3, #96	@ 0x60
 80043b0:	461a      	mov	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	431a      	orrs	r2, r3
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80043ca:	bf00      	nop
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b087      	sub	sp, #28
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3360      	adds	r3, #96	@ 0x60
 80043e6:	461a      	mov	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004400:	bf00      	nop
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3360      	adds	r3, #96	@ 0x60
 800441c:	461a      	mov	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	431a      	orrs	r2, r3
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004436:	bf00      	nop
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	615a      	str	r2, [r3, #20]
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3330      	adds	r3, #48	@ 0x30
 8004478:	461a      	mov	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	0a1b      	lsrs	r3, r3, #8
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	f003 030c 	and.w	r3, r3, #12
 8004484:	4413      	add	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	211f      	movs	r1, #31
 8004494:	fa01 f303 	lsl.w	r3, r1, r3
 8004498:	43db      	mvns	r3, r3
 800449a:	401a      	ands	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	0e9b      	lsrs	r3, r3, #26
 80044a0:	f003 011f 	and.w	r1, r3, #31
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f003 031f 	and.w	r3, r3, #31
 80044aa:	fa01 f303 	lsl.w	r3, r1, r3
 80044ae:	431a      	orrs	r2, r3
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80044b4:	bf00      	nop
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	3314      	adds	r3, #20
 80044d0:	461a      	mov	r2, r3
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	0e5b      	lsrs	r3, r3, #25
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	4413      	add	r3, r2
 80044de:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	0d1b      	lsrs	r3, r3, #20
 80044e8:	f003 031f 	and.w	r3, r3, #31
 80044ec:	2107      	movs	r1, #7
 80044ee:	fa01 f303 	lsl.w	r3, r1, r3
 80044f2:	43db      	mvns	r3, r3
 80044f4:	401a      	ands	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	0d1b      	lsrs	r3, r3, #20
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	fa01 f303 	lsl.w	r3, r1, r3
 8004504:	431a      	orrs	r2, r3
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004530:	43db      	mvns	r3, r3
 8004532:	401a      	ands	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f003 0318 	and.w	r3, r3, #24
 800453a:	4908      	ldr	r1, [pc, #32]	@ (800455c <LL_ADC_SetChannelSingleDiff+0x44>)
 800453c:	40d9      	lsrs	r1, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	400b      	ands	r3, r1
 8004542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004546:	431a      	orrs	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	0007ffff 	.word	0x0007ffff

08004560 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004570:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6093      	str	r3, [r2, #8]
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004594:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004598:	d101      	bne.n	800459e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80045bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80045c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045e8:	d101      	bne.n	80045ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <LL_ADC_IsEnabled+0x18>
 8004610:	2301      	movs	r3, #1
 8004612:	e000      	b.n	8004616 <LL_ADC_IsEnabled+0x1a>
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	2b04      	cmp	r3, #4
 8004634:	d101      	bne.n	800463a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b08      	cmp	r3, #8
 800465a:	d101      	bne.n	8004660 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
	...

08004670 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004670:	b590      	push	{r4, r7, lr}
 8004672:	b089      	sub	sp, #36	@ 0x24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e19b      	b.n	80049c2 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d109      	bne.n	80046ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7fd fe29 	bl	80022f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff ff67 	bl	8004584 <LL_ADC_IsDeepPowerDownEnabled>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d004      	beq.n	80046c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff ff4d 	bl	8004560 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff ff82 	bl	80045d4 <LL_ADC_IsInternalRegulatorEnabled>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d115      	bne.n	8004702 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff ff66 	bl	80045ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046e0:	4b97      	ldr	r3, [pc, #604]	@ (8004940 <HAL_ADC_Init+0x2d0>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	099b      	lsrs	r3, r3, #6
 80046e6:	4a97      	ldr	r2, [pc, #604]	@ (8004944 <HAL_ADC_Init+0x2d4>)
 80046e8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ec:	099b      	lsrs	r3, r3, #6
 80046ee:	3301      	adds	r3, #1
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80046f4:	e002      	b.n	80046fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f9      	bne.n	80046f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff ff64 	bl	80045d4 <LL_ADC_IsInternalRegulatorEnabled>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10d      	bne.n	800472e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004716:	f043 0210 	orr.w	r2, r3, #16
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004722:	f043 0201 	orr.w	r2, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff ff75 	bl	8004622 <LL_ADC_REG_IsConversionOngoing>
 8004738:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473e:	f003 0310 	and.w	r3, r3, #16
 8004742:	2b00      	cmp	r3, #0
 8004744:	f040 8134 	bne.w	80049b0 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2b00      	cmp	r3, #0
 800474c:	f040 8130 	bne.w	80049b0 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004754:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004758:	f043 0202 	orr.w	r2, r3, #2
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff ff49 	bl	80045fc <LL_ADC_IsEnabled>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d137      	bne.n	80047e0 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004778:	d004      	beq.n	8004784 <HAL_ADC_Init+0x114>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a72      	ldr	r2, [pc, #456]	@ (8004948 <HAL_ADC_Init+0x2d8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d10f      	bne.n	80047a4 <HAL_ADC_Init+0x134>
 8004784:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004788:	f7ff ff38 	bl	80045fc <LL_ADC_IsEnabled>
 800478c:	4604      	mov	r4, r0
 800478e:	486e      	ldr	r0, [pc, #440]	@ (8004948 <HAL_ADC_Init+0x2d8>)
 8004790:	f7ff ff34 	bl	80045fc <LL_ADC_IsEnabled>
 8004794:	4603      	mov	r3, r0
 8004796:	4323      	orrs	r3, r4
 8004798:	2b00      	cmp	r3, #0
 800479a:	bf0c      	ite	eq
 800479c:	2301      	moveq	r3, #1
 800479e:	2300      	movne	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	e008      	b.n	80047b6 <HAL_ADC_Init+0x146>
 80047a4:	4869      	ldr	r0, [pc, #420]	@ (800494c <HAL_ADC_Init+0x2dc>)
 80047a6:	f7ff ff29 	bl	80045fc <LL_ADC_IsEnabled>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d012      	beq.n	80047e0 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047c2:	d004      	beq.n	80047ce <HAL_ADC_Init+0x15e>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a5f      	ldr	r2, [pc, #380]	@ (8004948 <HAL_ADC_Init+0x2d8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d101      	bne.n	80047d2 <HAL_ADC_Init+0x162>
 80047ce:	4a60      	ldr	r2, [pc, #384]	@ (8004950 <HAL_ADC_Init+0x2e0>)
 80047d0:	e000      	b.n	80047d4 <HAL_ADC_Init+0x164>
 80047d2:	4a60      	ldr	r2, [pc, #384]	@ (8004954 <HAL_ADC_Init+0x2e4>)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f7ff fd72 	bl	80042c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	7f5b      	ldrb	r3, [r3, #29]
 80047e4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80047ea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80047f0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80047f6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047fe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004800:	4313      	orrs	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800480a:	2b01      	cmp	r3, #1
 800480c:	d106      	bne.n	800481c <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004812:	3b01      	subs	r3, #1
 8004814:	045b      	lsls	r3, r3, #17
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4313      	orrs	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004820:	2b00      	cmp	r3, #0
 8004822:	d009      	beq.n	8004838 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004828:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004830:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4313      	orrs	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	4b46      	ldr	r3, [pc, #280]	@ (8004958 <HAL_ADC_Init+0x2e8>)
 8004840:	4013      	ands	r3, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	69b9      	ldr	r1, [r7, #24]
 8004848:	430b      	orrs	r3, r1
 800484a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff feee 	bl	8004648 <LL_ADC_INJ_IsConversionOngoing>
 800486c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d17b      	bne.n	800496c <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d178      	bne.n	800496c <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800487e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004886:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004888:	4313      	orrs	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004896:	f023 0302 	bic.w	r3, r3, #2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	69b9      	ldr	r1, [r7, #24]
 80048a0:	430b      	orrs	r3, r1
 80048a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d017      	beq.n	80048dc <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80048ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80048c4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80048c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6911      	ldr	r1, [r2, #16]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	430b      	orrs	r3, r1
 80048d6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80048da:	e013      	b.n	8004904 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80048ea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80048fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004900:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800490a:	2b01      	cmp	r3, #1
 800490c:	d126      	bne.n	800495c <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004918:	f023 0304 	bic.w	r3, r3, #4
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004924:	4311      	orrs	r1, r2
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800492a:	4311      	orrs	r1, r2
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004930:	430a      	orrs	r2, r1
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0201 	orr.w	r2, r2, #1
 800493c:	611a      	str	r2, [r3, #16]
 800493e:	e015      	b.n	800496c <HAL_ADC_Init+0x2fc>
 8004940:	20000000 	.word	0x20000000
 8004944:	053e2d63 	.word	0x053e2d63
 8004948:	50000100 	.word	0x50000100
 800494c:	50000400 	.word	0x50000400
 8004950:	50000300 	.word	0x50000300
 8004954:	50000700 	.word	0x50000700
 8004958:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0201 	bic.w	r2, r2, #1
 800496a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d10c      	bne.n	800498e <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497a:	f023 010f 	bic.w	r1, r3, #15
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	1e5a      	subs	r2, r3, #1
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	631a      	str	r2, [r3, #48]	@ 0x30
 800498c:	e007      	b.n	800499e <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 020f 	bic.w	r2, r2, #15
 800499c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a2:	f023 0303 	bic.w	r3, r3, #3
 80049a6:	f043 0201 	orr.w	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049ae:	e007      	b.n	80049c0 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b4:	f043 0210 	orr.w	r2, r3, #16
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80049c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3724      	adds	r7, #36	@ 0x24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd90      	pop	{r4, r7, pc}
 80049ca:	bf00      	nop

080049cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b0b6      	sub	sp, #216	@ 0xd8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80049dc:	2300      	movs	r3, #0
 80049de:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d102      	bne.n	80049f0 <HAL_ADC_ConfigChannel+0x24>
 80049ea:	2302      	movs	r3, #2
 80049ec:	f000 bc04 	b.w	80051f8 <HAL_ADC_ConfigChannel+0x82c>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff fe10 	bl	8004622 <LL_ADC_REG_IsConversionOngoing>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f040 83e8 	bne.w	80051da <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6859      	ldr	r1, [r3, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	f7ff fd26 	bl	8004468 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff fdfe 	bl	8004622 <LL_ADC_REG_IsConversionOngoing>
 8004a26:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff fe0a 	bl	8004648 <LL_ADC_INJ_IsConversionOngoing>
 8004a34:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a38:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f040 81d9 	bne.w	8004df4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f040 81d4 	bne.w	8004df4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a54:	d10f      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	4619      	mov	r1, r3
 8004a62:	f7ff fd2d 	bl	80044c0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff fce7 	bl	8004442 <LL_ADC_SetSamplingTimeCommonConfig>
 8004a74:	e00e      	b.n	8004a94 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6818      	ldr	r0, [r3, #0]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	6819      	ldr	r1, [r3, #0]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	461a      	mov	r2, r3
 8004a84:	f7ff fd1c 	bl	80044c0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff fcd7 	bl	8004442 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	695a      	ldr	r2, [r3, #20]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	08db      	lsrs	r3, r3, #3
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aaa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d022      	beq.n	8004afc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	6919      	ldr	r1, [r3, #16]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ac6:	f7ff fc31 	bl	800432c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6919      	ldr	r1, [r3, #16]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f7ff fc7d 	bl	80043d6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6818      	ldr	r0, [r3, #0]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d102      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x126>
 8004aec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004af0:	e000      	b.n	8004af4 <HAL_ADC_ConfigChannel+0x128>
 8004af2:	2300      	movs	r3, #0
 8004af4:	461a      	mov	r2, r3
 8004af6:	f7ff fc89 	bl	800440c <LL_ADC_SetOffsetSaturation>
 8004afa:	e17b      	b.n	8004df4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2100      	movs	r1, #0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff fc36 	bl	8004374 <LL_ADC_GetOffsetChannel>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10a      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x15c>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff fc2b 	bl	8004374 <LL_ADC_GetOffsetChannel>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	0e9b      	lsrs	r3, r3, #26
 8004b22:	f003 021f 	and.w	r2, r3, #31
 8004b26:	e01e      	b.n	8004b66 <HAL_ADC_ConfigChannel+0x19a>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff fc20 	bl	8004374 <LL_ADC_GetOffsetChannel>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004b3e:	fa93 f3a3 	rbit	r3, r3
 8004b42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004b4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004b56:	2320      	movs	r3, #32
 8004b58:	e004      	b.n	8004b64 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004b5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b5e:	fab3 f383 	clz	r3, r3
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d105      	bne.n	8004b7e <HAL_ADC_ConfigChannel+0x1b2>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	0e9b      	lsrs	r3, r3, #26
 8004b78:	f003 031f 	and.w	r3, r3, #31
 8004b7c:	e018      	b.n	8004bb0 <HAL_ADC_ConfigChannel+0x1e4>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004b8a:	fa93 f3a3 	rbit	r3, r3
 8004b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004b9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004ba2:	2320      	movs	r3, #32
 8004ba4:	e004      	b.n	8004bb0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004ba6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004baa:	fab3 f383 	clz	r3, r3
 8004bae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d106      	bne.n	8004bc2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2100      	movs	r1, #0
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff fbef 	bl	80043a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff fbd3 	bl	8004374 <LL_ADC_GetOffsetChannel>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <HAL_ADC_ConfigChannel+0x222>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2101      	movs	r1, #1
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff fbc8 	bl	8004374 <LL_ADC_GetOffsetChannel>
 8004be4:	4603      	mov	r3, r0
 8004be6:	0e9b      	lsrs	r3, r3, #26
 8004be8:	f003 021f 	and.w	r2, r3, #31
 8004bec:	e01e      	b.n	8004c2c <HAL_ADC_ConfigChannel+0x260>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff fbbd 	bl	8004374 <LL_ADC_GetOffsetChannel>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c04:	fa93 f3a3 	rbit	r3, r3
 8004c08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004c0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004c14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004c1c:	2320      	movs	r3, #32
 8004c1e:	e004      	b.n	8004c2a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004c20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c24:	fab3 f383 	clz	r3, r3
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d105      	bne.n	8004c44 <HAL_ADC_ConfigChannel+0x278>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	0e9b      	lsrs	r3, r3, #26
 8004c3e:	f003 031f 	and.w	r3, r3, #31
 8004c42:	e018      	b.n	8004c76 <HAL_ADC_ConfigChannel+0x2aa>
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c50:	fa93 f3a3 	rbit	r3, r3
 8004c54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004c58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004c68:	2320      	movs	r3, #32
 8004c6a:	e004      	b.n	8004c76 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004c6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c70:	fab3 f383 	clz	r3, r3
 8004c74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d106      	bne.n	8004c88 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2101      	movs	r1, #1
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff fb8c 	bl	80043a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2102      	movs	r1, #2
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7ff fb70 	bl	8004374 <LL_ADC_GetOffsetChannel>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <HAL_ADC_ConfigChannel+0x2e8>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2102      	movs	r1, #2
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff fb65 	bl	8004374 <LL_ADC_GetOffsetChannel>
 8004caa:	4603      	mov	r3, r0
 8004cac:	0e9b      	lsrs	r3, r3, #26
 8004cae:	f003 021f 	and.w	r2, r3, #31
 8004cb2:	e01e      	b.n	8004cf2 <HAL_ADC_ConfigChannel+0x326>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2102      	movs	r1, #2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff fb5a 	bl	8004374 <LL_ADC_GetOffsetChannel>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cca:	fa93 f3a3 	rbit	r3, r3
 8004cce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004cd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004cd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004cda:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004ce2:	2320      	movs	r3, #32
 8004ce4:	e004      	b.n	8004cf0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004ce6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004cea:	fab3 f383 	clz	r3, r3
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d105      	bne.n	8004d0a <HAL_ADC_ConfigChannel+0x33e>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	0e9b      	lsrs	r3, r3, #26
 8004d04:	f003 031f 	and.w	r3, r3, #31
 8004d08:	e016      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x36c>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d16:	fa93 f3a3 	rbit	r3, r3
 8004d1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004d1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004d22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004d2a:	2320      	movs	r3, #32
 8004d2c:	e004      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004d2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d32:	fab3 f383 	clz	r3, r3
 8004d36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d106      	bne.n	8004d4a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2200      	movs	r2, #0
 8004d42:	2102      	movs	r1, #2
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff fb2b 	bl	80043a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2103      	movs	r1, #3
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff fb0f 	bl	8004374 <LL_ADC_GetOffsetChannel>
 8004d56:	4603      	mov	r3, r0
 8004d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x3aa>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2103      	movs	r1, #3
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fb04 	bl	8004374 <LL_ADC_GetOffsetChannel>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	0e9b      	lsrs	r3, r3, #26
 8004d70:	f003 021f 	and.w	r2, r3, #31
 8004d74:	e017      	b.n	8004da6 <HAL_ADC_ConfigChannel+0x3da>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2103      	movs	r1, #3
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff faf9 	bl	8004374 <LL_ADC_GetOffsetChannel>
 8004d82:	4603      	mov	r3, r0
 8004d84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d88:	fa93 f3a3 	rbit	r3, r3
 8004d8c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004d8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d90:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004d92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004d98:	2320      	movs	r3, #32
 8004d9a:	e003      	b.n	8004da4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004d9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d9e:	fab3 f383 	clz	r3, r3
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d105      	bne.n	8004dbe <HAL_ADC_ConfigChannel+0x3f2>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	0e9b      	lsrs	r3, r3, #26
 8004db8:	f003 031f 	and.w	r3, r3, #31
 8004dbc:	e011      	b.n	8004de2 <HAL_ADC_ConfigChannel+0x416>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dc6:	fa93 f3a3 	rbit	r3, r3
 8004dca:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004dcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004dd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004dd6:	2320      	movs	r3, #32
 8004dd8:	e003      	b.n	8004de2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004dda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ddc:	fab3 f383 	clz	r3, r3
 8004de0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d106      	bne.n	8004df4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2200      	movs	r2, #0
 8004dec:	2103      	movs	r1, #3
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff fad6 	bl	80043a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff fbff 	bl	80045fc <LL_ADC_IsEnabled>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f040 813d 	bne.w	8005080 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	6819      	ldr	r1, [r3, #0]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	461a      	mov	r2, r3
 8004e14:	f7ff fb80 	bl	8004518 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	4aa2      	ldr	r2, [pc, #648]	@ (80050a8 <HAL_ADC_ConfigChannel+0x6dc>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	f040 812e 	bne.w	8005080 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10b      	bne.n	8004e4c <HAL_ADC_ConfigChannel+0x480>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	0e9b      	lsrs	r3, r3, #26
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	f003 031f 	and.w	r3, r3, #31
 8004e40:	2b09      	cmp	r3, #9
 8004e42:	bf94      	ite	ls
 8004e44:	2301      	movls	r3, #1
 8004e46:	2300      	movhi	r3, #0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	e019      	b.n	8004e80 <HAL_ADC_ConfigChannel+0x4b4>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e54:	fa93 f3a3 	rbit	r3, r3
 8004e58:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004e5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e5c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004e5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004e64:	2320      	movs	r3, #32
 8004e66:	e003      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004e68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e6a:	fab3 f383 	clz	r3, r3
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	3301      	adds	r3, #1
 8004e72:	f003 031f 	and.w	r3, r3, #31
 8004e76:	2b09      	cmp	r3, #9
 8004e78:	bf94      	ite	ls
 8004e7a:	2301      	movls	r3, #1
 8004e7c:	2300      	movhi	r3, #0
 8004e7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d079      	beq.n	8004f78 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d107      	bne.n	8004ea0 <HAL_ADC_ConfigChannel+0x4d4>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	0e9b      	lsrs	r3, r3, #26
 8004e96:	3301      	adds	r3, #1
 8004e98:	069b      	lsls	r3, r3, #26
 8004e9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e9e:	e015      	b.n	8004ecc <HAL_ADC_ConfigChannel+0x500>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ea8:	fa93 f3a3 	rbit	r3, r3
 8004eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004eae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eb0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004eb8:	2320      	movs	r3, #32
 8004eba:	e003      	b.n	8004ec4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ebe:	fab3 f383 	clz	r3, r3
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	069b      	lsls	r3, r3, #26
 8004ec8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d109      	bne.n	8004eec <HAL_ADC_ConfigChannel+0x520>
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	0e9b      	lsrs	r3, r3, #26
 8004ede:	3301      	adds	r3, #1
 8004ee0:	f003 031f 	and.w	r3, r3, #31
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eea:	e017      	b.n	8004f1c <HAL_ADC_ConfigChannel+0x550>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ef4:	fa93 f3a3 	rbit	r3, r3
 8004ef8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004efc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004f04:	2320      	movs	r3, #32
 8004f06:	e003      	b.n	8004f10 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004f08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f0a:	fab3 f383 	clz	r3, r3
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	3301      	adds	r3, #1
 8004f12:	f003 031f 	and.w	r3, r3, #31
 8004f16:	2101      	movs	r1, #1
 8004f18:	fa01 f303 	lsl.w	r3, r1, r3
 8004f1c:	ea42 0103 	orr.w	r1, r2, r3
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10a      	bne.n	8004f42 <HAL_ADC_ConfigChannel+0x576>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	0e9b      	lsrs	r3, r3, #26
 8004f32:	3301      	adds	r3, #1
 8004f34:	f003 021f 	and.w	r2, r3, #31
 8004f38:	4613      	mov	r3, r2
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	4413      	add	r3, r2
 8004f3e:	051b      	lsls	r3, r3, #20
 8004f40:	e018      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x5a8>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f4a:	fa93 f3a3 	rbit	r3, r3
 8004f4e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004f5a:	2320      	movs	r3, #32
 8004f5c:	e003      	b.n	8004f66 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f60:	fab3 f383 	clz	r3, r3
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	3301      	adds	r3, #1
 8004f68:	f003 021f 	and.w	r2, r3, #31
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	4413      	add	r3, r2
 8004f72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f74:	430b      	orrs	r3, r1
 8004f76:	e07e      	b.n	8005076 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d107      	bne.n	8004f94 <HAL_ADC_ConfigChannel+0x5c8>
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	0e9b      	lsrs	r3, r3, #26
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	069b      	lsls	r3, r3, #26
 8004f8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f92:	e015      	b.n	8004fc0 <HAL_ADC_ConfigChannel+0x5f4>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f9c:	fa93 f3a3 	rbit	r3, r3
 8004fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004fac:	2320      	movs	r3, #32
 8004fae:	e003      	b.n	8004fb8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb2:	fab3 f383 	clz	r3, r3
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	3301      	adds	r3, #1
 8004fba:	069b      	lsls	r3, r3, #26
 8004fbc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d109      	bne.n	8004fe0 <HAL_ADC_ConfigChannel+0x614>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	0e9b      	lsrs	r3, r3, #26
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	2101      	movs	r1, #1
 8004fda:	fa01 f303 	lsl.w	r3, r1, r3
 8004fde:	e017      	b.n	8005010 <HAL_ADC_ConfigChannel+0x644>
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	fa93 f3a3 	rbit	r3, r3
 8004fec:	61fb      	str	r3, [r7, #28]
  return result;
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004ff8:	2320      	movs	r3, #32
 8004ffa:	e003      	b.n	8005004 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffe:	fab3 f383 	clz	r3, r3
 8005002:	b2db      	uxtb	r3, r3
 8005004:	3301      	adds	r3, #1
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	2101      	movs	r1, #1
 800500c:	fa01 f303 	lsl.w	r3, r1, r3
 8005010:	ea42 0103 	orr.w	r1, r2, r3
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10d      	bne.n	800503c <HAL_ADC_ConfigChannel+0x670>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	0e9b      	lsrs	r3, r3, #26
 8005026:	3301      	adds	r3, #1
 8005028:	f003 021f 	and.w	r2, r3, #31
 800502c:	4613      	mov	r3, r2
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	4413      	add	r3, r2
 8005032:	3b1e      	subs	r3, #30
 8005034:	051b      	lsls	r3, r3, #20
 8005036:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800503a:	e01b      	b.n	8005074 <HAL_ADC_ConfigChannel+0x6a8>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	fa93 f3a3 	rbit	r3, r3
 8005048:	613b      	str	r3, [r7, #16]
  return result;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005054:	2320      	movs	r3, #32
 8005056:	e003      	b.n	8005060 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	fab3 f383 	clz	r3, r3
 800505e:	b2db      	uxtb	r3, r3
 8005060:	3301      	adds	r3, #1
 8005062:	f003 021f 	and.w	r2, r3, #31
 8005066:	4613      	mov	r3, r2
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	4413      	add	r3, r2
 800506c:	3b1e      	subs	r3, #30
 800506e:	051b      	lsls	r3, r3, #20
 8005070:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005074:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800507a:	4619      	mov	r1, r3
 800507c:	f7ff fa20 	bl	80044c0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	4b09      	ldr	r3, [pc, #36]	@ (80050ac <HAL_ADC_ConfigChannel+0x6e0>)
 8005086:	4013      	ands	r3, r2
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 80af 	beq.w	80051ec <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005096:	d004      	beq.n	80050a2 <HAL_ADC_ConfigChannel+0x6d6>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a04      	ldr	r2, [pc, #16]	@ (80050b0 <HAL_ADC_ConfigChannel+0x6e4>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d10a      	bne.n	80050b8 <HAL_ADC_ConfigChannel+0x6ec>
 80050a2:	4b04      	ldr	r3, [pc, #16]	@ (80050b4 <HAL_ADC_ConfigChannel+0x6e8>)
 80050a4:	e009      	b.n	80050ba <HAL_ADC_ConfigChannel+0x6ee>
 80050a6:	bf00      	nop
 80050a8:	407f0000 	.word	0x407f0000
 80050ac:	80080000 	.word	0x80080000
 80050b0:	50000100 	.word	0x50000100
 80050b4:	50000300 	.word	0x50000300
 80050b8:	4b51      	ldr	r3, [pc, #324]	@ (8005200 <HAL_ADC_ConfigChannel+0x834>)
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff f928 	bl	8004310 <LL_ADC_GetCommonPathInternalCh>
 80050c0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a4e      	ldr	r2, [pc, #312]	@ (8005204 <HAL_ADC_ConfigChannel+0x838>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d004      	beq.n	80050d8 <HAL_ADC_ConfigChannel+0x70c>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a4d      	ldr	r2, [pc, #308]	@ (8005208 <HAL_ADC_ConfigChannel+0x83c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d134      	bne.n	8005142 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80050dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d12e      	bne.n	8005142 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050ec:	d17e      	bne.n	80051ec <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050f6:	d004      	beq.n	8005102 <HAL_ADC_ConfigChannel+0x736>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a43      	ldr	r2, [pc, #268]	@ (800520c <HAL_ADC_ConfigChannel+0x840>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d101      	bne.n	8005106 <HAL_ADC_ConfigChannel+0x73a>
 8005102:	4a43      	ldr	r2, [pc, #268]	@ (8005210 <HAL_ADC_ConfigChannel+0x844>)
 8005104:	e000      	b.n	8005108 <HAL_ADC_ConfigChannel+0x73c>
 8005106:	4a3e      	ldr	r2, [pc, #248]	@ (8005200 <HAL_ADC_ConfigChannel+0x834>)
 8005108:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800510c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005110:	4619      	mov	r1, r3
 8005112:	4610      	mov	r0, r2
 8005114:	f7ff f8e9 	bl	80042ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005118:	4b3e      	ldr	r3, [pc, #248]	@ (8005214 <HAL_ADC_ConfigChannel+0x848>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	099b      	lsrs	r3, r3, #6
 800511e:	4a3e      	ldr	r2, [pc, #248]	@ (8005218 <HAL_ADC_ConfigChannel+0x84c>)
 8005120:	fba2 2303 	umull	r2, r3, r2, r3
 8005124:	099b      	lsrs	r3, r3, #6
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	4613      	mov	r3, r2
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005132:	e002      	b.n	800513a <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3b01      	subs	r3, #1
 8005138:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1f9      	bne.n	8005134 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005140:	e054      	b.n	80051ec <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a35      	ldr	r2, [pc, #212]	@ (800521c <HAL_ADC_ConfigChannel+0x850>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d120      	bne.n	800518e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800514c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005150:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d11a      	bne.n	800518e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005160:	d144      	bne.n	80051ec <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800516a:	d004      	beq.n	8005176 <HAL_ADC_ConfigChannel+0x7aa>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a26      	ldr	r2, [pc, #152]	@ (800520c <HAL_ADC_ConfigChannel+0x840>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d101      	bne.n	800517a <HAL_ADC_ConfigChannel+0x7ae>
 8005176:	4a26      	ldr	r2, [pc, #152]	@ (8005210 <HAL_ADC_ConfigChannel+0x844>)
 8005178:	e000      	b.n	800517c <HAL_ADC_ConfigChannel+0x7b0>
 800517a:	4a21      	ldr	r2, [pc, #132]	@ (8005200 <HAL_ADC_ConfigChannel+0x834>)
 800517c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005180:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005184:	4619      	mov	r1, r3
 8005186:	4610      	mov	r0, r2
 8005188:	f7ff f8af 	bl	80042ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800518c:	e02e      	b.n	80051ec <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a23      	ldr	r2, [pc, #140]	@ (8005220 <HAL_ADC_ConfigChannel+0x854>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d129      	bne.n	80051ec <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005198:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800519c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d123      	bne.n	80051ec <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a18      	ldr	r2, [pc, #96]	@ (800520c <HAL_ADC_ConfigChannel+0x840>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d01e      	beq.n	80051ec <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051b6:	d004      	beq.n	80051c2 <HAL_ADC_ConfigChannel+0x7f6>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a13      	ldr	r2, [pc, #76]	@ (800520c <HAL_ADC_ConfigChannel+0x840>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d101      	bne.n	80051c6 <HAL_ADC_ConfigChannel+0x7fa>
 80051c2:	4a13      	ldr	r2, [pc, #76]	@ (8005210 <HAL_ADC_ConfigChannel+0x844>)
 80051c4:	e000      	b.n	80051c8 <HAL_ADC_ConfigChannel+0x7fc>
 80051c6:	4a0e      	ldr	r2, [pc, #56]	@ (8005200 <HAL_ADC_ConfigChannel+0x834>)
 80051c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80051cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80051d0:	4619      	mov	r1, r3
 80051d2:	4610      	mov	r0, r2
 80051d4:	f7ff f889 	bl	80042ea <LL_ADC_SetCommonPathInternalCh>
 80051d8:	e008      	b.n	80051ec <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051de:	f043 0220 	orr.w	r2, r3, #32
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80051f4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	37d8      	adds	r7, #216	@ 0xd8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	50000700 	.word	0x50000700
 8005204:	c3210000 	.word	0xc3210000
 8005208:	90c00010 	.word	0x90c00010
 800520c:	50000100 	.word	0x50000100
 8005210:	50000300 	.word	0x50000300
 8005214:	20000000 	.word	0x20000000
 8005218:	053e2d63 	.word	0x053e2d63
 800521c:	c7520000 	.word	0xc7520000
 8005220:	cb840000 	.word	0xcb840000

08005224 <LL_ADC_IsEnabled>:
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b01      	cmp	r3, #1
 8005236:	d101      	bne.n	800523c <LL_ADC_IsEnabled+0x18>
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <LL_ADC_IsEnabled+0x1a>
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <LL_ADC_REG_IsConversionOngoing>:
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b04      	cmp	r3, #4
 800525c:	d101      	bne.n	8005262 <LL_ADC_REG_IsConversionOngoing+0x18>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005270:	b590      	push	{r4, r7, lr}
 8005272:	b0a1      	sub	sp, #132	@ 0x84
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800527a:	2300      	movs	r3, #0
 800527c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800528a:	2302      	movs	r3, #2
 800528c:	e0cb      	b.n	8005426 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005296:	2300      	movs	r3, #0
 8005298:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800529a:	2300      	movs	r3, #0
 800529c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052a6:	d102      	bne.n	80052ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80052a8:	4b61      	ldr	r3, [pc, #388]	@ (8005430 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80052aa:	60bb      	str	r3, [r7, #8]
 80052ac:	e001      	b.n	80052b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80052ae:	2300      	movs	r3, #0
 80052b0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10b      	bne.n	80052d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052bc:	f043 0220 	orr.w	r2, r3, #32
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0aa      	b.n	8005426 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff ffb9 	bl	800524a <LL_ADC_REG_IsConversionOngoing>
 80052d8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff ffb3 	bl	800524a <LL_ADC_REG_IsConversionOngoing>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f040 808c 	bne.w	8005404 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80052ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f040 8088 	bne.w	8005404 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052fc:	d004      	beq.n	8005308 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a4b      	ldr	r2, [pc, #300]	@ (8005430 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d101      	bne.n	800530c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8005308:	4b4a      	ldr	r3, [pc, #296]	@ (8005434 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 800530a:	e000      	b.n	800530e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800530c:	4b4a      	ldr	r3, [pc, #296]	@ (8005438 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 800530e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d041      	beq.n	800539c <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005318:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	6859      	ldr	r1, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800532a:	035b      	lsls	r3, r3, #13
 800532c:	430b      	orrs	r3, r1
 800532e:	431a      	orrs	r2, r3
 8005330:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005332:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800533c:	d004      	beq.n	8005348 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a3b      	ldr	r2, [pc, #236]	@ (8005430 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d10f      	bne.n	8005368 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8005348:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800534c:	f7ff ff6a 	bl	8005224 <LL_ADC_IsEnabled>
 8005350:	4604      	mov	r4, r0
 8005352:	4837      	ldr	r0, [pc, #220]	@ (8005430 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005354:	f7ff ff66 	bl	8005224 <LL_ADC_IsEnabled>
 8005358:	4603      	mov	r3, r0
 800535a:	4323      	orrs	r3, r4
 800535c:	2b00      	cmp	r3, #0
 800535e:	bf0c      	ite	eq
 8005360:	2301      	moveq	r3, #1
 8005362:	2300      	movne	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	e008      	b.n	800537a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8005368:	4834      	ldr	r0, [pc, #208]	@ (800543c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800536a:	f7ff ff5b 	bl	8005224 <LL_ADC_IsEnabled>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	bf0c      	ite	eq
 8005374:	2301      	moveq	r3, #1
 8005376:	2300      	movne	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d04c      	beq.n	8005418 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800537e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005386:	f023 030f 	bic.w	r3, r3, #15
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	6811      	ldr	r1, [r2, #0]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	6892      	ldr	r2, [r2, #8]
 8005392:	430a      	orrs	r2, r1
 8005394:	431a      	orrs	r2, r3
 8005396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005398:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800539a:	e03d      	b.n	8005418 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800539c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053a6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053b0:	d004      	beq.n	80053bc <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005430 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d10f      	bne.n	80053dc <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80053bc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80053c0:	f7ff ff30 	bl	8005224 <LL_ADC_IsEnabled>
 80053c4:	4604      	mov	r4, r0
 80053c6:	481a      	ldr	r0, [pc, #104]	@ (8005430 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80053c8:	f7ff ff2c 	bl	8005224 <LL_ADC_IsEnabled>
 80053cc:	4603      	mov	r3, r0
 80053ce:	4323      	orrs	r3, r4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	bf0c      	ite	eq
 80053d4:	2301      	moveq	r3, #1
 80053d6:	2300      	movne	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	e008      	b.n	80053ee <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 80053dc:	4817      	ldr	r0, [pc, #92]	@ (800543c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80053de:	f7ff ff21 	bl	8005224 <LL_ADC_IsEnabled>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	bf0c      	ite	eq
 80053e8:	2301      	moveq	r3, #1
 80053ea:	2300      	movne	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d012      	beq.n	8005418 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80053f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80053fa:	f023 030f 	bic.w	r3, r3, #15
 80053fe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005400:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005402:	e009      	b.n	8005418 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005408:	f043 0220 	orr.w	r2, r3, #32
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005416:	e000      	b.n	800541a <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005418:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005422:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005426:	4618      	mov	r0, r3
 8005428:	3784      	adds	r7, #132	@ 0x84
 800542a:	46bd      	mov	sp, r7
 800542c:	bd90      	pop	{r4, r7, pc}
 800542e:	bf00      	nop
 8005430:	50000100 	.word	0x50000100
 8005434:	50000300 	.word	0x50000300
 8005438:	50000700 	.word	0x50000700
 800543c:	50000400 	.word	0x50000400

08005440 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e023      	b.n	800549a <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fc ff96 	bl	8002398 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054b4:	4b0c      	ldr	r3, [pc, #48]	@ (80054e8 <__NVIC_SetPriorityGrouping+0x44>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80054c0:	4013      	ands	r3, r2
 80054c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80054d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054d6:	4a04      	ldr	r2, [pc, #16]	@ (80054e8 <__NVIC_SetPriorityGrouping+0x44>)
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	60d3      	str	r3, [r2, #12]
}
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	e000ed00 	.word	0xe000ed00

080054ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054f0:	4b04      	ldr	r3, [pc, #16]	@ (8005504 <__NVIC_GetPriorityGrouping+0x18>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	0a1b      	lsrs	r3, r3, #8
 80054f6:	f003 0307 	and.w	r3, r3, #7
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	e000ed00 	.word	0xe000ed00

08005508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	4603      	mov	r3, r0
 8005510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005516:	2b00      	cmp	r3, #0
 8005518:	db0b      	blt.n	8005532 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	f003 021f 	and.w	r2, r3, #31
 8005520:	4907      	ldr	r1, [pc, #28]	@ (8005540 <__NVIC_EnableIRQ+0x38>)
 8005522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	2001      	movs	r0, #1
 800552a:	fa00 f202 	lsl.w	r2, r0, r2
 800552e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	e000e100 	.word	0xe000e100

08005544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	4603      	mov	r3, r0
 800554c:	6039      	str	r1, [r7, #0]
 800554e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005554:	2b00      	cmp	r3, #0
 8005556:	db0a      	blt.n	800556e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	b2da      	uxtb	r2, r3
 800555c:	490c      	ldr	r1, [pc, #48]	@ (8005590 <__NVIC_SetPriority+0x4c>)
 800555e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005562:	0112      	lsls	r2, r2, #4
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	440b      	add	r3, r1
 8005568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800556c:	e00a      	b.n	8005584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	b2da      	uxtb	r2, r3
 8005572:	4908      	ldr	r1, [pc, #32]	@ (8005594 <__NVIC_SetPriority+0x50>)
 8005574:	79fb      	ldrb	r3, [r7, #7]
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	3b04      	subs	r3, #4
 800557c:	0112      	lsls	r2, r2, #4
 800557e:	b2d2      	uxtb	r2, r2
 8005580:	440b      	add	r3, r1
 8005582:	761a      	strb	r2, [r3, #24]
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	e000e100 	.word	0xe000e100
 8005594:	e000ed00 	.word	0xe000ed00

08005598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005598:	b480      	push	{r7}
 800559a:	b089      	sub	sp, #36	@ 0x24
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	f1c3 0307 	rsb	r3, r3, #7
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	bf28      	it	cs
 80055b6:	2304      	movcs	r3, #4
 80055b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	3304      	adds	r3, #4
 80055be:	2b06      	cmp	r3, #6
 80055c0:	d902      	bls.n	80055c8 <NVIC_EncodePriority+0x30>
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	3b03      	subs	r3, #3
 80055c6:	e000      	b.n	80055ca <NVIC_EncodePriority+0x32>
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	43da      	mvns	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	401a      	ands	r2, r3
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	fa01 f303 	lsl.w	r3, r1, r3
 80055ea:	43d9      	mvns	r1, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055f0:	4313      	orrs	r3, r2
         );
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3724      	adds	r7, #36	@ 0x24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b082      	sub	sp, #8
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7ff ff4c 	bl	80054a4 <__NVIC_SetPriorityGrouping>
}
 800560c:	bf00      	nop
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	4603      	mov	r3, r0
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005622:	f7ff ff63 	bl	80054ec <__NVIC_GetPriorityGrouping>
 8005626:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	6978      	ldr	r0, [r7, #20]
 800562e:	f7ff ffb3 	bl	8005598 <NVIC_EncodePriority>
 8005632:	4602      	mov	r2, r0
 8005634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005638:	4611      	mov	r1, r2
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff ff82 	bl	8005544 <__NVIC_SetPriority>
}
 8005640:	bf00      	nop
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff ff56 	bl	8005508 <__NVIC_EnableIRQ>
}
 800565c:	bf00      	nop
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e08d      	b.n	8005792 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	4b47      	ldr	r3, [pc, #284]	@ (800579c <HAL_DMA_Init+0x138>)
 800567e:	429a      	cmp	r2, r3
 8005680:	d80f      	bhi.n	80056a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	4b45      	ldr	r3, [pc, #276]	@ (80057a0 <HAL_DMA_Init+0x13c>)
 800568a:	4413      	add	r3, r2
 800568c:	4a45      	ldr	r2, [pc, #276]	@ (80057a4 <HAL_DMA_Init+0x140>)
 800568e:	fba2 2303 	umull	r2, r3, r2, r3
 8005692:	091b      	lsrs	r3, r3, #4
 8005694:	009a      	lsls	r2, r3, #2
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a42      	ldr	r2, [pc, #264]	@ (80057a8 <HAL_DMA_Init+0x144>)
 800569e:	641a      	str	r2, [r3, #64]	@ 0x40
 80056a0:	e00e      	b.n	80056c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	4b40      	ldr	r3, [pc, #256]	@ (80057ac <HAL_DMA_Init+0x148>)
 80056aa:	4413      	add	r3, r2
 80056ac:	4a3d      	ldr	r2, [pc, #244]	@ (80057a4 <HAL_DMA_Init+0x140>)
 80056ae:	fba2 2303 	umull	r2, r3, r2, r3
 80056b2:	091b      	lsrs	r3, r3, #4
 80056b4:	009a      	lsls	r2, r3, #2
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a3c      	ldr	r2, [pc, #240]	@ (80057b0 <HAL_DMA_Init+0x14c>)
 80056be:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80056d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80056e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f9be 	bl	8005a94 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005720:	d102      	bne.n	8005728 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005730:	b2d2      	uxtb	r2, r2
 8005732:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800573c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d010      	beq.n	8005768 <HAL_DMA_Init+0x104>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b04      	cmp	r3, #4
 800574c:	d80c      	bhi.n	8005768 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f9de 	bl	8005b10 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005764:	605a      	str	r2, [r3, #4]
 8005766:	e008      	b.n	800577a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40020407 	.word	0x40020407
 80057a0:	bffdfff8 	.word	0xbffdfff8
 80057a4:	cccccccd 	.word	0xcccccccd
 80057a8:	40020000 	.word	0x40020000
 80057ac:	bffdfbf8 	.word	0xbffdfbf8
 80057b0:	40020400 	.word	0x40020400

080057b4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d005      	beq.n	80057d8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2204      	movs	r2, #4
 80057d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	73fb      	strb	r3, [r7, #15]
 80057d6:	e037      	b.n	8005848 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 020e 	bic.w	r2, r2, #14
 80057e6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057f6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0201 	bic.w	r2, r2, #1
 8005806:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580c:	f003 021f 	and.w	r2, r3, #31
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005814:	2101      	movs	r1, #1
 8005816:	fa01 f202 	lsl.w	r2, r1, r2
 800581a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005824:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00c      	beq.n	8005848 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005838:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800583c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005846:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005858:	7bfb      	ldrb	r3, [r7, #15]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d00d      	beq.n	800589a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2204      	movs	r2, #4
 8005882:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	73fb      	strb	r3, [r7, #15]
 8005898:	e047      	b.n	800592a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 020e 	bic.w	r2, r2, #14
 80058a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0201 	bic.w	r2, r2, #1
 80058b8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ce:	f003 021f 	and.w	r2, r3, #31
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d6:	2101      	movs	r1, #1
 80058d8:	fa01 f202 	lsl.w	r2, r1, r2
 80058dc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80058e6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00c      	beq.n	800590a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005908:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	4798      	blx	r3
    }
  }
  return status;
 800592a:	7bfb      	ldrb	r3, [r7, #15]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005950:	f003 031f 	and.w	r3, r3, #31
 8005954:	2204      	movs	r2, #4
 8005956:	409a      	lsls	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4013      	ands	r3, r2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d026      	beq.n	80059ae <HAL_DMA_IRQHandler+0x7a>
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 0304 	and.w	r3, r3, #4
 8005966:	2b00      	cmp	r3, #0
 8005968:	d021      	beq.n	80059ae <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0320 	and.w	r3, r3, #32
 8005974:	2b00      	cmp	r3, #0
 8005976:	d107      	bne.n	8005988 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0204 	bic.w	r2, r2, #4
 8005986:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598c:	f003 021f 	and.w	r2, r3, #31
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005994:	2104      	movs	r1, #4
 8005996:	fa01 f202 	lsl.w	r2, r1, r2
 800599a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d071      	beq.n	8005a88 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80059ac:	e06c      	b.n	8005a88 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	2202      	movs	r2, #2
 80059b8:	409a      	lsls	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4013      	ands	r3, r2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d02e      	beq.n	8005a20 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d029      	beq.n	8005a20 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0320 	and.w	r3, r3, #32
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10b      	bne.n	80059f2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 020a 	bic.w	r2, r2, #10
 80059e8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f6:	f003 021f 	and.w	r2, r3, #31
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fe:	2102      	movs	r1, #2
 8005a00:	fa01 f202 	lsl.w	r2, r1, r2
 8005a04:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d038      	beq.n	8005a88 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005a1e:	e033      	b.n	8005a88 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a24:	f003 031f 	and.w	r3, r3, #31
 8005a28:	2208      	movs	r2, #8
 8005a2a:	409a      	lsls	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d02a      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d025      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 020e 	bic.w	r2, r2, #14
 8005a4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a52:	f003 021f 	and.w	r2, r3, #31
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a60:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d004      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a88:	bf00      	nop
 8005a8a:	bf00      	nop
}
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4b16      	ldr	r3, [pc, #88]	@ (8005afc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d802      	bhi.n	8005aae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005aa8:	4b15      	ldr	r3, [pc, #84]	@ (8005b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	e001      	b.n	8005ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005aae:	4b15      	ldr	r3, [pc, #84]	@ (8005b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005ab0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	3b08      	subs	r3, #8
 8005abe:	4a12      	ldr	r2, [pc, #72]	@ (8005b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac4:	091b      	lsrs	r3, r3, #4
 8005ac6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005acc:	089b      	lsrs	r3, r3, #2
 8005ace:	009a      	lsls	r2, r3, #2
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a0b      	ldr	r2, [pc, #44]	@ (8005b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005ade:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f003 031f 	and.w	r3, r3, #31
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	409a      	lsls	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005aee:	bf00      	nop
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	40020407 	.word	0x40020407
 8005b00:	40020800 	.word	0x40020800
 8005b04:	40020820 	.word	0x40020820
 8005b08:	cccccccd 	.word	0xcccccccd
 8005b0c:	40020880 	.word	0x40020880

08005b10 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4b0b      	ldr	r3, [pc, #44]	@ (8005b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	461a      	mov	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a08      	ldr	r2, [pc, #32]	@ (8005b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005b32:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	f003 031f 	and.w	r3, r3, #31
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	409a      	lsls	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005b44:	bf00      	nop
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	1000823f 	.word	0x1000823f
 8005b54:	40020940 	.word	0x40020940

08005b58 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e033      	b.n	8005bd2 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d106      	bne.n	8005b84 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7fc fc2a 	bl	80023d8 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f854 	bl	8005c38 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f822 	bl	8005bda <FMAC_Reset>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d10c      	bne.n	8005bb6 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ba0:	f043 0210 	orr.w	r2, r3, #16
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	22a0      	movs	r2, #160	@ 0xa0
 8005bac:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	73fb      	strb	r3, [r7, #15]
 8005bb4:	e008      	b.n	8005bc8 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005be2:	f7fe fb1d 	bl	8004220 <HAL_GetTick>
 8005be6:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005bf6:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8005bf8:	e00f      	b.n	8005c1a <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8005bfa:	f7fe fb11 	bl	8004220 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005c08:	d907      	bls.n	8005c1a <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c0e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e00a      	b.n	8005c30 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e8      	bne.n	8005bfa <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f807 	bl	8005c54 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f81b 	bl	8005c82 <FMAC_ResetOutputStateAndDataPointers>
}
 8005c4c:	bf00      	nop
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005cbe:	e15a      	b.n	8005f76 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ccc:	4013      	ands	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 814c 	beq.w	8005f70 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f003 0303 	and.w	r3, r3, #3
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d005      	beq.n	8005cf0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d130      	bne.n	8005d52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	2203      	movs	r2, #3
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	43db      	mvns	r3, r3
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4013      	ands	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d26:	2201      	movs	r2, #1
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2e:	43db      	mvns	r3, r3
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4013      	ands	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	091b      	lsrs	r3, r3, #4
 8005d3c:	f003 0201 	and.w	r2, r3, #1
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	fa02 f303 	lsl.w	r3, r2, r3
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f003 0303 	and.w	r3, r3, #3
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	d017      	beq.n	8005d8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	2203      	movs	r2, #3
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	43db      	mvns	r3, r3
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4013      	ands	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	689a      	ldr	r2, [r3, #8]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	005b      	lsls	r3, r3, #1
 8005d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f003 0303 	and.w	r3, r3, #3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d123      	bne.n	8005de2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	08da      	lsrs	r2, r3, #3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3208      	adds	r2, #8
 8005da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	220f      	movs	r2, #15
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	43db      	mvns	r3, r3
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f003 0307 	and.w	r3, r3, #7
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	08da      	lsrs	r2, r3, #3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	3208      	adds	r2, #8
 8005ddc:	6939      	ldr	r1, [r7, #16]
 8005dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	2203      	movs	r2, #3
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	43db      	mvns	r3, r3
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4013      	ands	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f003 0203 	and.w	r2, r3, #3
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 80a6 	beq.w	8005f70 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e24:	4b5b      	ldr	r3, [pc, #364]	@ (8005f94 <HAL_GPIO_Init+0x2e4>)
 8005e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e28:	4a5a      	ldr	r2, [pc, #360]	@ (8005f94 <HAL_GPIO_Init+0x2e4>)
 8005e2a:	f043 0301 	orr.w	r3, r3, #1
 8005e2e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005e30:	4b58      	ldr	r3, [pc, #352]	@ (8005f94 <HAL_GPIO_Init+0x2e4>)
 8005e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	60bb      	str	r3, [r7, #8]
 8005e3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e3c:	4a56      	ldr	r2, [pc, #344]	@ (8005f98 <HAL_GPIO_Init+0x2e8>)
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	089b      	lsrs	r3, r3, #2
 8005e42:	3302      	adds	r3, #2
 8005e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f003 0303 	and.w	r3, r3, #3
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	220f      	movs	r2, #15
 8005e54:	fa02 f303 	lsl.w	r3, r2, r3
 8005e58:	43db      	mvns	r3, r3
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005e66:	d01f      	beq.n	8005ea8 <HAL_GPIO_Init+0x1f8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a4c      	ldr	r2, [pc, #304]	@ (8005f9c <HAL_GPIO_Init+0x2ec>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d019      	beq.n	8005ea4 <HAL_GPIO_Init+0x1f4>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a4b      	ldr	r2, [pc, #300]	@ (8005fa0 <HAL_GPIO_Init+0x2f0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d013      	beq.n	8005ea0 <HAL_GPIO_Init+0x1f0>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a4a      	ldr	r2, [pc, #296]	@ (8005fa4 <HAL_GPIO_Init+0x2f4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d00d      	beq.n	8005e9c <HAL_GPIO_Init+0x1ec>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a49      	ldr	r2, [pc, #292]	@ (8005fa8 <HAL_GPIO_Init+0x2f8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d007      	beq.n	8005e98 <HAL_GPIO_Init+0x1e8>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a48      	ldr	r2, [pc, #288]	@ (8005fac <HAL_GPIO_Init+0x2fc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d101      	bne.n	8005e94 <HAL_GPIO_Init+0x1e4>
 8005e90:	2305      	movs	r3, #5
 8005e92:	e00a      	b.n	8005eaa <HAL_GPIO_Init+0x1fa>
 8005e94:	2306      	movs	r3, #6
 8005e96:	e008      	b.n	8005eaa <HAL_GPIO_Init+0x1fa>
 8005e98:	2304      	movs	r3, #4
 8005e9a:	e006      	b.n	8005eaa <HAL_GPIO_Init+0x1fa>
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e004      	b.n	8005eaa <HAL_GPIO_Init+0x1fa>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e002      	b.n	8005eaa <HAL_GPIO_Init+0x1fa>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <HAL_GPIO_Init+0x1fa>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	f002 0203 	and.w	r2, r2, #3
 8005eb0:	0092      	lsls	r2, r2, #2
 8005eb2:	4093      	lsls	r3, r2
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005eba:	4937      	ldr	r1, [pc, #220]	@ (8005f98 <HAL_GPIO_Init+0x2e8>)
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	089b      	lsrs	r3, r3, #2
 8005ec0:	3302      	adds	r3, #2
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ec8:	4b39      	ldr	r3, [pc, #228]	@ (8005fb0 <HAL_GPIO_Init+0x300>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005eec:	4a30      	ldr	r2, [pc, #192]	@ (8005fb0 <HAL_GPIO_Init+0x300>)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8005fb0 <HAL_GPIO_Init+0x300>)
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	43db      	mvns	r3, r3
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4013      	ands	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f16:	4a26      	ldr	r2, [pc, #152]	@ (8005fb0 <HAL_GPIO_Init+0x300>)
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005f1c:	4b24      	ldr	r3, [pc, #144]	@ (8005fb0 <HAL_GPIO_Init+0x300>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	43db      	mvns	r3, r3
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f40:	4a1b      	ldr	r2, [pc, #108]	@ (8005fb0 <HAL_GPIO_Init+0x300>)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005f46:	4b1a      	ldr	r3, [pc, #104]	@ (8005fb0 <HAL_GPIO_Init+0x300>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	43db      	mvns	r3, r3
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	4013      	ands	r3, r2
 8005f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f6a:	4a11      	ldr	r2, [pc, #68]	@ (8005fb0 <HAL_GPIO_Init+0x300>)
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	3301      	adds	r3, #1
 8005f74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f47f ae9d 	bne.w	8005cc0 <HAL_GPIO_Init+0x10>
  }
}
 8005f86:	bf00      	nop
 8005f88:	bf00      	nop
 8005f8a:	371c      	adds	r7, #28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	40021000 	.word	0x40021000
 8005f98:	40010000 	.word	0x40010000
 8005f9c:	48000400 	.word	0x48000400
 8005fa0:	48000800 	.word	0x48000800
 8005fa4:	48000c00 	.word	0x48000c00
 8005fa8:	48001000 	.word	0x48001000
 8005fac:	48001400 	.word	0x48001400
 8005fb0:	40010400 	.word	0x40010400

08005fb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	887b      	ldrh	r3, [r7, #2]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	73fb      	strb	r3, [r7, #15]
 8005fd0:	e001      	b.n	8005fd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	807b      	strh	r3, [r7, #2]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ff4:	787b      	ldrb	r3, [r7, #1]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ffa:	887a      	ldrh	r2, [r7, #2]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006000:	e002      	b.n	8006008 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006002:	887a      	ldrh	r2, [r7, #2]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e08d      	b.n	8006142 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d106      	bne.n	8006040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fc f9ec 	bl	8002418 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2224      	movs	r2, #36	@ 0x24
 8006044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0201 	bic.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006064:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006074:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d107      	bne.n	800608e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800608a:	609a      	str	r2, [r3, #8]
 800608c:	e006      	b.n	800609c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800609a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d108      	bne.n	80060b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060b2:	605a      	str	r2, [r3, #4]
 80060b4:	e007      	b.n	80060c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80060d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691a      	ldr	r2, [r3, #16]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	69d9      	ldr	r1, [r3, #28]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a1a      	ldr	r2, [r3, #32]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0201 	orr.w	r2, r2, #1
 8006122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2220      	movs	r2, #32
 800612e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
	...

0800614c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b088      	sub	sp, #32
 8006150:	af02      	add	r7, sp, #8
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	4608      	mov	r0, r1
 8006156:	4611      	mov	r1, r2
 8006158:	461a      	mov	r2, r3
 800615a:	4603      	mov	r3, r0
 800615c:	817b      	strh	r3, [r7, #10]
 800615e:	460b      	mov	r3, r1
 8006160:	813b      	strh	r3, [r7, #8]
 8006162:	4613      	mov	r3, r2
 8006164:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b20      	cmp	r3, #32
 8006170:	f040 80fd 	bne.w	800636e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d002      	beq.n	8006180 <HAL_I2C_Mem_Read+0x34>
 800617a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800617c:	2b00      	cmp	r3, #0
 800617e:	d105      	bne.n	800618c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006186:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e0f1      	b.n	8006370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006192:	2b01      	cmp	r3, #1
 8006194:	d101      	bne.n	800619a <HAL_I2C_Mem_Read+0x4e>
 8006196:	2302      	movs	r3, #2
 8006198:	e0ea      	b.n	8006370 <HAL_I2C_Mem_Read+0x224>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80061a2:	f7fe f83d 	bl	8004220 <HAL_GetTick>
 80061a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	2319      	movs	r3, #25
 80061ae:	2201      	movs	r2, #1
 80061b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 f95b 	bl	8006470 <I2C_WaitOnFlagUntilTimeout>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e0d5      	b.n	8006370 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2222      	movs	r2, #34	@ 0x22
 80061c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2240      	movs	r2, #64	@ 0x40
 80061d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a3a      	ldr	r2, [r7, #32]
 80061de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80061e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80061ec:	88f8      	ldrh	r0, [r7, #6]
 80061ee:	893a      	ldrh	r2, [r7, #8]
 80061f0:	8979      	ldrh	r1, [r7, #10]
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	9301      	str	r3, [sp, #4]
 80061f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	4603      	mov	r3, r0
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 f8bf 	bl	8006380 <I2C_RequestMemoryRead>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d005      	beq.n	8006214 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e0ad      	b.n	8006370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006218:	b29b      	uxth	r3, r3
 800621a:	2bff      	cmp	r3, #255	@ 0xff
 800621c:	d90e      	bls.n	800623c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	22ff      	movs	r2, #255	@ 0xff
 8006222:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006228:	b2da      	uxtb	r2, r3
 800622a:	8979      	ldrh	r1, [r7, #10]
 800622c:	4b52      	ldr	r3, [pc, #328]	@ (8006378 <HAL_I2C_Mem_Read+0x22c>)
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 fadf 	bl	80067f8 <I2C_TransferConfig>
 800623a:	e00f      	b.n	800625c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006240:	b29a      	uxth	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800624a:	b2da      	uxtb	r2, r3
 800624c:	8979      	ldrh	r1, [r7, #10]
 800624e:	4b4a      	ldr	r3, [pc, #296]	@ (8006378 <HAL_I2C_Mem_Read+0x22c>)
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 face 	bl	80067f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006262:	2200      	movs	r2, #0
 8006264:	2104      	movs	r1, #4
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 f902 	bl	8006470 <I2C_WaitOnFlagUntilTimeout>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e07c      	b.n	8006370 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006280:	b2d2      	uxtb	r2, r2
 8006282:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006288:	1c5a      	adds	r2, r3, #1
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006292:	3b01      	subs	r3, #1
 8006294:	b29a      	uxth	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800629e:	b29b      	uxth	r3, r3
 80062a0:	3b01      	subs	r3, #1
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d034      	beq.n	800631c <HAL_I2C_Mem_Read+0x1d0>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d130      	bne.n	800631c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c0:	2200      	movs	r2, #0
 80062c2:	2180      	movs	r1, #128	@ 0x80
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 f8d3 	bl	8006470 <I2C_WaitOnFlagUntilTimeout>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e04d      	b.n	8006370 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2bff      	cmp	r3, #255	@ 0xff
 80062dc:	d90e      	bls.n	80062fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	22ff      	movs	r2, #255	@ 0xff
 80062e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	8979      	ldrh	r1, [r7, #10]
 80062ec:	2300      	movs	r3, #0
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 fa7f 	bl	80067f8 <I2C_TransferConfig>
 80062fa:	e00f      	b.n	800631c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800630a:	b2da      	uxtb	r2, r3
 800630c:	8979      	ldrh	r1, [r7, #10]
 800630e:	2300      	movs	r3, #0
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 fa6e 	bl	80067f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006320:	b29b      	uxth	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d19a      	bne.n	800625c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 f940 	bl	80065b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e01a      	b.n	8006370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2220      	movs	r2, #32
 8006340:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6859      	ldr	r1, [r3, #4]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	4b0b      	ldr	r3, [pc, #44]	@ (800637c <HAL_I2C_Mem_Read+0x230>)
 800634e:	400b      	ands	r3, r1
 8006350:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2220      	movs	r2, #32
 8006356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	e000      	b.n	8006370 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800636e:	2302      	movs	r3, #2
  }
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	80002400 	.word	0x80002400
 800637c:	fe00e800 	.word	0xfe00e800

08006380 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af02      	add	r7, sp, #8
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	4608      	mov	r0, r1
 800638a:	4611      	mov	r1, r2
 800638c:	461a      	mov	r2, r3
 800638e:	4603      	mov	r3, r0
 8006390:	817b      	strh	r3, [r7, #10]
 8006392:	460b      	mov	r3, r1
 8006394:	813b      	strh	r3, [r7, #8]
 8006396:	4613      	mov	r3, r2
 8006398:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	b2da      	uxtb	r2, r3
 800639e:	8979      	ldrh	r1, [r7, #10]
 80063a0:	4b20      	ldr	r3, [pc, #128]	@ (8006424 <I2C_RequestMemoryRead+0xa4>)
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	2300      	movs	r3, #0
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 fa26 	bl	80067f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ac:	69fa      	ldr	r2, [r7, #28]
 80063ae:	69b9      	ldr	r1, [r7, #24]
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 f8b6 	bl	8006522 <I2C_WaitOnTXISFlagUntilTimeout>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e02c      	b.n	800641a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063c0:	88fb      	ldrh	r3, [r7, #6]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d105      	bne.n	80063d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063c6:	893b      	ldrh	r3, [r7, #8]
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80063d0:	e015      	b.n	80063fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80063d2:	893b      	ldrh	r3, [r7, #8]
 80063d4:	0a1b      	lsrs	r3, r3, #8
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063e0:	69fa      	ldr	r2, [r7, #28]
 80063e2:	69b9      	ldr	r1, [r7, #24]
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 f89c 	bl	8006522 <I2C_WaitOnTXISFlagUntilTimeout>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e012      	b.n	800641a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063f4:	893b      	ldrh	r3, [r7, #8]
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	2200      	movs	r2, #0
 8006406:	2140      	movs	r1, #64	@ 0x40
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 f831 	bl	8006470 <I2C_WaitOnFlagUntilTimeout>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e000      	b.n	800641a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	80002000 	.word	0x80002000

08006428 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b02      	cmp	r3, #2
 800643c:	d103      	bne.n	8006446 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2200      	movs	r2, #0
 8006444:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b01      	cmp	r3, #1
 8006452:	d007      	beq.n	8006464 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699a      	ldr	r2, [r3, #24]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 0201 	orr.w	r2, r2, #1
 8006462:	619a      	str	r2, [r3, #24]
  }
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	4613      	mov	r3, r2
 800647e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006480:	e03b      	b.n	80064fa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 f8d6 	bl	8006638 <I2C_IsErrorOccurred>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e041      	b.n	800651a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800649c:	d02d      	beq.n	80064fa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800649e:	f7fd febf 	bl	8004220 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d302      	bcc.n	80064b4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d122      	bne.n	80064fa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699a      	ldr	r2, [r3, #24]
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	4013      	ands	r3, r2
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	bf0c      	ite	eq
 80064c4:	2301      	moveq	r3, #1
 80064c6:	2300      	movne	r3, #0
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	461a      	mov	r2, r3
 80064cc:	79fb      	ldrb	r3, [r7, #7]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d113      	bne.n	80064fa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064d6:	f043 0220 	orr.w	r2, r3, #32
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e00f      	b.n	800651a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	699a      	ldr	r2, [r3, #24]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	4013      	ands	r3, r2
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	429a      	cmp	r2, r3
 8006508:	bf0c      	ite	eq
 800650a:	2301      	moveq	r3, #1
 800650c:	2300      	movne	r3, #0
 800650e:	b2db      	uxtb	r3, r3
 8006510:	461a      	mov	r2, r3
 8006512:	79fb      	ldrb	r3, [r7, #7]
 8006514:	429a      	cmp	r2, r3
 8006516:	d0b4      	beq.n	8006482 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	60f8      	str	r0, [r7, #12]
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800652e:	e033      	b.n	8006598 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	68b9      	ldr	r1, [r7, #8]
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 f87f 	bl	8006638 <I2C_IsErrorOccurred>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e031      	b.n	80065a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800654a:	d025      	beq.n	8006598 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800654c:	f7fd fe68 	bl	8004220 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	429a      	cmp	r2, r3
 800655a:	d302      	bcc.n	8006562 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d11a      	bne.n	8006598 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b02      	cmp	r3, #2
 800656e:	d013      	beq.n	8006598 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006574:	f043 0220 	orr.w	r2, r3, #32
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2220      	movs	r2, #32
 8006580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e007      	b.n	80065a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d1c4      	bne.n	8006530 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065bc:	e02f      	b.n	800661e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	68b9      	ldr	r1, [r7, #8]
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 f838 	bl	8006638 <I2C_IsErrorOccurred>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e02d      	b.n	800662e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d2:	f7fd fe25 	bl	8004220 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d302      	bcc.n	80065e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d11a      	bne.n	800661e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b20      	cmp	r3, #32
 80065f4:	d013      	beq.n	800661e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065fa:	f043 0220 	orr.w	r2, r3, #32
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2220      	movs	r2, #32
 8006606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e007      	b.n	800662e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	f003 0320 	and.w	r3, r3, #32
 8006628:	2b20      	cmp	r3, #32
 800662a:	d1c8      	bne.n	80065be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b08a      	sub	sp, #40	@ 0x28
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006644:	2300      	movs	r3, #0
 8006646:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	f003 0310 	and.w	r3, r3, #16
 8006660:	2b00      	cmp	r3, #0
 8006662:	d068      	beq.n	8006736 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2210      	movs	r2, #16
 800666a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800666c:	e049      	b.n	8006702 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006674:	d045      	beq.n	8006702 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006676:	f7fd fdd3 	bl	8004220 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	429a      	cmp	r2, r3
 8006684:	d302      	bcc.n	800668c <I2C_IsErrorOccurred+0x54>
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d13a      	bne.n	8006702 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006696:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800669e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066ae:	d121      	bne.n	80066f4 <I2C_IsErrorOccurred+0xbc>
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066b6:	d01d      	beq.n	80066f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80066b8:	7cfb      	ldrb	r3, [r7, #19]
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	d01a      	beq.n	80066f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80066ce:	f7fd fda7 	bl	8004220 <HAL_GetTick>
 80066d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066d4:	e00e      	b.n	80066f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80066d6:	f7fd fda3 	bl	8004220 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b19      	cmp	r3, #25
 80066e2:	d907      	bls.n	80066f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	f043 0320 	orr.w	r3, r3, #32
 80066ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80066f2:	e006      	b.n	8006702 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d1e9      	bne.n	80066d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	f003 0320 	and.w	r3, r3, #32
 800670c:	2b20      	cmp	r3, #32
 800670e:	d003      	beq.n	8006718 <I2C_IsErrorOccurred+0xe0>
 8006710:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006714:	2b00      	cmp	r3, #0
 8006716:	d0aa      	beq.n	800666e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006718:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800671c:	2b00      	cmp	r3, #0
 800671e:	d103      	bne.n	8006728 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2220      	movs	r2, #32
 8006726:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	f043 0304 	orr.w	r3, r3, #4
 800672e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00b      	beq.n	8006760 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	f043 0301 	orr.w	r3, r3, #1
 800674e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006758:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00b      	beq.n	8006782 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	f043 0308 	orr.w	r3, r3, #8
 8006770:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800677a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	f043 0302 	orr.w	r3, r3, #2
 8006792:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800679c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80067a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d01c      	beq.n	80067e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7ff fe3b 	bl	8006428 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6859      	ldr	r1, [r3, #4]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	4b0d      	ldr	r3, [pc, #52]	@ (80067f4 <I2C_IsErrorOccurred+0x1bc>)
 80067be:	400b      	ands	r3, r1
 80067c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	431a      	orrs	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80067e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3728      	adds	r7, #40	@ 0x28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	fe00e800 	.word	0xfe00e800

080067f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	607b      	str	r3, [r7, #4]
 8006802:	460b      	mov	r3, r1
 8006804:	817b      	strh	r3, [r7, #10]
 8006806:	4613      	mov	r3, r2
 8006808:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800680a:	897b      	ldrh	r3, [r7, #10]
 800680c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006810:	7a7b      	ldrb	r3, [r7, #9]
 8006812:	041b      	lsls	r3, r3, #16
 8006814:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006818:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	4313      	orrs	r3, r2
 8006822:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006826:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	0d5b      	lsrs	r3, r3, #21
 8006832:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006836:	4b08      	ldr	r3, [pc, #32]	@ (8006858 <I2C_TransferConfig+0x60>)
 8006838:	430b      	orrs	r3, r1
 800683a:	43db      	mvns	r3, r3
 800683c:	ea02 0103 	and.w	r1, r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	430a      	orrs	r2, r1
 8006848:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800684a:	bf00      	nop
 800684c:	371c      	adds	r7, #28
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	03ff63ff 	.word	0x03ff63ff

0800685c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b20      	cmp	r3, #32
 8006870:	d138      	bne.n	80068e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800687c:	2302      	movs	r3, #2
 800687e:	e032      	b.n	80068e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2224      	movs	r2, #36	@ 0x24
 800688c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0201 	bic.w	r2, r2, #1
 800689e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80068ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6819      	ldr	r1, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f042 0201 	orr.w	r2, r2, #1
 80068ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	e000      	b.n	80068e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80068e4:	2302      	movs	r3, #2
  }
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b085      	sub	sp, #20
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b20      	cmp	r3, #32
 8006906:	d139      	bne.n	800697c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800690e:	2b01      	cmp	r3, #1
 8006910:	d101      	bne.n	8006916 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006912:	2302      	movs	r3, #2
 8006914:	e033      	b.n	800697e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2224      	movs	r2, #36	@ 0x24
 8006922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0201 	bic.w	r2, r2, #1
 8006934:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006944:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	021b      	lsls	r3, r3, #8
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	4313      	orrs	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0201 	orr.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2220      	movs	r2, #32
 800696c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	e000      	b.n	800697e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800697c:	2302      	movs	r3, #2
  }
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b084      	sub	sp, #16
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e0c0      	b.n	8006b1e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d106      	bne.n	80069b6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f00a fda9 	bl	8011508 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2203      	movs	r2, #3
 80069ba:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f006 ffcf 	bl	800d966 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069c8:	2300      	movs	r3, #0
 80069ca:	73fb      	strb	r3, [r7, #15]
 80069cc:	e03e      	b.n	8006a4c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80069ce:	7bfa      	ldrb	r2, [r7, #15]
 80069d0:	6879      	ldr	r1, [r7, #4]
 80069d2:	4613      	mov	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	440b      	add	r3, r1
 80069dc:	3311      	adds	r3, #17
 80069de:	2201      	movs	r2, #1
 80069e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80069e2:	7bfa      	ldrb	r2, [r7, #15]
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	4613      	mov	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	440b      	add	r3, r1
 80069f0:	3310      	adds	r3, #16
 80069f2:	7bfa      	ldrb	r2, [r7, #15]
 80069f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80069f6:	7bfa      	ldrb	r2, [r7, #15]
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	440b      	add	r3, r1
 8006a04:	3313      	adds	r3, #19
 8006a06:	2200      	movs	r2, #0
 8006a08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006a0a:	7bfa      	ldrb	r2, [r7, #15]
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	00db      	lsls	r3, r3, #3
 8006a16:	440b      	add	r3, r1
 8006a18:	3320      	adds	r3, #32
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006a1e:	7bfa      	ldrb	r2, [r7, #15]
 8006a20:	6879      	ldr	r1, [r7, #4]
 8006a22:	4613      	mov	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	00db      	lsls	r3, r3, #3
 8006a2a:	440b      	add	r3, r1
 8006a2c:	3324      	adds	r3, #36	@ 0x24
 8006a2e:	2200      	movs	r2, #0
 8006a30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
 8006a34:	6879      	ldr	r1, [r7, #4]
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	4613      	mov	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	00db      	lsls	r3, r3, #3
 8006a40:	440b      	add	r3, r1
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a46:	7bfb      	ldrb	r3, [r7, #15]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	73fb      	strb	r3, [r7, #15]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	791b      	ldrb	r3, [r3, #4]
 8006a50:	7bfa      	ldrb	r2, [r7, #15]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d3bb      	bcc.n	80069ce <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a56:	2300      	movs	r3, #0
 8006a58:	73fb      	strb	r3, [r7, #15]
 8006a5a:	e044      	b.n	8006ae6 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006a5c:	7bfa      	ldrb	r2, [r7, #15]
 8006a5e:	6879      	ldr	r1, [r7, #4]
 8006a60:	4613      	mov	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	440b      	add	r3, r1
 8006a6a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006a6e:	2200      	movs	r2, #0
 8006a70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006a72:	7bfa      	ldrb	r2, [r7, #15]
 8006a74:	6879      	ldr	r1, [r7, #4]
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	00db      	lsls	r3, r3, #3
 8006a7e:	440b      	add	r3, r1
 8006a80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a84:	7bfa      	ldrb	r2, [r7, #15]
 8006a86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006a88:	7bfa      	ldrb	r2, [r7, #15]
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	440b      	add	r3, r1
 8006a96:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006a9e:	7bfa      	ldrb	r2, [r7, #15]
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	440b      	add	r3, r1
 8006aac:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006ab4:	7bfa      	ldrb	r2, [r7, #15]
 8006ab6:	6879      	ldr	r1, [r7, #4]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	440b      	add	r3, r1
 8006ac2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006aca:	7bfa      	ldrb	r2, [r7, #15]
 8006acc:	6879      	ldr	r1, [r7, #4]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	00db      	lsls	r3, r3, #3
 8006ad6:	440b      	add	r3, r1
 8006ad8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006adc:	2200      	movs	r2, #0
 8006ade:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	73fb      	strb	r3, [r7, #15]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	791b      	ldrb	r3, [r3, #4]
 8006aea:	7bfa      	ldrb	r2, [r7, #15]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d3b5      	bcc.n	8006a5c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6818      	ldr	r0, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	3304      	adds	r3, #4
 8006af8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006afc:	f006 ff4e 	bl	800d99c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	7a9b      	ldrb	r3, [r3, #10]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d102      	bne.n	8006b1c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f001 fcaa 	bl	8008470 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b082      	sub	sp, #8
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d101      	bne.n	8006b3c <HAL_PCD_Start+0x16>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e012      	b.n	8006b62 <HAL_PCD_Start+0x3c>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f006 fef5 	bl	800d938 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f008 fae5 	bl	800f122 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b082      	sub	sp, #8
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d101      	bne.n	8006b80 <HAL_PCD_Stop+0x16>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	e012      	b.n	8006ba6 <HAL_PCD_Stop+0x3c>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f006 feea 	bl	800d966 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f008 fada 	bl	800f150 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f008 fadd 	bl	800f17a <USB_ReadInterrupts>
 8006bc0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 faa6 	bl	800711e <PCD_EP_ISR_Handler>

    return;
 8006bd2:	e110      	b.n	8006df6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d013      	beq.n	8006c06 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bf0:	b292      	uxth	r2, r2
 8006bf2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f00a fd17 	bl	801162a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f8fc 	bl	8006dfc <HAL_PCD_SetAddress>

    return;
 8006c04:	e0f7      	b.n	8006df6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00c      	beq.n	8006c2a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006c22:	b292      	uxth	r2, r2
 8006c24:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006c28:	e0e5      	b.n	8006df6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00c      	beq.n	8006c4e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c46:	b292      	uxth	r2, r2
 8006c48:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006c4c:	e0d3      	b.n	8006df6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d034      	beq.n	8006cc2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 0204 	bic.w	r2, r2, #4
 8006c6a:	b292      	uxth	r2, r2
 8006c6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0208 	bic.w	r2, r2, #8
 8006c82:	b292      	uxth	r2, r2
 8006c84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d107      	bne.n	8006ca2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f00a fef1 	bl	8011a84 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f00a fcfa 	bl	801169c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006cba:	b292      	uxth	r2, r2
 8006cbc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006cc0:	e099      	b.n	8006df6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d027      	beq.n	8006d1c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0208 	orr.w	r2, r2, #8
 8006cde:	b292      	uxth	r2, r2
 8006ce0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cf6:	b292      	uxth	r2, r2
 8006cf8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f042 0204 	orr.w	r2, r2, #4
 8006d0e:	b292      	uxth	r2, r2
 8006d10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f00a fca7 	bl	8011668 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006d1a:	e06c      	b.n	8006df6 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d040      	beq.n	8006da8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d38:	b292      	uxth	r2, r2
 8006d3a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d12b      	bne.n	8006da0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0204 	orr.w	r2, r2, #4
 8006d5a:	b292      	uxth	r2, r2
 8006d5c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0208 	orr.w	r2, r2, #8
 8006d72:	b292      	uxth	r2, r2
 8006d74:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	089b      	lsrs	r3, r3, #2
 8006d8c:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006d96:	2101      	movs	r1, #1
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f00a fe73 	bl	8011a84 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006d9e:	e02a      	b.n	8006df6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f00a fc61 	bl	8011668 <HAL_PCD_SuspendCallback>
    return;
 8006da6:	e026      	b.n	8006df6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00f      	beq.n	8006dd2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006dc4:	b292      	uxth	r2, r2
 8006dc6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f00a fc1f 	bl	801160e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006dd0:	e011      	b.n	8006df6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00c      	beq.n	8006df6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006dee:	b292      	uxth	r2, r2
 8006df0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006df4:	bf00      	nop
  }
}
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d101      	bne.n	8006e16 <HAL_PCD_SetAddress+0x1a>
 8006e12:	2302      	movs	r3, #2
 8006e14:	e012      	b.n	8006e3c <HAL_PCD_SetAddress+0x40>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	78fa      	ldrb	r2, [r7, #3]
 8006e22:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	78fa      	ldrb	r2, [r7, #3]
 8006e2a:	4611      	mov	r1, r2
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f008 f964 	bl	800f0fa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	4608      	mov	r0, r1
 8006e4e:	4611      	mov	r1, r2
 8006e50:	461a      	mov	r2, r3
 8006e52:	4603      	mov	r3, r0
 8006e54:	70fb      	strb	r3, [r7, #3]
 8006e56:	460b      	mov	r3, r1
 8006e58:	803b      	strh	r3, [r7, #0]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	da0e      	bge.n	8006e88 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e6a:	78fb      	ldrb	r3, [r7, #3]
 8006e6c:	f003 0207 	and.w	r2, r3, #7
 8006e70:	4613      	mov	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	00db      	lsls	r3, r3, #3
 8006e78:	3310      	adds	r3, #16
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2201      	movs	r2, #1
 8006e84:	705a      	strb	r2, [r3, #1]
 8006e86:	e00e      	b.n	8006ea6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e88:	78fb      	ldrb	r3, [r7, #3]
 8006e8a:	f003 0207 	and.w	r2, r3, #7
 8006e8e:	4613      	mov	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	00db      	lsls	r3, r3, #3
 8006e96:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006ea6:	78fb      	ldrb	r3, [r7, #3]
 8006ea8:	f003 0307 	and.w	r3, r3, #7
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006eb2:	883b      	ldrh	r3, [r7, #0]
 8006eb4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	78ba      	ldrb	r2, [r7, #2]
 8006ec0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006ec2:	78bb      	ldrb	r3, [r7, #2]
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d102      	bne.n	8006ece <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d101      	bne.n	8006edc <HAL_PCD_EP_Open+0x98>
 8006ed8:	2302      	movs	r3, #2
 8006eda:	e00e      	b.n	8006efa <HAL_PCD_EP_Open+0xb6>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68f9      	ldr	r1, [r7, #12]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f006 fd74 	bl	800d9d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8006ef8:	7afb      	ldrb	r3, [r7, #11]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b086      	sub	sp, #24
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	603b      	str	r3, [r7, #0]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f12:	7afb      	ldrb	r3, [r7, #11]
 8006f14:	f003 0207 	and.w	r2, r3, #7
 8006f18:	4613      	mov	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	00db      	lsls	r3, r3, #3
 8006f20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	4413      	add	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f42:	7afb      	ldrb	r3, [r7, #11]
 8006f44:	f003 0307 	and.w	r3, r3, #7
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6979      	ldr	r1, [r7, #20]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f007 fa27 	bl	800e3a8 <USB_EPStartXfer>

  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3718      	adds	r7, #24
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	607a      	str	r2, [r7, #4]
 8006f6e:	603b      	str	r3, [r7, #0]
 8006f70:	460b      	mov	r3, r1
 8006f72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f74:	7afb      	ldrb	r3, [r7, #11]
 8006f76:	f003 0207 	and.w	r2, r3, #7
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	00db      	lsls	r3, r3, #3
 8006f82:	3310      	adds	r3, #16
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	4413      	add	r3, r2
 8006f88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	683a      	ldr	r2, [r7, #0]
 8006f94:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2201      	movs	r2, #1
 8006fae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006fb0:	7afb      	ldrb	r3, [r7, #11]
 8006fb2:	f003 0307 	and.w	r3, r3, #7
 8006fb6:	b2da      	uxtb	r2, r3
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6979      	ldr	r1, [r7, #20]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f007 f9f0 	bl	800e3a8 <USB_EPStartXfer>

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b084      	sub	sp, #16
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006fde:	78fb      	ldrb	r3, [r7, #3]
 8006fe0:	f003 0307 	and.w	r3, r3, #7
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	7912      	ldrb	r2, [r2, #4]
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d901      	bls.n	8006ff0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e03e      	b.n	800706e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	da0e      	bge.n	8007016 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ff8:	78fb      	ldrb	r3, [r7, #3]
 8006ffa:	f003 0207 	and.w	r2, r3, #7
 8006ffe:	4613      	mov	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	3310      	adds	r3, #16
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	4413      	add	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2201      	movs	r2, #1
 8007012:	705a      	strb	r2, [r3, #1]
 8007014:	e00c      	b.n	8007030 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007016:	78fa      	ldrb	r2, [r7, #3]
 8007018:	4613      	mov	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	4413      	add	r3, r2
 8007028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2201      	movs	r2, #1
 8007034:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007036:	78fb      	ldrb	r3, [r7, #3]
 8007038:	f003 0307 	and.w	r3, r3, #7
 800703c:	b2da      	uxtb	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007048:	2b01      	cmp	r3, #1
 800704a:	d101      	bne.n	8007050 <HAL_PCD_EP_SetStall+0x7e>
 800704c:	2302      	movs	r3, #2
 800704e:	e00e      	b.n	800706e <HAL_PCD_EP_SetStall+0x9c>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68f9      	ldr	r1, [r7, #12]
 800705e:	4618      	mov	r0, r3
 8007060:	f007 ff51 	bl	800ef06 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b084      	sub	sp, #16
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	460b      	mov	r3, r1
 8007080:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007082:	78fb      	ldrb	r3, [r7, #3]
 8007084:	f003 030f 	and.w	r3, r3, #15
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	7912      	ldrb	r2, [r2, #4]
 800708c:	4293      	cmp	r3, r2
 800708e:	d901      	bls.n	8007094 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e040      	b.n	8007116 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007098:	2b00      	cmp	r3, #0
 800709a:	da0e      	bge.n	80070ba <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800709c:	78fb      	ldrb	r3, [r7, #3]
 800709e:	f003 0207 	and.w	r2, r3, #7
 80070a2:	4613      	mov	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	00db      	lsls	r3, r3, #3
 80070aa:	3310      	adds	r3, #16
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	4413      	add	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2201      	movs	r2, #1
 80070b6:	705a      	strb	r2, [r3, #1]
 80070b8:	e00e      	b.n	80070d8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070ba:	78fb      	ldrb	r3, [r7, #3]
 80070bc:	f003 0207 	and.w	r2, r3, #7
 80070c0:	4613      	mov	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	4413      	add	r3, r2
 80070d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80070de:	78fb      	ldrb	r3, [r7, #3]
 80070e0:	f003 0307 	and.w	r3, r3, #7
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d101      	bne.n	80070f8 <HAL_PCD_EP_ClrStall+0x82>
 80070f4:	2302      	movs	r3, #2
 80070f6:	e00e      	b.n	8007116 <HAL_PCD_EP_ClrStall+0xa0>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68f9      	ldr	r1, [r7, #12]
 8007106:	4618      	mov	r0, r3
 8007108:	f007 ff4e 	bl	800efa8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b092      	sub	sp, #72	@ 0x48
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007126:	e333      	b.n	8007790 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007130:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007132:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007134:	b2db      	uxtb	r3, r3
 8007136:	f003 030f 	and.w	r3, r3, #15
 800713a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800713e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007142:	2b00      	cmp	r3, #0
 8007144:	f040 8108 	bne.w	8007358 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007148:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800714a:	f003 0310 	and.w	r3, r3, #16
 800714e:	2b00      	cmp	r3, #0
 8007150:	d14c      	bne.n	80071ec <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	b29b      	uxth	r3, r3
 800715a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800715e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007162:	813b      	strh	r3, [r7, #8]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	893b      	ldrh	r3, [r7, #8]
 800716a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800716e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007172:	b29b      	uxth	r3, r3
 8007174:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	3310      	adds	r3, #16
 800717a:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007184:	b29b      	uxth	r3, r3
 8007186:	461a      	mov	r2, r3
 8007188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	00db      	lsls	r3, r3, #3
 800718e:	4413      	add	r3, r2
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	6812      	ldr	r2, [r2, #0]
 8007194:	4413      	add	r3, r2
 8007196:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80071a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80071a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071a6:	695a      	ldr	r2, [r3, #20]
 80071a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	441a      	add	r2, r3
 80071ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071b0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80071b2:	2100      	movs	r1, #0
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f00a fa10 	bl	80115da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	7b1b      	ldrb	r3, [r3, #12]
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 82e5 	beq.w	8007790 <PCD_EP_ISR_Handler+0x672>
 80071c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f040 82e0 	bne.w	8007790 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	7b1b      	ldrb	r3, [r3, #12]
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	731a      	strb	r2, [r3, #12]
 80071ea:	e2d1      	b.n	8007790 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80071f2:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80071fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80071fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007202:	2b00      	cmp	r3, #0
 8007204:	d032      	beq.n	800726c <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800720e:	b29b      	uxth	r3, r3
 8007210:	461a      	mov	r2, r3
 8007212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	00db      	lsls	r3, r3, #3
 8007218:	4413      	add	r3, r2
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	6812      	ldr	r2, [r2, #0]
 800721e:	4413      	add	r3, r2
 8007220:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007224:	881b      	ldrh	r3, [r3, #0]
 8007226:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800722a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800722c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007238:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800723a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800723c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800723e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007240:	b29b      	uxth	r3, r3
 8007242:	f007 ffec 	bl	800f21e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	b29a      	uxth	r2, r3
 800724e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007252:	4013      	ands	r3, r2
 8007254:	817b      	strh	r3, [r7, #10]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	897a      	ldrh	r2, [r7, #10]
 800725c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007260:	b292      	uxth	r2, r2
 8007262:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f00a f98b 	bl	8011580 <HAL_PCD_SetupStageCallback>
 800726a:	e291      	b.n	8007790 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800726c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8007270:	2b00      	cmp	r3, #0
 8007272:	f280 828d 	bge.w	8007790 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	881b      	ldrh	r3, [r3, #0]
 800727c:	b29a      	uxth	r2, r3
 800727e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007282:	4013      	ands	r3, r2
 8007284:	81fb      	strh	r3, [r7, #14]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	89fa      	ldrh	r2, [r7, #14]
 800728c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007290:	b292      	uxth	r2, r2
 8007292:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800729c:	b29b      	uxth	r3, r3
 800729e:	461a      	mov	r2, r3
 80072a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	00db      	lsls	r3, r3, #3
 80072a6:	4413      	add	r3, r2
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	6812      	ldr	r2, [r2, #0]
 80072ac:	4413      	add	r3, r2
 80072ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80072b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072ba:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80072bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072be:	69db      	ldr	r3, [r3, #28]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d019      	beq.n	80072f8 <PCD_EP_ISR_Handler+0x1da>
 80072c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d015      	beq.n	80072f8 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6818      	ldr	r0, [r3, #0]
 80072d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072d2:	6959      	ldr	r1, [r3, #20]
 80072d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072d6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80072d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072da:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80072dc:	b29b      	uxth	r3, r3
 80072de:	f007 ff9e 	bl	800f21e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80072e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072e4:	695a      	ldr	r2, [r3, #20]
 80072e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	441a      	add	r2, r3
 80072ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072ee:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80072f0:	2100      	movs	r1, #0
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f00a f956 	bl	80115a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	881b      	ldrh	r3, [r3, #0]
 80072fe:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007300:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007302:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007306:	2b00      	cmp	r3, #0
 8007308:	f040 8242 	bne.w	8007790 <PCD_EP_ISR_Handler+0x672>
 800730c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800730e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007312:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007316:	f000 823b 	beq.w	8007790 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	881b      	ldrh	r3, [r3, #0]
 8007320:	b29b      	uxth	r3, r3
 8007322:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800732a:	81bb      	strh	r3, [r7, #12]
 800732c:	89bb      	ldrh	r3, [r7, #12]
 800732e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007332:	81bb      	strh	r3, [r7, #12]
 8007334:	89bb      	ldrh	r3, [r7, #12]
 8007336:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800733a:	81bb      	strh	r3, [r7, #12]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	89bb      	ldrh	r3, [r7, #12]
 8007342:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007346:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800734a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800734e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007352:	b29b      	uxth	r3, r3
 8007354:	8013      	strh	r3, [r2, #0]
 8007356:	e21b      	b.n	8007790 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800736a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800736e:	2b00      	cmp	r3, #0
 8007370:	f280 80f1 	bge.w	8007556 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	881b      	ldrh	r3, [r3, #0]
 8007384:	b29a      	uxth	r2, r3
 8007386:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800738a:	4013      	ands	r3, r2
 800738c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800739e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80073a2:	b292      	uxth	r2, r2
 80073a4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80073a6:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80073aa:	4613      	mov	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4413      	add	r3, r2
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	4413      	add	r3, r2
 80073ba:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80073bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073be:	7b1b      	ldrb	r3, [r3, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d123      	bne.n	800740c <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	461a      	mov	r2, r3
 80073d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	00db      	lsls	r3, r3, #3
 80073d6:	4413      	add	r3, r2
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	6812      	ldr	r2, [r2, #0]
 80073dc:	4413      	add	r3, r2
 80073de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073e8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80073ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 808b 	beq.w	800750c <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6818      	ldr	r0, [r3, #0]
 80073fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073fc:	6959      	ldr	r1, [r3, #20]
 80073fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007400:	88da      	ldrh	r2, [r3, #6]
 8007402:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007406:	f007 ff0a 	bl	800f21e <USB_ReadPMA>
 800740a:	e07f      	b.n	800750c <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800740c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800740e:	78db      	ldrb	r3, [r3, #3]
 8007410:	2b02      	cmp	r3, #2
 8007412:	d109      	bne.n	8007428 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007414:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007416:	461a      	mov	r2, r3
 8007418:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f9c6 	bl	80077ac <HAL_PCD_EP_DB_Receive>
 8007420:	4603      	mov	r3, r0
 8007422:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007426:	e071      	b.n	800750c <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	461a      	mov	r2, r3
 800742e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	b29b      	uxth	r3, r3
 800743a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800743e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007442:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	461a      	mov	r2, r3
 800744a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	441a      	add	r2, r3
 8007452:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007454:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007458:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800745c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007460:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007464:	b29b      	uxth	r3, r3
 8007466:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	461a      	mov	r2, r3
 800746e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	b29b      	uxth	r3, r3
 800747a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d022      	beq.n	80074c8 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800748a:	b29b      	uxth	r3, r3
 800748c:	461a      	mov	r2, r3
 800748e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	4413      	add	r3, r2
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	6812      	ldr	r2, [r2, #0]
 800749a:	4413      	add	r3, r2
 800749c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074a6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80074aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d02c      	beq.n	800750c <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6818      	ldr	r0, [r3, #0]
 80074b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074b8:	6959      	ldr	r1, [r3, #20]
 80074ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074bc:	891a      	ldrh	r2, [r3, #8]
 80074be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80074c2:	f007 feac 	bl	800f21e <USB_ReadPMA>
 80074c6:	e021      	b.n	800750c <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	461a      	mov	r2, r3
 80074d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	00db      	lsls	r3, r3, #3
 80074da:	4413      	add	r3, r2
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	6812      	ldr	r2, [r2, #0]
 80074e0:	4413      	add	r3, r2
 80074e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074ec:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80074f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d009      	beq.n	800750c <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6818      	ldr	r0, [r3, #0]
 80074fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074fe:	6959      	ldr	r1, [r3, #20]
 8007500:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007502:	895a      	ldrh	r2, [r3, #10]
 8007504:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007508:	f007 fe89 	bl	800f21e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800750c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800750e:	69da      	ldr	r2, [r3, #28]
 8007510:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007514:	441a      	add	r2, r3
 8007516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007518:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800751a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800751c:	695a      	ldr	r2, [r3, #20]
 800751e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007522:	441a      	add	r2, r3
 8007524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007526:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d005      	beq.n	800753c <PCD_EP_ISR_Handler+0x41e>
 8007530:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	429a      	cmp	r2, r3
 800753a:	d206      	bcs.n	800754a <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800753c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f00a f82e 	bl	80115a4 <HAL_PCD_DataOutStageCallback>
 8007548:	e005      	b.n	8007556 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007550:	4618      	mov	r0, r3
 8007552:	f006 ff29 	bl	800e3a8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007556:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 8117 	beq.w	8007790 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8007562:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007566:	4613      	mov	r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4413      	add	r3, r2
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	3310      	adds	r3, #16
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	4413      	add	r3, r2
 8007574:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	b29b      	uxth	r3, r3
 8007588:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800758c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007590:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	441a      	add	r2, r3
 80075a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80075a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80075ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075b0:	78db      	ldrb	r3, [r3, #3]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	f040 80a1 	bne.w	80076fa <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80075b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075ba:	2200      	movs	r2, #0
 80075bc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80075be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075c0:	7b1b      	ldrb	r3, [r3, #12]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 8092 	beq.w	80076ec <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80075c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80075ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d046      	beq.n	8007660 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80075d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075d4:	785b      	ldrb	r3, [r3, #1]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d126      	bne.n	8007628 <PCD_EP_ISR_Handler+0x50a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	461a      	mov	r2, r3
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	4413      	add	r3, r2
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	00da      	lsls	r2, r3, #3
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	4413      	add	r3, r2
 80075fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007600:	613b      	str	r3, [r7, #16]
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800760c:	b29a      	uxth	r2, r3
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	801a      	strh	r2, [r3, #0]
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	b29b      	uxth	r3, r3
 8007618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800761c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007620:	b29a      	uxth	r2, r3
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	801a      	strh	r2, [r3, #0]
 8007626:	e061      	b.n	80076ec <PCD_EP_ISR_Handler+0x5ce>
 8007628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800762a:	785b      	ldrb	r3, [r3, #1]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d15d      	bne.n	80076ec <PCD_EP_ISR_Handler+0x5ce>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	61fb      	str	r3, [r7, #28]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800763e:	b29b      	uxth	r3, r3
 8007640:	461a      	mov	r2, r3
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	4413      	add	r3, r2
 8007646:	61fb      	str	r3, [r7, #28]
 8007648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	00da      	lsls	r2, r3, #3
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	4413      	add	r3, r2
 8007652:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007656:	61bb      	str	r3, [r7, #24]
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	2200      	movs	r2, #0
 800765c:	801a      	strh	r2, [r3, #0]
 800765e:	e045      	b.n	80076ec <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007668:	785b      	ldrb	r3, [r3, #1]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d126      	bne.n	80076bc <PCD_EP_ISR_Handler+0x59e>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	627b      	str	r3, [r7, #36]	@ 0x24
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800767c:	b29b      	uxth	r3, r3
 800767e:	461a      	mov	r2, r3
 8007680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007682:	4413      	add	r3, r2
 8007684:	627b      	str	r3, [r7, #36]	@ 0x24
 8007686:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	00da      	lsls	r2, r3, #3
 800768c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768e:	4413      	add	r3, r2
 8007690:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007694:	623b      	str	r3, [r7, #32]
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	881b      	ldrh	r3, [r3, #0]
 800769a:	b29b      	uxth	r3, r3
 800769c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	801a      	strh	r2, [r3, #0]
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	801a      	strh	r2, [r3, #0]
 80076ba:	e017      	b.n	80076ec <PCD_EP_ISR_Handler+0x5ce>
 80076bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076be:	785b      	ldrb	r3, [r3, #1]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d113      	bne.n	80076ec <PCD_EP_ISR_Handler+0x5ce>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	461a      	mov	r2, r3
 80076d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d2:	4413      	add	r3, r2
 80076d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	00da      	lsls	r2, r3, #3
 80076dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076de:	4413      	add	r3, r2
 80076e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80076e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e8:	2200      	movs	r2, #0
 80076ea:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80076ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f009 ff71 	bl	80115da <HAL_PCD_DataInStageCallback>
 80076f8:	e04a      	b.n	8007790 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80076fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80076fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007700:	2b00      	cmp	r3, #0
 8007702:	d13f      	bne.n	8007784 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800770c:	b29b      	uxth	r3, r3
 800770e:	461a      	mov	r2, r3
 8007710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	00db      	lsls	r3, r3, #3
 8007716:	4413      	add	r3, r2
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	6812      	ldr	r2, [r2, #0]
 800771c:	4413      	add	r3, r2
 800771e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007728:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800772a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800772c:	699a      	ldr	r2, [r3, #24]
 800772e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007730:	429a      	cmp	r2, r3
 8007732:	d906      	bls.n	8007742 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8007734:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007736:	699a      	ldr	r2, [r3, #24]
 8007738:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800773a:	1ad2      	subs	r2, r2, r3
 800773c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800773e:	619a      	str	r2, [r3, #24]
 8007740:	e002      	b.n	8007748 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8007742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007744:	2200      	movs	r2, #0
 8007746:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d106      	bne.n	800775e <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f009 ff3f 	bl	80115da <HAL_PCD_DataInStageCallback>
 800775c:	e018      	b.n	8007790 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800775e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007760:	695a      	ldr	r2, [r3, #20]
 8007762:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007764:	441a      	add	r2, r3
 8007766:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007768:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800776a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800776c:	69da      	ldr	r2, [r3, #28]
 800776e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007770:	441a      	add	r2, r3
 8007772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007774:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800777c:	4618      	mov	r0, r3
 800777e:	f006 fe13 	bl	800e3a8 <USB_EPStartXfer>
 8007782:	e005      	b.n	8007790 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007784:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007786:	461a      	mov	r2, r3
 8007788:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f917 	bl	80079be <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007798:	b29b      	uxth	r3, r3
 800779a:	b21b      	sxth	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	f6ff acc3 	blt.w	8007128 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3748      	adds	r7, #72	@ 0x48
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b088      	sub	sp, #32
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	4613      	mov	r3, r2
 80077b8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80077ba:	88fb      	ldrh	r3, [r7, #6]
 80077bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d07c      	beq.n	80078be <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	461a      	mov	r2, r3
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	4413      	add	r3, r2
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	6812      	ldr	r2, [r2, #0]
 80077dc:	4413      	add	r3, r2
 80077de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077e8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	8b7b      	ldrh	r3, [r7, #26]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d306      	bcc.n	8007802 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	699a      	ldr	r2, [r3, #24]
 80077f8:	8b7b      	ldrh	r3, [r7, #26]
 80077fa:	1ad2      	subs	r2, r2, r3
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	619a      	str	r2, [r3, #24]
 8007800:	e002      	b.n	8007808 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2200      	movs	r2, #0
 8007806:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d123      	bne.n	8007858 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	461a      	mov	r2, r3
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4413      	add	r3, r2
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	b29b      	uxth	r3, r3
 8007822:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800782a:	833b      	strh	r3, [r7, #24]
 800782c:	8b3b      	ldrh	r3, [r7, #24]
 800782e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007832:	833b      	strh	r3, [r7, #24]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	441a      	add	r2, r3
 8007842:	8b3b      	ldrh	r3, [r7, #24]
 8007844:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007848:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800784c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007854:	b29b      	uxth	r3, r3
 8007856:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007858:	88fb      	ldrh	r3, [r7, #6]
 800785a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	d01f      	beq.n	80078a2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	b29b      	uxth	r3, r3
 8007874:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800787c:	82fb      	strh	r3, [r7, #22]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	461a      	mov	r2, r3
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	441a      	add	r2, r3
 800788c:	8afb      	ldrh	r3, [r7, #22]
 800788e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007892:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007896:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800789a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800789e:	b29b      	uxth	r3, r3
 80078a0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80078a2:	8b7b      	ldrh	r3, [r7, #26]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 8085 	beq.w	80079b4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6818      	ldr	r0, [r3, #0]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	6959      	ldr	r1, [r3, #20]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	891a      	ldrh	r2, [r3, #8]
 80078b6:	8b7b      	ldrh	r3, [r7, #26]
 80078b8:	f007 fcb1 	bl	800f21e <USB_ReadPMA>
 80078bc:	e07a      	b.n	80079b4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	461a      	mov	r2, r3
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	4413      	add	r3, r2
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	6812      	ldr	r2, [r2, #0]
 80078d6:	4413      	add	r3, r2
 80078d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078e2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	699a      	ldr	r2, [r3, #24]
 80078e8:	8b7b      	ldrh	r3, [r7, #26]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d306      	bcc.n	80078fc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	699a      	ldr	r2, [r3, #24]
 80078f2:	8b7b      	ldrh	r3, [r7, #26]
 80078f4:	1ad2      	subs	r2, r2, r3
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	619a      	str	r2, [r3, #24]
 80078fa:	e002      	b.n	8007902 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2200      	movs	r2, #0
 8007900:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d123      	bne.n	8007952 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	b29b      	uxth	r3, r3
 800791c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007924:	83fb      	strh	r3, [r7, #30]
 8007926:	8bfb      	ldrh	r3, [r7, #30]
 8007928:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800792c:	83fb      	strh	r3, [r7, #30]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	441a      	add	r2, r3
 800793c:	8bfb      	ldrh	r3, [r7, #30]
 800793e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007942:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007946:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800794a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800794e:	b29b      	uxth	r3, r3
 8007950:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007952:	88fb      	ldrh	r3, [r7, #6]
 8007954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007958:	2b00      	cmp	r3, #0
 800795a:	d11f      	bne.n	800799c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	4413      	add	r3, r2
 800796a:	881b      	ldrh	r3, [r3, #0]
 800796c:	b29b      	uxth	r3, r3
 800796e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007976:	83bb      	strh	r3, [r7, #28]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	461a      	mov	r2, r3
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	441a      	add	r2, r3
 8007986:	8bbb      	ldrh	r3, [r7, #28]
 8007988:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800798c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007990:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007994:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007998:	b29b      	uxth	r3, r3
 800799a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800799c:	8b7b      	ldrh	r3, [r7, #26]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d008      	beq.n	80079b4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6818      	ldr	r0, [r3, #0]
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	6959      	ldr	r1, [r3, #20]
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	895a      	ldrh	r2, [r3, #10]
 80079ae:	8b7b      	ldrh	r3, [r7, #26]
 80079b0:	f007 fc35 	bl	800f21e <USB_ReadPMA>
    }
  }

  return count;
 80079b4:	8b7b      	ldrh	r3, [r7, #26]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3720      	adds	r7, #32
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b0a6      	sub	sp, #152	@ 0x98
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	60f8      	str	r0, [r7, #12]
 80079c6:	60b9      	str	r1, [r7, #8]
 80079c8:	4613      	mov	r3, r2
 80079ca:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80079cc:	88fb      	ldrh	r3, [r7, #6]
 80079ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 81f7 	beq.w	8007dc6 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	461a      	mov	r2, r3
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	00db      	lsls	r3, r3, #3
 80079ea:	4413      	add	r3, r2
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	6812      	ldr	r2, [r2, #0]
 80079f0:	4413      	add	r3, r2
 80079f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079fc:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	699a      	ldr	r2, [r3, #24]
 8007a04:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d907      	bls.n	8007a1c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	699a      	ldr	r2, [r3, #24]
 8007a10:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a14:	1ad2      	subs	r2, r2, r3
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	619a      	str	r2, [r3, #24]
 8007a1a:	e002      	b.n	8007a22 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f040 80e1 	bne.w	8007bee <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	785b      	ldrb	r3, [r3, #1]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d126      	bne.n	8007a82 <HAL_PCD_EP_DB_Transmit+0xc4>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	461a      	mov	r2, r3
 8007a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a48:	4413      	add	r3, r2
 8007a4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	00da      	lsls	r2, r3, #3
 8007a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a54:	4413      	add	r3, r2
 8007a56:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a5e:	881b      	ldrh	r3, [r3, #0]
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6a:	801a      	strh	r2, [r3, #0]
 8007a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a7e:	801a      	strh	r2, [r3, #0]
 8007a80:	e01a      	b.n	8007ab8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	785b      	ldrb	r3, [r3, #1]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d116      	bne.n	8007ab8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a9e:	4413      	add	r3, r2
 8007aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	00da      	lsls	r2, r3, #3
 8007aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aaa:	4413      	add	r3, r2
 8007aac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ab0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	785b      	ldrb	r3, [r3, #1]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d126      	bne.n	8007b14 <HAL_PCD_EP_DB_Transmit+0x156>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	623b      	str	r3, [r7, #32]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	4413      	add	r3, r2
 8007adc:	623b      	str	r3, [r7, #32]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	00da      	lsls	r2, r3, #3
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007aec:	61fb      	str	r3, [r7, #28]
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	801a      	strh	r2, [r3, #0]
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	801a      	strh	r2, [r3, #0]
 8007b12:	e017      	b.n	8007b44 <HAL_PCD_EP_DB_Transmit+0x186>
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	785b      	ldrb	r3, [r3, #1]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d113      	bne.n	8007b44 <HAL_PCD_EP_DB_Transmit+0x186>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	461a      	mov	r2, r3
 8007b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2a:	4413      	add	r3, r2
 8007b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	00da      	lsls	r2, r3, #3
 8007b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b36:	4413      	add	r3, r2
 8007b38:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b40:	2200      	movs	r2, #0
 8007b42:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	78db      	ldrb	r3, [r3, #3]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d123      	bne.n	8007b94 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	461a      	mov	r2, r3
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b66:	837b      	strh	r3, [r7, #26]
 8007b68:	8b7b      	ldrh	r3, [r7, #26]
 8007b6a:	f083 0320 	eor.w	r3, r3, #32
 8007b6e:	837b      	strh	r3, [r7, #26]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	461a      	mov	r2, r3
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	441a      	add	r2, r3
 8007b7e:	8b7b      	ldrh	r3, [r7, #26]
 8007b80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	4619      	mov	r1, r3
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f009 fd1d 	bl	80115da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007ba0:	88fb      	ldrh	r3, [r7, #6]
 8007ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d01f      	beq.n	8007bea <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bc4:	833b      	strh	r3, [r7, #24]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	441a      	add	r2, r3
 8007bd4:	8b3b      	ldrh	r3, [r7, #24]
 8007bd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	e31f      	b.n	800822e <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007bee:	88fb      	ldrh	r3, [r7, #6]
 8007bf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d021      	beq.n	8007c3c <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c12:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	441a      	add	r2, r3
 8007c24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007c28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	f040 82ca 	bne.w	80081dc <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	695a      	ldr	r2, [r3, #20]
 8007c4c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007c50:	441a      	add	r2, r3
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	69da      	ldr	r2, [r3, #28]
 8007c5a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007c5e:	441a      	add	r2, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	6a1a      	ldr	r2, [r3, #32]
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d309      	bcc.n	8007c84 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	6a1a      	ldr	r2, [r3, #32]
 8007c7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c7c:	1ad2      	subs	r2, r2, r3
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	621a      	str	r2, [r3, #32]
 8007c82:	e015      	b.n	8007cb0 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	6a1b      	ldr	r3, [r3, #32]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d107      	bne.n	8007c9c <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8007c8c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007c90:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007c9a:	e009      	b.n	8007cb0 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	6a1b      	ldr	r3, [r3, #32]
 8007ca8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2200      	movs	r2, #0
 8007cae:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	785b      	ldrb	r3, [r3, #1]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d15f      	bne.n	8007d78 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	461a      	mov	r2, r3
 8007cca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ccc:	4413      	add	r3, r2
 8007cce:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	00da      	lsls	r2, r3, #3
 8007cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cd8:	4413      	add	r3, r2
 8007cda:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ce2:	881b      	ldrh	r3, [r3, #0]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cee:	801a      	strh	r2, [r3, #0]
 8007cf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10a      	bne.n	8007d0c <HAL_PCD_EP_DB_Transmit+0x34e>
 8007cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cf8:	881b      	ldrh	r3, [r3, #0]
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d08:	801a      	strh	r2, [r3, #0]
 8007d0a:	e051      	b.n	8007db0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007d0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d10:	d816      	bhi.n	8007d40 <HAL_PCD_EP_DB_Transmit+0x382>
 8007d12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d14:	085b      	lsrs	r3, r3, #1
 8007d16:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d002      	beq.n	8007d28 <HAL_PCD_EP_DB_Transmit+0x36a>
 8007d22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d24:	3301      	adds	r3, #1
 8007d26:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	029b      	lsls	r3, r3, #10
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	4313      	orrs	r3, r2
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d3c:	801a      	strh	r2, [r3, #0]
 8007d3e:	e037      	b.n	8007db0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007d40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d42:	095b      	lsrs	r3, r3, #5
 8007d44:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d48:	f003 031f 	and.w	r3, r3, #31
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d102      	bne.n	8007d56 <HAL_PCD_EP_DB_Transmit+0x398>
 8007d50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d52:	3b01      	subs	r3, #1
 8007d54:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	029b      	lsls	r3, r3, #10
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	4313      	orrs	r3, r2
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d74:	801a      	strh	r2, [r3, #0]
 8007d76:	e01b      	b.n	8007db0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	785b      	ldrb	r3, [r3, #1]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d117      	bne.n	8007db0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	461a      	mov	r2, r3
 8007d92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d94:	4413      	add	r3, r2
 8007d96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	00da      	lsls	r2, r3, #3
 8007d9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007da0:	4413      	add	r3, r2
 8007da2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007da6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007da8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dae:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6818      	ldr	r0, [r3, #0]
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	6959      	ldr	r1, [r3, #20]
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	891a      	ldrh	r2, [r3, #8]
 8007dbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	f007 f9eb 	bl	800f19a <USB_WritePMA>
 8007dc4:	e20a      	b.n	80081dc <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	00db      	lsls	r3, r3, #3
 8007dd8:	4413      	add	r3, r2
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	6812      	ldr	r2, [r2, #0]
 8007dde:	4413      	add	r3, r2
 8007de0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007de4:	881b      	ldrh	r3, [r3, #0]
 8007de6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dea:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	699a      	ldr	r2, [r3, #24]
 8007df2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d307      	bcc.n	8007e0a <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	699a      	ldr	r2, [r3, #24]
 8007dfe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e02:	1ad2      	subs	r2, r2, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	619a      	str	r2, [r3, #24]
 8007e08:	e002      	b.n	8007e10 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f040 80f6 	bne.w	8008006 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	785b      	ldrb	r3, [r3, #1]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d126      	bne.n	8007e70 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	677b      	str	r3, [r7, #116]	@ 0x74
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	461a      	mov	r2, r3
 8007e34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e36:	4413      	add	r3, r2
 8007e38:	677b      	str	r3, [r7, #116]	@ 0x74
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	00da      	lsls	r2, r3, #3
 8007e40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e42:	4413      	add	r3, r2
 8007e44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e48:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e4c:	881b      	ldrh	r3, [r3, #0]
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e58:	801a      	strh	r2, [r3, #0]
 8007e5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e6c:	801a      	strh	r2, [r3, #0]
 8007e6e:	e01a      	b.n	8007ea6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	785b      	ldrb	r3, [r3, #1]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d116      	bne.n	8007ea6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	461a      	mov	r2, r3
 8007e8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007e8c:	4413      	add	r3, r2
 8007e8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	00da      	lsls	r2, r3, #3
 8007e96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007e98:	4413      	add	r3, r2
 8007e9a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ea0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	785b      	ldrb	r3, [r3, #1]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d12f      	bne.n	8007f16 <HAL_PCD_EP_DB_Transmit+0x558>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	461a      	mov	r2, r3
 8007eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ece:	4413      	add	r3, r2
 8007ed0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	00da      	lsls	r2, r3, #3
 8007eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ede:	4413      	add	r3, r2
 8007ee0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ee4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007efa:	801a      	strh	r2, [r3, #0]
 8007efc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f12:	801a      	strh	r2, [r3, #0]
 8007f14:	e01c      	b.n	8007f50 <HAL_PCD_EP_DB_Transmit+0x592>
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	785b      	ldrb	r3, [r3, #1]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d118      	bne.n	8007f50 <HAL_PCD_EP_DB_Transmit+0x592>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	461a      	mov	r2, r3
 8007f2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f2e:	4413      	add	r3, r2
 8007f30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	00da      	lsls	r2, r3, #3
 8007f3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f3e:	4413      	add	r3, r2
 8007f40:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	78db      	ldrb	r3, [r3, #3]
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d127      	bne.n	8007fa8 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	881b      	ldrh	r3, [r3, #0]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f72:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007f76:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007f7a:	f083 0320 	eor.w	r3, r3, #32
 8007f7e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	441a      	add	r2, r3
 8007f90:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007f94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	4619      	mov	r1, r3
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f009 fb13 	bl	80115da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007fb4:	88fb      	ldrh	r3, [r7, #6]
 8007fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d121      	bne.n	8008002 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fd8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	441a      	add	r2, r3
 8007fea:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007fee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ff2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ff6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	e113      	b.n	800822e <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008006:	88fb      	ldrh	r3, [r7, #6]
 8008008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d121      	bne.n	8008054 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	461a      	mov	r2, r3
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4413      	add	r3, r2
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	b29b      	uxth	r3, r3
 8008022:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800802a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	441a      	add	r2, r3
 800803c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008040:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008044:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008048:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800804c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008050:	b29b      	uxth	r3, r3
 8008052:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800805a:	2b01      	cmp	r3, #1
 800805c:	f040 80be 	bne.w	80081dc <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	695a      	ldr	r2, [r3, #20]
 8008064:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008068:	441a      	add	r2, r3
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	69da      	ldr	r2, [r3, #28]
 8008072:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008076:	441a      	add	r2, r3
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	6a1a      	ldr	r2, [r3, #32]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	429a      	cmp	r2, r3
 8008086:	d309      	bcc.n	800809c <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	6a1a      	ldr	r2, [r3, #32]
 8008092:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008094:	1ad2      	subs	r2, r2, r3
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	621a      	str	r2, [r3, #32]
 800809a:	e015      	b.n	80080c8 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	6a1b      	ldr	r3, [r3, #32]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d107      	bne.n	80080b4 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80080a4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80080a8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80080b2:	e009      	b.n	80080c8 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	6a1b      	ldr	r3, [r3, #32]
 80080b8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	2200      	movs	r2, #0
 80080be:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	785b      	ldrb	r3, [r3, #1]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d15f      	bne.n	8008196 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	461a      	mov	r2, r3
 80080e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80080ea:	4413      	add	r3, r2
 80080ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	00da      	lsls	r2, r3, #3
 80080f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80080f6:	4413      	add	r3, r2
 80080f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80080fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80080fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	b29b      	uxth	r3, r3
 8008104:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008108:	b29a      	uxth	r2, r3
 800810a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800810c:	801a      	strh	r2, [r3, #0]
 800810e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10a      	bne.n	800812a <HAL_PCD_EP_DB_Transmit+0x76c>
 8008114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	b29b      	uxth	r3, r3
 800811a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800811e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008122:	b29a      	uxth	r2, r3
 8008124:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008126:	801a      	strh	r2, [r3, #0]
 8008128:	e04e      	b.n	80081c8 <HAL_PCD_EP_DB_Transmit+0x80a>
 800812a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800812c:	2b3e      	cmp	r3, #62	@ 0x3e
 800812e:	d816      	bhi.n	800815e <HAL_PCD_EP_DB_Transmit+0x7a0>
 8008130:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008132:	085b      	lsrs	r3, r3, #1
 8008134:	663b      	str	r3, [r7, #96]	@ 0x60
 8008136:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <HAL_PCD_EP_DB_Transmit+0x788>
 8008140:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008142:	3301      	adds	r3, #1
 8008144:	663b      	str	r3, [r7, #96]	@ 0x60
 8008146:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008148:	881b      	ldrh	r3, [r3, #0]
 800814a:	b29a      	uxth	r2, r3
 800814c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800814e:	b29b      	uxth	r3, r3
 8008150:	029b      	lsls	r3, r3, #10
 8008152:	b29b      	uxth	r3, r3
 8008154:	4313      	orrs	r3, r2
 8008156:	b29a      	uxth	r2, r3
 8008158:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800815a:	801a      	strh	r2, [r3, #0]
 800815c:	e034      	b.n	80081c8 <HAL_PCD_EP_DB_Transmit+0x80a>
 800815e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008160:	095b      	lsrs	r3, r3, #5
 8008162:	663b      	str	r3, [r7, #96]	@ 0x60
 8008164:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008166:	f003 031f 	and.w	r3, r3, #31
 800816a:	2b00      	cmp	r3, #0
 800816c:	d102      	bne.n	8008174 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800816e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008170:	3b01      	subs	r3, #1
 8008172:	663b      	str	r3, [r7, #96]	@ 0x60
 8008174:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	b29a      	uxth	r2, r3
 800817a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800817c:	b29b      	uxth	r3, r3
 800817e:	029b      	lsls	r3, r3, #10
 8008180:	b29b      	uxth	r3, r3
 8008182:	4313      	orrs	r3, r2
 8008184:	b29b      	uxth	r3, r3
 8008186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800818a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800818e:	b29a      	uxth	r2, r3
 8008190:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008192:	801a      	strh	r2, [r3, #0]
 8008194:	e018      	b.n	80081c8 <HAL_PCD_EP_DB_Transmit+0x80a>
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	785b      	ldrb	r3, [r3, #1]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d114      	bne.n	80081c8 <HAL_PCD_EP_DB_Transmit+0x80a>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	461a      	mov	r2, r3
 80081aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081ac:	4413      	add	r3, r2
 80081ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	00da      	lsls	r2, r3, #3
 80081b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081b8:	4413      	add	r3, r2
 80081ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80081be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80081c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081c6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6818      	ldr	r0, [r3, #0]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	6959      	ldr	r1, [r3, #20]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	895a      	ldrh	r2, [r3, #10]
 80081d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	f006 ffdf 	bl	800f19a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	461a      	mov	r2, r3
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081f6:	82fb      	strh	r3, [r7, #22]
 80081f8:	8afb      	ldrh	r3, [r7, #22]
 80081fa:	f083 0310 	eor.w	r3, r3, #16
 80081fe:	82fb      	strh	r3, [r7, #22]
 8008200:	8afb      	ldrh	r3, [r7, #22]
 8008202:	f083 0320 	eor.w	r3, r3, #32
 8008206:	82fb      	strh	r3, [r7, #22]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	461a      	mov	r2, r3
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	441a      	add	r2, r3
 8008216:	8afb      	ldrh	r3, [r7, #22]
 8008218:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800821c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008220:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008228:	b29b      	uxth	r3, r3
 800822a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3798      	adds	r7, #152	@ 0x98
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008236:	b480      	push	{r7}
 8008238:	b087      	sub	sp, #28
 800823a:	af00      	add	r7, sp, #0
 800823c:	60f8      	str	r0, [r7, #12]
 800823e:	607b      	str	r3, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	817b      	strh	r3, [r7, #10]
 8008244:	4613      	mov	r3, r2
 8008246:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008248:	897b      	ldrh	r3, [r7, #10]
 800824a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800824e:	b29b      	uxth	r3, r3
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00b      	beq.n	800826c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008254:	897b      	ldrh	r3, [r7, #10]
 8008256:	f003 0207 	and.w	r2, r3, #7
 800825a:	4613      	mov	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4413      	add	r3, r2
 8008260:	00db      	lsls	r3, r3, #3
 8008262:	3310      	adds	r3, #16
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	4413      	add	r3, r2
 8008268:	617b      	str	r3, [r7, #20]
 800826a:	e009      	b.n	8008280 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800826c:	897a      	ldrh	r2, [r7, #10]
 800826e:	4613      	mov	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	00db      	lsls	r3, r3, #3
 8008276:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	4413      	add	r3, r2
 800827e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008280:	893b      	ldrh	r3, [r7, #8]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d107      	bne.n	8008296 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2200      	movs	r2, #0
 800828a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	b29a      	uxth	r2, r3
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	80da      	strh	r2, [r3, #6]
 8008294:	e00b      	b.n	80082ae <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2201      	movs	r2, #1
 800829a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	b29a      	uxth	r2, r3
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	0c1b      	lsrs	r3, r3, #16
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	371c      	adds	r7, #28
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4

  /* Enable BCD feature */
  USBx->BCDR |= USB_BCDR_BCDEN;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80082d8:	b29b      	uxth	r3, r3
 80082da:	f043 0301 	orr.w	r3, r3, #1
 80082de:	b29a      	uxth	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  /* Enable DCD : Data Contact Detect */
  USBx->BCDR &= ~(USB_BCDR_PDEN);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	f023 0304 	bic.w	r3, r3, #4
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  USBx->BCDR &= ~(USB_BCDR_SDEN);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008300:	b29b      	uxth	r3, r3
 8008302:	f023 0308 	bic.w	r3, r3, #8
 8008306:	b29a      	uxth	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  USBx->BCDR |= USB_BCDR_DCDEN;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008314:	b29b      	uxth	r3, r3
 8008316:	f043 0302 	orr.w	r3, r3, #2
 800831a:	b29a      	uxth	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <HAL_PCDEx_DeActivateBCD>:
  * @brief  Deactivate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_DeActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 0U;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4

  /* Disable BCD feature */
  USBx->BCDR &= ~(USB_BCDR_BCDEN);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800834c:	b29b      	uxth	r3, r3
 800834e:	f023 0301 	bic.w	r3, r3, #1
 8008352:	b29a      	uxth	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HAL_PCDEx_BCD_VBUSDetect>:
  * @brief  Handle BatteryCharging Process.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCDEx_BCD_VBUSDetect(PCD_HandleTypeDef *hpcd)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = HAL_GetTick();
 8008376:	f7fb ff53 	bl	8004220 <HAL_GetTick>
 800837a:	60b8      	str	r0, [r7, #8]

  /* Wait for Min DCD Timeout */
  HAL_Delay(300U);
 800837c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8008380:	f7fb ff5a 	bl	8004238 <HAL_Delay>

  /* Data Pin Contact ? Check Detect flag */
  if ((USBx->BCDR & USB_BCDR_DCDET) == USB_BCDR_DCDET)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800838a:	b29b      	uxth	r3, r3
 800838c:	f003 0310 	and.w	r3, r3, #16
 8008390:	2b10      	cmp	r3, #16
 8008392:	d103      	bne.n	800839c <HAL_PCDEx_BCD_VBUSDetect+0x34>
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_CONTACT_DETECTION);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CONTACT_DETECTION);
 8008394:	21fe      	movs	r1, #254	@ 0xfe
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f009 f99c 	bl	80116d4 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }
  /* Primary detection: checks if connected to Standard Downstream Port
  (without charging capability) */
  USBx->BCDR &= ~(USB_BCDR_DCDEN);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	f023 0302 	bic.w	r3, r3, #2
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  HAL_Delay(50U);
 80083b0:	2032      	movs	r0, #50	@ 0x32
 80083b2:	f7fb ff41 	bl	8004238 <HAL_Delay>
  USBx->BCDR |= (USB_BCDR_PDEN);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80083bc:	b29b      	uxth	r3, r3
 80083be:	f043 0304 	orr.w	r3, r3, #4
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  HAL_Delay(50U);
 80083ca:	2032      	movs	r0, #50	@ 0x32
 80083cc:	f7fb ff34 	bl	8004238 <HAL_Delay>

  /* If Charger detect ? */
  if ((USBx->BCDR & USB_BCDR_PDET) == USB_BCDR_PDET)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	f003 0320 	and.w	r3, r3, #32
 80083dc:	2b20      	cmp	r3, #32
 80083de:	d12b      	bne.n	8008438 <HAL_PCDEx_BCD_VBUSDetect+0xd0>
  {
    /* Start secondary detection to check connection to Charging Downstream
    Port or Dedicated Charging Port */
    USBx->BCDR &= ~(USB_BCDR_PDEN);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	f023 0304 	bic.w	r3, r3, #4
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    HAL_Delay(50U);
 80083f4:	2032      	movs	r0, #50	@ 0x32
 80083f6:	f7fb ff1f 	bl	8004238 <HAL_Delay>
    USBx->BCDR |= (USB_BCDR_SDEN);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008400:	b29b      	uxth	r3, r3
 8008402:	f043 0308 	orr.w	r3, r3, #8
 8008406:	b29a      	uxth	r2, r3
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    HAL_Delay(50U);
 800840e:	2032      	movs	r0, #50	@ 0x32
 8008410:	f7fb ff12 	bl	8004238 <HAL_Delay>

    /* If CDP ? */
    if ((USBx->BCDR & USB_BCDR_SDET) == USB_BCDR_SDET)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800841a:	b29b      	uxth	r3, r3
 800841c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008420:	2b40      	cmp	r3, #64	@ 0x40
 8008422:	d104      	bne.n	800842e <HAL_PCDEx_BCD_VBUSDetect+0xc6>
    {
      /* Dedicated Downstream Port DCP */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->BCDCallback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
#else
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
 8008424:	21fb      	movs	r1, #251	@ 0xfb
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f009 f954 	bl	80116d4 <HAL_PCDEx_BCD_Callback>
 800842c:	e008      	b.n	8008440 <HAL_PCDEx_BCD_VBUSDetect+0xd8>
    {
      /* Charging Downstream Port CDP */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->BCDCallback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
#else
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
 800842e:	21fc      	movs	r1, #252	@ 0xfc
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f009 f94f 	bl	80116d4 <HAL_PCDEx_BCD_Callback>
 8008436:	e003      	b.n	8008440 <HAL_PCDEx_BCD_VBUSDetect+0xd8>
  {
    /* Standard Downstream Port */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
 8008438:	21fd      	movs	r1, #253	@ 0xfd
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f009 f94a 	bl	80116d4 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Battery Charging capability discovery finished Start Enumeration */
  (void)HAL_PCDEx_DeActivateBCD(hpcd);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f7ff ff75 	bl	8008330 <HAL_PCDEx_DeActivateBCD>

  /* Check for the Timeout, else start USB Device */
  if ((HAL_GetTick() - tickstart) > 1000U)
 8008446:	f7fb feeb 	bl	8004220 <HAL_GetTick>
 800844a:	4602      	mov	r2, r0
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008454:	d904      	bls.n	8008460 <HAL_PCDEx_BCD_VBUSDetect+0xf8>
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_ERROR);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_ERROR);
 8008456:	21ff      	movs	r1, #255	@ 0xff
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f009 f93b 	bl	80116d4 <HAL_PCDEx_BCD_Callback>
    hpcd->BCDCallback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }
}
 800845e:	e003      	b.n	8008468 <HAL_PCDEx_BCD_VBUSDetect+0x100>
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
 8008460:	2100      	movs	r1, #0
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f009 f936 	bl	80116d4 <HAL_PCDEx_BCD_Callback>
}
 8008468:	bf00      	nop
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008494:	b29b      	uxth	r3, r3
 8008496:	f043 0301 	orr.w	r3, r3, #1
 800849a:	b29a      	uxth	r2, r3
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	f043 0302 	orr.w	r3, r3, #2
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80084c4:	b480      	push	{r7}
 80084c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80084c8:	4b05      	ldr	r3, [pc, #20]	@ (80084e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a04      	ldr	r2, [pc, #16]	@ (80084e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80084ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084d2:	6013      	str	r3, [r2, #0]
}
 80084d4:	bf00      	nop
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	40007000 	.word	0x40007000

080084e4 <HAL_PWR_DisableBkUpAccess>:
  * @brief Disable access to the backup domain
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80084e4:	b480      	push	{r7}
 80084e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 80084e8:	4b05      	ldr	r3, [pc, #20]	@ (8008500 <HAL_PWR_DisableBkUpAccess+0x1c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a04      	ldr	r2, [pc, #16]	@ (8008500 <HAL_PWR_DisableBkUpAccess+0x1c>)
 80084ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084f2:	6013      	str	r3, [r2, #0]
}
 80084f4:	bf00      	nop
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	40007000 	.word	0x40007000

08008504 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800850c:	4b2b      	ldr	r3, [pc, #172]	@ (80085bc <HAL_PWR_ConfigPVD+0xb8>)
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	f023 020e 	bic.w	r2, r3, #14
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4928      	ldr	r1, [pc, #160]	@ (80085bc <HAL_PWR_ConfigPVD+0xb8>)
 800851a:	4313      	orrs	r3, r2
 800851c:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800851e:	4b28      	ldr	r3, [pc, #160]	@ (80085c0 <HAL_PWR_ConfigPVD+0xbc>)
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	4a27      	ldr	r2, [pc, #156]	@ (80085c0 <HAL_PWR_ConfigPVD+0xbc>)
 8008524:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008528:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800852a:	4b25      	ldr	r3, [pc, #148]	@ (80085c0 <HAL_PWR_ConfigPVD+0xbc>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a24      	ldr	r2, [pc, #144]	@ (80085c0 <HAL_PWR_ConfigPVD+0xbc>)
 8008530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008534:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8008536:	4b22      	ldr	r3, [pc, #136]	@ (80085c0 <HAL_PWR_ConfigPVD+0xbc>)
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	4a21      	ldr	r2, [pc, #132]	@ (80085c0 <HAL_PWR_ConfigPVD+0xbc>)
 800853c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008540:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8008542:	4b1f      	ldr	r3, [pc, #124]	@ (80085c0 <HAL_PWR_ConfigPVD+0xbc>)
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	4a1e      	ldr	r2, [pc, #120]	@ (80085c0 <HAL_PWR_ConfigPVD+0xbc>)
 8008548:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800854c:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d005      	beq.n	8008566 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800855a:	4b19      	ldr	r3, [pc, #100]	@ (80085c0 <HAL_PWR_ConfigPVD+0xbc>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a18      	ldr	r2, [pc, #96]	@ (80085c0 <HAL_PWR_ConfigPVD+0xbc>)
 8008560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008564:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800856e:	2b00      	cmp	r3, #0
 8008570:	d005      	beq.n	800857e <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8008572:	4b13      	ldr	r3, [pc, #76]	@ (80085c0 <HAL_PWR_ConfigPVD+0xbc>)
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	4a12      	ldr	r2, [pc, #72]	@ (80085c0 <HAL_PWR_ConfigPVD+0xbc>)
 8008578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800857c:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f003 0301 	and.w	r3, r3, #1
 8008586:	2b00      	cmp	r3, #0
 8008588:	d005      	beq.n	8008596 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800858a:	4b0d      	ldr	r3, [pc, #52]	@ (80085c0 <HAL_PWR_ConfigPVD+0xbc>)
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	4a0c      	ldr	r2, [pc, #48]	@ (80085c0 <HAL_PWR_ConfigPVD+0xbc>)
 8008590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008594:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	f003 0302 	and.w	r3, r3, #2
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d005      	beq.n	80085ae <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80085a2:	4b07      	ldr	r3, [pc, #28]	@ (80085c0 <HAL_PWR_ConfigPVD+0xbc>)
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	4a06      	ldr	r2, [pc, #24]	@ (80085c0 <HAL_PWR_ConfigPVD+0xbc>)
 80085a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085ac:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	40007000 	.word	0x40007000
 80085c0:	40010400 	.word	0x40010400

080085c4 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80085c4:	b480      	push	{r7}
 80085c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 80085c8:	4b05      	ldr	r3, [pc, #20]	@ (80085e0 <HAL_PWR_EnablePVD+0x1c>)
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	4a04      	ldr	r2, [pc, #16]	@ (80085e0 <HAL_PWR_EnablePVD+0x1c>)
 80085ce:	f043 0301 	orr.w	r3, r3, #1
 80085d2:	6053      	str	r3, [r2, #4]
}
 80085d4:	bf00      	nop
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	40007000 	.word	0x40007000

080085e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d141      	bne.n	8008676 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80085f2:	4b4b      	ldr	r3, [pc, #300]	@ (8008720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80085fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085fe:	d131      	bne.n	8008664 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008600:	4b47      	ldr	r3, [pc, #284]	@ (8008720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008602:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008606:	4a46      	ldr	r2, [pc, #280]	@ (8008720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800860c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008610:	4b43      	ldr	r3, [pc, #268]	@ (8008720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008618:	4a41      	ldr	r2, [pc, #260]	@ (8008720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800861a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800861e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008620:	4b40      	ldr	r3, [pc, #256]	@ (8008724 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2232      	movs	r2, #50	@ 0x32
 8008626:	fb02 f303 	mul.w	r3, r2, r3
 800862a:	4a3f      	ldr	r2, [pc, #252]	@ (8008728 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800862c:	fba2 2303 	umull	r2, r3, r2, r3
 8008630:	0c9b      	lsrs	r3, r3, #18
 8008632:	3301      	adds	r3, #1
 8008634:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008636:	e002      	b.n	800863e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3b01      	subs	r3, #1
 800863c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800863e:	4b38      	ldr	r3, [pc, #224]	@ (8008720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800864a:	d102      	bne.n	8008652 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1f2      	bne.n	8008638 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008652:	4b33      	ldr	r3, [pc, #204]	@ (8008720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800865a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800865e:	d158      	bne.n	8008712 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008660:	2303      	movs	r3, #3
 8008662:	e057      	b.n	8008714 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008664:	4b2e      	ldr	r3, [pc, #184]	@ (8008720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800866a:	4a2d      	ldr	r2, [pc, #180]	@ (8008720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800866c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008670:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008674:	e04d      	b.n	8008712 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800867c:	d141      	bne.n	8008702 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800867e:	4b28      	ldr	r3, [pc, #160]	@ (8008720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800868a:	d131      	bne.n	80086f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800868c:	4b24      	ldr	r3, [pc, #144]	@ (8008720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800868e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008692:	4a23      	ldr	r2, [pc, #140]	@ (8008720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008698:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800869c:	4b20      	ldr	r3, [pc, #128]	@ (8008720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80086a4:	4a1e      	ldr	r2, [pc, #120]	@ (8008720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80086aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80086ac:	4b1d      	ldr	r3, [pc, #116]	@ (8008724 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2232      	movs	r2, #50	@ 0x32
 80086b2:	fb02 f303 	mul.w	r3, r2, r3
 80086b6:	4a1c      	ldr	r2, [pc, #112]	@ (8008728 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80086b8:	fba2 2303 	umull	r2, r3, r2, r3
 80086bc:	0c9b      	lsrs	r3, r3, #18
 80086be:	3301      	adds	r3, #1
 80086c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80086c2:	e002      	b.n	80086ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80086ca:	4b15      	ldr	r3, [pc, #84]	@ (8008720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086d6:	d102      	bne.n	80086de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1f2      	bne.n	80086c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80086de:	4b10      	ldr	r3, [pc, #64]	@ (8008720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086ea:	d112      	bne.n	8008712 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e011      	b.n	8008714 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80086f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086f6:	4a0a      	ldr	r2, [pc, #40]	@ (8008720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008700:	e007      	b.n	8008712 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008702:	4b07      	ldr	r3, [pc, #28]	@ (8008720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800870a:	4a05      	ldr	r2, [pc, #20]	@ (8008720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800870c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008710:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	40007000 	.word	0x40007000
 8008724:	20000000 	.word	0x20000000
 8008728:	431bde83 	.word	0x431bde83

0800872c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800872c:	b480      	push	{r7}
 800872e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008730:	4b05      	ldr	r3, [pc, #20]	@ (8008748 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	4a04      	ldr	r2, [pc, #16]	@ (8008748 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008736:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800873a:	6093      	str	r3, [r2, #8]
}
 800873c:	bf00      	nop
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	40007000 	.word	0x40007000

0800874c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b088      	sub	sp, #32
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e2fe      	b.n	8008d5c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b00      	cmp	r3, #0
 8008768:	d075      	beq.n	8008856 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800876a:	4b97      	ldr	r3, [pc, #604]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f003 030c 	and.w	r3, r3, #12
 8008772:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008774:	4b94      	ldr	r3, [pc, #592]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f003 0303 	and.w	r3, r3, #3
 800877c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	2b0c      	cmp	r3, #12
 8008782:	d102      	bne.n	800878a <HAL_RCC_OscConfig+0x3e>
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	2b03      	cmp	r3, #3
 8008788:	d002      	beq.n	8008790 <HAL_RCC_OscConfig+0x44>
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	2b08      	cmp	r3, #8
 800878e:	d10b      	bne.n	80087a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008790:	4b8d      	ldr	r3, [pc, #564]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d05b      	beq.n	8008854 <HAL_RCC_OscConfig+0x108>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d157      	bne.n	8008854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	e2d9      	b.n	8008d5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087b0:	d106      	bne.n	80087c0 <HAL_RCC_OscConfig+0x74>
 80087b2:	4b85      	ldr	r3, [pc, #532]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a84      	ldr	r2, [pc, #528]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 80087b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087bc:	6013      	str	r3, [r2, #0]
 80087be:	e01d      	b.n	80087fc <HAL_RCC_OscConfig+0xb0>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80087c8:	d10c      	bne.n	80087e4 <HAL_RCC_OscConfig+0x98>
 80087ca:	4b7f      	ldr	r3, [pc, #508]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a7e      	ldr	r2, [pc, #504]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 80087d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80087d4:	6013      	str	r3, [r2, #0]
 80087d6:	4b7c      	ldr	r3, [pc, #496]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a7b      	ldr	r2, [pc, #492]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 80087dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087e0:	6013      	str	r3, [r2, #0]
 80087e2:	e00b      	b.n	80087fc <HAL_RCC_OscConfig+0xb0>
 80087e4:	4b78      	ldr	r3, [pc, #480]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a77      	ldr	r2, [pc, #476]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 80087ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087ee:	6013      	str	r3, [r2, #0]
 80087f0:	4b75      	ldr	r3, [pc, #468]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a74      	ldr	r2, [pc, #464]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 80087f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d013      	beq.n	800882c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008804:	f7fb fd0c 	bl	8004220 <HAL_GetTick>
 8008808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800880a:	e008      	b.n	800881e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800880c:	f7fb fd08 	bl	8004220 <HAL_GetTick>
 8008810:	4602      	mov	r2, r0
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	2b64      	cmp	r3, #100	@ 0x64
 8008818:	d901      	bls.n	800881e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800881a:	2303      	movs	r3, #3
 800881c:	e29e      	b.n	8008d5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800881e:	4b6a      	ldr	r3, [pc, #424]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d0f0      	beq.n	800880c <HAL_RCC_OscConfig+0xc0>
 800882a:	e014      	b.n	8008856 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800882c:	f7fb fcf8 	bl	8004220 <HAL_GetTick>
 8008830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008832:	e008      	b.n	8008846 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008834:	f7fb fcf4 	bl	8004220 <HAL_GetTick>
 8008838:	4602      	mov	r2, r0
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	2b64      	cmp	r3, #100	@ 0x64
 8008840:	d901      	bls.n	8008846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e28a      	b.n	8008d5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008846:	4b60      	ldr	r3, [pc, #384]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1f0      	bne.n	8008834 <HAL_RCC_OscConfig+0xe8>
 8008852:	e000      	b.n	8008856 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d075      	beq.n	800894e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008862:	4b59      	ldr	r3, [pc, #356]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	f003 030c 	and.w	r3, r3, #12
 800886a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800886c:	4b56      	ldr	r3, [pc, #344]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	f003 0303 	and.w	r3, r3, #3
 8008874:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	2b0c      	cmp	r3, #12
 800887a:	d102      	bne.n	8008882 <HAL_RCC_OscConfig+0x136>
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	2b02      	cmp	r3, #2
 8008880:	d002      	beq.n	8008888 <HAL_RCC_OscConfig+0x13c>
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	2b04      	cmp	r3, #4
 8008886:	d11f      	bne.n	80088c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008888:	4b4f      	ldr	r3, [pc, #316]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008890:	2b00      	cmp	r3, #0
 8008892:	d005      	beq.n	80088a0 <HAL_RCC_OscConfig+0x154>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e25d      	b.n	8008d5c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088a0:	4b49      	ldr	r3, [pc, #292]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	061b      	lsls	r3, r3, #24
 80088ae:	4946      	ldr	r1, [pc, #280]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 80088b0:	4313      	orrs	r3, r2
 80088b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80088b4:	4b45      	ldr	r3, [pc, #276]	@ (80089cc <HAL_RCC_OscConfig+0x280>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fa f93f 	bl	8002b3c <HAL_InitTick>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d043      	beq.n	800894c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e249      	b.n	8008d5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d023      	beq.n	8008918 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088d0:	4b3d      	ldr	r3, [pc, #244]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a3c      	ldr	r2, [pc, #240]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 80088d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088dc:	f7fb fca0 	bl	8004220 <HAL_GetTick>
 80088e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80088e2:	e008      	b.n	80088f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088e4:	f7fb fc9c 	bl	8004220 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d901      	bls.n	80088f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e232      	b.n	8008d5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80088f6:	4b34      	ldr	r3, [pc, #208]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0f0      	beq.n	80088e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008902:	4b31      	ldr	r3, [pc, #196]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	061b      	lsls	r3, r3, #24
 8008910:	492d      	ldr	r1, [pc, #180]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 8008912:	4313      	orrs	r3, r2
 8008914:	604b      	str	r3, [r1, #4]
 8008916:	e01a      	b.n	800894e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008918:	4b2b      	ldr	r3, [pc, #172]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a2a      	ldr	r2, [pc, #168]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 800891e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008924:	f7fb fc7c 	bl	8004220 <HAL_GetTick>
 8008928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800892a:	e008      	b.n	800893e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800892c:	f7fb fc78 	bl	8004220 <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	2b02      	cmp	r3, #2
 8008938:	d901      	bls.n	800893e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	e20e      	b.n	8008d5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800893e:	4b22      	ldr	r3, [pc, #136]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1f0      	bne.n	800892c <HAL_RCC_OscConfig+0x1e0>
 800894a:	e000      	b.n	800894e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800894c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0308 	and.w	r3, r3, #8
 8008956:	2b00      	cmp	r3, #0
 8008958:	d041      	beq.n	80089de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d01c      	beq.n	800899c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008962:	4b19      	ldr	r3, [pc, #100]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 8008964:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008968:	4a17      	ldr	r2, [pc, #92]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 800896a:	f043 0301 	orr.w	r3, r3, #1
 800896e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008972:	f7fb fc55 	bl	8004220 <HAL_GetTick>
 8008976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008978:	e008      	b.n	800898c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800897a:	f7fb fc51 	bl	8004220 <HAL_GetTick>
 800897e:	4602      	mov	r2, r0
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	2b02      	cmp	r3, #2
 8008986:	d901      	bls.n	800898c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e1e7      	b.n	8008d5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800898c:	4b0e      	ldr	r3, [pc, #56]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 800898e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008992:	f003 0302 	and.w	r3, r3, #2
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0ef      	beq.n	800897a <HAL_RCC_OscConfig+0x22e>
 800899a:	e020      	b.n	80089de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800899c:	4b0a      	ldr	r3, [pc, #40]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 800899e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089a2:	4a09      	ldr	r2, [pc, #36]	@ (80089c8 <HAL_RCC_OscConfig+0x27c>)
 80089a4:	f023 0301 	bic.w	r3, r3, #1
 80089a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089ac:	f7fb fc38 	bl	8004220 <HAL_GetTick>
 80089b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80089b2:	e00d      	b.n	80089d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089b4:	f7fb fc34 	bl	8004220 <HAL_GetTick>
 80089b8:	4602      	mov	r2, r0
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d906      	bls.n	80089d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e1ca      	b.n	8008d5c <HAL_RCC_OscConfig+0x610>
 80089c6:	bf00      	nop
 80089c8:	40021000 	.word	0x40021000
 80089cc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80089d0:	4b8c      	ldr	r3, [pc, #560]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 80089d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089d6:	f003 0302 	and.w	r3, r3, #2
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1ea      	bne.n	80089b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0304 	and.w	r3, r3, #4
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 80a6 	beq.w	8008b38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089ec:	2300      	movs	r3, #0
 80089ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80089f0:	4b84      	ldr	r3, [pc, #528]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 80089f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d101      	bne.n	8008a00 <HAL_RCC_OscConfig+0x2b4>
 80089fc:	2301      	movs	r3, #1
 80089fe:	e000      	b.n	8008a02 <HAL_RCC_OscConfig+0x2b6>
 8008a00:	2300      	movs	r3, #0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00d      	beq.n	8008a22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a06:	4b7f      	ldr	r3, [pc, #508]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a0a:	4a7e      	ldr	r2, [pc, #504]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a10:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a12:	4b7c      	ldr	r3, [pc, #496]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a1a:	60fb      	str	r3, [r7, #12]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a22:	4b79      	ldr	r3, [pc, #484]	@ (8008c08 <HAL_RCC_OscConfig+0x4bc>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d118      	bne.n	8008a60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a2e:	4b76      	ldr	r3, [pc, #472]	@ (8008c08 <HAL_RCC_OscConfig+0x4bc>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a75      	ldr	r2, [pc, #468]	@ (8008c08 <HAL_RCC_OscConfig+0x4bc>)
 8008a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a3a:	f7fb fbf1 	bl	8004220 <HAL_GetTick>
 8008a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a40:	e008      	b.n	8008a54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a42:	f7fb fbed 	bl	8004220 <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d901      	bls.n	8008a54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e183      	b.n	8008d5c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a54:	4b6c      	ldr	r3, [pc, #432]	@ (8008c08 <HAL_RCC_OscConfig+0x4bc>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d0f0      	beq.n	8008a42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d108      	bne.n	8008a7a <HAL_RCC_OscConfig+0x32e>
 8008a68:	4b66      	ldr	r3, [pc, #408]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a6e:	4a65      	ldr	r2, [pc, #404]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008a70:	f043 0301 	orr.w	r3, r3, #1
 8008a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a78:	e024      	b.n	8008ac4 <HAL_RCC_OscConfig+0x378>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	2b05      	cmp	r3, #5
 8008a80:	d110      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x358>
 8008a82:	4b60      	ldr	r3, [pc, #384]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a88:	4a5e      	ldr	r2, [pc, #376]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008a8a:	f043 0304 	orr.w	r3, r3, #4
 8008a8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a92:	4b5c      	ldr	r3, [pc, #368]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a98:	4a5a      	ldr	r2, [pc, #360]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008a9a:	f043 0301 	orr.w	r3, r3, #1
 8008a9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008aa2:	e00f      	b.n	8008ac4 <HAL_RCC_OscConfig+0x378>
 8008aa4:	4b57      	ldr	r3, [pc, #348]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aaa:	4a56      	ldr	r2, [pc, #344]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008aac:	f023 0301 	bic.w	r3, r3, #1
 8008ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ab4:	4b53      	ldr	r3, [pc, #332]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aba:	4a52      	ldr	r2, [pc, #328]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008abc:	f023 0304 	bic.w	r3, r3, #4
 8008ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d016      	beq.n	8008afa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008acc:	f7fb fba8 	bl	8004220 <HAL_GetTick>
 8008ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ad2:	e00a      	b.n	8008aea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ad4:	f7fb fba4 	bl	8004220 <HAL_GetTick>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d901      	bls.n	8008aea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e138      	b.n	8008d5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008aea:	4b46      	ldr	r3, [pc, #280]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008af0:	f003 0302 	and.w	r3, r3, #2
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0ed      	beq.n	8008ad4 <HAL_RCC_OscConfig+0x388>
 8008af8:	e015      	b.n	8008b26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008afa:	f7fb fb91 	bl	8004220 <HAL_GetTick>
 8008afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008b00:	e00a      	b.n	8008b18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b02:	f7fb fb8d 	bl	8004220 <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d901      	bls.n	8008b18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	e121      	b.n	8008d5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008b18:	4b3a      	ldr	r3, [pc, #232]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b1e:	f003 0302 	and.w	r3, r3, #2
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1ed      	bne.n	8008b02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008b26:	7ffb      	ldrb	r3, [r7, #31]
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d105      	bne.n	8008b38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b2c:	4b35      	ldr	r3, [pc, #212]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b30:	4a34      	ldr	r2, [pc, #208]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008b32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b36:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0320 	and.w	r3, r3, #32
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d03c      	beq.n	8008bbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d01c      	beq.n	8008b86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b52:	4a2c      	ldr	r2, [pc, #176]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008b54:	f043 0301 	orr.w	r3, r3, #1
 8008b58:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b5c:	f7fb fb60 	bl	8004220 <HAL_GetTick>
 8008b60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008b62:	e008      	b.n	8008b76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b64:	f7fb fb5c 	bl	8004220 <HAL_GetTick>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d901      	bls.n	8008b76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008b72:	2303      	movs	r3, #3
 8008b74:	e0f2      	b.n	8008d5c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008b76:	4b23      	ldr	r3, [pc, #140]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b7c:	f003 0302 	and.w	r3, r3, #2
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d0ef      	beq.n	8008b64 <HAL_RCC_OscConfig+0x418>
 8008b84:	e01b      	b.n	8008bbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b86:	4b1f      	ldr	r3, [pc, #124]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008b8e:	f023 0301 	bic.w	r3, r3, #1
 8008b92:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b96:	f7fb fb43 	bl	8004220 <HAL_GetTick>
 8008b9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008b9c:	e008      	b.n	8008bb0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b9e:	f7fb fb3f 	bl	8004220 <HAL_GetTick>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	1ad3      	subs	r3, r2, r3
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d901      	bls.n	8008bb0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e0d5      	b.n	8008d5c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008bb0:	4b14      	ldr	r3, [pc, #80]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008bb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008bb6:	f003 0302 	and.w	r3, r3, #2
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1ef      	bne.n	8008b9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	69db      	ldr	r3, [r3, #28]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f000 80c9 	beq.w	8008d5a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f003 030c 	and.w	r3, r3, #12
 8008bd0:	2b0c      	cmp	r3, #12
 8008bd2:	f000 8083 	beq.w	8008cdc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d15e      	bne.n	8008c9c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bde:	4b09      	ldr	r3, [pc, #36]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a08      	ldr	r2, [pc, #32]	@ (8008c04 <HAL_RCC_OscConfig+0x4b8>)
 8008be4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bea:	f7fb fb19 	bl	8004220 <HAL_GetTick>
 8008bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bf0:	e00c      	b.n	8008c0c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bf2:	f7fb fb15 	bl	8004220 <HAL_GetTick>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d905      	bls.n	8008c0c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008c00:	2303      	movs	r3, #3
 8008c02:	e0ab      	b.n	8008d5c <HAL_RCC_OscConfig+0x610>
 8008c04:	40021000 	.word	0x40021000
 8008c08:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c0c:	4b55      	ldr	r3, [pc, #340]	@ (8008d64 <HAL_RCC_OscConfig+0x618>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1ec      	bne.n	8008bf2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c18:	4b52      	ldr	r3, [pc, #328]	@ (8008d64 <HAL_RCC_OscConfig+0x618>)
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	4b52      	ldr	r3, [pc, #328]	@ (8008d68 <HAL_RCC_OscConfig+0x61c>)
 8008c1e:	4013      	ands	r3, r2
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	6a11      	ldr	r1, [r2, #32]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008c28:	3a01      	subs	r2, #1
 8008c2a:	0112      	lsls	r2, r2, #4
 8008c2c:	4311      	orrs	r1, r2
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008c32:	0212      	lsls	r2, r2, #8
 8008c34:	4311      	orrs	r1, r2
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008c3a:	0852      	lsrs	r2, r2, #1
 8008c3c:	3a01      	subs	r2, #1
 8008c3e:	0552      	lsls	r2, r2, #21
 8008c40:	4311      	orrs	r1, r2
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008c46:	0852      	lsrs	r2, r2, #1
 8008c48:	3a01      	subs	r2, #1
 8008c4a:	0652      	lsls	r2, r2, #25
 8008c4c:	4311      	orrs	r1, r2
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008c52:	06d2      	lsls	r2, r2, #27
 8008c54:	430a      	orrs	r2, r1
 8008c56:	4943      	ldr	r1, [pc, #268]	@ (8008d64 <HAL_RCC_OscConfig+0x618>)
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c5c:	4b41      	ldr	r3, [pc, #260]	@ (8008d64 <HAL_RCC_OscConfig+0x618>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a40      	ldr	r2, [pc, #256]	@ (8008d64 <HAL_RCC_OscConfig+0x618>)
 8008c62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008c68:	4b3e      	ldr	r3, [pc, #248]	@ (8008d64 <HAL_RCC_OscConfig+0x618>)
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	4a3d      	ldr	r2, [pc, #244]	@ (8008d64 <HAL_RCC_OscConfig+0x618>)
 8008c6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c74:	f7fb fad4 	bl	8004220 <HAL_GetTick>
 8008c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c7a:	e008      	b.n	8008c8e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c7c:	f7fb fad0 	bl	8004220 <HAL_GetTick>
 8008c80:	4602      	mov	r2, r0
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d901      	bls.n	8008c8e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e066      	b.n	8008d5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c8e:	4b35      	ldr	r3, [pc, #212]	@ (8008d64 <HAL_RCC_OscConfig+0x618>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d0f0      	beq.n	8008c7c <HAL_RCC_OscConfig+0x530>
 8008c9a:	e05e      	b.n	8008d5a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c9c:	4b31      	ldr	r3, [pc, #196]	@ (8008d64 <HAL_RCC_OscConfig+0x618>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a30      	ldr	r2, [pc, #192]	@ (8008d64 <HAL_RCC_OscConfig+0x618>)
 8008ca2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ca8:	f7fb faba 	bl	8004220 <HAL_GetTick>
 8008cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008cae:	e008      	b.n	8008cc2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cb0:	f7fb fab6 	bl	8004220 <HAL_GetTick>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d901      	bls.n	8008cc2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e04c      	b.n	8008d5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008cc2:	4b28      	ldr	r3, [pc, #160]	@ (8008d64 <HAL_RCC_OscConfig+0x618>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1f0      	bne.n	8008cb0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008cce:	4b25      	ldr	r3, [pc, #148]	@ (8008d64 <HAL_RCC_OscConfig+0x618>)
 8008cd0:	68da      	ldr	r2, [r3, #12]
 8008cd2:	4924      	ldr	r1, [pc, #144]	@ (8008d64 <HAL_RCC_OscConfig+0x618>)
 8008cd4:	4b25      	ldr	r3, [pc, #148]	@ (8008d6c <HAL_RCC_OscConfig+0x620>)
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	60cb      	str	r3, [r1, #12]
 8008cda:	e03e      	b.n	8008d5a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	69db      	ldr	r3, [r3, #28]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d101      	bne.n	8008ce8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e039      	b.n	8008d5c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8008d64 <HAL_RCC_OscConfig+0x618>)
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f003 0203 	and.w	r2, r3, #3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a1b      	ldr	r3, [r3, #32]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d12c      	bne.n	8008d56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d06:	3b01      	subs	r3, #1
 8008d08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d123      	bne.n	8008d56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d18:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d11b      	bne.n	8008d56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d28:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d113      	bne.n	8008d56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d38:	085b      	lsrs	r3, r3, #1
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d109      	bne.n	8008d56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d4c:	085b      	lsrs	r3, r3, #1
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d001      	beq.n	8008d5a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e000      	b.n	8008d5c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3720      	adds	r7, #32
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	40021000 	.word	0x40021000
 8008d68:	019f800c 	.word	0x019f800c
 8008d6c:	feeefffc 	.word	0xfeeefffc

08008d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d101      	bne.n	8008d88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	e11e      	b.n	8008fc6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d88:	4b91      	ldr	r3, [pc, #580]	@ (8008fd0 <HAL_RCC_ClockConfig+0x260>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 030f 	and.w	r3, r3, #15
 8008d90:	683a      	ldr	r2, [r7, #0]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d910      	bls.n	8008db8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d96:	4b8e      	ldr	r3, [pc, #568]	@ (8008fd0 <HAL_RCC_ClockConfig+0x260>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f023 020f 	bic.w	r2, r3, #15
 8008d9e:	498c      	ldr	r1, [pc, #560]	@ (8008fd0 <HAL_RCC_ClockConfig+0x260>)
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008da6:	4b8a      	ldr	r3, [pc, #552]	@ (8008fd0 <HAL_RCC_ClockConfig+0x260>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f003 030f 	and.w	r3, r3, #15
 8008dae:	683a      	ldr	r2, [r7, #0]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d001      	beq.n	8008db8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e106      	b.n	8008fc6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 0301 	and.w	r3, r3, #1
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d073      	beq.n	8008eac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	d129      	bne.n	8008e20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008dcc:	4b81      	ldr	r3, [pc, #516]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d101      	bne.n	8008ddc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e0f4      	b.n	8008fc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008ddc:	f000 fa16 	bl	800920c <RCC_GetSysClockFreqFromPLLSource>
 8008de0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	4a7c      	ldr	r2, [pc, #496]	@ (8008fd8 <HAL_RCC_ClockConfig+0x268>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d93f      	bls.n	8008e6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008dea:	4b7a      	ldr	r3, [pc, #488]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d009      	beq.n	8008e0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d033      	beq.n	8008e6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d12f      	bne.n	8008e6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008e0a:	4b72      	ldr	r3, [pc, #456]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e12:	4a70      	ldr	r2, [pc, #448]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008e14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008e1a:	2380      	movs	r3, #128	@ 0x80
 8008e1c:	617b      	str	r3, [r7, #20]
 8008e1e:	e024      	b.n	8008e6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d107      	bne.n	8008e38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e28:	4b6a      	ldr	r3, [pc, #424]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d109      	bne.n	8008e48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	e0c6      	b.n	8008fc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e38:	4b66      	ldr	r3, [pc, #408]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d101      	bne.n	8008e48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e0be      	b.n	8008fc6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008e48:	f000 f914 	bl	8009074 <HAL_RCC_GetSysClockFreq>
 8008e4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	4a61      	ldr	r2, [pc, #388]	@ (8008fd8 <HAL_RCC_ClockConfig+0x268>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d909      	bls.n	8008e6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008e56:	4b5f      	ldr	r3, [pc, #380]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e5e:	4a5d      	ldr	r2, [pc, #372]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008e66:	2380      	movs	r3, #128	@ 0x80
 8008e68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008e6a:	4b5a      	ldr	r3, [pc, #360]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f023 0203 	bic.w	r2, r3, #3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	4957      	ldr	r1, [pc, #348]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e7c:	f7fb f9d0 	bl	8004220 <HAL_GetTick>
 8008e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e82:	e00a      	b.n	8008e9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e84:	f7fb f9cc 	bl	8004220 <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d901      	bls.n	8008e9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008e96:	2303      	movs	r3, #3
 8008e98:	e095      	b.n	8008fc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e9a:	4b4e      	ldr	r3, [pc, #312]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f003 020c 	and.w	r2, r3, #12
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d1eb      	bne.n	8008e84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0302 	and.w	r3, r3, #2
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d023      	beq.n	8008f00 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 0304 	and.w	r3, r3, #4
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d005      	beq.n	8008ed0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ec4:	4b43      	ldr	r3, [pc, #268]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	4a42      	ldr	r2, [pc, #264]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008eca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008ece:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0308 	and.w	r3, r3, #8
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d007      	beq.n	8008eec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008edc:	4b3d      	ldr	r3, [pc, #244]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008ee4:	4a3b      	ldr	r2, [pc, #236]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008ee6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008eea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008eec:	4b39      	ldr	r3, [pc, #228]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	4936      	ldr	r1, [pc, #216]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008efa:	4313      	orrs	r3, r2
 8008efc:	608b      	str	r3, [r1, #8]
 8008efe:	e008      	b.n	8008f12 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	2b80      	cmp	r3, #128	@ 0x80
 8008f04:	d105      	bne.n	8008f12 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008f06:	4b33      	ldr	r3, [pc, #204]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	4a32      	ldr	r2, [pc, #200]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008f0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f10:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f12:	4b2f      	ldr	r3, [pc, #188]	@ (8008fd0 <HAL_RCC_ClockConfig+0x260>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 030f 	and.w	r3, r3, #15
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d21d      	bcs.n	8008f5c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f20:	4b2b      	ldr	r3, [pc, #172]	@ (8008fd0 <HAL_RCC_ClockConfig+0x260>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f023 020f 	bic.w	r2, r3, #15
 8008f28:	4929      	ldr	r1, [pc, #164]	@ (8008fd0 <HAL_RCC_ClockConfig+0x260>)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008f30:	f7fb f976 	bl	8004220 <HAL_GetTick>
 8008f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f36:	e00a      	b.n	8008f4e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f38:	f7fb f972 	bl	8004220 <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d901      	bls.n	8008f4e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e03b      	b.n	8008fc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f4e:	4b20      	ldr	r3, [pc, #128]	@ (8008fd0 <HAL_RCC_ClockConfig+0x260>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 030f 	and.w	r3, r3, #15
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d1ed      	bne.n	8008f38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d008      	beq.n	8008f7a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f68:	4b1a      	ldr	r3, [pc, #104]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	4917      	ldr	r1, [pc, #92]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008f76:	4313      	orrs	r3, r2
 8008f78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 0308 	and.w	r3, r3, #8
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d009      	beq.n	8008f9a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f86:	4b13      	ldr	r3, [pc, #76]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	00db      	lsls	r3, r3, #3
 8008f94:	490f      	ldr	r1, [pc, #60]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008f96:	4313      	orrs	r3, r2
 8008f98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008f9a:	f000 f86b 	bl	8009074 <HAL_RCC_GetSysClockFreq>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8008fd4 <HAL_RCC_ClockConfig+0x264>)
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	091b      	lsrs	r3, r3, #4
 8008fa6:	f003 030f 	and.w	r3, r3, #15
 8008faa:	490c      	ldr	r1, [pc, #48]	@ (8008fdc <HAL_RCC_ClockConfig+0x26c>)
 8008fac:	5ccb      	ldrb	r3, [r1, r3]
 8008fae:	f003 031f 	and.w	r3, r3, #31
 8008fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8008fe0 <HAL_RCC_ClockConfig+0x270>)
 8008fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008fba:	4b0a      	ldr	r3, [pc, #40]	@ (8008fe4 <HAL_RCC_ClockConfig+0x274>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7f9 fdbc 	bl	8002b3c <HAL_InitTick>
 8008fc4:	4603      	mov	r3, r0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3718      	adds	r7, #24
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	40022000 	.word	0x40022000
 8008fd4:	40021000 	.word	0x40021000
 8008fd8:	04c4b400 	.word	0x04c4b400
 8008fdc:	080158ac 	.word	0x080158ac
 8008fe0:	20000000 	.word	0x20000000
 8008fe4:	20000004 	.word	0x20000004

08008fe8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08c      	sub	sp, #48	@ 0x30
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009006:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	0c1b      	lsrs	r3, r3, #16
 800900c:	f003 030f 	and.w	r3, r3, #15
 8009010:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8009014:	029b      	lsls	r3, r3, #10
 8009016:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	0c1b      	lsrs	r3, r3, #16
 800901c:	f003 030f 	and.w	r3, r3, #15
 8009020:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8009022:	4b13      	ldr	r3, [pc, #76]	@ (8009070 <HAL_RCC_MCOConfig+0x88>)
 8009024:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009026:	2101      	movs	r1, #1
 8009028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902a:	fa01 f303 	lsl.w	r3, r1, r3
 800902e:	4910      	ldr	r1, [pc, #64]	@ (8009070 <HAL_RCC_MCOConfig+0x88>)
 8009030:	4313      	orrs	r3, r2
 8009032:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	b29b      	uxth	r3, r3
 8009038:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	0d1b      	lsrs	r3, r3, #20
 800903e:	b2db      	uxtb	r3, r3
 8009040:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8009042:	f107 0310 	add.w	r3, r7, #16
 8009046:	4619      	mov	r1, r3
 8009048:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800904a:	f7fc fe31 	bl	8005cb0 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 800904e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009050:	2b00      	cmp	r3, #0
 8009052:	d109      	bne.n	8009068 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8009054:	4b06      	ldr	r3, [pc, #24]	@ (8009070 <HAL_RCC_MCOConfig+0x88>)
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800905c:	68b9      	ldr	r1, [r7, #8]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	430b      	orrs	r3, r1
 8009062:	4903      	ldr	r1, [pc, #12]	@ (8009070 <HAL_RCC_MCOConfig+0x88>)
 8009064:	4313      	orrs	r3, r2
 8009066:	608b      	str	r3, [r1, #8]
  }
}
 8009068:	bf00      	nop
 800906a:	3730      	adds	r7, #48	@ 0x30
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	40021000 	.word	0x40021000

08009074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009074:	b480      	push	{r7}
 8009076:	b087      	sub	sp, #28
 8009078:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800907a:	4b2c      	ldr	r3, [pc, #176]	@ (800912c <HAL_RCC_GetSysClockFreq+0xb8>)
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	f003 030c 	and.w	r3, r3, #12
 8009082:	2b04      	cmp	r3, #4
 8009084:	d102      	bne.n	800908c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009086:	4b2a      	ldr	r3, [pc, #168]	@ (8009130 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009088:	613b      	str	r3, [r7, #16]
 800908a:	e047      	b.n	800911c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800908c:	4b27      	ldr	r3, [pc, #156]	@ (800912c <HAL_RCC_GetSysClockFreq+0xb8>)
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	f003 030c 	and.w	r3, r3, #12
 8009094:	2b08      	cmp	r3, #8
 8009096:	d102      	bne.n	800909e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009098:	4b26      	ldr	r3, [pc, #152]	@ (8009134 <HAL_RCC_GetSysClockFreq+0xc0>)
 800909a:	613b      	str	r3, [r7, #16]
 800909c:	e03e      	b.n	800911c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800909e:	4b23      	ldr	r3, [pc, #140]	@ (800912c <HAL_RCC_GetSysClockFreq+0xb8>)
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f003 030c 	and.w	r3, r3, #12
 80090a6:	2b0c      	cmp	r3, #12
 80090a8:	d136      	bne.n	8009118 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80090aa:	4b20      	ldr	r3, [pc, #128]	@ (800912c <HAL_RCC_GetSysClockFreq+0xb8>)
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	f003 0303 	and.w	r3, r3, #3
 80090b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80090b4:	4b1d      	ldr	r3, [pc, #116]	@ (800912c <HAL_RCC_GetSysClockFreq+0xb8>)
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	091b      	lsrs	r3, r3, #4
 80090ba:	f003 030f 	and.w	r3, r3, #15
 80090be:	3301      	adds	r3, #1
 80090c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2b03      	cmp	r3, #3
 80090c6:	d10c      	bne.n	80090e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80090c8:	4a1a      	ldr	r2, [pc, #104]	@ (8009134 <HAL_RCC_GetSysClockFreq+0xc0>)
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d0:	4a16      	ldr	r2, [pc, #88]	@ (800912c <HAL_RCC_GetSysClockFreq+0xb8>)
 80090d2:	68d2      	ldr	r2, [r2, #12]
 80090d4:	0a12      	lsrs	r2, r2, #8
 80090d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80090da:	fb02 f303 	mul.w	r3, r2, r3
 80090de:	617b      	str	r3, [r7, #20]
      break;
 80090e0:	e00c      	b.n	80090fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80090e2:	4a13      	ldr	r2, [pc, #76]	@ (8009130 <HAL_RCC_GetSysClockFreq+0xbc>)
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ea:	4a10      	ldr	r2, [pc, #64]	@ (800912c <HAL_RCC_GetSysClockFreq+0xb8>)
 80090ec:	68d2      	ldr	r2, [r2, #12]
 80090ee:	0a12      	lsrs	r2, r2, #8
 80090f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80090f4:	fb02 f303 	mul.w	r3, r2, r3
 80090f8:	617b      	str	r3, [r7, #20]
      break;
 80090fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80090fc:	4b0b      	ldr	r3, [pc, #44]	@ (800912c <HAL_RCC_GetSysClockFreq+0xb8>)
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	0e5b      	lsrs	r3, r3, #25
 8009102:	f003 0303 	and.w	r3, r3, #3
 8009106:	3301      	adds	r3, #1
 8009108:	005b      	lsls	r3, r3, #1
 800910a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	fbb2 f3f3 	udiv	r3, r2, r3
 8009114:	613b      	str	r3, [r7, #16]
 8009116:	e001      	b.n	800911c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009118:	2300      	movs	r3, #0
 800911a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800911c:	693b      	ldr	r3, [r7, #16]
}
 800911e:	4618      	mov	r0, r3
 8009120:	371c      	adds	r7, #28
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	40021000 	.word	0x40021000
 8009130:	00f42400 	.word	0x00f42400
 8009134:	007a1200 	.word	0x007a1200

08009138 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009138:	b480      	push	{r7}
 800913a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800913c:	4b03      	ldr	r3, [pc, #12]	@ (800914c <HAL_RCC_GetHCLKFreq+0x14>)
 800913e:	681b      	ldr	r3, [r3, #0]
}
 8009140:	4618      	mov	r0, r3
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	20000000 	.word	0x20000000

08009150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009154:	f7ff fff0 	bl	8009138 <HAL_RCC_GetHCLKFreq>
 8009158:	4602      	mov	r2, r0
 800915a:	4b06      	ldr	r3, [pc, #24]	@ (8009174 <HAL_RCC_GetPCLK1Freq+0x24>)
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	0a1b      	lsrs	r3, r3, #8
 8009160:	f003 0307 	and.w	r3, r3, #7
 8009164:	4904      	ldr	r1, [pc, #16]	@ (8009178 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009166:	5ccb      	ldrb	r3, [r1, r3]
 8009168:	f003 031f 	and.w	r3, r3, #31
 800916c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009170:	4618      	mov	r0, r3
 8009172:	bd80      	pop	{r7, pc}
 8009174:	40021000 	.word	0x40021000
 8009178:	080158bc 	.word	0x080158bc

0800917c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009180:	f7ff ffda 	bl	8009138 <HAL_RCC_GetHCLKFreq>
 8009184:	4602      	mov	r2, r0
 8009186:	4b06      	ldr	r3, [pc, #24]	@ (80091a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	0adb      	lsrs	r3, r3, #11
 800918c:	f003 0307 	and.w	r3, r3, #7
 8009190:	4904      	ldr	r1, [pc, #16]	@ (80091a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009192:	5ccb      	ldrb	r3, [r1, r3]
 8009194:	f003 031f 	and.w	r3, r3, #31
 8009198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800919c:	4618      	mov	r0, r3
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	40021000 	.word	0x40021000
 80091a4:	080158bc 	.word	0x080158bc

080091a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	220f      	movs	r2, #15
 80091b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80091b8:	4b12      	ldr	r3, [pc, #72]	@ (8009204 <HAL_RCC_GetClockConfig+0x5c>)
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	f003 0203 	and.w	r2, r3, #3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80091c4:	4b0f      	ldr	r3, [pc, #60]	@ (8009204 <HAL_RCC_GetClockConfig+0x5c>)
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80091d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009204 <HAL_RCC_GetClockConfig+0x5c>)
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80091dc:	4b09      	ldr	r3, [pc, #36]	@ (8009204 <HAL_RCC_GetClockConfig+0x5c>)
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	08db      	lsrs	r3, r3, #3
 80091e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80091ea:	4b07      	ldr	r3, [pc, #28]	@ (8009208 <HAL_RCC_GetClockConfig+0x60>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 020f 	and.w	r2, r3, #15
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	601a      	str	r2, [r3, #0]
}
 80091f6:	bf00      	nop
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	40021000 	.word	0x40021000
 8009208:	40022000 	.word	0x40022000

0800920c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800920c:	b480      	push	{r7}
 800920e:	b087      	sub	sp, #28
 8009210:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009212:	4b1e      	ldr	r3, [pc, #120]	@ (800928c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	f003 0303 	and.w	r3, r3, #3
 800921a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800921c:	4b1b      	ldr	r3, [pc, #108]	@ (800928c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	091b      	lsrs	r3, r3, #4
 8009222:	f003 030f 	and.w	r3, r3, #15
 8009226:	3301      	adds	r3, #1
 8009228:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	2b03      	cmp	r3, #3
 800922e:	d10c      	bne.n	800924a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009230:	4a17      	ldr	r2, [pc, #92]	@ (8009290 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	fbb2 f3f3 	udiv	r3, r2, r3
 8009238:	4a14      	ldr	r2, [pc, #80]	@ (800928c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800923a:	68d2      	ldr	r2, [r2, #12]
 800923c:	0a12      	lsrs	r2, r2, #8
 800923e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009242:	fb02 f303 	mul.w	r3, r2, r3
 8009246:	617b      	str	r3, [r7, #20]
    break;
 8009248:	e00c      	b.n	8009264 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800924a:	4a12      	ldr	r2, [pc, #72]	@ (8009294 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009252:	4a0e      	ldr	r2, [pc, #56]	@ (800928c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009254:	68d2      	ldr	r2, [r2, #12]
 8009256:	0a12      	lsrs	r2, r2, #8
 8009258:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800925c:	fb02 f303 	mul.w	r3, r2, r3
 8009260:	617b      	str	r3, [r7, #20]
    break;
 8009262:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009264:	4b09      	ldr	r3, [pc, #36]	@ (800928c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	0e5b      	lsrs	r3, r3, #25
 800926a:	f003 0303 	and.w	r3, r3, #3
 800926e:	3301      	adds	r3, #1
 8009270:	005b      	lsls	r3, r3, #1
 8009272:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	fbb2 f3f3 	udiv	r3, r2, r3
 800927c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800927e:	687b      	ldr	r3, [r7, #4]
}
 8009280:	4618      	mov	r0, r3
 8009282:	371c      	adds	r7, #28
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr
 800928c:	40021000 	.word	0x40021000
 8009290:	007a1200 	.word	0x007a1200
 8009294:	00f42400 	.word	0x00f42400

08009298 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b086      	sub	sp, #24
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092a0:	2300      	movs	r3, #0
 80092a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092a4:	2300      	movs	r3, #0
 80092a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f000 8098 	beq.w	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092b6:	2300      	movs	r3, #0
 80092b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092ba:	4b43      	ldr	r3, [pc, #268]	@ (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10d      	bne.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092c6:	4b40      	ldr	r3, [pc, #256]	@ (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092ca:	4a3f      	ldr	r2, [pc, #252]	@ (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80092d2:	4b3d      	ldr	r3, [pc, #244]	@ (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092da:	60bb      	str	r3, [r7, #8]
 80092dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092de:	2301      	movs	r3, #1
 80092e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092e2:	4b3a      	ldr	r3, [pc, #232]	@ (80093cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a39      	ldr	r2, [pc, #228]	@ (80093cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80092e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092ee:	f7fa ff97 	bl	8004220 <HAL_GetTick>
 80092f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092f4:	e009      	b.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092f6:	f7fa ff93 	bl	8004220 <HAL_GetTick>
 80092fa:	4602      	mov	r2, r0
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	2b02      	cmp	r3, #2
 8009302:	d902      	bls.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009304:	2303      	movs	r3, #3
 8009306:	74fb      	strb	r3, [r7, #19]
        break;
 8009308:	e005      	b.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800930a:	4b30      	ldr	r3, [pc, #192]	@ (80093cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009312:	2b00      	cmp	r3, #0
 8009314:	d0ef      	beq.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009316:	7cfb      	ldrb	r3, [r7, #19]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d159      	bne.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800931c:	4b2a      	ldr	r3, [pc, #168]	@ (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800931e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009326:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d01e      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009332:	697a      	ldr	r2, [r7, #20]
 8009334:	429a      	cmp	r2, r3
 8009336:	d019      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009338:	4b23      	ldr	r3, [pc, #140]	@ (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800933a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800933e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009342:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009344:	4b20      	ldr	r3, [pc, #128]	@ (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800934a:	4a1f      	ldr	r2, [pc, #124]	@ (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800934c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009354:	4b1c      	ldr	r3, [pc, #112]	@ (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800935a:	4a1b      	ldr	r2, [pc, #108]	@ (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800935c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009360:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009364:	4a18      	ldr	r2, [pc, #96]	@ (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	2b00      	cmp	r3, #0
 8009374:	d016      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009376:	f7fa ff53 	bl	8004220 <HAL_GetTick>
 800937a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800937c:	e00b      	b.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800937e:	f7fa ff4f 	bl	8004220 <HAL_GetTick>
 8009382:	4602      	mov	r2, r0
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800938c:	4293      	cmp	r3, r2
 800938e:	d902      	bls.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	74fb      	strb	r3, [r7, #19]
            break;
 8009394:	e006      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009396:	4b0c      	ldr	r3, [pc, #48]	@ (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800939c:	f003 0302 	and.w	r3, r3, #2
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d0ec      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80093a4:	7cfb      	ldrb	r3, [r7, #19]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10b      	bne.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093aa:	4b07      	ldr	r3, [pc, #28]	@ (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093b8:	4903      	ldr	r1, [pc, #12]	@ (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093ba:	4313      	orrs	r3, r2
 80093bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80093c0:	e008      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80093c2:	7cfb      	ldrb	r3, [r7, #19]
 80093c4:	74bb      	strb	r3, [r7, #18]
 80093c6:	e005      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80093c8:	40021000 	.word	0x40021000
 80093cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d0:	7cfb      	ldrb	r3, [r7, #19]
 80093d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80093d4:	7c7b      	ldrb	r3, [r7, #17]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d105      	bne.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093da:	4ba7      	ldr	r3, [pc, #668]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093de:	4aa6      	ldr	r2, [pc, #664]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00a      	beq.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80093f2:	4ba1      	ldr	r3, [pc, #644]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093f8:	f023 0203 	bic.w	r2, r3, #3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	499d      	ldr	r1, [pc, #628]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009402:	4313      	orrs	r3, r2
 8009404:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0302 	and.w	r3, r3, #2
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00a      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009414:	4b98      	ldr	r3, [pc, #608]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800941a:	f023 020c 	bic.w	r2, r3, #12
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	4995      	ldr	r1, [pc, #596]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009424:	4313      	orrs	r3, r2
 8009426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 0304 	and.w	r3, r3, #4
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00a      	beq.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009436:	4b90      	ldr	r3, [pc, #576]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800943c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	498c      	ldr	r1, [pc, #560]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009446:	4313      	orrs	r3, r2
 8009448:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f003 0308 	and.w	r3, r3, #8
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00a      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009458:	4b87      	ldr	r3, [pc, #540]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800945a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800945e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	4984      	ldr	r1, [pc, #528]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009468:	4313      	orrs	r3, r2
 800946a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 0310 	and.w	r3, r3, #16
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00a      	beq.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800947a:	4b7f      	ldr	r3, [pc, #508]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800947c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009480:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	695b      	ldr	r3, [r3, #20]
 8009488:	497b      	ldr	r1, [pc, #492]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800948a:	4313      	orrs	r3, r2
 800948c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 0320 	and.w	r3, r3, #32
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00a      	beq.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800949c:	4b76      	ldr	r3, [pc, #472]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800949e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	4973      	ldr	r1, [pc, #460]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ac:	4313      	orrs	r3, r2
 80094ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00a      	beq.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80094be:	4b6e      	ldr	r3, [pc, #440]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	69db      	ldr	r3, [r3, #28]
 80094cc:	496a      	ldr	r1, [pc, #424]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ce:	4313      	orrs	r3, r2
 80094d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00a      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80094e0:	4b65      	ldr	r3, [pc, #404]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a1b      	ldr	r3, [r3, #32]
 80094ee:	4962      	ldr	r1, [pc, #392]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094f0:	4313      	orrs	r3, r2
 80094f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00a      	beq.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009502:	4b5d      	ldr	r3, [pc, #372]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009508:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009510:	4959      	ldr	r1, [pc, #356]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009512:	4313      	orrs	r3, r2
 8009514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00a      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009524:	4b54      	ldr	r3, [pc, #336]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800952a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009532:	4951      	ldr	r1, [pc, #324]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009534:	4313      	orrs	r3, r2
 8009536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009542:	2b00      	cmp	r3, #0
 8009544:	d015      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009546:	4b4c      	ldr	r3, [pc, #304]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800954c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009554:	4948      	ldr	r1, [pc, #288]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009556:	4313      	orrs	r3, r2
 8009558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009560:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009564:	d105      	bne.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009566:	4b44      	ldr	r3, [pc, #272]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	4a43      	ldr	r2, [pc, #268]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800956c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009570:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800957a:	2b00      	cmp	r3, #0
 800957c:	d015      	beq.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800957e:	4b3e      	ldr	r3, [pc, #248]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009584:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800958c:	493a      	ldr	r1, [pc, #232]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800958e:	4313      	orrs	r3, r2
 8009590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009598:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800959c:	d105      	bne.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800959e:	4b36      	ldr	r3, [pc, #216]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	4a35      	ldr	r2, [pc, #212]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095a8:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d015      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80095b6:	4b30      	ldr	r3, [pc, #192]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095bc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095c4:	492c      	ldr	r1, [pc, #176]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095c6:	4313      	orrs	r3, r2
 80095c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095d4:	d105      	bne.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095d6:	4b28      	ldr	r3, [pc, #160]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	4a27      	ldr	r2, [pc, #156]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095e0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d015      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80095ee:	4b22      	ldr	r3, [pc, #136]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095fc:	491e      	ldr	r1, [pc, #120]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095fe:	4313      	orrs	r3, r2
 8009600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009608:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800960c:	d105      	bne.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800960e:	4b1a      	ldr	r3, [pc, #104]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	4a19      	ldr	r2, [pc, #100]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009614:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009618:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d015      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009626:	4b14      	ldr	r3, [pc, #80]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800962c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009634:	4910      	ldr	r1, [pc, #64]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009636:	4313      	orrs	r3, r2
 8009638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009640:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009644:	d105      	bne.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009646:	4b0c      	ldr	r3, [pc, #48]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	4a0b      	ldr	r2, [pc, #44]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800964c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009650:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800965a:	2b00      	cmp	r3, #0
 800965c:	d018      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800965e:	4b06      	ldr	r3, [pc, #24]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009664:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966c:	4902      	ldr	r1, [pc, #8]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800966e:	4313      	orrs	r3, r2
 8009670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	e001      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009678:	40021000 	.word	0x40021000
 800967c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800967e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009682:	d105      	bne.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009684:	4b21      	ldr	r3, [pc, #132]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	4a20      	ldr	r2, [pc, #128]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800968a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800968e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d015      	beq.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800969c:	4b1b      	ldr	r3, [pc, #108]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800969e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096a2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096aa:	4918      	ldr	r1, [pc, #96]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80096ac:	4313      	orrs	r3, r2
 80096ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096ba:	d105      	bne.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80096bc:	4b13      	ldr	r3, [pc, #76]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	4a12      	ldr	r2, [pc, #72]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80096c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096c6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d015      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80096d4:	4b0d      	ldr	r3, [pc, #52]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80096d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80096da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096e2:	490a      	ldr	r1, [pc, #40]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80096e4:	4313      	orrs	r3, r2
 80096e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80096f2:	d105      	bne.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096f4:	4b05      	ldr	r3, [pc, #20]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	4a04      	ldr	r2, [pc, #16]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80096fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009700:	7cbb      	ldrb	r3, [r7, #18]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3718      	adds	r7, #24
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	40021000 	.word	0x40021000

08009710 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b08a      	sub	sp, #40	@ 0x28
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8009718:	2300      	movs	r3, #0
 800971a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  FlagStatus       backupchanged = RESET;
 800971e:	2300      	movs	r3, #0
 8009720:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  __LSCO_CLK_ENABLE();
 8009724:	4b2d      	ldr	r3, [pc, #180]	@ (80097dc <HAL_RCCEx_EnableLSCO+0xcc>)
 8009726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009728:	4a2c      	ldr	r2, [pc, #176]	@ (80097dc <HAL_RCCEx_EnableLSCO+0xcc>)
 800972a:	f043 0301 	orr.w	r3, r3, #1
 800972e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009730:	4b2a      	ldr	r3, [pc, #168]	@ (80097dc <HAL_RCCEx_EnableLSCO+0xcc>)
 8009732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009734:	f003 0301 	and.w	r3, r3, #1
 8009738:	60fb      	str	r3, [r7, #12]
 800973a:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 800973c:	2304      	movs	r3, #4
 800973e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009740:	2303      	movs	r3, #3
 8009742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009744:	2302      	movs	r3, #2
 8009746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009748:	2300      	movs	r3, #0
 800974a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 800974c:	f107 0310 	add.w	r3, r7, #16
 8009750:	4619      	mov	r1, r3
 8009752:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009756:	f7fc faab 	bl	8005cb0 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800975a:	4b20      	ldr	r3, [pc, #128]	@ (80097dc <HAL_RCCEx_EnableLSCO+0xcc>)
 800975c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800975e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10e      	bne.n	8009784 <HAL_RCCEx_EnableLSCO+0x74>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009766:	4b1d      	ldr	r3, [pc, #116]	@ (80097dc <HAL_RCCEx_EnableLSCO+0xcc>)
 8009768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800976a:	4a1c      	ldr	r2, [pc, #112]	@ (80097dc <HAL_RCCEx_EnableLSCO+0xcc>)
 800976c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009770:	6593      	str	r3, [r2, #88]	@ 0x58
 8009772:	4b1a      	ldr	r3, [pc, #104]	@ (80097dc <HAL_RCCEx_EnableLSCO+0xcc>)
 8009774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800977a:	60bb      	str	r3, [r7, #8]
 800977c:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 800977e:	2301      	movs	r3, #1
 8009780:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009784:	4b16      	ldr	r3, [pc, #88]	@ (80097e0 <HAL_RCCEx_EnableLSCO+0xd0>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800978c:	2b00      	cmp	r3, #0
 800978e:	d104      	bne.n	800979a <HAL_RCCEx_EnableLSCO+0x8a>
  {
    HAL_PWR_EnableBkUpAccess();
 8009790:	f7fe fe98 	bl	80084c4 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 8009794:	2301      	movs	r3, #1
 8009796:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 800979a:	4b10      	ldr	r3, [pc, #64]	@ (80097dc <HAL_RCCEx_EnableLSCO+0xcc>)
 800979c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097a0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	4a0c      	ldr	r2, [pc, #48]	@ (80097dc <HAL_RCCEx_EnableLSCO+0xcc>)
 80097aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80097ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  if(backupchanged == SET)
 80097b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d101      	bne.n	80097be <HAL_RCCEx_EnableLSCO+0xae>
  {
    HAL_PWR_DisableBkUpAccess();
 80097ba:	f7fe fe93 	bl	80084e4 <HAL_PWR_DisableBkUpAccess>
  }
  if(pwrclkchanged == SET)
 80097be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d105      	bne.n	80097d2 <HAL_RCCEx_EnableLSCO+0xc2>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 80097c6:	4b05      	ldr	r3, [pc, #20]	@ (80097dc <HAL_RCCEx_EnableLSCO+0xcc>)
 80097c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097ca:	4a04      	ldr	r2, [pc, #16]	@ (80097dc <HAL_RCCEx_EnableLSCO+0xcc>)
 80097cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
}
 80097d2:	bf00      	nop
 80097d4:	3728      	adds	r7, #40	@ 0x28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	40021000 	.word	0x40021000
 80097e0:	40007000 	.word	0x40007000

080097e4 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80097ec:	4b1c      	ldr	r3, [pc, #112]	@ (8009860 <HAL_RCCEx_CRSConfig+0x7c>)
 80097ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097f0:	4a1b      	ldr	r2, [pc, #108]	@ (8009860 <HAL_RCCEx_CRSConfig+0x7c>)
 80097f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097f6:	6393      	str	r3, [r2, #56]	@ 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 80097f8:	4b19      	ldr	r3, [pc, #100]	@ (8009860 <HAL_RCCEx_CRSConfig+0x7c>)
 80097fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097fc:	4a18      	ldr	r2, [pc, #96]	@ (8009860 <HAL_RCCEx_CRSConfig+0x7c>)
 80097fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009802:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	431a      	orrs	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	4313      	orrs	r3, r2
 8009814:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	4313      	orrs	r3, r2
 800981e:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	041b      	lsls	r3, r3, #16
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	4313      	orrs	r3, r2
 800982a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800982c:	4a0d      	ldr	r2, [pc, #52]	@ (8009864 <HAL_RCCEx_CRSConfig+0x80>)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8009832:	4b0c      	ldr	r3, [pc, #48]	@ (8009864 <HAL_RCCEx_CRSConfig+0x80>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	021b      	lsls	r3, r3, #8
 8009840:	4908      	ldr	r1, [pc, #32]	@ (8009864 <HAL_RCCEx_CRSConfig+0x80>)
 8009842:	4313      	orrs	r3, r2
 8009844:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8009846:	4b07      	ldr	r3, [pc, #28]	@ (8009864 <HAL_RCCEx_CRSConfig+0x80>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a06      	ldr	r2, [pc, #24]	@ (8009864 <HAL_RCCEx_CRSConfig+0x80>)
 800984c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009850:	6013      	str	r3, [r2, #0]
}
 8009852:	bf00      	nop
 8009854:	3714      	adds	r7, #20
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	40021000 	.word	0x40021000
 8009864:	40002000 	.word	0x40002000

08009868 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d101      	bne.n	800987a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e027      	b.n	80098ca <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	7a5b      	ldrb	r3, [r3, #9]
 800987e:	b2db      	uxtb	r3, r3
 8009880:	2b00      	cmp	r3, #0
 8009882:	d105      	bne.n	8009890 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f7f8 fe1e 	bl	80024cc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2202      	movs	r2, #2
 8009894:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f023 0108 	bic.w	r1, r3, #8
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	430a      	orrs	r2, r1
 80098aa:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f042 0204 	orr.w	r2, r2, #4
 80098ba:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b084      	sub	sp, #16
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d070      	beq.n	80099c6 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d106      	bne.n	80098fe <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7f8 fe1b 	bl	8002534 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2202      	movs	r2, #2
 8009902:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	f003 0310 	and.w	r3, r3, #16
 8009910:	2b10      	cmp	r3, #16
 8009912:	d04f      	beq.n	80099b4 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	22ca      	movs	r2, #202	@ 0xca
 800991a:	625a      	str	r2, [r3, #36]	@ 0x24
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2253      	movs	r2, #83	@ 0x53
 8009922:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f877 	bl	8009a18 <RTC_EnterInitMode>
 800992a:	4603      	mov	r3, r0
 800992c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800992e:	7bfb      	ldrb	r3, [r7, #15]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d126      	bne.n	8009982 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	699b      	ldr	r3, [r3, #24]
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	6812      	ldr	r2, [r2, #0]
 800993e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8009942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009946:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	6999      	ldr	r1, [r3, #24]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	685a      	ldr	r2, [r3, #4]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	431a      	orrs	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	431a      	orrs	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	430a      	orrs	r2, r1
 8009964:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68d9      	ldr	r1, [r3, #12]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	041a      	lsls	r2, r3, #16
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	430a      	orrs	r2, r1
 8009976:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f883 	bl	8009a84 <RTC_ExitInitMode>
 800997e:	4603      	mov	r3, r0
 8009980:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d110      	bne.n	80099aa <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a1a      	ldr	r2, [r3, #32]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	69db      	ldr	r3, [r3, #28]
 800999a:	431a      	orrs	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	695b      	ldr	r3, [r3, #20]
 80099a0:	431a      	orrs	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	430a      	orrs	r2, r1
 80099a8:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	22ff      	movs	r2, #255	@ 0xff
 80099b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80099b2:	e001      	b.n	80099b8 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d103      	bne.n	80099c6 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 80099c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a0d      	ldr	r2, [pc, #52]	@ (8009a14 <HAL_RTC_WaitForSynchro+0x44>)
 80099de:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80099e0:	f7fa fc1e 	bl	8004220 <HAL_GetTick>
 80099e4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80099e6:	e009      	b.n	80099fc <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80099e8:	f7fa fc1a 	bl	8004220 <HAL_GetTick>
 80099ec:	4602      	mov	r2, r0
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	1ad3      	subs	r3, r2, r3
 80099f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80099f6:	d901      	bls.n	80099fc <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80099f8:	2303      	movs	r3, #3
 80099fa:	e007      	b.n	8009a0c <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	f003 0320 	and.w	r3, r3, #32
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d0ee      	beq.n	80099e8 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	0001005f 	.word	0x0001005f

08009a18 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a20:	2300      	movs	r3, #0
 8009a22:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d123      	bne.n	8009a7a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68da      	ldr	r2, [r3, #12]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009a40:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009a42:	f7fa fbed 	bl	8004220 <HAL_GetTick>
 8009a46:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009a48:	e00d      	b.n	8009a66 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009a4a:	f7fa fbe9 	bl	8004220 <HAL_GetTick>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	1ad3      	subs	r3, r2, r3
 8009a54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a58:	d905      	bls.n	8009a66 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2203      	movs	r2, #3
 8009a62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d102      	bne.n	8009a7a <RTC_EnterInitMode+0x62>
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
 8009a76:	2b03      	cmp	r3, #3
 8009a78:	d1e7      	bne.n	8009a4a <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8009a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68da      	ldr	r2, [r3, #12]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a9e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	699b      	ldr	r3, [r3, #24]
 8009aa6:	f003 0320 	and.w	r3, r3, #32
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10c      	bne.n	8009ac8 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7ff ff8e 	bl	80099d0 <HAL_RTC_WaitForSynchro>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d022      	beq.n	8009b00 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2203      	movs	r2, #3
 8009abe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	73fb      	strb	r3, [r7, #15]
 8009ac6:	e01b      	b.n	8009b00 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	699a      	ldr	r2, [r3, #24]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f022 0220 	bic.w	r2, r2, #32
 8009ad6:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7ff ff79 	bl	80099d0 <HAL_RTC_WaitForSynchro>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d005      	beq.n	8009af0 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2203      	movs	r2, #3
 8009ae8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8009aec:	2303      	movs	r3, #3
 8009aee:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	699a      	ldr	r2, [r3, #24]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f042 0220 	orr.w	r2, r2, #32
 8009afe:	619a      	str	r2, [r3, #24]
  }

  return status;
 8009b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b084      	sub	sp, #16
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d101      	bne.n	8009b20 <HAL_RTCEx_SetRefClock+0x16>
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	e034      	b.n	8009b8a <HAL_RTCEx_SetRefClock+0x80>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2202      	movs	r2, #2
 8009b2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	22ca      	movs	r2, #202	@ 0xca
 8009b36:	625a      	str	r2, [r3, #36]	@ 0x24
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2253      	movs	r2, #83	@ 0x53
 8009b3e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f7ff ff69 	bl	8009a18 <RTC_EnterInitMode>
 8009b46:	4603      	mov	r3, r0
 8009b48:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d10c      	bne.n	8009b6a <HAL_RTCEx_SetRefClock+0x60>
  {
    /* Enable clockref detection */
    SET_BIT(hrtc->Instance->CR, RTC_CR_REFCKON);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	699a      	ldr	r2, [r3, #24]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f042 0210 	orr.w	r2, r2, #16
 8009b5e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f7ff ff8f 	bl	8009a84 <RTC_ExitInitMode>
 8009b66:	4603      	mov	r3, r0
 8009b68:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	22ff      	movs	r2, #255	@ 0xff
 8009b70:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009b72:	7bfb      	ldrb	r3, [r7, #15]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d103      	bne.n	8009b80 <HAL_RTCEx_SetRefClock+0x76>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8009b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b084      	sub	sp, #16
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d101      	bne.n	8009ba4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e09d      	b.n	8009ce0 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d108      	bne.n	8009bbe <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009bb4:	d009      	beq.n	8009bca <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	61da      	str	r2, [r3, #28]
 8009bbc:	e005      	b.n	8009bca <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d106      	bne.n	8009bea <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f7f8 fd07 	bl	80025f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2202      	movs	r2, #2
 8009bee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c00:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009c0a:	d902      	bls.n	8009c12 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	60fb      	str	r3, [r7, #12]
 8009c10:	e002      	b.n	8009c18 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009c12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c16:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009c20:	d007      	beq.n	8009c32 <HAL_SPI_Init+0xa0>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009c2a:	d002      	beq.n	8009c32 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009c42:	431a      	orrs	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	f003 0302 	and.w	r3, r3, #2
 8009c4c:	431a      	orrs	r2, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	695b      	ldr	r3, [r3, #20]
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	431a      	orrs	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	699b      	ldr	r3, [r3, #24]
 8009c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c60:	431a      	orrs	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	69db      	ldr	r3, [r3, #28]
 8009c66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c6a:	431a      	orrs	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a1b      	ldr	r3, [r3, #32]
 8009c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c74:	ea42 0103 	orr.w	r1, r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c7c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	430a      	orrs	r2, r1
 8009c86:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	0c1b      	lsrs	r3, r3, #16
 8009c8e:	f003 0204 	and.w	r2, r3, #4
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c96:	f003 0310 	and.w	r3, r3, #16
 8009c9a:	431a      	orrs	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ca0:	f003 0308 	and.w	r3, r3, #8
 8009ca4:	431a      	orrs	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009cae:	ea42 0103 	orr.w	r1, r2, r3
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	430a      	orrs	r2, r1
 8009cbe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	69da      	ldr	r2, [r3, #28]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009cce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b088      	sub	sp, #32
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	603b      	str	r3, [r7, #0]
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009cf8:	f7fa fa92 	bl	8004220 <HAL_GetTick>
 8009cfc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009cfe:	88fb      	ldrh	r3, [r7, #6]
 8009d00:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d001      	beq.n	8009d12 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009d0e:	2302      	movs	r3, #2
 8009d10:	e15c      	b.n	8009fcc <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d002      	beq.n	8009d1e <HAL_SPI_Transmit+0x36>
 8009d18:	88fb      	ldrh	r3, [r7, #6]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d101      	bne.n	8009d22 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e154      	b.n	8009fcc <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d101      	bne.n	8009d30 <HAL_SPI_Transmit+0x48>
 8009d2c:	2302      	movs	r3, #2
 8009d2e:	e14d      	b.n	8009fcc <HAL_SPI_Transmit+0x2e4>
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2203      	movs	r2, #3
 8009d3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	88fa      	ldrh	r2, [r7, #6]
 8009d50:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	88fa      	ldrh	r2, [r7, #6]
 8009d56:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2200      	movs	r2, #0
 8009d78:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d82:	d10f      	bne.n	8009da4 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009da2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dae:	2b40      	cmp	r3, #64	@ 0x40
 8009db0:	d007      	beq.n	8009dc2 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009dc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009dca:	d952      	bls.n	8009e72 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d002      	beq.n	8009dda <HAL_SPI_Transmit+0xf2>
 8009dd4:	8b7b      	ldrh	r3, [r7, #26]
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d145      	bne.n	8009e66 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dde:	881a      	ldrh	r2, [r3, #0]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dea:	1c9a      	adds	r2, r3, #2
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	3b01      	subs	r3, #1
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009dfe:	e032      	b.n	8009e66 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	f003 0302 	and.w	r3, r3, #2
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d112      	bne.n	8009e34 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e12:	881a      	ldrh	r2, [r3, #0]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e1e:	1c9a      	adds	r2, r3, #2
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e32:	e018      	b.n	8009e66 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e34:	f7fa f9f4 	bl	8004220 <HAL_GetTick>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d803      	bhi.n	8009e4c <HAL_SPI_Transmit+0x164>
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e4a:	d102      	bne.n	8009e52 <HAL_SPI_Transmit+0x16a>
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d109      	bne.n	8009e66 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009e62:	2303      	movs	r3, #3
 8009e64:	e0b2      	b.n	8009fcc <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1c7      	bne.n	8009e00 <HAL_SPI_Transmit+0x118>
 8009e70:	e083      	b.n	8009f7a <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d002      	beq.n	8009e80 <HAL_SPI_Transmit+0x198>
 8009e7a:	8b7b      	ldrh	r3, [r7, #26]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d177      	bne.n	8009f70 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d912      	bls.n	8009eb0 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e8e:	881a      	ldrh	r2, [r3, #0]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e9a:	1c9a      	adds	r2, r3, #2
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	3b02      	subs	r3, #2
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009eae:	e05f      	b.n	8009f70 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	330c      	adds	r3, #12
 8009eba:	7812      	ldrb	r2, [r2, #0]
 8009ebc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ec2:	1c5a      	adds	r2, r3, #1
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009ed6:	e04b      	b.n	8009f70 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	f003 0302 	and.w	r3, r3, #2
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d12b      	bne.n	8009f3e <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d912      	bls.n	8009f16 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ef4:	881a      	ldrh	r2, [r3, #0]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f00:	1c9a      	adds	r2, r3, #2
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	3b02      	subs	r3, #2
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009f14:	e02c      	b.n	8009f70 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	330c      	adds	r3, #12
 8009f20:	7812      	ldrb	r2, [r2, #0]
 8009f22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f28:	1c5a      	adds	r2, r3, #1
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	3b01      	subs	r3, #1
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009f3c:	e018      	b.n	8009f70 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f3e:	f7fa f96f 	bl	8004220 <HAL_GetTick>
 8009f42:	4602      	mov	r2, r0
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	683a      	ldr	r2, [r7, #0]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d803      	bhi.n	8009f56 <HAL_SPI_Transmit+0x26e>
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f54:	d102      	bne.n	8009f5c <HAL_SPI_Transmit+0x274>
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d109      	bne.n	8009f70 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	e02d      	b.n	8009fcc <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1ae      	bne.n	8009ed8 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f7a:	69fa      	ldr	r2, [r7, #28]
 8009f7c:	6839      	ldr	r1, [r7, #0]
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f000 fcf6 	bl	800a970 <SPI_EndRxTxTransaction>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d002      	beq.n	8009f90 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2220      	movs	r2, #32
 8009f8e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f98:	2300      	movs	r3, #0
 8009f9a:	617b      	str	r3, [r7, #20]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	617b      	str	r3, [r7, #20]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	617b      	str	r3, [r7, #20]
 8009fac:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d001      	beq.n	8009fca <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e000      	b.n	8009fcc <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8009fca:	2300      	movs	r3, #0
  }
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3720      	adds	r7, #32
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b088      	sub	sp, #32
 8009fd8:	af02      	add	r7, sp, #8
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	603b      	str	r3, [r7, #0]
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d001      	beq.n	8009ff4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8009ff0:	2302      	movs	r3, #2
 8009ff2:	e123      	b.n	800a23c <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d002      	beq.n	800a000 <HAL_SPI_Receive+0x2c>
 8009ffa:	88fb      	ldrh	r3, [r7, #6]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d101      	bne.n	800a004 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e11b      	b.n	800a23c <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a00c:	d112      	bne.n	800a034 <HAL_SPI_Receive+0x60>
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10e      	bne.n	800a034 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2204      	movs	r2, #4
 800a01a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a01e:	88fa      	ldrh	r2, [r7, #6]
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	9300      	str	r3, [sp, #0]
 800a024:	4613      	mov	r3, r2
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	68b9      	ldr	r1, [r7, #8]
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f000 f90a 	bl	800a244 <HAL_SPI_TransmitReceive>
 800a030:	4603      	mov	r3, r0
 800a032:	e103      	b.n	800a23c <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a034:	f7fa f8f4 	bl	8004220 <HAL_GetTick>
 800a038:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a040:	2b01      	cmp	r3, #1
 800a042:	d101      	bne.n	800a048 <HAL_SPI_Receive+0x74>
 800a044:	2302      	movs	r3, #2
 800a046:	e0f9      	b.n	800a23c <HAL_SPI_Receive+0x268>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2201      	movs	r2, #1
 800a04c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2204      	movs	r2, #4
 800a054:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	88fa      	ldrh	r2, [r7, #6]
 800a068:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	88fa      	ldrh	r2, [r7, #6]
 800a070:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2200      	movs	r2, #0
 800a078:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a09a:	d908      	bls.n	800a0ae <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	685a      	ldr	r2, [r3, #4]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a0aa:	605a      	str	r2, [r3, #4]
 800a0ac:	e007      	b.n	800a0be <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	685a      	ldr	r2, [r3, #4]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a0bc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0c6:	d10f      	bne.n	800a0e8 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a0e6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0f2:	2b40      	cmp	r3, #64	@ 0x40
 800a0f4:	d007      	beq.n	800a106 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a104:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a10e:	d875      	bhi.n	800a1fc <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a110:	e037      	b.n	800a182 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	f003 0301 	and.w	r3, r3, #1
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d117      	bne.n	800a150 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f103 020c 	add.w	r2, r3, #12
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a12c:	7812      	ldrb	r2, [r2, #0]
 800a12e:	b2d2      	uxtb	r2, r2
 800a130:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a136:	1c5a      	adds	r2, r3, #1
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a142:	b29b      	uxth	r3, r3
 800a144:	3b01      	subs	r3, #1
 800a146:	b29a      	uxth	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800a14e:	e018      	b.n	800a182 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a150:	f7fa f866 	bl	8004220 <HAL_GetTick>
 800a154:	4602      	mov	r2, r0
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d803      	bhi.n	800a168 <HAL_SPI_Receive+0x194>
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a166:	d102      	bne.n	800a16e <HAL_SPI_Receive+0x19a>
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d109      	bne.n	800a182 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2201      	movs	r2, #1
 800a172:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2200      	movs	r2, #0
 800a17a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	e05c      	b.n	800a23c <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a188:	b29b      	uxth	r3, r3
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1c1      	bne.n	800a112 <HAL_SPI_Receive+0x13e>
 800a18e:	e03b      	b.n	800a208 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	f003 0301 	and.w	r3, r3, #1
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d115      	bne.n	800a1ca <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	68da      	ldr	r2, [r3, #12]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1a8:	b292      	uxth	r2, r2
 800a1aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1b0:	1c9a      	adds	r2, r3, #2
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800a1c8:	e018      	b.n	800a1fc <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1ca:	f7fa f829 	bl	8004220 <HAL_GetTick>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	1ad3      	subs	r3, r2, r3
 800a1d4:	683a      	ldr	r2, [r7, #0]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d803      	bhi.n	800a1e2 <HAL_SPI_Receive+0x20e>
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a1e0:	d102      	bne.n	800a1e8 <HAL_SPI_Receive+0x214>
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d109      	bne.n	800a1fc <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	e01f      	b.n	800a23c <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a202:	b29b      	uxth	r3, r3
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1c3      	bne.n	800a190 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a208:	697a      	ldr	r2, [r7, #20]
 800a20a:	6839      	ldr	r1, [r7, #0]
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f000 fb57 	bl	800a8c0 <SPI_EndRxTransaction>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d002      	beq.n	800a21e <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2220      	movs	r2, #32
 800a21c:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2201      	movs	r2, #1
 800a222:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a232:	2b00      	cmp	r3, #0
 800a234:	d001      	beq.n	800a23a <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800a236:	2301      	movs	r3, #1
 800a238:	e000      	b.n	800a23c <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800a23a:	2300      	movs	r3, #0
  }
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3718      	adds	r7, #24
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b08a      	sub	sp, #40	@ 0x28
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
 800a250:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a252:	2301      	movs	r3, #1
 800a254:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a256:	f7f9 ffe3 	bl	8004220 <HAL_GetTick>
 800a25a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a262:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a26a:	887b      	ldrh	r3, [r7, #2]
 800a26c:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800a26e:	887b      	ldrh	r3, [r7, #2]
 800a270:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a272:	7ffb      	ldrb	r3, [r7, #31]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d00c      	beq.n	800a292 <HAL_SPI_TransmitReceive+0x4e>
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a27e:	d106      	bne.n	800a28e <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d102      	bne.n	800a28e <HAL_SPI_TransmitReceive+0x4a>
 800a288:	7ffb      	ldrb	r3, [r7, #31]
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	d001      	beq.n	800a292 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800a28e:	2302      	movs	r3, #2
 800a290:	e1f3      	b.n	800a67a <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d005      	beq.n	800a2a4 <HAL_SPI_TransmitReceive+0x60>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d002      	beq.n	800a2a4 <HAL_SPI_TransmitReceive+0x60>
 800a29e:	887b      	ldrh	r3, [r7, #2]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d101      	bne.n	800a2a8 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e1e8      	b.n	800a67a <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d101      	bne.n	800a2b6 <HAL_SPI_TransmitReceive+0x72>
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	e1e1      	b.n	800a67a <HAL_SPI_TransmitReceive+0x436>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	2b04      	cmp	r3, #4
 800a2c8:	d003      	beq.n	800a2d2 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2205      	movs	r2, #5
 800a2ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	887a      	ldrh	r2, [r7, #2]
 800a2e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	887a      	ldrh	r2, [r7, #2]
 800a2ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	68ba      	ldr	r2, [r7, #8]
 800a2f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	887a      	ldrh	r2, [r7, #2]
 800a2f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	887a      	ldrh	r2, [r7, #2]
 800a2fe:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2200      	movs	r2, #0
 800a30a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a314:	d802      	bhi.n	800a31c <HAL_SPI_TransmitReceive+0xd8>
 800a316:	8abb      	ldrh	r3, [r7, #20]
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d908      	bls.n	800a32e <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a32a:	605a      	str	r2, [r3, #4]
 800a32c:	e007      	b.n	800a33e <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	685a      	ldr	r2, [r3, #4]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a33c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a348:	2b40      	cmp	r3, #64	@ 0x40
 800a34a:	d007      	beq.n	800a35c <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a35a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a364:	f240 8083 	bls.w	800a46e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d002      	beq.n	800a376 <HAL_SPI_TransmitReceive+0x132>
 800a370:	8afb      	ldrh	r3, [r7, #22]
 800a372:	2b01      	cmp	r3, #1
 800a374:	d16f      	bne.n	800a456 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a37a:	881a      	ldrh	r2, [r3, #0]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a386:	1c9a      	adds	r2, r3, #2
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a390:	b29b      	uxth	r3, r3
 800a392:	3b01      	subs	r3, #1
 800a394:	b29a      	uxth	r2, r3
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a39a:	e05c      	b.n	800a456 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	f003 0302 	and.w	r3, r3, #2
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d11b      	bne.n	800a3e2 <HAL_SPI_TransmitReceive+0x19e>
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d016      	beq.n	800a3e2 <HAL_SPI_TransmitReceive+0x19e>
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d113      	bne.n	800a3e2 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3be:	881a      	ldrh	r2, [r3, #0]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3ca:	1c9a      	adds	r2, r3, #2
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	f003 0301 	and.w	r3, r3, #1
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d11c      	bne.n	800a42a <HAL_SPI_TransmitReceive+0x1e6>
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d016      	beq.n	800a42a <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68da      	ldr	r2, [r3, #12]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a406:	b292      	uxth	r2, r2
 800a408:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a40e:	1c9a      	adds	r2, r3, #2
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	3b01      	subs	r3, #1
 800a41e:	b29a      	uxth	r2, r3
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a426:	2301      	movs	r3, #1
 800a428:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a42a:	f7f9 fef9 	bl	8004220 <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	6a3b      	ldr	r3, [r7, #32]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a436:	429a      	cmp	r2, r3
 800a438:	d80d      	bhi.n	800a456 <HAL_SPI_TransmitReceive+0x212>
 800a43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a440:	d009      	beq.n	800a456 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2201      	movs	r2, #1
 800a446:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a452:	2303      	movs	r3, #3
 800a454:	e111      	b.n	800a67a <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d19d      	bne.n	800a39c <HAL_SPI_TransmitReceive+0x158>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a466:	b29b      	uxth	r3, r3
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d197      	bne.n	800a39c <HAL_SPI_TransmitReceive+0x158>
 800a46c:	e0e5      	b.n	800a63a <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d003      	beq.n	800a47e <HAL_SPI_TransmitReceive+0x23a>
 800a476:	8afb      	ldrh	r3, [r7, #22]
 800a478:	2b01      	cmp	r3, #1
 800a47a:	f040 80d1 	bne.w	800a620 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a482:	b29b      	uxth	r3, r3
 800a484:	2b01      	cmp	r3, #1
 800a486:	d912      	bls.n	800a4ae <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a48c:	881a      	ldrh	r2, [r3, #0]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a498:	1c9a      	adds	r2, r3, #2
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	3b02      	subs	r3, #2
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a4ac:	e0b8      	b.n	800a620 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	330c      	adds	r3, #12
 800a4b8:	7812      	ldrb	r2, [r2, #0]
 800a4ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c0:	1c5a      	adds	r2, r3, #1
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a4d4:	e0a4      	b.n	800a620 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	f003 0302 	and.w	r3, r3, #2
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	d134      	bne.n	800a54e <HAL_SPI_TransmitReceive+0x30a>
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d02f      	beq.n	800a54e <HAL_SPI_TransmitReceive+0x30a>
 800a4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d12c      	bne.n	800a54e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d912      	bls.n	800a524 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a502:	881a      	ldrh	r2, [r3, #0]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a50e:	1c9a      	adds	r2, r3, #2
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a518:	b29b      	uxth	r3, r3
 800a51a:	3b02      	subs	r3, #2
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a522:	e012      	b.n	800a54a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	330c      	adds	r3, #12
 800a52e:	7812      	ldrb	r2, [r2, #0]
 800a530:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a536:	1c5a      	adds	r2, r3, #1
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a540:	b29b      	uxth	r3, r3
 800a542:	3b01      	subs	r3, #1
 800a544:	b29a      	uxth	r2, r3
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a54a:	2300      	movs	r3, #0
 800a54c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	f003 0301 	and.w	r3, r3, #1
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d148      	bne.n	800a5ee <HAL_SPI_TransmitReceive+0x3aa>
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a562:	b29b      	uxth	r3, r3
 800a564:	2b00      	cmp	r3, #0
 800a566:	d042      	beq.n	800a5ee <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a56e:	b29b      	uxth	r3, r3
 800a570:	2b01      	cmp	r3, #1
 800a572:	d923      	bls.n	800a5bc <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68da      	ldr	r2, [r3, #12]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a57e:	b292      	uxth	r2, r2
 800a580:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a586:	1c9a      	adds	r2, r3, #2
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a592:	b29b      	uxth	r3, r3
 800a594:	3b02      	subs	r3, #2
 800a596:	b29a      	uxth	r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d81f      	bhi.n	800a5ea <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	685a      	ldr	r2, [r3, #4]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a5b8:	605a      	str	r2, [r3, #4]
 800a5ba:	e016      	b.n	800a5ea <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f103 020c 	add.w	r2, r3, #12
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5c8:	7812      	ldrb	r2, [r2, #0]
 800a5ca:	b2d2      	uxtb	r2, r2
 800a5cc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5d2:	1c5a      	adds	r2, r3, #1
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a5ee:	f7f9 fe17 	bl	8004220 <HAL_GetTick>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	6a3b      	ldr	r3, [r7, #32]
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d803      	bhi.n	800a606 <HAL_SPI_TransmitReceive+0x3c2>
 800a5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a600:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a604:	d102      	bne.n	800a60c <HAL_SPI_TransmitReceive+0x3c8>
 800a606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d109      	bne.n	800a620 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2201      	movs	r2, #1
 800a610:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2200      	movs	r2, #0
 800a618:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a61c:	2303      	movs	r3, #3
 800a61e:	e02c      	b.n	800a67a <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a624:	b29b      	uxth	r3, r3
 800a626:	2b00      	cmp	r3, #0
 800a628:	f47f af55 	bne.w	800a4d6 <HAL_SPI_TransmitReceive+0x292>
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a632:	b29b      	uxth	r3, r3
 800a634:	2b00      	cmp	r3, #0
 800a636:	f47f af4e 	bne.w	800a4d6 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a63a:	6a3a      	ldr	r2, [r7, #32]
 800a63c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f000 f996 	bl	800a970 <SPI_EndRxTxTransaction>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d008      	beq.n	800a65c <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2220      	movs	r2, #32
 800a64e:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	e00e      	b.n	800a67a <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2200      	movs	r2, #0
 800a668:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a670:	2b00      	cmp	r3, #0
 800a672:	d001      	beq.n	800a678 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	e000      	b.n	800a67a <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800a678:	2300      	movs	r3, #0
  }
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3728      	adds	r7, #40	@ 0x28
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
	...

0800a684 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b088      	sub	sp, #32
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	603b      	str	r3, [r7, #0]
 800a690:	4613      	mov	r3, r2
 800a692:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a694:	f7f9 fdc4 	bl	8004220 <HAL_GetTick>
 800a698:	4602      	mov	r2, r0
 800a69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69c:	1a9b      	subs	r3, r3, r2
 800a69e:	683a      	ldr	r2, [r7, #0]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a6a4:	f7f9 fdbc 	bl	8004220 <HAL_GetTick>
 800a6a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a6aa:	4b39      	ldr	r3, [pc, #228]	@ (800a790 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	015b      	lsls	r3, r3, #5
 800a6b0:	0d1b      	lsrs	r3, r3, #20
 800a6b2:	69fa      	ldr	r2, [r7, #28]
 800a6b4:	fb02 f303 	mul.w	r3, r2, r3
 800a6b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a6ba:	e054      	b.n	800a766 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6c2:	d050      	beq.n	800a766 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a6c4:	f7f9 fdac 	bl	8004220 <HAL_GetTick>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	69fa      	ldr	r2, [r7, #28]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d902      	bls.n	800a6da <SPI_WaitFlagStateUntilTimeout+0x56>
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d13d      	bne.n	800a756 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	685a      	ldr	r2, [r3, #4]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a6e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a6f2:	d111      	bne.n	800a718 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a6fc:	d004      	beq.n	800a708 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a706:	d107      	bne.n	800a718 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a716:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a71c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a720:	d10f      	bne.n	800a742 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a730:	601a      	str	r2, [r3, #0]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a740:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2201      	movs	r2, #1
 800a746:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2200      	movs	r2, #0
 800a74e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a752:	2303      	movs	r3, #3
 800a754:	e017      	b.n	800a786 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d101      	bne.n	800a760 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a75c:	2300      	movs	r3, #0
 800a75e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	3b01      	subs	r3, #1
 800a764:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	689a      	ldr	r2, [r3, #8]
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	4013      	ands	r3, r2
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	429a      	cmp	r2, r3
 800a774:	bf0c      	ite	eq
 800a776:	2301      	moveq	r3, #1
 800a778:	2300      	movne	r3, #0
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	461a      	mov	r2, r3
 800a77e:	79fb      	ldrb	r3, [r7, #7]
 800a780:	429a      	cmp	r2, r3
 800a782:	d19b      	bne.n	800a6bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3720      	adds	r7, #32
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	20000000 	.word	0x20000000

0800a794 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b08a      	sub	sp, #40	@ 0x28
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
 800a7a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a7a6:	f7f9 fd3b 	bl	8004220 <HAL_GetTick>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ae:	1a9b      	subs	r3, r3, r2
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a7b6:	f7f9 fd33 	bl	8004220 <HAL_GetTick>
 800a7ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	330c      	adds	r3, #12
 800a7c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a7c4:	4b3d      	ldr	r3, [pc, #244]	@ (800a8bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4413      	add	r3, r2
 800a7ce:	00da      	lsls	r2, r3, #3
 800a7d0:	1ad3      	subs	r3, r2, r3
 800a7d2:	0d1b      	lsrs	r3, r3, #20
 800a7d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7d6:	fb02 f303 	mul.w	r3, r2, r3
 800a7da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a7dc:	e060      	b.n	800a8a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a7e4:	d107      	bne.n	800a7f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d104      	bne.n	800a7f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a7f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7fc:	d050      	beq.n	800a8a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a7fe:	f7f9 fd0f 	bl	8004220 <HAL_GetTick>
 800a802:	4602      	mov	r2, r0
 800a804:	6a3b      	ldr	r3, [r7, #32]
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d902      	bls.n	800a814 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a810:	2b00      	cmp	r3, #0
 800a812:	d13d      	bne.n	800a890 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	685a      	ldr	r2, [r3, #4]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a822:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a82c:	d111      	bne.n	800a852 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a836:	d004      	beq.n	800a842 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a840:	d107      	bne.n	800a852 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a850:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a85a:	d10f      	bne.n	800a87c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a86a:	601a      	str	r2, [r3, #0]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a87a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2201      	movs	r2, #1
 800a880:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a88c:	2303      	movs	r3, #3
 800a88e:	e010      	b.n	800a8b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d101      	bne.n	800a89a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a896:	2300      	movs	r3, #0
 800a898:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	3b01      	subs	r3, #1
 800a89e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	689a      	ldr	r2, [r3, #8]
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d196      	bne.n	800a7de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3728      	adds	r7, #40	@ 0x28
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	20000000 	.word	0x20000000

0800a8c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af02      	add	r7, sp, #8
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a8d4:	d111      	bne.n	800a8fa <SPI_EndRxTransaction+0x3a>
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8de:	d004      	beq.n	800a8ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8e8:	d107      	bne.n	800a8fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a8f8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	9300      	str	r3, [sp, #0]
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	2200      	movs	r2, #0
 800a902:	2180      	movs	r1, #128	@ 0x80
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	f7ff febd 	bl	800a684 <SPI_WaitFlagStateUntilTimeout>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d007      	beq.n	800a920 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a914:	f043 0220 	orr.w	r2, r3, #32
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a91c:	2303      	movs	r3, #3
 800a91e:	e023      	b.n	800a968 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a928:	d11d      	bne.n	800a966 <SPI_EndRxTransaction+0xa6>
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a932:	d004      	beq.n	800a93e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a93c:	d113      	bne.n	800a966 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	2200      	movs	r2, #0
 800a946:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f7ff ff22 	bl	800a794 <SPI_WaitFifoStateUntilTimeout>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d007      	beq.n	800a966 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a95a:	f043 0220 	orr.w	r2, r3, #32
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e000      	b.n	800a968 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3710      	adds	r7, #16
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af02      	add	r7, sp, #8
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	9300      	str	r3, [sp, #0]
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	2200      	movs	r2, #0
 800a984:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f7ff ff03 	bl	800a794 <SPI_WaitFifoStateUntilTimeout>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d007      	beq.n	800a9a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a998:	f043 0220 	orr.w	r2, r3, #32
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a9a0:	2303      	movs	r3, #3
 800a9a2:	e027      	b.n	800a9f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	2180      	movs	r1, #128	@ 0x80
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f7ff fe68 	bl	800a684 <SPI_WaitFlagStateUntilTimeout>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d007      	beq.n	800a9ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9be:	f043 0220 	orr.w	r2, r3, #32
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	e014      	b.n	800a9f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	9300      	str	r3, [sp, #0]
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a9d6:	68f8      	ldr	r0, [r7, #12]
 800a9d8:	f7ff fedc 	bl	800a794 <SPI_WaitFifoStateUntilTimeout>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d007      	beq.n	800a9f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9e6:	f043 0220 	orr.w	r2, r3, #32
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a9ee:	2303      	movs	r3, #3
 800a9f0:	e000      	b.n	800a9f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a9f2:	2300      	movs	r3, #0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d101      	bne.n	800aa0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e049      	b.n	800aaa2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d106      	bne.n	800aa28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f7f7 febc 	bl	80027a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2202      	movs	r2, #2
 800aa2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	3304      	adds	r3, #4
 800aa38:	4619      	mov	r1, r3
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	f000 fdc0 	bl	800b5c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
	...

0800aaac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d001      	beq.n	800aac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	e04f      	b.n	800ab64 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2202      	movs	r2, #2
 800aac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	68da      	ldr	r2, [r3, #12]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f042 0201 	orr.w	r2, r2, #1
 800aada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a23      	ldr	r2, [pc, #140]	@ (800ab70 <HAL_TIM_Base_Start_IT+0xc4>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d01d      	beq.n	800ab22 <HAL_TIM_Base_Start_IT+0x76>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aaee:	d018      	beq.n	800ab22 <HAL_TIM_Base_Start_IT+0x76>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a1f      	ldr	r2, [pc, #124]	@ (800ab74 <HAL_TIM_Base_Start_IT+0xc8>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d013      	beq.n	800ab22 <HAL_TIM_Base_Start_IT+0x76>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a1e      	ldr	r2, [pc, #120]	@ (800ab78 <HAL_TIM_Base_Start_IT+0xcc>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d00e      	beq.n	800ab22 <HAL_TIM_Base_Start_IT+0x76>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a1c      	ldr	r2, [pc, #112]	@ (800ab7c <HAL_TIM_Base_Start_IT+0xd0>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d009      	beq.n	800ab22 <HAL_TIM_Base_Start_IT+0x76>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a1b      	ldr	r2, [pc, #108]	@ (800ab80 <HAL_TIM_Base_Start_IT+0xd4>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d004      	beq.n	800ab22 <HAL_TIM_Base_Start_IT+0x76>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a19      	ldr	r2, [pc, #100]	@ (800ab84 <HAL_TIM_Base_Start_IT+0xd8>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d115      	bne.n	800ab4e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	689a      	ldr	r2, [r3, #8]
 800ab28:	4b17      	ldr	r3, [pc, #92]	@ (800ab88 <HAL_TIM_Base_Start_IT+0xdc>)
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2b06      	cmp	r3, #6
 800ab32:	d015      	beq.n	800ab60 <HAL_TIM_Base_Start_IT+0xb4>
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab3a:	d011      	beq.n	800ab60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f042 0201 	orr.w	r2, r2, #1
 800ab4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab4c:	e008      	b.n	800ab60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f042 0201 	orr.w	r2, r2, #1
 800ab5c:	601a      	str	r2, [r3, #0]
 800ab5e:	e000      	b.n	800ab62 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3714      	adds	r7, #20
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr
 800ab70:	40012c00 	.word	0x40012c00
 800ab74:	40000400 	.word	0x40000400
 800ab78:	40000800 	.word	0x40000800
 800ab7c:	40013400 	.word	0x40013400
 800ab80:	40014000 	.word	0x40014000
 800ab84:	40015000 	.word	0x40015000
 800ab88:	00010007 	.word	0x00010007

0800ab8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d101      	bne.n	800ab9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e049      	b.n	800ac32 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d106      	bne.n	800abb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f7f7 fe3c 	bl	8002830 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2202      	movs	r2, #2
 800abbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	3304      	adds	r3, #4
 800abc8:	4619      	mov	r1, r3
 800abca:	4610      	mov	r0, r2
 800abcc:	f000 fcf8 	bl	800b5c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2201      	movs	r2, #1
 800ac14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b086      	sub	sp, #24
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
 800ac42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d101      	bne.n	800ac4e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e097      	b.n	800ad7e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d106      	bne.n	800ac68 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f7f7 fd0c 	bl	8002680 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2202      	movs	r2, #2
 800ac6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	6812      	ldr	r2, [r2, #0]
 800ac7a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800ac7e:	f023 0307 	bic.w	r3, r3, #7
 800ac82:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	3304      	adds	r3, #4
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	4610      	mov	r0, r2
 800ac90:	f000 fc96 	bl	800b5c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	699b      	ldr	r3, [r3, #24]
 800aca2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6a1b      	ldr	r3, [r3, #32]
 800acaa:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	697a      	ldr	r2, [r7, #20]
 800acb2:	4313      	orrs	r3, r2
 800acb4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800acbc:	f023 0303 	bic.w	r3, r3, #3
 800acc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	689a      	ldr	r2, [r3, #8]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	699b      	ldr	r3, [r3, #24]
 800acca:	021b      	lsls	r3, r3, #8
 800accc:	4313      	orrs	r3, r2
 800acce:	693a      	ldr	r2, [r7, #16]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800acda:	f023 030c 	bic.w	r3, r3, #12
 800acde:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ace6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800acea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	68da      	ldr	r2, [r3, #12]
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	69db      	ldr	r3, [r3, #28]
 800acf4:	021b      	lsls	r3, r3, #8
 800acf6:	4313      	orrs	r3, r2
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	4313      	orrs	r3, r2
 800acfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	691b      	ldr	r3, [r3, #16]
 800ad02:	011a      	lsls	r2, r3, #4
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	6a1b      	ldr	r3, [r3, #32]
 800ad08:	031b      	lsls	r3, r3, #12
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	693a      	ldr	r2, [r7, #16]
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800ad18:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800ad20:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	685a      	ldr	r2, [r3, #4]
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	695b      	ldr	r3, [r3, #20]
 800ad2a:	011b      	lsls	r3, r3, #4
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	697a      	ldr	r2, [r7, #20]
 800ad3a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	693a      	ldr	r2, [r7, #16]
 800ad42:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2201      	movs	r2, #1
 800ad58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2201      	movs	r2, #1
 800ad68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2201      	movs	r2, #1
 800ad78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3718      	adds	r7, #24
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b084      	sub	sp, #16
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
 800ad8e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ad96:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ad9e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ada6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800adae:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d110      	bne.n	800add8 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800adb6:	7bfb      	ldrb	r3, [r7, #15]
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d102      	bne.n	800adc2 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800adbc:	7b7b      	ldrb	r3, [r7, #13]
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d001      	beq.n	800adc6 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	e069      	b.n	800ae9a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2202      	movs	r2, #2
 800adca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2202      	movs	r2, #2
 800add2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800add6:	e031      	b.n	800ae3c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	2b04      	cmp	r3, #4
 800addc:	d110      	bne.n	800ae00 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800adde:	7bbb      	ldrb	r3, [r7, #14]
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d102      	bne.n	800adea <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ade4:	7b3b      	ldrb	r3, [r7, #12]
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d001      	beq.n	800adee <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800adea:	2301      	movs	r3, #1
 800adec:	e055      	b.n	800ae9a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2202      	movs	r2, #2
 800adf2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2202      	movs	r2, #2
 800adfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800adfe:	e01d      	b.n	800ae3c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae00:	7bfb      	ldrb	r3, [r7, #15]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d108      	bne.n	800ae18 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae06:	7bbb      	ldrb	r3, [r7, #14]
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d105      	bne.n	800ae18 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae0c:	7b7b      	ldrb	r3, [r7, #13]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d102      	bne.n	800ae18 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ae12:	7b3b      	ldrb	r3, [r7, #12]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d001      	beq.n	800ae1c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e03e      	b.n	800ae9a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2202      	movs	r2, #2
 800ae20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2202      	movs	r2, #2
 800ae28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2202      	movs	r2, #2
 800ae30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2202      	movs	r2, #2
 800ae38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d003      	beq.n	800ae4a <HAL_TIM_Encoder_Start+0xc4>
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	2b04      	cmp	r3, #4
 800ae46:	d008      	beq.n	800ae5a <HAL_TIM_Encoder_Start+0xd4>
 800ae48:	e00f      	b.n	800ae6a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	2100      	movs	r1, #0
 800ae52:	4618      	mov	r0, r3
 800ae54:	f001 f824 	bl	800bea0 <TIM_CCxChannelCmd>
      break;
 800ae58:	e016      	b.n	800ae88 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	2104      	movs	r1, #4
 800ae62:	4618      	mov	r0, r3
 800ae64:	f001 f81c 	bl	800bea0 <TIM_CCxChannelCmd>
      break;
 800ae68:	e00e      	b.n	800ae88 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	2100      	movs	r1, #0
 800ae72:	4618      	mov	r0, r3
 800ae74:	f001 f814 	bl	800bea0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	2104      	movs	r1, #4
 800ae80:	4618      	mov	r0, r3
 800ae82:	f001 f80d 	bl	800bea0 <TIM_CCxChannelCmd>
      break;
 800ae86:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f042 0201 	orr.w	r2, r2, #1
 800ae96:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b084      	sub	sp, #16
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	f003 0302 	and.w	r3, r3, #2
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d020      	beq.n	800af06 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f003 0302 	and.w	r3, r3, #2
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d01b      	beq.n	800af06 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f06f 0202 	mvn.w	r2, #2
 800aed6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2201      	movs	r2, #1
 800aedc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	699b      	ldr	r3, [r3, #24]
 800aee4:	f003 0303 	and.w	r3, r3, #3
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d003      	beq.n	800aef4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 fb49 	bl	800b584 <HAL_TIM_IC_CaptureCallback>
 800aef2:	e005      	b.n	800af00 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 fb3b 	bl	800b570 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 fb4c 	bl	800b598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2200      	movs	r2, #0
 800af04:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	f003 0304 	and.w	r3, r3, #4
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d020      	beq.n	800af52 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f003 0304 	and.w	r3, r3, #4
 800af16:	2b00      	cmp	r3, #0
 800af18:	d01b      	beq.n	800af52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f06f 0204 	mvn.w	r2, #4
 800af22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2202      	movs	r2, #2
 800af28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	699b      	ldr	r3, [r3, #24]
 800af30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af34:	2b00      	cmp	r3, #0
 800af36:	d003      	beq.n	800af40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 fb23 	bl	800b584 <HAL_TIM_IC_CaptureCallback>
 800af3e:	e005      	b.n	800af4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 fb15 	bl	800b570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fb26 	bl	800b598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	f003 0308 	and.w	r3, r3, #8
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d020      	beq.n	800af9e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f003 0308 	and.w	r3, r3, #8
 800af62:	2b00      	cmp	r3, #0
 800af64:	d01b      	beq.n	800af9e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f06f 0208 	mvn.w	r2, #8
 800af6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2204      	movs	r2, #4
 800af74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	69db      	ldr	r3, [r3, #28]
 800af7c:	f003 0303 	and.w	r3, r3, #3
 800af80:	2b00      	cmp	r3, #0
 800af82:	d003      	beq.n	800af8c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 fafd 	bl	800b584 <HAL_TIM_IC_CaptureCallback>
 800af8a:	e005      	b.n	800af98 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 faef 	bl	800b570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 fb00 	bl	800b598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	f003 0310 	and.w	r3, r3, #16
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d020      	beq.n	800afea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f003 0310 	and.w	r3, r3, #16
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d01b      	beq.n	800afea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f06f 0210 	mvn.w	r2, #16
 800afba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2208      	movs	r2, #8
 800afc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	69db      	ldr	r3, [r3, #28]
 800afc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d003      	beq.n	800afd8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 fad7 	bl	800b584 <HAL_TIM_IC_CaptureCallback>
 800afd6:	e005      	b.n	800afe4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 fac9 	bl	800b570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 fada 	bl	800b598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	f003 0301 	and.w	r3, r3, #1
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00c      	beq.n	800b00e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f003 0301 	and.w	r3, r3, #1
 800affa:	2b00      	cmp	r3, #0
 800affc:	d007      	beq.n	800b00e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f06f 0201 	mvn.w	r2, #1
 800b006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f7f7 f921 	bl	8002250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b014:	2b00      	cmp	r3, #0
 800b016:	d104      	bne.n	800b022 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00c      	beq.n	800b03c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d007      	beq.n	800b03c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f001 f8bf 	bl	800c1ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00c      	beq.n	800b060 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d007      	beq.n	800b060 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f001 f8b7 	bl	800c1ce <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00c      	beq.n	800b084 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b070:	2b00      	cmp	r3, #0
 800b072:	d007      	beq.n	800b084 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b07c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fa94 	bl	800b5ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	f003 0320 	and.w	r3, r3, #32
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00c      	beq.n	800b0a8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f003 0320 	and.w	r3, r3, #32
 800b094:	2b00      	cmp	r3, #0
 800b096:	d007      	beq.n	800b0a8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f06f 0220 	mvn.w	r2, #32
 800b0a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f001 f87f 	bl	800c1a6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00c      	beq.n	800b0cc <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d007      	beq.n	800b0cc <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b0c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f001 f88b 	bl	800c1e2 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00c      	beq.n	800b0f0 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d007      	beq.n	800b0f0 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b0e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f001 f883 	bl	800c1f6 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00c      	beq.n	800b114 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b100:	2b00      	cmp	r3, #0
 800b102:	d007      	beq.n	800b114 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b10c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f001 f87b 	bl	800c20a <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00c      	beq.n	800b138 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b124:	2b00      	cmp	r3, #0
 800b126:	d007      	beq.n	800b138 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f001 f873 	bl	800c21e <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b138:	bf00      	nop
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b14c:	2300      	movs	r3, #0
 800b14e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b156:	2b01      	cmp	r3, #1
 800b158:	d101      	bne.n	800b15e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b15a:	2302      	movs	r3, #2
 800b15c:	e0ff      	b.n	800b35e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2201      	movs	r2, #1
 800b162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2b14      	cmp	r3, #20
 800b16a:	f200 80f0 	bhi.w	800b34e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b16e:	a201      	add	r2, pc, #4	@ (adr r2, 800b174 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b174:	0800b1c9 	.word	0x0800b1c9
 800b178:	0800b34f 	.word	0x0800b34f
 800b17c:	0800b34f 	.word	0x0800b34f
 800b180:	0800b34f 	.word	0x0800b34f
 800b184:	0800b209 	.word	0x0800b209
 800b188:	0800b34f 	.word	0x0800b34f
 800b18c:	0800b34f 	.word	0x0800b34f
 800b190:	0800b34f 	.word	0x0800b34f
 800b194:	0800b24b 	.word	0x0800b24b
 800b198:	0800b34f 	.word	0x0800b34f
 800b19c:	0800b34f 	.word	0x0800b34f
 800b1a0:	0800b34f 	.word	0x0800b34f
 800b1a4:	0800b28b 	.word	0x0800b28b
 800b1a8:	0800b34f 	.word	0x0800b34f
 800b1ac:	0800b34f 	.word	0x0800b34f
 800b1b0:	0800b34f 	.word	0x0800b34f
 800b1b4:	0800b2cd 	.word	0x0800b2cd
 800b1b8:	0800b34f 	.word	0x0800b34f
 800b1bc:	0800b34f 	.word	0x0800b34f
 800b1c0:	0800b34f 	.word	0x0800b34f
 800b1c4:	0800b30d 	.word	0x0800b30d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68b9      	ldr	r1, [r7, #8]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 faa0 	bl	800b714 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	699a      	ldr	r2, [r3, #24]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f042 0208 	orr.w	r2, r2, #8
 800b1e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	699a      	ldr	r2, [r3, #24]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f022 0204 	bic.w	r2, r2, #4
 800b1f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	6999      	ldr	r1, [r3, #24]
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	691a      	ldr	r2, [r3, #16]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	430a      	orrs	r2, r1
 800b204:	619a      	str	r2, [r3, #24]
      break;
 800b206:	e0a5      	b.n	800b354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68b9      	ldr	r1, [r7, #8]
 800b20e:	4618      	mov	r0, r3
 800b210:	f000 fb1a 	bl	800b848 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	699a      	ldr	r2, [r3, #24]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	699a      	ldr	r2, [r3, #24]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	6999      	ldr	r1, [r3, #24]
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	021a      	lsls	r2, r3, #8
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	430a      	orrs	r2, r1
 800b246:	619a      	str	r2, [r3, #24]
      break;
 800b248:	e084      	b.n	800b354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	68b9      	ldr	r1, [r7, #8]
 800b250:	4618      	mov	r0, r3
 800b252:	f000 fb8d 	bl	800b970 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	69da      	ldr	r2, [r3, #28]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f042 0208 	orr.w	r2, r2, #8
 800b264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	69da      	ldr	r2, [r3, #28]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f022 0204 	bic.w	r2, r2, #4
 800b274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	69d9      	ldr	r1, [r3, #28]
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	691a      	ldr	r2, [r3, #16]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	430a      	orrs	r2, r1
 800b286:	61da      	str	r2, [r3, #28]
      break;
 800b288:	e064      	b.n	800b354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68b9      	ldr	r1, [r7, #8]
 800b290:	4618      	mov	r0, r3
 800b292:	f000 fbff 	bl	800ba94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	69da      	ldr	r2, [r3, #28]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b2a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	69da      	ldr	r2, [r3, #28]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b2b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	69d9      	ldr	r1, [r3, #28]
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	691b      	ldr	r3, [r3, #16]
 800b2c0:	021a      	lsls	r2, r3, #8
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	430a      	orrs	r2, r1
 800b2c8:	61da      	str	r2, [r3, #28]
      break;
 800b2ca:	e043      	b.n	800b354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	68b9      	ldr	r1, [r7, #8]
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f000 fc72 	bl	800bbbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f042 0208 	orr.w	r2, r2, #8
 800b2e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f022 0204 	bic.w	r2, r2, #4
 800b2f6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	691a      	ldr	r2, [r3, #16]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	430a      	orrs	r2, r1
 800b308:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b30a:	e023      	b.n	800b354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	68b9      	ldr	r1, [r7, #8]
 800b312:	4618      	mov	r0, r3
 800b314:	f000 fcbc 	bl	800bc90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b326:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b336:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	021a      	lsls	r2, r3, #8
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	430a      	orrs	r2, r1
 800b34a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b34c:	e002      	b.n	800b354 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	75fb      	strb	r3, [r7, #23]
      break;
 800b352:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2200      	movs	r2, #0
 800b358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b35c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3718      	adds	r7, #24
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop

0800b368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b372:	2300      	movs	r3, #0
 800b374:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d101      	bne.n	800b384 <HAL_TIM_ConfigClockSource+0x1c>
 800b380:	2302      	movs	r3, #2
 800b382:	e0e6      	b.n	800b552 <HAL_TIM_ConfigClockSource+0x1ea>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2202      	movs	r2, #2
 800b390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b3a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b3a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b3ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68ba      	ldr	r2, [r7, #8]
 800b3b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a67      	ldr	r2, [pc, #412]	@ (800b55c <HAL_TIM_ConfigClockSource+0x1f4>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	f000 80b1 	beq.w	800b526 <HAL_TIM_ConfigClockSource+0x1be>
 800b3c4:	4a65      	ldr	r2, [pc, #404]	@ (800b55c <HAL_TIM_ConfigClockSource+0x1f4>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	f200 80b6 	bhi.w	800b538 <HAL_TIM_ConfigClockSource+0x1d0>
 800b3cc:	4a64      	ldr	r2, [pc, #400]	@ (800b560 <HAL_TIM_ConfigClockSource+0x1f8>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	f000 80a9 	beq.w	800b526 <HAL_TIM_ConfigClockSource+0x1be>
 800b3d4:	4a62      	ldr	r2, [pc, #392]	@ (800b560 <HAL_TIM_ConfigClockSource+0x1f8>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	f200 80ae 	bhi.w	800b538 <HAL_TIM_ConfigClockSource+0x1d0>
 800b3dc:	4a61      	ldr	r2, [pc, #388]	@ (800b564 <HAL_TIM_ConfigClockSource+0x1fc>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	f000 80a1 	beq.w	800b526 <HAL_TIM_ConfigClockSource+0x1be>
 800b3e4:	4a5f      	ldr	r2, [pc, #380]	@ (800b564 <HAL_TIM_ConfigClockSource+0x1fc>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	f200 80a6 	bhi.w	800b538 <HAL_TIM_ConfigClockSource+0x1d0>
 800b3ec:	4a5e      	ldr	r2, [pc, #376]	@ (800b568 <HAL_TIM_ConfigClockSource+0x200>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	f000 8099 	beq.w	800b526 <HAL_TIM_ConfigClockSource+0x1be>
 800b3f4:	4a5c      	ldr	r2, [pc, #368]	@ (800b568 <HAL_TIM_ConfigClockSource+0x200>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	f200 809e 	bhi.w	800b538 <HAL_TIM_ConfigClockSource+0x1d0>
 800b3fc:	4a5b      	ldr	r2, [pc, #364]	@ (800b56c <HAL_TIM_ConfigClockSource+0x204>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	f000 8091 	beq.w	800b526 <HAL_TIM_ConfigClockSource+0x1be>
 800b404:	4a59      	ldr	r2, [pc, #356]	@ (800b56c <HAL_TIM_ConfigClockSource+0x204>)
 800b406:	4293      	cmp	r3, r2
 800b408:	f200 8096 	bhi.w	800b538 <HAL_TIM_ConfigClockSource+0x1d0>
 800b40c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b410:	f000 8089 	beq.w	800b526 <HAL_TIM_ConfigClockSource+0x1be>
 800b414:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b418:	f200 808e 	bhi.w	800b538 <HAL_TIM_ConfigClockSource+0x1d0>
 800b41c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b420:	d03e      	beq.n	800b4a0 <HAL_TIM_ConfigClockSource+0x138>
 800b422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b426:	f200 8087 	bhi.w	800b538 <HAL_TIM_ConfigClockSource+0x1d0>
 800b42a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b42e:	f000 8086 	beq.w	800b53e <HAL_TIM_ConfigClockSource+0x1d6>
 800b432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b436:	d87f      	bhi.n	800b538 <HAL_TIM_ConfigClockSource+0x1d0>
 800b438:	2b70      	cmp	r3, #112	@ 0x70
 800b43a:	d01a      	beq.n	800b472 <HAL_TIM_ConfigClockSource+0x10a>
 800b43c:	2b70      	cmp	r3, #112	@ 0x70
 800b43e:	d87b      	bhi.n	800b538 <HAL_TIM_ConfigClockSource+0x1d0>
 800b440:	2b60      	cmp	r3, #96	@ 0x60
 800b442:	d050      	beq.n	800b4e6 <HAL_TIM_ConfigClockSource+0x17e>
 800b444:	2b60      	cmp	r3, #96	@ 0x60
 800b446:	d877      	bhi.n	800b538 <HAL_TIM_ConfigClockSource+0x1d0>
 800b448:	2b50      	cmp	r3, #80	@ 0x50
 800b44a:	d03c      	beq.n	800b4c6 <HAL_TIM_ConfigClockSource+0x15e>
 800b44c:	2b50      	cmp	r3, #80	@ 0x50
 800b44e:	d873      	bhi.n	800b538 <HAL_TIM_ConfigClockSource+0x1d0>
 800b450:	2b40      	cmp	r3, #64	@ 0x40
 800b452:	d058      	beq.n	800b506 <HAL_TIM_ConfigClockSource+0x19e>
 800b454:	2b40      	cmp	r3, #64	@ 0x40
 800b456:	d86f      	bhi.n	800b538 <HAL_TIM_ConfigClockSource+0x1d0>
 800b458:	2b30      	cmp	r3, #48	@ 0x30
 800b45a:	d064      	beq.n	800b526 <HAL_TIM_ConfigClockSource+0x1be>
 800b45c:	2b30      	cmp	r3, #48	@ 0x30
 800b45e:	d86b      	bhi.n	800b538 <HAL_TIM_ConfigClockSource+0x1d0>
 800b460:	2b20      	cmp	r3, #32
 800b462:	d060      	beq.n	800b526 <HAL_TIM_ConfigClockSource+0x1be>
 800b464:	2b20      	cmp	r3, #32
 800b466:	d867      	bhi.n	800b538 <HAL_TIM_ConfigClockSource+0x1d0>
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d05c      	beq.n	800b526 <HAL_TIM_ConfigClockSource+0x1be>
 800b46c:	2b10      	cmp	r3, #16
 800b46e:	d05a      	beq.n	800b526 <HAL_TIM_ConfigClockSource+0x1be>
 800b470:	e062      	b.n	800b538 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b482:	f000 fced 	bl	800be60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b494:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	609a      	str	r2, [r3, #8]
      break;
 800b49e:	e04f      	b.n	800b540 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4b0:	f000 fcd6 	bl	800be60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	689a      	ldr	r2, [r3, #8]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b4c2:	609a      	str	r2, [r3, #8]
      break;
 800b4c4:	e03c      	b.n	800b540 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	f000 fc48 	bl	800bd68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2150      	movs	r1, #80	@ 0x50
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f000 fca1 	bl	800be26 <TIM_ITRx_SetConfig>
      break;
 800b4e4:	e02c      	b.n	800b540 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	f000 fc67 	bl	800bdc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2160      	movs	r1, #96	@ 0x60
 800b4fe:	4618      	mov	r0, r3
 800b500:	f000 fc91 	bl	800be26 <TIM_ITRx_SetConfig>
      break;
 800b504:	e01c      	b.n	800b540 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b512:	461a      	mov	r2, r3
 800b514:	f000 fc28 	bl	800bd68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2140      	movs	r1, #64	@ 0x40
 800b51e:	4618      	mov	r0, r3
 800b520:	f000 fc81 	bl	800be26 <TIM_ITRx_SetConfig>
      break;
 800b524:	e00c      	b.n	800b540 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4619      	mov	r1, r3
 800b530:	4610      	mov	r0, r2
 800b532:	f000 fc78 	bl	800be26 <TIM_ITRx_SetConfig>
      break;
 800b536:	e003      	b.n	800b540 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800b538:	2301      	movs	r3, #1
 800b53a:	73fb      	strb	r3, [r7, #15]
      break;
 800b53c:	e000      	b.n	800b540 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800b53e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2201      	movs	r2, #1
 800b544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b550:	7bfb      	ldrb	r3, [r7, #15]
}
 800b552:	4618      	mov	r0, r3
 800b554:	3710      	adds	r7, #16
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	00100070 	.word	0x00100070
 800b560:	00100050 	.word	0x00100050
 800b564:	00100040 	.word	0x00100040
 800b568:	00100030 	.word	0x00100030
 800b56c:	00100020 	.word	0x00100020

0800b570 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b578:	bf00      	nop
 800b57a:	370c      	adds	r7, #12
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr

0800b584 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b58c:	bf00      	nop
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b5b4:	bf00      	nop
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b085      	sub	sp, #20
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4a48      	ldr	r2, [pc, #288]	@ (800b6f4 <TIM_Base_SetConfig+0x134>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d013      	beq.n	800b600 <TIM_Base_SetConfig+0x40>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5de:	d00f      	beq.n	800b600 <TIM_Base_SetConfig+0x40>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4a45      	ldr	r2, [pc, #276]	@ (800b6f8 <TIM_Base_SetConfig+0x138>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d00b      	beq.n	800b600 <TIM_Base_SetConfig+0x40>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	4a44      	ldr	r2, [pc, #272]	@ (800b6fc <TIM_Base_SetConfig+0x13c>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d007      	beq.n	800b600 <TIM_Base_SetConfig+0x40>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a43      	ldr	r2, [pc, #268]	@ (800b700 <TIM_Base_SetConfig+0x140>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d003      	beq.n	800b600 <TIM_Base_SetConfig+0x40>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a42      	ldr	r2, [pc, #264]	@ (800b704 <TIM_Base_SetConfig+0x144>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d108      	bne.n	800b612 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	4313      	orrs	r3, r2
 800b610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4a37      	ldr	r2, [pc, #220]	@ (800b6f4 <TIM_Base_SetConfig+0x134>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d01f      	beq.n	800b65a <TIM_Base_SetConfig+0x9a>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b620:	d01b      	beq.n	800b65a <TIM_Base_SetConfig+0x9a>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4a34      	ldr	r2, [pc, #208]	@ (800b6f8 <TIM_Base_SetConfig+0x138>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d017      	beq.n	800b65a <TIM_Base_SetConfig+0x9a>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4a33      	ldr	r2, [pc, #204]	@ (800b6fc <TIM_Base_SetConfig+0x13c>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d013      	beq.n	800b65a <TIM_Base_SetConfig+0x9a>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a32      	ldr	r2, [pc, #200]	@ (800b700 <TIM_Base_SetConfig+0x140>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d00f      	beq.n	800b65a <TIM_Base_SetConfig+0x9a>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a32      	ldr	r2, [pc, #200]	@ (800b708 <TIM_Base_SetConfig+0x148>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d00b      	beq.n	800b65a <TIM_Base_SetConfig+0x9a>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a31      	ldr	r2, [pc, #196]	@ (800b70c <TIM_Base_SetConfig+0x14c>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d007      	beq.n	800b65a <TIM_Base_SetConfig+0x9a>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4a30      	ldr	r2, [pc, #192]	@ (800b710 <TIM_Base_SetConfig+0x150>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d003      	beq.n	800b65a <TIM_Base_SetConfig+0x9a>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4a2b      	ldr	r2, [pc, #172]	@ (800b704 <TIM_Base_SetConfig+0x144>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d108      	bne.n	800b66c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	68fa      	ldr	r2, [r7, #12]
 800b668:	4313      	orrs	r3, r2
 800b66a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	695b      	ldr	r3, [r3, #20]
 800b676:	4313      	orrs	r3, r2
 800b678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	689a      	ldr	r2, [r3, #8]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4a18      	ldr	r2, [pc, #96]	@ (800b6f4 <TIM_Base_SetConfig+0x134>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d013      	beq.n	800b6c0 <TIM_Base_SetConfig+0x100>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4a19      	ldr	r2, [pc, #100]	@ (800b700 <TIM_Base_SetConfig+0x140>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d00f      	beq.n	800b6c0 <TIM_Base_SetConfig+0x100>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	4a19      	ldr	r2, [pc, #100]	@ (800b708 <TIM_Base_SetConfig+0x148>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d00b      	beq.n	800b6c0 <TIM_Base_SetConfig+0x100>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4a18      	ldr	r2, [pc, #96]	@ (800b70c <TIM_Base_SetConfig+0x14c>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d007      	beq.n	800b6c0 <TIM_Base_SetConfig+0x100>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4a17      	ldr	r2, [pc, #92]	@ (800b710 <TIM_Base_SetConfig+0x150>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d003      	beq.n	800b6c0 <TIM_Base_SetConfig+0x100>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a12      	ldr	r2, [pc, #72]	@ (800b704 <TIM_Base_SetConfig+0x144>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d103      	bne.n	800b6c8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	691a      	ldr	r2, [r3, #16]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	691b      	ldr	r3, [r3, #16]
 800b6d2:	f003 0301 	and.w	r3, r3, #1
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d105      	bne.n	800b6e6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	f023 0201 	bic.w	r2, r3, #1
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	611a      	str	r2, [r3, #16]
  }
}
 800b6e6:	bf00      	nop
 800b6e8:	3714      	adds	r7, #20
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop
 800b6f4:	40012c00 	.word	0x40012c00
 800b6f8:	40000400 	.word	0x40000400
 800b6fc:	40000800 	.word	0x40000800
 800b700:	40013400 	.word	0x40013400
 800b704:	40015000 	.word	0x40015000
 800b708:	40014000 	.word	0x40014000
 800b70c:	40014400 	.word	0x40014400
 800b710:	40014800 	.word	0x40014800

0800b714 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b714:	b480      	push	{r7}
 800b716:	b087      	sub	sp, #28
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a1b      	ldr	r3, [r3, #32]
 800b722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6a1b      	ldr	r3, [r3, #32]
 800b728:	f023 0201 	bic.w	r2, r3, #1
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	699b      	ldr	r3, [r3, #24]
 800b73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f023 0303 	bic.w	r3, r3, #3
 800b74e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	4313      	orrs	r3, r2
 800b758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f023 0302 	bic.w	r3, r3, #2
 800b760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	697a      	ldr	r2, [r7, #20]
 800b768:	4313      	orrs	r3, r2
 800b76a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	4a30      	ldr	r2, [pc, #192]	@ (800b830 <TIM_OC1_SetConfig+0x11c>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d013      	beq.n	800b79c <TIM_OC1_SetConfig+0x88>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4a2f      	ldr	r2, [pc, #188]	@ (800b834 <TIM_OC1_SetConfig+0x120>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d00f      	beq.n	800b79c <TIM_OC1_SetConfig+0x88>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4a2e      	ldr	r2, [pc, #184]	@ (800b838 <TIM_OC1_SetConfig+0x124>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d00b      	beq.n	800b79c <TIM_OC1_SetConfig+0x88>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a2d      	ldr	r2, [pc, #180]	@ (800b83c <TIM_OC1_SetConfig+0x128>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d007      	beq.n	800b79c <TIM_OC1_SetConfig+0x88>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4a2c      	ldr	r2, [pc, #176]	@ (800b840 <TIM_OC1_SetConfig+0x12c>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d003      	beq.n	800b79c <TIM_OC1_SetConfig+0x88>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4a2b      	ldr	r2, [pc, #172]	@ (800b844 <TIM_OC1_SetConfig+0x130>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d10c      	bne.n	800b7b6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	f023 0308 	bic.w	r3, r3, #8
 800b7a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	697a      	ldr	r2, [r7, #20]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	f023 0304 	bic.w	r3, r3, #4
 800b7b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	4a1d      	ldr	r2, [pc, #116]	@ (800b830 <TIM_OC1_SetConfig+0x11c>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d013      	beq.n	800b7e6 <TIM_OC1_SetConfig+0xd2>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	4a1c      	ldr	r2, [pc, #112]	@ (800b834 <TIM_OC1_SetConfig+0x120>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d00f      	beq.n	800b7e6 <TIM_OC1_SetConfig+0xd2>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4a1b      	ldr	r2, [pc, #108]	@ (800b838 <TIM_OC1_SetConfig+0x124>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d00b      	beq.n	800b7e6 <TIM_OC1_SetConfig+0xd2>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4a1a      	ldr	r2, [pc, #104]	@ (800b83c <TIM_OC1_SetConfig+0x128>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d007      	beq.n	800b7e6 <TIM_OC1_SetConfig+0xd2>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a19      	ldr	r2, [pc, #100]	@ (800b840 <TIM_OC1_SetConfig+0x12c>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d003      	beq.n	800b7e6 <TIM_OC1_SetConfig+0xd2>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a18      	ldr	r2, [pc, #96]	@ (800b844 <TIM_OC1_SetConfig+0x130>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d111      	bne.n	800b80a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b7f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	695b      	ldr	r3, [r3, #20]
 800b7fa:	693a      	ldr	r2, [r7, #16]
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	699b      	ldr	r3, [r3, #24]
 800b804:	693a      	ldr	r2, [r7, #16]
 800b806:	4313      	orrs	r3, r2
 800b808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	693a      	ldr	r2, [r7, #16]
 800b80e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	68fa      	ldr	r2, [r7, #12]
 800b814:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	685a      	ldr	r2, [r3, #4]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	697a      	ldr	r2, [r7, #20]
 800b822:	621a      	str	r2, [r3, #32]
}
 800b824:	bf00      	nop
 800b826:	371c      	adds	r7, #28
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr
 800b830:	40012c00 	.word	0x40012c00
 800b834:	40013400 	.word	0x40013400
 800b838:	40014000 	.word	0x40014000
 800b83c:	40014400 	.word	0x40014400
 800b840:	40014800 	.word	0x40014800
 800b844:	40015000 	.word	0x40015000

0800b848 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b848:	b480      	push	{r7}
 800b84a:	b087      	sub	sp, #28
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a1b      	ldr	r3, [r3, #32]
 800b856:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6a1b      	ldr	r3, [r3, #32]
 800b85c:	f023 0210 	bic.w	r2, r3, #16
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	699b      	ldr	r3, [r3, #24]
 800b86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b876:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b87a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	021b      	lsls	r3, r3, #8
 800b88a:	68fa      	ldr	r2, [r7, #12]
 800b88c:	4313      	orrs	r3, r2
 800b88e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	f023 0320 	bic.w	r3, r3, #32
 800b896:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	689b      	ldr	r3, [r3, #8]
 800b89c:	011b      	lsls	r3, r3, #4
 800b89e:	697a      	ldr	r2, [r7, #20]
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	4a2c      	ldr	r2, [pc, #176]	@ (800b958 <TIM_OC2_SetConfig+0x110>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d007      	beq.n	800b8bc <TIM_OC2_SetConfig+0x74>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4a2b      	ldr	r2, [pc, #172]	@ (800b95c <TIM_OC2_SetConfig+0x114>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d003      	beq.n	800b8bc <TIM_OC2_SetConfig+0x74>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	4a2a      	ldr	r2, [pc, #168]	@ (800b960 <TIM_OC2_SetConfig+0x118>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d10d      	bne.n	800b8d8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	011b      	lsls	r3, r3, #4
 800b8ca:	697a      	ldr	r2, [r7, #20]
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a1f      	ldr	r2, [pc, #124]	@ (800b958 <TIM_OC2_SetConfig+0x110>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d013      	beq.n	800b908 <TIM_OC2_SetConfig+0xc0>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4a1e      	ldr	r2, [pc, #120]	@ (800b95c <TIM_OC2_SetConfig+0x114>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d00f      	beq.n	800b908 <TIM_OC2_SetConfig+0xc0>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a1e      	ldr	r2, [pc, #120]	@ (800b964 <TIM_OC2_SetConfig+0x11c>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d00b      	beq.n	800b908 <TIM_OC2_SetConfig+0xc0>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a1d      	ldr	r2, [pc, #116]	@ (800b968 <TIM_OC2_SetConfig+0x120>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d007      	beq.n	800b908 <TIM_OC2_SetConfig+0xc0>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a1c      	ldr	r2, [pc, #112]	@ (800b96c <TIM_OC2_SetConfig+0x124>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d003      	beq.n	800b908 <TIM_OC2_SetConfig+0xc0>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a17      	ldr	r2, [pc, #92]	@ (800b960 <TIM_OC2_SetConfig+0x118>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d113      	bne.n	800b930 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b90e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b916:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	695b      	ldr	r3, [r3, #20]
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	693a      	ldr	r2, [r7, #16]
 800b920:	4313      	orrs	r3, r2
 800b922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	699b      	ldr	r3, [r3, #24]
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	693a      	ldr	r2, [r7, #16]
 800b92c:	4313      	orrs	r3, r2
 800b92e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	68fa      	ldr	r2, [r7, #12]
 800b93a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	685a      	ldr	r2, [r3, #4]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	697a      	ldr	r2, [r7, #20]
 800b948:	621a      	str	r2, [r3, #32]
}
 800b94a:	bf00      	nop
 800b94c:	371c      	adds	r7, #28
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr
 800b956:	bf00      	nop
 800b958:	40012c00 	.word	0x40012c00
 800b95c:	40013400 	.word	0x40013400
 800b960:	40015000 	.word	0x40015000
 800b964:	40014000 	.word	0x40014000
 800b968:	40014400 	.word	0x40014400
 800b96c:	40014800 	.word	0x40014800

0800b970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b970:	b480      	push	{r7}
 800b972:	b087      	sub	sp, #28
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a1b      	ldr	r3, [r3, #32]
 800b97e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6a1b      	ldr	r3, [r3, #32]
 800b984:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	69db      	ldr	r3, [r3, #28]
 800b996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b99e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f023 0303 	bic.w	r3, r3, #3
 800b9aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	68fa      	ldr	r2, [r7, #12]
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b9bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	021b      	lsls	r3, r3, #8
 800b9c4:	697a      	ldr	r2, [r7, #20]
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4a2b      	ldr	r2, [pc, #172]	@ (800ba7c <TIM_OC3_SetConfig+0x10c>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d007      	beq.n	800b9e2 <TIM_OC3_SetConfig+0x72>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a2a      	ldr	r2, [pc, #168]	@ (800ba80 <TIM_OC3_SetConfig+0x110>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d003      	beq.n	800b9e2 <TIM_OC3_SetConfig+0x72>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a29      	ldr	r2, [pc, #164]	@ (800ba84 <TIM_OC3_SetConfig+0x114>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d10d      	bne.n	800b9fe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b9e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	021b      	lsls	r3, r3, #8
 800b9f0:	697a      	ldr	r2, [r7, #20]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b9fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	4a1e      	ldr	r2, [pc, #120]	@ (800ba7c <TIM_OC3_SetConfig+0x10c>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d013      	beq.n	800ba2e <TIM_OC3_SetConfig+0xbe>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	4a1d      	ldr	r2, [pc, #116]	@ (800ba80 <TIM_OC3_SetConfig+0x110>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d00f      	beq.n	800ba2e <TIM_OC3_SetConfig+0xbe>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	4a1d      	ldr	r2, [pc, #116]	@ (800ba88 <TIM_OC3_SetConfig+0x118>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d00b      	beq.n	800ba2e <TIM_OC3_SetConfig+0xbe>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	4a1c      	ldr	r2, [pc, #112]	@ (800ba8c <TIM_OC3_SetConfig+0x11c>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d007      	beq.n	800ba2e <TIM_OC3_SetConfig+0xbe>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	4a1b      	ldr	r2, [pc, #108]	@ (800ba90 <TIM_OC3_SetConfig+0x120>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d003      	beq.n	800ba2e <TIM_OC3_SetConfig+0xbe>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4a16      	ldr	r2, [pc, #88]	@ (800ba84 <TIM_OC3_SetConfig+0x114>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d113      	bne.n	800ba56 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ba3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	695b      	ldr	r3, [r3, #20]
 800ba42:	011b      	lsls	r3, r3, #4
 800ba44:	693a      	ldr	r2, [r7, #16]
 800ba46:	4313      	orrs	r3, r2
 800ba48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	699b      	ldr	r3, [r3, #24]
 800ba4e:	011b      	lsls	r3, r3, #4
 800ba50:	693a      	ldr	r2, [r7, #16]
 800ba52:	4313      	orrs	r3, r2
 800ba54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	693a      	ldr	r2, [r7, #16]
 800ba5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	68fa      	ldr	r2, [r7, #12]
 800ba60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	685a      	ldr	r2, [r3, #4]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	697a      	ldr	r2, [r7, #20]
 800ba6e:	621a      	str	r2, [r3, #32]
}
 800ba70:	bf00      	nop
 800ba72:	371c      	adds	r7, #28
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr
 800ba7c:	40012c00 	.word	0x40012c00
 800ba80:	40013400 	.word	0x40013400
 800ba84:	40015000 	.word	0x40015000
 800ba88:	40014000 	.word	0x40014000
 800ba8c:	40014400 	.word	0x40014400
 800ba90:	40014800 	.word	0x40014800

0800ba94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b087      	sub	sp, #28
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6a1b      	ldr	r3, [r3, #32]
 800baa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6a1b      	ldr	r3, [r3, #32]
 800baa8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	69db      	ldr	r3, [r3, #28]
 800baba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	021b      	lsls	r3, r3, #8
 800bad6:	68fa      	ldr	r2, [r7, #12]
 800bad8:	4313      	orrs	r3, r2
 800bada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bae2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	031b      	lsls	r3, r3, #12
 800baea:	697a      	ldr	r2, [r7, #20]
 800baec:	4313      	orrs	r3, r2
 800baee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4a2c      	ldr	r2, [pc, #176]	@ (800bba4 <TIM_OC4_SetConfig+0x110>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d007      	beq.n	800bb08 <TIM_OC4_SetConfig+0x74>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a2b      	ldr	r2, [pc, #172]	@ (800bba8 <TIM_OC4_SetConfig+0x114>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d003      	beq.n	800bb08 <TIM_OC4_SetConfig+0x74>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a2a      	ldr	r2, [pc, #168]	@ (800bbac <TIM_OC4_SetConfig+0x118>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d10d      	bne.n	800bb24 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bb0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	031b      	lsls	r3, r3, #12
 800bb16:	697a      	ldr	r2, [r7, #20]
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bb22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	4a1f      	ldr	r2, [pc, #124]	@ (800bba4 <TIM_OC4_SetConfig+0x110>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d013      	beq.n	800bb54 <TIM_OC4_SetConfig+0xc0>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	4a1e      	ldr	r2, [pc, #120]	@ (800bba8 <TIM_OC4_SetConfig+0x114>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d00f      	beq.n	800bb54 <TIM_OC4_SetConfig+0xc0>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4a1e      	ldr	r2, [pc, #120]	@ (800bbb0 <TIM_OC4_SetConfig+0x11c>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d00b      	beq.n	800bb54 <TIM_OC4_SetConfig+0xc0>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4a1d      	ldr	r2, [pc, #116]	@ (800bbb4 <TIM_OC4_SetConfig+0x120>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d007      	beq.n	800bb54 <TIM_OC4_SetConfig+0xc0>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	4a1c      	ldr	r2, [pc, #112]	@ (800bbb8 <TIM_OC4_SetConfig+0x124>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d003      	beq.n	800bb54 <TIM_OC4_SetConfig+0xc0>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4a17      	ldr	r2, [pc, #92]	@ (800bbac <TIM_OC4_SetConfig+0x118>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d113      	bne.n	800bb7c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bb5a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bb62:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	695b      	ldr	r3, [r3, #20]
 800bb68:	019b      	lsls	r3, r3, #6
 800bb6a:	693a      	ldr	r2, [r7, #16]
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	699b      	ldr	r3, [r3, #24]
 800bb74:	019b      	lsls	r3, r3, #6
 800bb76:	693a      	ldr	r2, [r7, #16]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	693a      	ldr	r2, [r7, #16]
 800bb80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	685a      	ldr	r2, [r3, #4]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	697a      	ldr	r2, [r7, #20]
 800bb94:	621a      	str	r2, [r3, #32]
}
 800bb96:	bf00      	nop
 800bb98:	371c      	adds	r7, #28
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	40012c00 	.word	0x40012c00
 800bba8:	40013400 	.word	0x40013400
 800bbac:	40015000 	.word	0x40015000
 800bbb0:	40014000 	.word	0x40014000
 800bbb4:	40014400 	.word	0x40014400
 800bbb8:	40014800 	.word	0x40014800

0800bbbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b087      	sub	sp, #28
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6a1b      	ldr	r3, [r3, #32]
 800bbca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6a1b      	ldr	r3, [r3, #32]
 800bbd0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bbea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	68fa      	ldr	r2, [r7, #12]
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bc00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	041b      	lsls	r3, r3, #16
 800bc08:	693a      	ldr	r2, [r7, #16]
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	4a19      	ldr	r2, [pc, #100]	@ (800bc78 <TIM_OC5_SetConfig+0xbc>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d013      	beq.n	800bc3e <TIM_OC5_SetConfig+0x82>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	4a18      	ldr	r2, [pc, #96]	@ (800bc7c <TIM_OC5_SetConfig+0xc0>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d00f      	beq.n	800bc3e <TIM_OC5_SetConfig+0x82>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	4a17      	ldr	r2, [pc, #92]	@ (800bc80 <TIM_OC5_SetConfig+0xc4>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d00b      	beq.n	800bc3e <TIM_OC5_SetConfig+0x82>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	4a16      	ldr	r2, [pc, #88]	@ (800bc84 <TIM_OC5_SetConfig+0xc8>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d007      	beq.n	800bc3e <TIM_OC5_SetConfig+0x82>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a15      	ldr	r2, [pc, #84]	@ (800bc88 <TIM_OC5_SetConfig+0xcc>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d003      	beq.n	800bc3e <TIM_OC5_SetConfig+0x82>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	4a14      	ldr	r2, [pc, #80]	@ (800bc8c <TIM_OC5_SetConfig+0xd0>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d109      	bne.n	800bc52 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	695b      	ldr	r3, [r3, #20]
 800bc4a:	021b      	lsls	r3, r3, #8
 800bc4c:	697a      	ldr	r2, [r7, #20]
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	697a      	ldr	r2, [r7, #20]
 800bc56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	685a      	ldr	r2, [r3, #4]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	693a      	ldr	r2, [r7, #16]
 800bc6a:	621a      	str	r2, [r3, #32]
}
 800bc6c:	bf00      	nop
 800bc6e:	371c      	adds	r7, #28
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr
 800bc78:	40012c00 	.word	0x40012c00
 800bc7c:	40013400 	.word	0x40013400
 800bc80:	40014000 	.word	0x40014000
 800bc84:	40014400 	.word	0x40014400
 800bc88:	40014800 	.word	0x40014800
 800bc8c:	40015000 	.word	0x40015000

0800bc90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b087      	sub	sp, #28
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6a1b      	ldr	r3, [r3, #32]
 800bc9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6a1b      	ldr	r3, [r3, #32]
 800bca4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bcbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bcc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	021b      	lsls	r3, r3, #8
 800bcca:	68fa      	ldr	r2, [r7, #12]
 800bccc:	4313      	orrs	r3, r2
 800bcce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bcd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	051b      	lsls	r3, r3, #20
 800bcde:	693a      	ldr	r2, [r7, #16]
 800bce0:	4313      	orrs	r3, r2
 800bce2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	4a1a      	ldr	r2, [pc, #104]	@ (800bd50 <TIM_OC6_SetConfig+0xc0>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d013      	beq.n	800bd14 <TIM_OC6_SetConfig+0x84>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4a19      	ldr	r2, [pc, #100]	@ (800bd54 <TIM_OC6_SetConfig+0xc4>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d00f      	beq.n	800bd14 <TIM_OC6_SetConfig+0x84>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4a18      	ldr	r2, [pc, #96]	@ (800bd58 <TIM_OC6_SetConfig+0xc8>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d00b      	beq.n	800bd14 <TIM_OC6_SetConfig+0x84>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4a17      	ldr	r2, [pc, #92]	@ (800bd5c <TIM_OC6_SetConfig+0xcc>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d007      	beq.n	800bd14 <TIM_OC6_SetConfig+0x84>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a16      	ldr	r2, [pc, #88]	@ (800bd60 <TIM_OC6_SetConfig+0xd0>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d003      	beq.n	800bd14 <TIM_OC6_SetConfig+0x84>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a15      	ldr	r2, [pc, #84]	@ (800bd64 <TIM_OC6_SetConfig+0xd4>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d109      	bne.n	800bd28 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bd1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	695b      	ldr	r3, [r3, #20]
 800bd20:	029b      	lsls	r3, r3, #10
 800bd22:	697a      	ldr	r2, [r7, #20]
 800bd24:	4313      	orrs	r3, r2
 800bd26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	697a      	ldr	r2, [r7, #20]
 800bd2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	685a      	ldr	r2, [r3, #4]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	693a      	ldr	r2, [r7, #16]
 800bd40:	621a      	str	r2, [r3, #32]
}
 800bd42:	bf00      	nop
 800bd44:	371c      	adds	r7, #28
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr
 800bd4e:	bf00      	nop
 800bd50:	40012c00 	.word	0x40012c00
 800bd54:	40013400 	.word	0x40013400
 800bd58:	40014000 	.word	0x40014000
 800bd5c:	40014400 	.word	0x40014400
 800bd60:	40014800 	.word	0x40014800
 800bd64:	40015000 	.word	0x40015000

0800bd68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b087      	sub	sp, #28
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6a1b      	ldr	r3, [r3, #32]
 800bd78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6a1b      	ldr	r3, [r3, #32]
 800bd7e:	f023 0201 	bic.w	r2, r3, #1
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	699b      	ldr	r3, [r3, #24]
 800bd8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bd92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	011b      	lsls	r3, r3, #4
 800bd98:	693a      	ldr	r2, [r7, #16]
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f023 030a 	bic.w	r3, r3, #10
 800bda4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bda6:	697a      	ldr	r2, [r7, #20]
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	693a      	ldr	r2, [r7, #16]
 800bdb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	697a      	ldr	r2, [r7, #20]
 800bdb8:	621a      	str	r2, [r3, #32]
}
 800bdba:	bf00      	nop
 800bdbc:	371c      	adds	r7, #28
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr

0800bdc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bdc6:	b480      	push	{r7}
 800bdc8:	b087      	sub	sp, #28
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	60f8      	str	r0, [r7, #12]
 800bdce:	60b9      	str	r1, [r7, #8]
 800bdd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6a1b      	ldr	r3, [r3, #32]
 800bdd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	6a1b      	ldr	r3, [r3, #32]
 800bddc:	f023 0210 	bic.w	r2, r3, #16
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	699b      	ldr	r3, [r3, #24]
 800bde8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bdf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	031b      	lsls	r3, r3, #12
 800bdf6:	693a      	ldr	r2, [r7, #16]
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800be02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	011b      	lsls	r3, r3, #4
 800be08:	697a      	ldr	r2, [r7, #20]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	693a      	ldr	r2, [r7, #16]
 800be12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	697a      	ldr	r2, [r7, #20]
 800be18:	621a      	str	r2, [r3, #32]
}
 800be1a:	bf00      	nop
 800be1c:	371c      	adds	r7, #28
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr

0800be26 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800be26:	b480      	push	{r7}
 800be28:	b085      	sub	sp, #20
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
 800be2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800be3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be42:	683a      	ldr	r2, [r7, #0]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	4313      	orrs	r3, r2
 800be48:	f043 0307 	orr.w	r3, r3, #7
 800be4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	609a      	str	r2, [r3, #8]
}
 800be54:	bf00      	nop
 800be56:	3714      	adds	r7, #20
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be60:	b480      	push	{r7}
 800be62:	b087      	sub	sp, #28
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
 800be6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800be7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	021a      	lsls	r2, r3, #8
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	431a      	orrs	r2, r3
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	4313      	orrs	r3, r2
 800be88:	697a      	ldr	r2, [r7, #20]
 800be8a:	4313      	orrs	r3, r2
 800be8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	697a      	ldr	r2, [r7, #20]
 800be92:	609a      	str	r2, [r3, #8]
}
 800be94:	bf00      	nop
 800be96:	371c      	adds	r7, #28
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b087      	sub	sp, #28
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	f003 031f 	and.w	r3, r3, #31
 800beb2:	2201      	movs	r2, #1
 800beb4:	fa02 f303 	lsl.w	r3, r2, r3
 800beb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	6a1a      	ldr	r2, [r3, #32]
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	43db      	mvns	r3, r3
 800bec2:	401a      	ands	r2, r3
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	6a1a      	ldr	r2, [r3, #32]
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	f003 031f 	and.w	r3, r3, #31
 800bed2:	6879      	ldr	r1, [r7, #4]
 800bed4:	fa01 f303 	lsl.w	r3, r1, r3
 800bed8:	431a      	orrs	r2, r3
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	621a      	str	r2, [r3, #32]
}
 800bede:	bf00      	nop
 800bee0:	371c      	adds	r7, #28
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr
	...

0800beec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800beec:	b480      	push	{r7}
 800beee:	b085      	sub	sp, #20
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800befc:	2b01      	cmp	r3, #1
 800befe:	d101      	bne.n	800bf04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf00:	2302      	movs	r3, #2
 800bf02:	e06f      	b.n	800bfe4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2202      	movs	r2, #2
 800bf10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a31      	ldr	r2, [pc, #196]	@ (800bff0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d009      	beq.n	800bf42 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4a30      	ldr	r2, [pc, #192]	@ (800bff4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d004      	beq.n	800bf42 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4a2e      	ldr	r2, [pc, #184]	@ (800bff8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d108      	bne.n	800bf54 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bf48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	68fa      	ldr	r2, [r7, #12]
 800bf50:	4313      	orrs	r3, r2
 800bf52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bf5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	68fa      	ldr	r2, [r7, #12]
 800bf66:	4313      	orrs	r3, r2
 800bf68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	68fa      	ldr	r2, [r7, #12]
 800bf70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4a1e      	ldr	r2, [pc, #120]	@ (800bff0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d01d      	beq.n	800bfb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf84:	d018      	beq.n	800bfb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a1c      	ldr	r2, [pc, #112]	@ (800bffc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d013      	beq.n	800bfb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a1a      	ldr	r2, [pc, #104]	@ (800c000 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d00e      	beq.n	800bfb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	4a15      	ldr	r2, [pc, #84]	@ (800bff4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d009      	beq.n	800bfb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a16      	ldr	r2, [pc, #88]	@ (800c004 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d004      	beq.n	800bfb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4a11      	ldr	r2, [pc, #68]	@ (800bff8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d10c      	bne.n	800bfd2 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bfbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	68ba      	ldr	r2, [r7, #8]
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	68ba      	ldr	r2, [r7, #8]
 800bfd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bfe2:	2300      	movs	r3, #0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3714      	adds	r7, #20
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr
 800bff0:	40012c00 	.word	0x40012c00
 800bff4:	40013400 	.word	0x40013400
 800bff8:	40015000 	.word	0x40015000
 800bffc:	40000400 	.word	0x40000400
 800c000:	40000800 	.word	0x40000800
 800c004:	40014000 	.word	0x40014000

0800c008 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c008:	b480      	push	{r7}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c012:	2300      	movs	r3, #0
 800c014:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d101      	bne.n	800c024 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c020:	2302      	movs	r3, #2
 800c022:	e078      	b.n	800c116 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2201      	movs	r2, #1
 800c028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	68db      	ldr	r3, [r3, #12]
 800c036:	4313      	orrs	r3, r2
 800c038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	689b      	ldr	r3, [r3, #8]
 800c044:	4313      	orrs	r3, r2
 800c046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	4313      	orrs	r3, r2
 800c054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4313      	orrs	r3, r2
 800c062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	691b      	ldr	r3, [r3, #16]
 800c06e:	4313      	orrs	r3, r2
 800c070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	695b      	ldr	r3, [r3, #20]
 800c07c:	4313      	orrs	r3, r2
 800c07e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c08a:	4313      	orrs	r3, r2
 800c08c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	699b      	ldr	r3, [r3, #24]
 800c098:	041b      	lsls	r3, r3, #16
 800c09a:	4313      	orrs	r3, r2
 800c09c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	69db      	ldr	r3, [r3, #28]
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a1c      	ldr	r2, [pc, #112]	@ (800c124 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d009      	beq.n	800c0ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a1b      	ldr	r2, [pc, #108]	@ (800c128 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d004      	beq.n	800c0ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a19      	ldr	r2, [pc, #100]	@ (800c12c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d11c      	bne.n	800c104 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0d4:	051b      	lsls	r3, r3, #20
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	6a1b      	ldr	r3, [r3, #32]
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c100:	4313      	orrs	r3, r2
 800c102:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2200      	movs	r2, #0
 800c110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c114:	2300      	movs	r3, #0
}
 800c116:	4618      	mov	r0, r3
 800c118:	3714      	adds	r7, #20
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop
 800c124:	40012c00 	.word	0x40012c00
 800c128:	40013400 	.word	0x40013400
 800c12c:	40015000 	.word	0x40015000

0800c130 <HAL_TIMEx_ConfigEncoderIndex>:
  * @param  sEncoderIndexConfig Encoder index configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigEncoderIndex(TIM_HandleTypeDef *htim,
                                               TIMEx_EncoderIndexConfigTypeDef *sEncoderIndexConfig)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  assert_param(IS_FUNCTIONAL_STATE(sEncoderIndexConfig->FirstIndexEnable));
  assert_param(IS_TIM_ENCODERINDEX_POSITION(sEncoderIndexConfig->Position));
  assert_param(IS_TIM_ENCODERINDEX_DIRECTION(sEncoderIndexConfig->Direction));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c140:	2b01      	cmp	r3, #1
 800c142:	d101      	bne.n	800c148 <HAL_TIMEx_ConfigEncoderIndex+0x18>
 800c144:	2302      	movs	r3, #2
 800c146:	e02a      	b.n	800c19e <HAL_TIMEx_ConfigEncoderIndex+0x6e>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2201      	movs	r2, #1
 800c14c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Configures the TIMx External Trigger (ETR) which is used as Index input */
  TIM_ETR_SetConfig(htim->Instance,
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6818      	ldr	r0, [r3, #0]
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	6859      	ldr	r1, [r3, #4]
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	f7ff fe7e 	bl	800be60 <TIM_ETR_SetConfig>
                    sEncoderIndexConfig->Prescaler,
                    sEncoderIndexConfig->Polarity,
                    sEncoderIndexConfig->Filter);

  /* Configures the encoder index */
  MODIFY_REG(htim->Instance->ECR,
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c16a:	f023 02e6 	bic.w	r2, r3, #230	@ 0xe6
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	695b      	ldr	r3, [r3, #20]
 800c172:	6839      	ldr	r1, [r7, #0]
 800c174:	7b09      	ldrb	r1, [r1, #12]
 800c176:	2901      	cmp	r1, #1
 800c178:	d101      	bne.n	800c17e <HAL_TIMEx_ConfigEncoderIndex+0x4e>
 800c17a:	2120      	movs	r1, #32
 800c17c:	e000      	b.n	800c180 <HAL_TIMEx_ConfigEncoderIndex+0x50>
 800c17e:	2100      	movs	r1, #0
 800c180:	4319      	orrs	r1, r3
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	430b      	orrs	r3, r1
 800c188:	431a      	orrs	r2, r3
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f042 0201 	orr.w	r2, r2, #1
 800c192:	659a      	str	r2, [r3, #88]	@ 0x58
             (sEncoderIndexConfig->Direction |
              ((sEncoderIndexConfig->FirstIndexEnable == ENABLE) ? (0x1U << TIM_ECR_FIDX_Pos) : 0U) |
              sEncoderIndexConfig->Position |
              TIM_ECR_IE));

  __HAL_UNLOCK(htim);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c19c:	2300      	movs	r3, #0
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3708      	adds	r7, #8
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}

0800c1a6 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c1a6:	b480      	push	{r7}
 800c1a8:	b083      	sub	sp, #12
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c1ae:	bf00      	nop
 800c1b0:	370c      	adds	r7, #12
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr

0800c1ba <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c1ba:	b480      	push	{r7}
 800c1bc:	b083      	sub	sp, #12
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c1c2:	bf00      	nop
 800c1c4:	370c      	adds	r7, #12
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr

0800c1ce <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c1ce:	b480      	push	{r7}
 800c1d0:	b083      	sub	sp, #12
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c1d6:	bf00      	nop
 800c1d8:	370c      	adds	r7, #12
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr

0800c1e2 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c1e2:	b480      	push	{r7}
 800c1e4:	b083      	sub	sp, #12
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c1ea:	bf00      	nop
 800c1ec:	370c      	adds	r7, #12
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr

0800c1f6 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c1f6:	b480      	push	{r7}
 800c1f8:	b083      	sub	sp, #12
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c1fe:	bf00      	nop
 800c200:	370c      	adds	r7, #12
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr

0800c20a <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c20a:	b480      	push	{r7}
 800c20c:	b083      	sub	sp, #12
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c212:	bf00      	nop
 800c214:	370c      	adds	r7, #12
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr

0800c21e <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c21e:	b480      	push	{r7}
 800c220:	b083      	sub	sp, #12
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c226:	bf00      	nop
 800c228:	370c      	adds	r7, #12
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr

0800c232 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c232:	b580      	push	{r7, lr}
 800c234:	b082      	sub	sp, #8
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d101      	bne.n	800c244 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c240:	2301      	movs	r3, #1
 800c242:	e042      	b.n	800c2ca <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d106      	bne.n	800c25c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f7f6 fb84 	bl	8002964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2224      	movs	r2, #36	@ 0x24
 800c260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f022 0201 	bic.w	r2, r2, #1
 800c272:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d002      	beq.n	800c282 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 ffdd 	bl	800d23c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 fcde 	bl	800cc44 <UART_SetConfig>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d101      	bne.n	800c292 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	e01b      	b.n	800c2ca <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	685a      	ldr	r2, [r3, #4]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c2a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	689a      	ldr	r2, [r3, #8]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c2b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f042 0201 	orr.w	r2, r2, #1
 800c2c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f001 f85c 	bl	800d380 <UART_CheckIdleState>
 800c2c8:	4603      	mov	r3, r0
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3708      	adds	r7, #8
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}

0800c2d2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b08a      	sub	sp, #40	@ 0x28
 800c2d6:	af02      	add	r7, sp, #8
 800c2d8:	60f8      	str	r0, [r7, #12]
 800c2da:	60b9      	str	r1, [r7, #8]
 800c2dc:	603b      	str	r3, [r7, #0]
 800c2de:	4613      	mov	r3, r2
 800c2e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2e8:	2b20      	cmp	r3, #32
 800c2ea:	d17b      	bne.n	800c3e4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d002      	beq.n	800c2f8 <HAL_UART_Transmit+0x26>
 800c2f2:	88fb      	ldrh	r3, [r7, #6]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d101      	bne.n	800c2fc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e074      	b.n	800c3e6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2221      	movs	r2, #33	@ 0x21
 800c308:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c30c:	f7f7 ff88 	bl	8004220 <HAL_GetTick>
 800c310:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	88fa      	ldrh	r2, [r7, #6]
 800c316:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	88fa      	ldrh	r2, [r7, #6]
 800c31e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	689b      	ldr	r3, [r3, #8]
 800c326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c32a:	d108      	bne.n	800c33e <HAL_UART_Transmit+0x6c>
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	691b      	ldr	r3, [r3, #16]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d104      	bne.n	800c33e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c334:	2300      	movs	r3, #0
 800c336:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	61bb      	str	r3, [r7, #24]
 800c33c:	e003      	b.n	800c346 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c342:	2300      	movs	r3, #0
 800c344:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c346:	e030      	b.n	800c3aa <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	9300      	str	r3, [sp, #0]
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	2200      	movs	r2, #0
 800c350:	2180      	movs	r1, #128	@ 0x80
 800c352:	68f8      	ldr	r0, [r7, #12]
 800c354:	f001 f8be 	bl	800d4d4 <UART_WaitOnFlagUntilTimeout>
 800c358:	4603      	mov	r3, r0
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d005      	beq.n	800c36a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2220      	movs	r2, #32
 800c362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c366:	2303      	movs	r3, #3
 800c368:	e03d      	b.n	800c3e6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c36a:	69fb      	ldr	r3, [r7, #28]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d10b      	bne.n	800c388 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	881b      	ldrh	r3, [r3, #0]
 800c374:	461a      	mov	r2, r3
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c37e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c380:	69bb      	ldr	r3, [r7, #24]
 800c382:	3302      	adds	r3, #2
 800c384:	61bb      	str	r3, [r7, #24]
 800c386:	e007      	b.n	800c398 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	781a      	ldrb	r2, [r3, #0]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c392:	69fb      	ldr	r3, [r7, #28]
 800c394:	3301      	adds	r3, #1
 800c396:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	b29a      	uxth	r2, r3
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c3b0:	b29b      	uxth	r3, r3
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d1c8      	bne.n	800c348 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	9300      	str	r3, [sp, #0]
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	2140      	movs	r1, #64	@ 0x40
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f001 f887 	bl	800d4d4 <UART_WaitOnFlagUntilTimeout>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d005      	beq.n	800c3d8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2220      	movs	r2, #32
 800c3d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c3d4:	2303      	movs	r3, #3
 800c3d6:	e006      	b.n	800c3e6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2220      	movs	r2, #32
 800c3dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	e000      	b.n	800c3e6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c3e4:	2302      	movs	r3, #2
  }
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3720      	adds	r7, #32
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b08a      	sub	sp, #40	@ 0x28
 800c3f2:	af02      	add	r7, sp, #8
 800c3f4:	60f8      	str	r0, [r7, #12]
 800c3f6:	60b9      	str	r1, [r7, #8]
 800c3f8:	603b      	str	r3, [r7, #0]
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c404:	2b20      	cmp	r3, #32
 800c406:	f040 80b5 	bne.w	800c574 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d002      	beq.n	800c416 <HAL_UART_Receive+0x28>
 800c410:	88fb      	ldrh	r3, [r7, #6]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d101      	bne.n	800c41a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800c416:	2301      	movs	r3, #1
 800c418:	e0ad      	b.n	800c576 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	2200      	movs	r2, #0
 800c41e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2222      	movs	r2, #34	@ 0x22
 800c426:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2200      	movs	r2, #0
 800c42e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c430:	f7f7 fef6 	bl	8004220 <HAL_GetTick>
 800c434:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	88fa      	ldrh	r2, [r7, #6]
 800c43a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	88fa      	ldrh	r2, [r7, #6]
 800c442:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c44e:	d10e      	bne.n	800c46e <HAL_UART_Receive+0x80>
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	691b      	ldr	r3, [r3, #16]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d105      	bne.n	800c464 <HAL_UART_Receive+0x76>
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c45e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c462:	e02d      	b.n	800c4c0 <HAL_UART_Receive+0xd2>
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	22ff      	movs	r2, #255	@ 0xff
 800c468:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c46c:	e028      	b.n	800c4c0 <HAL_UART_Receive+0xd2>
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	689b      	ldr	r3, [r3, #8]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d10d      	bne.n	800c492 <HAL_UART_Receive+0xa4>
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	691b      	ldr	r3, [r3, #16]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d104      	bne.n	800c488 <HAL_UART_Receive+0x9a>
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	22ff      	movs	r2, #255	@ 0xff
 800c482:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c486:	e01b      	b.n	800c4c0 <HAL_UART_Receive+0xd2>
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	227f      	movs	r2, #127	@ 0x7f
 800c48c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c490:	e016      	b.n	800c4c0 <HAL_UART_Receive+0xd2>
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c49a:	d10d      	bne.n	800c4b8 <HAL_UART_Receive+0xca>
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	691b      	ldr	r3, [r3, #16]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d104      	bne.n	800c4ae <HAL_UART_Receive+0xc0>
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	227f      	movs	r2, #127	@ 0x7f
 800c4a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c4ac:	e008      	b.n	800c4c0 <HAL_UART_Receive+0xd2>
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	223f      	movs	r2, #63	@ 0x3f
 800c4b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c4b6:	e003      	b.n	800c4c0 <HAL_UART_Receive+0xd2>
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c4c6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4d0:	d108      	bne.n	800c4e4 <HAL_UART_Receive+0xf6>
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d104      	bne.n	800c4e4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	61bb      	str	r3, [r7, #24]
 800c4e2:	e003      	b.n	800c4ec <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800c4ec:	e036      	b.n	800c55c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	9300      	str	r3, [sp, #0]
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	2120      	movs	r1, #32
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	f000 ffeb 	bl	800d4d4 <UART_WaitOnFlagUntilTimeout>
 800c4fe:	4603      	mov	r3, r0
 800c500:	2b00      	cmp	r3, #0
 800c502:	d005      	beq.n	800c510 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2220      	movs	r2, #32
 800c508:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800c50c:	2303      	movs	r3, #3
 800c50e:	e032      	b.n	800c576 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d10c      	bne.n	800c530 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	8a7b      	ldrh	r3, [r7, #18]
 800c520:	4013      	ands	r3, r2
 800c522:	b29a      	uxth	r2, r3
 800c524:	69bb      	ldr	r3, [r7, #24]
 800c526:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c528:	69bb      	ldr	r3, [r7, #24]
 800c52a:	3302      	adds	r3, #2
 800c52c:	61bb      	str	r3, [r7, #24]
 800c52e:	e00c      	b.n	800c54a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c536:	b2da      	uxtb	r2, r3
 800c538:	8a7b      	ldrh	r3, [r7, #18]
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	4013      	ands	r3, r2
 800c53e:	b2da      	uxtb	r2, r3
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800c544:	69fb      	ldr	r3, [r7, #28]
 800c546:	3301      	adds	r3, #1
 800c548:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c550:	b29b      	uxth	r3, r3
 800c552:	3b01      	subs	r3, #1
 800c554:	b29a      	uxth	r2, r3
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c562:	b29b      	uxth	r3, r3
 800c564:	2b00      	cmp	r3, #0
 800c566:	d1c2      	bne.n	800c4ee <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2220      	movs	r2, #32
 800c56c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800c570:	2300      	movs	r3, #0
 800c572:	e000      	b.n	800c576 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800c574:	2302      	movs	r3, #2
  }
}
 800c576:	4618      	mov	r0, r3
 800c578:	3720      	adds	r7, #32
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
	...

0800c580 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b0ba      	sub	sp, #232	@ 0xe8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	69db      	ldr	r3, [r3, #28]
 800c58e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	689b      	ldr	r3, [r3, #8]
 800c5a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c5a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c5aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c5ae:	4013      	ands	r3, r2
 800c5b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c5b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d11b      	bne.n	800c5f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c5bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5c0:	f003 0320 	and.w	r3, r3, #32
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d015      	beq.n	800c5f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c5c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5cc:	f003 0320 	and.w	r3, r3, #32
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d105      	bne.n	800c5e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c5d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d009      	beq.n	800c5f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	f000 8300 	beq.w	800cbea <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	4798      	blx	r3
      }
      return;
 800c5f2:	e2fa      	b.n	800cbea <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c5f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f000 8123 	beq.w	800c844 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c5fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c602:	4b8d      	ldr	r3, [pc, #564]	@ (800c838 <HAL_UART_IRQHandler+0x2b8>)
 800c604:	4013      	ands	r3, r2
 800c606:	2b00      	cmp	r3, #0
 800c608:	d106      	bne.n	800c618 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c60a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c60e:	4b8b      	ldr	r3, [pc, #556]	@ (800c83c <HAL_UART_IRQHandler+0x2bc>)
 800c610:	4013      	ands	r3, r2
 800c612:	2b00      	cmp	r3, #0
 800c614:	f000 8116 	beq.w	800c844 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c61c:	f003 0301 	and.w	r3, r3, #1
 800c620:	2b00      	cmp	r3, #0
 800c622:	d011      	beq.n	800c648 <HAL_UART_IRQHandler+0xc8>
 800c624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d00b      	beq.n	800c648 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	2201      	movs	r2, #1
 800c636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c63e:	f043 0201 	orr.w	r2, r3, #1
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c64c:	f003 0302 	and.w	r3, r3, #2
 800c650:	2b00      	cmp	r3, #0
 800c652:	d011      	beq.n	800c678 <HAL_UART_IRQHandler+0xf8>
 800c654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c658:	f003 0301 	and.w	r3, r3, #1
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d00b      	beq.n	800c678 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2202      	movs	r2, #2
 800c666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c66e:	f043 0204 	orr.w	r2, r3, #4
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c67c:	f003 0304 	and.w	r3, r3, #4
 800c680:	2b00      	cmp	r3, #0
 800c682:	d011      	beq.n	800c6a8 <HAL_UART_IRQHandler+0x128>
 800c684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c688:	f003 0301 	and.w	r3, r3, #1
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d00b      	beq.n	800c6a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2204      	movs	r2, #4
 800c696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c69e:	f043 0202 	orr.w	r2, r3, #2
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c6a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6ac:	f003 0308 	and.w	r3, r3, #8
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d017      	beq.n	800c6e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c6b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6b8:	f003 0320 	and.w	r3, r3, #32
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d105      	bne.n	800c6cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c6c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c6c4:	4b5c      	ldr	r3, [pc, #368]	@ (800c838 <HAL_UART_IRQHandler+0x2b8>)
 800c6c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d00b      	beq.n	800c6e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	2208      	movs	r2, #8
 800c6d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6da:	f043 0208 	orr.w	r2, r3, #8
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c6e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d012      	beq.n	800c716 <HAL_UART_IRQHandler+0x196>
 800c6f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d00c      	beq.n	800c716 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c70c:	f043 0220 	orr.w	r2, r3, #32
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f000 8266 	beq.w	800cbee <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c726:	f003 0320 	and.w	r3, r3, #32
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d013      	beq.n	800c756 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c72e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c732:	f003 0320 	and.w	r3, r3, #32
 800c736:	2b00      	cmp	r3, #0
 800c738:	d105      	bne.n	800c746 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c73a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c73e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c742:	2b00      	cmp	r3, #0
 800c744:	d007      	beq.n	800c756 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d003      	beq.n	800c756 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c75c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	689b      	ldr	r3, [r3, #8]
 800c766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c76a:	2b40      	cmp	r3, #64	@ 0x40
 800c76c:	d005      	beq.n	800c77a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c76e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c772:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c776:	2b00      	cmp	r3, #0
 800c778:	d054      	beq.n	800c824 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 ff17 	bl	800d5ae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	689b      	ldr	r3, [r3, #8]
 800c786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c78a:	2b40      	cmp	r3, #64	@ 0x40
 800c78c:	d146      	bne.n	800c81c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	3308      	adds	r3, #8
 800c794:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c798:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c79c:	e853 3f00 	ldrex	r3, [r3]
 800c7a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c7a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c7a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	3308      	adds	r3, #8
 800c7b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c7ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c7be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c7c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c7ca:	e841 2300 	strex	r3, r2, [r1]
 800c7ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c7d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d1d9      	bne.n	800c78e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d017      	beq.n	800c814 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7ea:	4a15      	ldr	r2, [pc, #84]	@ (800c840 <HAL_UART_IRQHandler+0x2c0>)
 800c7ec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7f9 f836 	bl	8005866 <HAL_DMA_Abort_IT>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d019      	beq.n	800c834 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c80e:	4610      	mov	r0, r2
 800c810:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c812:	e00f      	b.n	800c834 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 f9ff 	bl	800cc18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c81a:	e00b      	b.n	800c834 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 f9fb 	bl	800cc18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c822:	e007      	b.n	800c834 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 f9f7 	bl	800cc18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c832:	e1dc      	b.n	800cbee <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c834:	bf00      	nop
    return;
 800c836:	e1da      	b.n	800cbee <HAL_UART_IRQHandler+0x66e>
 800c838:	10000001 	.word	0x10000001
 800c83c:	04000120 	.word	0x04000120
 800c840:	0800d67b 	.word	0x0800d67b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c848:	2b01      	cmp	r3, #1
 800c84a:	f040 8170 	bne.w	800cb2e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c84e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c852:	f003 0310 	and.w	r3, r3, #16
 800c856:	2b00      	cmp	r3, #0
 800c858:	f000 8169 	beq.w	800cb2e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c85c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c860:	f003 0310 	and.w	r3, r3, #16
 800c864:	2b00      	cmp	r3, #0
 800c866:	f000 8162 	beq.w	800cb2e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2210      	movs	r2, #16
 800c870:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c87c:	2b40      	cmp	r3, #64	@ 0x40
 800c87e:	f040 80d8 	bne.w	800ca32 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c890:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c894:	2b00      	cmp	r3, #0
 800c896:	f000 80af 	beq.w	800c9f8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c8a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	f080 80a7 	bcs.w	800c9f8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c8b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f003 0320 	and.w	r3, r3, #32
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f040 8087 	bne.w	800c9d6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c8d4:	e853 3f00 	ldrex	r3, [r3]
 800c8d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c8dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c8e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c8e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c8f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c8f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c8fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c902:	e841 2300 	strex	r3, r2, [r1]
 800c906:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c90a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d1da      	bne.n	800c8c8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	3308      	adds	r3, #8
 800c918:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c91a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c91c:	e853 3f00 	ldrex	r3, [r3]
 800c920:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c922:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c924:	f023 0301 	bic.w	r3, r3, #1
 800c928:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	3308      	adds	r3, #8
 800c932:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c936:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c93a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c93c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c93e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c942:	e841 2300 	strex	r3, r2, [r1]
 800c946:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d1e1      	bne.n	800c912 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	3308      	adds	r3, #8
 800c954:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c956:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c958:	e853 3f00 	ldrex	r3, [r3]
 800c95c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c95e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c960:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c964:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	3308      	adds	r3, #8
 800c96e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c972:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c974:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c976:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c978:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c97a:	e841 2300 	strex	r3, r2, [r1]
 800c97e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c980:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1e3      	bne.n	800c94e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2220      	movs	r2, #32
 800c98a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c99a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c99c:	e853 3f00 	ldrex	r3, [r3]
 800c9a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c9a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9a4:	f023 0310 	bic.w	r3, r3, #16
 800c9a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c9b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c9bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c9be:	e841 2300 	strex	r3, r2, [r1]
 800c9c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c9c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d1e4      	bne.n	800c994 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7f8 feef 	bl	80057b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2202      	movs	r2, #2
 800c9da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	1ad3      	subs	r3, r2, r3
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 f91b 	bl	800cc2c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c9f6:	e0fc      	b.n	800cbf2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c9fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ca02:	429a      	cmp	r2, r3
 800ca04:	f040 80f5 	bne.w	800cbf2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f003 0320 	and.w	r3, r3, #32
 800ca16:	2b20      	cmp	r3, #32
 800ca18:	f040 80eb 	bne.w	800cbf2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2202      	movs	r2, #2
 800ca20:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ca28:	4619      	mov	r1, r3
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 f8fe 	bl	800cc2c <HAL_UARTEx_RxEventCallback>
      return;
 800ca30:	e0df      	b.n	800cbf2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	1ad3      	subs	r3, r2, r3
 800ca42:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	f000 80d1 	beq.w	800cbf6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800ca54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 80cc 	beq.w	800cbf6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca66:	e853 3f00 	ldrex	r3, [r3]
 800ca6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ca6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ca80:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ca86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca88:	e841 2300 	strex	r3, r2, [r1]
 800ca8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ca8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d1e4      	bne.n	800ca5e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	3308      	adds	r3, #8
 800ca9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca9e:	e853 3f00 	ldrex	r3, [r3]
 800caa2:	623b      	str	r3, [r7, #32]
   return(result);
 800caa4:	6a3b      	ldr	r3, [r7, #32]
 800caa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800caaa:	f023 0301 	bic.w	r3, r3, #1
 800caae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	3308      	adds	r3, #8
 800cab8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cabc:	633a      	str	r2, [r7, #48]	@ 0x30
 800cabe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cac0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cac4:	e841 2300 	strex	r3, r2, [r1]
 800cac8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800caca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d1e1      	bne.n	800ca94 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2220      	movs	r2, #32
 800cad4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2200      	movs	r2, #0
 800cadc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2200      	movs	r2, #0
 800cae2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	e853 3f00 	ldrex	r3, [r3]
 800caf0:	60fb      	str	r3, [r7, #12]
   return(result);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	f023 0310 	bic.w	r3, r3, #16
 800caf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	461a      	mov	r2, r3
 800cb02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cb06:	61fb      	str	r3, [r7, #28]
 800cb08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb0a:	69b9      	ldr	r1, [r7, #24]
 800cb0c:	69fa      	ldr	r2, [r7, #28]
 800cb0e:	e841 2300 	strex	r3, r2, [r1]
 800cb12:	617b      	str	r3, [r7, #20]
   return(result);
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d1e4      	bne.n	800cae4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2202      	movs	r2, #2
 800cb1e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cb20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cb24:	4619      	mov	r1, r3
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f000 f880 	bl	800cc2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cb2c:	e063      	b.n	800cbf6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cb2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00e      	beq.n	800cb58 <HAL_UART_IRQHandler+0x5d8>
 800cb3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d008      	beq.n	800cb58 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800cb4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 fdcf 	bl	800d6f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb56:	e051      	b.n	800cbfc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cb58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d014      	beq.n	800cb8e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cb64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d105      	bne.n	800cb7c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cb70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d008      	beq.n	800cb8e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d03a      	beq.n	800cbfa <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	4798      	blx	r3
    }
    return;
 800cb8c:	e035      	b.n	800cbfa <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cb8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d009      	beq.n	800cbae <HAL_UART_IRQHandler+0x62e>
 800cb9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d003      	beq.n	800cbae <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 fd79 	bl	800d69e <UART_EndTransmit_IT>
    return;
 800cbac:	e026      	b.n	800cbfc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cbae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d009      	beq.n	800cbce <HAL_UART_IRQHandler+0x64e>
 800cbba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbbe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d003      	beq.n	800cbce <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 fda8 	bl	800d71c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cbcc:	e016      	b.n	800cbfc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cbce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d010      	beq.n	800cbfc <HAL_UART_IRQHandler+0x67c>
 800cbda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	da0c      	bge.n	800cbfc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 fd90 	bl	800d708 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cbe8:	e008      	b.n	800cbfc <HAL_UART_IRQHandler+0x67c>
      return;
 800cbea:	bf00      	nop
 800cbec:	e006      	b.n	800cbfc <HAL_UART_IRQHandler+0x67c>
    return;
 800cbee:	bf00      	nop
 800cbf0:	e004      	b.n	800cbfc <HAL_UART_IRQHandler+0x67c>
      return;
 800cbf2:	bf00      	nop
 800cbf4:	e002      	b.n	800cbfc <HAL_UART_IRQHandler+0x67c>
      return;
 800cbf6:	bf00      	nop
 800cbf8:	e000      	b.n	800cbfc <HAL_UART_IRQHandler+0x67c>
    return;
 800cbfa:	bf00      	nop
  }
}
 800cbfc:	37e8      	adds	r7, #232	@ 0xe8
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop

0800cc04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cc0c:	bf00      	nop
 800cc0e:	370c      	adds	r7, #12
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b083      	sub	sp, #12
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cc20:	bf00      	nop
 800cc22:	370c      	adds	r7, #12
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr

0800cc2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b083      	sub	sp, #12
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	460b      	mov	r3, r1
 800cc36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cc38:	bf00      	nop
 800cc3a:	370c      	adds	r7, #12
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc48:	b08c      	sub	sp, #48	@ 0x30
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	689a      	ldr	r2, [r3, #8]
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	691b      	ldr	r3, [r3, #16]
 800cc5c:	431a      	orrs	r2, r3
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	695b      	ldr	r3, [r3, #20]
 800cc62:	431a      	orrs	r2, r3
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	69db      	ldr	r3, [r3, #28]
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	681a      	ldr	r2, [r3, #0]
 800cc72:	4baa      	ldr	r3, [pc, #680]	@ (800cf1c <UART_SetConfig+0x2d8>)
 800cc74:	4013      	ands	r3, r2
 800cc76:	697a      	ldr	r2, [r7, #20]
 800cc78:	6812      	ldr	r2, [r2, #0]
 800cc7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc7c:	430b      	orrs	r3, r1
 800cc7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	68da      	ldr	r2, [r3, #12]
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	430a      	orrs	r2, r1
 800cc94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	699b      	ldr	r3, [r3, #24]
 800cc9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a9f      	ldr	r2, [pc, #636]	@ (800cf20 <UART_SetConfig+0x2dc>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d004      	beq.n	800ccb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	6a1b      	ldr	r3, [r3, #32]
 800ccaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccac:	4313      	orrs	r3, r2
 800ccae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	689b      	ldr	r3, [r3, #8]
 800ccb6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ccba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ccbe:	697a      	ldr	r2, [r7, #20]
 800ccc0:	6812      	ldr	r2, [r2, #0]
 800ccc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ccc4:	430b      	orrs	r3, r1
 800ccc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccce:	f023 010f 	bic.w	r1, r3, #15
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	430a      	orrs	r2, r1
 800ccdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a90      	ldr	r2, [pc, #576]	@ (800cf24 <UART_SetConfig+0x2e0>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d125      	bne.n	800cd34 <UART_SetConfig+0xf0>
 800cce8:	4b8f      	ldr	r3, [pc, #572]	@ (800cf28 <UART_SetConfig+0x2e4>)
 800ccea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ccee:	f003 0303 	and.w	r3, r3, #3
 800ccf2:	2b03      	cmp	r3, #3
 800ccf4:	d81a      	bhi.n	800cd2c <UART_SetConfig+0xe8>
 800ccf6:	a201      	add	r2, pc, #4	@ (adr r2, 800ccfc <UART_SetConfig+0xb8>)
 800ccf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccfc:	0800cd0d 	.word	0x0800cd0d
 800cd00:	0800cd1d 	.word	0x0800cd1d
 800cd04:	0800cd15 	.word	0x0800cd15
 800cd08:	0800cd25 	.word	0x0800cd25
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd12:	e116      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cd14:	2302      	movs	r3, #2
 800cd16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd1a:	e112      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cd1c:	2304      	movs	r3, #4
 800cd1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd22:	e10e      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cd24:	2308      	movs	r3, #8
 800cd26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd2a:	e10a      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cd2c:	2310      	movs	r3, #16
 800cd2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd32:	e106      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4a7c      	ldr	r2, [pc, #496]	@ (800cf2c <UART_SetConfig+0x2e8>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d138      	bne.n	800cdb0 <UART_SetConfig+0x16c>
 800cd3e:	4b7a      	ldr	r3, [pc, #488]	@ (800cf28 <UART_SetConfig+0x2e4>)
 800cd40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd44:	f003 030c 	and.w	r3, r3, #12
 800cd48:	2b0c      	cmp	r3, #12
 800cd4a:	d82d      	bhi.n	800cda8 <UART_SetConfig+0x164>
 800cd4c:	a201      	add	r2, pc, #4	@ (adr r2, 800cd54 <UART_SetConfig+0x110>)
 800cd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd52:	bf00      	nop
 800cd54:	0800cd89 	.word	0x0800cd89
 800cd58:	0800cda9 	.word	0x0800cda9
 800cd5c:	0800cda9 	.word	0x0800cda9
 800cd60:	0800cda9 	.word	0x0800cda9
 800cd64:	0800cd99 	.word	0x0800cd99
 800cd68:	0800cda9 	.word	0x0800cda9
 800cd6c:	0800cda9 	.word	0x0800cda9
 800cd70:	0800cda9 	.word	0x0800cda9
 800cd74:	0800cd91 	.word	0x0800cd91
 800cd78:	0800cda9 	.word	0x0800cda9
 800cd7c:	0800cda9 	.word	0x0800cda9
 800cd80:	0800cda9 	.word	0x0800cda9
 800cd84:	0800cda1 	.word	0x0800cda1
 800cd88:	2300      	movs	r3, #0
 800cd8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd8e:	e0d8      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cd90:	2302      	movs	r3, #2
 800cd92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd96:	e0d4      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cd98:	2304      	movs	r3, #4
 800cd9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd9e:	e0d0      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cda0:	2308      	movs	r3, #8
 800cda2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cda6:	e0cc      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cda8:	2310      	movs	r3, #16
 800cdaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdae:	e0c8      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a5e      	ldr	r2, [pc, #376]	@ (800cf30 <UART_SetConfig+0x2ec>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d125      	bne.n	800ce06 <UART_SetConfig+0x1c2>
 800cdba:	4b5b      	ldr	r3, [pc, #364]	@ (800cf28 <UART_SetConfig+0x2e4>)
 800cdbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cdc0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cdc4:	2b30      	cmp	r3, #48	@ 0x30
 800cdc6:	d016      	beq.n	800cdf6 <UART_SetConfig+0x1b2>
 800cdc8:	2b30      	cmp	r3, #48	@ 0x30
 800cdca:	d818      	bhi.n	800cdfe <UART_SetConfig+0x1ba>
 800cdcc:	2b20      	cmp	r3, #32
 800cdce:	d00a      	beq.n	800cde6 <UART_SetConfig+0x1a2>
 800cdd0:	2b20      	cmp	r3, #32
 800cdd2:	d814      	bhi.n	800cdfe <UART_SetConfig+0x1ba>
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d002      	beq.n	800cdde <UART_SetConfig+0x19a>
 800cdd8:	2b10      	cmp	r3, #16
 800cdda:	d008      	beq.n	800cdee <UART_SetConfig+0x1aa>
 800cddc:	e00f      	b.n	800cdfe <UART_SetConfig+0x1ba>
 800cdde:	2300      	movs	r3, #0
 800cde0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cde4:	e0ad      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cde6:	2302      	movs	r3, #2
 800cde8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdec:	e0a9      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cdee:	2304      	movs	r3, #4
 800cdf0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdf4:	e0a5      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cdf6:	2308      	movs	r3, #8
 800cdf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdfc:	e0a1      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cdfe:	2310      	movs	r3, #16
 800ce00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce04:	e09d      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a4a      	ldr	r2, [pc, #296]	@ (800cf34 <UART_SetConfig+0x2f0>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d125      	bne.n	800ce5c <UART_SetConfig+0x218>
 800ce10:	4b45      	ldr	r3, [pc, #276]	@ (800cf28 <UART_SetConfig+0x2e4>)
 800ce12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ce1a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ce1c:	d016      	beq.n	800ce4c <UART_SetConfig+0x208>
 800ce1e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ce20:	d818      	bhi.n	800ce54 <UART_SetConfig+0x210>
 800ce22:	2b80      	cmp	r3, #128	@ 0x80
 800ce24:	d00a      	beq.n	800ce3c <UART_SetConfig+0x1f8>
 800ce26:	2b80      	cmp	r3, #128	@ 0x80
 800ce28:	d814      	bhi.n	800ce54 <UART_SetConfig+0x210>
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d002      	beq.n	800ce34 <UART_SetConfig+0x1f0>
 800ce2e:	2b40      	cmp	r3, #64	@ 0x40
 800ce30:	d008      	beq.n	800ce44 <UART_SetConfig+0x200>
 800ce32:	e00f      	b.n	800ce54 <UART_SetConfig+0x210>
 800ce34:	2300      	movs	r3, #0
 800ce36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce3a:	e082      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800ce3c:	2302      	movs	r3, #2
 800ce3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce42:	e07e      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800ce44:	2304      	movs	r3, #4
 800ce46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce4a:	e07a      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800ce4c:	2308      	movs	r3, #8
 800ce4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce52:	e076      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800ce54:	2310      	movs	r3, #16
 800ce56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce5a:	e072      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a35      	ldr	r2, [pc, #212]	@ (800cf38 <UART_SetConfig+0x2f4>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d12a      	bne.n	800cebc <UART_SetConfig+0x278>
 800ce66:	4b30      	ldr	r3, [pc, #192]	@ (800cf28 <UART_SetConfig+0x2e4>)
 800ce68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ce70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce74:	d01a      	beq.n	800ceac <UART_SetConfig+0x268>
 800ce76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce7a:	d81b      	bhi.n	800ceb4 <UART_SetConfig+0x270>
 800ce7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce80:	d00c      	beq.n	800ce9c <UART_SetConfig+0x258>
 800ce82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce86:	d815      	bhi.n	800ceb4 <UART_SetConfig+0x270>
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d003      	beq.n	800ce94 <UART_SetConfig+0x250>
 800ce8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce90:	d008      	beq.n	800cea4 <UART_SetConfig+0x260>
 800ce92:	e00f      	b.n	800ceb4 <UART_SetConfig+0x270>
 800ce94:	2300      	movs	r3, #0
 800ce96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce9a:	e052      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800ce9c:	2302      	movs	r3, #2
 800ce9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cea2:	e04e      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cea4:	2304      	movs	r3, #4
 800cea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ceaa:	e04a      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800ceac:	2308      	movs	r3, #8
 800ceae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ceb2:	e046      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800ceb4:	2310      	movs	r3, #16
 800ceb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ceba:	e042      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a17      	ldr	r2, [pc, #92]	@ (800cf20 <UART_SetConfig+0x2dc>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d13a      	bne.n	800cf3c <UART_SetConfig+0x2f8>
 800cec6:	4b18      	ldr	r3, [pc, #96]	@ (800cf28 <UART_SetConfig+0x2e4>)
 800cec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cecc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ced0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ced4:	d01a      	beq.n	800cf0c <UART_SetConfig+0x2c8>
 800ced6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ceda:	d81b      	bhi.n	800cf14 <UART_SetConfig+0x2d0>
 800cedc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cee0:	d00c      	beq.n	800cefc <UART_SetConfig+0x2b8>
 800cee2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cee6:	d815      	bhi.n	800cf14 <UART_SetConfig+0x2d0>
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d003      	beq.n	800cef4 <UART_SetConfig+0x2b0>
 800ceec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cef0:	d008      	beq.n	800cf04 <UART_SetConfig+0x2c0>
 800cef2:	e00f      	b.n	800cf14 <UART_SetConfig+0x2d0>
 800cef4:	2300      	movs	r3, #0
 800cef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cefa:	e022      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cefc:	2302      	movs	r3, #2
 800cefe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf02:	e01e      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cf04:	2304      	movs	r3, #4
 800cf06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf0a:	e01a      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cf0c:	2308      	movs	r3, #8
 800cf0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf12:	e016      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cf14:	2310      	movs	r3, #16
 800cf16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf1a:	e012      	b.n	800cf42 <UART_SetConfig+0x2fe>
 800cf1c:	cfff69f3 	.word	0xcfff69f3
 800cf20:	40008000 	.word	0x40008000
 800cf24:	40013800 	.word	0x40013800
 800cf28:	40021000 	.word	0x40021000
 800cf2c:	40004400 	.word	0x40004400
 800cf30:	40004800 	.word	0x40004800
 800cf34:	40004c00 	.word	0x40004c00
 800cf38:	40005000 	.word	0x40005000
 800cf3c:	2310      	movs	r3, #16
 800cf3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4aae      	ldr	r2, [pc, #696]	@ (800d200 <UART_SetConfig+0x5bc>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	f040 8097 	bne.w	800d07c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cf4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cf52:	2b08      	cmp	r3, #8
 800cf54:	d823      	bhi.n	800cf9e <UART_SetConfig+0x35a>
 800cf56:	a201      	add	r2, pc, #4	@ (adr r2, 800cf5c <UART_SetConfig+0x318>)
 800cf58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf5c:	0800cf81 	.word	0x0800cf81
 800cf60:	0800cf9f 	.word	0x0800cf9f
 800cf64:	0800cf89 	.word	0x0800cf89
 800cf68:	0800cf9f 	.word	0x0800cf9f
 800cf6c:	0800cf8f 	.word	0x0800cf8f
 800cf70:	0800cf9f 	.word	0x0800cf9f
 800cf74:	0800cf9f 	.word	0x0800cf9f
 800cf78:	0800cf9f 	.word	0x0800cf9f
 800cf7c:	0800cf97 	.word	0x0800cf97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf80:	f7fc f8e6 	bl	8009150 <HAL_RCC_GetPCLK1Freq>
 800cf84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cf86:	e010      	b.n	800cfaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cf88:	4b9e      	ldr	r3, [pc, #632]	@ (800d204 <UART_SetConfig+0x5c0>)
 800cf8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cf8c:	e00d      	b.n	800cfaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cf8e:	f7fc f871 	bl	8009074 <HAL_RCC_GetSysClockFreq>
 800cf92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cf94:	e009      	b.n	800cfaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cf9c:	e005      	b.n	800cfaa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800cfa8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cfaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f000 8130 	beq.w	800d212 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfb6:	4a94      	ldr	r2, [pc, #592]	@ (800d208 <UART_SetConfig+0x5c4>)
 800cfb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfc4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	685a      	ldr	r2, [r3, #4]
 800cfca:	4613      	mov	r3, r2
 800cfcc:	005b      	lsls	r3, r3, #1
 800cfce:	4413      	add	r3, r2
 800cfd0:	69ba      	ldr	r2, [r7, #24]
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d305      	bcc.n	800cfe2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cfdc:	69ba      	ldr	r2, [r7, #24]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d903      	bls.n	800cfea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800cfe8:	e113      	b.n	800d212 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cfea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfec:	2200      	movs	r2, #0
 800cfee:	60bb      	str	r3, [r7, #8]
 800cff0:	60fa      	str	r2, [r7, #12]
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cff6:	4a84      	ldr	r2, [pc, #528]	@ (800d208 <UART_SetConfig+0x5c4>)
 800cff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	2200      	movs	r2, #0
 800d000:	603b      	str	r3, [r7, #0]
 800d002:	607a      	str	r2, [r7, #4]
 800d004:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d008:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d00c:	f7f3 fe44 	bl	8000c98 <__aeabi_uldivmod>
 800d010:	4602      	mov	r2, r0
 800d012:	460b      	mov	r3, r1
 800d014:	4610      	mov	r0, r2
 800d016:	4619      	mov	r1, r3
 800d018:	f04f 0200 	mov.w	r2, #0
 800d01c:	f04f 0300 	mov.w	r3, #0
 800d020:	020b      	lsls	r3, r1, #8
 800d022:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d026:	0202      	lsls	r2, r0, #8
 800d028:	6979      	ldr	r1, [r7, #20]
 800d02a:	6849      	ldr	r1, [r1, #4]
 800d02c:	0849      	lsrs	r1, r1, #1
 800d02e:	2000      	movs	r0, #0
 800d030:	460c      	mov	r4, r1
 800d032:	4605      	mov	r5, r0
 800d034:	eb12 0804 	adds.w	r8, r2, r4
 800d038:	eb43 0905 	adc.w	r9, r3, r5
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	2200      	movs	r2, #0
 800d042:	469a      	mov	sl, r3
 800d044:	4693      	mov	fp, r2
 800d046:	4652      	mov	r2, sl
 800d048:	465b      	mov	r3, fp
 800d04a:	4640      	mov	r0, r8
 800d04c:	4649      	mov	r1, r9
 800d04e:	f7f3 fe23 	bl	8000c98 <__aeabi_uldivmod>
 800d052:	4602      	mov	r2, r0
 800d054:	460b      	mov	r3, r1
 800d056:	4613      	mov	r3, r2
 800d058:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d05a:	6a3b      	ldr	r3, [r7, #32]
 800d05c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d060:	d308      	bcc.n	800d074 <UART_SetConfig+0x430>
 800d062:	6a3b      	ldr	r3, [r7, #32]
 800d064:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d068:	d204      	bcs.n	800d074 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	6a3a      	ldr	r2, [r7, #32]
 800d070:	60da      	str	r2, [r3, #12]
 800d072:	e0ce      	b.n	800d212 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800d074:	2301      	movs	r3, #1
 800d076:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d07a:	e0ca      	b.n	800d212 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	69db      	ldr	r3, [r3, #28]
 800d080:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d084:	d166      	bne.n	800d154 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800d086:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d08a:	2b08      	cmp	r3, #8
 800d08c:	d827      	bhi.n	800d0de <UART_SetConfig+0x49a>
 800d08e:	a201      	add	r2, pc, #4	@ (adr r2, 800d094 <UART_SetConfig+0x450>)
 800d090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d094:	0800d0b9 	.word	0x0800d0b9
 800d098:	0800d0c1 	.word	0x0800d0c1
 800d09c:	0800d0c9 	.word	0x0800d0c9
 800d0a0:	0800d0df 	.word	0x0800d0df
 800d0a4:	0800d0cf 	.word	0x0800d0cf
 800d0a8:	0800d0df 	.word	0x0800d0df
 800d0ac:	0800d0df 	.word	0x0800d0df
 800d0b0:	0800d0df 	.word	0x0800d0df
 800d0b4:	0800d0d7 	.word	0x0800d0d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0b8:	f7fc f84a 	bl	8009150 <HAL_RCC_GetPCLK1Freq>
 800d0bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d0be:	e014      	b.n	800d0ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0c0:	f7fc f85c 	bl	800917c <HAL_RCC_GetPCLK2Freq>
 800d0c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d0c6:	e010      	b.n	800d0ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d0c8:	4b4e      	ldr	r3, [pc, #312]	@ (800d204 <UART_SetConfig+0x5c0>)
 800d0ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d0cc:	e00d      	b.n	800d0ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d0ce:	f7fb ffd1 	bl	8009074 <HAL_RCC_GetSysClockFreq>
 800d0d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d0d4:	e009      	b.n	800d0ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d0da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d0dc:	e005      	b.n	800d0ea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d0e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f000 8090 	beq.w	800d212 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0f6:	4a44      	ldr	r2, [pc, #272]	@ (800d208 <UART_SetConfig+0x5c4>)
 800d0f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d100:	fbb3 f3f2 	udiv	r3, r3, r2
 800d104:	005a      	lsls	r2, r3, #1
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	085b      	lsrs	r3, r3, #1
 800d10c:	441a      	add	r2, r3
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	fbb2 f3f3 	udiv	r3, r2, r3
 800d116:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d118:	6a3b      	ldr	r3, [r7, #32]
 800d11a:	2b0f      	cmp	r3, #15
 800d11c:	d916      	bls.n	800d14c <UART_SetConfig+0x508>
 800d11e:	6a3b      	ldr	r3, [r7, #32]
 800d120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d124:	d212      	bcs.n	800d14c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d126:	6a3b      	ldr	r3, [r7, #32]
 800d128:	b29b      	uxth	r3, r3
 800d12a:	f023 030f 	bic.w	r3, r3, #15
 800d12e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d130:	6a3b      	ldr	r3, [r7, #32]
 800d132:	085b      	lsrs	r3, r3, #1
 800d134:	b29b      	uxth	r3, r3
 800d136:	f003 0307 	and.w	r3, r3, #7
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	8bfb      	ldrh	r3, [r7, #30]
 800d13e:	4313      	orrs	r3, r2
 800d140:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	8bfa      	ldrh	r2, [r7, #30]
 800d148:	60da      	str	r2, [r3, #12]
 800d14a:	e062      	b.n	800d212 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800d14c:	2301      	movs	r3, #1
 800d14e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d152:	e05e      	b.n	800d212 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d154:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d158:	2b08      	cmp	r3, #8
 800d15a:	d828      	bhi.n	800d1ae <UART_SetConfig+0x56a>
 800d15c:	a201      	add	r2, pc, #4	@ (adr r2, 800d164 <UART_SetConfig+0x520>)
 800d15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d162:	bf00      	nop
 800d164:	0800d189 	.word	0x0800d189
 800d168:	0800d191 	.word	0x0800d191
 800d16c:	0800d199 	.word	0x0800d199
 800d170:	0800d1af 	.word	0x0800d1af
 800d174:	0800d19f 	.word	0x0800d19f
 800d178:	0800d1af 	.word	0x0800d1af
 800d17c:	0800d1af 	.word	0x0800d1af
 800d180:	0800d1af 	.word	0x0800d1af
 800d184:	0800d1a7 	.word	0x0800d1a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d188:	f7fb ffe2 	bl	8009150 <HAL_RCC_GetPCLK1Freq>
 800d18c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d18e:	e014      	b.n	800d1ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d190:	f7fb fff4 	bl	800917c <HAL_RCC_GetPCLK2Freq>
 800d194:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d196:	e010      	b.n	800d1ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d198:	4b1a      	ldr	r3, [pc, #104]	@ (800d204 <UART_SetConfig+0x5c0>)
 800d19a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d19c:	e00d      	b.n	800d1ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d19e:	f7fb ff69 	bl	8009074 <HAL_RCC_GetSysClockFreq>
 800d1a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d1a4:	e009      	b.n	800d1ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d1ac:	e005      	b.n	800d1ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d1b8:	bf00      	nop
    }

    if (pclk != 0U)
 800d1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d028      	beq.n	800d212 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1c4:	4a10      	ldr	r2, [pc, #64]	@ (800d208 <UART_SetConfig+0x5c4>)
 800d1c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ce:	fbb3 f2f2 	udiv	r2, r3, r2
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	085b      	lsrs	r3, r3, #1
 800d1d8:	441a      	add	r2, r3
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1e4:	6a3b      	ldr	r3, [r7, #32]
 800d1e6:	2b0f      	cmp	r3, #15
 800d1e8:	d910      	bls.n	800d20c <UART_SetConfig+0x5c8>
 800d1ea:	6a3b      	ldr	r3, [r7, #32]
 800d1ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1f0:	d20c      	bcs.n	800d20c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d1f2:	6a3b      	ldr	r3, [r7, #32]
 800d1f4:	b29a      	uxth	r2, r3
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	60da      	str	r2, [r3, #12]
 800d1fc:	e009      	b.n	800d212 <UART_SetConfig+0x5ce>
 800d1fe:	bf00      	nop
 800d200:	40008000 	.word	0x40008000
 800d204:	00f42400 	.word	0x00f42400
 800d208:	080158c4 	.word	0x080158c4
      }
      else
      {
        ret = HAL_ERROR;
 800d20c:	2301      	movs	r3, #1
 800d20e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	2201      	movs	r2, #1
 800d216:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	2201      	movs	r2, #1
 800d21e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	2200      	movs	r2, #0
 800d226:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	2200      	movs	r2, #0
 800d22c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d22e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d232:	4618      	mov	r0, r3
 800d234:	3730      	adds	r7, #48	@ 0x30
 800d236:	46bd      	mov	sp, r7
 800d238:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d23c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d248:	f003 0308 	and.w	r3, r3, #8
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00a      	beq.n	800d266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	430a      	orrs	r2, r1
 800d264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d26a:	f003 0301 	and.w	r3, r3, #1
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d00a      	beq.n	800d288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	430a      	orrs	r2, r1
 800d286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d28c:	f003 0302 	and.w	r3, r3, #2
 800d290:	2b00      	cmp	r3, #0
 800d292:	d00a      	beq.n	800d2aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	430a      	orrs	r2, r1
 800d2a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2ae:	f003 0304 	and.w	r3, r3, #4
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d00a      	beq.n	800d2cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	430a      	orrs	r2, r1
 800d2ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2d0:	f003 0310 	and.w	r3, r3, #16
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d00a      	beq.n	800d2ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	689b      	ldr	r3, [r3, #8]
 800d2de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	430a      	orrs	r2, r1
 800d2ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2f2:	f003 0320 	and.w	r3, r3, #32
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d00a      	beq.n	800d310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	689b      	ldr	r3, [r3, #8]
 800d300:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	430a      	orrs	r2, r1
 800d30e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d01a      	beq.n	800d352 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	430a      	orrs	r2, r1
 800d330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d33a:	d10a      	bne.n	800d352 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	430a      	orrs	r2, r1
 800d350:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00a      	beq.n	800d374 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	430a      	orrs	r2, r1
 800d372:	605a      	str	r2, [r3, #4]
  }
}
 800d374:	bf00      	nop
 800d376:	370c      	adds	r7, #12
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr

0800d380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b098      	sub	sp, #96	@ 0x60
 800d384:	af02      	add	r7, sp, #8
 800d386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2200      	movs	r2, #0
 800d38c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d390:	f7f6 ff46 	bl	8004220 <HAL_GetTick>
 800d394:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f003 0308 	and.w	r3, r3, #8
 800d3a0:	2b08      	cmp	r3, #8
 800d3a2:	d12f      	bne.n	800d404 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d3a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d3a8:	9300      	str	r3, [sp, #0]
 800d3aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 f88e 	bl	800d4d4 <UART_WaitOnFlagUntilTimeout>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d022      	beq.n	800d404 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c6:	e853 3f00 	ldrex	r3, [r3]
 800d3ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d3cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d3d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	461a      	mov	r2, r3
 800d3da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d3e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d3e4:	e841 2300 	strex	r3, r2, [r1]
 800d3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d3ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d1e6      	bne.n	800d3be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2220      	movs	r2, #32
 800d3f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d400:	2303      	movs	r3, #3
 800d402:	e063      	b.n	800d4cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f003 0304 	and.w	r3, r3, #4
 800d40e:	2b04      	cmp	r3, #4
 800d410:	d149      	bne.n	800d4a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d412:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d416:	9300      	str	r3, [sp, #0]
 800d418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d41a:	2200      	movs	r2, #0
 800d41c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f000 f857 	bl	800d4d4 <UART_WaitOnFlagUntilTimeout>
 800d426:	4603      	mov	r3, r0
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d03c      	beq.n	800d4a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d434:	e853 3f00 	ldrex	r3, [r3]
 800d438:	623b      	str	r3, [r7, #32]
   return(result);
 800d43a:	6a3b      	ldr	r3, [r7, #32]
 800d43c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d440:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	461a      	mov	r2, r3
 800d448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d44a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d44c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d44e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d450:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d452:	e841 2300 	strex	r3, r2, [r1]
 800d456:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d1e6      	bne.n	800d42c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	3308      	adds	r3, #8
 800d464:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	e853 3f00 	ldrex	r3, [r3]
 800d46c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	f023 0301 	bic.w	r3, r3, #1
 800d474:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	3308      	adds	r3, #8
 800d47c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d47e:	61fa      	str	r2, [r7, #28]
 800d480:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d482:	69b9      	ldr	r1, [r7, #24]
 800d484:	69fa      	ldr	r2, [r7, #28]
 800d486:	e841 2300 	strex	r3, r2, [r1]
 800d48a:	617b      	str	r3, [r7, #20]
   return(result);
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d1e5      	bne.n	800d45e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2220      	movs	r2, #32
 800d496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2200      	movs	r2, #0
 800d49e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4a2:	2303      	movs	r3, #3
 800d4a4:	e012      	b.n	800d4cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2220      	movs	r2, #32
 800d4aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2220      	movs	r2, #32
 800d4b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d4ca:	2300      	movs	r3, #0
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3758      	adds	r7, #88	@ 0x58
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	603b      	str	r3, [r7, #0]
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4e4:	e04f      	b.n	800d586 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d4e6:	69bb      	ldr	r3, [r7, #24]
 800d4e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d4ec:	d04b      	beq.n	800d586 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4ee:	f7f6 fe97 	bl	8004220 <HAL_GetTick>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	1ad3      	subs	r3, r2, r3
 800d4f8:	69ba      	ldr	r2, [r7, #24]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d302      	bcc.n	800d504 <UART_WaitOnFlagUntilTimeout+0x30>
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d101      	bne.n	800d508 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d504:	2303      	movs	r3, #3
 800d506:	e04e      	b.n	800d5a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f003 0304 	and.w	r3, r3, #4
 800d512:	2b00      	cmp	r3, #0
 800d514:	d037      	beq.n	800d586 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	2b80      	cmp	r3, #128	@ 0x80
 800d51a:	d034      	beq.n	800d586 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	2b40      	cmp	r3, #64	@ 0x40
 800d520:	d031      	beq.n	800d586 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	69db      	ldr	r3, [r3, #28]
 800d528:	f003 0308 	and.w	r3, r3, #8
 800d52c:	2b08      	cmp	r3, #8
 800d52e:	d110      	bne.n	800d552 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	2208      	movs	r2, #8
 800d536:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d538:	68f8      	ldr	r0, [r7, #12]
 800d53a:	f000 f838 	bl	800d5ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2208      	movs	r2, #8
 800d542:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	2200      	movs	r2, #0
 800d54a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d54e:	2301      	movs	r3, #1
 800d550:	e029      	b.n	800d5a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	69db      	ldr	r3, [r3, #28]
 800d558:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d55c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d560:	d111      	bne.n	800d586 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d56a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d56c:	68f8      	ldr	r0, [r7, #12]
 800d56e:	f000 f81e 	bl	800d5ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2220      	movs	r2, #32
 800d576:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2200      	movs	r2, #0
 800d57e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d582:	2303      	movs	r3, #3
 800d584:	e00f      	b.n	800d5a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	69da      	ldr	r2, [r3, #28]
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	4013      	ands	r3, r2
 800d590:	68ba      	ldr	r2, [r7, #8]
 800d592:	429a      	cmp	r2, r3
 800d594:	bf0c      	ite	eq
 800d596:	2301      	moveq	r3, #1
 800d598:	2300      	movne	r3, #0
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	461a      	mov	r2, r3
 800d59e:	79fb      	ldrb	r3, [r7, #7]
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d0a0      	beq.n	800d4e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d5a4:	2300      	movs	r3, #0
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3710      	adds	r7, #16
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d5ae:	b480      	push	{r7}
 800d5b0:	b095      	sub	sp, #84	@ 0x54
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5be:	e853 3f00 	ldrex	r3, [r3]
 800d5c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d5ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5d4:	643b      	str	r3, [r7, #64]	@ 0x40
 800d5d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d5da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d5dc:	e841 2300 	strex	r3, r2, [r1]
 800d5e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d1e6      	bne.n	800d5b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	3308      	adds	r3, #8
 800d5ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5f0:	6a3b      	ldr	r3, [r7, #32]
 800d5f2:	e853 3f00 	ldrex	r3, [r3]
 800d5f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800d5f8:	69fb      	ldr	r3, [r7, #28]
 800d5fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d5fe:	f023 0301 	bic.w	r3, r3, #1
 800d602:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	3308      	adds	r3, #8
 800d60a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d60c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d60e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d610:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d612:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d614:	e841 2300 	strex	r3, r2, [r1]
 800d618:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d1e3      	bne.n	800d5e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d624:	2b01      	cmp	r3, #1
 800d626:	d118      	bne.n	800d65a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	e853 3f00 	ldrex	r3, [r3]
 800d634:	60bb      	str	r3, [r7, #8]
   return(result);
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	f023 0310 	bic.w	r3, r3, #16
 800d63c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	461a      	mov	r2, r3
 800d644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d646:	61bb      	str	r3, [r7, #24]
 800d648:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d64a:	6979      	ldr	r1, [r7, #20]
 800d64c:	69ba      	ldr	r2, [r7, #24]
 800d64e:	e841 2300 	strex	r3, r2, [r1]
 800d652:	613b      	str	r3, [r7, #16]
   return(result);
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d1e6      	bne.n	800d628 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2220      	movs	r2, #32
 800d65e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2200      	movs	r2, #0
 800d666:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2200      	movs	r2, #0
 800d66c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d66e:	bf00      	nop
 800d670:	3754      	adds	r7, #84	@ 0x54
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr

0800d67a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b084      	sub	sp, #16
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d686:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2200      	movs	r2, #0
 800d68c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d690:	68f8      	ldr	r0, [r7, #12]
 800d692:	f7ff fac1 	bl	800cc18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d696:	bf00      	nop
 800d698:	3710      	adds	r7, #16
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}

0800d69e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b088      	sub	sp, #32
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	e853 3f00 	ldrex	r3, [r3]
 800d6b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d6ba:	61fb      	str	r3, [r7, #28]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	61bb      	str	r3, [r7, #24]
 800d6c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c8:	6979      	ldr	r1, [r7, #20]
 800d6ca:	69ba      	ldr	r2, [r7, #24]
 800d6cc:	e841 2300 	strex	r3, r2, [r1]
 800d6d0:	613b      	str	r3, [r7, #16]
   return(result);
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d1e6      	bne.n	800d6a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2220      	movs	r2, #32
 800d6dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f7ff fa8c 	bl	800cc04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6ec:	bf00      	nop
 800d6ee:	3720      	adds	r7, #32
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d6fc:	bf00      	nop
 800d6fe:	370c      	adds	r7, #12
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr

0800d708 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d708:	b480      	push	{r7}
 800d70a:	b083      	sub	sp, #12
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d710:	bf00      	nop
 800d712:	370c      	adds	r7, #12
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr

0800d71c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d71c:	b480      	push	{r7}
 800d71e:	b083      	sub	sp, #12
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d724:	bf00      	nop
 800d726:	370c      	adds	r7, #12
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr

0800d730 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d730:	b480      	push	{r7}
 800d732:	b085      	sub	sp, #20
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d101      	bne.n	800d746 <HAL_UARTEx_DisableFifoMode+0x16>
 800d742:	2302      	movs	r3, #2
 800d744:	e027      	b.n	800d796 <HAL_UARTEx_DisableFifoMode+0x66>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2201      	movs	r2, #1
 800d74a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2224      	movs	r2, #36	@ 0x24
 800d752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	681a      	ldr	r2, [r3, #0]
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f022 0201 	bic.w	r2, r2, #1
 800d76c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d774:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2200      	movs	r2, #0
 800d77a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	68fa      	ldr	r2, [r7, #12]
 800d782:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2220      	movs	r2, #32
 800d788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2200      	movs	r2, #0
 800d790:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d794:	2300      	movs	r3, #0
}
 800d796:	4618      	mov	r0, r3
 800d798:	3714      	adds	r7, #20
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr

0800d7a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7a2:	b580      	push	{r7, lr}
 800d7a4:	b084      	sub	sp, #16
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	6078      	str	r0, [r7, #4]
 800d7aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d7b2:	2b01      	cmp	r3, #1
 800d7b4:	d101      	bne.n	800d7ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d7b6:	2302      	movs	r3, #2
 800d7b8:	e02d      	b.n	800d816 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2201      	movs	r2, #1
 800d7be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2224      	movs	r2, #36	@ 0x24
 800d7c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	681a      	ldr	r2, [r3, #0]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f022 0201 	bic.w	r2, r2, #1
 800d7e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	689b      	ldr	r3, [r3, #8]
 800d7e8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	683a      	ldr	r2, [r7, #0]
 800d7f2:	430a      	orrs	r2, r1
 800d7f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f000 f850 	bl	800d89c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	68fa      	ldr	r2, [r7, #12]
 800d802:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2220      	movs	r2, #32
 800d808:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	3710      	adds	r7, #16
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}

0800d81e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d81e:	b580      	push	{r7, lr}
 800d820:	b084      	sub	sp, #16
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
 800d826:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d101      	bne.n	800d836 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d832:	2302      	movs	r3, #2
 800d834:	e02d      	b.n	800d892 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2201      	movs	r2, #1
 800d83a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2224      	movs	r2, #36	@ 0x24
 800d842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	681a      	ldr	r2, [r3, #0]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f022 0201 	bic.w	r2, r2, #1
 800d85c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	689b      	ldr	r3, [r3, #8]
 800d864:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	683a      	ldr	r2, [r7, #0]
 800d86e:	430a      	orrs	r2, r1
 800d870:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 f812 	bl	800d89c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	68fa      	ldr	r2, [r7, #12]
 800d87e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2220      	movs	r2, #32
 800d884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2200      	movs	r2, #0
 800d88c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d890:	2300      	movs	r3, #0
}
 800d892:	4618      	mov	r0, r3
 800d894:	3710      	adds	r7, #16
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
	...

0800d89c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b085      	sub	sp, #20
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d108      	bne.n	800d8be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2201      	movs	r2, #1
 800d8b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d8bc:	e031      	b.n	800d922 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d8be:	2308      	movs	r3, #8
 800d8c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d8c2:	2308      	movs	r3, #8
 800d8c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	689b      	ldr	r3, [r3, #8]
 800d8cc:	0e5b      	lsrs	r3, r3, #25
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	f003 0307 	and.w	r3, r3, #7
 800d8d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	689b      	ldr	r3, [r3, #8]
 800d8dc:	0f5b      	lsrs	r3, r3, #29
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	f003 0307 	and.w	r3, r3, #7
 800d8e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d8e6:	7bbb      	ldrb	r3, [r7, #14]
 800d8e8:	7b3a      	ldrb	r2, [r7, #12]
 800d8ea:	4911      	ldr	r1, [pc, #68]	@ (800d930 <UARTEx_SetNbDataToProcess+0x94>)
 800d8ec:	5c8a      	ldrb	r2, [r1, r2]
 800d8ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d8f2:	7b3a      	ldrb	r2, [r7, #12]
 800d8f4:	490f      	ldr	r1, [pc, #60]	@ (800d934 <UARTEx_SetNbDataToProcess+0x98>)
 800d8f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d8f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d8fc:	b29a      	uxth	r2, r3
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d904:	7bfb      	ldrb	r3, [r7, #15]
 800d906:	7b7a      	ldrb	r2, [r7, #13]
 800d908:	4909      	ldr	r1, [pc, #36]	@ (800d930 <UARTEx_SetNbDataToProcess+0x94>)
 800d90a:	5c8a      	ldrb	r2, [r1, r2]
 800d90c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d910:	7b7a      	ldrb	r2, [r7, #13]
 800d912:	4908      	ldr	r1, [pc, #32]	@ (800d934 <UARTEx_SetNbDataToProcess+0x98>)
 800d914:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d916:	fb93 f3f2 	sdiv	r3, r3, r2
 800d91a:	b29a      	uxth	r2, r3
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d922:	bf00      	nop
 800d924:	3714      	adds	r7, #20
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr
 800d92e:	bf00      	nop
 800d930:	080158dc 	.word	0x080158dc
 800d934:	080158e4 	.word	0x080158e4

0800d938 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800d938:	b480      	push	{r7}
 800d93a:	b085      	sub	sp, #20
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2200      	movs	r2, #0
 800d944:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d948:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800d94c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	b29a      	uxth	r2, r3
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d958:	2300      	movs	r3, #0
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	3714      	adds	r7, #20
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr

0800d966 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d966:	b480      	push	{r7}
 800d968:	b085      	sub	sp, #20
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d96e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800d972:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	b29b      	uxth	r3, r3
 800d980:	43db      	mvns	r3, r3
 800d982:	b29b      	uxth	r3, r3
 800d984:	4013      	ands	r3, r2
 800d986:	b29a      	uxth	r2, r3
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d98e:	2300      	movs	r3, #0
}
 800d990:	4618      	mov	r0, r3
 800d992:	3714      	adds	r7, #20
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr

0800d99c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b085      	sub	sp, #20
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	1d3b      	adds	r3, r7, #4
 800d9a6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800d9ca:	2300      	movs	r3, #0
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3714      	adds	r7, #20
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b0a7      	sub	sp, #156	@ 0x9c
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	009b      	lsls	r3, r3, #2
 800d9f0:	4413      	add	r3, r2
 800d9f2:	881b      	ldrh	r3, [r3, #0]
 800d9f4:	b29b      	uxth	r3, r3
 800d9f6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800d9fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9fe:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	78db      	ldrb	r3, [r3, #3]
 800da06:	2b03      	cmp	r3, #3
 800da08:	d81f      	bhi.n	800da4a <USB_ActivateEndpoint+0x72>
 800da0a:	a201      	add	r2, pc, #4	@ (adr r2, 800da10 <USB_ActivateEndpoint+0x38>)
 800da0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da10:	0800da21 	.word	0x0800da21
 800da14:	0800da3d 	.word	0x0800da3d
 800da18:	0800da53 	.word	0x0800da53
 800da1c:	0800da2f 	.word	0x0800da2f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800da20:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800da24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800da28:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800da2c:	e012      	b.n	800da54 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800da2e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800da32:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800da36:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800da3a:	e00b      	b.n	800da54 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800da3c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800da40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800da44:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800da48:	e004      	b.n	800da54 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800da4a:	2301      	movs	r3, #1
 800da4c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800da50:	e000      	b.n	800da54 <USB_ActivateEndpoint+0x7c>
      break;
 800da52:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800da54:	687a      	ldr	r2, [r7, #4]
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	009b      	lsls	r3, r3, #2
 800da5c:	441a      	add	r2, r3
 800da5e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800da62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da72:	b29b      	uxth	r3, r3
 800da74:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	009b      	lsls	r3, r3, #2
 800da7e:	4413      	add	r3, r2
 800da80:	881b      	ldrh	r3, [r3, #0]
 800da82:	b29b      	uxth	r3, r3
 800da84:	b21b      	sxth	r3, r3
 800da86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da8e:	b21a      	sxth	r2, r3
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	b21b      	sxth	r3, r3
 800da96:	4313      	orrs	r3, r2
 800da98:	b21b      	sxth	r3, r3
 800da9a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800da9e:	687a      	ldr	r2, [r7, #4]
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	009b      	lsls	r3, r3, #2
 800daa6:	441a      	add	r2, r3
 800daa8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800daac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dab0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dab4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	7b1b      	ldrb	r3, [r3, #12]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	f040 8180 	bne.w	800ddca <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	785b      	ldrb	r3, [r3, #1]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	f000 8084 	beq.w	800dbdc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	61bb      	str	r3, [r7, #24]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dade:	b29b      	uxth	r3, r3
 800dae0:	461a      	mov	r2, r3
 800dae2:	69bb      	ldr	r3, [r7, #24]
 800dae4:	4413      	add	r3, r2
 800dae6:	61bb      	str	r3, [r7, #24]
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	00da      	lsls	r2, r3, #3
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	4413      	add	r3, r2
 800daf2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800daf6:	617b      	str	r3, [r7, #20]
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	88db      	ldrh	r3, [r3, #6]
 800dafc:	085b      	lsrs	r3, r3, #1
 800dafe:	b29b      	uxth	r3, r3
 800db00:	005b      	lsls	r3, r3, #1
 800db02:	b29a      	uxth	r2, r3
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	009b      	lsls	r3, r3, #2
 800db10:	4413      	add	r3, r2
 800db12:	881b      	ldrh	r3, [r3, #0]
 800db14:	827b      	strh	r3, [r7, #18]
 800db16:	8a7b      	ldrh	r3, [r7, #18]
 800db18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d01b      	beq.n	800db58 <USB_ActivateEndpoint+0x180>
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	4413      	add	r3, r2
 800db2a:	881b      	ldrh	r3, [r3, #0]
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db36:	823b      	strh	r3, [r7, #16]
 800db38:	687a      	ldr	r2, [r7, #4]
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	441a      	add	r2, r3
 800db42:	8a3b      	ldrh	r3, [r7, #16]
 800db44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800db54:	b29b      	uxth	r3, r3
 800db56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	78db      	ldrb	r3, [r3, #3]
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	d020      	beq.n	800dba2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800db60:	687a      	ldr	r2, [r7, #4]
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	009b      	lsls	r3, r3, #2
 800db68:	4413      	add	r3, r2
 800db6a:	881b      	ldrh	r3, [r3, #0]
 800db6c:	b29b      	uxth	r3, r3
 800db6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db76:	81bb      	strh	r3, [r7, #12]
 800db78:	89bb      	ldrh	r3, [r7, #12]
 800db7a:	f083 0320 	eor.w	r3, r3, #32
 800db7e:	81bb      	strh	r3, [r7, #12]
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	009b      	lsls	r3, r3, #2
 800db88:	441a      	add	r2, r3
 800db8a:	89bb      	ldrh	r3, [r7, #12]
 800db8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	8013      	strh	r3, [r2, #0]
 800dba0:	e3f9      	b.n	800e396 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dba2:	687a      	ldr	r2, [r7, #4]
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	4413      	add	r3, r2
 800dbac:	881b      	ldrh	r3, [r3, #0]
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dbb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dbb8:	81fb      	strh	r3, [r7, #14]
 800dbba:	687a      	ldr	r2, [r7, #4]
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	009b      	lsls	r3, r3, #2
 800dbc2:	441a      	add	r2, r3
 800dbc4:	89fb      	ldrh	r3, [r7, #14]
 800dbc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dbca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dbce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dbd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbd6:	b29b      	uxth	r3, r3
 800dbd8:	8013      	strh	r3, [r2, #0]
 800dbda:	e3dc      	b.n	800e396 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	633b      	str	r3, [r7, #48]	@ 0x30
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	461a      	mov	r2, r3
 800dbea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbec:	4413      	add	r3, r2
 800dbee:	633b      	str	r3, [r7, #48]	@ 0x30
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	00da      	lsls	r2, r3, #3
 800dbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbf8:	4413      	add	r3, r2
 800dbfa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800dbfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	88db      	ldrh	r3, [r3, #6]
 800dc04:	085b      	lsrs	r3, r3, #1
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	005b      	lsls	r3, r3, #1
 800dc0a:	b29a      	uxth	r2, r3
 800dc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc0e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	461a      	mov	r2, r3
 800dc1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc20:	4413      	add	r3, r2
 800dc22:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	00da      	lsls	r2, r3, #3
 800dc2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc2c:	4413      	add	r3, r2
 800dc2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dc32:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc36:	881b      	ldrh	r3, [r3, #0]
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc3e:	b29a      	uxth	r2, r3
 800dc40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc42:	801a      	strh	r2, [r3, #0]
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	691b      	ldr	r3, [r3, #16]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d10a      	bne.n	800dc62 <USB_ActivateEndpoint+0x28a>
 800dc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc4e:	881b      	ldrh	r3, [r3, #0]
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc5a:	b29a      	uxth	r2, r3
 800dc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc5e:	801a      	strh	r2, [r3, #0]
 800dc60:	e041      	b.n	800dce6 <USB_ActivateEndpoint+0x30e>
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	691b      	ldr	r3, [r3, #16]
 800dc66:	2b3e      	cmp	r3, #62	@ 0x3e
 800dc68:	d81c      	bhi.n	800dca4 <USB_ActivateEndpoint+0x2cc>
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	691b      	ldr	r3, [r3, #16]
 800dc6e:	085b      	lsrs	r3, r3, #1
 800dc70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	691b      	ldr	r3, [r3, #16]
 800dc78:	f003 0301 	and.w	r3, r3, #1
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d004      	beq.n	800dc8a <USB_ActivateEndpoint+0x2b2>
 800dc80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dc84:	3301      	adds	r3, #1
 800dc86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dc8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc8c:	881b      	ldrh	r3, [r3, #0]
 800dc8e:	b29a      	uxth	r2, r3
 800dc90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	029b      	lsls	r3, r3, #10
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	b29a      	uxth	r2, r3
 800dc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dca0:	801a      	strh	r2, [r3, #0]
 800dca2:	e020      	b.n	800dce6 <USB_ActivateEndpoint+0x30e>
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	691b      	ldr	r3, [r3, #16]
 800dca8:	095b      	lsrs	r3, r3, #5
 800dcaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	691b      	ldr	r3, [r3, #16]
 800dcb2:	f003 031f 	and.w	r3, r3, #31
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d104      	bne.n	800dcc4 <USB_ActivateEndpoint+0x2ec>
 800dcba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dcbe:	3b01      	subs	r3, #1
 800dcc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dcc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcc6:	881b      	ldrh	r3, [r3, #0]
 800dcc8:	b29a      	uxth	r2, r3
 800dcca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	029b      	lsls	r3, r3, #10
 800dcd2:	b29b      	uxth	r3, r3
 800dcd4:	4313      	orrs	r3, r2
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dce0:	b29a      	uxth	r2, r3
 800dce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dce4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	009b      	lsls	r3, r3, #2
 800dcee:	4413      	add	r3, r2
 800dcf0:	881b      	ldrh	r3, [r3, #0]
 800dcf2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800dcf4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dcf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d01b      	beq.n	800dd36 <USB_ActivateEndpoint+0x35e>
 800dcfe:	687a      	ldr	r2, [r7, #4]
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	781b      	ldrb	r3, [r3, #0]
 800dd04:	009b      	lsls	r3, r3, #2
 800dd06:	4413      	add	r3, r2
 800dd08:	881b      	ldrh	r3, [r3, #0]
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dd10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd14:	843b      	strh	r3, [r7, #32]
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	009b      	lsls	r3, r3, #2
 800dd1e:	441a      	add	r2, r3
 800dd20:	8c3b      	ldrh	r3, [r7, #32]
 800dd22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dd2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d124      	bne.n	800dd88 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dd3e:	687a      	ldr	r2, [r7, #4]
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	009b      	lsls	r3, r3, #2
 800dd46:	4413      	add	r3, r2
 800dd48:	881b      	ldrh	r3, [r3, #0]
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dd50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd54:	83bb      	strh	r3, [r7, #28]
 800dd56:	8bbb      	ldrh	r3, [r7, #28]
 800dd58:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800dd5c:	83bb      	strh	r3, [r7, #28]
 800dd5e:	8bbb      	ldrh	r3, [r7, #28]
 800dd60:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800dd64:	83bb      	strh	r3, [r7, #28]
 800dd66:	687a      	ldr	r2, [r7, #4]
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	441a      	add	r2, r3
 800dd70:	8bbb      	ldrh	r3, [r7, #28]
 800dd72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	8013      	strh	r3, [r2, #0]
 800dd86:	e306      	b.n	800e396 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800dd88:	687a      	ldr	r2, [r7, #4]
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	4413      	add	r3, r2
 800dd92:	881b      	ldrh	r3, [r3, #0]
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dd9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd9e:	83fb      	strh	r3, [r7, #30]
 800dda0:	8bfb      	ldrh	r3, [r7, #30]
 800dda2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800dda6:	83fb      	strh	r3, [r7, #30]
 800dda8:	687a      	ldr	r2, [r7, #4]
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	441a      	add	r2, r3
 800ddb2:	8bfb      	ldrh	r3, [r7, #30]
 800ddb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ddb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ddbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ddc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	8013      	strh	r3, [r2, #0]
 800ddc8:	e2e5      	b.n	800e396 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	78db      	ldrb	r3, [r3, #3]
 800ddce:	2b02      	cmp	r3, #2
 800ddd0:	d11e      	bne.n	800de10 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	009b      	lsls	r3, r3, #2
 800ddda:	4413      	add	r3, r2
 800dddc:	881b      	ldrh	r3, [r3, #0]
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dde4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dde8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800ddec:	687a      	ldr	r2, [r7, #4]
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	009b      	lsls	r3, r3, #2
 800ddf4:	441a      	add	r2, r3
 800ddf6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800ddfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ddfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800de02:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800de06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	8013      	strh	r3, [r2, #0]
 800de0e:	e01d      	b.n	800de4c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	009b      	lsls	r3, r3, #2
 800de18:	4413      	add	r3, r2
 800de1a:	881b      	ldrh	r3, [r3, #0]
 800de1c:	b29b      	uxth	r3, r3
 800de1e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800de22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de26:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	009b      	lsls	r3, r3, #2
 800de32:	441a      	add	r2, r3
 800de34:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800de38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800de3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800de40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de48:	b29b      	uxth	r3, r3
 800de4a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de56:	b29b      	uxth	r3, r3
 800de58:	461a      	mov	r2, r3
 800de5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800de5c:	4413      	add	r3, r2
 800de5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	00da      	lsls	r2, r3, #3
 800de66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800de68:	4413      	add	r3, r2
 800de6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800de6e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	891b      	ldrh	r3, [r3, #8]
 800de74:	085b      	lsrs	r3, r3, #1
 800de76:	b29b      	uxth	r3, r3
 800de78:	005b      	lsls	r3, r3, #1
 800de7a:	b29a      	uxth	r2, r3
 800de7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de7e:	801a      	strh	r2, [r3, #0]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	677b      	str	r3, [r7, #116]	@ 0x74
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de8a:	b29b      	uxth	r3, r3
 800de8c:	461a      	mov	r2, r3
 800de8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800de90:	4413      	add	r3, r2
 800de92:	677b      	str	r3, [r7, #116]	@ 0x74
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	00da      	lsls	r2, r3, #3
 800de9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800de9c:	4413      	add	r3, r2
 800de9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800dea2:	673b      	str	r3, [r7, #112]	@ 0x70
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	895b      	ldrh	r3, [r3, #10]
 800dea8:	085b      	lsrs	r3, r3, #1
 800deaa:	b29b      	uxth	r3, r3
 800deac:	005b      	lsls	r3, r3, #1
 800deae:	b29a      	uxth	r2, r3
 800deb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800deb2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	785b      	ldrb	r3, [r3, #1]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	f040 81af 	bne.w	800e21c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800debe:	687a      	ldr	r2, [r7, #4]
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	009b      	lsls	r3, r3, #2
 800dec6:	4413      	add	r3, r2
 800dec8:	881b      	ldrh	r3, [r3, #0]
 800deca:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800dece:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800ded2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d01d      	beq.n	800df16 <USB_ActivateEndpoint+0x53e>
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	4413      	add	r3, r2
 800dee4:	881b      	ldrh	r3, [r3, #0]
 800dee6:	b29b      	uxth	r3, r3
 800dee8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800deec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800def0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800def4:	687a      	ldr	r2, [r7, #4]
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	009b      	lsls	r3, r3, #2
 800defc:	441a      	add	r2, r3
 800defe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800df02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800df0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800df0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df12:	b29b      	uxth	r3, r3
 800df14:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	4413      	add	r3, r2
 800df20:	881b      	ldrh	r3, [r3, #0]
 800df22:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800df26:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800df2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d01d      	beq.n	800df6e <USB_ActivateEndpoint+0x596>
 800df32:	687a      	ldr	r2, [r7, #4]
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	009b      	lsls	r3, r3, #2
 800df3a:	4413      	add	r3, r2
 800df3c:	881b      	ldrh	r3, [r3, #0]
 800df3e:	b29b      	uxth	r3, r3
 800df40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800df44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df48:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800df4c:	687a      	ldr	r2, [r7, #4]
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	441a      	add	r2, r3
 800df56:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800df5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800df62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df66:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	785b      	ldrb	r3, [r3, #1]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d16b      	bne.n	800e04e <USB_ActivateEndpoint+0x676>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df80:	b29b      	uxth	r3, r3
 800df82:	461a      	mov	r2, r3
 800df84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df86:	4413      	add	r3, r2
 800df88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	00da      	lsls	r2, r3, #3
 800df90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df92:	4413      	add	r3, r2
 800df94:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800df98:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df9c:	881b      	ldrh	r3, [r3, #0]
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dfa4:	b29a      	uxth	r2, r3
 800dfa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfa8:	801a      	strh	r2, [r3, #0]
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	691b      	ldr	r3, [r3, #16]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d10a      	bne.n	800dfc8 <USB_ActivateEndpoint+0x5f0>
 800dfb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfb4:	881b      	ldrh	r3, [r3, #0]
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dfbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dfc0:	b29a      	uxth	r2, r3
 800dfc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfc4:	801a      	strh	r2, [r3, #0]
 800dfc6:	e05d      	b.n	800e084 <USB_ActivateEndpoint+0x6ac>
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	691b      	ldr	r3, [r3, #16]
 800dfcc:	2b3e      	cmp	r3, #62	@ 0x3e
 800dfce:	d81c      	bhi.n	800e00a <USB_ActivateEndpoint+0x632>
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	691b      	ldr	r3, [r3, #16]
 800dfd4:	085b      	lsrs	r3, r3, #1
 800dfd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	691b      	ldr	r3, [r3, #16]
 800dfde:	f003 0301 	and.w	r3, r3, #1
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d004      	beq.n	800dff0 <USB_ActivateEndpoint+0x618>
 800dfe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dfea:	3301      	adds	r3, #1
 800dfec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800dff0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dff2:	881b      	ldrh	r3, [r3, #0]
 800dff4:	b29a      	uxth	r2, r3
 800dff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	029b      	lsls	r3, r3, #10
 800dffe:	b29b      	uxth	r3, r3
 800e000:	4313      	orrs	r3, r2
 800e002:	b29a      	uxth	r2, r3
 800e004:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e006:	801a      	strh	r2, [r3, #0]
 800e008:	e03c      	b.n	800e084 <USB_ActivateEndpoint+0x6ac>
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	691b      	ldr	r3, [r3, #16]
 800e00e:	095b      	lsrs	r3, r3, #5
 800e010:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	691b      	ldr	r3, [r3, #16]
 800e018:	f003 031f 	and.w	r3, r3, #31
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d104      	bne.n	800e02a <USB_ActivateEndpoint+0x652>
 800e020:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e024:	3b01      	subs	r3, #1
 800e026:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e02a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e02c:	881b      	ldrh	r3, [r3, #0]
 800e02e:	b29a      	uxth	r2, r3
 800e030:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e034:	b29b      	uxth	r3, r3
 800e036:	029b      	lsls	r3, r3, #10
 800e038:	b29b      	uxth	r3, r3
 800e03a:	4313      	orrs	r3, r2
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e046:	b29a      	uxth	r2, r3
 800e048:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e04a:	801a      	strh	r2, [r3, #0]
 800e04c:	e01a      	b.n	800e084 <USB_ActivateEndpoint+0x6ac>
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	785b      	ldrb	r3, [r3, #1]
 800e052:	2b01      	cmp	r3, #1
 800e054:	d116      	bne.n	800e084 <USB_ActivateEndpoint+0x6ac>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	657b      	str	r3, [r7, #84]	@ 0x54
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e060:	b29b      	uxth	r3, r3
 800e062:	461a      	mov	r2, r3
 800e064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e066:	4413      	add	r3, r2
 800e068:	657b      	str	r3, [r7, #84]	@ 0x54
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	00da      	lsls	r2, r3, #3
 800e070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e072:	4413      	add	r3, r2
 800e074:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e078:	653b      	str	r3, [r7, #80]	@ 0x50
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	691b      	ldr	r3, [r3, #16]
 800e07e:	b29a      	uxth	r2, r3
 800e080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e082:	801a      	strh	r2, [r3, #0]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	647b      	str	r3, [r7, #68]	@ 0x44
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	785b      	ldrb	r3, [r3, #1]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d16b      	bne.n	800e168 <USB_ActivateEndpoint+0x790>
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	461a      	mov	r2, r3
 800e09e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0a0:	4413      	add	r3, r2
 800e0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	00da      	lsls	r2, r3, #3
 800e0aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0ac:	4413      	add	r3, r2
 800e0ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e0b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0b6:	881b      	ldrh	r3, [r3, #0]
 800e0b8:	b29b      	uxth	r3, r3
 800e0ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e0be:	b29a      	uxth	r2, r3
 800e0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0c2:	801a      	strh	r2, [r3, #0]
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	691b      	ldr	r3, [r3, #16]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d10a      	bne.n	800e0e2 <USB_ActivateEndpoint+0x70a>
 800e0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ce:	881b      	ldrh	r3, [r3, #0]
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0da:	b29a      	uxth	r2, r3
 800e0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0de:	801a      	strh	r2, [r3, #0]
 800e0e0:	e05b      	b.n	800e19a <USB_ActivateEndpoint+0x7c2>
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	691b      	ldr	r3, [r3, #16]
 800e0e6:	2b3e      	cmp	r3, #62	@ 0x3e
 800e0e8:	d81c      	bhi.n	800e124 <USB_ActivateEndpoint+0x74c>
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	691b      	ldr	r3, [r3, #16]
 800e0ee:	085b      	lsrs	r3, r3, #1
 800e0f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	691b      	ldr	r3, [r3, #16]
 800e0f8:	f003 0301 	and.w	r3, r3, #1
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d004      	beq.n	800e10a <USB_ActivateEndpoint+0x732>
 800e100:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e104:	3301      	adds	r3, #1
 800e106:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e10c:	881b      	ldrh	r3, [r3, #0]
 800e10e:	b29a      	uxth	r2, r3
 800e110:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e114:	b29b      	uxth	r3, r3
 800e116:	029b      	lsls	r3, r3, #10
 800e118:	b29b      	uxth	r3, r3
 800e11a:	4313      	orrs	r3, r2
 800e11c:	b29a      	uxth	r2, r3
 800e11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e120:	801a      	strh	r2, [r3, #0]
 800e122:	e03a      	b.n	800e19a <USB_ActivateEndpoint+0x7c2>
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	691b      	ldr	r3, [r3, #16]
 800e128:	095b      	lsrs	r3, r3, #5
 800e12a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	691b      	ldr	r3, [r3, #16]
 800e132:	f003 031f 	and.w	r3, r3, #31
 800e136:	2b00      	cmp	r3, #0
 800e138:	d104      	bne.n	800e144 <USB_ActivateEndpoint+0x76c>
 800e13a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e13e:	3b01      	subs	r3, #1
 800e140:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e146:	881b      	ldrh	r3, [r3, #0]
 800e148:	b29a      	uxth	r2, r3
 800e14a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e14e:	b29b      	uxth	r3, r3
 800e150:	029b      	lsls	r3, r3, #10
 800e152:	b29b      	uxth	r3, r3
 800e154:	4313      	orrs	r3, r2
 800e156:	b29b      	uxth	r3, r3
 800e158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e15c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e160:	b29a      	uxth	r2, r3
 800e162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e164:	801a      	strh	r2, [r3, #0]
 800e166:	e018      	b.n	800e19a <USB_ActivateEndpoint+0x7c2>
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	785b      	ldrb	r3, [r3, #1]
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d114      	bne.n	800e19a <USB_ActivateEndpoint+0x7c2>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e176:	b29b      	uxth	r3, r3
 800e178:	461a      	mov	r2, r3
 800e17a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e17c:	4413      	add	r3, r2
 800e17e:	647b      	str	r3, [r7, #68]	@ 0x44
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	00da      	lsls	r2, r3, #3
 800e186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e188:	4413      	add	r3, r2
 800e18a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e18e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	691b      	ldr	r3, [r3, #16]
 800e194:	b29a      	uxth	r2, r3
 800e196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e198:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	009b      	lsls	r3, r3, #2
 800e1a2:	4413      	add	r3, r2
 800e1a4:	881b      	ldrh	r3, [r3, #0]
 800e1a6:	b29b      	uxth	r3, r3
 800e1a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e1ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e1b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e1b2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e1b4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e1b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e1ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e1bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e1c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e1c2:	687a      	ldr	r2, [r7, #4]
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	009b      	lsls	r3, r3, #2
 800e1ca:	441a      	add	r2, r3
 800e1cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e1ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e1d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e1d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	781b      	ldrb	r3, [r3, #0]
 800e1e8:	009b      	lsls	r3, r3, #2
 800e1ea:	4413      	add	r3, r2
 800e1ec:	881b      	ldrh	r3, [r3, #0]
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e1f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e1f8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	009b      	lsls	r3, r3, #2
 800e202:	441a      	add	r2, r3
 800e204:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800e206:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e20a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e20e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e216:	b29b      	uxth	r3, r3
 800e218:	8013      	strh	r3, [r2, #0]
 800e21a:	e0bc      	b.n	800e396 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	781b      	ldrb	r3, [r3, #0]
 800e222:	009b      	lsls	r3, r3, #2
 800e224:	4413      	add	r3, r2
 800e226:	881b      	ldrh	r3, [r3, #0]
 800e228:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800e22c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e230:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e234:	2b00      	cmp	r3, #0
 800e236:	d01d      	beq.n	800e274 <USB_ActivateEndpoint+0x89c>
 800e238:	687a      	ldr	r2, [r7, #4]
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	781b      	ldrb	r3, [r3, #0]
 800e23e:	009b      	lsls	r3, r3, #2
 800e240:	4413      	add	r3, r2
 800e242:	881b      	ldrh	r3, [r3, #0]
 800e244:	b29b      	uxth	r3, r3
 800e246:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e24a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e24e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800e252:	687a      	ldr	r2, [r7, #4]
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	009b      	lsls	r3, r3, #2
 800e25a:	441a      	add	r2, r3
 800e25c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e260:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e264:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e268:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e26c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e270:	b29b      	uxth	r3, r3
 800e272:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e274:	687a      	ldr	r2, [r7, #4]
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	4413      	add	r3, r2
 800e27e:	881b      	ldrh	r3, [r3, #0]
 800e280:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800e284:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800e288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d01d      	beq.n	800e2cc <USB_ActivateEndpoint+0x8f4>
 800e290:	687a      	ldr	r2, [r7, #4]
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	781b      	ldrb	r3, [r3, #0]
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	4413      	add	r3, r2
 800e29a:	881b      	ldrh	r3, [r3, #0]
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e2a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e2a6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800e2aa:	687a      	ldr	r2, [r7, #4]
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	441a      	add	r2, r3
 800e2b4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800e2b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e2bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e2c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	78db      	ldrb	r3, [r3, #3]
 800e2d0:	2b01      	cmp	r3, #1
 800e2d2:	d024      	beq.n	800e31e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e2d4:	687a      	ldr	r2, [r7, #4]
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	4413      	add	r3, r2
 800e2de:	881b      	ldrh	r3, [r3, #0]
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e2e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e2ea:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800e2ee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800e2f2:	f083 0320 	eor.w	r3, r3, #32
 800e2f6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	009b      	lsls	r3, r3, #2
 800e302:	441a      	add	r2, r3
 800e304:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800e308:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e30c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e310:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e318:	b29b      	uxth	r3, r3
 800e31a:	8013      	strh	r3, [r2, #0]
 800e31c:	e01d      	b.n	800e35a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	4413      	add	r3, r2
 800e328:	881b      	ldrh	r3, [r3, #0]
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e330:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e334:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	009b      	lsls	r3, r3, #2
 800e340:	441a      	add	r2, r3
 800e342:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800e346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e34a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e34e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e356:	b29b      	uxth	r3, r3
 800e358:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	009b      	lsls	r3, r3, #2
 800e362:	4413      	add	r3, r2
 800e364:	881b      	ldrh	r3, [r3, #0]
 800e366:	b29b      	uxth	r3, r3
 800e368:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e36c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e370:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	441a      	add	r2, r3
 800e37e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800e382:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e386:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e38a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e38e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e392:	b29b      	uxth	r3, r3
 800e394:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800e396:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	379c      	adds	r7, #156	@ 0x9c
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr
 800e3a6:	bf00      	nop

0800e3a8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b0ac      	sub	sp, #176	@ 0xb0
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	785b      	ldrb	r3, [r3, #1]
 800e3b6:	2b01      	cmp	r3, #1
 800e3b8:	f040 84ca 	bne.w	800ed50 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	699a      	ldr	r2, [r3, #24]
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	691b      	ldr	r3, [r3, #16]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d904      	bls.n	800e3d2 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	691b      	ldr	r3, [r3, #16]
 800e3cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e3d0:	e003      	b.n	800e3da <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	699b      	ldr	r3, [r3, #24]
 800e3d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	7b1b      	ldrb	r3, [r3, #12]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d122      	bne.n	800e428 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	6959      	ldr	r1, [r3, #20]
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	88da      	ldrh	r2, [r3, #6]
 800e3ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f000 fed2 	bl	800f19a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	613b      	str	r3, [r7, #16]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e400:	b29b      	uxth	r3, r3
 800e402:	461a      	mov	r2, r3
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	4413      	add	r3, r2
 800e408:	613b      	str	r3, [r7, #16]
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	00da      	lsls	r2, r3, #3
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	4413      	add	r3, r2
 800e414:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e418:	60fb      	str	r3, [r7, #12]
 800e41a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e41e:	b29a      	uxth	r2, r3
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	801a      	strh	r2, [r3, #0]
 800e424:	f000 bc6f 	b.w	800ed06 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	78db      	ldrb	r3, [r3, #3]
 800e42c:	2b02      	cmp	r3, #2
 800e42e:	f040 831e 	bne.w	800ea6e <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	6a1a      	ldr	r2, [r3, #32]
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	691b      	ldr	r3, [r3, #16]
 800e43a:	429a      	cmp	r2, r3
 800e43c:	f240 82cf 	bls.w	800e9de <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	009b      	lsls	r3, r3, #2
 800e448:	4413      	add	r3, r2
 800e44a:	881b      	ldrh	r3, [r3, #0]
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e456:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800e45a:	687a      	ldr	r2, [r7, #4]
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	009b      	lsls	r3, r3, #2
 800e462:	441a      	add	r2, r3
 800e464:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800e468:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e46c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e470:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e478:	b29b      	uxth	r3, r3
 800e47a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	6a1a      	ldr	r2, [r3, #32]
 800e480:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e484:	1ad2      	subs	r2, r2, r3
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e48a:	687a      	ldr	r2, [r7, #4]
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	009b      	lsls	r3, r3, #2
 800e492:	4413      	add	r3, r2
 800e494:	881b      	ldrh	r3, [r3, #0]
 800e496:	b29b      	uxth	r3, r3
 800e498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	f000 814f 	beq.w	800e740 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	633b      	str	r3, [r7, #48]	@ 0x30
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	785b      	ldrb	r3, [r3, #1]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d16b      	bne.n	800e586 <USB_EPStartXfer+0x1de>
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e4b8:	b29b      	uxth	r3, r3
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4be:	4413      	add	r3, r2
 800e4c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	00da      	lsls	r2, r3, #3
 800e4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4ca:	4413      	add	r3, r2
 800e4cc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e4d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4d4:	881b      	ldrh	r3, [r3, #0]
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e4dc:	b29a      	uxth	r2, r3
 800e4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e0:	801a      	strh	r2, [r3, #0]
 800e4e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d10a      	bne.n	800e500 <USB_EPStartXfer+0x158>
 800e4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ec:	881b      	ldrh	r3, [r3, #0]
 800e4ee:	b29b      	uxth	r3, r3
 800e4f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e4f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e4f8:	b29a      	uxth	r2, r3
 800e4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4fc:	801a      	strh	r2, [r3, #0]
 800e4fe:	e05b      	b.n	800e5b8 <USB_EPStartXfer+0x210>
 800e500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e504:	2b3e      	cmp	r3, #62	@ 0x3e
 800e506:	d81c      	bhi.n	800e542 <USB_EPStartXfer+0x19a>
 800e508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e50c:	085b      	lsrs	r3, r3, #1
 800e50e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e516:	f003 0301 	and.w	r3, r3, #1
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d004      	beq.n	800e528 <USB_EPStartXfer+0x180>
 800e51e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e522:	3301      	adds	r3, #1
 800e524:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e52a:	881b      	ldrh	r3, [r3, #0]
 800e52c:	b29a      	uxth	r2, r3
 800e52e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e532:	b29b      	uxth	r3, r3
 800e534:	029b      	lsls	r3, r3, #10
 800e536:	b29b      	uxth	r3, r3
 800e538:	4313      	orrs	r3, r2
 800e53a:	b29a      	uxth	r2, r3
 800e53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e53e:	801a      	strh	r2, [r3, #0]
 800e540:	e03a      	b.n	800e5b8 <USB_EPStartXfer+0x210>
 800e542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e546:	095b      	lsrs	r3, r3, #5
 800e548:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e54c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e550:	f003 031f 	and.w	r3, r3, #31
 800e554:	2b00      	cmp	r3, #0
 800e556:	d104      	bne.n	800e562 <USB_EPStartXfer+0x1ba>
 800e558:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e55c:	3b01      	subs	r3, #1
 800e55e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e564:	881b      	ldrh	r3, [r3, #0]
 800e566:	b29a      	uxth	r2, r3
 800e568:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e56c:	b29b      	uxth	r3, r3
 800e56e:	029b      	lsls	r3, r3, #10
 800e570:	b29b      	uxth	r3, r3
 800e572:	4313      	orrs	r3, r2
 800e574:	b29b      	uxth	r3, r3
 800e576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e57a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e57e:	b29a      	uxth	r2, r3
 800e580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e582:	801a      	strh	r2, [r3, #0]
 800e584:	e018      	b.n	800e5b8 <USB_EPStartXfer+0x210>
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	785b      	ldrb	r3, [r3, #1]
 800e58a:	2b01      	cmp	r3, #1
 800e58c:	d114      	bne.n	800e5b8 <USB_EPStartXfer+0x210>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e594:	b29b      	uxth	r3, r3
 800e596:	461a      	mov	r2, r3
 800e598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e59a:	4413      	add	r3, r2
 800e59c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	00da      	lsls	r2, r3, #3
 800e5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a6:	4413      	add	r3, r2
 800e5a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e5ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e5ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e5b2:	b29a      	uxth	r2, r3
 800e5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	895b      	ldrh	r3, [r3, #10]
 800e5bc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	6959      	ldr	r1, [r3, #20]
 800e5c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 fde3 	bl	800f19a <USB_WritePMA>
            ep->xfer_buff += len;
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	695a      	ldr	r2, [r3, #20]
 800e5d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e5dc:	441a      	add	r2, r3
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	6a1a      	ldr	r2, [r3, #32]
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	691b      	ldr	r3, [r3, #16]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d907      	bls.n	800e5fe <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	6a1a      	ldr	r2, [r3, #32]
 800e5f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e5f6:	1ad2      	subs	r2, r2, r3
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	621a      	str	r2, [r3, #32]
 800e5fc:	e006      	b.n	800e60c <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	6a1b      	ldr	r3, [r3, #32]
 800e602:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	2200      	movs	r2, #0
 800e60a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	785b      	ldrb	r3, [r3, #1]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d16b      	bne.n	800e6ec <USB_EPStartXfer+0x344>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	61bb      	str	r3, [r7, #24]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e61e:	b29b      	uxth	r3, r3
 800e620:	461a      	mov	r2, r3
 800e622:	69bb      	ldr	r3, [r7, #24]
 800e624:	4413      	add	r3, r2
 800e626:	61bb      	str	r3, [r7, #24]
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	00da      	lsls	r2, r3, #3
 800e62e:	69bb      	ldr	r3, [r7, #24]
 800e630:	4413      	add	r3, r2
 800e632:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e636:	617b      	str	r3, [r7, #20]
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	881b      	ldrh	r3, [r3, #0]
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e642:	b29a      	uxth	r2, r3
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	801a      	strh	r2, [r3, #0]
 800e648:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d10a      	bne.n	800e666 <USB_EPStartXfer+0x2be>
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	881b      	ldrh	r3, [r3, #0]
 800e654:	b29b      	uxth	r3, r3
 800e656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e65a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e65e:	b29a      	uxth	r2, r3
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	801a      	strh	r2, [r3, #0]
 800e664:	e05d      	b.n	800e722 <USB_EPStartXfer+0x37a>
 800e666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e66a:	2b3e      	cmp	r3, #62	@ 0x3e
 800e66c:	d81c      	bhi.n	800e6a8 <USB_EPStartXfer+0x300>
 800e66e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e672:	085b      	lsrs	r3, r3, #1
 800e674:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e678:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e67c:	f003 0301 	and.w	r3, r3, #1
 800e680:	2b00      	cmp	r3, #0
 800e682:	d004      	beq.n	800e68e <USB_EPStartXfer+0x2e6>
 800e684:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e688:	3301      	adds	r3, #1
 800e68a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	881b      	ldrh	r3, [r3, #0]
 800e692:	b29a      	uxth	r2, r3
 800e694:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e698:	b29b      	uxth	r3, r3
 800e69a:	029b      	lsls	r3, r3, #10
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	4313      	orrs	r3, r2
 800e6a0:	b29a      	uxth	r2, r3
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	801a      	strh	r2, [r3, #0]
 800e6a6:	e03c      	b.n	800e722 <USB_EPStartXfer+0x37a>
 800e6a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e6ac:	095b      	lsrs	r3, r3, #5
 800e6ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e6b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e6b6:	f003 031f 	and.w	r3, r3, #31
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d104      	bne.n	800e6c8 <USB_EPStartXfer+0x320>
 800e6be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e6c2:	3b01      	subs	r3, #1
 800e6c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	881b      	ldrh	r3, [r3, #0]
 800e6cc:	b29a      	uxth	r2, r3
 800e6ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	029b      	lsls	r3, r3, #10
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	4313      	orrs	r3, r2
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e6e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e6e4:	b29a      	uxth	r2, r3
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	801a      	strh	r2, [r3, #0]
 800e6ea:	e01a      	b.n	800e722 <USB_EPStartXfer+0x37a>
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	785b      	ldrb	r3, [r3, #1]
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d116      	bne.n	800e722 <USB_EPStartXfer+0x37a>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	623b      	str	r3, [r7, #32]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	461a      	mov	r2, r3
 800e702:	6a3b      	ldr	r3, [r7, #32]
 800e704:	4413      	add	r3, r2
 800e706:	623b      	str	r3, [r7, #32]
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	00da      	lsls	r2, r3, #3
 800e70e:	6a3b      	ldr	r3, [r7, #32]
 800e710:	4413      	add	r3, r2
 800e712:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e716:	61fb      	str	r3, [r7, #28]
 800e718:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e71c:	b29a      	uxth	r2, r3
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	891b      	ldrh	r3, [r3, #8]
 800e726:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	6959      	ldr	r1, [r3, #20]
 800e72e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e732:	b29b      	uxth	r3, r3
 800e734:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f000 fd2e 	bl	800f19a <USB_WritePMA>
 800e73e:	e2e2      	b.n	800ed06 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	785b      	ldrb	r3, [r3, #1]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d16b      	bne.n	800e820 <USB_EPStartXfer+0x478>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e752:	b29b      	uxth	r3, r3
 800e754:	461a      	mov	r2, r3
 800e756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e758:	4413      	add	r3, r2
 800e75a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	781b      	ldrb	r3, [r3, #0]
 800e760:	00da      	lsls	r2, r3, #3
 800e762:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e764:	4413      	add	r3, r2
 800e766:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e76a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e76c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e76e:	881b      	ldrh	r3, [r3, #0]
 800e770:	b29b      	uxth	r3, r3
 800e772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e776:	b29a      	uxth	r2, r3
 800e778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e77a:	801a      	strh	r2, [r3, #0]
 800e77c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e780:	2b00      	cmp	r3, #0
 800e782:	d10a      	bne.n	800e79a <USB_EPStartXfer+0x3f2>
 800e784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e786:	881b      	ldrh	r3, [r3, #0]
 800e788:	b29b      	uxth	r3, r3
 800e78a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e78e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e792:	b29a      	uxth	r2, r3
 800e794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e796:	801a      	strh	r2, [r3, #0]
 800e798:	e05d      	b.n	800e856 <USB_EPStartXfer+0x4ae>
 800e79a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e79e:	2b3e      	cmp	r3, #62	@ 0x3e
 800e7a0:	d81c      	bhi.n	800e7dc <USB_EPStartXfer+0x434>
 800e7a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e7a6:	085b      	lsrs	r3, r3, #1
 800e7a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e7ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e7b0:	f003 0301 	and.w	r3, r3, #1
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d004      	beq.n	800e7c2 <USB_EPStartXfer+0x41a>
 800e7b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e7bc:	3301      	adds	r3, #1
 800e7be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e7c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7c4:	881b      	ldrh	r3, [r3, #0]
 800e7c6:	b29a      	uxth	r2, r3
 800e7c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	029b      	lsls	r3, r3, #10
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	4313      	orrs	r3, r2
 800e7d4:	b29a      	uxth	r2, r3
 800e7d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7d8:	801a      	strh	r2, [r3, #0]
 800e7da:	e03c      	b.n	800e856 <USB_EPStartXfer+0x4ae>
 800e7dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e7e0:	095b      	lsrs	r3, r3, #5
 800e7e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e7e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e7ea:	f003 031f 	and.w	r3, r3, #31
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d104      	bne.n	800e7fc <USB_EPStartXfer+0x454>
 800e7f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e7f6:	3b01      	subs	r3, #1
 800e7f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e7fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7fe:	881b      	ldrh	r3, [r3, #0]
 800e800:	b29a      	uxth	r2, r3
 800e802:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e806:	b29b      	uxth	r3, r3
 800e808:	029b      	lsls	r3, r3, #10
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	4313      	orrs	r3, r2
 800e80e:	b29b      	uxth	r3, r3
 800e810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e818:	b29a      	uxth	r2, r3
 800e81a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e81c:	801a      	strh	r2, [r3, #0]
 800e81e:	e01a      	b.n	800e856 <USB_EPStartXfer+0x4ae>
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	785b      	ldrb	r3, [r3, #1]
 800e824:	2b01      	cmp	r3, #1
 800e826:	d116      	bne.n	800e856 <USB_EPStartXfer+0x4ae>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e832:	b29b      	uxth	r3, r3
 800e834:	461a      	mov	r2, r3
 800e836:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e838:	4413      	add	r3, r2
 800e83a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	00da      	lsls	r2, r3, #3
 800e842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e844:	4413      	add	r3, r2
 800e846:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e84a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e84c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e850:	b29a      	uxth	r2, r3
 800e852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e854:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	891b      	ldrh	r3, [r3, #8]
 800e85a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	6959      	ldr	r1, [r3, #20]
 800e862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e866:	b29b      	uxth	r3, r3
 800e868:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f000 fc94 	bl	800f19a <USB_WritePMA>
            ep->xfer_buff += len;
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	695a      	ldr	r2, [r3, #20]
 800e876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e87a:	441a      	add	r2, r3
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	6a1a      	ldr	r2, [r3, #32]
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	691b      	ldr	r3, [r3, #16]
 800e888:	429a      	cmp	r2, r3
 800e88a:	d907      	bls.n	800e89c <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	6a1a      	ldr	r2, [r3, #32]
 800e890:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e894:	1ad2      	subs	r2, r2, r3
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	621a      	str	r2, [r3, #32]
 800e89a:	e006      	b.n	800e8aa <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	6a1b      	ldr	r3, [r3, #32]
 800e8a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	785b      	ldrb	r3, [r3, #1]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d16b      	bne.n	800e98e <USB_EPStartXfer+0x5e6>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8c6:	4413      	add	r3, r2
 800e8c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	781b      	ldrb	r3, [r3, #0]
 800e8ce:	00da      	lsls	r2, r3, #3
 800e8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8d2:	4413      	add	r3, r2
 800e8d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e8d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8dc:	881b      	ldrh	r3, [r3, #0]
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e8e4:	b29a      	uxth	r2, r3
 800e8e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8e8:	801a      	strh	r2, [r3, #0]
 800e8ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d10a      	bne.n	800e908 <USB_EPStartXfer+0x560>
 800e8f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8f4:	881b      	ldrh	r3, [r3, #0]
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e8fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e900:	b29a      	uxth	r2, r3
 800e902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e904:	801a      	strh	r2, [r3, #0]
 800e906:	e05b      	b.n	800e9c0 <USB_EPStartXfer+0x618>
 800e908:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e90c:	2b3e      	cmp	r3, #62	@ 0x3e
 800e90e:	d81c      	bhi.n	800e94a <USB_EPStartXfer+0x5a2>
 800e910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e914:	085b      	lsrs	r3, r3, #1
 800e916:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e91a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e91e:	f003 0301 	and.w	r3, r3, #1
 800e922:	2b00      	cmp	r3, #0
 800e924:	d004      	beq.n	800e930 <USB_EPStartXfer+0x588>
 800e926:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e92a:	3301      	adds	r3, #1
 800e92c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e932:	881b      	ldrh	r3, [r3, #0]
 800e934:	b29a      	uxth	r2, r3
 800e936:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e93a:	b29b      	uxth	r3, r3
 800e93c:	029b      	lsls	r3, r3, #10
 800e93e:	b29b      	uxth	r3, r3
 800e940:	4313      	orrs	r3, r2
 800e942:	b29a      	uxth	r2, r3
 800e944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e946:	801a      	strh	r2, [r3, #0]
 800e948:	e03a      	b.n	800e9c0 <USB_EPStartXfer+0x618>
 800e94a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e94e:	095b      	lsrs	r3, r3, #5
 800e950:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e954:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e958:	f003 031f 	and.w	r3, r3, #31
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d104      	bne.n	800e96a <USB_EPStartXfer+0x5c2>
 800e960:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e964:	3b01      	subs	r3, #1
 800e966:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e96a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e96c:	881b      	ldrh	r3, [r3, #0]
 800e96e:	b29a      	uxth	r2, r3
 800e970:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e974:	b29b      	uxth	r3, r3
 800e976:	029b      	lsls	r3, r3, #10
 800e978:	b29b      	uxth	r3, r3
 800e97a:	4313      	orrs	r3, r2
 800e97c:	b29b      	uxth	r3, r3
 800e97e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e986:	b29a      	uxth	r2, r3
 800e988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e98a:	801a      	strh	r2, [r3, #0]
 800e98c:	e018      	b.n	800e9c0 <USB_EPStartXfer+0x618>
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	785b      	ldrb	r3, [r3, #1]
 800e992:	2b01      	cmp	r3, #1
 800e994:	d114      	bne.n	800e9c0 <USB_EPStartXfer+0x618>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	461a      	mov	r2, r3
 800e9a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9a2:	4413      	add	r3, r2
 800e9a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	781b      	ldrb	r3, [r3, #0]
 800e9aa:	00da      	lsls	r2, r3, #3
 800e9ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9ae:	4413      	add	r3, r2
 800e9b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e9b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e9b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e9ba:	b29a      	uxth	r2, r3
 800e9bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	895b      	ldrh	r3, [r3, #10]
 800e9c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	6959      	ldr	r1, [r3, #20]
 800e9cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e9d0:	b29b      	uxth	r3, r3
 800e9d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f000 fbdf 	bl	800f19a <USB_WritePMA>
 800e9dc:	e193      	b.n	800ed06 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	6a1b      	ldr	r3, [r3, #32]
 800e9e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e9e6:	687a      	ldr	r2, [r7, #4]
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	781b      	ldrb	r3, [r3, #0]
 800e9ec:	009b      	lsls	r3, r3, #2
 800e9ee:	4413      	add	r3, r2
 800e9f0:	881b      	ldrh	r3, [r3, #0]
 800e9f2:	b29b      	uxth	r3, r3
 800e9f4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800e9f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e9fc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800ea00:	687a      	ldr	r2, [r7, #4]
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	009b      	lsls	r3, r3, #2
 800ea08:	441a      	add	r2, r3
 800ea0a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800ea0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ea12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ea16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ea1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ea2c:	b29b      	uxth	r3, r3
 800ea2e:	461a      	mov	r2, r3
 800ea30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea32:	4413      	add	r3, r2
 800ea34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	00da      	lsls	r2, r3, #3
 800ea3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea3e:	4413      	add	r3, r2
 800ea40:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ea44:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ea46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea4a:	b29a      	uxth	r2, r3
 800ea4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	891b      	ldrh	r3, [r3, #8]
 800ea54:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	6959      	ldr	r1, [r3, #20]
 800ea5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea60:	b29b      	uxth	r3, r3
 800ea62:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f000 fb97 	bl	800f19a <USB_WritePMA>
 800ea6c:	e14b      	b.n	800ed06 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	6a1a      	ldr	r2, [r3, #32]
 800ea72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea76:	1ad2      	subs	r2, r2, r3
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ea7c:	687a      	ldr	r2, [r7, #4]
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	009b      	lsls	r3, r3, #2
 800ea84:	4413      	add	r3, r2
 800ea86:	881b      	ldrh	r3, [r3, #0]
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	f000 809a 	beq.w	800ebc8 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	673b      	str	r3, [r7, #112]	@ 0x70
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	785b      	ldrb	r3, [r3, #1]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d16b      	bne.n	800eb78 <USB_EPStartXfer+0x7d0>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eaaa:	b29b      	uxth	r3, r3
 800eaac:	461a      	mov	r2, r3
 800eaae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eab0:	4413      	add	r3, r2
 800eab2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	00da      	lsls	r2, r3, #3
 800eaba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eabc:	4413      	add	r3, r2
 800eabe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800eac2:	667b      	str	r3, [r7, #100]	@ 0x64
 800eac4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eac6:	881b      	ldrh	r3, [r3, #0]
 800eac8:	b29b      	uxth	r3, r3
 800eaca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eace:	b29a      	uxth	r2, r3
 800ead0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ead2:	801a      	strh	r2, [r3, #0]
 800ead4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d10a      	bne.n	800eaf2 <USB_EPStartXfer+0x74a>
 800eadc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eade:	881b      	ldrh	r3, [r3, #0]
 800eae0:	b29b      	uxth	r3, r3
 800eae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eaea:	b29a      	uxth	r2, r3
 800eaec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eaee:	801a      	strh	r2, [r3, #0]
 800eaf0:	e05b      	b.n	800ebaa <USB_EPStartXfer+0x802>
 800eaf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eaf6:	2b3e      	cmp	r3, #62	@ 0x3e
 800eaf8:	d81c      	bhi.n	800eb34 <USB_EPStartXfer+0x78c>
 800eafa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eafe:	085b      	lsrs	r3, r3, #1
 800eb00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eb04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb08:	f003 0301 	and.w	r3, r3, #1
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d004      	beq.n	800eb1a <USB_EPStartXfer+0x772>
 800eb10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800eb14:	3301      	adds	r3, #1
 800eb16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eb1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb1c:	881b      	ldrh	r3, [r3, #0]
 800eb1e:	b29a      	uxth	r2, r3
 800eb20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	029b      	lsls	r3, r3, #10
 800eb28:	b29b      	uxth	r3, r3
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	b29a      	uxth	r2, r3
 800eb2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb30:	801a      	strh	r2, [r3, #0]
 800eb32:	e03a      	b.n	800ebaa <USB_EPStartXfer+0x802>
 800eb34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb38:	095b      	lsrs	r3, r3, #5
 800eb3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eb3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb42:	f003 031f 	and.w	r3, r3, #31
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d104      	bne.n	800eb54 <USB_EPStartXfer+0x7ac>
 800eb4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800eb4e:	3b01      	subs	r3, #1
 800eb50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eb54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb56:	881b      	ldrh	r3, [r3, #0]
 800eb58:	b29a      	uxth	r2, r3
 800eb5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800eb5e:	b29b      	uxth	r3, r3
 800eb60:	029b      	lsls	r3, r3, #10
 800eb62:	b29b      	uxth	r3, r3
 800eb64:	4313      	orrs	r3, r2
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb70:	b29a      	uxth	r2, r3
 800eb72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb74:	801a      	strh	r2, [r3, #0]
 800eb76:	e018      	b.n	800ebaa <USB_EPStartXfer+0x802>
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	785b      	ldrb	r3, [r3, #1]
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d114      	bne.n	800ebaa <USB_EPStartXfer+0x802>
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eb86:	b29b      	uxth	r3, r3
 800eb88:	461a      	mov	r2, r3
 800eb8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800eb8c:	4413      	add	r3, r2
 800eb8e:	673b      	str	r3, [r7, #112]	@ 0x70
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	781b      	ldrb	r3, [r3, #0]
 800eb94:	00da      	lsls	r2, r3, #3
 800eb96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800eb98:	4413      	add	r3, r2
 800eb9a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800eb9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800eba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eba4:	b29a      	uxth	r2, r3
 800eba6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eba8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	895b      	ldrh	r3, [r3, #10]
 800ebae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	6959      	ldr	r1, [r3, #20]
 800ebb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f000 faea 	bl	800f19a <USB_WritePMA>
 800ebc6:	e09e      	b.n	800ed06 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	785b      	ldrb	r3, [r3, #1]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d16b      	bne.n	800eca8 <USB_EPStartXfer+0x900>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	461a      	mov	r2, r3
 800ebde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ebe0:	4413      	add	r3, r2
 800ebe2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	00da      	lsls	r2, r3, #3
 800ebea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ebec:	4413      	add	r3, r2
 800ebee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ebf2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ebf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ebf6:	881b      	ldrh	r3, [r3, #0]
 800ebf8:	b29b      	uxth	r3, r3
 800ebfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ebfe:	b29a      	uxth	r2, r3
 800ec00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec02:	801a      	strh	r2, [r3, #0]
 800ec04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d10a      	bne.n	800ec22 <USB_EPStartXfer+0x87a>
 800ec0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec0e:	881b      	ldrh	r3, [r3, #0]
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec1a:	b29a      	uxth	r2, r3
 800ec1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec1e:	801a      	strh	r2, [r3, #0]
 800ec20:	e063      	b.n	800ecea <USB_EPStartXfer+0x942>
 800ec22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec26:	2b3e      	cmp	r3, #62	@ 0x3e
 800ec28:	d81c      	bhi.n	800ec64 <USB_EPStartXfer+0x8bc>
 800ec2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec2e:	085b      	lsrs	r3, r3, #1
 800ec30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ec34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec38:	f003 0301 	and.w	r3, r3, #1
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d004      	beq.n	800ec4a <USB_EPStartXfer+0x8a2>
 800ec40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ec44:	3301      	adds	r3, #1
 800ec46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ec4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec4c:	881b      	ldrh	r3, [r3, #0]
 800ec4e:	b29a      	uxth	r2, r3
 800ec50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ec54:	b29b      	uxth	r3, r3
 800ec56:	029b      	lsls	r3, r3, #10
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	4313      	orrs	r3, r2
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec60:	801a      	strh	r2, [r3, #0]
 800ec62:	e042      	b.n	800ecea <USB_EPStartXfer+0x942>
 800ec64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec68:	095b      	lsrs	r3, r3, #5
 800ec6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ec6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec72:	f003 031f 	and.w	r3, r3, #31
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d104      	bne.n	800ec84 <USB_EPStartXfer+0x8dc>
 800ec7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ec7e:	3b01      	subs	r3, #1
 800ec80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ec84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec86:	881b      	ldrh	r3, [r3, #0]
 800ec88:	b29a      	uxth	r2, r3
 800ec8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	029b      	lsls	r3, r3, #10
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	4313      	orrs	r3, r2
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eca0:	b29a      	uxth	r2, r3
 800eca2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eca4:	801a      	strh	r2, [r3, #0]
 800eca6:	e020      	b.n	800ecea <USB_EPStartXfer+0x942>
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	785b      	ldrb	r3, [r3, #1]
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d11c      	bne.n	800ecea <USB_EPStartXfer+0x942>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ecc4:	4413      	add	r3, r2
 800ecc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	00da      	lsls	r2, r3, #3
 800ecd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ecd4:	4413      	add	r3, r2
 800ecd6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ecda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ecde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ece2:	b29a      	uxth	r2, r3
 800ece4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ece8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	891b      	ldrh	r3, [r3, #8]
 800ecee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	6959      	ldr	r1, [r3, #20]
 800ecf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f000 fa4a 	bl	800f19a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	781b      	ldrb	r3, [r3, #0]
 800ed0c:	009b      	lsls	r3, r3, #2
 800ed0e:	4413      	add	r3, r2
 800ed10:	881b      	ldrh	r3, [r3, #0]
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ed18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed1c:	817b      	strh	r3, [r7, #10]
 800ed1e:	897b      	ldrh	r3, [r7, #10]
 800ed20:	f083 0310 	eor.w	r3, r3, #16
 800ed24:	817b      	strh	r3, [r7, #10]
 800ed26:	897b      	ldrh	r3, [r7, #10]
 800ed28:	f083 0320 	eor.w	r3, r3, #32
 800ed2c:	817b      	strh	r3, [r7, #10]
 800ed2e:	687a      	ldr	r2, [r7, #4]
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	441a      	add	r2, r3
 800ed38:	897b      	ldrh	r3, [r7, #10]
 800ed3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ed3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ed42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ed46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	8013      	strh	r3, [r2, #0]
 800ed4e:	e0d5      	b.n	800eefc <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	7b1b      	ldrb	r3, [r3, #12]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d156      	bne.n	800ee06 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	699b      	ldr	r3, [r3, #24]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d122      	bne.n	800eda6 <USB_EPStartXfer+0x9fe>
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	78db      	ldrb	r3, [r3, #3]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d11e      	bne.n	800eda6 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800ed68:	687a      	ldr	r2, [r7, #4]
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	781b      	ldrb	r3, [r3, #0]
 800ed6e:	009b      	lsls	r3, r3, #2
 800ed70:	4413      	add	r3, r2
 800ed72:	881b      	ldrh	r3, [r3, #0]
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ed7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ed7e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	009b      	lsls	r3, r3, #2
 800ed8a:	441a      	add	r2, r3
 800ed8c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ed90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ed94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ed98:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ed9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	8013      	strh	r3, [r2, #0]
 800eda4:	e01d      	b.n	800ede2 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800eda6:	687a      	ldr	r2, [r7, #4]
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	009b      	lsls	r3, r3, #2
 800edae:	4413      	add	r3, r2
 800edb0:	881b      	ldrh	r3, [r3, #0]
 800edb2:	b29b      	uxth	r3, r3
 800edb4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800edb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800edbc:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800edc0:	687a      	ldr	r2, [r7, #4]
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	009b      	lsls	r3, r3, #2
 800edc8:	441a      	add	r2, r3
 800edca:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800edce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800edd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800edd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800edda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edde:	b29b      	uxth	r3, r3
 800ede0:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	699a      	ldr	r2, [r3, #24]
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	691b      	ldr	r3, [r3, #16]
 800edea:	429a      	cmp	r2, r3
 800edec:	d907      	bls.n	800edfe <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	699a      	ldr	r2, [r3, #24]
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	691b      	ldr	r3, [r3, #16]
 800edf6:	1ad2      	subs	r2, r2, r3
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	619a      	str	r2, [r3, #24]
 800edfc:	e054      	b.n	800eea8 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	2200      	movs	r2, #0
 800ee02:	619a      	str	r2, [r3, #24]
 800ee04:	e050      	b.n	800eea8 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	78db      	ldrb	r3, [r3, #3]
 800ee0a:	2b02      	cmp	r3, #2
 800ee0c:	d142      	bne.n	800ee94 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	69db      	ldr	r3, [r3, #28]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d048      	beq.n	800eea8 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ee16:	687a      	ldr	r2, [r7, #4]
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	009b      	lsls	r3, r3, #2
 800ee1e:	4413      	add	r3, r2
 800ee20:	881b      	ldrh	r3, [r3, #0]
 800ee22:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ee26:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ee2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d005      	beq.n	800ee3e <USB_EPStartXfer+0xa96>
 800ee32:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ee36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d10b      	bne.n	800ee56 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ee3e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ee42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d12e      	bne.n	800eea8 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ee4a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ee4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d128      	bne.n	800eea8 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ee56:	687a      	ldr	r2, [r7, #4]
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	009b      	lsls	r3, r3, #2
 800ee5e:	4413      	add	r3, r2
 800ee60:	881b      	ldrh	r3, [r3, #0]
 800ee62:	b29b      	uxth	r3, r3
 800ee64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ee68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee6c:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800ee70:	687a      	ldr	r2, [r7, #4]
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	009b      	lsls	r3, r3, #2
 800ee78:	441a      	add	r2, r3
 800ee7a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800ee7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ee82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ee86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ee8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ee8e:	b29b      	uxth	r3, r3
 800ee90:	8013      	strh	r3, [r2, #0]
 800ee92:	e009      	b.n	800eea8 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	78db      	ldrb	r3, [r3, #3]
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	d103      	bne.n	800eea4 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	619a      	str	r2, [r3, #24]
 800eea2:	e001      	b.n	800eea8 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800eea4:	2301      	movs	r3, #1
 800eea6:	e02a      	b.n	800eefe <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800eea8:	687a      	ldr	r2, [r7, #4]
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	4413      	add	r3, r2
 800eeb2:	881b      	ldrh	r3, [r3, #0]
 800eeb4:	b29b      	uxth	r3, r3
 800eeb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800eeba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eebe:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800eec2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800eec6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800eeca:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800eece:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800eed2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800eed6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800eeda:	687a      	ldr	r2, [r7, #4]
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	009b      	lsls	r3, r3, #2
 800eee2:	441a      	add	r2, r3
 800eee4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800eee8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eeec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eef0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eef8:	b29b      	uxth	r3, r3
 800eefa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800eefc:	2300      	movs	r3, #0
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	37b0      	adds	r7, #176	@ 0xb0
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}

0800ef06 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ef06:	b480      	push	{r7}
 800ef08:	b085      	sub	sp, #20
 800ef0a:	af00      	add	r7, sp, #0
 800ef0c:	6078      	str	r0, [r7, #4]
 800ef0e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	785b      	ldrb	r3, [r3, #1]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d020      	beq.n	800ef5a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ef18:	687a      	ldr	r2, [r7, #4]
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	781b      	ldrb	r3, [r3, #0]
 800ef1e:	009b      	lsls	r3, r3, #2
 800ef20:	4413      	add	r3, r2
 800ef22:	881b      	ldrh	r3, [r3, #0]
 800ef24:	b29b      	uxth	r3, r3
 800ef26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ef2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ef2e:	81bb      	strh	r3, [r7, #12]
 800ef30:	89bb      	ldrh	r3, [r7, #12]
 800ef32:	f083 0310 	eor.w	r3, r3, #16
 800ef36:	81bb      	strh	r3, [r7, #12]
 800ef38:	687a      	ldr	r2, [r7, #4]
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	009b      	lsls	r3, r3, #2
 800ef40:	441a      	add	r2, r3
 800ef42:	89bb      	ldrh	r3, [r7, #12]
 800ef44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ef48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ef4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ef50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	8013      	strh	r3, [r2, #0]
 800ef58:	e01f      	b.n	800ef9a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ef5a:	687a      	ldr	r2, [r7, #4]
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	781b      	ldrb	r3, [r3, #0]
 800ef60:	009b      	lsls	r3, r3, #2
 800ef62:	4413      	add	r3, r2
 800ef64:	881b      	ldrh	r3, [r3, #0]
 800ef66:	b29b      	uxth	r3, r3
 800ef68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ef6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef70:	81fb      	strh	r3, [r7, #14]
 800ef72:	89fb      	ldrh	r3, [r7, #14]
 800ef74:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ef78:	81fb      	strh	r3, [r7, #14]
 800ef7a:	687a      	ldr	r2, [r7, #4]
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	009b      	lsls	r3, r3, #2
 800ef82:	441a      	add	r2, r3
 800ef84:	89fb      	ldrh	r3, [r7, #14]
 800ef86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ef8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ef8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ef92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef96:	b29b      	uxth	r3, r3
 800ef98:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ef9a:	2300      	movs	r3, #0
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3714      	adds	r7, #20
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr

0800efa8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800efa8:	b480      	push	{r7}
 800efaa:	b087      	sub	sp, #28
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	785b      	ldrb	r3, [r3, #1]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d04c      	beq.n	800f054 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800efba:	687a      	ldr	r2, [r7, #4]
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	781b      	ldrb	r3, [r3, #0]
 800efc0:	009b      	lsls	r3, r3, #2
 800efc2:	4413      	add	r3, r2
 800efc4:	881b      	ldrh	r3, [r3, #0]
 800efc6:	823b      	strh	r3, [r7, #16]
 800efc8:	8a3b      	ldrh	r3, [r7, #16]
 800efca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d01b      	beq.n	800f00a <USB_EPClearStall+0x62>
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	009b      	lsls	r3, r3, #2
 800efda:	4413      	add	r3, r2
 800efdc:	881b      	ldrh	r3, [r3, #0]
 800efde:	b29b      	uxth	r3, r3
 800efe0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800efe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800efe8:	81fb      	strh	r3, [r7, #14]
 800efea:	687a      	ldr	r2, [r7, #4]
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	009b      	lsls	r3, r3, #2
 800eff2:	441a      	add	r2, r3
 800eff4:	89fb      	ldrh	r3, [r7, #14]
 800eff6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800effa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800effe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f002:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f006:	b29b      	uxth	r3, r3
 800f008:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	78db      	ldrb	r3, [r3, #3]
 800f00e:	2b01      	cmp	r3, #1
 800f010:	d06c      	beq.n	800f0ec <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f012:	687a      	ldr	r2, [r7, #4]
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	009b      	lsls	r3, r3, #2
 800f01a:	4413      	add	r3, r2
 800f01c:	881b      	ldrh	r3, [r3, #0]
 800f01e:	b29b      	uxth	r3, r3
 800f020:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f024:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f028:	81bb      	strh	r3, [r7, #12]
 800f02a:	89bb      	ldrh	r3, [r7, #12]
 800f02c:	f083 0320 	eor.w	r3, r3, #32
 800f030:	81bb      	strh	r3, [r7, #12]
 800f032:	687a      	ldr	r2, [r7, #4]
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	009b      	lsls	r3, r3, #2
 800f03a:	441a      	add	r2, r3
 800f03c:	89bb      	ldrh	r3, [r7, #12]
 800f03e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f042:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f046:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f04a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f04e:	b29b      	uxth	r3, r3
 800f050:	8013      	strh	r3, [r2, #0]
 800f052:	e04b      	b.n	800f0ec <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	4413      	add	r3, r2
 800f05e:	881b      	ldrh	r3, [r3, #0]
 800f060:	82fb      	strh	r3, [r7, #22]
 800f062:	8afb      	ldrh	r3, [r7, #22]
 800f064:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d01b      	beq.n	800f0a4 <USB_EPClearStall+0xfc>
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	009b      	lsls	r3, r3, #2
 800f074:	4413      	add	r3, r2
 800f076:	881b      	ldrh	r3, [r3, #0]
 800f078:	b29b      	uxth	r3, r3
 800f07a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f07e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f082:	82bb      	strh	r3, [r7, #20]
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	009b      	lsls	r3, r3, #2
 800f08c:	441a      	add	r2, r3
 800f08e:	8abb      	ldrh	r3, [r7, #20]
 800f090:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f094:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f098:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f09c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0a0:	b29b      	uxth	r3, r3
 800f0a2:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f0a4:	687a      	ldr	r2, [r7, #4]
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	009b      	lsls	r3, r3, #2
 800f0ac:	4413      	add	r3, r2
 800f0ae:	881b      	ldrh	r3, [r3, #0]
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f0b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f0ba:	827b      	strh	r3, [r7, #18]
 800f0bc:	8a7b      	ldrh	r3, [r7, #18]
 800f0be:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f0c2:	827b      	strh	r3, [r7, #18]
 800f0c4:	8a7b      	ldrh	r3, [r7, #18]
 800f0c6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f0ca:	827b      	strh	r3, [r7, #18]
 800f0cc:	687a      	ldr	r2, [r7, #4]
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	781b      	ldrb	r3, [r3, #0]
 800f0d2:	009b      	lsls	r3, r3, #2
 800f0d4:	441a      	add	r2, r3
 800f0d6:	8a7b      	ldrh	r3, [r7, #18]
 800f0d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f0dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f0e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f0e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0e8:	b29b      	uxth	r3, r3
 800f0ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f0ec:	2300      	movs	r3, #0
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	371c      	adds	r7, #28
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f8:	4770      	bx	lr

0800f0fa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800f0fa:	b480      	push	{r7}
 800f0fc:	b083      	sub	sp, #12
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]
 800f102:	460b      	mov	r3, r1
 800f104:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f106:	78fb      	ldrb	r3, [r7, #3]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d103      	bne.n	800f114 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2280      	movs	r2, #128	@ 0x80
 800f110:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f114:	2300      	movs	r3, #0
}
 800f116:	4618      	mov	r0, r3
 800f118:	370c      	adds	r7, #12
 800f11a:	46bd      	mov	sp, r7
 800f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f120:	4770      	bx	lr

0800f122 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800f122:	b480      	push	{r7}
 800f124:	b083      	sub	sp, #12
 800f126:	af00      	add	r7, sp, #0
 800f128:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f130:	b29b      	uxth	r3, r3
 800f132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f13a:	b29a      	uxth	r2, r3
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f142:	2300      	movs	r3, #0
}
 800f144:	4618      	mov	r0, r3
 800f146:	370c      	adds	r7, #12
 800f148:	46bd      	mov	sp, r7
 800f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14e:	4770      	bx	lr

0800f150 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800f150:	b480      	push	{r7}
 800f152:	b083      	sub	sp, #12
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f15e:	b29b      	uxth	r3, r3
 800f160:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800f164:	b29a      	uxth	r2, r3
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f16c:	2300      	movs	r3, #0
}
 800f16e:	4618      	mov	r0, r3
 800f170:	370c      	adds	r7, #12
 800f172:	46bd      	mov	sp, r7
 800f174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f178:	4770      	bx	lr

0800f17a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800f17a:	b480      	push	{r7}
 800f17c:	b085      	sub	sp, #20
 800f17e:	af00      	add	r7, sp, #0
 800f180:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800f188:	b29b      	uxth	r3, r3
 800f18a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f18c:	68fb      	ldr	r3, [r7, #12]
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3714      	adds	r7, #20
 800f192:	46bd      	mov	sp, r7
 800f194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f198:	4770      	bx	lr

0800f19a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f19a:	b480      	push	{r7}
 800f19c:	b08b      	sub	sp, #44	@ 0x2c
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	60f8      	str	r0, [r7, #12]
 800f1a2:	60b9      	str	r1, [r7, #8]
 800f1a4:	4611      	mov	r1, r2
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	460b      	mov	r3, r1
 800f1aa:	80fb      	strh	r3, [r7, #6]
 800f1ac:	4613      	mov	r3, r2
 800f1ae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f1b0:	88bb      	ldrh	r3, [r7, #4]
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	085b      	lsrs	r3, r3, #1
 800f1b6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f1c0:	88fa      	ldrh	r2, [r7, #6]
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	4413      	add	r3, r2
 800f1c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f1ca:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f1cc:	69bb      	ldr	r3, [r7, #24]
 800f1ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1d0:	e01b      	b.n	800f20a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800f1d2:	69fb      	ldr	r3, [r7, #28]
 800f1d4:	781b      	ldrb	r3, [r3, #0]
 800f1d6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	3301      	adds	r3, #1
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	021b      	lsls	r3, r3, #8
 800f1e0:	b21a      	sxth	r2, r3
 800f1e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	b21b      	sxth	r3, r3
 800f1ea:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800f1ec:	6a3b      	ldr	r3, [r7, #32]
 800f1ee:	8a7a      	ldrh	r2, [r7, #18]
 800f1f0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800f1f2:	6a3b      	ldr	r3, [r7, #32]
 800f1f4:	3302      	adds	r3, #2
 800f1f6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800f1fe:	69fb      	ldr	r3, [r7, #28]
 800f200:	3301      	adds	r3, #1
 800f202:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800f204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f206:	3b01      	subs	r3, #1
 800f208:	627b      	str	r3, [r7, #36]	@ 0x24
 800f20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d1e0      	bne.n	800f1d2 <USB_WritePMA+0x38>
  }
}
 800f210:	bf00      	nop
 800f212:	bf00      	nop
 800f214:	372c      	adds	r7, #44	@ 0x2c
 800f216:	46bd      	mov	sp, r7
 800f218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21c:	4770      	bx	lr

0800f21e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f21e:	b480      	push	{r7}
 800f220:	b08b      	sub	sp, #44	@ 0x2c
 800f222:	af00      	add	r7, sp, #0
 800f224:	60f8      	str	r0, [r7, #12]
 800f226:	60b9      	str	r1, [r7, #8]
 800f228:	4611      	mov	r1, r2
 800f22a:	461a      	mov	r2, r3
 800f22c:	460b      	mov	r3, r1
 800f22e:	80fb      	strh	r3, [r7, #6]
 800f230:	4613      	mov	r3, r2
 800f232:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800f234:	88bb      	ldrh	r3, [r7, #4]
 800f236:	085b      	lsrs	r3, r3, #1
 800f238:	b29b      	uxth	r3, r3
 800f23a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f244:	88fa      	ldrh	r2, [r7, #6]
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	4413      	add	r3, r2
 800f24a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f24e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f250:	69bb      	ldr	r3, [r7, #24]
 800f252:	627b      	str	r3, [r7, #36]	@ 0x24
 800f254:	e018      	b.n	800f288 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800f256:	6a3b      	ldr	r3, [r7, #32]
 800f258:	881b      	ldrh	r3, [r3, #0]
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800f25e:	6a3b      	ldr	r3, [r7, #32]
 800f260:	3302      	adds	r3, #2
 800f262:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	b2da      	uxtb	r2, r3
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f26c:	69fb      	ldr	r3, [r7, #28]
 800f26e:	3301      	adds	r3, #1
 800f270:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800f272:	693b      	ldr	r3, [r7, #16]
 800f274:	0a1b      	lsrs	r3, r3, #8
 800f276:	b2da      	uxtb	r2, r3
 800f278:	69fb      	ldr	r3, [r7, #28]
 800f27a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f27c:	69fb      	ldr	r3, [r7, #28]
 800f27e:	3301      	adds	r3, #1
 800f280:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800f282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f284:	3b01      	subs	r3, #1
 800f286:	627b      	str	r3, [r7, #36]	@ 0x24
 800f288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d1e3      	bne.n	800f256 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800f28e:	88bb      	ldrh	r3, [r7, #4]
 800f290:	f003 0301 	and.w	r3, r3, #1
 800f294:	b29b      	uxth	r3, r3
 800f296:	2b00      	cmp	r3, #0
 800f298:	d007      	beq.n	800f2aa <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800f29a:	6a3b      	ldr	r3, [r7, #32]
 800f29c:	881b      	ldrh	r3, [r3, #0]
 800f29e:	b29b      	uxth	r3, r3
 800f2a0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	b2da      	uxtb	r2, r3
 800f2a6:	69fb      	ldr	r3, [r7, #28]
 800f2a8:	701a      	strb	r2, [r3, #0]
  }
}
 800f2aa:	bf00      	nop
 800f2ac:	372c      	adds	r7, #44	@ 0x2c
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b4:	4770      	bx	lr
	...

0800f2b8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800f2bc:	f3bf 8f4f 	dsb	sy
}
 800f2c0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800f2c2:	4b06      	ldr	r3, [pc, #24]	@ (800f2dc <__NVIC_SystemReset+0x24>)
 800f2c4:	68db      	ldr	r3, [r3, #12]
 800f2c6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800f2ca:	4904      	ldr	r1, [pc, #16]	@ (800f2dc <__NVIC_SystemReset+0x24>)
 800f2cc:	4b04      	ldr	r3, [pc, #16]	@ (800f2e0 <__NVIC_SystemReset+0x28>)
 800f2ce:	4313      	orrs	r3, r2
 800f2d0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800f2d2:	f3bf 8f4f 	dsb	sy
}
 800f2d6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800f2d8:	bf00      	nop
 800f2da:	e7fd      	b.n	800f2d8 <__NVIC_SystemReset+0x20>
 800f2dc:	e000ed00 	.word	0xe000ed00
 800f2e0:	05fa0004 	.word	0x05fa0004

0800f2e4 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b084      	sub	sp, #16
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	460b      	mov	r3, r1
 800f2ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 800f2f0:	f240 401c 	movw	r0, #1052	@ 0x41c
 800f2f4:	f002 fbfc 	bl	8011af0 <USBD_static_malloc>
 800f2f8:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d105      	bne.n	800f30c <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2200      	movs	r2, #0
 800f304:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800f308:	2302      	movs	r3, #2
 800f30a:	e03f      	b.n	800f38c <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	68fa      	ldr	r2, [r7, #12]
 800f310:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2200      	movs	r2, #0
 800f318:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800f322:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	2200      	movs	r2, #0
 800f32a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	2200      	movs	r2, #0
 800f332:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	2200      	movs	r2, #0
 800f33a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	2202      	movs	r2, #2
 800f342:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2200      	movs	r2, #0
 800f34a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2200      	movs	r2, #0
 800f352:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2200      	movs	r2, #0
 800f35a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	2200      	movs	r2, #0
 800f362:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	2202      	movs	r2, #2
 800f36a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	2200      	movs	r2, #0
 800f372:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	4798      	blx	r3
 800f380:	4603      	mov	r3, r0
 800f382:	2b00      	cmp	r3, #0
 800f384:	d001      	beq.n	800f38a <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 800f386:	2303      	movs	r3, #3
 800f388:	e000      	b.n	800f38c <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 800f38a:	2300      	movs	r3, #0
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3710      	adds	r7, #16
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	460b      	mov	r3, r1
 800f39e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d101      	bne.n	800f3ae <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 800f3aa:	2302      	movs	r3, #2
 800f3ac:	e027      	b.n	800f3fe <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f3b4:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	2202      	movs	r2, #2
 800f3ca:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2202      	movs	r2, #2
 800f3da:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f3e4:	689b      	ldr	r3, [r3, #8]
 800f3e6:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f002 fb8c 	bl	8011b0c <USBD_static_free>
  pdev->pClassData = NULL;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 800f3fc:	2300      	movs	r3, #0
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	3710      	adds	r7, #16
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
	...

0800f408 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b088      	sub	sp, #32
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f418:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800f41a:	2300      	movs	r3, #0
 800f41c:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 800f41e:	2300      	movs	r3, #0
 800f420:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 800f422:	2300      	movs	r3, #0
 800f424:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 800f426:	2300      	movs	r3, #0
 800f428:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d101      	bne.n	800f434 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800f430:	2303      	movs	r3, #3
 800f432:	e0d5      	b.n	800f5e0 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	781b      	ldrb	r3, [r3, #0]
 800f438:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d03e      	beq.n	800f4be <USBD_DFU_Setup+0xb6>
 800f440:	2b20      	cmp	r3, #32
 800f442:	f040 80c5 	bne.w	800f5d0 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	785b      	ldrb	r3, [r3, #1]
 800f44a:	2b06      	cmp	r3, #6
 800f44c:	d82f      	bhi.n	800f4ae <USBD_DFU_Setup+0xa6>
 800f44e:	a201      	add	r2, pc, #4	@ (adr r2, 800f454 <USBD_DFU_Setup+0x4c>)
 800f450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f454:	0800f4a5 	.word	0x0800f4a5
 800f458:	0800f471 	.word	0x0800f471
 800f45c:	0800f47b 	.word	0x0800f47b
 800f460:	0800f485 	.word	0x0800f485
 800f464:	0800f48d 	.word	0x0800f48d
 800f468:	0800f495 	.word	0x0800f495
 800f46c:	0800f49d 	.word	0x0800f49d
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 800f470:	6839      	ldr	r1, [r7, #0]
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f000 fa6c 	bl	800f950 <DFU_Download>
          break;
 800f478:	e020      	b.n	800f4bc <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 800f47a:	6839      	ldr	r1, [r7, #0]
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f000 fad3 	bl	800fa28 <DFU_Upload>
          break;
 800f482:	e01b      	b.n	800f4bc <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f000 fba9 	bl	800fbdc <DFU_GetStatus>
          break;
 800f48a:	e017      	b.n	800f4bc <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f000 fc5b 	bl	800fd48 <DFU_ClearStatus>
          break;
 800f492:	e013      	b.n	800f4bc <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f000 fcab 	bl	800fdf0 <DFU_GetState>
          break;
 800f49a:	e00f      	b.n	800f4bc <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f000 fcbf 	bl	800fe20 <DFU_Abort>
          break;
 800f4a2:	e00b      	b.n	800f4bc <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 800f4a4:	6839      	ldr	r1, [r7, #0]
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f000 f9ee 	bl	800f888 <DFU_Detach>
          break;
 800f4ac:	e006      	b.n	800f4bc <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 800f4ae:	6839      	ldr	r1, [r7, #0]
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f001 fdb1 	bl	8011018 <USBD_CtlError>
          ret = USBD_FAIL;
 800f4b6:	2303      	movs	r3, #3
 800f4b8:	77fb      	strb	r3, [r7, #31]
          break;
 800f4ba:	bf00      	nop
      }
      break;
 800f4bc:	e08f      	b.n	800f5de <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	785b      	ldrb	r3, [r3, #1]
 800f4c2:	2b0b      	cmp	r3, #11
 800f4c4:	d87b      	bhi.n	800f5be <USBD_DFU_Setup+0x1b6>
 800f4c6:	a201      	add	r2, pc, #4	@ (adr r2, 800f4cc <USBD_DFU_Setup+0xc4>)
 800f4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4cc:	0800f4fd 	.word	0x0800f4fd
 800f4d0:	0800f5cd 	.word	0x0800f5cd
 800f4d4:	0800f5bf 	.word	0x0800f5bf
 800f4d8:	0800f5bf 	.word	0x0800f5bf
 800f4dc:	0800f5bf 	.word	0x0800f5bf
 800f4e0:	0800f5bf 	.word	0x0800f5bf
 800f4e4:	0800f527 	.word	0x0800f527
 800f4e8:	0800f5bf 	.word	0x0800f5bf
 800f4ec:	0800f5bf 	.word	0x0800f5bf
 800f4f0:	0800f5bf 	.word	0x0800f5bf
 800f4f4:	0800f551 	.word	0x0800f551
 800f4f8:	0800f57d 	.word	0x0800f57d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f502:	b2db      	uxtb	r3, r3
 800f504:	2b03      	cmp	r3, #3
 800f506:	d107      	bne.n	800f518 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f508:	f107 030e 	add.w	r3, r7, #14
 800f50c:	2202      	movs	r2, #2
 800f50e:	4619      	mov	r1, r3
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f001 fdf2 	bl	80110fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f516:	e05a      	b.n	800f5ce <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800f518:	6839      	ldr	r1, [r7, #0]
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f001 fd7c 	bl	8011018 <USBD_CtlError>
            ret = USBD_FAIL;
 800f520:	2303      	movs	r3, #3
 800f522:	77fb      	strb	r3, [r7, #31]
          break;
 800f524:	e053      	b.n	800f5ce <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	885b      	ldrh	r3, [r3, #2]
 800f52a:	0a1b      	lsrs	r3, r3, #8
 800f52c:	b29b      	uxth	r3, r3
 800f52e:	2b21      	cmp	r3, #33	@ 0x21
 800f530:	d107      	bne.n	800f542 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 800f532:	4b2d      	ldr	r3, [pc, #180]	@ (800f5e8 <USBD_DFU_Setup+0x1e0>)
 800f534:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	88db      	ldrh	r3, [r3, #6]
 800f53a:	2b09      	cmp	r3, #9
 800f53c:	bf28      	it	cs
 800f53e:	2309      	movcs	r3, #9
 800f540:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800f542:	8afb      	ldrh	r3, [r7, #22]
 800f544:	461a      	mov	r2, r3
 800f546:	69b9      	ldr	r1, [r7, #24]
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f001 fdd6 	bl	80110fa <USBD_CtlSendData>
          break;
 800f54e:	e03e      	b.n	800f5ce <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f556:	b2db      	uxtb	r3, r3
 800f558:	2b03      	cmp	r3, #3
 800f55a:	d108      	bne.n	800f56e <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800f562:	2201      	movs	r2, #1
 800f564:	4619      	mov	r1, r3
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	f001 fdc7 	bl	80110fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f56c:	e02f      	b.n	800f5ce <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800f56e:	6839      	ldr	r1, [r7, #0]
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f001 fd51 	bl	8011018 <USBD_CtlError>
            ret = USBD_FAIL;
 800f576:	2303      	movs	r3, #3
 800f578:	77fb      	strb	r3, [r7, #31]
          break;
 800f57a:	e028      	b.n	800f5ce <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	885b      	ldrh	r3, [r3, #2]
 800f580:	b2db      	uxtb	r3, r3
 800f582:	2b00      	cmp	r3, #0
 800f584:	d114      	bne.n	800f5b0 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	2b03      	cmp	r3, #3
 800f590:	d107      	bne.n	800f5a2 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	885b      	ldrh	r3, [r3, #2]
 800f596:	b2db      	uxtb	r3, r3
 800f598:	461a      	mov	r2, r3
 800f59a:	693b      	ldr	r3, [r7, #16]
 800f59c:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f5a0:	e015      	b.n	800f5ce <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 800f5a2:	6839      	ldr	r1, [r7, #0]
 800f5a4:	6878      	ldr	r0, [r7, #4]
 800f5a6:	f001 fd37 	bl	8011018 <USBD_CtlError>
              ret = USBD_FAIL;
 800f5aa:	2303      	movs	r3, #3
 800f5ac:	77fb      	strb	r3, [r7, #31]
          break;
 800f5ae:	e00e      	b.n	800f5ce <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800f5b0:	6839      	ldr	r1, [r7, #0]
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f001 fd30 	bl	8011018 <USBD_CtlError>
            ret = USBD_FAIL;
 800f5b8:	2303      	movs	r3, #3
 800f5ba:	77fb      	strb	r3, [r7, #31]
          break;
 800f5bc:	e007      	b.n	800f5ce <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f5be:	6839      	ldr	r1, [r7, #0]
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f001 fd29 	bl	8011018 <USBD_CtlError>
          ret = USBD_FAIL;
 800f5c6:	2303      	movs	r3, #3
 800f5c8:	77fb      	strb	r3, [r7, #31]
          break;
 800f5ca:	e000      	b.n	800f5ce <USBD_DFU_Setup+0x1c6>
          break;
 800f5cc:	bf00      	nop
      }
      break;
 800f5ce:	e006      	b.n	800f5de <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 800f5d0:	6839      	ldr	r1, [r7, #0]
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f001 fd20 	bl	8011018 <USBD_CtlError>
      ret = USBD_FAIL;
 800f5d8:	2303      	movs	r3, #3
 800f5da:	77fb      	strb	r3, [r7, #31]
      break;
 800f5dc:	bf00      	nop
  }

  return (uint8_t)ret;
 800f5de:	7ffb      	ldrb	r3, [r7, #31]
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3720      	adds	r7, #32
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	2000005a 	.word	0x2000005a

0800f5ec <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b083      	sub	sp, #12
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	221b      	movs	r2, #27
 800f5f8:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 800f5fa:	4b03      	ldr	r3, [pc, #12]	@ (800f608 <USBD_DFU_GetCfgDesc+0x1c>)
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	370c      	adds	r7, #12
 800f600:	46bd      	mov	sp, r7
 800f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f606:	4770      	bx	lr
 800f608:	20000048 	.word	0x20000048

0800f60c <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f60c:	b480      	push	{r7}
 800f60e:	b083      	sub	sp, #12
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800f614:	2300      	movs	r3, #0
}
 800f616:	4618      	mov	r0, r3
 800f618:	370c      	adds	r7, #12
 800f61a:	46bd      	mov	sp, r7
 800f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f620:	4770      	bx	lr

0800f622 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800f622:	b580      	push	{r7, lr}
 800f624:	b088      	sub	sp, #32
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f630:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f638:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 800f63a:	69fb      	ldr	r3, [r7, #28]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d101      	bne.n	800f644 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f640:	2303      	movs	r3, #3
 800f642:	e0ce      	b.n	800f7e2 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800f644:	69fb      	ldr	r3, [r7, #28]
 800f646:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f64a:	2b04      	cmp	r3, #4
 800f64c:	f040 80bd 	bne.w	800f7ca <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 800f650:	69fb      	ldr	r3, [r7, #28]
 800f652:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800f656:	2b00      	cmp	r3, #0
 800f658:	d17c      	bne.n	800f754 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 800f65a:	69fb      	ldr	r3, [r7, #28]
 800f65c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800f660:	2b01      	cmp	r3, #1
 800f662:	f000 8093 	beq.w	800f78c <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800f66c:	2b05      	cmp	r3, #5
 800f66e:	d15e      	bne.n	800f72e <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 800f670:	69fb      	ldr	r3, [r7, #28]
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	2b21      	cmp	r3, #33	@ 0x21
 800f676:	d124      	bne.n	800f6c2 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800f678:	69fb      	ldr	r3, [r7, #28]
 800f67a:	785b      	ldrb	r3, [r3, #1]
 800f67c:	461a      	mov	r2, r3
 800f67e:	69fb      	ldr	r3, [r7, #28]
 800f680:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800f684:	69fb      	ldr	r3, [r7, #28]
 800f686:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800f68a:	69fb      	ldr	r3, [r7, #28]
 800f68c:	789b      	ldrb	r3, [r3, #2]
 800f68e:	021b      	lsls	r3, r3, #8
 800f690:	441a      	add	r2, r3
 800f692:	69fb      	ldr	r3, [r7, #28]
 800f694:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800f698:	69fb      	ldr	r3, [r7, #28]
 800f69a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800f69e:	69fb      	ldr	r3, [r7, #28]
 800f6a0:	78db      	ldrb	r3, [r3, #3]
 800f6a2:	041b      	lsls	r3, r3, #16
 800f6a4:	441a      	add	r2, r3
 800f6a6:	69fb      	ldr	r3, [r7, #28]
 800f6a8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	791b      	ldrb	r3, [r3, #4]
 800f6b6:	061b      	lsls	r3, r3, #24
 800f6b8:	441a      	add	r2, r3
 800f6ba:	69fb      	ldr	r3, [r7, #28]
 800f6bc:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 800f6c0:	e064      	b.n	800f78c <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 800f6c2:	69fb      	ldr	r3, [r7, #28]
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	2b41      	cmp	r3, #65	@ 0x41
 800f6c8:	d12f      	bne.n	800f72a <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800f6ca:	69fb      	ldr	r3, [r7, #28]
 800f6cc:	785b      	ldrb	r3, [r3, #1]
 800f6ce:	461a      	mov	r2, r3
 800f6d0:	69fb      	ldr	r3, [r7, #28]
 800f6d2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800f6d6:	69fb      	ldr	r3, [r7, #28]
 800f6d8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800f6dc:	69fb      	ldr	r3, [r7, #28]
 800f6de:	789b      	ldrb	r3, [r3, #2]
 800f6e0:	021b      	lsls	r3, r3, #8
 800f6e2:	441a      	add	r2, r3
 800f6e4:	69fb      	ldr	r3, [r7, #28]
 800f6e6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800f6ea:	69fb      	ldr	r3, [r7, #28]
 800f6ec:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800f6f0:	69fb      	ldr	r3, [r7, #28]
 800f6f2:	78db      	ldrb	r3, [r3, #3]
 800f6f4:	041b      	lsls	r3, r3, #16
 800f6f6:	441a      	add	r2, r3
 800f6f8:	69fb      	ldr	r3, [r7, #28]
 800f6fa:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800f6fe:	69fb      	ldr	r3, [r7, #28]
 800f700:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800f704:	69fb      	ldr	r3, [r7, #28]
 800f706:	791b      	ldrb	r3, [r3, #4]
 800f708:	061b      	lsls	r3, r3, #24
 800f70a:	441a      	add	r2, r3
 800f70c:	69fb      	ldr	r3, [r7, #28]
 800f70e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 800f712:	69bb      	ldr	r3, [r7, #24]
 800f714:	68db      	ldr	r3, [r3, #12]
 800f716:	69fa      	ldr	r2, [r7, #28]
 800f718:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 800f71c:	4610      	mov	r0, r2
 800f71e:	4798      	blx	r3
 800f720:	4603      	mov	r3, r0
 800f722:	2b00      	cmp	r3, #0
 800f724:	d032      	beq.n	800f78c <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 800f726:	2303      	movs	r3, #3
 800f728:	e05b      	b.n	800f7e2 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 800f72a:	2303      	movs	r3, #3
 800f72c:	e059      	b.n	800f7e2 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800f72e:	69fb      	ldr	r3, [r7, #28]
 800f730:	2200      	movs	r2, #0
 800f732:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 800f736:	69fb      	ldr	r3, [r7, #28]
 800f738:	2200      	movs	r2, #0
 800f73a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 800f73e:	2300      	movs	r3, #0
 800f740:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 800f742:	2301      	movs	r3, #1
 800f744:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 800f746:	f107 030c 	add.w	r3, r7, #12
 800f74a:	4619      	mov	r1, r3
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f001 fc63 	bl	8011018 <USBD_CtlError>
 800f752:	e01b      	b.n	800f78c <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800f754:	69fb      	ldr	r3, [r7, #28]
 800f756:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800f75a:	2b01      	cmp	r3, #1
 800f75c:	d916      	bls.n	800f78c <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800f764:	3b02      	subs	r3, #2
 800f766:	029a      	lsls	r2, r3, #10
 800f768:	69fb      	ldr	r3, [r7, #28]
 800f76a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800f76e:	4413      	add	r3, r2
 800f770:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 800f772:	69bb      	ldr	r3, [r7, #24]
 800f774:	691b      	ldr	r3, [r3, #16]
 800f776:	69f8      	ldr	r0, [r7, #28]
 800f778:	6979      	ldr	r1, [r7, #20]
 800f77a:	69fa      	ldr	r2, [r7, #28]
 800f77c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 800f780:	4798      	blx	r3
 800f782:	4603      	mov	r3, r0
 800f784:	2b00      	cmp	r3, #0
 800f786:	d001      	beq.n	800f78c <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 800f788:	2303      	movs	r3, #3
 800f78a:	e02a      	b.n	800f7e2 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800f78c:	69fb      	ldr	r3, [r7, #28]
 800f78e:	2200      	movs	r2, #0
 800f790:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 800f794:	69fb      	ldr	r3, [r7, #28]
 800f796:	2200      	movs	r2, #0
 800f798:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800f79c:	69fb      	ldr	r3, [r7, #28]
 800f79e:	2203      	movs	r2, #3
 800f7a0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800f7ac:	69fb      	ldr	r3, [r7, #28]
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800f7b4:	69fb      	ldr	r3, [r7, #28]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800f7bc:	69fb      	ldr	r3, [r7, #28]
 800f7be:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f7c2:	69fb      	ldr	r3, [r7, #28]
 800f7c4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800f7c8:	e00a      	b.n	800f7e0 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800f7ca:	69fb      	ldr	r3, [r7, #28]
 800f7cc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f7d0:	2b07      	cmp	r3, #7
 800f7d2:	d103      	bne.n	800f7dc <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f000 fb75 	bl	800fec4 <DFU_Leave>
 800f7da:	e001      	b.n	800f7e0 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 800f7dc:	2303      	movs	r3, #3
 800f7de:	e000      	b.n	800f7e2 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 800f7e0:	2300      	movs	r3, #0
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3720      	adds	r7, #32
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}

0800f7ea <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800f7ea:	b480      	push	{r7}
 800f7ec:	b083      	sub	sp, #12
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800f7f2:	2300      	movs	r3, #0
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	370c      	adds	r7, #12
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fe:	4770      	bx	lr

0800f800 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800f800:	b480      	push	{r7}
 800f802:	b083      	sub	sp, #12
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	220a      	movs	r2, #10
 800f80c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800f80e:	4b03      	ldr	r3, [pc, #12]	@ (800f81c <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800f810:	4618      	mov	r0, r3
 800f812:	370c      	adds	r7, #12
 800f814:	46bd      	mov	sp, r7
 800f816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81a:	4770      	bx	lr
 800f81c:	20000064 	.word	0x20000064

0800f820 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b086      	sub	sp, #24
 800f824:	af00      	add	r7, sp, #0
 800f826:	60f8      	str	r0, [r7, #12]
 800f828:	460b      	mov	r3, r1
 800f82a:	607a      	str	r2, [r7, #4]
 800f82c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f834:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800f836:	7afb      	ldrb	r3, [r7, #11]
 800f838:	2b06      	cmp	r3, #6
 800f83a:	d808      	bhi.n	800f84e <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	687a      	ldr	r2, [r7, #4]
 800f842:	4905      	ldr	r1, [pc, #20]	@ (800f858 <USBD_DFU_GetUsrStringDesc+0x38>)
 800f844:	4618      	mov	r0, r3
 800f846:	f001 fbf8 	bl	801103a <USBD_GetString>
    return USBD_StrDesc;
 800f84a:	4b03      	ldr	r3, [pc, #12]	@ (800f858 <USBD_DFU_GetUsrStringDesc+0x38>)
 800f84c:	e000      	b.n	800f850 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800f84e:	2300      	movs	r3, #0
  }
}
 800f850:	4618      	mov	r0, r3
 800f852:	3718      	adds	r7, #24
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}
 800f858:	200008f4 	.word	0x200008f4

0800f85c <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 800f85c:	b480      	push	{r7}
 800f85e:	b083      	sub	sp, #12
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d101      	bne.n	800f870 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f86c:	2303      	movs	r3, #3
 800f86e:	e004      	b.n	800f87a <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	683a      	ldr	r2, [r7, #0]
 800f874:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800f878:	2300      	movs	r3, #0
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	370c      	adds	r7, #12
 800f87e:	46bd      	mov	sp, r7
 800f880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f884:	4770      	bx	lr
	...

0800f888 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b084      	sub	sp, #16
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
 800f890:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f898:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d051      	beq.n	800f944 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f8a6:	2b02      	cmp	r3, #2
 800f8a8:	d013      	beq.n	800f8d2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800f8b0:	2b03      	cmp	r3, #3
 800f8b2:	d00e      	beq.n	800f8d2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800f8ba:	2b05      	cmp	r3, #5
 800f8bc:	d009      	beq.n	800f8d2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800f8c4:	2b06      	cmp	r3, #6
 800f8c6:	d004      	beq.n	800f8d2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800f8ce:	2b09      	cmp	r3, #9
 800f8d0:	d125      	bne.n	800f91e <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	2202      	movs	r2, #2
 800f8d6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	2200      	movs	r2, #0
 800f90a:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	2200      	movs	r2, #0
 800f912:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2200      	movs	r2, #0
 800f91a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 800f91e:	4b0b      	ldr	r3, [pc, #44]	@ (800f94c <DFU_Detach+0xc4>)
 800f920:	7d5b      	ldrb	r3, [r3, #21]
 800f922:	f003 0310 	and.w	r3, r3, #16
 800f926:	2b00      	cmp	r3, #0
 800f928:	d006      	beq.n	800f938 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f000 fb7b 	bl	8010026 <USBD_Stop>
    (void)USBD_Start(pdev);
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f000 fb6c 	bl	801000e <USBD_Start>
 800f936:	e006      	b.n	800f946 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	885b      	ldrh	r3, [r3, #2]
 800f93c:	4618      	mov	r0, r3
 800f93e:	f7f4 fc7b 	bl	8004238 <HAL_Delay>
 800f942:	e000      	b.n	800f946 <DFU_Detach+0xbe>
    return;
 800f944:	bf00      	nop
  }
}
 800f946:	3710      	adds	r7, #16
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	20000048 	.word	0x20000048

0800f950 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f960:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d05b      	beq.n	800fa20 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	88db      	ldrh	r3, [r3, #6]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d02d      	beq.n	800f9cc <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f976:	2b02      	cmp	r3, #2
 800f978:	d004      	beq.n	800f984 <DFU_Download+0x34>
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f980:	2b05      	cmp	r3, #5
 800f982:	d11e      	bne.n	800f9c2 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	885b      	ldrh	r3, [r3, #2]
 800f988:	461a      	mov	r2, r3
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	88db      	ldrh	r3, [r3, #6]
 800f994:	461a      	mov	r2, r3
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	2203      	movs	r2, #3
 800f9a0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 800f9b0:	68f9      	ldr	r1, [r7, #12]
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f001 fbc9 	bl	8011152 <USBD_CtlPrepareRx>
 800f9c0:	e02f      	b.n	800fa22 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800f9c2:	6839      	ldr	r1, [r7, #0]
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f001 fb27 	bl	8011018 <USBD_CtlError>
 800f9ca:	e02a      	b.n	800fa22 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f9d2:	2b05      	cmp	r3, #5
 800f9d4:	d004      	beq.n	800f9e0 <DFU_Download+0x90>
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f9dc:	2b02      	cmp	r3, #2
 800f9de:	d11a      	bne.n	800fa16 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	2206      	movs	r2, #6
 800f9ec:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	2200      	movs	r2, #0
 800fa04:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800fa14:	e005      	b.n	800fa22 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800fa16:	6839      	ldr	r1, [r7, #0]
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f001 fafd 	bl	8011018 <USBD_CtlError>
 800fa1e:	e000      	b.n	800fa22 <DFU_Download+0xd2>
    return;
 800fa20:	bf00      	nop
    }
  }
}
 800fa22:	3710      	adds	r7, #16
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}

0800fa28 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b086      	sub	sp, #24
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
 800fa30:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fa38:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800fa40:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	f000 80c4 	beq.w	800fbd2 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	88db      	ldrh	r3, [r3, #6]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	f000 80a8 	beq.w	800fba4 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800fa5a:	2b02      	cmp	r3, #2
 800fa5c:	d005      	beq.n	800fa6a <DFU_Upload+0x42>
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800fa64:	2b09      	cmp	r3, #9
 800fa66:	f040 8090 	bne.w	800fb8a <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	885b      	ldrh	r3, [r3, #2]
 800fa6e:	461a      	mov	r2, r3
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	88db      	ldrh	r3, [r3, #6]
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d12c      	bne.n	800fae6 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800fa92:	2b03      	cmp	r3, #3
 800fa94:	d901      	bls.n	800fa9a <DFU_Upload+0x72>
 800fa96:	2202      	movs	r2, #2
 800fa98:	e000      	b.n	800fa9c <DFU_Upload+0x74>
 800fa9a:	2209      	movs	r2, #9
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	2200      	movs	r2, #0
 800faa6:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	2200      	movs	r2, #0
 800faae:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	2200      	movs	r2, #0
 800fab6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	2200      	movs	r2, #0
 800faca:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	2221      	movs	r2, #33	@ 0x21
 800fad0:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	2241      	movs	r2, #65	@ 0x41
 800fad6:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	2203      	movs	r2, #3
 800fadc:	4619      	mov	r1, r3
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f001 fb0b 	bl	80110fa <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800fae4:	e076      	b.n	800fbd4 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800faec:	2b01      	cmp	r3, #1
 800faee:	d931      	bls.n	800fb54 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	2209      	movs	r2, #9
 800faf4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	2200      	movs	r2, #0
 800fafc:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	2200      	movs	r2, #0
 800fb04:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800fb22:	3b02      	subs	r3, #2
 800fb24:	029a      	lsls	r2, r3, #10
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800fb2c:	4413      	add	r3, r2
 800fb2e:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	695b      	ldr	r3, [r3, #20]
 800fb34:	68f8      	ldr	r0, [r7, #12]
 800fb36:	6979      	ldr	r1, [r7, #20]
 800fb38:	697a      	ldr	r2, [r7, #20]
 800fb3a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 800fb3e:	4798      	blx	r3
 800fb40:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800fb48:	461a      	mov	r2, r3
 800fb4a:	68b9      	ldr	r1, [r7, #8]
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f001 fad4 	bl	80110fa <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800fb52:	e03f      	b.n	800fbd4 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	220f      	movs	r2, #15
 800fb58:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	2200      	movs	r2, #0
 800fb68:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 800fb80:	6839      	ldr	r1, [r7, #0]
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f001 fa48 	bl	8011018 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800fb88:	e024      	b.n	800fbd4 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	2200      	movs	r2, #0
 800fb96:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800fb9a:	6839      	ldr	r1, [r7, #0]
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f001 fa3b 	bl	8011018 <USBD_CtlError>
 800fba2:	e017      	b.n	800fbd4 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800fba4:	697b      	ldr	r3, [r7, #20]
 800fba6:	2202      	movs	r2, #2
 800fba8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800fbd0:	e000      	b.n	800fbd4 <DFU_Upload+0x1ac>
    return;
 800fbd2:	bf00      	nop
  }
}
 800fbd4:	3718      	adds	r7, #24
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}
	...

0800fbdc <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b084      	sub	sp, #16
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fbea:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800fbf2:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	f000 80a0 	beq.w	800fd3c <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800fc02:	2b03      	cmp	r3, #3
 800fc04:	d002      	beq.n	800fc0c <DFU_GetStatus+0x30>
 800fc06:	2b06      	cmp	r3, #6
 800fc08:	d051      	beq.n	800fcae <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 800fc0a:	e08e      	b.n	800fd2a <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d034      	beq.n	800fc80 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	2204      	movs	r2, #4
 800fc1a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	2200      	movs	r2, #0
 800fc22:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	2200      	movs	r2, #0
 800fc32:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d10e      	bne.n	800fc6a <DFU_GetStatus+0x8e>
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	2b41      	cmp	r3, #65	@ 0x41
 800fc52:	d10a      	bne.n	800fc6a <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	699b      	ldr	r3, [r3, #24]
 800fc58:	68fa      	ldr	r2, [r7, #12]
 800fc5a:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 800fc5e:	68fa      	ldr	r2, [r7, #12]
 800fc60:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 800fc64:	2100      	movs	r1, #0
 800fc66:	4798      	blx	r3
      break;
 800fc68:	e05f      	b.n	800fd2a <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800fc6a:	68bb      	ldr	r3, [r7, #8]
 800fc6c:	699b      	ldr	r3, [r3, #24]
 800fc6e:	68fa      	ldr	r2, [r7, #12]
 800fc70:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 800fc74:	68fa      	ldr	r2, [r7, #12]
 800fc76:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 800fc7a:	2101      	movs	r1, #1
 800fc7c:	4798      	blx	r3
      break;
 800fc7e:	e054      	b.n	800fd2a <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	2205      	movs	r2, #5
 800fc84:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	2200      	movs	r2, #0
 800fc94:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800fcac:	e03d      	b.n	800fd2a <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800fcb4:	2b01      	cmp	r3, #1
 800fcb6:	d116      	bne.n	800fce6 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2207      	movs	r2, #7
 800fcbc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	2201      	movs	r2, #1
 800fcc4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	2200      	movs	r2, #0
 800fccc:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800fce4:	e020      	b.n	800fd28 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d11b      	bne.n	800fd28 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 800fcf0:	4b14      	ldr	r3, [pc, #80]	@ (800fd44 <DFU_GetStatus+0x168>)
 800fcf2:	7d1b      	ldrb	r3, [r3, #20]
 800fcf4:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d015      	beq.n	800fd28 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	2202      	movs	r2, #2
 800fd00:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	2200      	movs	r2, #0
 800fd08:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	2200      	movs	r2, #0
 800fd10:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	2200      	movs	r2, #0
 800fd18:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800fd28:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 800fd30:	2206      	movs	r2, #6
 800fd32:	4619      	mov	r1, r3
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f001 f9e0 	bl	80110fa <USBD_CtlSendData>
 800fd3a:	e000      	b.n	800fd3e <DFU_GetStatus+0x162>
    return;
 800fd3c:	bf00      	nop
}
 800fd3e:	3710      	adds	r7, #16
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}
 800fd44:	20000048 	.word	0x20000048

0800fd48 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b085      	sub	sp, #20
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fd56:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d042      	beq.n	800fde4 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800fd64:	2b0a      	cmp	r3, #10
 800fd66:	d11e      	bne.n	800fda6 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2202      	movs	r2, #2
 800fd6c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	2200      	movs	r2, #0
 800fd74:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	2200      	movs	r2, #0
 800fd84:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 800fda4:	e01f      	b.n	800fde6 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	220a      	movs	r2, #10
 800fdaa:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	220e      	movs	r2, #14
 800fdb2:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	2200      	movs	r2, #0
 800fdba:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	2200      	movs	r2, #0
 800fdde:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 800fde2:	e000      	b.n	800fde6 <DFU_ClearStatus+0x9e>
    return;
 800fde4:	bf00      	nop
  }
}
 800fde6:	3714      	adds	r7, #20
 800fde8:	46bd      	mov	sp, r7
 800fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdee:	4770      	bx	lr

0800fdf0 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b084      	sub	sp, #16
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fdfe:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d008      	beq.n	800fe18 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 800fe0c:	2201      	movs	r2, #1
 800fe0e:	4619      	mov	r1, r3
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f001 f972 	bl	80110fa <USBD_CtlSendData>
 800fe16:	e000      	b.n	800fe1a <DFU_GetState+0x2a>
    return;
 800fe18:	bf00      	nop
}
 800fe1a:	3710      	adds	r7, #16
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 800fe20:	b480      	push	{r7}
 800fe22:	b085      	sub	sp, #20
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fe2e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d03f      	beq.n	800feb6 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800fe3c:	2b02      	cmp	r3, #2
 800fe3e:	d013      	beq.n	800fe68 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800fe46:	2b03      	cmp	r3, #3
 800fe48:	d00e      	beq.n	800fe68 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800fe50:	2b05      	cmp	r3, #5
 800fe52:	d009      	beq.n	800fe68 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800fe5a:	2b06      	cmp	r3, #6
 800fe5c:	d004      	beq.n	800fe68 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800fe64:	2b09      	cmp	r3, #9
 800fe66:	d127      	bne.n	800feb8 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	2202      	movs	r2, #2
 800fe6c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	2200      	movs	r2, #0
 800fe74:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	2200      	movs	r2, #0
 800fe84:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	2200      	movs	r2, #0
 800fea8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	2200      	movs	r2, #0
 800feb0:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800feb4:	e000      	b.n	800feb8 <DFU_Abort+0x98>
    return;
 800feb6:	bf00      	nop
  }
}
 800feb8:	3714      	adds	r7, #20
 800feba:	46bd      	mov	sp, r7
 800febc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec0:	4770      	bx	lr
	...

0800fec4 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b084      	sub	sp, #16
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fed2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d03b      	beq.n	800ff52 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	2200      	movs	r2, #0
 800fede:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 800fee2:	4b1e      	ldr	r3, [pc, #120]	@ (800ff5c <DFU_Leave+0x98>)
 800fee4:	7d1b      	ldrb	r3, [r3, #20]
 800fee6:	f003 0304 	and.w	r3, r3, #4
 800feea:	2b00      	cmp	r3, #0
 800feec:	d016      	beq.n	800ff1c <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	2206      	movs	r2, #6
 800fef2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	2200      	movs	r2, #0
 800fefa:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	2200      	movs	r2, #0
 800ff02:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 800ff1a:	e01b      	b.n	800ff54 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2208      	movs	r2, #8
 800ff20:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2200      	movs	r2, #0
 800ff28:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	2200      	movs	r2, #0
 800ff38:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f000 f86c 	bl	8010026 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800ff4e:	f7ff f9b3 	bl	800f2b8 <__NVIC_SystemReset>
    return;
 800ff52:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 800ff54:	3710      	adds	r7, #16
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}
 800ff5a:	bf00      	nop
 800ff5c:	20000048 	.word	0x20000048

0800ff60 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b086      	sub	sp, #24
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	60f8      	str	r0, [r7, #12]
 800ff68:	60b9      	str	r1, [r7, #8]
 800ff6a:	4613      	mov	r3, r2
 800ff6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d101      	bne.n	800ff78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ff74:	2303      	movs	r3, #3
 800ff76:	e01f      	b.n	800ffb8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	2200      	movs	r2, #0
 800ff84:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d003      	beq.n	800ff9e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	68ba      	ldr	r2, [r7, #8]
 800ff9a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	2201      	movs	r2, #1
 800ffa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	79fa      	ldrb	r2, [r7, #7]
 800ffaa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ffac:	68f8      	ldr	r0, [r7, #12]
 800ffae:	f001 fbd9 	bl	8011764 <USBD_LL_Init>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ffb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3718      	adds	r7, #24
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b084      	sub	sp, #16
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d101      	bne.n	800ffd8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ffd4:	2303      	movs	r3, #3
 800ffd6:	e016      	b.n	8010006 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	683a      	ldr	r2, [r7, #0]
 800ffdc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ffe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d00b      	beq.n	8010004 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fff4:	f107 020e 	add.w	r2, r7, #14
 800fff8:	4610      	mov	r0, r2
 800fffa:	4798      	blx	r3
 800fffc:	4602      	mov	r2, r0
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8010004:	2300      	movs	r3, #0
}
 8010006:	4618      	mov	r0, r3
 8010008:	3710      	adds	r7, #16
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}

0801000e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801000e:	b580      	push	{r7, lr}
 8010010:	b082      	sub	sp, #8
 8010012:	af00      	add	r7, sp, #0
 8010014:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f001 fbea 	bl	80117f0 <USBD_LL_Start>
 801001c:	4603      	mov	r3, r0
}
 801001e:	4618      	mov	r0, r3
 8010020:	3708      	adds	r7, #8
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}

08010026 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8010026:	b580      	push	{r7, lr}
 8010028:	b082      	sub	sp, #8
 801002a:	af00      	add	r7, sp, #0
 801002c:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f001 fbf9 	bl	8011826 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801003a:	2b00      	cmp	r3, #0
 801003c:	d009      	beq.n	8010052 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010044:	685b      	ldr	r3, [r3, #4]
 8010046:	687a      	ldr	r2, [r7, #4]
 8010048:	6852      	ldr	r2, [r2, #4]
 801004a:	b2d2      	uxtb	r2, r2
 801004c:	4611      	mov	r1, r2
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	4798      	blx	r3
  }

  return USBD_OK;
 8010052:	2300      	movs	r3, #0
}
 8010054:	4618      	mov	r0, r3
 8010056:	3708      	adds	r7, #8
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}

0801005c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801005c:	b480      	push	{r7}
 801005e:	b083      	sub	sp, #12
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010064:	2300      	movs	r3, #0
}
 8010066:	4618      	mov	r0, r3
 8010068:	370c      	adds	r7, #12
 801006a:	46bd      	mov	sp, r7
 801006c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010070:	4770      	bx	lr

08010072 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010072:	b580      	push	{r7, lr}
 8010074:	b084      	sub	sp, #16
 8010076:	af00      	add	r7, sp, #0
 8010078:	6078      	str	r0, [r7, #4]
 801007a:	460b      	mov	r3, r1
 801007c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801007e:	2303      	movs	r3, #3
 8010080:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010088:	2b00      	cmp	r3, #0
 801008a:	d009      	beq.n	80100a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	78fa      	ldrb	r2, [r7, #3]
 8010096:	4611      	mov	r1, r2
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	4798      	blx	r3
 801009c:	4603      	mov	r3, r0
 801009e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80100a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	3710      	adds	r7, #16
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}

080100aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80100aa:	b580      	push	{r7, lr}
 80100ac:	b082      	sub	sp, #8
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	6078      	str	r0, [r7, #4]
 80100b2:	460b      	mov	r3, r1
 80100b4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d007      	beq.n	80100d0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100c6:	685b      	ldr	r3, [r3, #4]
 80100c8:	78fa      	ldrb	r2, [r7, #3]
 80100ca:	4611      	mov	r1, r2
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	4798      	blx	r3
  }

  return USBD_OK;
 80100d0:	2300      	movs	r3, #0
}
 80100d2:	4618      	mov	r0, r3
 80100d4:	3708      	adds	r7, #8
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}

080100da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80100da:	b580      	push	{r7, lr}
 80100dc:	b084      	sub	sp, #16
 80100de:	af00      	add	r7, sp, #0
 80100e0:	6078      	str	r0, [r7, #4]
 80100e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80100ea:	6839      	ldr	r1, [r7, #0]
 80100ec:	4618      	mov	r0, r3
 80100ee:	f000 ff59 	bl	8010fa4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2201      	movs	r2, #1
 80100f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010100:	461a      	mov	r2, r3
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801010e:	f003 031f 	and.w	r3, r3, #31
 8010112:	2b02      	cmp	r3, #2
 8010114:	d01a      	beq.n	801014c <USBD_LL_SetupStage+0x72>
 8010116:	2b02      	cmp	r3, #2
 8010118:	d822      	bhi.n	8010160 <USBD_LL_SetupStage+0x86>
 801011a:	2b00      	cmp	r3, #0
 801011c:	d002      	beq.n	8010124 <USBD_LL_SetupStage+0x4a>
 801011e:	2b01      	cmp	r3, #1
 8010120:	d00a      	beq.n	8010138 <USBD_LL_SetupStage+0x5e>
 8010122:	e01d      	b.n	8010160 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801012a:	4619      	mov	r1, r3
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f000 f9ef 	bl	8010510 <USBD_StdDevReq>
 8010132:	4603      	mov	r3, r0
 8010134:	73fb      	strb	r3, [r7, #15]
      break;
 8010136:	e020      	b.n	801017a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801013e:	4619      	mov	r1, r3
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f000 fa53 	bl	80105ec <USBD_StdItfReq>
 8010146:	4603      	mov	r3, r0
 8010148:	73fb      	strb	r3, [r7, #15]
      break;
 801014a:	e016      	b.n	801017a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010152:	4619      	mov	r1, r3
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f000 fa92 	bl	801067e <USBD_StdEPReq>
 801015a:	4603      	mov	r3, r0
 801015c:	73fb      	strb	r3, [r7, #15]
      break;
 801015e:	e00c      	b.n	801017a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010166:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801016a:	b2db      	uxtb	r3, r3
 801016c:	4619      	mov	r1, r3
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f001 fb9a 	bl	80118a8 <USBD_LL_StallEP>
 8010174:	4603      	mov	r3, r0
 8010176:	73fb      	strb	r3, [r7, #15]
      break;
 8010178:	bf00      	nop
  }

  return ret;
 801017a:	7bfb      	ldrb	r3, [r7, #15]
}
 801017c:	4618      	mov	r0, r3
 801017e:	3710      	adds	r7, #16
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}

08010184 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b086      	sub	sp, #24
 8010188:	af00      	add	r7, sp, #0
 801018a:	60f8      	str	r0, [r7, #12]
 801018c:	460b      	mov	r3, r1
 801018e:	607a      	str	r2, [r7, #4]
 8010190:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010192:	7afb      	ldrb	r3, [r7, #11]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d138      	bne.n	801020a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801019e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80101a6:	2b03      	cmp	r3, #3
 80101a8:	d14a      	bne.n	8010240 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	689a      	ldr	r2, [r3, #8]
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	68db      	ldr	r3, [r3, #12]
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d913      	bls.n	80101de <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80101b6:	693b      	ldr	r3, [r7, #16]
 80101b8:	689a      	ldr	r2, [r3, #8]
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	68db      	ldr	r3, [r3, #12]
 80101be:	1ad2      	subs	r2, r2, r3
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80101c4:	693b      	ldr	r3, [r7, #16]
 80101c6:	68da      	ldr	r2, [r3, #12]
 80101c8:	693b      	ldr	r3, [r7, #16]
 80101ca:	689b      	ldr	r3, [r3, #8]
 80101cc:	4293      	cmp	r3, r2
 80101ce:	bf28      	it	cs
 80101d0:	4613      	movcs	r3, r2
 80101d2:	461a      	mov	r2, r3
 80101d4:	6879      	ldr	r1, [r7, #4]
 80101d6:	68f8      	ldr	r0, [r7, #12]
 80101d8:	f000 ffd8 	bl	801118c <USBD_CtlContinueRx>
 80101dc:	e030      	b.n	8010240 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80101e4:	b2db      	uxtb	r3, r3
 80101e6:	2b03      	cmp	r3, #3
 80101e8:	d10b      	bne.n	8010202 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80101f0:	691b      	ldr	r3, [r3, #16]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d005      	beq.n	8010202 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80101fc:	691b      	ldr	r3, [r3, #16]
 80101fe:	68f8      	ldr	r0, [r7, #12]
 8010200:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010202:	68f8      	ldr	r0, [r7, #12]
 8010204:	f000 ffd3 	bl	80111ae <USBD_CtlSendStatus>
 8010208:	e01a      	b.n	8010240 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010210:	b2db      	uxtb	r3, r3
 8010212:	2b03      	cmp	r3, #3
 8010214:	d114      	bne.n	8010240 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801021c:	699b      	ldr	r3, [r3, #24]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d00e      	beq.n	8010240 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010228:	699b      	ldr	r3, [r3, #24]
 801022a:	7afa      	ldrb	r2, [r7, #11]
 801022c:	4611      	mov	r1, r2
 801022e:	68f8      	ldr	r0, [r7, #12]
 8010230:	4798      	blx	r3
 8010232:	4603      	mov	r3, r0
 8010234:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010236:	7dfb      	ldrb	r3, [r7, #23]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d001      	beq.n	8010240 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801023c:	7dfb      	ldrb	r3, [r7, #23]
 801023e:	e000      	b.n	8010242 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8010240:	2300      	movs	r3, #0
}
 8010242:	4618      	mov	r0, r3
 8010244:	3718      	adds	r7, #24
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}

0801024a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801024a:	b580      	push	{r7, lr}
 801024c:	b086      	sub	sp, #24
 801024e:	af00      	add	r7, sp, #0
 8010250:	60f8      	str	r0, [r7, #12]
 8010252:	460b      	mov	r3, r1
 8010254:	607a      	str	r2, [r7, #4]
 8010256:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010258:	7afb      	ldrb	r3, [r7, #11]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d16b      	bne.n	8010336 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	3314      	adds	r3, #20
 8010262:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801026a:	2b02      	cmp	r3, #2
 801026c:	d156      	bne.n	801031c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	689a      	ldr	r2, [r3, #8]
 8010272:	693b      	ldr	r3, [r7, #16]
 8010274:	68db      	ldr	r3, [r3, #12]
 8010276:	429a      	cmp	r2, r3
 8010278:	d914      	bls.n	80102a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	689a      	ldr	r2, [r3, #8]
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	68db      	ldr	r3, [r3, #12]
 8010282:	1ad2      	subs	r2, r2, r3
 8010284:	693b      	ldr	r3, [r7, #16]
 8010286:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010288:	693b      	ldr	r3, [r7, #16]
 801028a:	689b      	ldr	r3, [r3, #8]
 801028c:	461a      	mov	r2, r3
 801028e:	6879      	ldr	r1, [r7, #4]
 8010290:	68f8      	ldr	r0, [r7, #12]
 8010292:	f000 ff4d 	bl	8011130 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010296:	2300      	movs	r3, #0
 8010298:	2200      	movs	r2, #0
 801029a:	2100      	movs	r1, #0
 801029c:	68f8      	ldr	r0, [r7, #12]
 801029e:	f001 fbad 	bl	80119fc <USBD_LL_PrepareReceive>
 80102a2:	e03b      	b.n	801031c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80102a4:	693b      	ldr	r3, [r7, #16]
 80102a6:	68da      	ldr	r2, [r3, #12]
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	689b      	ldr	r3, [r3, #8]
 80102ac:	429a      	cmp	r2, r3
 80102ae:	d11c      	bne.n	80102ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	685a      	ldr	r2, [r3, #4]
 80102b4:	693b      	ldr	r3, [r7, #16]
 80102b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d316      	bcc.n	80102ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80102bc:	693b      	ldr	r3, [r7, #16]
 80102be:	685a      	ldr	r2, [r3, #4]
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d20f      	bcs.n	80102ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80102ca:	2200      	movs	r2, #0
 80102cc:	2100      	movs	r1, #0
 80102ce:	68f8      	ldr	r0, [r7, #12]
 80102d0:	f000 ff2e 	bl	8011130 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	2200      	movs	r2, #0
 80102d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80102dc:	2300      	movs	r3, #0
 80102de:	2200      	movs	r2, #0
 80102e0:	2100      	movs	r1, #0
 80102e2:	68f8      	ldr	r0, [r7, #12]
 80102e4:	f001 fb8a 	bl	80119fc <USBD_LL_PrepareReceive>
 80102e8:	e018      	b.n	801031c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102f0:	b2db      	uxtb	r3, r3
 80102f2:	2b03      	cmp	r3, #3
 80102f4:	d10b      	bne.n	801030e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80102fc:	68db      	ldr	r3, [r3, #12]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d005      	beq.n	801030e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010308:	68db      	ldr	r3, [r3, #12]
 801030a:	68f8      	ldr	r0, [r7, #12]
 801030c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801030e:	2180      	movs	r1, #128	@ 0x80
 8010310:	68f8      	ldr	r0, [r7, #12]
 8010312:	f001 fac9 	bl	80118a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010316:	68f8      	ldr	r0, [r7, #12]
 8010318:	f000 ff5c 	bl	80111d4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8010322:	2b01      	cmp	r3, #1
 8010324:	d122      	bne.n	801036c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8010326:	68f8      	ldr	r0, [r7, #12]
 8010328:	f7ff fe98 	bl	801005c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	2200      	movs	r2, #0
 8010330:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010334:	e01a      	b.n	801036c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801033c:	b2db      	uxtb	r3, r3
 801033e:	2b03      	cmp	r3, #3
 8010340:	d114      	bne.n	801036c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010348:	695b      	ldr	r3, [r3, #20]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d00e      	beq.n	801036c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010354:	695b      	ldr	r3, [r3, #20]
 8010356:	7afa      	ldrb	r2, [r7, #11]
 8010358:	4611      	mov	r1, r2
 801035a:	68f8      	ldr	r0, [r7, #12]
 801035c:	4798      	blx	r3
 801035e:	4603      	mov	r3, r0
 8010360:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010362:	7dfb      	ldrb	r3, [r7, #23]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d001      	beq.n	801036c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8010368:	7dfb      	ldrb	r3, [r7, #23]
 801036a:	e000      	b.n	801036e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801036c:	2300      	movs	r3, #0
}
 801036e:	4618      	mov	r0, r3
 8010370:	3718      	adds	r7, #24
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}

08010376 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010376:	b580      	push	{r7, lr}
 8010378:	b082      	sub	sp, #8
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2201      	movs	r2, #1
 8010382:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2200      	movs	r2, #0
 801038a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2200      	movs	r2, #0
 8010392:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2200      	movs	r2, #0
 8010398:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d101      	bne.n	80103aa <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80103a6:	2303      	movs	r3, #3
 80103a8:	e02f      	b.n	801040a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d00f      	beq.n	80103d4 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103ba:	685b      	ldr	r3, [r3, #4]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d009      	beq.n	80103d4 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103c6:	685b      	ldr	r3, [r3, #4]
 80103c8:	687a      	ldr	r2, [r7, #4]
 80103ca:	6852      	ldr	r2, [r2, #4]
 80103cc:	b2d2      	uxtb	r2, r2
 80103ce:	4611      	mov	r1, r2
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80103d4:	2340      	movs	r3, #64	@ 0x40
 80103d6:	2200      	movs	r2, #0
 80103d8:	2100      	movs	r1, #0
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f001 fa3e 	bl	801185c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2201      	movs	r2, #1
 80103e4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2240      	movs	r2, #64	@ 0x40
 80103ec:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80103f0:	2340      	movs	r3, #64	@ 0x40
 80103f2:	2200      	movs	r2, #0
 80103f4:	2180      	movs	r1, #128	@ 0x80
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f001 fa30 	bl	801185c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2201      	movs	r2, #1
 8010400:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2240      	movs	r2, #64	@ 0x40
 8010406:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010408:	2300      	movs	r3, #0
}
 801040a:	4618      	mov	r0, r3
 801040c:	3708      	adds	r7, #8
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}

08010412 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010412:	b480      	push	{r7}
 8010414:	b083      	sub	sp, #12
 8010416:	af00      	add	r7, sp, #0
 8010418:	6078      	str	r0, [r7, #4]
 801041a:	460b      	mov	r3, r1
 801041c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	78fa      	ldrb	r2, [r7, #3]
 8010422:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010424:	2300      	movs	r3, #0
}
 8010426:	4618      	mov	r0, r3
 8010428:	370c      	adds	r7, #12
 801042a:	46bd      	mov	sp, r7
 801042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010430:	4770      	bx	lr

08010432 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010432:	b480      	push	{r7}
 8010434:	b083      	sub	sp, #12
 8010436:	af00      	add	r7, sp, #0
 8010438:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010440:	b2da      	uxtb	r2, r3
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2204      	movs	r2, #4
 801044c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8010450:	2300      	movs	r3, #0
}
 8010452:	4618      	mov	r0, r3
 8010454:	370c      	adds	r7, #12
 8010456:	46bd      	mov	sp, r7
 8010458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045c:	4770      	bx	lr

0801045e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801045e:	b480      	push	{r7}
 8010460:	b083      	sub	sp, #12
 8010462:	af00      	add	r7, sp, #0
 8010464:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801046c:	b2db      	uxtb	r3, r3
 801046e:	2b04      	cmp	r3, #4
 8010470:	d106      	bne.n	8010480 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010478:	b2da      	uxtb	r2, r3
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8010480:	2300      	movs	r3, #0
}
 8010482:	4618      	mov	r0, r3
 8010484:	370c      	adds	r7, #12
 8010486:	46bd      	mov	sp, r7
 8010488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048c:	4770      	bx	lr

0801048e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801048e:	b580      	push	{r7, lr}
 8010490:	b082      	sub	sp, #8
 8010492:	af00      	add	r7, sp, #0
 8010494:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801049c:	2b00      	cmp	r3, #0
 801049e:	d101      	bne.n	80104a4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80104a0:	2303      	movs	r3, #3
 80104a2:	e012      	b.n	80104ca <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104aa:	b2db      	uxtb	r3, r3
 80104ac:	2b03      	cmp	r3, #3
 80104ae:	d10b      	bne.n	80104c8 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80104b6:	69db      	ldr	r3, [r3, #28]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d005      	beq.n	80104c8 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80104c2:	69db      	ldr	r3, [r3, #28]
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80104c8:	2300      	movs	r3, #0
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3708      	adds	r7, #8
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}

080104d2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80104d2:	b480      	push	{r7}
 80104d4:	b087      	sub	sp, #28
 80104d6:	af00      	add	r7, sp, #0
 80104d8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	781b      	ldrb	r3, [r3, #0]
 80104e2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	3301      	adds	r3, #1
 80104e8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	781b      	ldrb	r3, [r3, #0]
 80104ee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80104f0:	8a3b      	ldrh	r3, [r7, #16]
 80104f2:	021b      	lsls	r3, r3, #8
 80104f4:	b21a      	sxth	r2, r3
 80104f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80104fa:	4313      	orrs	r3, r2
 80104fc:	b21b      	sxth	r3, r3
 80104fe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010500:	89fb      	ldrh	r3, [r7, #14]
}
 8010502:	4618      	mov	r0, r3
 8010504:	371c      	adds	r7, #28
 8010506:	46bd      	mov	sp, r7
 8010508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050c:	4770      	bx	lr
	...

08010510 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b084      	sub	sp, #16
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801051a:	2300      	movs	r3, #0
 801051c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	781b      	ldrb	r3, [r3, #0]
 8010522:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010526:	2b40      	cmp	r3, #64	@ 0x40
 8010528:	d005      	beq.n	8010536 <USBD_StdDevReq+0x26>
 801052a:	2b40      	cmp	r3, #64	@ 0x40
 801052c:	d853      	bhi.n	80105d6 <USBD_StdDevReq+0xc6>
 801052e:	2b00      	cmp	r3, #0
 8010530:	d00b      	beq.n	801054a <USBD_StdDevReq+0x3a>
 8010532:	2b20      	cmp	r3, #32
 8010534:	d14f      	bne.n	80105d6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801053c:	689b      	ldr	r3, [r3, #8]
 801053e:	6839      	ldr	r1, [r7, #0]
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	4798      	blx	r3
 8010544:	4603      	mov	r3, r0
 8010546:	73fb      	strb	r3, [r7, #15]
      break;
 8010548:	e04a      	b.n	80105e0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	785b      	ldrb	r3, [r3, #1]
 801054e:	2b09      	cmp	r3, #9
 8010550:	d83b      	bhi.n	80105ca <USBD_StdDevReq+0xba>
 8010552:	a201      	add	r2, pc, #4	@ (adr r2, 8010558 <USBD_StdDevReq+0x48>)
 8010554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010558:	080105ad 	.word	0x080105ad
 801055c:	080105c1 	.word	0x080105c1
 8010560:	080105cb 	.word	0x080105cb
 8010564:	080105b7 	.word	0x080105b7
 8010568:	080105cb 	.word	0x080105cb
 801056c:	0801058b 	.word	0x0801058b
 8010570:	08010581 	.word	0x08010581
 8010574:	080105cb 	.word	0x080105cb
 8010578:	080105a3 	.word	0x080105a3
 801057c:	08010595 	.word	0x08010595
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010580:	6839      	ldr	r1, [r7, #0]
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f000 f9de 	bl	8010944 <USBD_GetDescriptor>
          break;
 8010588:	e024      	b.n	80105d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801058a:	6839      	ldr	r1, [r7, #0]
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f000 fb7f 	bl	8010c90 <USBD_SetAddress>
          break;
 8010592:	e01f      	b.n	80105d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010594:	6839      	ldr	r1, [r7, #0]
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f000 fbbe 	bl	8010d18 <USBD_SetConfig>
 801059c:	4603      	mov	r3, r0
 801059e:	73fb      	strb	r3, [r7, #15]
          break;
 80105a0:	e018      	b.n	80105d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80105a2:	6839      	ldr	r1, [r7, #0]
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f000 fc5d 	bl	8010e64 <USBD_GetConfig>
          break;
 80105aa:	e013      	b.n	80105d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80105ac:	6839      	ldr	r1, [r7, #0]
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f000 fc8e 	bl	8010ed0 <USBD_GetStatus>
          break;
 80105b4:	e00e      	b.n	80105d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80105b6:	6839      	ldr	r1, [r7, #0]
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f000 fcbd 	bl	8010f38 <USBD_SetFeature>
          break;
 80105be:	e009      	b.n	80105d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80105c0:	6839      	ldr	r1, [r7, #0]
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f000 fccc 	bl	8010f60 <USBD_ClrFeature>
          break;
 80105c8:	e004      	b.n	80105d4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80105ca:	6839      	ldr	r1, [r7, #0]
 80105cc:	6878      	ldr	r0, [r7, #4]
 80105ce:	f000 fd23 	bl	8011018 <USBD_CtlError>
          break;
 80105d2:	bf00      	nop
      }
      break;
 80105d4:	e004      	b.n	80105e0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80105d6:	6839      	ldr	r1, [r7, #0]
 80105d8:	6878      	ldr	r0, [r7, #4]
 80105da:	f000 fd1d 	bl	8011018 <USBD_CtlError>
      break;
 80105de:	bf00      	nop
  }

  return ret;
 80105e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3710      	adds	r7, #16
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}
 80105ea:	bf00      	nop

080105ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b084      	sub	sp, #16
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80105f6:	2300      	movs	r3, #0
 80105f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	781b      	ldrb	r3, [r3, #0]
 80105fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010602:	2b40      	cmp	r3, #64	@ 0x40
 8010604:	d005      	beq.n	8010612 <USBD_StdItfReq+0x26>
 8010606:	2b40      	cmp	r3, #64	@ 0x40
 8010608:	d82f      	bhi.n	801066a <USBD_StdItfReq+0x7e>
 801060a:	2b00      	cmp	r3, #0
 801060c:	d001      	beq.n	8010612 <USBD_StdItfReq+0x26>
 801060e:	2b20      	cmp	r3, #32
 8010610:	d12b      	bne.n	801066a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010618:	b2db      	uxtb	r3, r3
 801061a:	3b01      	subs	r3, #1
 801061c:	2b02      	cmp	r3, #2
 801061e:	d81d      	bhi.n	801065c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	889b      	ldrh	r3, [r3, #4]
 8010624:	b2db      	uxtb	r3, r3
 8010626:	2b01      	cmp	r3, #1
 8010628:	d813      	bhi.n	8010652 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010630:	689b      	ldr	r3, [r3, #8]
 8010632:	6839      	ldr	r1, [r7, #0]
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	4798      	blx	r3
 8010638:	4603      	mov	r3, r0
 801063a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	88db      	ldrh	r3, [r3, #6]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d110      	bne.n	8010666 <USBD_StdItfReq+0x7a>
 8010644:	7bfb      	ldrb	r3, [r7, #15]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d10d      	bne.n	8010666 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f000 fdaf 	bl	80111ae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010650:	e009      	b.n	8010666 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8010652:	6839      	ldr	r1, [r7, #0]
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f000 fcdf 	bl	8011018 <USBD_CtlError>
          break;
 801065a:	e004      	b.n	8010666 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801065c:	6839      	ldr	r1, [r7, #0]
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f000 fcda 	bl	8011018 <USBD_CtlError>
          break;
 8010664:	e000      	b.n	8010668 <USBD_StdItfReq+0x7c>
          break;
 8010666:	bf00      	nop
      }
      break;
 8010668:	e004      	b.n	8010674 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801066a:	6839      	ldr	r1, [r7, #0]
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f000 fcd3 	bl	8011018 <USBD_CtlError>
      break;
 8010672:	bf00      	nop
  }

  return ret;
 8010674:	7bfb      	ldrb	r3, [r7, #15]
}
 8010676:	4618      	mov	r0, r3
 8010678:	3710      	adds	r7, #16
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801067e:	b580      	push	{r7, lr}
 8010680:	b084      	sub	sp, #16
 8010682:	af00      	add	r7, sp, #0
 8010684:	6078      	str	r0, [r7, #4]
 8010686:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010688:	2300      	movs	r3, #0
 801068a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	889b      	ldrh	r3, [r3, #4]
 8010690:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	781b      	ldrb	r3, [r3, #0]
 8010696:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801069a:	2b40      	cmp	r3, #64	@ 0x40
 801069c:	d007      	beq.n	80106ae <USBD_StdEPReq+0x30>
 801069e:	2b40      	cmp	r3, #64	@ 0x40
 80106a0:	f200 8145 	bhi.w	801092e <USBD_StdEPReq+0x2b0>
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d00c      	beq.n	80106c2 <USBD_StdEPReq+0x44>
 80106a8:	2b20      	cmp	r3, #32
 80106aa:	f040 8140 	bne.w	801092e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80106b4:	689b      	ldr	r3, [r3, #8]
 80106b6:	6839      	ldr	r1, [r7, #0]
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	4798      	blx	r3
 80106bc:	4603      	mov	r3, r0
 80106be:	73fb      	strb	r3, [r7, #15]
      break;
 80106c0:	e13a      	b.n	8010938 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	785b      	ldrb	r3, [r3, #1]
 80106c6:	2b03      	cmp	r3, #3
 80106c8:	d007      	beq.n	80106da <USBD_StdEPReq+0x5c>
 80106ca:	2b03      	cmp	r3, #3
 80106cc:	f300 8129 	bgt.w	8010922 <USBD_StdEPReq+0x2a4>
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d07f      	beq.n	80107d4 <USBD_StdEPReq+0x156>
 80106d4:	2b01      	cmp	r3, #1
 80106d6:	d03c      	beq.n	8010752 <USBD_StdEPReq+0xd4>
 80106d8:	e123      	b.n	8010922 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80106e0:	b2db      	uxtb	r3, r3
 80106e2:	2b02      	cmp	r3, #2
 80106e4:	d002      	beq.n	80106ec <USBD_StdEPReq+0x6e>
 80106e6:	2b03      	cmp	r3, #3
 80106e8:	d016      	beq.n	8010718 <USBD_StdEPReq+0x9a>
 80106ea:	e02c      	b.n	8010746 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80106ec:	7bbb      	ldrb	r3, [r7, #14]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d00d      	beq.n	801070e <USBD_StdEPReq+0x90>
 80106f2:	7bbb      	ldrb	r3, [r7, #14]
 80106f4:	2b80      	cmp	r3, #128	@ 0x80
 80106f6:	d00a      	beq.n	801070e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80106f8:	7bbb      	ldrb	r3, [r7, #14]
 80106fa:	4619      	mov	r1, r3
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	f001 f8d3 	bl	80118a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010702:	2180      	movs	r1, #128	@ 0x80
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f001 f8cf 	bl	80118a8 <USBD_LL_StallEP>
 801070a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801070c:	e020      	b.n	8010750 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801070e:	6839      	ldr	r1, [r7, #0]
 8010710:	6878      	ldr	r0, [r7, #4]
 8010712:	f000 fc81 	bl	8011018 <USBD_CtlError>
              break;
 8010716:	e01b      	b.n	8010750 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	885b      	ldrh	r3, [r3, #2]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d10e      	bne.n	801073e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010720:	7bbb      	ldrb	r3, [r7, #14]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d00b      	beq.n	801073e <USBD_StdEPReq+0xc0>
 8010726:	7bbb      	ldrb	r3, [r7, #14]
 8010728:	2b80      	cmp	r3, #128	@ 0x80
 801072a:	d008      	beq.n	801073e <USBD_StdEPReq+0xc0>
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	88db      	ldrh	r3, [r3, #6]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d104      	bne.n	801073e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010734:	7bbb      	ldrb	r3, [r7, #14]
 8010736:	4619      	mov	r1, r3
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f001 f8b5 	bl	80118a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f000 fd35 	bl	80111ae <USBD_CtlSendStatus>

              break;
 8010744:	e004      	b.n	8010750 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8010746:	6839      	ldr	r1, [r7, #0]
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f000 fc65 	bl	8011018 <USBD_CtlError>
              break;
 801074e:	bf00      	nop
          }
          break;
 8010750:	e0ec      	b.n	801092c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010758:	b2db      	uxtb	r3, r3
 801075a:	2b02      	cmp	r3, #2
 801075c:	d002      	beq.n	8010764 <USBD_StdEPReq+0xe6>
 801075e:	2b03      	cmp	r3, #3
 8010760:	d016      	beq.n	8010790 <USBD_StdEPReq+0x112>
 8010762:	e030      	b.n	80107c6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010764:	7bbb      	ldrb	r3, [r7, #14]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d00d      	beq.n	8010786 <USBD_StdEPReq+0x108>
 801076a:	7bbb      	ldrb	r3, [r7, #14]
 801076c:	2b80      	cmp	r3, #128	@ 0x80
 801076e:	d00a      	beq.n	8010786 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010770:	7bbb      	ldrb	r3, [r7, #14]
 8010772:	4619      	mov	r1, r3
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f001 f897 	bl	80118a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801077a:	2180      	movs	r1, #128	@ 0x80
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f001 f893 	bl	80118a8 <USBD_LL_StallEP>
 8010782:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010784:	e025      	b.n	80107d2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8010786:	6839      	ldr	r1, [r7, #0]
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f000 fc45 	bl	8011018 <USBD_CtlError>
              break;
 801078e:	e020      	b.n	80107d2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	885b      	ldrh	r3, [r3, #2]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d11b      	bne.n	80107d0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010798:	7bbb      	ldrb	r3, [r7, #14]
 801079a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d004      	beq.n	80107ac <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80107a2:	7bbb      	ldrb	r3, [r7, #14]
 80107a4:	4619      	mov	r1, r3
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	f001 f89d 	bl	80118e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f000 fcfe 	bl	80111ae <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80107b8:	689b      	ldr	r3, [r3, #8]
 80107ba:	6839      	ldr	r1, [r7, #0]
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	4798      	blx	r3
 80107c0:	4603      	mov	r3, r0
 80107c2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80107c4:	e004      	b.n	80107d0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80107c6:	6839      	ldr	r1, [r7, #0]
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f000 fc25 	bl	8011018 <USBD_CtlError>
              break;
 80107ce:	e000      	b.n	80107d2 <USBD_StdEPReq+0x154>
              break;
 80107d0:	bf00      	nop
          }
          break;
 80107d2:	e0ab      	b.n	801092c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80107da:	b2db      	uxtb	r3, r3
 80107dc:	2b02      	cmp	r3, #2
 80107de:	d002      	beq.n	80107e6 <USBD_StdEPReq+0x168>
 80107e0:	2b03      	cmp	r3, #3
 80107e2:	d032      	beq.n	801084a <USBD_StdEPReq+0x1cc>
 80107e4:	e097      	b.n	8010916 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80107e6:	7bbb      	ldrb	r3, [r7, #14]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d007      	beq.n	80107fc <USBD_StdEPReq+0x17e>
 80107ec:	7bbb      	ldrb	r3, [r7, #14]
 80107ee:	2b80      	cmp	r3, #128	@ 0x80
 80107f0:	d004      	beq.n	80107fc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80107f2:	6839      	ldr	r1, [r7, #0]
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f000 fc0f 	bl	8011018 <USBD_CtlError>
                break;
 80107fa:	e091      	b.n	8010920 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80107fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010800:	2b00      	cmp	r3, #0
 8010802:	da0b      	bge.n	801081c <USBD_StdEPReq+0x19e>
 8010804:	7bbb      	ldrb	r3, [r7, #14]
 8010806:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801080a:	4613      	mov	r3, r2
 801080c:	009b      	lsls	r3, r3, #2
 801080e:	4413      	add	r3, r2
 8010810:	009b      	lsls	r3, r3, #2
 8010812:	3310      	adds	r3, #16
 8010814:	687a      	ldr	r2, [r7, #4]
 8010816:	4413      	add	r3, r2
 8010818:	3304      	adds	r3, #4
 801081a:	e00b      	b.n	8010834 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801081c:	7bbb      	ldrb	r3, [r7, #14]
 801081e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010822:	4613      	mov	r3, r2
 8010824:	009b      	lsls	r3, r3, #2
 8010826:	4413      	add	r3, r2
 8010828:	009b      	lsls	r3, r3, #2
 801082a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801082e:	687a      	ldr	r2, [r7, #4]
 8010830:	4413      	add	r3, r2
 8010832:	3304      	adds	r3, #4
 8010834:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	2200      	movs	r2, #0
 801083a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	2202      	movs	r2, #2
 8010840:	4619      	mov	r1, r3
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f000 fc59 	bl	80110fa <USBD_CtlSendData>
              break;
 8010848:	e06a      	b.n	8010920 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801084a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801084e:	2b00      	cmp	r3, #0
 8010850:	da11      	bge.n	8010876 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010852:	7bbb      	ldrb	r3, [r7, #14]
 8010854:	f003 020f 	and.w	r2, r3, #15
 8010858:	6879      	ldr	r1, [r7, #4]
 801085a:	4613      	mov	r3, r2
 801085c:	009b      	lsls	r3, r3, #2
 801085e:	4413      	add	r3, r2
 8010860:	009b      	lsls	r3, r3, #2
 8010862:	440b      	add	r3, r1
 8010864:	3324      	adds	r3, #36	@ 0x24
 8010866:	881b      	ldrh	r3, [r3, #0]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d117      	bne.n	801089c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801086c:	6839      	ldr	r1, [r7, #0]
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f000 fbd2 	bl	8011018 <USBD_CtlError>
                  break;
 8010874:	e054      	b.n	8010920 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010876:	7bbb      	ldrb	r3, [r7, #14]
 8010878:	f003 020f 	and.w	r2, r3, #15
 801087c:	6879      	ldr	r1, [r7, #4]
 801087e:	4613      	mov	r3, r2
 8010880:	009b      	lsls	r3, r3, #2
 8010882:	4413      	add	r3, r2
 8010884:	009b      	lsls	r3, r3, #2
 8010886:	440b      	add	r3, r1
 8010888:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801088c:	881b      	ldrh	r3, [r3, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d104      	bne.n	801089c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010892:	6839      	ldr	r1, [r7, #0]
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	f000 fbbf 	bl	8011018 <USBD_CtlError>
                  break;
 801089a:	e041      	b.n	8010920 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801089c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	da0b      	bge.n	80108bc <USBD_StdEPReq+0x23e>
 80108a4:	7bbb      	ldrb	r3, [r7, #14]
 80108a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80108aa:	4613      	mov	r3, r2
 80108ac:	009b      	lsls	r3, r3, #2
 80108ae:	4413      	add	r3, r2
 80108b0:	009b      	lsls	r3, r3, #2
 80108b2:	3310      	adds	r3, #16
 80108b4:	687a      	ldr	r2, [r7, #4]
 80108b6:	4413      	add	r3, r2
 80108b8:	3304      	adds	r3, #4
 80108ba:	e00b      	b.n	80108d4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80108bc:	7bbb      	ldrb	r3, [r7, #14]
 80108be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80108c2:	4613      	mov	r3, r2
 80108c4:	009b      	lsls	r3, r3, #2
 80108c6:	4413      	add	r3, r2
 80108c8:	009b      	lsls	r3, r3, #2
 80108ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80108ce:	687a      	ldr	r2, [r7, #4]
 80108d0:	4413      	add	r3, r2
 80108d2:	3304      	adds	r3, #4
 80108d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80108d6:	7bbb      	ldrb	r3, [r7, #14]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d002      	beq.n	80108e2 <USBD_StdEPReq+0x264>
 80108dc:	7bbb      	ldrb	r3, [r7, #14]
 80108de:	2b80      	cmp	r3, #128	@ 0x80
 80108e0:	d103      	bne.n	80108ea <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	2200      	movs	r2, #0
 80108e6:	601a      	str	r2, [r3, #0]
 80108e8:	e00e      	b.n	8010908 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80108ea:	7bbb      	ldrb	r3, [r7, #14]
 80108ec:	4619      	mov	r1, r3
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f001 f818 	bl	8011924 <USBD_LL_IsStallEP>
 80108f4:	4603      	mov	r3, r0
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d003      	beq.n	8010902 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	2201      	movs	r2, #1
 80108fe:	601a      	str	r2, [r3, #0]
 8010900:	e002      	b.n	8010908 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	2200      	movs	r2, #0
 8010906:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	2202      	movs	r2, #2
 801090c:	4619      	mov	r1, r3
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f000 fbf3 	bl	80110fa <USBD_CtlSendData>
              break;
 8010914:	e004      	b.n	8010920 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8010916:	6839      	ldr	r1, [r7, #0]
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f000 fb7d 	bl	8011018 <USBD_CtlError>
              break;
 801091e:	bf00      	nop
          }
          break;
 8010920:	e004      	b.n	801092c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8010922:	6839      	ldr	r1, [r7, #0]
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f000 fb77 	bl	8011018 <USBD_CtlError>
          break;
 801092a:	bf00      	nop
      }
      break;
 801092c:	e004      	b.n	8010938 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801092e:	6839      	ldr	r1, [r7, #0]
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f000 fb71 	bl	8011018 <USBD_CtlError>
      break;
 8010936:	bf00      	nop
  }

  return ret;
 8010938:	7bfb      	ldrb	r3, [r7, #15]
}
 801093a:	4618      	mov	r0, r3
 801093c:	3710      	adds	r7, #16
 801093e:	46bd      	mov	sp, r7
 8010940:	bd80      	pop	{r7, pc}
	...

08010944 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b084      	sub	sp, #16
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801094e:	2300      	movs	r3, #0
 8010950:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010952:	2300      	movs	r3, #0
 8010954:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010956:	2300      	movs	r3, #0
 8010958:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	885b      	ldrh	r3, [r3, #2]
 801095e:	0a1b      	lsrs	r3, r3, #8
 8010960:	b29b      	uxth	r3, r3
 8010962:	3b01      	subs	r3, #1
 8010964:	2b0e      	cmp	r3, #14
 8010966:	f200 8165 	bhi.w	8010c34 <USBD_GetDescriptor+0x2f0>
 801096a:	a201      	add	r2, pc, #4	@ (adr r2, 8010970 <USBD_GetDescriptor+0x2c>)
 801096c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010970:	080109e1 	.word	0x080109e1
 8010974:	080109f9 	.word	0x080109f9
 8010978:	08010a39 	.word	0x08010a39
 801097c:	08010c35 	.word	0x08010c35
 8010980:	08010c35 	.word	0x08010c35
 8010984:	08010bd5 	.word	0x08010bd5
 8010988:	08010c01 	.word	0x08010c01
 801098c:	08010c35 	.word	0x08010c35
 8010990:	08010c35 	.word	0x08010c35
 8010994:	08010c35 	.word	0x08010c35
 8010998:	08010c35 	.word	0x08010c35
 801099c:	08010c35 	.word	0x08010c35
 80109a0:	08010c35 	.word	0x08010c35
 80109a4:	08010c35 	.word	0x08010c35
 80109a8:	080109ad 	.word	0x080109ad
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80109b2:	69db      	ldr	r3, [r3, #28]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d00b      	beq.n	80109d0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80109be:	69db      	ldr	r3, [r3, #28]
 80109c0:	687a      	ldr	r2, [r7, #4]
 80109c2:	7c12      	ldrb	r2, [r2, #16]
 80109c4:	f107 0108 	add.w	r1, r7, #8
 80109c8:	4610      	mov	r0, r2
 80109ca:	4798      	blx	r3
 80109cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80109ce:	e139      	b.n	8010c44 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 80109d0:	6839      	ldr	r1, [r7, #0]
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f000 fb20 	bl	8011018 <USBD_CtlError>
        err++;
 80109d8:	7afb      	ldrb	r3, [r7, #11]
 80109da:	3301      	adds	r3, #1
 80109dc:	72fb      	strb	r3, [r7, #11]
      break;
 80109de:	e131      	b.n	8010c44 <USBD_GetDescriptor+0x300>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	687a      	ldr	r2, [r7, #4]
 80109ea:	7c12      	ldrb	r2, [r2, #16]
 80109ec:	f107 0108 	add.w	r1, r7, #8
 80109f0:	4610      	mov	r0, r2
 80109f2:	4798      	blx	r3
 80109f4:	60f8      	str	r0, [r7, #12]
      break;
 80109f6:	e125      	b.n	8010c44 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	7c1b      	ldrb	r3, [r3, #16]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d10d      	bne.n	8010a1c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a08:	f107 0208 	add.w	r2, r7, #8
 8010a0c:	4610      	mov	r0, r2
 8010a0e:	4798      	blx	r3
 8010a10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	3301      	adds	r3, #1
 8010a16:	2202      	movs	r2, #2
 8010a18:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010a1a:	e113      	b.n	8010c44 <USBD_GetDescriptor+0x300>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a24:	f107 0208 	add.w	r2, r7, #8
 8010a28:	4610      	mov	r0, r2
 8010a2a:	4798      	blx	r3
 8010a2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	3301      	adds	r3, #1
 8010a32:	2202      	movs	r2, #2
 8010a34:	701a      	strb	r2, [r3, #0]
      break;
 8010a36:	e105      	b.n	8010c44 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	885b      	ldrh	r3, [r3, #2]
 8010a3c:	b2db      	uxtb	r3, r3
 8010a3e:	2b05      	cmp	r3, #5
 8010a40:	f200 80ac 	bhi.w	8010b9c <USBD_GetDescriptor+0x258>
 8010a44:	a201      	add	r2, pc, #4	@ (adr r2, 8010a4c <USBD_GetDescriptor+0x108>)
 8010a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a4a:	bf00      	nop
 8010a4c:	08010a65 	.word	0x08010a65
 8010a50:	08010a99 	.word	0x08010a99
 8010a54:	08010acd 	.word	0x08010acd
 8010a58:	08010b01 	.word	0x08010b01
 8010a5c:	08010b35 	.word	0x08010b35
 8010a60:	08010b69 	.word	0x08010b69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010a6a:	685b      	ldr	r3, [r3, #4]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d00b      	beq.n	8010a88 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010a76:	685b      	ldr	r3, [r3, #4]
 8010a78:	687a      	ldr	r2, [r7, #4]
 8010a7a:	7c12      	ldrb	r2, [r2, #16]
 8010a7c:	f107 0108 	add.w	r1, r7, #8
 8010a80:	4610      	mov	r0, r2
 8010a82:	4798      	blx	r3
 8010a84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010a86:	e0a4      	b.n	8010bd2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8010a88:	6839      	ldr	r1, [r7, #0]
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f000 fac4 	bl	8011018 <USBD_CtlError>
            err++;
 8010a90:	7afb      	ldrb	r3, [r7, #11]
 8010a92:	3301      	adds	r3, #1
 8010a94:	72fb      	strb	r3, [r7, #11]
          break;
 8010a96:	e09c      	b.n	8010bd2 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010a9e:	689b      	ldr	r3, [r3, #8]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d00b      	beq.n	8010abc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010aaa:	689b      	ldr	r3, [r3, #8]
 8010aac:	687a      	ldr	r2, [r7, #4]
 8010aae:	7c12      	ldrb	r2, [r2, #16]
 8010ab0:	f107 0108 	add.w	r1, r7, #8
 8010ab4:	4610      	mov	r0, r2
 8010ab6:	4798      	blx	r3
 8010ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010aba:	e08a      	b.n	8010bd2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8010abc:	6839      	ldr	r1, [r7, #0]
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f000 faaa 	bl	8011018 <USBD_CtlError>
            err++;
 8010ac4:	7afb      	ldrb	r3, [r7, #11]
 8010ac6:	3301      	adds	r3, #1
 8010ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8010aca:	e082      	b.n	8010bd2 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010ad2:	68db      	ldr	r3, [r3, #12]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d00b      	beq.n	8010af0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010ade:	68db      	ldr	r3, [r3, #12]
 8010ae0:	687a      	ldr	r2, [r7, #4]
 8010ae2:	7c12      	ldrb	r2, [r2, #16]
 8010ae4:	f107 0108 	add.w	r1, r7, #8
 8010ae8:	4610      	mov	r0, r2
 8010aea:	4798      	blx	r3
 8010aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010aee:	e070      	b.n	8010bd2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8010af0:	6839      	ldr	r1, [r7, #0]
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f000 fa90 	bl	8011018 <USBD_CtlError>
            err++;
 8010af8:	7afb      	ldrb	r3, [r7, #11]
 8010afa:	3301      	adds	r3, #1
 8010afc:	72fb      	strb	r3, [r7, #11]
          break;
 8010afe:	e068      	b.n	8010bd2 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b06:	691b      	ldr	r3, [r3, #16]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d00b      	beq.n	8010b24 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b12:	691b      	ldr	r3, [r3, #16]
 8010b14:	687a      	ldr	r2, [r7, #4]
 8010b16:	7c12      	ldrb	r2, [r2, #16]
 8010b18:	f107 0108 	add.w	r1, r7, #8
 8010b1c:	4610      	mov	r0, r2
 8010b1e:	4798      	blx	r3
 8010b20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b22:	e056      	b.n	8010bd2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8010b24:	6839      	ldr	r1, [r7, #0]
 8010b26:	6878      	ldr	r0, [r7, #4]
 8010b28:	f000 fa76 	bl	8011018 <USBD_CtlError>
            err++;
 8010b2c:	7afb      	ldrb	r3, [r7, #11]
 8010b2e:	3301      	adds	r3, #1
 8010b30:	72fb      	strb	r3, [r7, #11]
          break;
 8010b32:	e04e      	b.n	8010bd2 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b3a:	695b      	ldr	r3, [r3, #20]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d00b      	beq.n	8010b58 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b46:	695b      	ldr	r3, [r3, #20]
 8010b48:	687a      	ldr	r2, [r7, #4]
 8010b4a:	7c12      	ldrb	r2, [r2, #16]
 8010b4c:	f107 0108 	add.w	r1, r7, #8
 8010b50:	4610      	mov	r0, r2
 8010b52:	4798      	blx	r3
 8010b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b56:	e03c      	b.n	8010bd2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8010b58:	6839      	ldr	r1, [r7, #0]
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f000 fa5c 	bl	8011018 <USBD_CtlError>
            err++;
 8010b60:	7afb      	ldrb	r3, [r7, #11]
 8010b62:	3301      	adds	r3, #1
 8010b64:	72fb      	strb	r3, [r7, #11]
          break;
 8010b66:	e034      	b.n	8010bd2 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b6e:	699b      	ldr	r3, [r3, #24]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d00b      	beq.n	8010b8c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b7a:	699b      	ldr	r3, [r3, #24]
 8010b7c:	687a      	ldr	r2, [r7, #4]
 8010b7e:	7c12      	ldrb	r2, [r2, #16]
 8010b80:	f107 0108 	add.w	r1, r7, #8
 8010b84:	4610      	mov	r0, r2
 8010b86:	4798      	blx	r3
 8010b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b8a:	e022      	b.n	8010bd2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8010b8c:	6839      	ldr	r1, [r7, #0]
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f000 fa42 	bl	8011018 <USBD_CtlError>
            err++;
 8010b94:	7afb      	ldrb	r3, [r7, #11]
 8010b96:	3301      	adds	r3, #1
 8010b98:	72fb      	strb	r3, [r7, #11]
          break;
 8010b9a:	e01a      	b.n	8010bd2 <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d00c      	beq.n	8010bc2 <USBD_GetDescriptor+0x27e>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bb0:	683a      	ldr	r2, [r7, #0]
 8010bb2:	8852      	ldrh	r2, [r2, #2]
 8010bb4:	b2d1      	uxtb	r1, r2
 8010bb6:	f107 0208 	add.w	r2, r7, #8
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	4798      	blx	r3
 8010bbe:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8010bc0:	e006      	b.n	8010bd0 <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 8010bc2:	6839      	ldr	r1, [r7, #0]
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f000 fa27 	bl	8011018 <USBD_CtlError>
            err++;
 8010bca:	7afb      	ldrb	r3, [r7, #11]
 8010bcc:	3301      	adds	r3, #1
 8010bce:	72fb      	strb	r3, [r7, #11]
          break;
 8010bd0:	bf00      	nop
      }
      break;
 8010bd2:	e037      	b.n	8010c44 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	7c1b      	ldrb	r3, [r3, #16]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d109      	bne.n	8010bf0 <USBD_GetDescriptor+0x2ac>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010be4:	f107 0208 	add.w	r2, r7, #8
 8010be8:	4610      	mov	r0, r2
 8010bea:	4798      	blx	r3
 8010bec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010bee:	e029      	b.n	8010c44 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8010bf0:	6839      	ldr	r1, [r7, #0]
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f000 fa10 	bl	8011018 <USBD_CtlError>
        err++;
 8010bf8:	7afb      	ldrb	r3, [r7, #11]
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	72fb      	strb	r3, [r7, #11]
      break;
 8010bfe:	e021      	b.n	8010c44 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	7c1b      	ldrb	r3, [r3, #16]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d10d      	bne.n	8010c24 <USBD_GetDescriptor+0x2e0>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c10:	f107 0208 	add.w	r2, r7, #8
 8010c14:	4610      	mov	r0, r2
 8010c16:	4798      	blx	r3
 8010c18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	3301      	adds	r3, #1
 8010c1e:	2207      	movs	r2, #7
 8010c20:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010c22:	e00f      	b.n	8010c44 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8010c24:	6839      	ldr	r1, [r7, #0]
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f000 f9f6 	bl	8011018 <USBD_CtlError>
        err++;
 8010c2c:	7afb      	ldrb	r3, [r7, #11]
 8010c2e:	3301      	adds	r3, #1
 8010c30:	72fb      	strb	r3, [r7, #11]
      break;
 8010c32:	e007      	b.n	8010c44 <USBD_GetDescriptor+0x300>

    default:
      USBD_CtlError(pdev, req);
 8010c34:	6839      	ldr	r1, [r7, #0]
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f000 f9ee 	bl	8011018 <USBD_CtlError>
      err++;
 8010c3c:	7afb      	ldrb	r3, [r7, #11]
 8010c3e:	3301      	adds	r3, #1
 8010c40:	72fb      	strb	r3, [r7, #11]
      break;
 8010c42:	bf00      	nop
  }

  if (err != 0U)
 8010c44:	7afb      	ldrb	r3, [r7, #11]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d11e      	bne.n	8010c88 <USBD_GetDescriptor+0x344>
  {
    return;
  }

  if (req->wLength != 0U)
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	88db      	ldrh	r3, [r3, #6]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d016      	beq.n	8010c80 <USBD_GetDescriptor+0x33c>
  {
    if (len != 0U)
 8010c52:	893b      	ldrh	r3, [r7, #8]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d00e      	beq.n	8010c76 <USBD_GetDescriptor+0x332>
    {
      len = MIN(len, req->wLength);
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	88da      	ldrh	r2, [r3, #6]
 8010c5c:	893b      	ldrh	r3, [r7, #8]
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	bf28      	it	cs
 8010c62:	4613      	movcs	r3, r2
 8010c64:	b29b      	uxth	r3, r3
 8010c66:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010c68:	893b      	ldrh	r3, [r7, #8]
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	68f9      	ldr	r1, [r7, #12]
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f000 fa43 	bl	80110fa <USBD_CtlSendData>
 8010c74:	e009      	b.n	8010c8a <USBD_GetDescriptor+0x346>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010c76:	6839      	ldr	r1, [r7, #0]
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f000 f9cd 	bl	8011018 <USBD_CtlError>
 8010c7e:	e004      	b.n	8010c8a <USBD_GetDescriptor+0x346>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f000 fa94 	bl	80111ae <USBD_CtlSendStatus>
 8010c86:	e000      	b.n	8010c8a <USBD_GetDescriptor+0x346>
    return;
 8010c88:	bf00      	nop
  }
}
 8010c8a:	3710      	adds	r7, #16
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}

08010c90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b084      	sub	sp, #16
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
 8010c98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	889b      	ldrh	r3, [r3, #4]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d131      	bne.n	8010d06 <USBD_SetAddress+0x76>
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	88db      	ldrh	r3, [r3, #6]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d12d      	bne.n	8010d06 <USBD_SetAddress+0x76>
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	885b      	ldrh	r3, [r3, #2]
 8010cae:	2b7f      	cmp	r3, #127	@ 0x7f
 8010cb0:	d829      	bhi.n	8010d06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	885b      	ldrh	r3, [r3, #2]
 8010cb6:	b2db      	uxtb	r3, r3
 8010cb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010cbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010cc4:	b2db      	uxtb	r3, r3
 8010cc6:	2b03      	cmp	r3, #3
 8010cc8:	d104      	bne.n	8010cd4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010cca:	6839      	ldr	r1, [r7, #0]
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	f000 f9a3 	bl	8011018 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cd2:	e01d      	b.n	8010d10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	7bfa      	ldrb	r2, [r7, #15]
 8010cd8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010cdc:	7bfb      	ldrb	r3, [r7, #15]
 8010cde:	4619      	mov	r1, r3
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f000 fe4b 	bl	801197c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f000 fa61 	bl	80111ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010cec:	7bfb      	ldrb	r3, [r7, #15]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d004      	beq.n	8010cfc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	2202      	movs	r2, #2
 8010cf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cfa:	e009      	b.n	8010d10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2201      	movs	r2, #1
 8010d00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d04:	e004      	b.n	8010d10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010d06:	6839      	ldr	r1, [r7, #0]
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f000 f985 	bl	8011018 <USBD_CtlError>
  }
}
 8010d0e:	bf00      	nop
 8010d10:	bf00      	nop
 8010d12:	3710      	adds	r7, #16
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}

08010d18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b084      	sub	sp, #16
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
 8010d20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010d22:	2300      	movs	r3, #0
 8010d24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	885b      	ldrh	r3, [r3, #2]
 8010d2a:	b2da      	uxtb	r2, r3
 8010d2c:	4b4c      	ldr	r3, [pc, #304]	@ (8010e60 <USBD_SetConfig+0x148>)
 8010d2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010d30:	4b4b      	ldr	r3, [pc, #300]	@ (8010e60 <USBD_SetConfig+0x148>)
 8010d32:	781b      	ldrb	r3, [r3, #0]
 8010d34:	2b01      	cmp	r3, #1
 8010d36:	d905      	bls.n	8010d44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010d38:	6839      	ldr	r1, [r7, #0]
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f000 f96c 	bl	8011018 <USBD_CtlError>
    return USBD_FAIL;
 8010d40:	2303      	movs	r3, #3
 8010d42:	e088      	b.n	8010e56 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d4a:	b2db      	uxtb	r3, r3
 8010d4c:	2b02      	cmp	r3, #2
 8010d4e:	d002      	beq.n	8010d56 <USBD_SetConfig+0x3e>
 8010d50:	2b03      	cmp	r3, #3
 8010d52:	d025      	beq.n	8010da0 <USBD_SetConfig+0x88>
 8010d54:	e071      	b.n	8010e3a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010d56:	4b42      	ldr	r3, [pc, #264]	@ (8010e60 <USBD_SetConfig+0x148>)
 8010d58:	781b      	ldrb	r3, [r3, #0]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d01c      	beq.n	8010d98 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8010d5e:	4b40      	ldr	r3, [pc, #256]	@ (8010e60 <USBD_SetConfig+0x148>)
 8010d60:	781b      	ldrb	r3, [r3, #0]
 8010d62:	461a      	mov	r2, r3
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010d68:	4b3d      	ldr	r3, [pc, #244]	@ (8010e60 <USBD_SetConfig+0x148>)
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	4619      	mov	r1, r3
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f7ff f97f 	bl	8010072 <USBD_SetClassConfig>
 8010d74:	4603      	mov	r3, r0
 8010d76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010d78:	7bfb      	ldrb	r3, [r7, #15]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d004      	beq.n	8010d88 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8010d7e:	6839      	ldr	r1, [r7, #0]
 8010d80:	6878      	ldr	r0, [r7, #4]
 8010d82:	f000 f949 	bl	8011018 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010d86:	e065      	b.n	8010e54 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f000 fa10 	bl	80111ae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	2203      	movs	r2, #3
 8010d92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010d96:	e05d      	b.n	8010e54 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f000 fa08 	bl	80111ae <USBD_CtlSendStatus>
      break;
 8010d9e:	e059      	b.n	8010e54 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010da0:	4b2f      	ldr	r3, [pc, #188]	@ (8010e60 <USBD_SetConfig+0x148>)
 8010da2:	781b      	ldrb	r3, [r3, #0]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d112      	bne.n	8010dce <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2202      	movs	r2, #2
 8010dac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010db0:	4b2b      	ldr	r3, [pc, #172]	@ (8010e60 <USBD_SetConfig+0x148>)
 8010db2:	781b      	ldrb	r3, [r3, #0]
 8010db4:	461a      	mov	r2, r3
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010dba:	4b29      	ldr	r3, [pc, #164]	@ (8010e60 <USBD_SetConfig+0x148>)
 8010dbc:	781b      	ldrb	r3, [r3, #0]
 8010dbe:	4619      	mov	r1, r3
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f7ff f972 	bl	80100aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	f000 f9f1 	bl	80111ae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010dcc:	e042      	b.n	8010e54 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8010dce:	4b24      	ldr	r3, [pc, #144]	@ (8010e60 <USBD_SetConfig+0x148>)
 8010dd0:	781b      	ldrb	r3, [r3, #0]
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d02a      	beq.n	8010e32 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	685b      	ldr	r3, [r3, #4]
 8010de0:	b2db      	uxtb	r3, r3
 8010de2:	4619      	mov	r1, r3
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f7ff f960 	bl	80100aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010dea:	4b1d      	ldr	r3, [pc, #116]	@ (8010e60 <USBD_SetConfig+0x148>)
 8010dec:	781b      	ldrb	r3, [r3, #0]
 8010dee:	461a      	mov	r2, r3
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010df4:	4b1a      	ldr	r3, [pc, #104]	@ (8010e60 <USBD_SetConfig+0x148>)
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	4619      	mov	r1, r3
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	f7ff f939 	bl	8010072 <USBD_SetClassConfig>
 8010e00:	4603      	mov	r3, r0
 8010e02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010e04:	7bfb      	ldrb	r3, [r7, #15]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d00f      	beq.n	8010e2a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8010e0a:	6839      	ldr	r1, [r7, #0]
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f000 f903 	bl	8011018 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	685b      	ldr	r3, [r3, #4]
 8010e16:	b2db      	uxtb	r3, r3
 8010e18:	4619      	mov	r1, r3
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f7ff f945 	bl	80100aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2202      	movs	r2, #2
 8010e24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010e28:	e014      	b.n	8010e54 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	f000 f9bf 	bl	80111ae <USBD_CtlSendStatus>
      break;
 8010e30:	e010      	b.n	8010e54 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f000 f9bb 	bl	80111ae <USBD_CtlSendStatus>
      break;
 8010e38:	e00c      	b.n	8010e54 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010e3a:	6839      	ldr	r1, [r7, #0]
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f000 f8eb 	bl	8011018 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010e42:	4b07      	ldr	r3, [pc, #28]	@ (8010e60 <USBD_SetConfig+0x148>)
 8010e44:	781b      	ldrb	r3, [r3, #0]
 8010e46:	4619      	mov	r1, r3
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f7ff f92e 	bl	80100aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010e4e:	2303      	movs	r3, #3
 8010e50:	73fb      	strb	r3, [r7, #15]
      break;
 8010e52:	bf00      	nop
  }

  return ret;
 8010e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3710      	adds	r7, #16
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}
 8010e5e:	bf00      	nop
 8010e60:	200009f3 	.word	0x200009f3

08010e64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b082      	sub	sp, #8
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	88db      	ldrh	r3, [r3, #6]
 8010e72:	2b01      	cmp	r3, #1
 8010e74:	d004      	beq.n	8010e80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010e76:	6839      	ldr	r1, [r7, #0]
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f000 f8cd 	bl	8011018 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010e7e:	e023      	b.n	8010ec8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e86:	b2db      	uxtb	r3, r3
 8010e88:	2b02      	cmp	r3, #2
 8010e8a:	dc02      	bgt.n	8010e92 <USBD_GetConfig+0x2e>
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	dc03      	bgt.n	8010e98 <USBD_GetConfig+0x34>
 8010e90:	e015      	b.n	8010ebe <USBD_GetConfig+0x5a>
 8010e92:	2b03      	cmp	r3, #3
 8010e94:	d00b      	beq.n	8010eae <USBD_GetConfig+0x4a>
 8010e96:	e012      	b.n	8010ebe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	3308      	adds	r3, #8
 8010ea2:	2201      	movs	r2, #1
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f000 f927 	bl	80110fa <USBD_CtlSendData>
        break;
 8010eac:	e00c      	b.n	8010ec8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	3304      	adds	r3, #4
 8010eb2:	2201      	movs	r2, #1
 8010eb4:	4619      	mov	r1, r3
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f000 f91f 	bl	80110fa <USBD_CtlSendData>
        break;
 8010ebc:	e004      	b.n	8010ec8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010ebe:	6839      	ldr	r1, [r7, #0]
 8010ec0:	6878      	ldr	r0, [r7, #4]
 8010ec2:	f000 f8a9 	bl	8011018 <USBD_CtlError>
        break;
 8010ec6:	bf00      	nop
}
 8010ec8:	bf00      	nop
 8010eca:	3708      	adds	r7, #8
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}

08010ed0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b082      	sub	sp, #8
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
 8010ed8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ee0:	b2db      	uxtb	r3, r3
 8010ee2:	3b01      	subs	r3, #1
 8010ee4:	2b02      	cmp	r3, #2
 8010ee6:	d81e      	bhi.n	8010f26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	88db      	ldrh	r3, [r3, #6]
 8010eec:	2b02      	cmp	r3, #2
 8010eee:	d004      	beq.n	8010efa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010ef0:	6839      	ldr	r1, [r7, #0]
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	f000 f890 	bl	8011018 <USBD_CtlError>
        break;
 8010ef8:	e01a      	b.n	8010f30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2201      	movs	r2, #1
 8010efe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d005      	beq.n	8010f16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	68db      	ldr	r3, [r3, #12]
 8010f0e:	f043 0202 	orr.w	r2, r3, #2
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	330c      	adds	r3, #12
 8010f1a:	2202      	movs	r2, #2
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	6878      	ldr	r0, [r7, #4]
 8010f20:	f000 f8eb 	bl	80110fa <USBD_CtlSendData>
      break;
 8010f24:	e004      	b.n	8010f30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010f26:	6839      	ldr	r1, [r7, #0]
 8010f28:	6878      	ldr	r0, [r7, #4]
 8010f2a:	f000 f875 	bl	8011018 <USBD_CtlError>
      break;
 8010f2e:	bf00      	nop
  }
}
 8010f30:	bf00      	nop
 8010f32:	3708      	adds	r7, #8
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b082      	sub	sp, #8
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	885b      	ldrh	r3, [r3, #2]
 8010f46:	2b01      	cmp	r3, #1
 8010f48:	d106      	bne.n	8010f58 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2201      	movs	r2, #1
 8010f4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f000 f92b 	bl	80111ae <USBD_CtlSendStatus>
  }
}
 8010f58:	bf00      	nop
 8010f5a:	3708      	adds	r7, #8
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}

08010f60 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b082      	sub	sp, #8
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
 8010f68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f70:	b2db      	uxtb	r3, r3
 8010f72:	3b01      	subs	r3, #1
 8010f74:	2b02      	cmp	r3, #2
 8010f76:	d80b      	bhi.n	8010f90 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	885b      	ldrh	r3, [r3, #2]
 8010f7c:	2b01      	cmp	r3, #1
 8010f7e:	d10c      	bne.n	8010f9a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2200      	movs	r2, #0
 8010f84:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010f88:	6878      	ldr	r0, [r7, #4]
 8010f8a:	f000 f910 	bl	80111ae <USBD_CtlSendStatus>
      }
      break;
 8010f8e:	e004      	b.n	8010f9a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010f90:	6839      	ldr	r1, [r7, #0]
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f000 f840 	bl	8011018 <USBD_CtlError>
      break;
 8010f98:	e000      	b.n	8010f9c <USBD_ClrFeature+0x3c>
      break;
 8010f9a:	bf00      	nop
  }
}
 8010f9c:	bf00      	nop
 8010f9e:	3708      	adds	r7, #8
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}

08010fa4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b084      	sub	sp, #16
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	781a      	ldrb	r2, [r3, #0]
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	781a      	ldrb	r2, [r3, #0]
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	3301      	adds	r3, #1
 8010fcc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010fce:	68f8      	ldr	r0, [r7, #12]
 8010fd0:	f7ff fa7f 	bl	80104d2 <SWAPBYTE>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	3301      	adds	r3, #1
 8010fe0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	3301      	adds	r3, #1
 8010fe6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010fe8:	68f8      	ldr	r0, [r7, #12]
 8010fea:	f7ff fa72 	bl	80104d2 <SWAPBYTE>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	461a      	mov	r2, r3
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	3301      	adds	r3, #1
 8010ffa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	3301      	adds	r3, #1
 8011000:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011002:	68f8      	ldr	r0, [r7, #12]
 8011004:	f7ff fa65 	bl	80104d2 <SWAPBYTE>
 8011008:	4603      	mov	r3, r0
 801100a:	461a      	mov	r2, r3
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	80da      	strh	r2, [r3, #6]
}
 8011010:	bf00      	nop
 8011012:	3710      	adds	r7, #16
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}

08011018 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011022:	2180      	movs	r1, #128	@ 0x80
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f000 fc3f 	bl	80118a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801102a:	2100      	movs	r1, #0
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f000 fc3b 	bl	80118a8 <USBD_LL_StallEP>
}
 8011032:	bf00      	nop
 8011034:	3708      	adds	r7, #8
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}

0801103a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801103a:	b580      	push	{r7, lr}
 801103c:	b086      	sub	sp, #24
 801103e:	af00      	add	r7, sp, #0
 8011040:	60f8      	str	r0, [r7, #12]
 8011042:	60b9      	str	r1, [r7, #8]
 8011044:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011046:	2300      	movs	r3, #0
 8011048:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d036      	beq.n	80110be <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011054:	6938      	ldr	r0, [r7, #16]
 8011056:	f000 f836 	bl	80110c6 <USBD_GetLen>
 801105a:	4603      	mov	r3, r0
 801105c:	3301      	adds	r3, #1
 801105e:	b29b      	uxth	r3, r3
 8011060:	005b      	lsls	r3, r3, #1
 8011062:	b29a      	uxth	r2, r3
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011068:	7dfb      	ldrb	r3, [r7, #23]
 801106a:	68ba      	ldr	r2, [r7, #8]
 801106c:	4413      	add	r3, r2
 801106e:	687a      	ldr	r2, [r7, #4]
 8011070:	7812      	ldrb	r2, [r2, #0]
 8011072:	701a      	strb	r2, [r3, #0]
  idx++;
 8011074:	7dfb      	ldrb	r3, [r7, #23]
 8011076:	3301      	adds	r3, #1
 8011078:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801107a:	7dfb      	ldrb	r3, [r7, #23]
 801107c:	68ba      	ldr	r2, [r7, #8]
 801107e:	4413      	add	r3, r2
 8011080:	2203      	movs	r2, #3
 8011082:	701a      	strb	r2, [r3, #0]
  idx++;
 8011084:	7dfb      	ldrb	r3, [r7, #23]
 8011086:	3301      	adds	r3, #1
 8011088:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801108a:	e013      	b.n	80110b4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801108c:	7dfb      	ldrb	r3, [r7, #23]
 801108e:	68ba      	ldr	r2, [r7, #8]
 8011090:	4413      	add	r3, r2
 8011092:	693a      	ldr	r2, [r7, #16]
 8011094:	7812      	ldrb	r2, [r2, #0]
 8011096:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011098:	693b      	ldr	r3, [r7, #16]
 801109a:	3301      	adds	r3, #1
 801109c:	613b      	str	r3, [r7, #16]
    idx++;
 801109e:	7dfb      	ldrb	r3, [r7, #23]
 80110a0:	3301      	adds	r3, #1
 80110a2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80110a4:	7dfb      	ldrb	r3, [r7, #23]
 80110a6:	68ba      	ldr	r2, [r7, #8]
 80110a8:	4413      	add	r3, r2
 80110aa:	2200      	movs	r2, #0
 80110ac:	701a      	strb	r2, [r3, #0]
    idx++;
 80110ae:	7dfb      	ldrb	r3, [r7, #23]
 80110b0:	3301      	adds	r3, #1
 80110b2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80110b4:	693b      	ldr	r3, [r7, #16]
 80110b6:	781b      	ldrb	r3, [r3, #0]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d1e7      	bne.n	801108c <USBD_GetString+0x52>
 80110bc:	e000      	b.n	80110c0 <USBD_GetString+0x86>
    return;
 80110be:	bf00      	nop
  }
}
 80110c0:	3718      	adds	r7, #24
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}

080110c6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80110c6:	b480      	push	{r7}
 80110c8:	b085      	sub	sp, #20
 80110ca:	af00      	add	r7, sp, #0
 80110cc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80110ce:	2300      	movs	r3, #0
 80110d0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80110d6:	e005      	b.n	80110e4 <USBD_GetLen+0x1e>
  {
    len++;
 80110d8:	7bfb      	ldrb	r3, [r7, #15]
 80110da:	3301      	adds	r3, #1
 80110dc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80110de:	68bb      	ldr	r3, [r7, #8]
 80110e0:	3301      	adds	r3, #1
 80110e2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	781b      	ldrb	r3, [r3, #0]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d1f5      	bne.n	80110d8 <USBD_GetLen+0x12>
  }

  return len;
 80110ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80110ee:	4618      	mov	r0, r3
 80110f0:	3714      	adds	r7, #20
 80110f2:	46bd      	mov	sp, r7
 80110f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f8:	4770      	bx	lr

080110fa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80110fa:	b580      	push	{r7, lr}
 80110fc:	b084      	sub	sp, #16
 80110fe:	af00      	add	r7, sp, #0
 8011100:	60f8      	str	r0, [r7, #12]
 8011102:	60b9      	str	r1, [r7, #8]
 8011104:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	2202      	movs	r2, #2
 801110a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	687a      	ldr	r2, [r7, #4]
 8011112:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	687a      	ldr	r2, [r7, #4]
 8011118:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	68ba      	ldr	r2, [r7, #8]
 801111e:	2100      	movs	r1, #0
 8011120:	68f8      	ldr	r0, [r7, #12]
 8011122:	f000 fc4a 	bl	80119ba <USBD_LL_Transmit>

  return USBD_OK;
 8011126:	2300      	movs	r3, #0
}
 8011128:	4618      	mov	r0, r3
 801112a:	3710      	adds	r7, #16
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}

08011130 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b084      	sub	sp, #16
 8011134:	af00      	add	r7, sp, #0
 8011136:	60f8      	str	r0, [r7, #12]
 8011138:	60b9      	str	r1, [r7, #8]
 801113a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	68ba      	ldr	r2, [r7, #8]
 8011140:	2100      	movs	r1, #0
 8011142:	68f8      	ldr	r0, [r7, #12]
 8011144:	f000 fc39 	bl	80119ba <USBD_LL_Transmit>

  return USBD_OK;
 8011148:	2300      	movs	r3, #0
}
 801114a:	4618      	mov	r0, r3
 801114c:	3710      	adds	r7, #16
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}

08011152 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011152:	b580      	push	{r7, lr}
 8011154:	b084      	sub	sp, #16
 8011156:	af00      	add	r7, sp, #0
 8011158:	60f8      	str	r0, [r7, #12]
 801115a:	60b9      	str	r1, [r7, #8]
 801115c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	2203      	movs	r2, #3
 8011162:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	687a      	ldr	r2, [r7, #4]
 801116a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	687a      	ldr	r2, [r7, #4]
 8011172:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	68ba      	ldr	r2, [r7, #8]
 801117a:	2100      	movs	r1, #0
 801117c:	68f8      	ldr	r0, [r7, #12]
 801117e:	f000 fc3d 	bl	80119fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011182:	2300      	movs	r3, #0
}
 8011184:	4618      	mov	r0, r3
 8011186:	3710      	adds	r7, #16
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}

0801118c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b084      	sub	sp, #16
 8011190:	af00      	add	r7, sp, #0
 8011192:	60f8      	str	r0, [r7, #12]
 8011194:	60b9      	str	r1, [r7, #8]
 8011196:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	68ba      	ldr	r2, [r7, #8]
 801119c:	2100      	movs	r1, #0
 801119e:	68f8      	ldr	r0, [r7, #12]
 80111a0:	f000 fc2c 	bl	80119fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80111a4:	2300      	movs	r3, #0
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3710      	adds	r7, #16
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}

080111ae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80111ae:	b580      	push	{r7, lr}
 80111b0:	b082      	sub	sp, #8
 80111b2:	af00      	add	r7, sp, #0
 80111b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	2204      	movs	r2, #4
 80111ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80111be:	2300      	movs	r3, #0
 80111c0:	2200      	movs	r2, #0
 80111c2:	2100      	movs	r1, #0
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	f000 fbf8 	bl	80119ba <USBD_LL_Transmit>

  return USBD_OK;
 80111ca:	2300      	movs	r3, #0
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	3708      	adds	r7, #8
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}

080111d4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2205      	movs	r2, #5
 80111e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80111e4:	2300      	movs	r3, #0
 80111e6:	2200      	movs	r2, #0
 80111e8:	2100      	movs	r1, #0
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f000 fc06 	bl	80119fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80111f0:	2300      	movs	r3, #0
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	3708      	adds	r7, #8
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}
	...

080111fc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &DFU_Desc, DEVICE_FS) != USBD_OK) {
 8011200:	2200      	movs	r2, #0
 8011202:	4912      	ldr	r1, [pc, #72]	@ (801124c <MX_USB_Device_Init+0x50>)
 8011204:	4812      	ldr	r0, [pc, #72]	@ (8011250 <MX_USB_Device_Init+0x54>)
 8011206:	f7fe feab 	bl	800ff60 <USBD_Init>
 801120a:	4603      	mov	r3, r0
 801120c:	2b00      	cmp	r3, #0
 801120e:	d001      	beq.n	8011214 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8011210:	f7f1 f830 	bl	8002274 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 8011214:	490f      	ldr	r1, [pc, #60]	@ (8011254 <MX_USB_Device_Init+0x58>)
 8011216:	480e      	ldr	r0, [pc, #56]	@ (8011250 <MX_USB_Device_Init+0x54>)
 8011218:	f7fe fed2 	bl	800ffc0 <USBD_RegisterClass>
 801121c:	4603      	mov	r3, r0
 801121e:	2b00      	cmp	r3, #0
 8011220:	d001      	beq.n	8011226 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8011222:	f7f1 f827 	bl	8002274 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_Flash_fops) != USBD_OK) {
 8011226:	490c      	ldr	r1, [pc, #48]	@ (8011258 <MX_USB_Device_Init+0x5c>)
 8011228:	4809      	ldr	r0, [pc, #36]	@ (8011250 <MX_USB_Device_Init+0x54>)
 801122a:	f7fe fb17 	bl	800f85c <USBD_DFU_RegisterMedia>
 801122e:	4603      	mov	r3, r0
 8011230:	2b00      	cmp	r3, #0
 8011232:	d001      	beq.n	8011238 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8011234:	f7f1 f81e 	bl	8002274 <Error_Handler>
  }
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  if (USBD_LL_BatterryCharging(&hUsbDeviceFS) != USBD_OK) {
 8011238:	4805      	ldr	r0, [pc, #20]	@ (8011250 <MX_USB_Device_Init+0x54>)
 801123a:	f000 fc01 	bl	8011a40 <USBD_LL_BatterryCharging>
 801123e:	4603      	mov	r3, r0
 8011240:	2b00      	cmp	r3, #0
 8011242:	d001      	beq.n	8011248 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011244:	f7f1 f816 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011248:	bf00      	nop
 801124a:	bd80      	pop	{r7, pc}
 801124c:	20000070 	.word	0x20000070
 8011250:	200009f4 	.word	0x200009f4
 8011254:	2000000c 	.word	0x2000000c
 8011258:	200000c4 	.word	0x200000c4

0801125c <USBD_DFU_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801125c:	b480      	push	{r7}
 801125e:	b083      	sub	sp, #12
 8011260:	af00      	add	r7, sp, #0
 8011262:	4603      	mov	r3, r0
 8011264:	6039      	str	r1, [r7, #0]
 8011266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DFU_DeviceDesc);
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	2212      	movs	r2, #18
 801126c:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceDesc;
 801126e:	4b03      	ldr	r3, [pc, #12]	@ (801127c <USBD_DFU_DeviceDescriptor+0x20>)
}
 8011270:	4618      	mov	r0, r3
 8011272:	370c      	adds	r7, #12
 8011274:	46bd      	mov	sp, r7
 8011276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127a:	4770      	bx	lr
 801127c:	20000090 	.word	0x20000090

08011280 <USBD_DFU_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011280:	b480      	push	{r7}
 8011282:	b083      	sub	sp, #12
 8011284:	af00      	add	r7, sp, #0
 8011286:	4603      	mov	r3, r0
 8011288:	6039      	str	r1, [r7, #0]
 801128a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	2204      	movs	r2, #4
 8011290:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011292:	4b03      	ldr	r3, [pc, #12]	@ (80112a0 <USBD_DFU_LangIDStrDescriptor+0x20>)
}
 8011294:	4618      	mov	r0, r3
 8011296:	370c      	adds	r7, #12
 8011298:	46bd      	mov	sp, r7
 801129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129e:	4770      	bx	lr
 80112a0:	200000a4 	.word	0x200000a4

080112a4 <USBD_DFU_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b082      	sub	sp, #8
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	4603      	mov	r3, r0
 80112ac:	6039      	str	r1, [r7, #0]
 80112ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80112b0:	79fb      	ldrb	r3, [r7, #7]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d105      	bne.n	80112c2 <USBD_DFU_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80112b6:	683a      	ldr	r2, [r7, #0]
 80112b8:	4907      	ldr	r1, [pc, #28]	@ (80112d8 <USBD_DFU_ProductStrDescriptor+0x34>)
 80112ba:	4808      	ldr	r0, [pc, #32]	@ (80112dc <USBD_DFU_ProductStrDescriptor+0x38>)
 80112bc:	f7ff febd 	bl	801103a <USBD_GetString>
 80112c0:	e004      	b.n	80112cc <USBD_DFU_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80112c2:	683a      	ldr	r2, [r7, #0]
 80112c4:	4904      	ldr	r1, [pc, #16]	@ (80112d8 <USBD_DFU_ProductStrDescriptor+0x34>)
 80112c6:	4805      	ldr	r0, [pc, #20]	@ (80112dc <USBD_DFU_ProductStrDescriptor+0x38>)
 80112c8:	f7ff feb7 	bl	801103a <USBD_GetString>
  }
  return USBD_StrDesc;
 80112cc:	4b02      	ldr	r3, [pc, #8]	@ (80112d8 <USBD_DFU_ProductStrDescriptor+0x34>)
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3708      	adds	r7, #8
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}
 80112d6:	bf00      	nop
 80112d8:	20000cc4 	.word	0x20000cc4
 80112dc:	080157fc 	.word	0x080157fc

080112e0 <USBD_DFU_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b082      	sub	sp, #8
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	4603      	mov	r3, r0
 80112e8:	6039      	str	r1, [r7, #0]
 80112ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80112ec:	683a      	ldr	r2, [r7, #0]
 80112ee:	4904      	ldr	r1, [pc, #16]	@ (8011300 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
 80112f0:	4804      	ldr	r0, [pc, #16]	@ (8011304 <USBD_DFU_ManufacturerStrDescriptor+0x24>)
 80112f2:	f7ff fea2 	bl	801103a <USBD_GetString>
  return USBD_StrDesc;
 80112f6:	4b02      	ldr	r3, [pc, #8]	@ (8011300 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	3708      	adds	r7, #8
 80112fc:	46bd      	mov	sp, r7
 80112fe:	bd80      	pop	{r7, pc}
 8011300:	20000cc4 	.word	0x20000cc4
 8011304:	0801581c 	.word	0x0801581c

08011308 <USBD_DFU_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b082      	sub	sp, #8
 801130c:	af00      	add	r7, sp, #0
 801130e:	4603      	mov	r3, r0
 8011310:	6039      	str	r1, [r7, #0]
 8011312:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	221a      	movs	r2, #26
 8011318:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801131a:	f000 f843 	bl	80113a4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_DFU_SerialStrDescriptor */

  /* USER CODE END USBD_DFU_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801131e:	4b02      	ldr	r3, [pc, #8]	@ (8011328 <USBD_DFU_SerialStrDescriptor+0x20>)
}
 8011320:	4618      	mov	r0, r3
 8011322:	3708      	adds	r7, #8
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}
 8011328:	200000a8 	.word	0x200000a8

0801132c <USBD_DFU_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b082      	sub	sp, #8
 8011330:	af00      	add	r7, sp, #0
 8011332:	4603      	mov	r3, r0
 8011334:	6039      	str	r1, [r7, #0]
 8011336:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011338:	79fb      	ldrb	r3, [r7, #7]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d105      	bne.n	801134a <USBD_DFU_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801133e:	683a      	ldr	r2, [r7, #0]
 8011340:	4907      	ldr	r1, [pc, #28]	@ (8011360 <USBD_DFU_ConfigStrDescriptor+0x34>)
 8011342:	4808      	ldr	r0, [pc, #32]	@ (8011364 <USBD_DFU_ConfigStrDescriptor+0x38>)
 8011344:	f7ff fe79 	bl	801103a <USBD_GetString>
 8011348:	e004      	b.n	8011354 <USBD_DFU_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801134a:	683a      	ldr	r2, [r7, #0]
 801134c:	4904      	ldr	r1, [pc, #16]	@ (8011360 <USBD_DFU_ConfigStrDescriptor+0x34>)
 801134e:	4805      	ldr	r0, [pc, #20]	@ (8011364 <USBD_DFU_ConfigStrDescriptor+0x38>)
 8011350:	f7ff fe73 	bl	801103a <USBD_GetString>
  }
  return USBD_StrDesc;
 8011354:	4b02      	ldr	r3, [pc, #8]	@ (8011360 <USBD_DFU_ConfigStrDescriptor+0x34>)
}
 8011356:	4618      	mov	r0, r3
 8011358:	3708      	adds	r7, #8
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}
 801135e:	bf00      	nop
 8011360:	20000cc4 	.word	0x20000cc4
 8011364:	08015830 	.word	0x08015830

08011368 <USBD_DFU_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b082      	sub	sp, #8
 801136c:	af00      	add	r7, sp, #0
 801136e:	4603      	mov	r3, r0
 8011370:	6039      	str	r1, [r7, #0]
 8011372:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011374:	79fb      	ldrb	r3, [r7, #7]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d105      	bne.n	8011386 <USBD_DFU_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801137a:	683a      	ldr	r2, [r7, #0]
 801137c:	4907      	ldr	r1, [pc, #28]	@ (801139c <USBD_DFU_InterfaceStrDescriptor+0x34>)
 801137e:	4808      	ldr	r0, [pc, #32]	@ (80113a0 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 8011380:	f7ff fe5b 	bl	801103a <USBD_GetString>
 8011384:	e004      	b.n	8011390 <USBD_DFU_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011386:	683a      	ldr	r2, [r7, #0]
 8011388:	4904      	ldr	r1, [pc, #16]	@ (801139c <USBD_DFU_InterfaceStrDescriptor+0x34>)
 801138a:	4805      	ldr	r0, [pc, #20]	@ (80113a0 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 801138c:	f7ff fe55 	bl	801103a <USBD_GetString>
  }
  return USBD_StrDesc;
 8011390:	4b02      	ldr	r3, [pc, #8]	@ (801139c <USBD_DFU_InterfaceStrDescriptor+0x34>)
}
 8011392:	4618      	mov	r0, r3
 8011394:	3708      	adds	r7, #8
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}
 801139a:	bf00      	nop
 801139c:	20000cc4 	.word	0x20000cc4
 80113a0:	0801583c 	.word	0x0801583c

080113a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b084      	sub	sp, #16
 80113a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80113aa:	4b0f      	ldr	r3, [pc, #60]	@ (80113e8 <Get_SerialNum+0x44>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80113b0:	4b0e      	ldr	r3, [pc, #56]	@ (80113ec <Get_SerialNum+0x48>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80113b6:	4b0e      	ldr	r3, [pc, #56]	@ (80113f0 <Get_SerialNum+0x4c>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80113bc:	68fa      	ldr	r2, [r7, #12]
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	4413      	add	r3, r2
 80113c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d009      	beq.n	80113de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80113ca:	2208      	movs	r2, #8
 80113cc:	4909      	ldr	r1, [pc, #36]	@ (80113f4 <Get_SerialNum+0x50>)
 80113ce:	68f8      	ldr	r0, [r7, #12]
 80113d0:	f000 f814 	bl	80113fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80113d4:	2204      	movs	r2, #4
 80113d6:	4908      	ldr	r1, [pc, #32]	@ (80113f8 <Get_SerialNum+0x54>)
 80113d8:	68b8      	ldr	r0, [r7, #8]
 80113da:	f000 f80f 	bl	80113fc <IntToUnicode>
  }
}
 80113de:	bf00      	nop
 80113e0:	3710      	adds	r7, #16
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}
 80113e6:	bf00      	nop
 80113e8:	1fff7590 	.word	0x1fff7590
 80113ec:	1fff7594 	.word	0x1fff7594
 80113f0:	1fff7598 	.word	0x1fff7598
 80113f4:	200000aa 	.word	0x200000aa
 80113f8:	200000ba 	.word	0x200000ba

080113fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80113fc:	b480      	push	{r7}
 80113fe:	b087      	sub	sp, #28
 8011400:	af00      	add	r7, sp, #0
 8011402:	60f8      	str	r0, [r7, #12]
 8011404:	60b9      	str	r1, [r7, #8]
 8011406:	4613      	mov	r3, r2
 8011408:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801140a:	2300      	movs	r3, #0
 801140c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801140e:	2300      	movs	r3, #0
 8011410:	75fb      	strb	r3, [r7, #23]
 8011412:	e027      	b.n	8011464 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	0f1b      	lsrs	r3, r3, #28
 8011418:	2b09      	cmp	r3, #9
 801141a:	d80b      	bhi.n	8011434 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	0f1b      	lsrs	r3, r3, #28
 8011420:	b2da      	uxtb	r2, r3
 8011422:	7dfb      	ldrb	r3, [r7, #23]
 8011424:	005b      	lsls	r3, r3, #1
 8011426:	4619      	mov	r1, r3
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	440b      	add	r3, r1
 801142c:	3230      	adds	r2, #48	@ 0x30
 801142e:	b2d2      	uxtb	r2, r2
 8011430:	701a      	strb	r2, [r3, #0]
 8011432:	e00a      	b.n	801144a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	0f1b      	lsrs	r3, r3, #28
 8011438:	b2da      	uxtb	r2, r3
 801143a:	7dfb      	ldrb	r3, [r7, #23]
 801143c:	005b      	lsls	r3, r3, #1
 801143e:	4619      	mov	r1, r3
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	440b      	add	r3, r1
 8011444:	3237      	adds	r2, #55	@ 0x37
 8011446:	b2d2      	uxtb	r2, r2
 8011448:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	011b      	lsls	r3, r3, #4
 801144e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011450:	7dfb      	ldrb	r3, [r7, #23]
 8011452:	005b      	lsls	r3, r3, #1
 8011454:	3301      	adds	r3, #1
 8011456:	68ba      	ldr	r2, [r7, #8]
 8011458:	4413      	add	r3, r2
 801145a:	2200      	movs	r2, #0
 801145c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801145e:	7dfb      	ldrb	r3, [r7, #23]
 8011460:	3301      	adds	r3, #1
 8011462:	75fb      	strb	r3, [r7, #23]
 8011464:	7dfa      	ldrb	r2, [r7, #23]
 8011466:	79fb      	ldrb	r3, [r7, #7]
 8011468:	429a      	cmp	r2, r3
 801146a:	d3d3      	bcc.n	8011414 <IntToUnicode+0x18>
  }
}
 801146c:	bf00      	nop
 801146e:	bf00      	nop
 8011470:	371c      	adds	r7, #28
 8011472:	46bd      	mov	sp, r7
 8011474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011478:	4770      	bx	lr

0801147a <FLASH_If_Init>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Init(void)
{
 801147a:	b480      	push	{r7}
 801147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 801147e:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8011480:	4618      	mov	r0, r3
 8011482:	46bd      	mov	sp, r7
 8011484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011488:	4770      	bx	lr

0801148a <FLASH_If_DeInit>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t FLASH_If_DeInit(void)
{
 801148a:	b480      	push	{r7}
 801148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 801148e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8011490:	4618      	mov	r0, r3
 8011492:	46bd      	mov	sp, r7
 8011494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011498:	4770      	bx	lr

0801149a <FLASH_If_Erase>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Erase(uint32_t Add)
{
 801149a:	b480      	push	{r7}
 801149c:	b083      	sub	sp, #12
 801149e:	af00      	add	r7, sp, #0
 80114a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 80114a2:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	370c      	adds	r7, #12
 80114a8:	46bd      	mov	sp, r7
 80114aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ae:	4770      	bx	lr

080114b0 <FLASH_If_Write>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80114b0:	b480      	push	{r7}
 80114b2:	b085      	sub	sp, #20
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	60f8      	str	r0, [r7, #12]
 80114b8:	60b9      	str	r1, [r7, #8]
 80114ba:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 80114bc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80114be:	4618      	mov	r0, r3
 80114c0:	3714      	adds	r7, #20
 80114c2:	46bd      	mov	sp, r7
 80114c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c8:	4770      	bx	lr

080114ca <FLASH_If_Read>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *FLASH_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80114ca:	b480      	push	{r7}
 80114cc:	b085      	sub	sp, #20
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	60f8      	str	r0, [r7, #12]
 80114d2:	60b9      	str	r1, [r7, #8]
 80114d4:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(FLASH_BASE);
 80114d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  /* USER CODE END 4 */
}
 80114da:	4618      	mov	r0, r3
 80114dc:	3714      	adds	r7, #20
 80114de:	46bd      	mov	sp, r7
 80114e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e4:	4770      	bx	lr

080114e6 <FLASH_If_GetStatus>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t FLASH_If_GetStatus(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 80114e6:	b480      	push	{r7}
 80114e8:	b085      	sub	sp, #20
 80114ea:	af00      	add	r7, sp, #0
 80114ec:	60f8      	str	r0, [r7, #12]
 80114ee:	460b      	mov	r3, r1
 80114f0:	607a      	str	r2, [r7, #4]
 80114f2:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 80114f4:	7afb      	ldrb	r3, [r7, #11]
 80114f6:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 80114f8:	bf00      	nop
  }
  return (USBD_OK);
 80114fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80114fc:	4618      	mov	r0, r3
 80114fe:	3714      	adds	r7, #20
 8011500:	46bd      	mov	sp, r7
 8011502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011506:	4770      	bx	lr

08011508 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b098      	sub	sp, #96	@ 0x60
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011510:	f107 0310 	add.w	r3, r7, #16
 8011514:	2250      	movs	r2, #80	@ 0x50
 8011516:	2100      	movs	r1, #0
 8011518:	4618      	mov	r0, r3
 801151a:	f001 f935 	bl	8012788 <memset>
  if(pcdHandle->Instance==USB)
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	4a15      	ldr	r2, [pc, #84]	@ (8011578 <HAL_PCD_MspInit+0x70>)
 8011524:	4293      	cmp	r3, r2
 8011526:	d122      	bne.n	801156e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011528:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801152c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801152e:	2300      	movs	r3, #0
 8011530:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011532:	f107 0310 	add.w	r3, r7, #16
 8011536:	4618      	mov	r0, r3
 8011538:	f7f7 feae 	bl	8009298 <HAL_RCCEx_PeriphCLKConfig>
 801153c:	4603      	mov	r3, r0
 801153e:	2b00      	cmp	r3, #0
 8011540:	d001      	beq.n	8011546 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8011542:	f7f0 fe97 	bl	8002274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011546:	4b0d      	ldr	r3, [pc, #52]	@ (801157c <HAL_PCD_MspInit+0x74>)
 8011548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801154a:	4a0c      	ldr	r2, [pc, #48]	@ (801157c <HAL_PCD_MspInit+0x74>)
 801154c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8011550:	6593      	str	r3, [r2, #88]	@ 0x58
 8011552:	4b0a      	ldr	r3, [pc, #40]	@ (801157c <HAL_PCD_MspInit+0x74>)
 8011554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011556:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801155a:	60fb      	str	r3, [r7, #12]
 801155c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801155e:	2200      	movs	r2, #0
 8011560:	2100      	movs	r1, #0
 8011562:	2014      	movs	r0, #20
 8011564:	f7f4 f856 	bl	8005614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8011568:	2014      	movs	r0, #20
 801156a:	f7f4 f86d 	bl	8005648 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801156e:	bf00      	nop
 8011570:	3760      	adds	r7, #96	@ 0x60
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}
 8011576:	bf00      	nop
 8011578:	40005c00 	.word	0x40005c00
 801157c:	40021000 	.word	0x40021000

08011580 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b082      	sub	sp, #8
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8011594:	4619      	mov	r1, r3
 8011596:	4610      	mov	r0, r2
 8011598:	f7fe fd9f 	bl	80100da <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 801159c:	bf00      	nop
 801159e:	3708      	adds	r7, #8
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd80      	pop	{r7, pc}

080115a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b082      	sub	sp, #8
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
 80115ac:	460b      	mov	r3, r1
 80115ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80115b6:	78fa      	ldrb	r2, [r7, #3]
 80115b8:	6879      	ldr	r1, [r7, #4]
 80115ba:	4613      	mov	r3, r2
 80115bc:	009b      	lsls	r3, r3, #2
 80115be:	4413      	add	r3, r2
 80115c0:	00db      	lsls	r3, r3, #3
 80115c2:	440b      	add	r3, r1
 80115c4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	78fb      	ldrb	r3, [r7, #3]
 80115cc:	4619      	mov	r1, r3
 80115ce:	f7fe fdd9 	bl	8010184 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80115d2:	bf00      	nop
 80115d4:	3708      	adds	r7, #8
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}

080115da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115da:	b580      	push	{r7, lr}
 80115dc:	b082      	sub	sp, #8
 80115de:	af00      	add	r7, sp, #0
 80115e0:	6078      	str	r0, [r7, #4]
 80115e2:	460b      	mov	r3, r1
 80115e4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80115ec:	78fa      	ldrb	r2, [r7, #3]
 80115ee:	6879      	ldr	r1, [r7, #4]
 80115f0:	4613      	mov	r3, r2
 80115f2:	009b      	lsls	r3, r3, #2
 80115f4:	4413      	add	r3, r2
 80115f6:	00db      	lsls	r3, r3, #3
 80115f8:	440b      	add	r3, r1
 80115fa:	3324      	adds	r3, #36	@ 0x24
 80115fc:	681a      	ldr	r2, [r3, #0]
 80115fe:	78fb      	ldrb	r3, [r7, #3]
 8011600:	4619      	mov	r1, r3
 8011602:	f7fe fe22 	bl	801024a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8011606:	bf00      	nop
 8011608:	3708      	adds	r7, #8
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}

0801160e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801160e:	b580      	push	{r7, lr}
 8011610:	b082      	sub	sp, #8
 8011612:	af00      	add	r7, sp, #0
 8011614:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801161c:	4618      	mov	r0, r3
 801161e:	f7fe ff36 	bl	801048e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8011622:	bf00      	nop
 8011624:	3708      	adds	r7, #8
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}

0801162a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801162a:	b580      	push	{r7, lr}
 801162c:	b084      	sub	sp, #16
 801162e:	af00      	add	r7, sp, #0
 8011630:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011632:	2301      	movs	r3, #1
 8011634:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	795b      	ldrb	r3, [r3, #5]
 801163a:	2b02      	cmp	r3, #2
 801163c:	d001      	beq.n	8011642 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801163e:	f7f0 fe19 	bl	8002274 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011648:	7bfa      	ldrb	r2, [r7, #15]
 801164a:	4611      	mov	r1, r2
 801164c:	4618      	mov	r0, r3
 801164e:	f7fe fee0 	bl	8010412 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011658:	4618      	mov	r0, r3
 801165a:	f7fe fe8c 	bl	8010376 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801165e:	bf00      	nop
 8011660:	3710      	adds	r7, #16
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}
	...

08011668 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b082      	sub	sp, #8
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011676:	4618      	mov	r0, r3
 8011678:	f7fe fedb 	bl	8010432 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	7a5b      	ldrb	r3, [r3, #9]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d005      	beq.n	8011690 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011684:	4b04      	ldr	r3, [pc, #16]	@ (8011698 <HAL_PCD_SuspendCallback+0x30>)
 8011686:	691b      	ldr	r3, [r3, #16]
 8011688:	4a03      	ldr	r2, [pc, #12]	@ (8011698 <HAL_PCD_SuspendCallback+0x30>)
 801168a:	f043 0306 	orr.w	r3, r3, #6
 801168e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8011690:	bf00      	nop
 8011692:	3708      	adds	r7, #8
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}
 8011698:	e000ed00 	.word	0xe000ed00

0801169c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b082      	sub	sp, #8
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	7a5b      	ldrb	r3, [r3, #9]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d007      	beq.n	80116bc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80116ac:	4b08      	ldr	r3, [pc, #32]	@ (80116d0 <HAL_PCD_ResumeCallback+0x34>)
 80116ae:	691b      	ldr	r3, [r3, #16]
 80116b0:	4a07      	ldr	r2, [pc, #28]	@ (80116d0 <HAL_PCD_ResumeCallback+0x34>)
 80116b2:	f023 0306 	bic.w	r3, r3, #6
 80116b6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80116b8:	f000 fa32 	bl	8011b20 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80116c2:	4618      	mov	r0, r3
 80116c4:	f7fe fecb 	bl	801045e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80116c8:	bf00      	nop
 80116ca:	3708      	adds	r7, #8
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}
 80116d0:	e000ed00 	.word	0xe000ed00

080116d4 <HAL_PCDEx_BCD_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_BCDCallback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
#else
void HAL_PCDEx_BCD_Callback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b082      	sub	sp, #8
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
 80116dc:	460b      	mov	r3, r1
 80116de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCDEx_BCD_Callback_PreTreatment */

  /* USER CODE END HAL_PCDEx_BCD_Callback_PreTreatment */
  switch(msg)
 80116e0:	78fb      	ldrb	r3, [r7, #3]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d026      	beq.n	8011734 <HAL_PCDEx_BCD_Callback+0x60>
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	db34      	blt.n	8011754 <HAL_PCDEx_BCD_Callback+0x80>
 80116ea:	2bff      	cmp	r3, #255	@ 0xff
 80116ec:	dc32      	bgt.n	8011754 <HAL_PCDEx_BCD_Callback+0x80>
 80116ee:	2bfb      	cmp	r3, #251	@ 0xfb
 80116f0:	db30      	blt.n	8011754 <HAL_PCDEx_BCD_Callback+0x80>
 80116f2:	3bfb      	subs	r3, #251	@ 0xfb
 80116f4:	2b04      	cmp	r3, #4
 80116f6:	d82d      	bhi.n	8011754 <HAL_PCDEx_BCD_Callback+0x80>
 80116f8:	a201      	add	r2, pc, #4	@ (adr r2, 8011700 <HAL_PCDEx_BCD_Callback+0x2c>)
 80116fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116fe:	bf00      	nop
 8011700:	0801172d 	.word	0x0801172d
 8011704:	08011725 	.word	0x08011725
 8011708:	0801171d 	.word	0x0801171d
 801170c:	08011715 	.word	0x08011715
 8011710:	0801174f 	.word	0x0801174f
  {
    case PCD_BCD_CONTACT_DETECTION:
      USBD_BCD_PortState = USB_BCD_CONTACT_DETECTION;
 8011714:	4b12      	ldr	r3, [pc, #72]	@ (8011760 <HAL_PCDEx_BCD_Callback+0x8c>)
 8011716:	22fe      	movs	r2, #254	@ 0xfe
 8011718:	701a      	strb	r2, [r3, #0]
    break;
 801171a:	e01c      	b.n	8011756 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_STD_DOWNSTREAM_PORT:
      USBD_BCD_PortState = USB_BCD_STD_DOWNSTREAM_PORT;
 801171c:	4b10      	ldr	r3, [pc, #64]	@ (8011760 <HAL_PCDEx_BCD_Callback+0x8c>)
 801171e:	22fd      	movs	r2, #253	@ 0xfd
 8011720:	701a      	strb	r2, [r3, #0]
    break;
 8011722:	e018      	b.n	8011756 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_CHARGING_DOWNSTREAM_PORT:
      USBD_BCD_PortState = USB_BCD_CHARGING_DOWNSTREAM_PORT;
 8011724:	4b0e      	ldr	r3, [pc, #56]	@ (8011760 <HAL_PCDEx_BCD_Callback+0x8c>)
 8011726:	22fc      	movs	r2, #252	@ 0xfc
 8011728:	701a      	strb	r2, [r3, #0]
    break;
 801172a:	e014      	b.n	8011756 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_DEDICATED_CHARGING_PORT:
      USBD_BCD_PortState = USB_BCD_DEDICATED_CHARGING_PORT;
 801172c:	4b0c      	ldr	r3, [pc, #48]	@ (8011760 <HAL_PCDEx_BCD_Callback+0x8c>)
 801172e:	22fb      	movs	r2, #251	@ 0xfb
 8011730:	701a      	strb	r2, [r3, #0]
    break;
 8011732:	e010      	b.n	8011756 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_DISCOVERY_COMPLETED:
      HAL_Delay(20);
 8011734:	2014      	movs	r0, #20
 8011736:	f7f2 fd7f 	bl	8004238 <HAL_Delay>
      /* Start USB */
      USBD_Start(hpcd->pData);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011740:	4618      	mov	r0, r3
 8011742:	f7fe fc64 	bl	801000e <USBD_Start>
      USBD_BCD_PortState = USB_BCD_DISCOVERY_COMPLETED;
 8011746:	4b06      	ldr	r3, [pc, #24]	@ (8011760 <HAL_PCDEx_BCD_Callback+0x8c>)
 8011748:	22fa      	movs	r2, #250	@ 0xfa
 801174a:	701a      	strb	r2, [r3, #0]
    break;
 801174c:	e003      	b.n	8011756 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_ERROR:
      Error_Handler();
 801174e:	f7f0 fd91 	bl	8002274 <Error_Handler>
    break;
 8011752:	e000      	b.n	8011756 <HAL_PCDEx_BCD_Callback+0x82>

    default:
    break;
 8011754:	bf00      	nop
  }
  /* USER CODE BEGIN HAL_PCDEx_BCD_Callback_PostTreatment */

  /* USER CODE END HAL_PCDEx_BCD_Callback_PostTreatment */
}
 8011756:	bf00      	nop
 8011758:	3708      	adds	r7, #8
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}
 801175e:	bf00      	nop
 8011760:	20000ec4 	.word	0x20000ec4

08011764 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b082      	sub	sp, #8
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 801176c:	4a1e      	ldr	r2, [pc, #120]	@ (80117e8 <USBD_LL_Init+0x84>)
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	4a1c      	ldr	r2, [pc, #112]	@ (80117e8 <USBD_LL_Init+0x84>)
 8011778:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 801177c:	4b1a      	ldr	r3, [pc, #104]	@ (80117e8 <USBD_LL_Init+0x84>)
 801177e:	4a1b      	ldr	r2, [pc, #108]	@ (80117ec <USBD_LL_Init+0x88>)
 8011780:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011782:	4b19      	ldr	r3, [pc, #100]	@ (80117e8 <USBD_LL_Init+0x84>)
 8011784:	2208      	movs	r2, #8
 8011786:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011788:	4b17      	ldr	r3, [pc, #92]	@ (80117e8 <USBD_LL_Init+0x84>)
 801178a:	2202      	movs	r2, #2
 801178c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801178e:	4b16      	ldr	r3, [pc, #88]	@ (80117e8 <USBD_LL_Init+0x84>)
 8011790:	2202      	movs	r2, #2
 8011792:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8011794:	4b14      	ldr	r3, [pc, #80]	@ (80117e8 <USBD_LL_Init+0x84>)
 8011796:	2200      	movs	r2, #0
 8011798:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801179a:	4b13      	ldr	r3, [pc, #76]	@ (80117e8 <USBD_LL_Init+0x84>)
 801179c:	2200      	movs	r2, #0
 801179e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80117a0:	4b11      	ldr	r3, [pc, #68]	@ (80117e8 <USBD_LL_Init+0x84>)
 80117a2:	2200      	movs	r2, #0
 80117a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = ENABLE;
 80117a6:	4b10      	ldr	r3, [pc, #64]	@ (80117e8 <USBD_LL_Init+0x84>)
 80117a8:	2201      	movs	r2, #1
 80117aa:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80117ac:	480e      	ldr	r0, [pc, #56]	@ (80117e8 <USBD_LL_Init+0x84>)
 80117ae:	f7f5 f8ec 	bl	800698a <HAL_PCD_Init>
 80117b2:	4603      	mov	r3, r0
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d001      	beq.n	80117bc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80117b8:	f7f0 fd5c 	bl	8002274 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80117c2:	2318      	movs	r3, #24
 80117c4:	2200      	movs	r2, #0
 80117c6:	2100      	movs	r1, #0
 80117c8:	f7f6 fd35 	bl	8008236 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80117d2:	2358      	movs	r3, #88	@ 0x58
 80117d4:	2200      	movs	r2, #0
 80117d6:	2180      	movs	r1, #128	@ 0x80
 80117d8:	f7f6 fd2d 	bl	8008236 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 80117dc:	2300      	movs	r3, #0
}
 80117de:	4618      	mov	r0, r3
 80117e0:	3708      	adds	r7, #8
 80117e2:	46bd      	mov	sp, r7
 80117e4:	bd80      	pop	{r7, pc}
 80117e6:	bf00      	nop
 80117e8:	20000ec8 	.word	0x20000ec8
 80117ec:	40005c00 	.word	0x40005c00

080117f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b084      	sub	sp, #16
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117f8:	2300      	movs	r3, #0
 80117fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117fc:	2300      	movs	r3, #0
 80117fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011806:	4618      	mov	r0, r3
 8011808:	f7f5 f98d 	bl	8006b26 <HAL_PCD_Start>
 801180c:	4603      	mov	r3, r0
 801180e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011810:	7bfb      	ldrb	r3, [r7, #15]
 8011812:	4618      	mov	r0, r3
 8011814:	f000 f98a 	bl	8011b2c <USBD_Get_USB_Status>
 8011818:	4603      	mov	r3, r0
 801181a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801181c:	7bbb      	ldrb	r3, [r7, #14]
}
 801181e:	4618      	mov	r0, r3
 8011820:	3710      	adds	r7, #16
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}

08011826 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8011826:	b580      	push	{r7, lr}
 8011828:	b084      	sub	sp, #16
 801182a:	af00      	add	r7, sp, #0
 801182c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801182e:	2300      	movs	r3, #0
 8011830:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011832:	2300      	movs	r3, #0
 8011834:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801183c:	4618      	mov	r0, r3
 801183e:	f7f5 f994 	bl	8006b6a <HAL_PCD_Stop>
 8011842:	4603      	mov	r3, r0
 8011844:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011846:	7bfb      	ldrb	r3, [r7, #15]
 8011848:	4618      	mov	r0, r3
 801184a:	f000 f96f 	bl	8011b2c <USBD_Get_USB_Status>
 801184e:	4603      	mov	r3, r0
 8011850:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011852:	7bbb      	ldrb	r3, [r7, #14]
}
 8011854:	4618      	mov	r0, r3
 8011856:	3710      	adds	r7, #16
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}

0801185c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b084      	sub	sp, #16
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
 8011864:	4608      	mov	r0, r1
 8011866:	4611      	mov	r1, r2
 8011868:	461a      	mov	r2, r3
 801186a:	4603      	mov	r3, r0
 801186c:	70fb      	strb	r3, [r7, #3]
 801186e:	460b      	mov	r3, r1
 8011870:	70bb      	strb	r3, [r7, #2]
 8011872:	4613      	mov	r3, r2
 8011874:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011876:	2300      	movs	r3, #0
 8011878:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801187a:	2300      	movs	r3, #0
 801187c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8011884:	78bb      	ldrb	r3, [r7, #2]
 8011886:	883a      	ldrh	r2, [r7, #0]
 8011888:	78f9      	ldrb	r1, [r7, #3]
 801188a:	f7f5 fadb 	bl	8006e44 <HAL_PCD_EP_Open>
 801188e:	4603      	mov	r3, r0
 8011890:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011892:	7bfb      	ldrb	r3, [r7, #15]
 8011894:	4618      	mov	r0, r3
 8011896:	f000 f949 	bl	8011b2c <USBD_Get_USB_Status>
 801189a:	4603      	mov	r3, r0
 801189c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801189e:	7bbb      	ldrb	r3, [r7, #14]
}
 80118a0:	4618      	mov	r0, r3
 80118a2:	3710      	adds	r7, #16
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}

080118a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b084      	sub	sp, #16
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
 80118b0:	460b      	mov	r3, r1
 80118b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118b4:	2300      	movs	r3, #0
 80118b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118b8:	2300      	movs	r3, #0
 80118ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80118c2:	78fa      	ldrb	r2, [r7, #3]
 80118c4:	4611      	mov	r1, r2
 80118c6:	4618      	mov	r0, r3
 80118c8:	f7f5 fb83 	bl	8006fd2 <HAL_PCD_EP_SetStall>
 80118cc:	4603      	mov	r3, r0
 80118ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80118d0:	7bfb      	ldrb	r3, [r7, #15]
 80118d2:	4618      	mov	r0, r3
 80118d4:	f000 f92a 	bl	8011b2c <USBD_Get_USB_Status>
 80118d8:	4603      	mov	r3, r0
 80118da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80118dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80118de:	4618      	mov	r0, r3
 80118e0:	3710      	adds	r7, #16
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}

080118e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80118e6:	b580      	push	{r7, lr}
 80118e8:	b084      	sub	sp, #16
 80118ea:	af00      	add	r7, sp, #0
 80118ec:	6078      	str	r0, [r7, #4]
 80118ee:	460b      	mov	r3, r1
 80118f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118f2:	2300      	movs	r3, #0
 80118f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118f6:	2300      	movs	r3, #0
 80118f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011900:	78fa      	ldrb	r2, [r7, #3]
 8011902:	4611      	mov	r1, r2
 8011904:	4618      	mov	r0, r3
 8011906:	f7f5 fbb6 	bl	8007076 <HAL_PCD_EP_ClrStall>
 801190a:	4603      	mov	r3, r0
 801190c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801190e:	7bfb      	ldrb	r3, [r7, #15]
 8011910:	4618      	mov	r0, r3
 8011912:	f000 f90b 	bl	8011b2c <USBD_Get_USB_Status>
 8011916:	4603      	mov	r3, r0
 8011918:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801191a:	7bbb      	ldrb	r3, [r7, #14]
}
 801191c:	4618      	mov	r0, r3
 801191e:	3710      	adds	r7, #16
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}

08011924 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011924:	b480      	push	{r7}
 8011926:	b085      	sub	sp, #20
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
 801192c:	460b      	mov	r3, r1
 801192e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011936:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801193c:	2b00      	cmp	r3, #0
 801193e:	da0b      	bge.n	8011958 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011940:	78fb      	ldrb	r3, [r7, #3]
 8011942:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011946:	68f9      	ldr	r1, [r7, #12]
 8011948:	4613      	mov	r3, r2
 801194a:	009b      	lsls	r3, r3, #2
 801194c:	4413      	add	r3, r2
 801194e:	00db      	lsls	r3, r3, #3
 8011950:	440b      	add	r3, r1
 8011952:	3312      	adds	r3, #18
 8011954:	781b      	ldrb	r3, [r3, #0]
 8011956:	e00b      	b.n	8011970 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011958:	78fb      	ldrb	r3, [r7, #3]
 801195a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801195e:	68f9      	ldr	r1, [r7, #12]
 8011960:	4613      	mov	r3, r2
 8011962:	009b      	lsls	r3, r3, #2
 8011964:	4413      	add	r3, r2
 8011966:	00db      	lsls	r3, r3, #3
 8011968:	440b      	add	r3, r1
 801196a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 801196e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011970:	4618      	mov	r0, r3
 8011972:	3714      	adds	r7, #20
 8011974:	46bd      	mov	sp, r7
 8011976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197a:	4770      	bx	lr

0801197c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b084      	sub	sp, #16
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	460b      	mov	r3, r1
 8011986:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011988:	2300      	movs	r3, #0
 801198a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801198c:	2300      	movs	r3, #0
 801198e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011996:	78fa      	ldrb	r2, [r7, #3]
 8011998:	4611      	mov	r1, r2
 801199a:	4618      	mov	r0, r3
 801199c:	f7f5 fa2e 	bl	8006dfc <HAL_PCD_SetAddress>
 80119a0:	4603      	mov	r3, r0
 80119a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80119a4:	7bfb      	ldrb	r3, [r7, #15]
 80119a6:	4618      	mov	r0, r3
 80119a8:	f000 f8c0 	bl	8011b2c <USBD_Get_USB_Status>
 80119ac:	4603      	mov	r3, r0
 80119ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80119b2:	4618      	mov	r0, r3
 80119b4:	3710      	adds	r7, #16
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}

080119ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80119ba:	b580      	push	{r7, lr}
 80119bc:	b086      	sub	sp, #24
 80119be:	af00      	add	r7, sp, #0
 80119c0:	60f8      	str	r0, [r7, #12]
 80119c2:	607a      	str	r2, [r7, #4]
 80119c4:	603b      	str	r3, [r7, #0]
 80119c6:	460b      	mov	r3, r1
 80119c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119ca:	2300      	movs	r3, #0
 80119cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119ce:	2300      	movs	r3, #0
 80119d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80119d8:	7af9      	ldrb	r1, [r7, #11]
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	687a      	ldr	r2, [r7, #4]
 80119de:	f7f5 fac1 	bl	8006f64 <HAL_PCD_EP_Transmit>
 80119e2:	4603      	mov	r3, r0
 80119e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80119e6:	7dfb      	ldrb	r3, [r7, #23]
 80119e8:	4618      	mov	r0, r3
 80119ea:	f000 f89f 	bl	8011b2c <USBD_Get_USB_Status>
 80119ee:	4603      	mov	r3, r0
 80119f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80119f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	3718      	adds	r7, #24
 80119f8:	46bd      	mov	sp, r7
 80119fa:	bd80      	pop	{r7, pc}

080119fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b086      	sub	sp, #24
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	60f8      	str	r0, [r7, #12]
 8011a04:	607a      	str	r2, [r7, #4]
 8011a06:	603b      	str	r3, [r7, #0]
 8011a08:	460b      	mov	r3, r1
 8011a0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a10:	2300      	movs	r3, #0
 8011a12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8011a1a:	7af9      	ldrb	r1, [r7, #11]
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	687a      	ldr	r2, [r7, #4]
 8011a20:	f7f5 fa6f 	bl	8006f02 <HAL_PCD_EP_Receive>
 8011a24:	4603      	mov	r3, r0
 8011a26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a28:	7dfb      	ldrb	r3, [r7, #23]
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f000 f87e 	bl	8011b2c <USBD_Get_USB_Status>
 8011a30:	4603      	mov	r3, r0
 8011a32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011a34:	7dbb      	ldrb	r3, [r7, #22]
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	3718      	adds	r7, #24
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd80      	pop	{r7, pc}
	...

08011a40 <USBD_LL_BatterryCharging>:
  * @brief
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatterryCharging(USBD_HandleTypeDef *pdev)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b082      	sub	sp, #8
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1) == GPIO_PIN_SET)
 8011a48:	2102      	movs	r1, #2
 8011a4a:	480d      	ldr	r0, [pc, #52]	@ (8011a80 <USBD_LL_BatterryCharging+0x40>)
 8011a4c:	f7f4 fab2 	bl	8005fb4 <HAL_GPIO_ReadPin>
 8011a50:	4603      	mov	r3, r0
 8011a52:	2b01      	cmp	r3, #1
 8011a54:	d10f      	bne.n	8011a76 <USBD_LL_BatterryCharging+0x36>
  {
    /*wait for bus stabilization*/
    HAL_Delay(450);
 8011a56:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8011a5a:	f7f2 fbed 	bl	8004238 <HAL_Delay>
    /*Start BCD Detect*/
    HAL_PCDEx_ActivateBCD (pdev->pData);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011a64:	4618      	mov	r0, r3
 8011a66:	f7f6 fc29 	bl	80082bc <HAL_PCDEx_ActivateBCD>
    HAL_PCDEx_BCD_VBUSDetect(pdev->pData);
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7f6 fc79 	bl	8008368 <HAL_PCDEx_BCD_VBUSDetect>
  }
  return USBD_OK;
 8011a76:	2300      	movs	r3, #0
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3708      	adds	r7, #8
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}
 8011a80:	48001400 	.word	0x48001400

08011a84 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b082      	sub	sp, #8
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
 8011a8c:	460b      	mov	r3, r1
 8011a8e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011a90:	78fb      	ldrb	r3, [r7, #3]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d002      	beq.n	8011a9c <HAL_PCDEx_LPM_Callback+0x18>
 8011a96:	2b01      	cmp	r3, #1
 8011a98:	d013      	beq.n	8011ac2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011a9a:	e023      	b.n	8011ae4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	7a5b      	ldrb	r3, [r3, #9]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d007      	beq.n	8011ab4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011aa4:	f000 f83c 	bl	8011b20 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011aa8:	4b10      	ldr	r3, [pc, #64]	@ (8011aec <HAL_PCDEx_LPM_Callback+0x68>)
 8011aaa:	691b      	ldr	r3, [r3, #16]
 8011aac:	4a0f      	ldr	r2, [pc, #60]	@ (8011aec <HAL_PCDEx_LPM_Callback+0x68>)
 8011aae:	f023 0306 	bic.w	r3, r3, #6
 8011ab2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7fe fccf 	bl	801045e <USBD_LL_Resume>
    break;
 8011ac0:	e010      	b.n	8011ae4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f7fe fcb2 	bl	8010432 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	7a5b      	ldrb	r3, [r3, #9]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d005      	beq.n	8011ae2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011ad6:	4b05      	ldr	r3, [pc, #20]	@ (8011aec <HAL_PCDEx_LPM_Callback+0x68>)
 8011ad8:	691b      	ldr	r3, [r3, #16]
 8011ada:	4a04      	ldr	r2, [pc, #16]	@ (8011aec <HAL_PCDEx_LPM_Callback+0x68>)
 8011adc:	f043 0306 	orr.w	r3, r3, #6
 8011ae0:	6113      	str	r3, [r2, #16]
    break;
 8011ae2:	bf00      	nop
}
 8011ae4:	bf00      	nop
 8011ae6:	3708      	adds	r7, #8
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}
 8011aec:	e000ed00 	.word	0xe000ed00

08011af0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011af0:	b480      	push	{r7}
 8011af2:	b083      	sub	sp, #12
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011af8:	4b03      	ldr	r3, [pc, #12]	@ (8011b08 <USBD_static_malloc+0x18>)
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	370c      	adds	r7, #12
 8011afe:	46bd      	mov	sp, r7
 8011b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b04:	4770      	bx	lr
 8011b06:	bf00      	nop
 8011b08:	200011a4 	.word	0x200011a4

08011b0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011b0c:	b480      	push	{r7}
 8011b0e:	b083      	sub	sp, #12
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]

}
 8011b14:	bf00      	nop
 8011b16:	370c      	adds	r7, #12
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1e:	4770      	bx	lr

08011b20 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011b24:	f7ef fce0 	bl	80014e8 <SystemClock_Config>
}
 8011b28:	bf00      	nop
 8011b2a:	bd80      	pop	{r7, pc}

08011b2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011b2c:	b480      	push	{r7}
 8011b2e:	b085      	sub	sp, #20
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	4603      	mov	r3, r0
 8011b34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b36:	2300      	movs	r3, #0
 8011b38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011b3a:	79fb      	ldrb	r3, [r7, #7]
 8011b3c:	2b03      	cmp	r3, #3
 8011b3e:	d817      	bhi.n	8011b70 <USBD_Get_USB_Status+0x44>
 8011b40:	a201      	add	r2, pc, #4	@ (adr r2, 8011b48 <USBD_Get_USB_Status+0x1c>)
 8011b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b46:	bf00      	nop
 8011b48:	08011b59 	.word	0x08011b59
 8011b4c:	08011b5f 	.word	0x08011b5f
 8011b50:	08011b65 	.word	0x08011b65
 8011b54:	08011b6b 	.word	0x08011b6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011b58:	2300      	movs	r3, #0
 8011b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8011b5c:	e00b      	b.n	8011b76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011b5e:	2303      	movs	r3, #3
 8011b60:	73fb      	strb	r3, [r7, #15]
    break;
 8011b62:	e008      	b.n	8011b76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011b64:	2301      	movs	r3, #1
 8011b66:	73fb      	strb	r3, [r7, #15]
    break;
 8011b68:	e005      	b.n	8011b76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011b6a:	2303      	movs	r3, #3
 8011b6c:	73fb      	strb	r3, [r7, #15]
    break;
 8011b6e:	e002      	b.n	8011b76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011b70:	2303      	movs	r3, #3
 8011b72:	73fb      	strb	r3, [r7, #15]
    break;
 8011b74:	bf00      	nop
  }
  return usb_status;
 8011b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	3714      	adds	r7, #20
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b82:	4770      	bx	lr

08011b84 <__cvt>:
 8011b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b88:	ec57 6b10 	vmov	r6, r7, d0
 8011b8c:	2f00      	cmp	r7, #0
 8011b8e:	460c      	mov	r4, r1
 8011b90:	4619      	mov	r1, r3
 8011b92:	463b      	mov	r3, r7
 8011b94:	bfbb      	ittet	lt
 8011b96:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8011b9a:	461f      	movlt	r7, r3
 8011b9c:	2300      	movge	r3, #0
 8011b9e:	232d      	movlt	r3, #45	@ 0x2d
 8011ba0:	700b      	strb	r3, [r1, #0]
 8011ba2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011ba4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011ba8:	4691      	mov	r9, r2
 8011baa:	f023 0820 	bic.w	r8, r3, #32
 8011bae:	bfbc      	itt	lt
 8011bb0:	4632      	movlt	r2, r6
 8011bb2:	4616      	movlt	r6, r2
 8011bb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011bb8:	d005      	beq.n	8011bc6 <__cvt+0x42>
 8011bba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011bbe:	d100      	bne.n	8011bc2 <__cvt+0x3e>
 8011bc0:	3401      	adds	r4, #1
 8011bc2:	2102      	movs	r1, #2
 8011bc4:	e000      	b.n	8011bc8 <__cvt+0x44>
 8011bc6:	2103      	movs	r1, #3
 8011bc8:	ab03      	add	r3, sp, #12
 8011bca:	9301      	str	r3, [sp, #4]
 8011bcc:	ab02      	add	r3, sp, #8
 8011bce:	9300      	str	r3, [sp, #0]
 8011bd0:	ec47 6b10 	vmov	d0, r6, r7
 8011bd4:	4653      	mov	r3, sl
 8011bd6:	4622      	mov	r2, r4
 8011bd8:	f000 feb2 	bl	8012940 <_dtoa_r>
 8011bdc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011be0:	4605      	mov	r5, r0
 8011be2:	d119      	bne.n	8011c18 <__cvt+0x94>
 8011be4:	f019 0f01 	tst.w	r9, #1
 8011be8:	d00e      	beq.n	8011c08 <__cvt+0x84>
 8011bea:	eb00 0904 	add.w	r9, r0, r4
 8011bee:	2200      	movs	r2, #0
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	4630      	mov	r0, r6
 8011bf4:	4639      	mov	r1, r7
 8011bf6:	f7ee ff8f 	bl	8000b18 <__aeabi_dcmpeq>
 8011bfa:	b108      	cbz	r0, 8011c00 <__cvt+0x7c>
 8011bfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8011c00:	2230      	movs	r2, #48	@ 0x30
 8011c02:	9b03      	ldr	r3, [sp, #12]
 8011c04:	454b      	cmp	r3, r9
 8011c06:	d31e      	bcc.n	8011c46 <__cvt+0xc2>
 8011c08:	9b03      	ldr	r3, [sp, #12]
 8011c0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011c0c:	1b5b      	subs	r3, r3, r5
 8011c0e:	4628      	mov	r0, r5
 8011c10:	6013      	str	r3, [r2, #0]
 8011c12:	b004      	add	sp, #16
 8011c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011c1c:	eb00 0904 	add.w	r9, r0, r4
 8011c20:	d1e5      	bne.n	8011bee <__cvt+0x6a>
 8011c22:	7803      	ldrb	r3, [r0, #0]
 8011c24:	2b30      	cmp	r3, #48	@ 0x30
 8011c26:	d10a      	bne.n	8011c3e <__cvt+0xba>
 8011c28:	2200      	movs	r2, #0
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	4630      	mov	r0, r6
 8011c2e:	4639      	mov	r1, r7
 8011c30:	f7ee ff72 	bl	8000b18 <__aeabi_dcmpeq>
 8011c34:	b918      	cbnz	r0, 8011c3e <__cvt+0xba>
 8011c36:	f1c4 0401 	rsb	r4, r4, #1
 8011c3a:	f8ca 4000 	str.w	r4, [sl]
 8011c3e:	f8da 3000 	ldr.w	r3, [sl]
 8011c42:	4499      	add	r9, r3
 8011c44:	e7d3      	b.n	8011bee <__cvt+0x6a>
 8011c46:	1c59      	adds	r1, r3, #1
 8011c48:	9103      	str	r1, [sp, #12]
 8011c4a:	701a      	strb	r2, [r3, #0]
 8011c4c:	e7d9      	b.n	8011c02 <__cvt+0x7e>

08011c4e <__exponent>:
 8011c4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c50:	2900      	cmp	r1, #0
 8011c52:	bfba      	itte	lt
 8011c54:	4249      	neglt	r1, r1
 8011c56:	232d      	movlt	r3, #45	@ 0x2d
 8011c58:	232b      	movge	r3, #43	@ 0x2b
 8011c5a:	2909      	cmp	r1, #9
 8011c5c:	7002      	strb	r2, [r0, #0]
 8011c5e:	7043      	strb	r3, [r0, #1]
 8011c60:	dd29      	ble.n	8011cb6 <__exponent+0x68>
 8011c62:	f10d 0307 	add.w	r3, sp, #7
 8011c66:	461d      	mov	r5, r3
 8011c68:	270a      	movs	r7, #10
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	fbb1 f6f7 	udiv	r6, r1, r7
 8011c70:	fb07 1416 	mls	r4, r7, r6, r1
 8011c74:	3430      	adds	r4, #48	@ 0x30
 8011c76:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011c7a:	460c      	mov	r4, r1
 8011c7c:	2c63      	cmp	r4, #99	@ 0x63
 8011c7e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8011c82:	4631      	mov	r1, r6
 8011c84:	dcf1      	bgt.n	8011c6a <__exponent+0x1c>
 8011c86:	3130      	adds	r1, #48	@ 0x30
 8011c88:	1e94      	subs	r4, r2, #2
 8011c8a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011c8e:	1c41      	adds	r1, r0, #1
 8011c90:	4623      	mov	r3, r4
 8011c92:	42ab      	cmp	r3, r5
 8011c94:	d30a      	bcc.n	8011cac <__exponent+0x5e>
 8011c96:	f10d 0309 	add.w	r3, sp, #9
 8011c9a:	1a9b      	subs	r3, r3, r2
 8011c9c:	42ac      	cmp	r4, r5
 8011c9e:	bf88      	it	hi
 8011ca0:	2300      	movhi	r3, #0
 8011ca2:	3302      	adds	r3, #2
 8011ca4:	4403      	add	r3, r0
 8011ca6:	1a18      	subs	r0, r3, r0
 8011ca8:	b003      	add	sp, #12
 8011caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cac:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011cb0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011cb4:	e7ed      	b.n	8011c92 <__exponent+0x44>
 8011cb6:	2330      	movs	r3, #48	@ 0x30
 8011cb8:	3130      	adds	r1, #48	@ 0x30
 8011cba:	7083      	strb	r3, [r0, #2]
 8011cbc:	70c1      	strb	r1, [r0, #3]
 8011cbe:	1d03      	adds	r3, r0, #4
 8011cc0:	e7f1      	b.n	8011ca6 <__exponent+0x58>
	...

08011cc4 <_printf_float>:
 8011cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cc8:	b08d      	sub	sp, #52	@ 0x34
 8011cca:	460c      	mov	r4, r1
 8011ccc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011cd0:	4616      	mov	r6, r2
 8011cd2:	461f      	mov	r7, r3
 8011cd4:	4605      	mov	r5, r0
 8011cd6:	f000 fd5f 	bl	8012798 <_localeconv_r>
 8011cda:	6803      	ldr	r3, [r0, #0]
 8011cdc:	9304      	str	r3, [sp, #16]
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7ee faee 	bl	80002c0 <strlen>
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	930a      	str	r3, [sp, #40]	@ 0x28
 8011ce8:	f8d8 3000 	ldr.w	r3, [r8]
 8011cec:	9005      	str	r0, [sp, #20]
 8011cee:	3307      	adds	r3, #7
 8011cf0:	f023 0307 	bic.w	r3, r3, #7
 8011cf4:	f103 0208 	add.w	r2, r3, #8
 8011cf8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011cfc:	f8d4 b000 	ldr.w	fp, [r4]
 8011d00:	f8c8 2000 	str.w	r2, [r8]
 8011d04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011d08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011d0c:	9307      	str	r3, [sp, #28]
 8011d0e:	f8cd 8018 	str.w	r8, [sp, #24]
 8011d12:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011d16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011d1a:	4b9c      	ldr	r3, [pc, #624]	@ (8011f8c <_printf_float+0x2c8>)
 8011d1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011d20:	f7ee ff2c 	bl	8000b7c <__aeabi_dcmpun>
 8011d24:	bb70      	cbnz	r0, 8011d84 <_printf_float+0xc0>
 8011d26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011d2a:	4b98      	ldr	r3, [pc, #608]	@ (8011f8c <_printf_float+0x2c8>)
 8011d2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011d30:	f7ee ff06 	bl	8000b40 <__aeabi_dcmple>
 8011d34:	bb30      	cbnz	r0, 8011d84 <_printf_float+0xc0>
 8011d36:	2200      	movs	r2, #0
 8011d38:	2300      	movs	r3, #0
 8011d3a:	4640      	mov	r0, r8
 8011d3c:	4649      	mov	r1, r9
 8011d3e:	f7ee fef5 	bl	8000b2c <__aeabi_dcmplt>
 8011d42:	b110      	cbz	r0, 8011d4a <_printf_float+0x86>
 8011d44:	232d      	movs	r3, #45	@ 0x2d
 8011d46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011d4a:	4a91      	ldr	r2, [pc, #580]	@ (8011f90 <_printf_float+0x2cc>)
 8011d4c:	4b91      	ldr	r3, [pc, #580]	@ (8011f94 <_printf_float+0x2d0>)
 8011d4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011d52:	bf94      	ite	ls
 8011d54:	4690      	movls	r8, r2
 8011d56:	4698      	movhi	r8, r3
 8011d58:	2303      	movs	r3, #3
 8011d5a:	6123      	str	r3, [r4, #16]
 8011d5c:	f02b 0304 	bic.w	r3, fp, #4
 8011d60:	6023      	str	r3, [r4, #0]
 8011d62:	f04f 0900 	mov.w	r9, #0
 8011d66:	9700      	str	r7, [sp, #0]
 8011d68:	4633      	mov	r3, r6
 8011d6a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011d6c:	4621      	mov	r1, r4
 8011d6e:	4628      	mov	r0, r5
 8011d70:	f000 fa7c 	bl	801226c <_printf_common>
 8011d74:	3001      	adds	r0, #1
 8011d76:	f040 808d 	bne.w	8011e94 <_printf_float+0x1d0>
 8011d7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011d7e:	b00d      	add	sp, #52	@ 0x34
 8011d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d84:	4642      	mov	r2, r8
 8011d86:	464b      	mov	r3, r9
 8011d88:	4640      	mov	r0, r8
 8011d8a:	4649      	mov	r1, r9
 8011d8c:	f7ee fef6 	bl	8000b7c <__aeabi_dcmpun>
 8011d90:	b140      	cbz	r0, 8011da4 <_printf_float+0xe0>
 8011d92:	464b      	mov	r3, r9
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	bfbc      	itt	lt
 8011d98:	232d      	movlt	r3, #45	@ 0x2d
 8011d9a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011d9e:	4a7e      	ldr	r2, [pc, #504]	@ (8011f98 <_printf_float+0x2d4>)
 8011da0:	4b7e      	ldr	r3, [pc, #504]	@ (8011f9c <_printf_float+0x2d8>)
 8011da2:	e7d4      	b.n	8011d4e <_printf_float+0x8a>
 8011da4:	6863      	ldr	r3, [r4, #4]
 8011da6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011daa:	9206      	str	r2, [sp, #24]
 8011dac:	1c5a      	adds	r2, r3, #1
 8011dae:	d13b      	bne.n	8011e28 <_printf_float+0x164>
 8011db0:	2306      	movs	r3, #6
 8011db2:	6063      	str	r3, [r4, #4]
 8011db4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011db8:	2300      	movs	r3, #0
 8011dba:	6022      	str	r2, [r4, #0]
 8011dbc:	9303      	str	r3, [sp, #12]
 8011dbe:	ab0a      	add	r3, sp, #40	@ 0x28
 8011dc0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011dc4:	ab09      	add	r3, sp, #36	@ 0x24
 8011dc6:	9300      	str	r3, [sp, #0]
 8011dc8:	6861      	ldr	r1, [r4, #4]
 8011dca:	ec49 8b10 	vmov	d0, r8, r9
 8011dce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011dd2:	4628      	mov	r0, r5
 8011dd4:	f7ff fed6 	bl	8011b84 <__cvt>
 8011dd8:	9b06      	ldr	r3, [sp, #24]
 8011dda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011ddc:	2b47      	cmp	r3, #71	@ 0x47
 8011dde:	4680      	mov	r8, r0
 8011de0:	d129      	bne.n	8011e36 <_printf_float+0x172>
 8011de2:	1cc8      	adds	r0, r1, #3
 8011de4:	db02      	blt.n	8011dec <_printf_float+0x128>
 8011de6:	6863      	ldr	r3, [r4, #4]
 8011de8:	4299      	cmp	r1, r3
 8011dea:	dd41      	ble.n	8011e70 <_printf_float+0x1ac>
 8011dec:	f1aa 0a02 	sub.w	sl, sl, #2
 8011df0:	fa5f fa8a 	uxtb.w	sl, sl
 8011df4:	3901      	subs	r1, #1
 8011df6:	4652      	mov	r2, sl
 8011df8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011dfc:	9109      	str	r1, [sp, #36]	@ 0x24
 8011dfe:	f7ff ff26 	bl	8011c4e <__exponent>
 8011e02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011e04:	1813      	adds	r3, r2, r0
 8011e06:	2a01      	cmp	r2, #1
 8011e08:	4681      	mov	r9, r0
 8011e0a:	6123      	str	r3, [r4, #16]
 8011e0c:	dc02      	bgt.n	8011e14 <_printf_float+0x150>
 8011e0e:	6822      	ldr	r2, [r4, #0]
 8011e10:	07d2      	lsls	r2, r2, #31
 8011e12:	d501      	bpl.n	8011e18 <_printf_float+0x154>
 8011e14:	3301      	adds	r3, #1
 8011e16:	6123      	str	r3, [r4, #16]
 8011e18:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d0a2      	beq.n	8011d66 <_printf_float+0xa2>
 8011e20:	232d      	movs	r3, #45	@ 0x2d
 8011e22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011e26:	e79e      	b.n	8011d66 <_printf_float+0xa2>
 8011e28:	9a06      	ldr	r2, [sp, #24]
 8011e2a:	2a47      	cmp	r2, #71	@ 0x47
 8011e2c:	d1c2      	bne.n	8011db4 <_printf_float+0xf0>
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d1c0      	bne.n	8011db4 <_printf_float+0xf0>
 8011e32:	2301      	movs	r3, #1
 8011e34:	e7bd      	b.n	8011db2 <_printf_float+0xee>
 8011e36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011e3a:	d9db      	bls.n	8011df4 <_printf_float+0x130>
 8011e3c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011e40:	d118      	bne.n	8011e74 <_printf_float+0x1b0>
 8011e42:	2900      	cmp	r1, #0
 8011e44:	6863      	ldr	r3, [r4, #4]
 8011e46:	dd0b      	ble.n	8011e60 <_printf_float+0x19c>
 8011e48:	6121      	str	r1, [r4, #16]
 8011e4a:	b913      	cbnz	r3, 8011e52 <_printf_float+0x18e>
 8011e4c:	6822      	ldr	r2, [r4, #0]
 8011e4e:	07d0      	lsls	r0, r2, #31
 8011e50:	d502      	bpl.n	8011e58 <_printf_float+0x194>
 8011e52:	3301      	adds	r3, #1
 8011e54:	440b      	add	r3, r1
 8011e56:	6123      	str	r3, [r4, #16]
 8011e58:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011e5a:	f04f 0900 	mov.w	r9, #0
 8011e5e:	e7db      	b.n	8011e18 <_printf_float+0x154>
 8011e60:	b913      	cbnz	r3, 8011e68 <_printf_float+0x1a4>
 8011e62:	6822      	ldr	r2, [r4, #0]
 8011e64:	07d2      	lsls	r2, r2, #31
 8011e66:	d501      	bpl.n	8011e6c <_printf_float+0x1a8>
 8011e68:	3302      	adds	r3, #2
 8011e6a:	e7f4      	b.n	8011e56 <_printf_float+0x192>
 8011e6c:	2301      	movs	r3, #1
 8011e6e:	e7f2      	b.n	8011e56 <_printf_float+0x192>
 8011e70:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011e74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e76:	4299      	cmp	r1, r3
 8011e78:	db05      	blt.n	8011e86 <_printf_float+0x1c2>
 8011e7a:	6823      	ldr	r3, [r4, #0]
 8011e7c:	6121      	str	r1, [r4, #16]
 8011e7e:	07d8      	lsls	r0, r3, #31
 8011e80:	d5ea      	bpl.n	8011e58 <_printf_float+0x194>
 8011e82:	1c4b      	adds	r3, r1, #1
 8011e84:	e7e7      	b.n	8011e56 <_printf_float+0x192>
 8011e86:	2900      	cmp	r1, #0
 8011e88:	bfd4      	ite	le
 8011e8a:	f1c1 0202 	rsble	r2, r1, #2
 8011e8e:	2201      	movgt	r2, #1
 8011e90:	4413      	add	r3, r2
 8011e92:	e7e0      	b.n	8011e56 <_printf_float+0x192>
 8011e94:	6823      	ldr	r3, [r4, #0]
 8011e96:	055a      	lsls	r2, r3, #21
 8011e98:	d407      	bmi.n	8011eaa <_printf_float+0x1e6>
 8011e9a:	6923      	ldr	r3, [r4, #16]
 8011e9c:	4642      	mov	r2, r8
 8011e9e:	4631      	mov	r1, r6
 8011ea0:	4628      	mov	r0, r5
 8011ea2:	47b8      	blx	r7
 8011ea4:	3001      	adds	r0, #1
 8011ea6:	d12b      	bne.n	8011f00 <_printf_float+0x23c>
 8011ea8:	e767      	b.n	8011d7a <_printf_float+0xb6>
 8011eaa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011eae:	f240 80dd 	bls.w	801206c <_printf_float+0x3a8>
 8011eb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	2300      	movs	r3, #0
 8011eba:	f7ee fe2d 	bl	8000b18 <__aeabi_dcmpeq>
 8011ebe:	2800      	cmp	r0, #0
 8011ec0:	d033      	beq.n	8011f2a <_printf_float+0x266>
 8011ec2:	4a37      	ldr	r2, [pc, #220]	@ (8011fa0 <_printf_float+0x2dc>)
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	4631      	mov	r1, r6
 8011ec8:	4628      	mov	r0, r5
 8011eca:	47b8      	blx	r7
 8011ecc:	3001      	adds	r0, #1
 8011ece:	f43f af54 	beq.w	8011d7a <_printf_float+0xb6>
 8011ed2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011ed6:	4543      	cmp	r3, r8
 8011ed8:	db02      	blt.n	8011ee0 <_printf_float+0x21c>
 8011eda:	6823      	ldr	r3, [r4, #0]
 8011edc:	07d8      	lsls	r0, r3, #31
 8011ede:	d50f      	bpl.n	8011f00 <_printf_float+0x23c>
 8011ee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ee4:	4631      	mov	r1, r6
 8011ee6:	4628      	mov	r0, r5
 8011ee8:	47b8      	blx	r7
 8011eea:	3001      	adds	r0, #1
 8011eec:	f43f af45 	beq.w	8011d7a <_printf_float+0xb6>
 8011ef0:	f04f 0900 	mov.w	r9, #0
 8011ef4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011ef8:	f104 0a1a 	add.w	sl, r4, #26
 8011efc:	45c8      	cmp	r8, r9
 8011efe:	dc09      	bgt.n	8011f14 <_printf_float+0x250>
 8011f00:	6823      	ldr	r3, [r4, #0]
 8011f02:	079b      	lsls	r3, r3, #30
 8011f04:	f100 8103 	bmi.w	801210e <_printf_float+0x44a>
 8011f08:	68e0      	ldr	r0, [r4, #12]
 8011f0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f0c:	4298      	cmp	r0, r3
 8011f0e:	bfb8      	it	lt
 8011f10:	4618      	movlt	r0, r3
 8011f12:	e734      	b.n	8011d7e <_printf_float+0xba>
 8011f14:	2301      	movs	r3, #1
 8011f16:	4652      	mov	r2, sl
 8011f18:	4631      	mov	r1, r6
 8011f1a:	4628      	mov	r0, r5
 8011f1c:	47b8      	blx	r7
 8011f1e:	3001      	adds	r0, #1
 8011f20:	f43f af2b 	beq.w	8011d7a <_printf_float+0xb6>
 8011f24:	f109 0901 	add.w	r9, r9, #1
 8011f28:	e7e8      	b.n	8011efc <_printf_float+0x238>
 8011f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	dc39      	bgt.n	8011fa4 <_printf_float+0x2e0>
 8011f30:	4a1b      	ldr	r2, [pc, #108]	@ (8011fa0 <_printf_float+0x2dc>)
 8011f32:	2301      	movs	r3, #1
 8011f34:	4631      	mov	r1, r6
 8011f36:	4628      	mov	r0, r5
 8011f38:	47b8      	blx	r7
 8011f3a:	3001      	adds	r0, #1
 8011f3c:	f43f af1d 	beq.w	8011d7a <_printf_float+0xb6>
 8011f40:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011f44:	ea59 0303 	orrs.w	r3, r9, r3
 8011f48:	d102      	bne.n	8011f50 <_printf_float+0x28c>
 8011f4a:	6823      	ldr	r3, [r4, #0]
 8011f4c:	07d9      	lsls	r1, r3, #31
 8011f4e:	d5d7      	bpl.n	8011f00 <_printf_float+0x23c>
 8011f50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f54:	4631      	mov	r1, r6
 8011f56:	4628      	mov	r0, r5
 8011f58:	47b8      	blx	r7
 8011f5a:	3001      	adds	r0, #1
 8011f5c:	f43f af0d 	beq.w	8011d7a <_printf_float+0xb6>
 8011f60:	f04f 0a00 	mov.w	sl, #0
 8011f64:	f104 0b1a 	add.w	fp, r4, #26
 8011f68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f6a:	425b      	negs	r3, r3
 8011f6c:	4553      	cmp	r3, sl
 8011f6e:	dc01      	bgt.n	8011f74 <_printf_float+0x2b0>
 8011f70:	464b      	mov	r3, r9
 8011f72:	e793      	b.n	8011e9c <_printf_float+0x1d8>
 8011f74:	2301      	movs	r3, #1
 8011f76:	465a      	mov	r2, fp
 8011f78:	4631      	mov	r1, r6
 8011f7a:	4628      	mov	r0, r5
 8011f7c:	47b8      	blx	r7
 8011f7e:	3001      	adds	r0, #1
 8011f80:	f43f aefb 	beq.w	8011d7a <_printf_float+0xb6>
 8011f84:	f10a 0a01 	add.w	sl, sl, #1
 8011f88:	e7ee      	b.n	8011f68 <_printf_float+0x2a4>
 8011f8a:	bf00      	nop
 8011f8c:	7fefffff 	.word	0x7fefffff
 8011f90:	080158ec 	.word	0x080158ec
 8011f94:	080158f0 	.word	0x080158f0
 8011f98:	080158f4 	.word	0x080158f4
 8011f9c:	080158f8 	.word	0x080158f8
 8011fa0:	080158fc 	.word	0x080158fc
 8011fa4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011fa6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011faa:	4553      	cmp	r3, sl
 8011fac:	bfa8      	it	ge
 8011fae:	4653      	movge	r3, sl
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	4699      	mov	r9, r3
 8011fb4:	dc36      	bgt.n	8012024 <_printf_float+0x360>
 8011fb6:	f04f 0b00 	mov.w	fp, #0
 8011fba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011fbe:	f104 021a 	add.w	r2, r4, #26
 8011fc2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011fc4:	9306      	str	r3, [sp, #24]
 8011fc6:	eba3 0309 	sub.w	r3, r3, r9
 8011fca:	455b      	cmp	r3, fp
 8011fcc:	dc31      	bgt.n	8012032 <_printf_float+0x36e>
 8011fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fd0:	459a      	cmp	sl, r3
 8011fd2:	dc3a      	bgt.n	801204a <_printf_float+0x386>
 8011fd4:	6823      	ldr	r3, [r4, #0]
 8011fd6:	07da      	lsls	r2, r3, #31
 8011fd8:	d437      	bmi.n	801204a <_printf_float+0x386>
 8011fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fdc:	ebaa 0903 	sub.w	r9, sl, r3
 8011fe0:	9b06      	ldr	r3, [sp, #24]
 8011fe2:	ebaa 0303 	sub.w	r3, sl, r3
 8011fe6:	4599      	cmp	r9, r3
 8011fe8:	bfa8      	it	ge
 8011fea:	4699      	movge	r9, r3
 8011fec:	f1b9 0f00 	cmp.w	r9, #0
 8011ff0:	dc33      	bgt.n	801205a <_printf_float+0x396>
 8011ff2:	f04f 0800 	mov.w	r8, #0
 8011ff6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011ffa:	f104 0b1a 	add.w	fp, r4, #26
 8011ffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012000:	ebaa 0303 	sub.w	r3, sl, r3
 8012004:	eba3 0309 	sub.w	r3, r3, r9
 8012008:	4543      	cmp	r3, r8
 801200a:	f77f af79 	ble.w	8011f00 <_printf_float+0x23c>
 801200e:	2301      	movs	r3, #1
 8012010:	465a      	mov	r2, fp
 8012012:	4631      	mov	r1, r6
 8012014:	4628      	mov	r0, r5
 8012016:	47b8      	blx	r7
 8012018:	3001      	adds	r0, #1
 801201a:	f43f aeae 	beq.w	8011d7a <_printf_float+0xb6>
 801201e:	f108 0801 	add.w	r8, r8, #1
 8012022:	e7ec      	b.n	8011ffe <_printf_float+0x33a>
 8012024:	4642      	mov	r2, r8
 8012026:	4631      	mov	r1, r6
 8012028:	4628      	mov	r0, r5
 801202a:	47b8      	blx	r7
 801202c:	3001      	adds	r0, #1
 801202e:	d1c2      	bne.n	8011fb6 <_printf_float+0x2f2>
 8012030:	e6a3      	b.n	8011d7a <_printf_float+0xb6>
 8012032:	2301      	movs	r3, #1
 8012034:	4631      	mov	r1, r6
 8012036:	4628      	mov	r0, r5
 8012038:	9206      	str	r2, [sp, #24]
 801203a:	47b8      	blx	r7
 801203c:	3001      	adds	r0, #1
 801203e:	f43f ae9c 	beq.w	8011d7a <_printf_float+0xb6>
 8012042:	9a06      	ldr	r2, [sp, #24]
 8012044:	f10b 0b01 	add.w	fp, fp, #1
 8012048:	e7bb      	b.n	8011fc2 <_printf_float+0x2fe>
 801204a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801204e:	4631      	mov	r1, r6
 8012050:	4628      	mov	r0, r5
 8012052:	47b8      	blx	r7
 8012054:	3001      	adds	r0, #1
 8012056:	d1c0      	bne.n	8011fda <_printf_float+0x316>
 8012058:	e68f      	b.n	8011d7a <_printf_float+0xb6>
 801205a:	9a06      	ldr	r2, [sp, #24]
 801205c:	464b      	mov	r3, r9
 801205e:	4442      	add	r2, r8
 8012060:	4631      	mov	r1, r6
 8012062:	4628      	mov	r0, r5
 8012064:	47b8      	blx	r7
 8012066:	3001      	adds	r0, #1
 8012068:	d1c3      	bne.n	8011ff2 <_printf_float+0x32e>
 801206a:	e686      	b.n	8011d7a <_printf_float+0xb6>
 801206c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012070:	f1ba 0f01 	cmp.w	sl, #1
 8012074:	dc01      	bgt.n	801207a <_printf_float+0x3b6>
 8012076:	07db      	lsls	r3, r3, #31
 8012078:	d536      	bpl.n	80120e8 <_printf_float+0x424>
 801207a:	2301      	movs	r3, #1
 801207c:	4642      	mov	r2, r8
 801207e:	4631      	mov	r1, r6
 8012080:	4628      	mov	r0, r5
 8012082:	47b8      	blx	r7
 8012084:	3001      	adds	r0, #1
 8012086:	f43f ae78 	beq.w	8011d7a <_printf_float+0xb6>
 801208a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801208e:	4631      	mov	r1, r6
 8012090:	4628      	mov	r0, r5
 8012092:	47b8      	blx	r7
 8012094:	3001      	adds	r0, #1
 8012096:	f43f ae70 	beq.w	8011d7a <_printf_float+0xb6>
 801209a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801209e:	2200      	movs	r2, #0
 80120a0:	2300      	movs	r3, #0
 80120a2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80120a6:	f7ee fd37 	bl	8000b18 <__aeabi_dcmpeq>
 80120aa:	b9c0      	cbnz	r0, 80120de <_printf_float+0x41a>
 80120ac:	4653      	mov	r3, sl
 80120ae:	f108 0201 	add.w	r2, r8, #1
 80120b2:	4631      	mov	r1, r6
 80120b4:	4628      	mov	r0, r5
 80120b6:	47b8      	blx	r7
 80120b8:	3001      	adds	r0, #1
 80120ba:	d10c      	bne.n	80120d6 <_printf_float+0x412>
 80120bc:	e65d      	b.n	8011d7a <_printf_float+0xb6>
 80120be:	2301      	movs	r3, #1
 80120c0:	465a      	mov	r2, fp
 80120c2:	4631      	mov	r1, r6
 80120c4:	4628      	mov	r0, r5
 80120c6:	47b8      	blx	r7
 80120c8:	3001      	adds	r0, #1
 80120ca:	f43f ae56 	beq.w	8011d7a <_printf_float+0xb6>
 80120ce:	f108 0801 	add.w	r8, r8, #1
 80120d2:	45d0      	cmp	r8, sl
 80120d4:	dbf3      	blt.n	80120be <_printf_float+0x3fa>
 80120d6:	464b      	mov	r3, r9
 80120d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80120dc:	e6df      	b.n	8011e9e <_printf_float+0x1da>
 80120de:	f04f 0800 	mov.w	r8, #0
 80120e2:	f104 0b1a 	add.w	fp, r4, #26
 80120e6:	e7f4      	b.n	80120d2 <_printf_float+0x40e>
 80120e8:	2301      	movs	r3, #1
 80120ea:	4642      	mov	r2, r8
 80120ec:	e7e1      	b.n	80120b2 <_printf_float+0x3ee>
 80120ee:	2301      	movs	r3, #1
 80120f0:	464a      	mov	r2, r9
 80120f2:	4631      	mov	r1, r6
 80120f4:	4628      	mov	r0, r5
 80120f6:	47b8      	blx	r7
 80120f8:	3001      	adds	r0, #1
 80120fa:	f43f ae3e 	beq.w	8011d7a <_printf_float+0xb6>
 80120fe:	f108 0801 	add.w	r8, r8, #1
 8012102:	68e3      	ldr	r3, [r4, #12]
 8012104:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012106:	1a5b      	subs	r3, r3, r1
 8012108:	4543      	cmp	r3, r8
 801210a:	dcf0      	bgt.n	80120ee <_printf_float+0x42a>
 801210c:	e6fc      	b.n	8011f08 <_printf_float+0x244>
 801210e:	f04f 0800 	mov.w	r8, #0
 8012112:	f104 0919 	add.w	r9, r4, #25
 8012116:	e7f4      	b.n	8012102 <_printf_float+0x43e>

08012118 <malloc>:
 8012118:	4b02      	ldr	r3, [pc, #8]	@ (8012124 <malloc+0xc>)
 801211a:	4601      	mov	r1, r0
 801211c:	6818      	ldr	r0, [r3, #0]
 801211e:	f000 b825 	b.w	801216c <_malloc_r>
 8012122:	bf00      	nop
 8012124:	200000ec 	.word	0x200000ec

08012128 <sbrk_aligned>:
 8012128:	b570      	push	{r4, r5, r6, lr}
 801212a:	4e0f      	ldr	r6, [pc, #60]	@ (8012168 <sbrk_aligned+0x40>)
 801212c:	460c      	mov	r4, r1
 801212e:	6831      	ldr	r1, [r6, #0]
 8012130:	4605      	mov	r5, r0
 8012132:	b911      	cbnz	r1, 801213a <sbrk_aligned+0x12>
 8012134:	f000 fb34 	bl	80127a0 <_sbrk_r>
 8012138:	6030      	str	r0, [r6, #0]
 801213a:	4621      	mov	r1, r4
 801213c:	4628      	mov	r0, r5
 801213e:	f000 fb2f 	bl	80127a0 <_sbrk_r>
 8012142:	1c43      	adds	r3, r0, #1
 8012144:	d103      	bne.n	801214e <sbrk_aligned+0x26>
 8012146:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801214a:	4620      	mov	r0, r4
 801214c:	bd70      	pop	{r4, r5, r6, pc}
 801214e:	1cc4      	adds	r4, r0, #3
 8012150:	f024 0403 	bic.w	r4, r4, #3
 8012154:	42a0      	cmp	r0, r4
 8012156:	d0f8      	beq.n	801214a <sbrk_aligned+0x22>
 8012158:	1a21      	subs	r1, r4, r0
 801215a:	4628      	mov	r0, r5
 801215c:	f000 fb20 	bl	80127a0 <_sbrk_r>
 8012160:	3001      	adds	r0, #1
 8012162:	d1f2      	bne.n	801214a <sbrk_aligned+0x22>
 8012164:	e7ef      	b.n	8012146 <sbrk_aligned+0x1e>
 8012166:	bf00      	nop
 8012168:	200015c4 	.word	0x200015c4

0801216c <_malloc_r>:
 801216c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012170:	1ccd      	adds	r5, r1, #3
 8012172:	f025 0503 	bic.w	r5, r5, #3
 8012176:	3508      	adds	r5, #8
 8012178:	2d0c      	cmp	r5, #12
 801217a:	bf38      	it	cc
 801217c:	250c      	movcc	r5, #12
 801217e:	2d00      	cmp	r5, #0
 8012180:	4606      	mov	r6, r0
 8012182:	db01      	blt.n	8012188 <_malloc_r+0x1c>
 8012184:	42a9      	cmp	r1, r5
 8012186:	d904      	bls.n	8012192 <_malloc_r+0x26>
 8012188:	230c      	movs	r3, #12
 801218a:	6033      	str	r3, [r6, #0]
 801218c:	2000      	movs	r0, #0
 801218e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012192:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012268 <_malloc_r+0xfc>
 8012196:	f000 f9f7 	bl	8012588 <__malloc_lock>
 801219a:	f8d8 3000 	ldr.w	r3, [r8]
 801219e:	461c      	mov	r4, r3
 80121a0:	bb44      	cbnz	r4, 80121f4 <_malloc_r+0x88>
 80121a2:	4629      	mov	r1, r5
 80121a4:	4630      	mov	r0, r6
 80121a6:	f7ff ffbf 	bl	8012128 <sbrk_aligned>
 80121aa:	1c43      	adds	r3, r0, #1
 80121ac:	4604      	mov	r4, r0
 80121ae:	d158      	bne.n	8012262 <_malloc_r+0xf6>
 80121b0:	f8d8 4000 	ldr.w	r4, [r8]
 80121b4:	4627      	mov	r7, r4
 80121b6:	2f00      	cmp	r7, #0
 80121b8:	d143      	bne.n	8012242 <_malloc_r+0xd6>
 80121ba:	2c00      	cmp	r4, #0
 80121bc:	d04b      	beq.n	8012256 <_malloc_r+0xea>
 80121be:	6823      	ldr	r3, [r4, #0]
 80121c0:	4639      	mov	r1, r7
 80121c2:	4630      	mov	r0, r6
 80121c4:	eb04 0903 	add.w	r9, r4, r3
 80121c8:	f000 faea 	bl	80127a0 <_sbrk_r>
 80121cc:	4581      	cmp	r9, r0
 80121ce:	d142      	bne.n	8012256 <_malloc_r+0xea>
 80121d0:	6821      	ldr	r1, [r4, #0]
 80121d2:	1a6d      	subs	r5, r5, r1
 80121d4:	4629      	mov	r1, r5
 80121d6:	4630      	mov	r0, r6
 80121d8:	f7ff ffa6 	bl	8012128 <sbrk_aligned>
 80121dc:	3001      	adds	r0, #1
 80121de:	d03a      	beq.n	8012256 <_malloc_r+0xea>
 80121e0:	6823      	ldr	r3, [r4, #0]
 80121e2:	442b      	add	r3, r5
 80121e4:	6023      	str	r3, [r4, #0]
 80121e6:	f8d8 3000 	ldr.w	r3, [r8]
 80121ea:	685a      	ldr	r2, [r3, #4]
 80121ec:	bb62      	cbnz	r2, 8012248 <_malloc_r+0xdc>
 80121ee:	f8c8 7000 	str.w	r7, [r8]
 80121f2:	e00f      	b.n	8012214 <_malloc_r+0xa8>
 80121f4:	6822      	ldr	r2, [r4, #0]
 80121f6:	1b52      	subs	r2, r2, r5
 80121f8:	d420      	bmi.n	801223c <_malloc_r+0xd0>
 80121fa:	2a0b      	cmp	r2, #11
 80121fc:	d917      	bls.n	801222e <_malloc_r+0xc2>
 80121fe:	1961      	adds	r1, r4, r5
 8012200:	42a3      	cmp	r3, r4
 8012202:	6025      	str	r5, [r4, #0]
 8012204:	bf18      	it	ne
 8012206:	6059      	strne	r1, [r3, #4]
 8012208:	6863      	ldr	r3, [r4, #4]
 801220a:	bf08      	it	eq
 801220c:	f8c8 1000 	streq.w	r1, [r8]
 8012210:	5162      	str	r2, [r4, r5]
 8012212:	604b      	str	r3, [r1, #4]
 8012214:	4630      	mov	r0, r6
 8012216:	f000 f9bd 	bl	8012594 <__malloc_unlock>
 801221a:	f104 000b 	add.w	r0, r4, #11
 801221e:	1d23      	adds	r3, r4, #4
 8012220:	f020 0007 	bic.w	r0, r0, #7
 8012224:	1ac2      	subs	r2, r0, r3
 8012226:	bf1c      	itt	ne
 8012228:	1a1b      	subne	r3, r3, r0
 801222a:	50a3      	strne	r3, [r4, r2]
 801222c:	e7af      	b.n	801218e <_malloc_r+0x22>
 801222e:	6862      	ldr	r2, [r4, #4]
 8012230:	42a3      	cmp	r3, r4
 8012232:	bf0c      	ite	eq
 8012234:	f8c8 2000 	streq.w	r2, [r8]
 8012238:	605a      	strne	r2, [r3, #4]
 801223a:	e7eb      	b.n	8012214 <_malloc_r+0xa8>
 801223c:	4623      	mov	r3, r4
 801223e:	6864      	ldr	r4, [r4, #4]
 8012240:	e7ae      	b.n	80121a0 <_malloc_r+0x34>
 8012242:	463c      	mov	r4, r7
 8012244:	687f      	ldr	r7, [r7, #4]
 8012246:	e7b6      	b.n	80121b6 <_malloc_r+0x4a>
 8012248:	461a      	mov	r2, r3
 801224a:	685b      	ldr	r3, [r3, #4]
 801224c:	42a3      	cmp	r3, r4
 801224e:	d1fb      	bne.n	8012248 <_malloc_r+0xdc>
 8012250:	2300      	movs	r3, #0
 8012252:	6053      	str	r3, [r2, #4]
 8012254:	e7de      	b.n	8012214 <_malloc_r+0xa8>
 8012256:	230c      	movs	r3, #12
 8012258:	6033      	str	r3, [r6, #0]
 801225a:	4630      	mov	r0, r6
 801225c:	f000 f99a 	bl	8012594 <__malloc_unlock>
 8012260:	e794      	b.n	801218c <_malloc_r+0x20>
 8012262:	6005      	str	r5, [r0, #0]
 8012264:	e7d6      	b.n	8012214 <_malloc_r+0xa8>
 8012266:	bf00      	nop
 8012268:	200015c8 	.word	0x200015c8

0801226c <_printf_common>:
 801226c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012270:	4616      	mov	r6, r2
 8012272:	4698      	mov	r8, r3
 8012274:	688a      	ldr	r2, [r1, #8]
 8012276:	690b      	ldr	r3, [r1, #16]
 8012278:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801227c:	4293      	cmp	r3, r2
 801227e:	bfb8      	it	lt
 8012280:	4613      	movlt	r3, r2
 8012282:	6033      	str	r3, [r6, #0]
 8012284:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012288:	4607      	mov	r7, r0
 801228a:	460c      	mov	r4, r1
 801228c:	b10a      	cbz	r2, 8012292 <_printf_common+0x26>
 801228e:	3301      	adds	r3, #1
 8012290:	6033      	str	r3, [r6, #0]
 8012292:	6823      	ldr	r3, [r4, #0]
 8012294:	0699      	lsls	r1, r3, #26
 8012296:	bf42      	ittt	mi
 8012298:	6833      	ldrmi	r3, [r6, #0]
 801229a:	3302      	addmi	r3, #2
 801229c:	6033      	strmi	r3, [r6, #0]
 801229e:	6825      	ldr	r5, [r4, #0]
 80122a0:	f015 0506 	ands.w	r5, r5, #6
 80122a4:	d106      	bne.n	80122b4 <_printf_common+0x48>
 80122a6:	f104 0a19 	add.w	sl, r4, #25
 80122aa:	68e3      	ldr	r3, [r4, #12]
 80122ac:	6832      	ldr	r2, [r6, #0]
 80122ae:	1a9b      	subs	r3, r3, r2
 80122b0:	42ab      	cmp	r3, r5
 80122b2:	dc26      	bgt.n	8012302 <_printf_common+0x96>
 80122b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80122b8:	6822      	ldr	r2, [r4, #0]
 80122ba:	3b00      	subs	r3, #0
 80122bc:	bf18      	it	ne
 80122be:	2301      	movne	r3, #1
 80122c0:	0692      	lsls	r2, r2, #26
 80122c2:	d42b      	bmi.n	801231c <_printf_common+0xb0>
 80122c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80122c8:	4641      	mov	r1, r8
 80122ca:	4638      	mov	r0, r7
 80122cc:	47c8      	blx	r9
 80122ce:	3001      	adds	r0, #1
 80122d0:	d01e      	beq.n	8012310 <_printf_common+0xa4>
 80122d2:	6823      	ldr	r3, [r4, #0]
 80122d4:	6922      	ldr	r2, [r4, #16]
 80122d6:	f003 0306 	and.w	r3, r3, #6
 80122da:	2b04      	cmp	r3, #4
 80122dc:	bf02      	ittt	eq
 80122de:	68e5      	ldreq	r5, [r4, #12]
 80122e0:	6833      	ldreq	r3, [r6, #0]
 80122e2:	1aed      	subeq	r5, r5, r3
 80122e4:	68a3      	ldr	r3, [r4, #8]
 80122e6:	bf0c      	ite	eq
 80122e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80122ec:	2500      	movne	r5, #0
 80122ee:	4293      	cmp	r3, r2
 80122f0:	bfc4      	itt	gt
 80122f2:	1a9b      	subgt	r3, r3, r2
 80122f4:	18ed      	addgt	r5, r5, r3
 80122f6:	2600      	movs	r6, #0
 80122f8:	341a      	adds	r4, #26
 80122fa:	42b5      	cmp	r5, r6
 80122fc:	d11a      	bne.n	8012334 <_printf_common+0xc8>
 80122fe:	2000      	movs	r0, #0
 8012300:	e008      	b.n	8012314 <_printf_common+0xa8>
 8012302:	2301      	movs	r3, #1
 8012304:	4652      	mov	r2, sl
 8012306:	4641      	mov	r1, r8
 8012308:	4638      	mov	r0, r7
 801230a:	47c8      	blx	r9
 801230c:	3001      	adds	r0, #1
 801230e:	d103      	bne.n	8012318 <_printf_common+0xac>
 8012310:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012318:	3501      	adds	r5, #1
 801231a:	e7c6      	b.n	80122aa <_printf_common+0x3e>
 801231c:	18e1      	adds	r1, r4, r3
 801231e:	1c5a      	adds	r2, r3, #1
 8012320:	2030      	movs	r0, #48	@ 0x30
 8012322:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012326:	4422      	add	r2, r4
 8012328:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801232c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012330:	3302      	adds	r3, #2
 8012332:	e7c7      	b.n	80122c4 <_printf_common+0x58>
 8012334:	2301      	movs	r3, #1
 8012336:	4622      	mov	r2, r4
 8012338:	4641      	mov	r1, r8
 801233a:	4638      	mov	r0, r7
 801233c:	47c8      	blx	r9
 801233e:	3001      	adds	r0, #1
 8012340:	d0e6      	beq.n	8012310 <_printf_common+0xa4>
 8012342:	3601      	adds	r6, #1
 8012344:	e7d9      	b.n	80122fa <_printf_common+0x8e>
	...

08012348 <_printf_i>:
 8012348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801234c:	7e0f      	ldrb	r7, [r1, #24]
 801234e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012350:	2f78      	cmp	r7, #120	@ 0x78
 8012352:	4691      	mov	r9, r2
 8012354:	4680      	mov	r8, r0
 8012356:	460c      	mov	r4, r1
 8012358:	469a      	mov	sl, r3
 801235a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801235e:	d807      	bhi.n	8012370 <_printf_i+0x28>
 8012360:	2f62      	cmp	r7, #98	@ 0x62
 8012362:	d80a      	bhi.n	801237a <_printf_i+0x32>
 8012364:	2f00      	cmp	r7, #0
 8012366:	f000 80d2 	beq.w	801250e <_printf_i+0x1c6>
 801236a:	2f58      	cmp	r7, #88	@ 0x58
 801236c:	f000 80b9 	beq.w	80124e2 <_printf_i+0x19a>
 8012370:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012374:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012378:	e03a      	b.n	80123f0 <_printf_i+0xa8>
 801237a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801237e:	2b15      	cmp	r3, #21
 8012380:	d8f6      	bhi.n	8012370 <_printf_i+0x28>
 8012382:	a101      	add	r1, pc, #4	@ (adr r1, 8012388 <_printf_i+0x40>)
 8012384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012388:	080123e1 	.word	0x080123e1
 801238c:	080123f5 	.word	0x080123f5
 8012390:	08012371 	.word	0x08012371
 8012394:	08012371 	.word	0x08012371
 8012398:	08012371 	.word	0x08012371
 801239c:	08012371 	.word	0x08012371
 80123a0:	080123f5 	.word	0x080123f5
 80123a4:	08012371 	.word	0x08012371
 80123a8:	08012371 	.word	0x08012371
 80123ac:	08012371 	.word	0x08012371
 80123b0:	08012371 	.word	0x08012371
 80123b4:	080124f5 	.word	0x080124f5
 80123b8:	0801241f 	.word	0x0801241f
 80123bc:	080124af 	.word	0x080124af
 80123c0:	08012371 	.word	0x08012371
 80123c4:	08012371 	.word	0x08012371
 80123c8:	08012517 	.word	0x08012517
 80123cc:	08012371 	.word	0x08012371
 80123d0:	0801241f 	.word	0x0801241f
 80123d4:	08012371 	.word	0x08012371
 80123d8:	08012371 	.word	0x08012371
 80123dc:	080124b7 	.word	0x080124b7
 80123e0:	6833      	ldr	r3, [r6, #0]
 80123e2:	1d1a      	adds	r2, r3, #4
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	6032      	str	r2, [r6, #0]
 80123e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80123ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80123f0:	2301      	movs	r3, #1
 80123f2:	e09d      	b.n	8012530 <_printf_i+0x1e8>
 80123f4:	6833      	ldr	r3, [r6, #0]
 80123f6:	6820      	ldr	r0, [r4, #0]
 80123f8:	1d19      	adds	r1, r3, #4
 80123fa:	6031      	str	r1, [r6, #0]
 80123fc:	0606      	lsls	r6, r0, #24
 80123fe:	d501      	bpl.n	8012404 <_printf_i+0xbc>
 8012400:	681d      	ldr	r5, [r3, #0]
 8012402:	e003      	b.n	801240c <_printf_i+0xc4>
 8012404:	0645      	lsls	r5, r0, #25
 8012406:	d5fb      	bpl.n	8012400 <_printf_i+0xb8>
 8012408:	f9b3 5000 	ldrsh.w	r5, [r3]
 801240c:	2d00      	cmp	r5, #0
 801240e:	da03      	bge.n	8012418 <_printf_i+0xd0>
 8012410:	232d      	movs	r3, #45	@ 0x2d
 8012412:	426d      	negs	r5, r5
 8012414:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012418:	4859      	ldr	r0, [pc, #356]	@ (8012580 <_printf_i+0x238>)
 801241a:	230a      	movs	r3, #10
 801241c:	e011      	b.n	8012442 <_printf_i+0xfa>
 801241e:	6821      	ldr	r1, [r4, #0]
 8012420:	6833      	ldr	r3, [r6, #0]
 8012422:	0608      	lsls	r0, r1, #24
 8012424:	f853 5b04 	ldr.w	r5, [r3], #4
 8012428:	d402      	bmi.n	8012430 <_printf_i+0xe8>
 801242a:	0649      	lsls	r1, r1, #25
 801242c:	bf48      	it	mi
 801242e:	b2ad      	uxthmi	r5, r5
 8012430:	2f6f      	cmp	r7, #111	@ 0x6f
 8012432:	4853      	ldr	r0, [pc, #332]	@ (8012580 <_printf_i+0x238>)
 8012434:	6033      	str	r3, [r6, #0]
 8012436:	bf14      	ite	ne
 8012438:	230a      	movne	r3, #10
 801243a:	2308      	moveq	r3, #8
 801243c:	2100      	movs	r1, #0
 801243e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012442:	6866      	ldr	r6, [r4, #4]
 8012444:	60a6      	str	r6, [r4, #8]
 8012446:	2e00      	cmp	r6, #0
 8012448:	bfa2      	ittt	ge
 801244a:	6821      	ldrge	r1, [r4, #0]
 801244c:	f021 0104 	bicge.w	r1, r1, #4
 8012450:	6021      	strge	r1, [r4, #0]
 8012452:	b90d      	cbnz	r5, 8012458 <_printf_i+0x110>
 8012454:	2e00      	cmp	r6, #0
 8012456:	d04b      	beq.n	80124f0 <_printf_i+0x1a8>
 8012458:	4616      	mov	r6, r2
 801245a:	fbb5 f1f3 	udiv	r1, r5, r3
 801245e:	fb03 5711 	mls	r7, r3, r1, r5
 8012462:	5dc7      	ldrb	r7, [r0, r7]
 8012464:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012468:	462f      	mov	r7, r5
 801246a:	42bb      	cmp	r3, r7
 801246c:	460d      	mov	r5, r1
 801246e:	d9f4      	bls.n	801245a <_printf_i+0x112>
 8012470:	2b08      	cmp	r3, #8
 8012472:	d10b      	bne.n	801248c <_printf_i+0x144>
 8012474:	6823      	ldr	r3, [r4, #0]
 8012476:	07df      	lsls	r7, r3, #31
 8012478:	d508      	bpl.n	801248c <_printf_i+0x144>
 801247a:	6923      	ldr	r3, [r4, #16]
 801247c:	6861      	ldr	r1, [r4, #4]
 801247e:	4299      	cmp	r1, r3
 8012480:	bfde      	ittt	le
 8012482:	2330      	movle	r3, #48	@ 0x30
 8012484:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012488:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801248c:	1b92      	subs	r2, r2, r6
 801248e:	6122      	str	r2, [r4, #16]
 8012490:	f8cd a000 	str.w	sl, [sp]
 8012494:	464b      	mov	r3, r9
 8012496:	aa03      	add	r2, sp, #12
 8012498:	4621      	mov	r1, r4
 801249a:	4640      	mov	r0, r8
 801249c:	f7ff fee6 	bl	801226c <_printf_common>
 80124a0:	3001      	adds	r0, #1
 80124a2:	d14a      	bne.n	801253a <_printf_i+0x1f2>
 80124a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80124a8:	b004      	add	sp, #16
 80124aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124ae:	6823      	ldr	r3, [r4, #0]
 80124b0:	f043 0320 	orr.w	r3, r3, #32
 80124b4:	6023      	str	r3, [r4, #0]
 80124b6:	4833      	ldr	r0, [pc, #204]	@ (8012584 <_printf_i+0x23c>)
 80124b8:	2778      	movs	r7, #120	@ 0x78
 80124ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80124be:	6823      	ldr	r3, [r4, #0]
 80124c0:	6831      	ldr	r1, [r6, #0]
 80124c2:	061f      	lsls	r7, r3, #24
 80124c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80124c8:	d402      	bmi.n	80124d0 <_printf_i+0x188>
 80124ca:	065f      	lsls	r7, r3, #25
 80124cc:	bf48      	it	mi
 80124ce:	b2ad      	uxthmi	r5, r5
 80124d0:	6031      	str	r1, [r6, #0]
 80124d2:	07d9      	lsls	r1, r3, #31
 80124d4:	bf44      	itt	mi
 80124d6:	f043 0320 	orrmi.w	r3, r3, #32
 80124da:	6023      	strmi	r3, [r4, #0]
 80124dc:	b11d      	cbz	r5, 80124e6 <_printf_i+0x19e>
 80124de:	2310      	movs	r3, #16
 80124e0:	e7ac      	b.n	801243c <_printf_i+0xf4>
 80124e2:	4827      	ldr	r0, [pc, #156]	@ (8012580 <_printf_i+0x238>)
 80124e4:	e7e9      	b.n	80124ba <_printf_i+0x172>
 80124e6:	6823      	ldr	r3, [r4, #0]
 80124e8:	f023 0320 	bic.w	r3, r3, #32
 80124ec:	6023      	str	r3, [r4, #0]
 80124ee:	e7f6      	b.n	80124de <_printf_i+0x196>
 80124f0:	4616      	mov	r6, r2
 80124f2:	e7bd      	b.n	8012470 <_printf_i+0x128>
 80124f4:	6833      	ldr	r3, [r6, #0]
 80124f6:	6825      	ldr	r5, [r4, #0]
 80124f8:	6961      	ldr	r1, [r4, #20]
 80124fa:	1d18      	adds	r0, r3, #4
 80124fc:	6030      	str	r0, [r6, #0]
 80124fe:	062e      	lsls	r6, r5, #24
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	d501      	bpl.n	8012508 <_printf_i+0x1c0>
 8012504:	6019      	str	r1, [r3, #0]
 8012506:	e002      	b.n	801250e <_printf_i+0x1c6>
 8012508:	0668      	lsls	r0, r5, #25
 801250a:	d5fb      	bpl.n	8012504 <_printf_i+0x1bc>
 801250c:	8019      	strh	r1, [r3, #0]
 801250e:	2300      	movs	r3, #0
 8012510:	6123      	str	r3, [r4, #16]
 8012512:	4616      	mov	r6, r2
 8012514:	e7bc      	b.n	8012490 <_printf_i+0x148>
 8012516:	6833      	ldr	r3, [r6, #0]
 8012518:	1d1a      	adds	r2, r3, #4
 801251a:	6032      	str	r2, [r6, #0]
 801251c:	681e      	ldr	r6, [r3, #0]
 801251e:	6862      	ldr	r2, [r4, #4]
 8012520:	2100      	movs	r1, #0
 8012522:	4630      	mov	r0, r6
 8012524:	f7ed fe7c 	bl	8000220 <memchr>
 8012528:	b108      	cbz	r0, 801252e <_printf_i+0x1e6>
 801252a:	1b80      	subs	r0, r0, r6
 801252c:	6060      	str	r0, [r4, #4]
 801252e:	6863      	ldr	r3, [r4, #4]
 8012530:	6123      	str	r3, [r4, #16]
 8012532:	2300      	movs	r3, #0
 8012534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012538:	e7aa      	b.n	8012490 <_printf_i+0x148>
 801253a:	6923      	ldr	r3, [r4, #16]
 801253c:	4632      	mov	r2, r6
 801253e:	4649      	mov	r1, r9
 8012540:	4640      	mov	r0, r8
 8012542:	47d0      	blx	sl
 8012544:	3001      	adds	r0, #1
 8012546:	d0ad      	beq.n	80124a4 <_printf_i+0x15c>
 8012548:	6823      	ldr	r3, [r4, #0]
 801254a:	079b      	lsls	r3, r3, #30
 801254c:	d413      	bmi.n	8012576 <_printf_i+0x22e>
 801254e:	68e0      	ldr	r0, [r4, #12]
 8012550:	9b03      	ldr	r3, [sp, #12]
 8012552:	4298      	cmp	r0, r3
 8012554:	bfb8      	it	lt
 8012556:	4618      	movlt	r0, r3
 8012558:	e7a6      	b.n	80124a8 <_printf_i+0x160>
 801255a:	2301      	movs	r3, #1
 801255c:	4632      	mov	r2, r6
 801255e:	4649      	mov	r1, r9
 8012560:	4640      	mov	r0, r8
 8012562:	47d0      	blx	sl
 8012564:	3001      	adds	r0, #1
 8012566:	d09d      	beq.n	80124a4 <_printf_i+0x15c>
 8012568:	3501      	adds	r5, #1
 801256a:	68e3      	ldr	r3, [r4, #12]
 801256c:	9903      	ldr	r1, [sp, #12]
 801256e:	1a5b      	subs	r3, r3, r1
 8012570:	42ab      	cmp	r3, r5
 8012572:	dcf2      	bgt.n	801255a <_printf_i+0x212>
 8012574:	e7eb      	b.n	801254e <_printf_i+0x206>
 8012576:	2500      	movs	r5, #0
 8012578:	f104 0619 	add.w	r6, r4, #25
 801257c:	e7f5      	b.n	801256a <_printf_i+0x222>
 801257e:	bf00      	nop
 8012580:	080158fe 	.word	0x080158fe
 8012584:	0801590f 	.word	0x0801590f

08012588 <__malloc_lock>:
 8012588:	4801      	ldr	r0, [pc, #4]	@ (8012590 <__malloc_lock+0x8>)
 801258a:	f7f0 bd22 	b.w	8002fd2 <__retarget_lock_acquire_recursive>
 801258e:	bf00      	nop
 8012590:	200008a4 	.word	0x200008a4

08012594 <__malloc_unlock>:
 8012594:	4801      	ldr	r0, [pc, #4]	@ (801259c <__malloc_unlock+0x8>)
 8012596:	f7f0 bd31 	b.w	8002ffc <__retarget_lock_release_recursive>
 801259a:	bf00      	nop
 801259c:	200008a4 	.word	0x200008a4

080125a0 <siprintf>:
 80125a0:	b40e      	push	{r1, r2, r3}
 80125a2:	b500      	push	{lr}
 80125a4:	b09c      	sub	sp, #112	@ 0x70
 80125a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80125a8:	9002      	str	r0, [sp, #8]
 80125aa:	9006      	str	r0, [sp, #24]
 80125ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80125b0:	4809      	ldr	r0, [pc, #36]	@ (80125d8 <siprintf+0x38>)
 80125b2:	9107      	str	r1, [sp, #28]
 80125b4:	9104      	str	r1, [sp, #16]
 80125b6:	4909      	ldr	r1, [pc, #36]	@ (80125dc <siprintf+0x3c>)
 80125b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80125bc:	9105      	str	r1, [sp, #20]
 80125be:	6800      	ldr	r0, [r0, #0]
 80125c0:	9301      	str	r3, [sp, #4]
 80125c2:	a902      	add	r1, sp, #8
 80125c4:	f001 f826 	bl	8013614 <_svfiprintf_r>
 80125c8:	9b02      	ldr	r3, [sp, #8]
 80125ca:	2200      	movs	r2, #0
 80125cc:	701a      	strb	r2, [r3, #0]
 80125ce:	b01c      	add	sp, #112	@ 0x70
 80125d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80125d4:	b003      	add	sp, #12
 80125d6:	4770      	bx	lr
 80125d8:	200000ec 	.word	0x200000ec
 80125dc:	ffff0208 	.word	0xffff0208

080125e0 <std>:
 80125e0:	2300      	movs	r3, #0
 80125e2:	b510      	push	{r4, lr}
 80125e4:	4604      	mov	r4, r0
 80125e6:	e9c0 3300 	strd	r3, r3, [r0]
 80125ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80125ee:	6083      	str	r3, [r0, #8]
 80125f0:	8181      	strh	r1, [r0, #12]
 80125f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80125f4:	81c2      	strh	r2, [r0, #14]
 80125f6:	6183      	str	r3, [r0, #24]
 80125f8:	4619      	mov	r1, r3
 80125fa:	2208      	movs	r2, #8
 80125fc:	305c      	adds	r0, #92	@ 0x5c
 80125fe:	f000 f8c3 	bl	8012788 <memset>
 8012602:	4b0d      	ldr	r3, [pc, #52]	@ (8012638 <std+0x58>)
 8012604:	6263      	str	r3, [r4, #36]	@ 0x24
 8012606:	4b0d      	ldr	r3, [pc, #52]	@ (801263c <std+0x5c>)
 8012608:	62a3      	str	r3, [r4, #40]	@ 0x28
 801260a:	4b0d      	ldr	r3, [pc, #52]	@ (8012640 <std+0x60>)
 801260c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801260e:	4b0d      	ldr	r3, [pc, #52]	@ (8012644 <std+0x64>)
 8012610:	6323      	str	r3, [r4, #48]	@ 0x30
 8012612:	4b0d      	ldr	r3, [pc, #52]	@ (8012648 <std+0x68>)
 8012614:	6224      	str	r4, [r4, #32]
 8012616:	429c      	cmp	r4, r3
 8012618:	d006      	beq.n	8012628 <std+0x48>
 801261a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801261e:	4294      	cmp	r4, r2
 8012620:	d002      	beq.n	8012628 <std+0x48>
 8012622:	33d0      	adds	r3, #208	@ 0xd0
 8012624:	429c      	cmp	r4, r3
 8012626:	d105      	bne.n	8012634 <std+0x54>
 8012628:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801262c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012630:	f7f0 bca8 	b.w	8002f84 <__retarget_lock_init_recursive>
 8012634:	bd10      	pop	{r4, pc}
 8012636:	bf00      	nop
 8012638:	080142ed 	.word	0x080142ed
 801263c:	0801430f 	.word	0x0801430f
 8012640:	08014347 	.word	0x08014347
 8012644:	0801436b 	.word	0x0801436b
 8012648:	200015cc 	.word	0x200015cc

0801264c <stdio_exit_handler>:
 801264c:	4a02      	ldr	r2, [pc, #8]	@ (8012658 <stdio_exit_handler+0xc>)
 801264e:	4903      	ldr	r1, [pc, #12]	@ (801265c <stdio_exit_handler+0x10>)
 8012650:	4803      	ldr	r0, [pc, #12]	@ (8012660 <stdio_exit_handler+0x14>)
 8012652:	f000 b869 	b.w	8012728 <_fwalk_sglue>
 8012656:	bf00      	nop
 8012658:	200000e0 	.word	0x200000e0
 801265c:	08013b99 	.word	0x08013b99
 8012660:	200000f0 	.word	0x200000f0

08012664 <cleanup_stdio>:
 8012664:	6841      	ldr	r1, [r0, #4]
 8012666:	4b0c      	ldr	r3, [pc, #48]	@ (8012698 <cleanup_stdio+0x34>)
 8012668:	4299      	cmp	r1, r3
 801266a:	b510      	push	{r4, lr}
 801266c:	4604      	mov	r4, r0
 801266e:	d001      	beq.n	8012674 <cleanup_stdio+0x10>
 8012670:	f001 fa92 	bl	8013b98 <_fflush_r>
 8012674:	68a1      	ldr	r1, [r4, #8]
 8012676:	4b09      	ldr	r3, [pc, #36]	@ (801269c <cleanup_stdio+0x38>)
 8012678:	4299      	cmp	r1, r3
 801267a:	d002      	beq.n	8012682 <cleanup_stdio+0x1e>
 801267c:	4620      	mov	r0, r4
 801267e:	f001 fa8b 	bl	8013b98 <_fflush_r>
 8012682:	68e1      	ldr	r1, [r4, #12]
 8012684:	4b06      	ldr	r3, [pc, #24]	@ (80126a0 <cleanup_stdio+0x3c>)
 8012686:	4299      	cmp	r1, r3
 8012688:	d004      	beq.n	8012694 <cleanup_stdio+0x30>
 801268a:	4620      	mov	r0, r4
 801268c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012690:	f001 ba82 	b.w	8013b98 <_fflush_r>
 8012694:	bd10      	pop	{r4, pc}
 8012696:	bf00      	nop
 8012698:	200015cc 	.word	0x200015cc
 801269c:	20001634 	.word	0x20001634
 80126a0:	2000169c 	.word	0x2000169c

080126a4 <global_stdio_init.part.0>:
 80126a4:	b510      	push	{r4, lr}
 80126a6:	4b0b      	ldr	r3, [pc, #44]	@ (80126d4 <global_stdio_init.part.0+0x30>)
 80126a8:	4c0b      	ldr	r4, [pc, #44]	@ (80126d8 <global_stdio_init.part.0+0x34>)
 80126aa:	4a0c      	ldr	r2, [pc, #48]	@ (80126dc <global_stdio_init.part.0+0x38>)
 80126ac:	601a      	str	r2, [r3, #0]
 80126ae:	4620      	mov	r0, r4
 80126b0:	2200      	movs	r2, #0
 80126b2:	2104      	movs	r1, #4
 80126b4:	f7ff ff94 	bl	80125e0 <std>
 80126b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80126bc:	2201      	movs	r2, #1
 80126be:	2109      	movs	r1, #9
 80126c0:	f7ff ff8e 	bl	80125e0 <std>
 80126c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80126c8:	2202      	movs	r2, #2
 80126ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126ce:	2112      	movs	r1, #18
 80126d0:	f7ff bf86 	b.w	80125e0 <std>
 80126d4:	20001704 	.word	0x20001704
 80126d8:	200015cc 	.word	0x200015cc
 80126dc:	0801264d 	.word	0x0801264d

080126e0 <__sfp_lock_acquire>:
 80126e0:	4801      	ldr	r0, [pc, #4]	@ (80126e8 <__sfp_lock_acquire+0x8>)
 80126e2:	f7f0 bc76 	b.w	8002fd2 <__retarget_lock_acquire_recursive>
 80126e6:	bf00      	nop
 80126e8:	200008a0 	.word	0x200008a0

080126ec <__sfp_lock_release>:
 80126ec:	4801      	ldr	r0, [pc, #4]	@ (80126f4 <__sfp_lock_release+0x8>)
 80126ee:	f7f0 bc85 	b.w	8002ffc <__retarget_lock_release_recursive>
 80126f2:	bf00      	nop
 80126f4:	200008a0 	.word	0x200008a0

080126f8 <__sinit>:
 80126f8:	b510      	push	{r4, lr}
 80126fa:	4604      	mov	r4, r0
 80126fc:	f7ff fff0 	bl	80126e0 <__sfp_lock_acquire>
 8012700:	6a23      	ldr	r3, [r4, #32]
 8012702:	b11b      	cbz	r3, 801270c <__sinit+0x14>
 8012704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012708:	f7ff bff0 	b.w	80126ec <__sfp_lock_release>
 801270c:	4b04      	ldr	r3, [pc, #16]	@ (8012720 <__sinit+0x28>)
 801270e:	6223      	str	r3, [r4, #32]
 8012710:	4b04      	ldr	r3, [pc, #16]	@ (8012724 <__sinit+0x2c>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d1f5      	bne.n	8012704 <__sinit+0xc>
 8012718:	f7ff ffc4 	bl	80126a4 <global_stdio_init.part.0>
 801271c:	e7f2      	b.n	8012704 <__sinit+0xc>
 801271e:	bf00      	nop
 8012720:	08012665 	.word	0x08012665
 8012724:	20001704 	.word	0x20001704

08012728 <_fwalk_sglue>:
 8012728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801272c:	4607      	mov	r7, r0
 801272e:	4688      	mov	r8, r1
 8012730:	4614      	mov	r4, r2
 8012732:	2600      	movs	r6, #0
 8012734:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012738:	f1b9 0901 	subs.w	r9, r9, #1
 801273c:	d505      	bpl.n	801274a <_fwalk_sglue+0x22>
 801273e:	6824      	ldr	r4, [r4, #0]
 8012740:	2c00      	cmp	r4, #0
 8012742:	d1f7      	bne.n	8012734 <_fwalk_sglue+0xc>
 8012744:	4630      	mov	r0, r6
 8012746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801274a:	89ab      	ldrh	r3, [r5, #12]
 801274c:	2b01      	cmp	r3, #1
 801274e:	d907      	bls.n	8012760 <_fwalk_sglue+0x38>
 8012750:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012754:	3301      	adds	r3, #1
 8012756:	d003      	beq.n	8012760 <_fwalk_sglue+0x38>
 8012758:	4629      	mov	r1, r5
 801275a:	4638      	mov	r0, r7
 801275c:	47c0      	blx	r8
 801275e:	4306      	orrs	r6, r0
 8012760:	3568      	adds	r5, #104	@ 0x68
 8012762:	e7e9      	b.n	8012738 <_fwalk_sglue+0x10>

08012764 <iprintf>:
 8012764:	b40f      	push	{r0, r1, r2, r3}
 8012766:	b507      	push	{r0, r1, r2, lr}
 8012768:	4906      	ldr	r1, [pc, #24]	@ (8012784 <iprintf+0x20>)
 801276a:	ab04      	add	r3, sp, #16
 801276c:	6808      	ldr	r0, [r1, #0]
 801276e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012772:	6881      	ldr	r1, [r0, #8]
 8012774:	9301      	str	r3, [sp, #4]
 8012776:	f001 f873 	bl	8013860 <_vfiprintf_r>
 801277a:	b003      	add	sp, #12
 801277c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012780:	b004      	add	sp, #16
 8012782:	4770      	bx	lr
 8012784:	200000ec 	.word	0x200000ec

08012788 <memset>:
 8012788:	4402      	add	r2, r0
 801278a:	4603      	mov	r3, r0
 801278c:	4293      	cmp	r3, r2
 801278e:	d100      	bne.n	8012792 <memset+0xa>
 8012790:	4770      	bx	lr
 8012792:	f803 1b01 	strb.w	r1, [r3], #1
 8012796:	e7f9      	b.n	801278c <memset+0x4>

08012798 <_localeconv_r>:
 8012798:	4800      	ldr	r0, [pc, #0]	@ (801279c <_localeconv_r+0x4>)
 801279a:	4770      	bx	lr
 801279c:	2000022c 	.word	0x2000022c

080127a0 <_sbrk_r>:
 80127a0:	b538      	push	{r3, r4, r5, lr}
 80127a2:	4d06      	ldr	r5, [pc, #24]	@ (80127bc <_sbrk_r+0x1c>)
 80127a4:	2300      	movs	r3, #0
 80127a6:	4604      	mov	r4, r0
 80127a8:	4608      	mov	r0, r1
 80127aa:	602b      	str	r3, [r5, #0]
 80127ac:	f7f0 fafe 	bl	8002dac <_sbrk>
 80127b0:	1c43      	adds	r3, r0, #1
 80127b2:	d102      	bne.n	80127ba <_sbrk_r+0x1a>
 80127b4:	682b      	ldr	r3, [r5, #0]
 80127b6:	b103      	cbz	r3, 80127ba <_sbrk_r+0x1a>
 80127b8:	6023      	str	r3, [r4, #0]
 80127ba:	bd38      	pop	{r3, r4, r5, pc}
 80127bc:	20001708 	.word	0x20001708

080127c0 <__errno>:
 80127c0:	4b01      	ldr	r3, [pc, #4]	@ (80127c8 <__errno+0x8>)
 80127c2:	6818      	ldr	r0, [r3, #0]
 80127c4:	4770      	bx	lr
 80127c6:	bf00      	nop
 80127c8:	200000ec 	.word	0x200000ec

080127cc <__libc_init_array>:
 80127cc:	b570      	push	{r4, r5, r6, lr}
 80127ce:	4d0d      	ldr	r5, [pc, #52]	@ (8012804 <__libc_init_array+0x38>)
 80127d0:	4c0d      	ldr	r4, [pc, #52]	@ (8012808 <__libc_init_array+0x3c>)
 80127d2:	1b64      	subs	r4, r4, r5
 80127d4:	10a4      	asrs	r4, r4, #2
 80127d6:	2600      	movs	r6, #0
 80127d8:	42a6      	cmp	r6, r4
 80127da:	d109      	bne.n	80127f0 <__libc_init_array+0x24>
 80127dc:	4d0b      	ldr	r5, [pc, #44]	@ (801280c <__libc_init_array+0x40>)
 80127de:	4c0c      	ldr	r4, [pc, #48]	@ (8012810 <__libc_init_array+0x44>)
 80127e0:	f002 ff82 	bl	80156e8 <_init>
 80127e4:	1b64      	subs	r4, r4, r5
 80127e6:	10a4      	asrs	r4, r4, #2
 80127e8:	2600      	movs	r6, #0
 80127ea:	42a6      	cmp	r6, r4
 80127ec:	d105      	bne.n	80127fa <__libc_init_array+0x2e>
 80127ee:	bd70      	pop	{r4, r5, r6, pc}
 80127f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80127f4:	4798      	blx	r3
 80127f6:	3601      	adds	r6, #1
 80127f8:	e7ee      	b.n	80127d8 <__libc_init_array+0xc>
 80127fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80127fe:	4798      	blx	r3
 8012800:	3601      	adds	r6, #1
 8012802:	e7f2      	b.n	80127ea <__libc_init_array+0x1e>
 8012804:	08015c98 	.word	0x08015c98
 8012808:	08015c98 	.word	0x08015c98
 801280c:	08015c98 	.word	0x08015c98
 8012810:	08015c9c 	.word	0x08015c9c

08012814 <memcpy>:
 8012814:	440a      	add	r2, r1
 8012816:	4291      	cmp	r1, r2
 8012818:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801281c:	d100      	bne.n	8012820 <memcpy+0xc>
 801281e:	4770      	bx	lr
 8012820:	b510      	push	{r4, lr}
 8012822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012826:	f803 4f01 	strb.w	r4, [r3, #1]!
 801282a:	4291      	cmp	r1, r2
 801282c:	d1f9      	bne.n	8012822 <memcpy+0xe>
 801282e:	bd10      	pop	{r4, pc}

08012830 <quorem>:
 8012830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012834:	6903      	ldr	r3, [r0, #16]
 8012836:	690c      	ldr	r4, [r1, #16]
 8012838:	42a3      	cmp	r3, r4
 801283a:	4607      	mov	r7, r0
 801283c:	db7e      	blt.n	801293c <quorem+0x10c>
 801283e:	3c01      	subs	r4, #1
 8012840:	f101 0814 	add.w	r8, r1, #20
 8012844:	00a3      	lsls	r3, r4, #2
 8012846:	f100 0514 	add.w	r5, r0, #20
 801284a:	9300      	str	r3, [sp, #0]
 801284c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012850:	9301      	str	r3, [sp, #4]
 8012852:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012856:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801285a:	3301      	adds	r3, #1
 801285c:	429a      	cmp	r2, r3
 801285e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012862:	fbb2 f6f3 	udiv	r6, r2, r3
 8012866:	d32e      	bcc.n	80128c6 <quorem+0x96>
 8012868:	f04f 0a00 	mov.w	sl, #0
 801286c:	46c4      	mov	ip, r8
 801286e:	46ae      	mov	lr, r5
 8012870:	46d3      	mov	fp, sl
 8012872:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012876:	b298      	uxth	r0, r3
 8012878:	fb06 a000 	mla	r0, r6, r0, sl
 801287c:	0c02      	lsrs	r2, r0, #16
 801287e:	0c1b      	lsrs	r3, r3, #16
 8012880:	fb06 2303 	mla	r3, r6, r3, r2
 8012884:	f8de 2000 	ldr.w	r2, [lr]
 8012888:	b280      	uxth	r0, r0
 801288a:	b292      	uxth	r2, r2
 801288c:	1a12      	subs	r2, r2, r0
 801288e:	445a      	add	r2, fp
 8012890:	f8de 0000 	ldr.w	r0, [lr]
 8012894:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012898:	b29b      	uxth	r3, r3
 801289a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801289e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80128a2:	b292      	uxth	r2, r2
 80128a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80128a8:	45e1      	cmp	r9, ip
 80128aa:	f84e 2b04 	str.w	r2, [lr], #4
 80128ae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80128b2:	d2de      	bcs.n	8012872 <quorem+0x42>
 80128b4:	9b00      	ldr	r3, [sp, #0]
 80128b6:	58eb      	ldr	r3, [r5, r3]
 80128b8:	b92b      	cbnz	r3, 80128c6 <quorem+0x96>
 80128ba:	9b01      	ldr	r3, [sp, #4]
 80128bc:	3b04      	subs	r3, #4
 80128be:	429d      	cmp	r5, r3
 80128c0:	461a      	mov	r2, r3
 80128c2:	d32f      	bcc.n	8012924 <quorem+0xf4>
 80128c4:	613c      	str	r4, [r7, #16]
 80128c6:	4638      	mov	r0, r7
 80128c8:	f001 fc08 	bl	80140dc <__mcmp>
 80128cc:	2800      	cmp	r0, #0
 80128ce:	db25      	blt.n	801291c <quorem+0xec>
 80128d0:	4629      	mov	r1, r5
 80128d2:	2000      	movs	r0, #0
 80128d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80128d8:	f8d1 c000 	ldr.w	ip, [r1]
 80128dc:	fa1f fe82 	uxth.w	lr, r2
 80128e0:	fa1f f38c 	uxth.w	r3, ip
 80128e4:	eba3 030e 	sub.w	r3, r3, lr
 80128e8:	4403      	add	r3, r0
 80128ea:	0c12      	lsrs	r2, r2, #16
 80128ec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80128f0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80128f4:	b29b      	uxth	r3, r3
 80128f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80128fa:	45c1      	cmp	r9, r8
 80128fc:	f841 3b04 	str.w	r3, [r1], #4
 8012900:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012904:	d2e6      	bcs.n	80128d4 <quorem+0xa4>
 8012906:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801290a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801290e:	b922      	cbnz	r2, 801291a <quorem+0xea>
 8012910:	3b04      	subs	r3, #4
 8012912:	429d      	cmp	r5, r3
 8012914:	461a      	mov	r2, r3
 8012916:	d30b      	bcc.n	8012930 <quorem+0x100>
 8012918:	613c      	str	r4, [r7, #16]
 801291a:	3601      	adds	r6, #1
 801291c:	4630      	mov	r0, r6
 801291e:	b003      	add	sp, #12
 8012920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012924:	6812      	ldr	r2, [r2, #0]
 8012926:	3b04      	subs	r3, #4
 8012928:	2a00      	cmp	r2, #0
 801292a:	d1cb      	bne.n	80128c4 <quorem+0x94>
 801292c:	3c01      	subs	r4, #1
 801292e:	e7c6      	b.n	80128be <quorem+0x8e>
 8012930:	6812      	ldr	r2, [r2, #0]
 8012932:	3b04      	subs	r3, #4
 8012934:	2a00      	cmp	r2, #0
 8012936:	d1ef      	bne.n	8012918 <quorem+0xe8>
 8012938:	3c01      	subs	r4, #1
 801293a:	e7ea      	b.n	8012912 <quorem+0xe2>
 801293c:	2000      	movs	r0, #0
 801293e:	e7ee      	b.n	801291e <quorem+0xee>

08012940 <_dtoa_r>:
 8012940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012944:	69c7      	ldr	r7, [r0, #28]
 8012946:	b099      	sub	sp, #100	@ 0x64
 8012948:	ed8d 0b02 	vstr	d0, [sp, #8]
 801294c:	ec55 4b10 	vmov	r4, r5, d0
 8012950:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012952:	9109      	str	r1, [sp, #36]	@ 0x24
 8012954:	4683      	mov	fp, r0
 8012956:	920e      	str	r2, [sp, #56]	@ 0x38
 8012958:	9313      	str	r3, [sp, #76]	@ 0x4c
 801295a:	b97f      	cbnz	r7, 801297c <_dtoa_r+0x3c>
 801295c:	2010      	movs	r0, #16
 801295e:	f7ff fbdb 	bl	8012118 <malloc>
 8012962:	4602      	mov	r2, r0
 8012964:	f8cb 001c 	str.w	r0, [fp, #28]
 8012968:	b920      	cbnz	r0, 8012974 <_dtoa_r+0x34>
 801296a:	4ba7      	ldr	r3, [pc, #668]	@ (8012c08 <_dtoa_r+0x2c8>)
 801296c:	21ef      	movs	r1, #239	@ 0xef
 801296e:	48a7      	ldr	r0, [pc, #668]	@ (8012c0c <_dtoa_r+0x2cc>)
 8012970:	f001 fea6 	bl	80146c0 <__assert_func>
 8012974:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012978:	6007      	str	r7, [r0, #0]
 801297a:	60c7      	str	r7, [r0, #12]
 801297c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012980:	6819      	ldr	r1, [r3, #0]
 8012982:	b159      	cbz	r1, 801299c <_dtoa_r+0x5c>
 8012984:	685a      	ldr	r2, [r3, #4]
 8012986:	604a      	str	r2, [r1, #4]
 8012988:	2301      	movs	r3, #1
 801298a:	4093      	lsls	r3, r2
 801298c:	608b      	str	r3, [r1, #8]
 801298e:	4658      	mov	r0, fp
 8012990:	f001 f96a 	bl	8013c68 <_Bfree>
 8012994:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012998:	2200      	movs	r2, #0
 801299a:	601a      	str	r2, [r3, #0]
 801299c:	1e2b      	subs	r3, r5, #0
 801299e:	bfb9      	ittee	lt
 80129a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80129a4:	9303      	strlt	r3, [sp, #12]
 80129a6:	2300      	movge	r3, #0
 80129a8:	6033      	strge	r3, [r6, #0]
 80129aa:	9f03      	ldr	r7, [sp, #12]
 80129ac:	4b98      	ldr	r3, [pc, #608]	@ (8012c10 <_dtoa_r+0x2d0>)
 80129ae:	bfbc      	itt	lt
 80129b0:	2201      	movlt	r2, #1
 80129b2:	6032      	strlt	r2, [r6, #0]
 80129b4:	43bb      	bics	r3, r7
 80129b6:	d112      	bne.n	80129de <_dtoa_r+0x9e>
 80129b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80129ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80129be:	6013      	str	r3, [r2, #0]
 80129c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80129c4:	4323      	orrs	r3, r4
 80129c6:	f000 854d 	beq.w	8013464 <_dtoa_r+0xb24>
 80129ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80129cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012c24 <_dtoa_r+0x2e4>
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	f000 854f 	beq.w	8013474 <_dtoa_r+0xb34>
 80129d6:	f10a 0303 	add.w	r3, sl, #3
 80129da:	f000 bd49 	b.w	8013470 <_dtoa_r+0xb30>
 80129de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80129e2:	2200      	movs	r2, #0
 80129e4:	ec51 0b17 	vmov	r0, r1, d7
 80129e8:	2300      	movs	r3, #0
 80129ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80129ee:	f7ee f893 	bl	8000b18 <__aeabi_dcmpeq>
 80129f2:	4680      	mov	r8, r0
 80129f4:	b158      	cbz	r0, 8012a0e <_dtoa_r+0xce>
 80129f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80129f8:	2301      	movs	r3, #1
 80129fa:	6013      	str	r3, [r2, #0]
 80129fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80129fe:	b113      	cbz	r3, 8012a06 <_dtoa_r+0xc6>
 8012a00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012a02:	4b84      	ldr	r3, [pc, #528]	@ (8012c14 <_dtoa_r+0x2d4>)
 8012a04:	6013      	str	r3, [r2, #0]
 8012a06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012c28 <_dtoa_r+0x2e8>
 8012a0a:	f000 bd33 	b.w	8013474 <_dtoa_r+0xb34>
 8012a0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012a12:	aa16      	add	r2, sp, #88	@ 0x58
 8012a14:	a917      	add	r1, sp, #92	@ 0x5c
 8012a16:	4658      	mov	r0, fp
 8012a18:	f001 fc10 	bl	801423c <__d2b>
 8012a1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012a20:	4681      	mov	r9, r0
 8012a22:	2e00      	cmp	r6, #0
 8012a24:	d077      	beq.n	8012b16 <_dtoa_r+0x1d6>
 8012a26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012a28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012a30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012a34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012a38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012a3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012a40:	4619      	mov	r1, r3
 8012a42:	2200      	movs	r2, #0
 8012a44:	4b74      	ldr	r3, [pc, #464]	@ (8012c18 <_dtoa_r+0x2d8>)
 8012a46:	f7ed fc47 	bl	80002d8 <__aeabi_dsub>
 8012a4a:	a369      	add	r3, pc, #420	@ (adr r3, 8012bf0 <_dtoa_r+0x2b0>)
 8012a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a50:	f7ed fdfa 	bl	8000648 <__aeabi_dmul>
 8012a54:	a368      	add	r3, pc, #416	@ (adr r3, 8012bf8 <_dtoa_r+0x2b8>)
 8012a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a5a:	f7ed fc3f 	bl	80002dc <__adddf3>
 8012a5e:	4604      	mov	r4, r0
 8012a60:	4630      	mov	r0, r6
 8012a62:	460d      	mov	r5, r1
 8012a64:	f7ed fd86 	bl	8000574 <__aeabi_i2d>
 8012a68:	a365      	add	r3, pc, #404	@ (adr r3, 8012c00 <_dtoa_r+0x2c0>)
 8012a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a6e:	f7ed fdeb 	bl	8000648 <__aeabi_dmul>
 8012a72:	4602      	mov	r2, r0
 8012a74:	460b      	mov	r3, r1
 8012a76:	4620      	mov	r0, r4
 8012a78:	4629      	mov	r1, r5
 8012a7a:	f7ed fc2f 	bl	80002dc <__adddf3>
 8012a7e:	4604      	mov	r4, r0
 8012a80:	460d      	mov	r5, r1
 8012a82:	f7ee f891 	bl	8000ba8 <__aeabi_d2iz>
 8012a86:	2200      	movs	r2, #0
 8012a88:	4607      	mov	r7, r0
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	4620      	mov	r0, r4
 8012a8e:	4629      	mov	r1, r5
 8012a90:	f7ee f84c 	bl	8000b2c <__aeabi_dcmplt>
 8012a94:	b140      	cbz	r0, 8012aa8 <_dtoa_r+0x168>
 8012a96:	4638      	mov	r0, r7
 8012a98:	f7ed fd6c 	bl	8000574 <__aeabi_i2d>
 8012a9c:	4622      	mov	r2, r4
 8012a9e:	462b      	mov	r3, r5
 8012aa0:	f7ee f83a 	bl	8000b18 <__aeabi_dcmpeq>
 8012aa4:	b900      	cbnz	r0, 8012aa8 <_dtoa_r+0x168>
 8012aa6:	3f01      	subs	r7, #1
 8012aa8:	2f16      	cmp	r7, #22
 8012aaa:	d851      	bhi.n	8012b50 <_dtoa_r+0x210>
 8012aac:	4b5b      	ldr	r3, [pc, #364]	@ (8012c1c <_dtoa_r+0x2dc>)
 8012aae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012aba:	f7ee f837 	bl	8000b2c <__aeabi_dcmplt>
 8012abe:	2800      	cmp	r0, #0
 8012ac0:	d048      	beq.n	8012b54 <_dtoa_r+0x214>
 8012ac2:	3f01      	subs	r7, #1
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	9312      	str	r3, [sp, #72]	@ 0x48
 8012ac8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012aca:	1b9b      	subs	r3, r3, r6
 8012acc:	1e5a      	subs	r2, r3, #1
 8012ace:	bf44      	itt	mi
 8012ad0:	f1c3 0801 	rsbmi	r8, r3, #1
 8012ad4:	2300      	movmi	r3, #0
 8012ad6:	9208      	str	r2, [sp, #32]
 8012ad8:	bf54      	ite	pl
 8012ada:	f04f 0800 	movpl.w	r8, #0
 8012ade:	9308      	strmi	r3, [sp, #32]
 8012ae0:	2f00      	cmp	r7, #0
 8012ae2:	db39      	blt.n	8012b58 <_dtoa_r+0x218>
 8012ae4:	9b08      	ldr	r3, [sp, #32]
 8012ae6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012ae8:	443b      	add	r3, r7
 8012aea:	9308      	str	r3, [sp, #32]
 8012aec:	2300      	movs	r3, #0
 8012aee:	930a      	str	r3, [sp, #40]	@ 0x28
 8012af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012af2:	2b09      	cmp	r3, #9
 8012af4:	d864      	bhi.n	8012bc0 <_dtoa_r+0x280>
 8012af6:	2b05      	cmp	r3, #5
 8012af8:	bfc4      	itt	gt
 8012afa:	3b04      	subgt	r3, #4
 8012afc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b00:	f1a3 0302 	sub.w	r3, r3, #2
 8012b04:	bfcc      	ite	gt
 8012b06:	2400      	movgt	r4, #0
 8012b08:	2401      	movle	r4, #1
 8012b0a:	2b03      	cmp	r3, #3
 8012b0c:	d863      	bhi.n	8012bd6 <_dtoa_r+0x296>
 8012b0e:	e8df f003 	tbb	[pc, r3]
 8012b12:	372a      	.short	0x372a
 8012b14:	5535      	.short	0x5535
 8012b16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012b1a:	441e      	add	r6, r3
 8012b1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012b20:	2b20      	cmp	r3, #32
 8012b22:	bfc1      	itttt	gt
 8012b24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012b28:	409f      	lslgt	r7, r3
 8012b2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012b2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012b32:	bfd6      	itet	le
 8012b34:	f1c3 0320 	rsble	r3, r3, #32
 8012b38:	ea47 0003 	orrgt.w	r0, r7, r3
 8012b3c:	fa04 f003 	lslle.w	r0, r4, r3
 8012b40:	f7ed fd08 	bl	8000554 <__aeabi_ui2d>
 8012b44:	2201      	movs	r2, #1
 8012b46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012b4a:	3e01      	subs	r6, #1
 8012b4c:	9214      	str	r2, [sp, #80]	@ 0x50
 8012b4e:	e777      	b.n	8012a40 <_dtoa_r+0x100>
 8012b50:	2301      	movs	r3, #1
 8012b52:	e7b8      	b.n	8012ac6 <_dtoa_r+0x186>
 8012b54:	9012      	str	r0, [sp, #72]	@ 0x48
 8012b56:	e7b7      	b.n	8012ac8 <_dtoa_r+0x188>
 8012b58:	427b      	negs	r3, r7
 8012b5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	eba8 0807 	sub.w	r8, r8, r7
 8012b62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012b64:	e7c4      	b.n	8012af0 <_dtoa_r+0x1b0>
 8012b66:	2300      	movs	r3, #0
 8012b68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	dc35      	bgt.n	8012bdc <_dtoa_r+0x29c>
 8012b70:	2301      	movs	r3, #1
 8012b72:	9300      	str	r3, [sp, #0]
 8012b74:	9307      	str	r3, [sp, #28]
 8012b76:	461a      	mov	r2, r3
 8012b78:	920e      	str	r2, [sp, #56]	@ 0x38
 8012b7a:	e00b      	b.n	8012b94 <_dtoa_r+0x254>
 8012b7c:	2301      	movs	r3, #1
 8012b7e:	e7f3      	b.n	8012b68 <_dtoa_r+0x228>
 8012b80:	2300      	movs	r3, #0
 8012b82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b86:	18fb      	adds	r3, r7, r3
 8012b88:	9300      	str	r3, [sp, #0]
 8012b8a:	3301      	adds	r3, #1
 8012b8c:	2b01      	cmp	r3, #1
 8012b8e:	9307      	str	r3, [sp, #28]
 8012b90:	bfb8      	it	lt
 8012b92:	2301      	movlt	r3, #1
 8012b94:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012b98:	2100      	movs	r1, #0
 8012b9a:	2204      	movs	r2, #4
 8012b9c:	f102 0514 	add.w	r5, r2, #20
 8012ba0:	429d      	cmp	r5, r3
 8012ba2:	d91f      	bls.n	8012be4 <_dtoa_r+0x2a4>
 8012ba4:	6041      	str	r1, [r0, #4]
 8012ba6:	4658      	mov	r0, fp
 8012ba8:	f001 f81e 	bl	8013be8 <_Balloc>
 8012bac:	4682      	mov	sl, r0
 8012bae:	2800      	cmp	r0, #0
 8012bb0:	d13c      	bne.n	8012c2c <_dtoa_r+0x2ec>
 8012bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8012c20 <_dtoa_r+0x2e0>)
 8012bb4:	4602      	mov	r2, r0
 8012bb6:	f240 11af 	movw	r1, #431	@ 0x1af
 8012bba:	e6d8      	b.n	801296e <_dtoa_r+0x2e>
 8012bbc:	2301      	movs	r3, #1
 8012bbe:	e7e0      	b.n	8012b82 <_dtoa_r+0x242>
 8012bc0:	2401      	movs	r4, #1
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012bc6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012bc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012bcc:	9300      	str	r3, [sp, #0]
 8012bce:	9307      	str	r3, [sp, #28]
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	2312      	movs	r3, #18
 8012bd4:	e7d0      	b.n	8012b78 <_dtoa_r+0x238>
 8012bd6:	2301      	movs	r3, #1
 8012bd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012bda:	e7f5      	b.n	8012bc8 <_dtoa_r+0x288>
 8012bdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012bde:	9300      	str	r3, [sp, #0]
 8012be0:	9307      	str	r3, [sp, #28]
 8012be2:	e7d7      	b.n	8012b94 <_dtoa_r+0x254>
 8012be4:	3101      	adds	r1, #1
 8012be6:	0052      	lsls	r2, r2, #1
 8012be8:	e7d8      	b.n	8012b9c <_dtoa_r+0x25c>
 8012bea:	bf00      	nop
 8012bec:	f3af 8000 	nop.w
 8012bf0:	636f4361 	.word	0x636f4361
 8012bf4:	3fd287a7 	.word	0x3fd287a7
 8012bf8:	8b60c8b3 	.word	0x8b60c8b3
 8012bfc:	3fc68a28 	.word	0x3fc68a28
 8012c00:	509f79fb 	.word	0x509f79fb
 8012c04:	3fd34413 	.word	0x3fd34413
 8012c08:	08015a2e 	.word	0x08015a2e
 8012c0c:	08015a45 	.word	0x08015a45
 8012c10:	7ff00000 	.word	0x7ff00000
 8012c14:	080158fd 	.word	0x080158fd
 8012c18:	3ff80000 	.word	0x3ff80000
 8012c1c:	08015b50 	.word	0x08015b50
 8012c20:	08015a9d 	.word	0x08015a9d
 8012c24:	08015a2a 	.word	0x08015a2a
 8012c28:	080158fc 	.word	0x080158fc
 8012c2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012c30:	6018      	str	r0, [r3, #0]
 8012c32:	9b07      	ldr	r3, [sp, #28]
 8012c34:	2b0e      	cmp	r3, #14
 8012c36:	f200 80a4 	bhi.w	8012d82 <_dtoa_r+0x442>
 8012c3a:	2c00      	cmp	r4, #0
 8012c3c:	f000 80a1 	beq.w	8012d82 <_dtoa_r+0x442>
 8012c40:	2f00      	cmp	r7, #0
 8012c42:	dd33      	ble.n	8012cac <_dtoa_r+0x36c>
 8012c44:	4bad      	ldr	r3, [pc, #692]	@ (8012efc <_dtoa_r+0x5bc>)
 8012c46:	f007 020f 	and.w	r2, r7, #15
 8012c4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012c4e:	ed93 7b00 	vldr	d7, [r3]
 8012c52:	05f8      	lsls	r0, r7, #23
 8012c54:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012c58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012c5c:	d516      	bpl.n	8012c8c <_dtoa_r+0x34c>
 8012c5e:	4ba8      	ldr	r3, [pc, #672]	@ (8012f00 <_dtoa_r+0x5c0>)
 8012c60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012c64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012c68:	f7ed fe18 	bl	800089c <__aeabi_ddiv>
 8012c6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c70:	f004 040f 	and.w	r4, r4, #15
 8012c74:	2603      	movs	r6, #3
 8012c76:	4da2      	ldr	r5, [pc, #648]	@ (8012f00 <_dtoa_r+0x5c0>)
 8012c78:	b954      	cbnz	r4, 8012c90 <_dtoa_r+0x350>
 8012c7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c82:	f7ed fe0b 	bl	800089c <__aeabi_ddiv>
 8012c86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c8a:	e028      	b.n	8012cde <_dtoa_r+0x39e>
 8012c8c:	2602      	movs	r6, #2
 8012c8e:	e7f2      	b.n	8012c76 <_dtoa_r+0x336>
 8012c90:	07e1      	lsls	r1, r4, #31
 8012c92:	d508      	bpl.n	8012ca6 <_dtoa_r+0x366>
 8012c94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012c9c:	f7ed fcd4 	bl	8000648 <__aeabi_dmul>
 8012ca0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012ca4:	3601      	adds	r6, #1
 8012ca6:	1064      	asrs	r4, r4, #1
 8012ca8:	3508      	adds	r5, #8
 8012caa:	e7e5      	b.n	8012c78 <_dtoa_r+0x338>
 8012cac:	f000 80d2 	beq.w	8012e54 <_dtoa_r+0x514>
 8012cb0:	427c      	negs	r4, r7
 8012cb2:	4b92      	ldr	r3, [pc, #584]	@ (8012efc <_dtoa_r+0x5bc>)
 8012cb4:	4d92      	ldr	r5, [pc, #584]	@ (8012f00 <_dtoa_r+0x5c0>)
 8012cb6:	f004 020f 	and.w	r2, r4, #15
 8012cba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012cc6:	f7ed fcbf 	bl	8000648 <__aeabi_dmul>
 8012cca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012cce:	1124      	asrs	r4, r4, #4
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	2602      	movs	r6, #2
 8012cd4:	2c00      	cmp	r4, #0
 8012cd6:	f040 80b2 	bne.w	8012e3e <_dtoa_r+0x4fe>
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d1d3      	bne.n	8012c86 <_dtoa_r+0x346>
 8012cde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012ce0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	f000 80b7 	beq.w	8012e58 <_dtoa_r+0x518>
 8012cea:	4b86      	ldr	r3, [pc, #536]	@ (8012f04 <_dtoa_r+0x5c4>)
 8012cec:	2200      	movs	r2, #0
 8012cee:	4620      	mov	r0, r4
 8012cf0:	4629      	mov	r1, r5
 8012cf2:	f7ed ff1b 	bl	8000b2c <__aeabi_dcmplt>
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	f000 80ae 	beq.w	8012e58 <_dtoa_r+0x518>
 8012cfc:	9b07      	ldr	r3, [sp, #28]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	f000 80aa 	beq.w	8012e58 <_dtoa_r+0x518>
 8012d04:	9b00      	ldr	r3, [sp, #0]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	dd37      	ble.n	8012d7a <_dtoa_r+0x43a>
 8012d0a:	1e7b      	subs	r3, r7, #1
 8012d0c:	9304      	str	r3, [sp, #16]
 8012d0e:	4620      	mov	r0, r4
 8012d10:	4b7d      	ldr	r3, [pc, #500]	@ (8012f08 <_dtoa_r+0x5c8>)
 8012d12:	2200      	movs	r2, #0
 8012d14:	4629      	mov	r1, r5
 8012d16:	f7ed fc97 	bl	8000648 <__aeabi_dmul>
 8012d1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d1e:	9c00      	ldr	r4, [sp, #0]
 8012d20:	3601      	adds	r6, #1
 8012d22:	4630      	mov	r0, r6
 8012d24:	f7ed fc26 	bl	8000574 <__aeabi_i2d>
 8012d28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012d2c:	f7ed fc8c 	bl	8000648 <__aeabi_dmul>
 8012d30:	4b76      	ldr	r3, [pc, #472]	@ (8012f0c <_dtoa_r+0x5cc>)
 8012d32:	2200      	movs	r2, #0
 8012d34:	f7ed fad2 	bl	80002dc <__adddf3>
 8012d38:	4605      	mov	r5, r0
 8012d3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012d3e:	2c00      	cmp	r4, #0
 8012d40:	f040 808d 	bne.w	8012e5e <_dtoa_r+0x51e>
 8012d44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d48:	4b71      	ldr	r3, [pc, #452]	@ (8012f10 <_dtoa_r+0x5d0>)
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	f7ed fac4 	bl	80002d8 <__aeabi_dsub>
 8012d50:	4602      	mov	r2, r0
 8012d52:	460b      	mov	r3, r1
 8012d54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012d58:	462a      	mov	r2, r5
 8012d5a:	4633      	mov	r3, r6
 8012d5c:	f7ed ff04 	bl	8000b68 <__aeabi_dcmpgt>
 8012d60:	2800      	cmp	r0, #0
 8012d62:	f040 828b 	bne.w	801327c <_dtoa_r+0x93c>
 8012d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d6a:	462a      	mov	r2, r5
 8012d6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012d70:	f7ed fedc 	bl	8000b2c <__aeabi_dcmplt>
 8012d74:	2800      	cmp	r0, #0
 8012d76:	f040 8128 	bne.w	8012fca <_dtoa_r+0x68a>
 8012d7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012d7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012d82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	f2c0 815a 	blt.w	801303e <_dtoa_r+0x6fe>
 8012d8a:	2f0e      	cmp	r7, #14
 8012d8c:	f300 8157 	bgt.w	801303e <_dtoa_r+0x6fe>
 8012d90:	4b5a      	ldr	r3, [pc, #360]	@ (8012efc <_dtoa_r+0x5bc>)
 8012d92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012d96:	ed93 7b00 	vldr	d7, [r3]
 8012d9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	ed8d 7b00 	vstr	d7, [sp]
 8012da2:	da03      	bge.n	8012dac <_dtoa_r+0x46c>
 8012da4:	9b07      	ldr	r3, [sp, #28]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	f340 8101 	ble.w	8012fae <_dtoa_r+0x66e>
 8012dac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012db0:	4656      	mov	r6, sl
 8012db2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012db6:	4620      	mov	r0, r4
 8012db8:	4629      	mov	r1, r5
 8012dba:	f7ed fd6f 	bl	800089c <__aeabi_ddiv>
 8012dbe:	f7ed fef3 	bl	8000ba8 <__aeabi_d2iz>
 8012dc2:	4680      	mov	r8, r0
 8012dc4:	f7ed fbd6 	bl	8000574 <__aeabi_i2d>
 8012dc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012dcc:	f7ed fc3c 	bl	8000648 <__aeabi_dmul>
 8012dd0:	4602      	mov	r2, r0
 8012dd2:	460b      	mov	r3, r1
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	4629      	mov	r1, r5
 8012dd8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012ddc:	f7ed fa7c 	bl	80002d8 <__aeabi_dsub>
 8012de0:	f806 4b01 	strb.w	r4, [r6], #1
 8012de4:	9d07      	ldr	r5, [sp, #28]
 8012de6:	eba6 040a 	sub.w	r4, r6, sl
 8012dea:	42a5      	cmp	r5, r4
 8012dec:	4602      	mov	r2, r0
 8012dee:	460b      	mov	r3, r1
 8012df0:	f040 8117 	bne.w	8013022 <_dtoa_r+0x6e2>
 8012df4:	f7ed fa72 	bl	80002dc <__adddf3>
 8012df8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012dfc:	4604      	mov	r4, r0
 8012dfe:	460d      	mov	r5, r1
 8012e00:	f7ed feb2 	bl	8000b68 <__aeabi_dcmpgt>
 8012e04:	2800      	cmp	r0, #0
 8012e06:	f040 80f9 	bne.w	8012ffc <_dtoa_r+0x6bc>
 8012e0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e0e:	4620      	mov	r0, r4
 8012e10:	4629      	mov	r1, r5
 8012e12:	f7ed fe81 	bl	8000b18 <__aeabi_dcmpeq>
 8012e16:	b118      	cbz	r0, 8012e20 <_dtoa_r+0x4e0>
 8012e18:	f018 0f01 	tst.w	r8, #1
 8012e1c:	f040 80ee 	bne.w	8012ffc <_dtoa_r+0x6bc>
 8012e20:	4649      	mov	r1, r9
 8012e22:	4658      	mov	r0, fp
 8012e24:	f000 ff20 	bl	8013c68 <_Bfree>
 8012e28:	2300      	movs	r3, #0
 8012e2a:	7033      	strb	r3, [r6, #0]
 8012e2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012e2e:	3701      	adds	r7, #1
 8012e30:	601f      	str	r7, [r3, #0]
 8012e32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	f000 831d 	beq.w	8013474 <_dtoa_r+0xb34>
 8012e3a:	601e      	str	r6, [r3, #0]
 8012e3c:	e31a      	b.n	8013474 <_dtoa_r+0xb34>
 8012e3e:	07e2      	lsls	r2, r4, #31
 8012e40:	d505      	bpl.n	8012e4e <_dtoa_r+0x50e>
 8012e42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012e46:	f7ed fbff 	bl	8000648 <__aeabi_dmul>
 8012e4a:	3601      	adds	r6, #1
 8012e4c:	2301      	movs	r3, #1
 8012e4e:	1064      	asrs	r4, r4, #1
 8012e50:	3508      	adds	r5, #8
 8012e52:	e73f      	b.n	8012cd4 <_dtoa_r+0x394>
 8012e54:	2602      	movs	r6, #2
 8012e56:	e742      	b.n	8012cde <_dtoa_r+0x39e>
 8012e58:	9c07      	ldr	r4, [sp, #28]
 8012e5a:	9704      	str	r7, [sp, #16]
 8012e5c:	e761      	b.n	8012d22 <_dtoa_r+0x3e2>
 8012e5e:	4b27      	ldr	r3, [pc, #156]	@ (8012efc <_dtoa_r+0x5bc>)
 8012e60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012e62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012e66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012e6a:	4454      	add	r4, sl
 8012e6c:	2900      	cmp	r1, #0
 8012e6e:	d053      	beq.n	8012f18 <_dtoa_r+0x5d8>
 8012e70:	4928      	ldr	r1, [pc, #160]	@ (8012f14 <_dtoa_r+0x5d4>)
 8012e72:	2000      	movs	r0, #0
 8012e74:	f7ed fd12 	bl	800089c <__aeabi_ddiv>
 8012e78:	4633      	mov	r3, r6
 8012e7a:	462a      	mov	r2, r5
 8012e7c:	f7ed fa2c 	bl	80002d8 <__aeabi_dsub>
 8012e80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012e84:	4656      	mov	r6, sl
 8012e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e8a:	f7ed fe8d 	bl	8000ba8 <__aeabi_d2iz>
 8012e8e:	4605      	mov	r5, r0
 8012e90:	f7ed fb70 	bl	8000574 <__aeabi_i2d>
 8012e94:	4602      	mov	r2, r0
 8012e96:	460b      	mov	r3, r1
 8012e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e9c:	f7ed fa1c 	bl	80002d8 <__aeabi_dsub>
 8012ea0:	3530      	adds	r5, #48	@ 0x30
 8012ea2:	4602      	mov	r2, r0
 8012ea4:	460b      	mov	r3, r1
 8012ea6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012eaa:	f806 5b01 	strb.w	r5, [r6], #1
 8012eae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012eb2:	f7ed fe3b 	bl	8000b2c <__aeabi_dcmplt>
 8012eb6:	2800      	cmp	r0, #0
 8012eb8:	d171      	bne.n	8012f9e <_dtoa_r+0x65e>
 8012eba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ebe:	4911      	ldr	r1, [pc, #68]	@ (8012f04 <_dtoa_r+0x5c4>)
 8012ec0:	2000      	movs	r0, #0
 8012ec2:	f7ed fa09 	bl	80002d8 <__aeabi_dsub>
 8012ec6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012eca:	f7ed fe2f 	bl	8000b2c <__aeabi_dcmplt>
 8012ece:	2800      	cmp	r0, #0
 8012ed0:	f040 8095 	bne.w	8012ffe <_dtoa_r+0x6be>
 8012ed4:	42a6      	cmp	r6, r4
 8012ed6:	f43f af50 	beq.w	8012d7a <_dtoa_r+0x43a>
 8012eda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012ede:	4b0a      	ldr	r3, [pc, #40]	@ (8012f08 <_dtoa_r+0x5c8>)
 8012ee0:	2200      	movs	r2, #0
 8012ee2:	f7ed fbb1 	bl	8000648 <__aeabi_dmul>
 8012ee6:	4b08      	ldr	r3, [pc, #32]	@ (8012f08 <_dtoa_r+0x5c8>)
 8012ee8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012eec:	2200      	movs	r2, #0
 8012eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ef2:	f7ed fba9 	bl	8000648 <__aeabi_dmul>
 8012ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012efa:	e7c4      	b.n	8012e86 <_dtoa_r+0x546>
 8012efc:	08015b50 	.word	0x08015b50
 8012f00:	08015b28 	.word	0x08015b28
 8012f04:	3ff00000 	.word	0x3ff00000
 8012f08:	40240000 	.word	0x40240000
 8012f0c:	401c0000 	.word	0x401c0000
 8012f10:	40140000 	.word	0x40140000
 8012f14:	3fe00000 	.word	0x3fe00000
 8012f18:	4631      	mov	r1, r6
 8012f1a:	4628      	mov	r0, r5
 8012f1c:	f7ed fb94 	bl	8000648 <__aeabi_dmul>
 8012f20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012f24:	9415      	str	r4, [sp, #84]	@ 0x54
 8012f26:	4656      	mov	r6, sl
 8012f28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f2c:	f7ed fe3c 	bl	8000ba8 <__aeabi_d2iz>
 8012f30:	4605      	mov	r5, r0
 8012f32:	f7ed fb1f 	bl	8000574 <__aeabi_i2d>
 8012f36:	4602      	mov	r2, r0
 8012f38:	460b      	mov	r3, r1
 8012f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f3e:	f7ed f9cb 	bl	80002d8 <__aeabi_dsub>
 8012f42:	3530      	adds	r5, #48	@ 0x30
 8012f44:	f806 5b01 	strb.w	r5, [r6], #1
 8012f48:	4602      	mov	r2, r0
 8012f4a:	460b      	mov	r3, r1
 8012f4c:	42a6      	cmp	r6, r4
 8012f4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012f52:	f04f 0200 	mov.w	r2, #0
 8012f56:	d124      	bne.n	8012fa2 <_dtoa_r+0x662>
 8012f58:	4bac      	ldr	r3, [pc, #688]	@ (801320c <_dtoa_r+0x8cc>)
 8012f5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012f5e:	f7ed f9bd 	bl	80002dc <__adddf3>
 8012f62:	4602      	mov	r2, r0
 8012f64:	460b      	mov	r3, r1
 8012f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f6a:	f7ed fdfd 	bl	8000b68 <__aeabi_dcmpgt>
 8012f6e:	2800      	cmp	r0, #0
 8012f70:	d145      	bne.n	8012ffe <_dtoa_r+0x6be>
 8012f72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012f76:	49a5      	ldr	r1, [pc, #660]	@ (801320c <_dtoa_r+0x8cc>)
 8012f78:	2000      	movs	r0, #0
 8012f7a:	f7ed f9ad 	bl	80002d8 <__aeabi_dsub>
 8012f7e:	4602      	mov	r2, r0
 8012f80:	460b      	mov	r3, r1
 8012f82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f86:	f7ed fdd1 	bl	8000b2c <__aeabi_dcmplt>
 8012f8a:	2800      	cmp	r0, #0
 8012f8c:	f43f aef5 	beq.w	8012d7a <_dtoa_r+0x43a>
 8012f90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8012f92:	1e73      	subs	r3, r6, #1
 8012f94:	9315      	str	r3, [sp, #84]	@ 0x54
 8012f96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012f9a:	2b30      	cmp	r3, #48	@ 0x30
 8012f9c:	d0f8      	beq.n	8012f90 <_dtoa_r+0x650>
 8012f9e:	9f04      	ldr	r7, [sp, #16]
 8012fa0:	e73e      	b.n	8012e20 <_dtoa_r+0x4e0>
 8012fa2:	4b9b      	ldr	r3, [pc, #620]	@ (8013210 <_dtoa_r+0x8d0>)
 8012fa4:	f7ed fb50 	bl	8000648 <__aeabi_dmul>
 8012fa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fac:	e7bc      	b.n	8012f28 <_dtoa_r+0x5e8>
 8012fae:	d10c      	bne.n	8012fca <_dtoa_r+0x68a>
 8012fb0:	4b98      	ldr	r3, [pc, #608]	@ (8013214 <_dtoa_r+0x8d4>)
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012fb8:	f7ed fb46 	bl	8000648 <__aeabi_dmul>
 8012fbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012fc0:	f7ed fdc8 	bl	8000b54 <__aeabi_dcmpge>
 8012fc4:	2800      	cmp	r0, #0
 8012fc6:	f000 8157 	beq.w	8013278 <_dtoa_r+0x938>
 8012fca:	2400      	movs	r4, #0
 8012fcc:	4625      	mov	r5, r4
 8012fce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012fd0:	43db      	mvns	r3, r3
 8012fd2:	9304      	str	r3, [sp, #16]
 8012fd4:	4656      	mov	r6, sl
 8012fd6:	2700      	movs	r7, #0
 8012fd8:	4621      	mov	r1, r4
 8012fda:	4658      	mov	r0, fp
 8012fdc:	f000 fe44 	bl	8013c68 <_Bfree>
 8012fe0:	2d00      	cmp	r5, #0
 8012fe2:	d0dc      	beq.n	8012f9e <_dtoa_r+0x65e>
 8012fe4:	b12f      	cbz	r7, 8012ff2 <_dtoa_r+0x6b2>
 8012fe6:	42af      	cmp	r7, r5
 8012fe8:	d003      	beq.n	8012ff2 <_dtoa_r+0x6b2>
 8012fea:	4639      	mov	r1, r7
 8012fec:	4658      	mov	r0, fp
 8012fee:	f000 fe3b 	bl	8013c68 <_Bfree>
 8012ff2:	4629      	mov	r1, r5
 8012ff4:	4658      	mov	r0, fp
 8012ff6:	f000 fe37 	bl	8013c68 <_Bfree>
 8012ffa:	e7d0      	b.n	8012f9e <_dtoa_r+0x65e>
 8012ffc:	9704      	str	r7, [sp, #16]
 8012ffe:	4633      	mov	r3, r6
 8013000:	461e      	mov	r6, r3
 8013002:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013006:	2a39      	cmp	r2, #57	@ 0x39
 8013008:	d107      	bne.n	801301a <_dtoa_r+0x6da>
 801300a:	459a      	cmp	sl, r3
 801300c:	d1f8      	bne.n	8013000 <_dtoa_r+0x6c0>
 801300e:	9a04      	ldr	r2, [sp, #16]
 8013010:	3201      	adds	r2, #1
 8013012:	9204      	str	r2, [sp, #16]
 8013014:	2230      	movs	r2, #48	@ 0x30
 8013016:	f88a 2000 	strb.w	r2, [sl]
 801301a:	781a      	ldrb	r2, [r3, #0]
 801301c:	3201      	adds	r2, #1
 801301e:	701a      	strb	r2, [r3, #0]
 8013020:	e7bd      	b.n	8012f9e <_dtoa_r+0x65e>
 8013022:	4b7b      	ldr	r3, [pc, #492]	@ (8013210 <_dtoa_r+0x8d0>)
 8013024:	2200      	movs	r2, #0
 8013026:	f7ed fb0f 	bl	8000648 <__aeabi_dmul>
 801302a:	2200      	movs	r2, #0
 801302c:	2300      	movs	r3, #0
 801302e:	4604      	mov	r4, r0
 8013030:	460d      	mov	r5, r1
 8013032:	f7ed fd71 	bl	8000b18 <__aeabi_dcmpeq>
 8013036:	2800      	cmp	r0, #0
 8013038:	f43f aebb 	beq.w	8012db2 <_dtoa_r+0x472>
 801303c:	e6f0      	b.n	8012e20 <_dtoa_r+0x4e0>
 801303e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013040:	2a00      	cmp	r2, #0
 8013042:	f000 80db 	beq.w	80131fc <_dtoa_r+0x8bc>
 8013046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013048:	2a01      	cmp	r2, #1
 801304a:	f300 80bf 	bgt.w	80131cc <_dtoa_r+0x88c>
 801304e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013050:	2a00      	cmp	r2, #0
 8013052:	f000 80b7 	beq.w	80131c4 <_dtoa_r+0x884>
 8013056:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801305a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801305c:	4646      	mov	r6, r8
 801305e:	9a08      	ldr	r2, [sp, #32]
 8013060:	2101      	movs	r1, #1
 8013062:	441a      	add	r2, r3
 8013064:	4658      	mov	r0, fp
 8013066:	4498      	add	r8, r3
 8013068:	9208      	str	r2, [sp, #32]
 801306a:	f000 feb1 	bl	8013dd0 <__i2b>
 801306e:	4605      	mov	r5, r0
 8013070:	b15e      	cbz	r6, 801308a <_dtoa_r+0x74a>
 8013072:	9b08      	ldr	r3, [sp, #32]
 8013074:	2b00      	cmp	r3, #0
 8013076:	dd08      	ble.n	801308a <_dtoa_r+0x74a>
 8013078:	42b3      	cmp	r3, r6
 801307a:	9a08      	ldr	r2, [sp, #32]
 801307c:	bfa8      	it	ge
 801307e:	4633      	movge	r3, r6
 8013080:	eba8 0803 	sub.w	r8, r8, r3
 8013084:	1af6      	subs	r6, r6, r3
 8013086:	1ad3      	subs	r3, r2, r3
 8013088:	9308      	str	r3, [sp, #32]
 801308a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801308c:	b1f3      	cbz	r3, 80130cc <_dtoa_r+0x78c>
 801308e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013090:	2b00      	cmp	r3, #0
 8013092:	f000 80b7 	beq.w	8013204 <_dtoa_r+0x8c4>
 8013096:	b18c      	cbz	r4, 80130bc <_dtoa_r+0x77c>
 8013098:	4629      	mov	r1, r5
 801309a:	4622      	mov	r2, r4
 801309c:	4658      	mov	r0, fp
 801309e:	f000 ff57 	bl	8013f50 <__pow5mult>
 80130a2:	464a      	mov	r2, r9
 80130a4:	4601      	mov	r1, r0
 80130a6:	4605      	mov	r5, r0
 80130a8:	4658      	mov	r0, fp
 80130aa:	f000 fea7 	bl	8013dfc <__multiply>
 80130ae:	4649      	mov	r1, r9
 80130b0:	9004      	str	r0, [sp, #16]
 80130b2:	4658      	mov	r0, fp
 80130b4:	f000 fdd8 	bl	8013c68 <_Bfree>
 80130b8:	9b04      	ldr	r3, [sp, #16]
 80130ba:	4699      	mov	r9, r3
 80130bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80130be:	1b1a      	subs	r2, r3, r4
 80130c0:	d004      	beq.n	80130cc <_dtoa_r+0x78c>
 80130c2:	4649      	mov	r1, r9
 80130c4:	4658      	mov	r0, fp
 80130c6:	f000 ff43 	bl	8013f50 <__pow5mult>
 80130ca:	4681      	mov	r9, r0
 80130cc:	2101      	movs	r1, #1
 80130ce:	4658      	mov	r0, fp
 80130d0:	f000 fe7e 	bl	8013dd0 <__i2b>
 80130d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80130d6:	4604      	mov	r4, r0
 80130d8:	2b00      	cmp	r3, #0
 80130da:	f000 81cf 	beq.w	801347c <_dtoa_r+0xb3c>
 80130de:	461a      	mov	r2, r3
 80130e0:	4601      	mov	r1, r0
 80130e2:	4658      	mov	r0, fp
 80130e4:	f000 ff34 	bl	8013f50 <__pow5mult>
 80130e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130ea:	2b01      	cmp	r3, #1
 80130ec:	4604      	mov	r4, r0
 80130ee:	f300 8095 	bgt.w	801321c <_dtoa_r+0x8dc>
 80130f2:	9b02      	ldr	r3, [sp, #8]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	f040 8087 	bne.w	8013208 <_dtoa_r+0x8c8>
 80130fa:	9b03      	ldr	r3, [sp, #12]
 80130fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013100:	2b00      	cmp	r3, #0
 8013102:	f040 8089 	bne.w	8013218 <_dtoa_r+0x8d8>
 8013106:	9b03      	ldr	r3, [sp, #12]
 8013108:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801310c:	0d1b      	lsrs	r3, r3, #20
 801310e:	051b      	lsls	r3, r3, #20
 8013110:	b12b      	cbz	r3, 801311e <_dtoa_r+0x7de>
 8013112:	9b08      	ldr	r3, [sp, #32]
 8013114:	3301      	adds	r3, #1
 8013116:	9308      	str	r3, [sp, #32]
 8013118:	f108 0801 	add.w	r8, r8, #1
 801311c:	2301      	movs	r3, #1
 801311e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013122:	2b00      	cmp	r3, #0
 8013124:	f000 81b0 	beq.w	8013488 <_dtoa_r+0xb48>
 8013128:	6923      	ldr	r3, [r4, #16]
 801312a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801312e:	6918      	ldr	r0, [r3, #16]
 8013130:	f000 fe02 	bl	8013d38 <__hi0bits>
 8013134:	f1c0 0020 	rsb	r0, r0, #32
 8013138:	9b08      	ldr	r3, [sp, #32]
 801313a:	4418      	add	r0, r3
 801313c:	f010 001f 	ands.w	r0, r0, #31
 8013140:	d077      	beq.n	8013232 <_dtoa_r+0x8f2>
 8013142:	f1c0 0320 	rsb	r3, r0, #32
 8013146:	2b04      	cmp	r3, #4
 8013148:	dd6b      	ble.n	8013222 <_dtoa_r+0x8e2>
 801314a:	9b08      	ldr	r3, [sp, #32]
 801314c:	f1c0 001c 	rsb	r0, r0, #28
 8013150:	4403      	add	r3, r0
 8013152:	4480      	add	r8, r0
 8013154:	4406      	add	r6, r0
 8013156:	9308      	str	r3, [sp, #32]
 8013158:	f1b8 0f00 	cmp.w	r8, #0
 801315c:	dd05      	ble.n	801316a <_dtoa_r+0x82a>
 801315e:	4649      	mov	r1, r9
 8013160:	4642      	mov	r2, r8
 8013162:	4658      	mov	r0, fp
 8013164:	f000 ff4e 	bl	8014004 <__lshift>
 8013168:	4681      	mov	r9, r0
 801316a:	9b08      	ldr	r3, [sp, #32]
 801316c:	2b00      	cmp	r3, #0
 801316e:	dd05      	ble.n	801317c <_dtoa_r+0x83c>
 8013170:	4621      	mov	r1, r4
 8013172:	461a      	mov	r2, r3
 8013174:	4658      	mov	r0, fp
 8013176:	f000 ff45 	bl	8014004 <__lshift>
 801317a:	4604      	mov	r4, r0
 801317c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801317e:	2b00      	cmp	r3, #0
 8013180:	d059      	beq.n	8013236 <_dtoa_r+0x8f6>
 8013182:	4621      	mov	r1, r4
 8013184:	4648      	mov	r0, r9
 8013186:	f000 ffa9 	bl	80140dc <__mcmp>
 801318a:	2800      	cmp	r0, #0
 801318c:	da53      	bge.n	8013236 <_dtoa_r+0x8f6>
 801318e:	1e7b      	subs	r3, r7, #1
 8013190:	9304      	str	r3, [sp, #16]
 8013192:	4649      	mov	r1, r9
 8013194:	2300      	movs	r3, #0
 8013196:	220a      	movs	r2, #10
 8013198:	4658      	mov	r0, fp
 801319a:	f000 fd87 	bl	8013cac <__multadd>
 801319e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80131a0:	4681      	mov	r9, r0
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	f000 8172 	beq.w	801348c <_dtoa_r+0xb4c>
 80131a8:	2300      	movs	r3, #0
 80131aa:	4629      	mov	r1, r5
 80131ac:	220a      	movs	r2, #10
 80131ae:	4658      	mov	r0, fp
 80131b0:	f000 fd7c 	bl	8013cac <__multadd>
 80131b4:	9b00      	ldr	r3, [sp, #0]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	4605      	mov	r5, r0
 80131ba:	dc67      	bgt.n	801328c <_dtoa_r+0x94c>
 80131bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80131be:	2b02      	cmp	r3, #2
 80131c0:	dc41      	bgt.n	8013246 <_dtoa_r+0x906>
 80131c2:	e063      	b.n	801328c <_dtoa_r+0x94c>
 80131c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80131c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80131ca:	e746      	b.n	801305a <_dtoa_r+0x71a>
 80131cc:	9b07      	ldr	r3, [sp, #28]
 80131ce:	1e5c      	subs	r4, r3, #1
 80131d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80131d2:	42a3      	cmp	r3, r4
 80131d4:	bfbf      	itttt	lt
 80131d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80131d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80131da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80131dc:	1ae3      	sublt	r3, r4, r3
 80131de:	bfb4      	ite	lt
 80131e0:	18d2      	addlt	r2, r2, r3
 80131e2:	1b1c      	subge	r4, r3, r4
 80131e4:	9b07      	ldr	r3, [sp, #28]
 80131e6:	bfbc      	itt	lt
 80131e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80131ea:	2400      	movlt	r4, #0
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	bfb5      	itete	lt
 80131f0:	eba8 0603 	sublt.w	r6, r8, r3
 80131f4:	9b07      	ldrge	r3, [sp, #28]
 80131f6:	2300      	movlt	r3, #0
 80131f8:	4646      	movge	r6, r8
 80131fa:	e730      	b.n	801305e <_dtoa_r+0x71e>
 80131fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80131fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8013200:	4646      	mov	r6, r8
 8013202:	e735      	b.n	8013070 <_dtoa_r+0x730>
 8013204:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013206:	e75c      	b.n	80130c2 <_dtoa_r+0x782>
 8013208:	2300      	movs	r3, #0
 801320a:	e788      	b.n	801311e <_dtoa_r+0x7de>
 801320c:	3fe00000 	.word	0x3fe00000
 8013210:	40240000 	.word	0x40240000
 8013214:	40140000 	.word	0x40140000
 8013218:	9b02      	ldr	r3, [sp, #8]
 801321a:	e780      	b.n	801311e <_dtoa_r+0x7de>
 801321c:	2300      	movs	r3, #0
 801321e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013220:	e782      	b.n	8013128 <_dtoa_r+0x7e8>
 8013222:	d099      	beq.n	8013158 <_dtoa_r+0x818>
 8013224:	9a08      	ldr	r2, [sp, #32]
 8013226:	331c      	adds	r3, #28
 8013228:	441a      	add	r2, r3
 801322a:	4498      	add	r8, r3
 801322c:	441e      	add	r6, r3
 801322e:	9208      	str	r2, [sp, #32]
 8013230:	e792      	b.n	8013158 <_dtoa_r+0x818>
 8013232:	4603      	mov	r3, r0
 8013234:	e7f6      	b.n	8013224 <_dtoa_r+0x8e4>
 8013236:	9b07      	ldr	r3, [sp, #28]
 8013238:	9704      	str	r7, [sp, #16]
 801323a:	2b00      	cmp	r3, #0
 801323c:	dc20      	bgt.n	8013280 <_dtoa_r+0x940>
 801323e:	9300      	str	r3, [sp, #0]
 8013240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013242:	2b02      	cmp	r3, #2
 8013244:	dd1e      	ble.n	8013284 <_dtoa_r+0x944>
 8013246:	9b00      	ldr	r3, [sp, #0]
 8013248:	2b00      	cmp	r3, #0
 801324a:	f47f aec0 	bne.w	8012fce <_dtoa_r+0x68e>
 801324e:	4621      	mov	r1, r4
 8013250:	2205      	movs	r2, #5
 8013252:	4658      	mov	r0, fp
 8013254:	f000 fd2a 	bl	8013cac <__multadd>
 8013258:	4601      	mov	r1, r0
 801325a:	4604      	mov	r4, r0
 801325c:	4648      	mov	r0, r9
 801325e:	f000 ff3d 	bl	80140dc <__mcmp>
 8013262:	2800      	cmp	r0, #0
 8013264:	f77f aeb3 	ble.w	8012fce <_dtoa_r+0x68e>
 8013268:	4656      	mov	r6, sl
 801326a:	2331      	movs	r3, #49	@ 0x31
 801326c:	f806 3b01 	strb.w	r3, [r6], #1
 8013270:	9b04      	ldr	r3, [sp, #16]
 8013272:	3301      	adds	r3, #1
 8013274:	9304      	str	r3, [sp, #16]
 8013276:	e6ae      	b.n	8012fd6 <_dtoa_r+0x696>
 8013278:	9c07      	ldr	r4, [sp, #28]
 801327a:	9704      	str	r7, [sp, #16]
 801327c:	4625      	mov	r5, r4
 801327e:	e7f3      	b.n	8013268 <_dtoa_r+0x928>
 8013280:	9b07      	ldr	r3, [sp, #28]
 8013282:	9300      	str	r3, [sp, #0]
 8013284:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013286:	2b00      	cmp	r3, #0
 8013288:	f000 8104 	beq.w	8013494 <_dtoa_r+0xb54>
 801328c:	2e00      	cmp	r6, #0
 801328e:	dd05      	ble.n	801329c <_dtoa_r+0x95c>
 8013290:	4629      	mov	r1, r5
 8013292:	4632      	mov	r2, r6
 8013294:	4658      	mov	r0, fp
 8013296:	f000 feb5 	bl	8014004 <__lshift>
 801329a:	4605      	mov	r5, r0
 801329c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d05a      	beq.n	8013358 <_dtoa_r+0xa18>
 80132a2:	6869      	ldr	r1, [r5, #4]
 80132a4:	4658      	mov	r0, fp
 80132a6:	f000 fc9f 	bl	8013be8 <_Balloc>
 80132aa:	4606      	mov	r6, r0
 80132ac:	b928      	cbnz	r0, 80132ba <_dtoa_r+0x97a>
 80132ae:	4b84      	ldr	r3, [pc, #528]	@ (80134c0 <_dtoa_r+0xb80>)
 80132b0:	4602      	mov	r2, r0
 80132b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80132b6:	f7ff bb5a 	b.w	801296e <_dtoa_r+0x2e>
 80132ba:	692a      	ldr	r2, [r5, #16]
 80132bc:	3202      	adds	r2, #2
 80132be:	0092      	lsls	r2, r2, #2
 80132c0:	f105 010c 	add.w	r1, r5, #12
 80132c4:	300c      	adds	r0, #12
 80132c6:	f7ff faa5 	bl	8012814 <memcpy>
 80132ca:	2201      	movs	r2, #1
 80132cc:	4631      	mov	r1, r6
 80132ce:	4658      	mov	r0, fp
 80132d0:	f000 fe98 	bl	8014004 <__lshift>
 80132d4:	f10a 0301 	add.w	r3, sl, #1
 80132d8:	9307      	str	r3, [sp, #28]
 80132da:	9b00      	ldr	r3, [sp, #0]
 80132dc:	4453      	add	r3, sl
 80132de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80132e0:	9b02      	ldr	r3, [sp, #8]
 80132e2:	f003 0301 	and.w	r3, r3, #1
 80132e6:	462f      	mov	r7, r5
 80132e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80132ea:	4605      	mov	r5, r0
 80132ec:	9b07      	ldr	r3, [sp, #28]
 80132ee:	4621      	mov	r1, r4
 80132f0:	3b01      	subs	r3, #1
 80132f2:	4648      	mov	r0, r9
 80132f4:	9300      	str	r3, [sp, #0]
 80132f6:	f7ff fa9b 	bl	8012830 <quorem>
 80132fa:	4639      	mov	r1, r7
 80132fc:	9002      	str	r0, [sp, #8]
 80132fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8013302:	4648      	mov	r0, r9
 8013304:	f000 feea 	bl	80140dc <__mcmp>
 8013308:	462a      	mov	r2, r5
 801330a:	9008      	str	r0, [sp, #32]
 801330c:	4621      	mov	r1, r4
 801330e:	4658      	mov	r0, fp
 8013310:	f000 ff00 	bl	8014114 <__mdiff>
 8013314:	68c2      	ldr	r2, [r0, #12]
 8013316:	4606      	mov	r6, r0
 8013318:	bb02      	cbnz	r2, 801335c <_dtoa_r+0xa1c>
 801331a:	4601      	mov	r1, r0
 801331c:	4648      	mov	r0, r9
 801331e:	f000 fedd 	bl	80140dc <__mcmp>
 8013322:	4602      	mov	r2, r0
 8013324:	4631      	mov	r1, r6
 8013326:	4658      	mov	r0, fp
 8013328:	920e      	str	r2, [sp, #56]	@ 0x38
 801332a:	f000 fc9d 	bl	8013c68 <_Bfree>
 801332e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013330:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013332:	9e07      	ldr	r6, [sp, #28]
 8013334:	ea43 0102 	orr.w	r1, r3, r2
 8013338:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801333a:	4319      	orrs	r1, r3
 801333c:	d110      	bne.n	8013360 <_dtoa_r+0xa20>
 801333e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013342:	d029      	beq.n	8013398 <_dtoa_r+0xa58>
 8013344:	9b08      	ldr	r3, [sp, #32]
 8013346:	2b00      	cmp	r3, #0
 8013348:	dd02      	ble.n	8013350 <_dtoa_r+0xa10>
 801334a:	9b02      	ldr	r3, [sp, #8]
 801334c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013350:	9b00      	ldr	r3, [sp, #0]
 8013352:	f883 8000 	strb.w	r8, [r3]
 8013356:	e63f      	b.n	8012fd8 <_dtoa_r+0x698>
 8013358:	4628      	mov	r0, r5
 801335a:	e7bb      	b.n	80132d4 <_dtoa_r+0x994>
 801335c:	2201      	movs	r2, #1
 801335e:	e7e1      	b.n	8013324 <_dtoa_r+0x9e4>
 8013360:	9b08      	ldr	r3, [sp, #32]
 8013362:	2b00      	cmp	r3, #0
 8013364:	db04      	blt.n	8013370 <_dtoa_r+0xa30>
 8013366:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013368:	430b      	orrs	r3, r1
 801336a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801336c:	430b      	orrs	r3, r1
 801336e:	d120      	bne.n	80133b2 <_dtoa_r+0xa72>
 8013370:	2a00      	cmp	r2, #0
 8013372:	dded      	ble.n	8013350 <_dtoa_r+0xa10>
 8013374:	4649      	mov	r1, r9
 8013376:	2201      	movs	r2, #1
 8013378:	4658      	mov	r0, fp
 801337a:	f000 fe43 	bl	8014004 <__lshift>
 801337e:	4621      	mov	r1, r4
 8013380:	4681      	mov	r9, r0
 8013382:	f000 feab 	bl	80140dc <__mcmp>
 8013386:	2800      	cmp	r0, #0
 8013388:	dc03      	bgt.n	8013392 <_dtoa_r+0xa52>
 801338a:	d1e1      	bne.n	8013350 <_dtoa_r+0xa10>
 801338c:	f018 0f01 	tst.w	r8, #1
 8013390:	d0de      	beq.n	8013350 <_dtoa_r+0xa10>
 8013392:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013396:	d1d8      	bne.n	801334a <_dtoa_r+0xa0a>
 8013398:	9a00      	ldr	r2, [sp, #0]
 801339a:	2339      	movs	r3, #57	@ 0x39
 801339c:	7013      	strb	r3, [r2, #0]
 801339e:	4633      	mov	r3, r6
 80133a0:	461e      	mov	r6, r3
 80133a2:	3b01      	subs	r3, #1
 80133a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80133a8:	2a39      	cmp	r2, #57	@ 0x39
 80133aa:	d052      	beq.n	8013452 <_dtoa_r+0xb12>
 80133ac:	3201      	adds	r2, #1
 80133ae:	701a      	strb	r2, [r3, #0]
 80133b0:	e612      	b.n	8012fd8 <_dtoa_r+0x698>
 80133b2:	2a00      	cmp	r2, #0
 80133b4:	dd07      	ble.n	80133c6 <_dtoa_r+0xa86>
 80133b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80133ba:	d0ed      	beq.n	8013398 <_dtoa_r+0xa58>
 80133bc:	9a00      	ldr	r2, [sp, #0]
 80133be:	f108 0301 	add.w	r3, r8, #1
 80133c2:	7013      	strb	r3, [r2, #0]
 80133c4:	e608      	b.n	8012fd8 <_dtoa_r+0x698>
 80133c6:	9b07      	ldr	r3, [sp, #28]
 80133c8:	9a07      	ldr	r2, [sp, #28]
 80133ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80133ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80133d0:	4293      	cmp	r3, r2
 80133d2:	d028      	beq.n	8013426 <_dtoa_r+0xae6>
 80133d4:	4649      	mov	r1, r9
 80133d6:	2300      	movs	r3, #0
 80133d8:	220a      	movs	r2, #10
 80133da:	4658      	mov	r0, fp
 80133dc:	f000 fc66 	bl	8013cac <__multadd>
 80133e0:	42af      	cmp	r7, r5
 80133e2:	4681      	mov	r9, r0
 80133e4:	f04f 0300 	mov.w	r3, #0
 80133e8:	f04f 020a 	mov.w	r2, #10
 80133ec:	4639      	mov	r1, r7
 80133ee:	4658      	mov	r0, fp
 80133f0:	d107      	bne.n	8013402 <_dtoa_r+0xac2>
 80133f2:	f000 fc5b 	bl	8013cac <__multadd>
 80133f6:	4607      	mov	r7, r0
 80133f8:	4605      	mov	r5, r0
 80133fa:	9b07      	ldr	r3, [sp, #28]
 80133fc:	3301      	adds	r3, #1
 80133fe:	9307      	str	r3, [sp, #28]
 8013400:	e774      	b.n	80132ec <_dtoa_r+0x9ac>
 8013402:	f000 fc53 	bl	8013cac <__multadd>
 8013406:	4629      	mov	r1, r5
 8013408:	4607      	mov	r7, r0
 801340a:	2300      	movs	r3, #0
 801340c:	220a      	movs	r2, #10
 801340e:	4658      	mov	r0, fp
 8013410:	f000 fc4c 	bl	8013cac <__multadd>
 8013414:	4605      	mov	r5, r0
 8013416:	e7f0      	b.n	80133fa <_dtoa_r+0xaba>
 8013418:	9b00      	ldr	r3, [sp, #0]
 801341a:	2b00      	cmp	r3, #0
 801341c:	bfcc      	ite	gt
 801341e:	461e      	movgt	r6, r3
 8013420:	2601      	movle	r6, #1
 8013422:	4456      	add	r6, sl
 8013424:	2700      	movs	r7, #0
 8013426:	4649      	mov	r1, r9
 8013428:	2201      	movs	r2, #1
 801342a:	4658      	mov	r0, fp
 801342c:	f000 fdea 	bl	8014004 <__lshift>
 8013430:	4621      	mov	r1, r4
 8013432:	4681      	mov	r9, r0
 8013434:	f000 fe52 	bl	80140dc <__mcmp>
 8013438:	2800      	cmp	r0, #0
 801343a:	dcb0      	bgt.n	801339e <_dtoa_r+0xa5e>
 801343c:	d102      	bne.n	8013444 <_dtoa_r+0xb04>
 801343e:	f018 0f01 	tst.w	r8, #1
 8013442:	d1ac      	bne.n	801339e <_dtoa_r+0xa5e>
 8013444:	4633      	mov	r3, r6
 8013446:	461e      	mov	r6, r3
 8013448:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801344c:	2a30      	cmp	r2, #48	@ 0x30
 801344e:	d0fa      	beq.n	8013446 <_dtoa_r+0xb06>
 8013450:	e5c2      	b.n	8012fd8 <_dtoa_r+0x698>
 8013452:	459a      	cmp	sl, r3
 8013454:	d1a4      	bne.n	80133a0 <_dtoa_r+0xa60>
 8013456:	9b04      	ldr	r3, [sp, #16]
 8013458:	3301      	adds	r3, #1
 801345a:	9304      	str	r3, [sp, #16]
 801345c:	2331      	movs	r3, #49	@ 0x31
 801345e:	f88a 3000 	strb.w	r3, [sl]
 8013462:	e5b9      	b.n	8012fd8 <_dtoa_r+0x698>
 8013464:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013466:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80134c4 <_dtoa_r+0xb84>
 801346a:	b11b      	cbz	r3, 8013474 <_dtoa_r+0xb34>
 801346c:	f10a 0308 	add.w	r3, sl, #8
 8013470:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013472:	6013      	str	r3, [r2, #0]
 8013474:	4650      	mov	r0, sl
 8013476:	b019      	add	sp, #100	@ 0x64
 8013478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801347c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801347e:	2b01      	cmp	r3, #1
 8013480:	f77f ae37 	ble.w	80130f2 <_dtoa_r+0x7b2>
 8013484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013486:	930a      	str	r3, [sp, #40]	@ 0x28
 8013488:	2001      	movs	r0, #1
 801348a:	e655      	b.n	8013138 <_dtoa_r+0x7f8>
 801348c:	9b00      	ldr	r3, [sp, #0]
 801348e:	2b00      	cmp	r3, #0
 8013490:	f77f aed6 	ble.w	8013240 <_dtoa_r+0x900>
 8013494:	4656      	mov	r6, sl
 8013496:	4621      	mov	r1, r4
 8013498:	4648      	mov	r0, r9
 801349a:	f7ff f9c9 	bl	8012830 <quorem>
 801349e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80134a2:	f806 8b01 	strb.w	r8, [r6], #1
 80134a6:	9b00      	ldr	r3, [sp, #0]
 80134a8:	eba6 020a 	sub.w	r2, r6, sl
 80134ac:	4293      	cmp	r3, r2
 80134ae:	ddb3      	ble.n	8013418 <_dtoa_r+0xad8>
 80134b0:	4649      	mov	r1, r9
 80134b2:	2300      	movs	r3, #0
 80134b4:	220a      	movs	r2, #10
 80134b6:	4658      	mov	r0, fp
 80134b8:	f000 fbf8 	bl	8013cac <__multadd>
 80134bc:	4681      	mov	r9, r0
 80134be:	e7ea      	b.n	8013496 <_dtoa_r+0xb56>
 80134c0:	08015a9d 	.word	0x08015a9d
 80134c4:	08015a21 	.word	0x08015a21

080134c8 <_free_r>:
 80134c8:	b538      	push	{r3, r4, r5, lr}
 80134ca:	4605      	mov	r5, r0
 80134cc:	2900      	cmp	r1, #0
 80134ce:	d041      	beq.n	8013554 <_free_r+0x8c>
 80134d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134d4:	1f0c      	subs	r4, r1, #4
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	bfb8      	it	lt
 80134da:	18e4      	addlt	r4, r4, r3
 80134dc:	f7ff f854 	bl	8012588 <__malloc_lock>
 80134e0:	4a1d      	ldr	r2, [pc, #116]	@ (8013558 <_free_r+0x90>)
 80134e2:	6813      	ldr	r3, [r2, #0]
 80134e4:	b933      	cbnz	r3, 80134f4 <_free_r+0x2c>
 80134e6:	6063      	str	r3, [r4, #4]
 80134e8:	6014      	str	r4, [r2, #0]
 80134ea:	4628      	mov	r0, r5
 80134ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134f0:	f7ff b850 	b.w	8012594 <__malloc_unlock>
 80134f4:	42a3      	cmp	r3, r4
 80134f6:	d908      	bls.n	801350a <_free_r+0x42>
 80134f8:	6820      	ldr	r0, [r4, #0]
 80134fa:	1821      	adds	r1, r4, r0
 80134fc:	428b      	cmp	r3, r1
 80134fe:	bf01      	itttt	eq
 8013500:	6819      	ldreq	r1, [r3, #0]
 8013502:	685b      	ldreq	r3, [r3, #4]
 8013504:	1809      	addeq	r1, r1, r0
 8013506:	6021      	streq	r1, [r4, #0]
 8013508:	e7ed      	b.n	80134e6 <_free_r+0x1e>
 801350a:	461a      	mov	r2, r3
 801350c:	685b      	ldr	r3, [r3, #4]
 801350e:	b10b      	cbz	r3, 8013514 <_free_r+0x4c>
 8013510:	42a3      	cmp	r3, r4
 8013512:	d9fa      	bls.n	801350a <_free_r+0x42>
 8013514:	6811      	ldr	r1, [r2, #0]
 8013516:	1850      	adds	r0, r2, r1
 8013518:	42a0      	cmp	r0, r4
 801351a:	d10b      	bne.n	8013534 <_free_r+0x6c>
 801351c:	6820      	ldr	r0, [r4, #0]
 801351e:	4401      	add	r1, r0
 8013520:	1850      	adds	r0, r2, r1
 8013522:	4283      	cmp	r3, r0
 8013524:	6011      	str	r1, [r2, #0]
 8013526:	d1e0      	bne.n	80134ea <_free_r+0x22>
 8013528:	6818      	ldr	r0, [r3, #0]
 801352a:	685b      	ldr	r3, [r3, #4]
 801352c:	6053      	str	r3, [r2, #4]
 801352e:	4408      	add	r0, r1
 8013530:	6010      	str	r0, [r2, #0]
 8013532:	e7da      	b.n	80134ea <_free_r+0x22>
 8013534:	d902      	bls.n	801353c <_free_r+0x74>
 8013536:	230c      	movs	r3, #12
 8013538:	602b      	str	r3, [r5, #0]
 801353a:	e7d6      	b.n	80134ea <_free_r+0x22>
 801353c:	6820      	ldr	r0, [r4, #0]
 801353e:	1821      	adds	r1, r4, r0
 8013540:	428b      	cmp	r3, r1
 8013542:	bf04      	itt	eq
 8013544:	6819      	ldreq	r1, [r3, #0]
 8013546:	685b      	ldreq	r3, [r3, #4]
 8013548:	6063      	str	r3, [r4, #4]
 801354a:	bf04      	itt	eq
 801354c:	1809      	addeq	r1, r1, r0
 801354e:	6021      	streq	r1, [r4, #0]
 8013550:	6054      	str	r4, [r2, #4]
 8013552:	e7ca      	b.n	80134ea <_free_r+0x22>
 8013554:	bd38      	pop	{r3, r4, r5, pc}
 8013556:	bf00      	nop
 8013558:	200015c8 	.word	0x200015c8

0801355c <__ssputs_r>:
 801355c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013560:	688e      	ldr	r6, [r1, #8]
 8013562:	461f      	mov	r7, r3
 8013564:	42be      	cmp	r6, r7
 8013566:	680b      	ldr	r3, [r1, #0]
 8013568:	4682      	mov	sl, r0
 801356a:	460c      	mov	r4, r1
 801356c:	4690      	mov	r8, r2
 801356e:	d82d      	bhi.n	80135cc <__ssputs_r+0x70>
 8013570:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013574:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013578:	d026      	beq.n	80135c8 <__ssputs_r+0x6c>
 801357a:	6965      	ldr	r5, [r4, #20]
 801357c:	6909      	ldr	r1, [r1, #16]
 801357e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013582:	eba3 0901 	sub.w	r9, r3, r1
 8013586:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801358a:	1c7b      	adds	r3, r7, #1
 801358c:	444b      	add	r3, r9
 801358e:	106d      	asrs	r5, r5, #1
 8013590:	429d      	cmp	r5, r3
 8013592:	bf38      	it	cc
 8013594:	461d      	movcc	r5, r3
 8013596:	0553      	lsls	r3, r2, #21
 8013598:	d527      	bpl.n	80135ea <__ssputs_r+0x8e>
 801359a:	4629      	mov	r1, r5
 801359c:	f7fe fde6 	bl	801216c <_malloc_r>
 80135a0:	4606      	mov	r6, r0
 80135a2:	b360      	cbz	r0, 80135fe <__ssputs_r+0xa2>
 80135a4:	6921      	ldr	r1, [r4, #16]
 80135a6:	464a      	mov	r2, r9
 80135a8:	f7ff f934 	bl	8012814 <memcpy>
 80135ac:	89a3      	ldrh	r3, [r4, #12]
 80135ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80135b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80135b6:	81a3      	strh	r3, [r4, #12]
 80135b8:	6126      	str	r6, [r4, #16]
 80135ba:	6165      	str	r5, [r4, #20]
 80135bc:	444e      	add	r6, r9
 80135be:	eba5 0509 	sub.w	r5, r5, r9
 80135c2:	6026      	str	r6, [r4, #0]
 80135c4:	60a5      	str	r5, [r4, #8]
 80135c6:	463e      	mov	r6, r7
 80135c8:	42be      	cmp	r6, r7
 80135ca:	d900      	bls.n	80135ce <__ssputs_r+0x72>
 80135cc:	463e      	mov	r6, r7
 80135ce:	6820      	ldr	r0, [r4, #0]
 80135d0:	4632      	mov	r2, r6
 80135d2:	4641      	mov	r1, r8
 80135d4:	f000 fff2 	bl	80145bc <memmove>
 80135d8:	68a3      	ldr	r3, [r4, #8]
 80135da:	1b9b      	subs	r3, r3, r6
 80135dc:	60a3      	str	r3, [r4, #8]
 80135de:	6823      	ldr	r3, [r4, #0]
 80135e0:	4433      	add	r3, r6
 80135e2:	6023      	str	r3, [r4, #0]
 80135e4:	2000      	movs	r0, #0
 80135e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135ea:	462a      	mov	r2, r5
 80135ec:	f000 fec1 	bl	8014372 <_realloc_r>
 80135f0:	4606      	mov	r6, r0
 80135f2:	2800      	cmp	r0, #0
 80135f4:	d1e0      	bne.n	80135b8 <__ssputs_r+0x5c>
 80135f6:	6921      	ldr	r1, [r4, #16]
 80135f8:	4650      	mov	r0, sl
 80135fa:	f7ff ff65 	bl	80134c8 <_free_r>
 80135fe:	230c      	movs	r3, #12
 8013600:	f8ca 3000 	str.w	r3, [sl]
 8013604:	89a3      	ldrh	r3, [r4, #12]
 8013606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801360a:	81a3      	strh	r3, [r4, #12]
 801360c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013610:	e7e9      	b.n	80135e6 <__ssputs_r+0x8a>
	...

08013614 <_svfiprintf_r>:
 8013614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013618:	4698      	mov	r8, r3
 801361a:	898b      	ldrh	r3, [r1, #12]
 801361c:	061b      	lsls	r3, r3, #24
 801361e:	b09d      	sub	sp, #116	@ 0x74
 8013620:	4607      	mov	r7, r0
 8013622:	460d      	mov	r5, r1
 8013624:	4614      	mov	r4, r2
 8013626:	d510      	bpl.n	801364a <_svfiprintf_r+0x36>
 8013628:	690b      	ldr	r3, [r1, #16]
 801362a:	b973      	cbnz	r3, 801364a <_svfiprintf_r+0x36>
 801362c:	2140      	movs	r1, #64	@ 0x40
 801362e:	f7fe fd9d 	bl	801216c <_malloc_r>
 8013632:	6028      	str	r0, [r5, #0]
 8013634:	6128      	str	r0, [r5, #16]
 8013636:	b930      	cbnz	r0, 8013646 <_svfiprintf_r+0x32>
 8013638:	230c      	movs	r3, #12
 801363a:	603b      	str	r3, [r7, #0]
 801363c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013640:	b01d      	add	sp, #116	@ 0x74
 8013642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013646:	2340      	movs	r3, #64	@ 0x40
 8013648:	616b      	str	r3, [r5, #20]
 801364a:	2300      	movs	r3, #0
 801364c:	9309      	str	r3, [sp, #36]	@ 0x24
 801364e:	2320      	movs	r3, #32
 8013650:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013654:	f8cd 800c 	str.w	r8, [sp, #12]
 8013658:	2330      	movs	r3, #48	@ 0x30
 801365a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80137f8 <_svfiprintf_r+0x1e4>
 801365e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013662:	f04f 0901 	mov.w	r9, #1
 8013666:	4623      	mov	r3, r4
 8013668:	469a      	mov	sl, r3
 801366a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801366e:	b10a      	cbz	r2, 8013674 <_svfiprintf_r+0x60>
 8013670:	2a25      	cmp	r2, #37	@ 0x25
 8013672:	d1f9      	bne.n	8013668 <_svfiprintf_r+0x54>
 8013674:	ebba 0b04 	subs.w	fp, sl, r4
 8013678:	d00b      	beq.n	8013692 <_svfiprintf_r+0x7e>
 801367a:	465b      	mov	r3, fp
 801367c:	4622      	mov	r2, r4
 801367e:	4629      	mov	r1, r5
 8013680:	4638      	mov	r0, r7
 8013682:	f7ff ff6b 	bl	801355c <__ssputs_r>
 8013686:	3001      	adds	r0, #1
 8013688:	f000 80a7 	beq.w	80137da <_svfiprintf_r+0x1c6>
 801368c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801368e:	445a      	add	r2, fp
 8013690:	9209      	str	r2, [sp, #36]	@ 0x24
 8013692:	f89a 3000 	ldrb.w	r3, [sl]
 8013696:	2b00      	cmp	r3, #0
 8013698:	f000 809f 	beq.w	80137da <_svfiprintf_r+0x1c6>
 801369c:	2300      	movs	r3, #0
 801369e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80136a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80136a6:	f10a 0a01 	add.w	sl, sl, #1
 80136aa:	9304      	str	r3, [sp, #16]
 80136ac:	9307      	str	r3, [sp, #28]
 80136ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80136b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80136b4:	4654      	mov	r4, sl
 80136b6:	2205      	movs	r2, #5
 80136b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136bc:	484e      	ldr	r0, [pc, #312]	@ (80137f8 <_svfiprintf_r+0x1e4>)
 80136be:	f7ec fdaf 	bl	8000220 <memchr>
 80136c2:	9a04      	ldr	r2, [sp, #16]
 80136c4:	b9d8      	cbnz	r0, 80136fe <_svfiprintf_r+0xea>
 80136c6:	06d0      	lsls	r0, r2, #27
 80136c8:	bf44      	itt	mi
 80136ca:	2320      	movmi	r3, #32
 80136cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80136d0:	0711      	lsls	r1, r2, #28
 80136d2:	bf44      	itt	mi
 80136d4:	232b      	movmi	r3, #43	@ 0x2b
 80136d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80136da:	f89a 3000 	ldrb.w	r3, [sl]
 80136de:	2b2a      	cmp	r3, #42	@ 0x2a
 80136e0:	d015      	beq.n	801370e <_svfiprintf_r+0xfa>
 80136e2:	9a07      	ldr	r2, [sp, #28]
 80136e4:	4654      	mov	r4, sl
 80136e6:	2000      	movs	r0, #0
 80136e8:	f04f 0c0a 	mov.w	ip, #10
 80136ec:	4621      	mov	r1, r4
 80136ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136f2:	3b30      	subs	r3, #48	@ 0x30
 80136f4:	2b09      	cmp	r3, #9
 80136f6:	d94b      	bls.n	8013790 <_svfiprintf_r+0x17c>
 80136f8:	b1b0      	cbz	r0, 8013728 <_svfiprintf_r+0x114>
 80136fa:	9207      	str	r2, [sp, #28]
 80136fc:	e014      	b.n	8013728 <_svfiprintf_r+0x114>
 80136fe:	eba0 0308 	sub.w	r3, r0, r8
 8013702:	fa09 f303 	lsl.w	r3, r9, r3
 8013706:	4313      	orrs	r3, r2
 8013708:	9304      	str	r3, [sp, #16]
 801370a:	46a2      	mov	sl, r4
 801370c:	e7d2      	b.n	80136b4 <_svfiprintf_r+0xa0>
 801370e:	9b03      	ldr	r3, [sp, #12]
 8013710:	1d19      	adds	r1, r3, #4
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	9103      	str	r1, [sp, #12]
 8013716:	2b00      	cmp	r3, #0
 8013718:	bfbb      	ittet	lt
 801371a:	425b      	neglt	r3, r3
 801371c:	f042 0202 	orrlt.w	r2, r2, #2
 8013720:	9307      	strge	r3, [sp, #28]
 8013722:	9307      	strlt	r3, [sp, #28]
 8013724:	bfb8      	it	lt
 8013726:	9204      	strlt	r2, [sp, #16]
 8013728:	7823      	ldrb	r3, [r4, #0]
 801372a:	2b2e      	cmp	r3, #46	@ 0x2e
 801372c:	d10a      	bne.n	8013744 <_svfiprintf_r+0x130>
 801372e:	7863      	ldrb	r3, [r4, #1]
 8013730:	2b2a      	cmp	r3, #42	@ 0x2a
 8013732:	d132      	bne.n	801379a <_svfiprintf_r+0x186>
 8013734:	9b03      	ldr	r3, [sp, #12]
 8013736:	1d1a      	adds	r2, r3, #4
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	9203      	str	r2, [sp, #12]
 801373c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013740:	3402      	adds	r4, #2
 8013742:	9305      	str	r3, [sp, #20]
 8013744:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013808 <_svfiprintf_r+0x1f4>
 8013748:	7821      	ldrb	r1, [r4, #0]
 801374a:	2203      	movs	r2, #3
 801374c:	4650      	mov	r0, sl
 801374e:	f7ec fd67 	bl	8000220 <memchr>
 8013752:	b138      	cbz	r0, 8013764 <_svfiprintf_r+0x150>
 8013754:	9b04      	ldr	r3, [sp, #16]
 8013756:	eba0 000a 	sub.w	r0, r0, sl
 801375a:	2240      	movs	r2, #64	@ 0x40
 801375c:	4082      	lsls	r2, r0
 801375e:	4313      	orrs	r3, r2
 8013760:	3401      	adds	r4, #1
 8013762:	9304      	str	r3, [sp, #16]
 8013764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013768:	4824      	ldr	r0, [pc, #144]	@ (80137fc <_svfiprintf_r+0x1e8>)
 801376a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801376e:	2206      	movs	r2, #6
 8013770:	f7ec fd56 	bl	8000220 <memchr>
 8013774:	2800      	cmp	r0, #0
 8013776:	d036      	beq.n	80137e6 <_svfiprintf_r+0x1d2>
 8013778:	4b21      	ldr	r3, [pc, #132]	@ (8013800 <_svfiprintf_r+0x1ec>)
 801377a:	bb1b      	cbnz	r3, 80137c4 <_svfiprintf_r+0x1b0>
 801377c:	9b03      	ldr	r3, [sp, #12]
 801377e:	3307      	adds	r3, #7
 8013780:	f023 0307 	bic.w	r3, r3, #7
 8013784:	3308      	adds	r3, #8
 8013786:	9303      	str	r3, [sp, #12]
 8013788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801378a:	4433      	add	r3, r6
 801378c:	9309      	str	r3, [sp, #36]	@ 0x24
 801378e:	e76a      	b.n	8013666 <_svfiprintf_r+0x52>
 8013790:	fb0c 3202 	mla	r2, ip, r2, r3
 8013794:	460c      	mov	r4, r1
 8013796:	2001      	movs	r0, #1
 8013798:	e7a8      	b.n	80136ec <_svfiprintf_r+0xd8>
 801379a:	2300      	movs	r3, #0
 801379c:	3401      	adds	r4, #1
 801379e:	9305      	str	r3, [sp, #20]
 80137a0:	4619      	mov	r1, r3
 80137a2:	f04f 0c0a 	mov.w	ip, #10
 80137a6:	4620      	mov	r0, r4
 80137a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80137ac:	3a30      	subs	r2, #48	@ 0x30
 80137ae:	2a09      	cmp	r2, #9
 80137b0:	d903      	bls.n	80137ba <_svfiprintf_r+0x1a6>
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d0c6      	beq.n	8013744 <_svfiprintf_r+0x130>
 80137b6:	9105      	str	r1, [sp, #20]
 80137b8:	e7c4      	b.n	8013744 <_svfiprintf_r+0x130>
 80137ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80137be:	4604      	mov	r4, r0
 80137c0:	2301      	movs	r3, #1
 80137c2:	e7f0      	b.n	80137a6 <_svfiprintf_r+0x192>
 80137c4:	ab03      	add	r3, sp, #12
 80137c6:	9300      	str	r3, [sp, #0]
 80137c8:	462a      	mov	r2, r5
 80137ca:	4b0e      	ldr	r3, [pc, #56]	@ (8013804 <_svfiprintf_r+0x1f0>)
 80137cc:	a904      	add	r1, sp, #16
 80137ce:	4638      	mov	r0, r7
 80137d0:	f7fe fa78 	bl	8011cc4 <_printf_float>
 80137d4:	1c42      	adds	r2, r0, #1
 80137d6:	4606      	mov	r6, r0
 80137d8:	d1d6      	bne.n	8013788 <_svfiprintf_r+0x174>
 80137da:	89ab      	ldrh	r3, [r5, #12]
 80137dc:	065b      	lsls	r3, r3, #25
 80137de:	f53f af2d 	bmi.w	801363c <_svfiprintf_r+0x28>
 80137e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80137e4:	e72c      	b.n	8013640 <_svfiprintf_r+0x2c>
 80137e6:	ab03      	add	r3, sp, #12
 80137e8:	9300      	str	r3, [sp, #0]
 80137ea:	462a      	mov	r2, r5
 80137ec:	4b05      	ldr	r3, [pc, #20]	@ (8013804 <_svfiprintf_r+0x1f0>)
 80137ee:	a904      	add	r1, sp, #16
 80137f0:	4638      	mov	r0, r7
 80137f2:	f7fe fda9 	bl	8012348 <_printf_i>
 80137f6:	e7ed      	b.n	80137d4 <_svfiprintf_r+0x1c0>
 80137f8:	08015aae 	.word	0x08015aae
 80137fc:	08015ab8 	.word	0x08015ab8
 8013800:	08011cc5 	.word	0x08011cc5
 8013804:	0801355d 	.word	0x0801355d
 8013808:	08015ab4 	.word	0x08015ab4

0801380c <__sfputc_r>:
 801380c:	6893      	ldr	r3, [r2, #8]
 801380e:	3b01      	subs	r3, #1
 8013810:	2b00      	cmp	r3, #0
 8013812:	b410      	push	{r4}
 8013814:	6093      	str	r3, [r2, #8]
 8013816:	da08      	bge.n	801382a <__sfputc_r+0x1e>
 8013818:	6994      	ldr	r4, [r2, #24]
 801381a:	42a3      	cmp	r3, r4
 801381c:	db01      	blt.n	8013822 <__sfputc_r+0x16>
 801381e:	290a      	cmp	r1, #10
 8013820:	d103      	bne.n	801382a <__sfputc_r+0x1e>
 8013822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013826:	f000 bdd2 	b.w	80143ce <__swbuf_r>
 801382a:	6813      	ldr	r3, [r2, #0]
 801382c:	1c58      	adds	r0, r3, #1
 801382e:	6010      	str	r0, [r2, #0]
 8013830:	7019      	strb	r1, [r3, #0]
 8013832:	4608      	mov	r0, r1
 8013834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013838:	4770      	bx	lr

0801383a <__sfputs_r>:
 801383a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801383c:	4606      	mov	r6, r0
 801383e:	460f      	mov	r7, r1
 8013840:	4614      	mov	r4, r2
 8013842:	18d5      	adds	r5, r2, r3
 8013844:	42ac      	cmp	r4, r5
 8013846:	d101      	bne.n	801384c <__sfputs_r+0x12>
 8013848:	2000      	movs	r0, #0
 801384a:	e007      	b.n	801385c <__sfputs_r+0x22>
 801384c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013850:	463a      	mov	r2, r7
 8013852:	4630      	mov	r0, r6
 8013854:	f7ff ffda 	bl	801380c <__sfputc_r>
 8013858:	1c43      	adds	r3, r0, #1
 801385a:	d1f3      	bne.n	8013844 <__sfputs_r+0xa>
 801385c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013860 <_vfiprintf_r>:
 8013860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013864:	460d      	mov	r5, r1
 8013866:	b09d      	sub	sp, #116	@ 0x74
 8013868:	4614      	mov	r4, r2
 801386a:	4698      	mov	r8, r3
 801386c:	4606      	mov	r6, r0
 801386e:	b118      	cbz	r0, 8013878 <_vfiprintf_r+0x18>
 8013870:	6a03      	ldr	r3, [r0, #32]
 8013872:	b90b      	cbnz	r3, 8013878 <_vfiprintf_r+0x18>
 8013874:	f7fe ff40 	bl	80126f8 <__sinit>
 8013878:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801387a:	07d9      	lsls	r1, r3, #31
 801387c:	d405      	bmi.n	801388a <_vfiprintf_r+0x2a>
 801387e:	89ab      	ldrh	r3, [r5, #12]
 8013880:	059a      	lsls	r2, r3, #22
 8013882:	d402      	bmi.n	801388a <_vfiprintf_r+0x2a>
 8013884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013886:	f7ef fba4 	bl	8002fd2 <__retarget_lock_acquire_recursive>
 801388a:	89ab      	ldrh	r3, [r5, #12]
 801388c:	071b      	lsls	r3, r3, #28
 801388e:	d501      	bpl.n	8013894 <_vfiprintf_r+0x34>
 8013890:	692b      	ldr	r3, [r5, #16]
 8013892:	b99b      	cbnz	r3, 80138bc <_vfiprintf_r+0x5c>
 8013894:	4629      	mov	r1, r5
 8013896:	4630      	mov	r0, r6
 8013898:	f000 fdd8 	bl	801444c <__swsetup_r>
 801389c:	b170      	cbz	r0, 80138bc <_vfiprintf_r+0x5c>
 801389e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80138a0:	07dc      	lsls	r4, r3, #31
 80138a2:	d504      	bpl.n	80138ae <_vfiprintf_r+0x4e>
 80138a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80138a8:	b01d      	add	sp, #116	@ 0x74
 80138aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ae:	89ab      	ldrh	r3, [r5, #12]
 80138b0:	0598      	lsls	r0, r3, #22
 80138b2:	d4f7      	bmi.n	80138a4 <_vfiprintf_r+0x44>
 80138b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80138b6:	f7ef fba1 	bl	8002ffc <__retarget_lock_release_recursive>
 80138ba:	e7f3      	b.n	80138a4 <_vfiprintf_r+0x44>
 80138bc:	2300      	movs	r3, #0
 80138be:	9309      	str	r3, [sp, #36]	@ 0x24
 80138c0:	2320      	movs	r3, #32
 80138c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80138c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80138ca:	2330      	movs	r3, #48	@ 0x30
 80138cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013a7c <_vfiprintf_r+0x21c>
 80138d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80138d4:	f04f 0901 	mov.w	r9, #1
 80138d8:	4623      	mov	r3, r4
 80138da:	469a      	mov	sl, r3
 80138dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138e0:	b10a      	cbz	r2, 80138e6 <_vfiprintf_r+0x86>
 80138e2:	2a25      	cmp	r2, #37	@ 0x25
 80138e4:	d1f9      	bne.n	80138da <_vfiprintf_r+0x7a>
 80138e6:	ebba 0b04 	subs.w	fp, sl, r4
 80138ea:	d00b      	beq.n	8013904 <_vfiprintf_r+0xa4>
 80138ec:	465b      	mov	r3, fp
 80138ee:	4622      	mov	r2, r4
 80138f0:	4629      	mov	r1, r5
 80138f2:	4630      	mov	r0, r6
 80138f4:	f7ff ffa1 	bl	801383a <__sfputs_r>
 80138f8:	3001      	adds	r0, #1
 80138fa:	f000 80a7 	beq.w	8013a4c <_vfiprintf_r+0x1ec>
 80138fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013900:	445a      	add	r2, fp
 8013902:	9209      	str	r2, [sp, #36]	@ 0x24
 8013904:	f89a 3000 	ldrb.w	r3, [sl]
 8013908:	2b00      	cmp	r3, #0
 801390a:	f000 809f 	beq.w	8013a4c <_vfiprintf_r+0x1ec>
 801390e:	2300      	movs	r3, #0
 8013910:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013914:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013918:	f10a 0a01 	add.w	sl, sl, #1
 801391c:	9304      	str	r3, [sp, #16]
 801391e:	9307      	str	r3, [sp, #28]
 8013920:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013924:	931a      	str	r3, [sp, #104]	@ 0x68
 8013926:	4654      	mov	r4, sl
 8013928:	2205      	movs	r2, #5
 801392a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801392e:	4853      	ldr	r0, [pc, #332]	@ (8013a7c <_vfiprintf_r+0x21c>)
 8013930:	f7ec fc76 	bl	8000220 <memchr>
 8013934:	9a04      	ldr	r2, [sp, #16]
 8013936:	b9d8      	cbnz	r0, 8013970 <_vfiprintf_r+0x110>
 8013938:	06d1      	lsls	r1, r2, #27
 801393a:	bf44      	itt	mi
 801393c:	2320      	movmi	r3, #32
 801393e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013942:	0713      	lsls	r3, r2, #28
 8013944:	bf44      	itt	mi
 8013946:	232b      	movmi	r3, #43	@ 0x2b
 8013948:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801394c:	f89a 3000 	ldrb.w	r3, [sl]
 8013950:	2b2a      	cmp	r3, #42	@ 0x2a
 8013952:	d015      	beq.n	8013980 <_vfiprintf_r+0x120>
 8013954:	9a07      	ldr	r2, [sp, #28]
 8013956:	4654      	mov	r4, sl
 8013958:	2000      	movs	r0, #0
 801395a:	f04f 0c0a 	mov.w	ip, #10
 801395e:	4621      	mov	r1, r4
 8013960:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013964:	3b30      	subs	r3, #48	@ 0x30
 8013966:	2b09      	cmp	r3, #9
 8013968:	d94b      	bls.n	8013a02 <_vfiprintf_r+0x1a2>
 801396a:	b1b0      	cbz	r0, 801399a <_vfiprintf_r+0x13a>
 801396c:	9207      	str	r2, [sp, #28]
 801396e:	e014      	b.n	801399a <_vfiprintf_r+0x13a>
 8013970:	eba0 0308 	sub.w	r3, r0, r8
 8013974:	fa09 f303 	lsl.w	r3, r9, r3
 8013978:	4313      	orrs	r3, r2
 801397a:	9304      	str	r3, [sp, #16]
 801397c:	46a2      	mov	sl, r4
 801397e:	e7d2      	b.n	8013926 <_vfiprintf_r+0xc6>
 8013980:	9b03      	ldr	r3, [sp, #12]
 8013982:	1d19      	adds	r1, r3, #4
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	9103      	str	r1, [sp, #12]
 8013988:	2b00      	cmp	r3, #0
 801398a:	bfbb      	ittet	lt
 801398c:	425b      	neglt	r3, r3
 801398e:	f042 0202 	orrlt.w	r2, r2, #2
 8013992:	9307      	strge	r3, [sp, #28]
 8013994:	9307      	strlt	r3, [sp, #28]
 8013996:	bfb8      	it	lt
 8013998:	9204      	strlt	r2, [sp, #16]
 801399a:	7823      	ldrb	r3, [r4, #0]
 801399c:	2b2e      	cmp	r3, #46	@ 0x2e
 801399e:	d10a      	bne.n	80139b6 <_vfiprintf_r+0x156>
 80139a0:	7863      	ldrb	r3, [r4, #1]
 80139a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80139a4:	d132      	bne.n	8013a0c <_vfiprintf_r+0x1ac>
 80139a6:	9b03      	ldr	r3, [sp, #12]
 80139a8:	1d1a      	adds	r2, r3, #4
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	9203      	str	r2, [sp, #12]
 80139ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80139b2:	3402      	adds	r4, #2
 80139b4:	9305      	str	r3, [sp, #20]
 80139b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013a8c <_vfiprintf_r+0x22c>
 80139ba:	7821      	ldrb	r1, [r4, #0]
 80139bc:	2203      	movs	r2, #3
 80139be:	4650      	mov	r0, sl
 80139c0:	f7ec fc2e 	bl	8000220 <memchr>
 80139c4:	b138      	cbz	r0, 80139d6 <_vfiprintf_r+0x176>
 80139c6:	9b04      	ldr	r3, [sp, #16]
 80139c8:	eba0 000a 	sub.w	r0, r0, sl
 80139cc:	2240      	movs	r2, #64	@ 0x40
 80139ce:	4082      	lsls	r2, r0
 80139d0:	4313      	orrs	r3, r2
 80139d2:	3401      	adds	r4, #1
 80139d4:	9304      	str	r3, [sp, #16]
 80139d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139da:	4829      	ldr	r0, [pc, #164]	@ (8013a80 <_vfiprintf_r+0x220>)
 80139dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80139e0:	2206      	movs	r2, #6
 80139e2:	f7ec fc1d 	bl	8000220 <memchr>
 80139e6:	2800      	cmp	r0, #0
 80139e8:	d03f      	beq.n	8013a6a <_vfiprintf_r+0x20a>
 80139ea:	4b26      	ldr	r3, [pc, #152]	@ (8013a84 <_vfiprintf_r+0x224>)
 80139ec:	bb1b      	cbnz	r3, 8013a36 <_vfiprintf_r+0x1d6>
 80139ee:	9b03      	ldr	r3, [sp, #12]
 80139f0:	3307      	adds	r3, #7
 80139f2:	f023 0307 	bic.w	r3, r3, #7
 80139f6:	3308      	adds	r3, #8
 80139f8:	9303      	str	r3, [sp, #12]
 80139fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139fc:	443b      	add	r3, r7
 80139fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a00:	e76a      	b.n	80138d8 <_vfiprintf_r+0x78>
 8013a02:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a06:	460c      	mov	r4, r1
 8013a08:	2001      	movs	r0, #1
 8013a0a:	e7a8      	b.n	801395e <_vfiprintf_r+0xfe>
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	3401      	adds	r4, #1
 8013a10:	9305      	str	r3, [sp, #20]
 8013a12:	4619      	mov	r1, r3
 8013a14:	f04f 0c0a 	mov.w	ip, #10
 8013a18:	4620      	mov	r0, r4
 8013a1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a1e:	3a30      	subs	r2, #48	@ 0x30
 8013a20:	2a09      	cmp	r2, #9
 8013a22:	d903      	bls.n	8013a2c <_vfiprintf_r+0x1cc>
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d0c6      	beq.n	80139b6 <_vfiprintf_r+0x156>
 8013a28:	9105      	str	r1, [sp, #20]
 8013a2a:	e7c4      	b.n	80139b6 <_vfiprintf_r+0x156>
 8013a2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a30:	4604      	mov	r4, r0
 8013a32:	2301      	movs	r3, #1
 8013a34:	e7f0      	b.n	8013a18 <_vfiprintf_r+0x1b8>
 8013a36:	ab03      	add	r3, sp, #12
 8013a38:	9300      	str	r3, [sp, #0]
 8013a3a:	462a      	mov	r2, r5
 8013a3c:	4b12      	ldr	r3, [pc, #72]	@ (8013a88 <_vfiprintf_r+0x228>)
 8013a3e:	a904      	add	r1, sp, #16
 8013a40:	4630      	mov	r0, r6
 8013a42:	f7fe f93f 	bl	8011cc4 <_printf_float>
 8013a46:	4607      	mov	r7, r0
 8013a48:	1c78      	adds	r0, r7, #1
 8013a4a:	d1d6      	bne.n	80139fa <_vfiprintf_r+0x19a>
 8013a4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013a4e:	07d9      	lsls	r1, r3, #31
 8013a50:	d405      	bmi.n	8013a5e <_vfiprintf_r+0x1fe>
 8013a52:	89ab      	ldrh	r3, [r5, #12]
 8013a54:	059a      	lsls	r2, r3, #22
 8013a56:	d402      	bmi.n	8013a5e <_vfiprintf_r+0x1fe>
 8013a58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013a5a:	f7ef facf 	bl	8002ffc <__retarget_lock_release_recursive>
 8013a5e:	89ab      	ldrh	r3, [r5, #12]
 8013a60:	065b      	lsls	r3, r3, #25
 8013a62:	f53f af1f 	bmi.w	80138a4 <_vfiprintf_r+0x44>
 8013a66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a68:	e71e      	b.n	80138a8 <_vfiprintf_r+0x48>
 8013a6a:	ab03      	add	r3, sp, #12
 8013a6c:	9300      	str	r3, [sp, #0]
 8013a6e:	462a      	mov	r2, r5
 8013a70:	4b05      	ldr	r3, [pc, #20]	@ (8013a88 <_vfiprintf_r+0x228>)
 8013a72:	a904      	add	r1, sp, #16
 8013a74:	4630      	mov	r0, r6
 8013a76:	f7fe fc67 	bl	8012348 <_printf_i>
 8013a7a:	e7e4      	b.n	8013a46 <_vfiprintf_r+0x1e6>
 8013a7c:	08015aae 	.word	0x08015aae
 8013a80:	08015ab8 	.word	0x08015ab8
 8013a84:	08011cc5 	.word	0x08011cc5
 8013a88:	0801383b 	.word	0x0801383b
 8013a8c:	08015ab4 	.word	0x08015ab4

08013a90 <__sflush_r>:
 8013a90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a98:	0716      	lsls	r6, r2, #28
 8013a9a:	4605      	mov	r5, r0
 8013a9c:	460c      	mov	r4, r1
 8013a9e:	d454      	bmi.n	8013b4a <__sflush_r+0xba>
 8013aa0:	684b      	ldr	r3, [r1, #4]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	dc02      	bgt.n	8013aac <__sflush_r+0x1c>
 8013aa6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	dd48      	ble.n	8013b3e <__sflush_r+0xae>
 8013aac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013aae:	2e00      	cmp	r6, #0
 8013ab0:	d045      	beq.n	8013b3e <__sflush_r+0xae>
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013ab8:	682f      	ldr	r7, [r5, #0]
 8013aba:	6a21      	ldr	r1, [r4, #32]
 8013abc:	602b      	str	r3, [r5, #0]
 8013abe:	d030      	beq.n	8013b22 <__sflush_r+0x92>
 8013ac0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013ac2:	89a3      	ldrh	r3, [r4, #12]
 8013ac4:	0759      	lsls	r1, r3, #29
 8013ac6:	d505      	bpl.n	8013ad4 <__sflush_r+0x44>
 8013ac8:	6863      	ldr	r3, [r4, #4]
 8013aca:	1ad2      	subs	r2, r2, r3
 8013acc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013ace:	b10b      	cbz	r3, 8013ad4 <__sflush_r+0x44>
 8013ad0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013ad2:	1ad2      	subs	r2, r2, r3
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013ad8:	6a21      	ldr	r1, [r4, #32]
 8013ada:	4628      	mov	r0, r5
 8013adc:	47b0      	blx	r6
 8013ade:	1c43      	adds	r3, r0, #1
 8013ae0:	89a3      	ldrh	r3, [r4, #12]
 8013ae2:	d106      	bne.n	8013af2 <__sflush_r+0x62>
 8013ae4:	6829      	ldr	r1, [r5, #0]
 8013ae6:	291d      	cmp	r1, #29
 8013ae8:	d82b      	bhi.n	8013b42 <__sflush_r+0xb2>
 8013aea:	4a2a      	ldr	r2, [pc, #168]	@ (8013b94 <__sflush_r+0x104>)
 8013aec:	410a      	asrs	r2, r1
 8013aee:	07d6      	lsls	r6, r2, #31
 8013af0:	d427      	bmi.n	8013b42 <__sflush_r+0xb2>
 8013af2:	2200      	movs	r2, #0
 8013af4:	6062      	str	r2, [r4, #4]
 8013af6:	04d9      	lsls	r1, r3, #19
 8013af8:	6922      	ldr	r2, [r4, #16]
 8013afa:	6022      	str	r2, [r4, #0]
 8013afc:	d504      	bpl.n	8013b08 <__sflush_r+0x78>
 8013afe:	1c42      	adds	r2, r0, #1
 8013b00:	d101      	bne.n	8013b06 <__sflush_r+0x76>
 8013b02:	682b      	ldr	r3, [r5, #0]
 8013b04:	b903      	cbnz	r3, 8013b08 <__sflush_r+0x78>
 8013b06:	6560      	str	r0, [r4, #84]	@ 0x54
 8013b08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013b0a:	602f      	str	r7, [r5, #0]
 8013b0c:	b1b9      	cbz	r1, 8013b3e <__sflush_r+0xae>
 8013b0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013b12:	4299      	cmp	r1, r3
 8013b14:	d002      	beq.n	8013b1c <__sflush_r+0x8c>
 8013b16:	4628      	mov	r0, r5
 8013b18:	f7ff fcd6 	bl	80134c8 <_free_r>
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8013b20:	e00d      	b.n	8013b3e <__sflush_r+0xae>
 8013b22:	2301      	movs	r3, #1
 8013b24:	4628      	mov	r0, r5
 8013b26:	47b0      	blx	r6
 8013b28:	4602      	mov	r2, r0
 8013b2a:	1c50      	adds	r0, r2, #1
 8013b2c:	d1c9      	bne.n	8013ac2 <__sflush_r+0x32>
 8013b2e:	682b      	ldr	r3, [r5, #0]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d0c6      	beq.n	8013ac2 <__sflush_r+0x32>
 8013b34:	2b1d      	cmp	r3, #29
 8013b36:	d001      	beq.n	8013b3c <__sflush_r+0xac>
 8013b38:	2b16      	cmp	r3, #22
 8013b3a:	d11e      	bne.n	8013b7a <__sflush_r+0xea>
 8013b3c:	602f      	str	r7, [r5, #0]
 8013b3e:	2000      	movs	r0, #0
 8013b40:	e022      	b.n	8013b88 <__sflush_r+0xf8>
 8013b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b46:	b21b      	sxth	r3, r3
 8013b48:	e01b      	b.n	8013b82 <__sflush_r+0xf2>
 8013b4a:	690f      	ldr	r7, [r1, #16]
 8013b4c:	2f00      	cmp	r7, #0
 8013b4e:	d0f6      	beq.n	8013b3e <__sflush_r+0xae>
 8013b50:	0793      	lsls	r3, r2, #30
 8013b52:	680e      	ldr	r6, [r1, #0]
 8013b54:	bf08      	it	eq
 8013b56:	694b      	ldreq	r3, [r1, #20]
 8013b58:	600f      	str	r7, [r1, #0]
 8013b5a:	bf18      	it	ne
 8013b5c:	2300      	movne	r3, #0
 8013b5e:	eba6 0807 	sub.w	r8, r6, r7
 8013b62:	608b      	str	r3, [r1, #8]
 8013b64:	f1b8 0f00 	cmp.w	r8, #0
 8013b68:	dde9      	ble.n	8013b3e <__sflush_r+0xae>
 8013b6a:	6a21      	ldr	r1, [r4, #32]
 8013b6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013b6e:	4643      	mov	r3, r8
 8013b70:	463a      	mov	r2, r7
 8013b72:	4628      	mov	r0, r5
 8013b74:	47b0      	blx	r6
 8013b76:	2800      	cmp	r0, #0
 8013b78:	dc08      	bgt.n	8013b8c <__sflush_r+0xfc>
 8013b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b82:	81a3      	strh	r3, [r4, #12]
 8013b84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b8c:	4407      	add	r7, r0
 8013b8e:	eba8 0800 	sub.w	r8, r8, r0
 8013b92:	e7e7      	b.n	8013b64 <__sflush_r+0xd4>
 8013b94:	dfbffffe 	.word	0xdfbffffe

08013b98 <_fflush_r>:
 8013b98:	b538      	push	{r3, r4, r5, lr}
 8013b9a:	690b      	ldr	r3, [r1, #16]
 8013b9c:	4605      	mov	r5, r0
 8013b9e:	460c      	mov	r4, r1
 8013ba0:	b913      	cbnz	r3, 8013ba8 <_fflush_r+0x10>
 8013ba2:	2500      	movs	r5, #0
 8013ba4:	4628      	mov	r0, r5
 8013ba6:	bd38      	pop	{r3, r4, r5, pc}
 8013ba8:	b118      	cbz	r0, 8013bb2 <_fflush_r+0x1a>
 8013baa:	6a03      	ldr	r3, [r0, #32]
 8013bac:	b90b      	cbnz	r3, 8013bb2 <_fflush_r+0x1a>
 8013bae:	f7fe fda3 	bl	80126f8 <__sinit>
 8013bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d0f3      	beq.n	8013ba2 <_fflush_r+0xa>
 8013bba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013bbc:	07d0      	lsls	r0, r2, #31
 8013bbe:	d404      	bmi.n	8013bca <_fflush_r+0x32>
 8013bc0:	0599      	lsls	r1, r3, #22
 8013bc2:	d402      	bmi.n	8013bca <_fflush_r+0x32>
 8013bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013bc6:	f7ef fa04 	bl	8002fd2 <__retarget_lock_acquire_recursive>
 8013bca:	4628      	mov	r0, r5
 8013bcc:	4621      	mov	r1, r4
 8013bce:	f7ff ff5f 	bl	8013a90 <__sflush_r>
 8013bd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013bd4:	07da      	lsls	r2, r3, #31
 8013bd6:	4605      	mov	r5, r0
 8013bd8:	d4e4      	bmi.n	8013ba4 <_fflush_r+0xc>
 8013bda:	89a3      	ldrh	r3, [r4, #12]
 8013bdc:	059b      	lsls	r3, r3, #22
 8013bde:	d4e1      	bmi.n	8013ba4 <_fflush_r+0xc>
 8013be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013be2:	f7ef fa0b 	bl	8002ffc <__retarget_lock_release_recursive>
 8013be6:	e7dd      	b.n	8013ba4 <_fflush_r+0xc>

08013be8 <_Balloc>:
 8013be8:	b570      	push	{r4, r5, r6, lr}
 8013bea:	69c6      	ldr	r6, [r0, #28]
 8013bec:	4604      	mov	r4, r0
 8013bee:	460d      	mov	r5, r1
 8013bf0:	b976      	cbnz	r6, 8013c10 <_Balloc+0x28>
 8013bf2:	2010      	movs	r0, #16
 8013bf4:	f7fe fa90 	bl	8012118 <malloc>
 8013bf8:	4602      	mov	r2, r0
 8013bfa:	61e0      	str	r0, [r4, #28]
 8013bfc:	b920      	cbnz	r0, 8013c08 <_Balloc+0x20>
 8013bfe:	4b18      	ldr	r3, [pc, #96]	@ (8013c60 <_Balloc+0x78>)
 8013c00:	4818      	ldr	r0, [pc, #96]	@ (8013c64 <_Balloc+0x7c>)
 8013c02:	216b      	movs	r1, #107	@ 0x6b
 8013c04:	f000 fd5c 	bl	80146c0 <__assert_func>
 8013c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013c0c:	6006      	str	r6, [r0, #0]
 8013c0e:	60c6      	str	r6, [r0, #12]
 8013c10:	69e6      	ldr	r6, [r4, #28]
 8013c12:	68f3      	ldr	r3, [r6, #12]
 8013c14:	b183      	cbz	r3, 8013c38 <_Balloc+0x50>
 8013c16:	69e3      	ldr	r3, [r4, #28]
 8013c18:	68db      	ldr	r3, [r3, #12]
 8013c1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013c1e:	b9b8      	cbnz	r0, 8013c50 <_Balloc+0x68>
 8013c20:	2101      	movs	r1, #1
 8013c22:	fa01 f605 	lsl.w	r6, r1, r5
 8013c26:	1d72      	adds	r2, r6, #5
 8013c28:	0092      	lsls	r2, r2, #2
 8013c2a:	4620      	mov	r0, r4
 8013c2c:	f000 fd66 	bl	80146fc <_calloc_r>
 8013c30:	b160      	cbz	r0, 8013c4c <_Balloc+0x64>
 8013c32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013c36:	e00e      	b.n	8013c56 <_Balloc+0x6e>
 8013c38:	2221      	movs	r2, #33	@ 0x21
 8013c3a:	2104      	movs	r1, #4
 8013c3c:	4620      	mov	r0, r4
 8013c3e:	f000 fd5d 	bl	80146fc <_calloc_r>
 8013c42:	69e3      	ldr	r3, [r4, #28]
 8013c44:	60f0      	str	r0, [r6, #12]
 8013c46:	68db      	ldr	r3, [r3, #12]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d1e4      	bne.n	8013c16 <_Balloc+0x2e>
 8013c4c:	2000      	movs	r0, #0
 8013c4e:	bd70      	pop	{r4, r5, r6, pc}
 8013c50:	6802      	ldr	r2, [r0, #0]
 8013c52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013c56:	2300      	movs	r3, #0
 8013c58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013c5c:	e7f7      	b.n	8013c4e <_Balloc+0x66>
 8013c5e:	bf00      	nop
 8013c60:	08015a2e 	.word	0x08015a2e
 8013c64:	08015abf 	.word	0x08015abf

08013c68 <_Bfree>:
 8013c68:	b570      	push	{r4, r5, r6, lr}
 8013c6a:	69c6      	ldr	r6, [r0, #28]
 8013c6c:	4605      	mov	r5, r0
 8013c6e:	460c      	mov	r4, r1
 8013c70:	b976      	cbnz	r6, 8013c90 <_Bfree+0x28>
 8013c72:	2010      	movs	r0, #16
 8013c74:	f7fe fa50 	bl	8012118 <malloc>
 8013c78:	4602      	mov	r2, r0
 8013c7a:	61e8      	str	r0, [r5, #28]
 8013c7c:	b920      	cbnz	r0, 8013c88 <_Bfree+0x20>
 8013c7e:	4b09      	ldr	r3, [pc, #36]	@ (8013ca4 <_Bfree+0x3c>)
 8013c80:	4809      	ldr	r0, [pc, #36]	@ (8013ca8 <_Bfree+0x40>)
 8013c82:	218f      	movs	r1, #143	@ 0x8f
 8013c84:	f000 fd1c 	bl	80146c0 <__assert_func>
 8013c88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013c8c:	6006      	str	r6, [r0, #0]
 8013c8e:	60c6      	str	r6, [r0, #12]
 8013c90:	b13c      	cbz	r4, 8013ca2 <_Bfree+0x3a>
 8013c92:	69eb      	ldr	r3, [r5, #28]
 8013c94:	6862      	ldr	r2, [r4, #4]
 8013c96:	68db      	ldr	r3, [r3, #12]
 8013c98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013c9c:	6021      	str	r1, [r4, #0]
 8013c9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013ca2:	bd70      	pop	{r4, r5, r6, pc}
 8013ca4:	08015a2e 	.word	0x08015a2e
 8013ca8:	08015abf 	.word	0x08015abf

08013cac <__multadd>:
 8013cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cb0:	690d      	ldr	r5, [r1, #16]
 8013cb2:	4607      	mov	r7, r0
 8013cb4:	460c      	mov	r4, r1
 8013cb6:	461e      	mov	r6, r3
 8013cb8:	f101 0c14 	add.w	ip, r1, #20
 8013cbc:	2000      	movs	r0, #0
 8013cbe:	f8dc 3000 	ldr.w	r3, [ip]
 8013cc2:	b299      	uxth	r1, r3
 8013cc4:	fb02 6101 	mla	r1, r2, r1, r6
 8013cc8:	0c1e      	lsrs	r6, r3, #16
 8013cca:	0c0b      	lsrs	r3, r1, #16
 8013ccc:	fb02 3306 	mla	r3, r2, r6, r3
 8013cd0:	b289      	uxth	r1, r1
 8013cd2:	3001      	adds	r0, #1
 8013cd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013cd8:	4285      	cmp	r5, r0
 8013cda:	f84c 1b04 	str.w	r1, [ip], #4
 8013cde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013ce2:	dcec      	bgt.n	8013cbe <__multadd+0x12>
 8013ce4:	b30e      	cbz	r6, 8013d2a <__multadd+0x7e>
 8013ce6:	68a3      	ldr	r3, [r4, #8]
 8013ce8:	42ab      	cmp	r3, r5
 8013cea:	dc19      	bgt.n	8013d20 <__multadd+0x74>
 8013cec:	6861      	ldr	r1, [r4, #4]
 8013cee:	4638      	mov	r0, r7
 8013cf0:	3101      	adds	r1, #1
 8013cf2:	f7ff ff79 	bl	8013be8 <_Balloc>
 8013cf6:	4680      	mov	r8, r0
 8013cf8:	b928      	cbnz	r0, 8013d06 <__multadd+0x5a>
 8013cfa:	4602      	mov	r2, r0
 8013cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8013d30 <__multadd+0x84>)
 8013cfe:	480d      	ldr	r0, [pc, #52]	@ (8013d34 <__multadd+0x88>)
 8013d00:	21ba      	movs	r1, #186	@ 0xba
 8013d02:	f000 fcdd 	bl	80146c0 <__assert_func>
 8013d06:	6922      	ldr	r2, [r4, #16]
 8013d08:	3202      	adds	r2, #2
 8013d0a:	f104 010c 	add.w	r1, r4, #12
 8013d0e:	0092      	lsls	r2, r2, #2
 8013d10:	300c      	adds	r0, #12
 8013d12:	f7fe fd7f 	bl	8012814 <memcpy>
 8013d16:	4621      	mov	r1, r4
 8013d18:	4638      	mov	r0, r7
 8013d1a:	f7ff ffa5 	bl	8013c68 <_Bfree>
 8013d1e:	4644      	mov	r4, r8
 8013d20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013d24:	3501      	adds	r5, #1
 8013d26:	615e      	str	r6, [r3, #20]
 8013d28:	6125      	str	r5, [r4, #16]
 8013d2a:	4620      	mov	r0, r4
 8013d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d30:	08015a9d 	.word	0x08015a9d
 8013d34:	08015abf 	.word	0x08015abf

08013d38 <__hi0bits>:
 8013d38:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	bf36      	itet	cc
 8013d40:	0403      	lslcc	r3, r0, #16
 8013d42:	2000      	movcs	r0, #0
 8013d44:	2010      	movcc	r0, #16
 8013d46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013d4a:	bf3c      	itt	cc
 8013d4c:	021b      	lslcc	r3, r3, #8
 8013d4e:	3008      	addcc	r0, #8
 8013d50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013d54:	bf3c      	itt	cc
 8013d56:	011b      	lslcc	r3, r3, #4
 8013d58:	3004      	addcc	r0, #4
 8013d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013d5e:	bf3c      	itt	cc
 8013d60:	009b      	lslcc	r3, r3, #2
 8013d62:	3002      	addcc	r0, #2
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	db05      	blt.n	8013d74 <__hi0bits+0x3c>
 8013d68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013d6c:	f100 0001 	add.w	r0, r0, #1
 8013d70:	bf08      	it	eq
 8013d72:	2020      	moveq	r0, #32
 8013d74:	4770      	bx	lr

08013d76 <__lo0bits>:
 8013d76:	6803      	ldr	r3, [r0, #0]
 8013d78:	4602      	mov	r2, r0
 8013d7a:	f013 0007 	ands.w	r0, r3, #7
 8013d7e:	d00b      	beq.n	8013d98 <__lo0bits+0x22>
 8013d80:	07d9      	lsls	r1, r3, #31
 8013d82:	d421      	bmi.n	8013dc8 <__lo0bits+0x52>
 8013d84:	0798      	lsls	r0, r3, #30
 8013d86:	bf49      	itett	mi
 8013d88:	085b      	lsrmi	r3, r3, #1
 8013d8a:	089b      	lsrpl	r3, r3, #2
 8013d8c:	2001      	movmi	r0, #1
 8013d8e:	6013      	strmi	r3, [r2, #0]
 8013d90:	bf5c      	itt	pl
 8013d92:	6013      	strpl	r3, [r2, #0]
 8013d94:	2002      	movpl	r0, #2
 8013d96:	4770      	bx	lr
 8013d98:	b299      	uxth	r1, r3
 8013d9a:	b909      	cbnz	r1, 8013da0 <__lo0bits+0x2a>
 8013d9c:	0c1b      	lsrs	r3, r3, #16
 8013d9e:	2010      	movs	r0, #16
 8013da0:	b2d9      	uxtb	r1, r3
 8013da2:	b909      	cbnz	r1, 8013da8 <__lo0bits+0x32>
 8013da4:	3008      	adds	r0, #8
 8013da6:	0a1b      	lsrs	r3, r3, #8
 8013da8:	0719      	lsls	r1, r3, #28
 8013daa:	bf04      	itt	eq
 8013dac:	091b      	lsreq	r3, r3, #4
 8013dae:	3004      	addeq	r0, #4
 8013db0:	0799      	lsls	r1, r3, #30
 8013db2:	bf04      	itt	eq
 8013db4:	089b      	lsreq	r3, r3, #2
 8013db6:	3002      	addeq	r0, #2
 8013db8:	07d9      	lsls	r1, r3, #31
 8013dba:	d403      	bmi.n	8013dc4 <__lo0bits+0x4e>
 8013dbc:	085b      	lsrs	r3, r3, #1
 8013dbe:	f100 0001 	add.w	r0, r0, #1
 8013dc2:	d003      	beq.n	8013dcc <__lo0bits+0x56>
 8013dc4:	6013      	str	r3, [r2, #0]
 8013dc6:	4770      	bx	lr
 8013dc8:	2000      	movs	r0, #0
 8013dca:	4770      	bx	lr
 8013dcc:	2020      	movs	r0, #32
 8013dce:	4770      	bx	lr

08013dd0 <__i2b>:
 8013dd0:	b510      	push	{r4, lr}
 8013dd2:	460c      	mov	r4, r1
 8013dd4:	2101      	movs	r1, #1
 8013dd6:	f7ff ff07 	bl	8013be8 <_Balloc>
 8013dda:	4602      	mov	r2, r0
 8013ddc:	b928      	cbnz	r0, 8013dea <__i2b+0x1a>
 8013dde:	4b05      	ldr	r3, [pc, #20]	@ (8013df4 <__i2b+0x24>)
 8013de0:	4805      	ldr	r0, [pc, #20]	@ (8013df8 <__i2b+0x28>)
 8013de2:	f240 1145 	movw	r1, #325	@ 0x145
 8013de6:	f000 fc6b 	bl	80146c0 <__assert_func>
 8013dea:	2301      	movs	r3, #1
 8013dec:	6144      	str	r4, [r0, #20]
 8013dee:	6103      	str	r3, [r0, #16]
 8013df0:	bd10      	pop	{r4, pc}
 8013df2:	bf00      	nop
 8013df4:	08015a9d 	.word	0x08015a9d
 8013df8:	08015abf 	.word	0x08015abf

08013dfc <__multiply>:
 8013dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e00:	4614      	mov	r4, r2
 8013e02:	690a      	ldr	r2, [r1, #16]
 8013e04:	6923      	ldr	r3, [r4, #16]
 8013e06:	429a      	cmp	r2, r3
 8013e08:	bfa8      	it	ge
 8013e0a:	4623      	movge	r3, r4
 8013e0c:	460f      	mov	r7, r1
 8013e0e:	bfa4      	itt	ge
 8013e10:	460c      	movge	r4, r1
 8013e12:	461f      	movge	r7, r3
 8013e14:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013e18:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013e1c:	68a3      	ldr	r3, [r4, #8]
 8013e1e:	6861      	ldr	r1, [r4, #4]
 8013e20:	eb0a 0609 	add.w	r6, sl, r9
 8013e24:	42b3      	cmp	r3, r6
 8013e26:	b085      	sub	sp, #20
 8013e28:	bfb8      	it	lt
 8013e2a:	3101      	addlt	r1, #1
 8013e2c:	f7ff fedc 	bl	8013be8 <_Balloc>
 8013e30:	b930      	cbnz	r0, 8013e40 <__multiply+0x44>
 8013e32:	4602      	mov	r2, r0
 8013e34:	4b44      	ldr	r3, [pc, #272]	@ (8013f48 <__multiply+0x14c>)
 8013e36:	4845      	ldr	r0, [pc, #276]	@ (8013f4c <__multiply+0x150>)
 8013e38:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013e3c:	f000 fc40 	bl	80146c0 <__assert_func>
 8013e40:	f100 0514 	add.w	r5, r0, #20
 8013e44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013e48:	462b      	mov	r3, r5
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	4543      	cmp	r3, r8
 8013e4e:	d321      	bcc.n	8013e94 <__multiply+0x98>
 8013e50:	f107 0114 	add.w	r1, r7, #20
 8013e54:	f104 0214 	add.w	r2, r4, #20
 8013e58:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013e5c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013e60:	9302      	str	r3, [sp, #8]
 8013e62:	1b13      	subs	r3, r2, r4
 8013e64:	3b15      	subs	r3, #21
 8013e66:	f023 0303 	bic.w	r3, r3, #3
 8013e6a:	3304      	adds	r3, #4
 8013e6c:	f104 0715 	add.w	r7, r4, #21
 8013e70:	42ba      	cmp	r2, r7
 8013e72:	bf38      	it	cc
 8013e74:	2304      	movcc	r3, #4
 8013e76:	9301      	str	r3, [sp, #4]
 8013e78:	9b02      	ldr	r3, [sp, #8]
 8013e7a:	9103      	str	r1, [sp, #12]
 8013e7c:	428b      	cmp	r3, r1
 8013e7e:	d80c      	bhi.n	8013e9a <__multiply+0x9e>
 8013e80:	2e00      	cmp	r6, #0
 8013e82:	dd03      	ble.n	8013e8c <__multiply+0x90>
 8013e84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d05b      	beq.n	8013f44 <__multiply+0x148>
 8013e8c:	6106      	str	r6, [r0, #16]
 8013e8e:	b005      	add	sp, #20
 8013e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e94:	f843 2b04 	str.w	r2, [r3], #4
 8013e98:	e7d8      	b.n	8013e4c <__multiply+0x50>
 8013e9a:	f8b1 a000 	ldrh.w	sl, [r1]
 8013e9e:	f1ba 0f00 	cmp.w	sl, #0
 8013ea2:	d024      	beq.n	8013eee <__multiply+0xf2>
 8013ea4:	f104 0e14 	add.w	lr, r4, #20
 8013ea8:	46a9      	mov	r9, r5
 8013eaa:	f04f 0c00 	mov.w	ip, #0
 8013eae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013eb2:	f8d9 3000 	ldr.w	r3, [r9]
 8013eb6:	fa1f fb87 	uxth.w	fp, r7
 8013eba:	b29b      	uxth	r3, r3
 8013ebc:	fb0a 330b 	mla	r3, sl, fp, r3
 8013ec0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013ec4:	f8d9 7000 	ldr.w	r7, [r9]
 8013ec8:	4463      	add	r3, ip
 8013eca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013ece:	fb0a c70b 	mla	r7, sl, fp, ip
 8013ed2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013ed6:	b29b      	uxth	r3, r3
 8013ed8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013edc:	4572      	cmp	r2, lr
 8013ede:	f849 3b04 	str.w	r3, [r9], #4
 8013ee2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013ee6:	d8e2      	bhi.n	8013eae <__multiply+0xb2>
 8013ee8:	9b01      	ldr	r3, [sp, #4]
 8013eea:	f845 c003 	str.w	ip, [r5, r3]
 8013eee:	9b03      	ldr	r3, [sp, #12]
 8013ef0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013ef4:	3104      	adds	r1, #4
 8013ef6:	f1b9 0f00 	cmp.w	r9, #0
 8013efa:	d021      	beq.n	8013f40 <__multiply+0x144>
 8013efc:	682b      	ldr	r3, [r5, #0]
 8013efe:	f104 0c14 	add.w	ip, r4, #20
 8013f02:	46ae      	mov	lr, r5
 8013f04:	f04f 0a00 	mov.w	sl, #0
 8013f08:	f8bc b000 	ldrh.w	fp, [ip]
 8013f0c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013f10:	fb09 770b 	mla	r7, r9, fp, r7
 8013f14:	4457      	add	r7, sl
 8013f16:	b29b      	uxth	r3, r3
 8013f18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013f1c:	f84e 3b04 	str.w	r3, [lr], #4
 8013f20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013f24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013f28:	f8be 3000 	ldrh.w	r3, [lr]
 8013f2c:	fb09 330a 	mla	r3, r9, sl, r3
 8013f30:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013f34:	4562      	cmp	r2, ip
 8013f36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013f3a:	d8e5      	bhi.n	8013f08 <__multiply+0x10c>
 8013f3c:	9f01      	ldr	r7, [sp, #4]
 8013f3e:	51eb      	str	r3, [r5, r7]
 8013f40:	3504      	adds	r5, #4
 8013f42:	e799      	b.n	8013e78 <__multiply+0x7c>
 8013f44:	3e01      	subs	r6, #1
 8013f46:	e79b      	b.n	8013e80 <__multiply+0x84>
 8013f48:	08015a9d 	.word	0x08015a9d
 8013f4c:	08015abf 	.word	0x08015abf

08013f50 <__pow5mult>:
 8013f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f54:	4615      	mov	r5, r2
 8013f56:	f012 0203 	ands.w	r2, r2, #3
 8013f5a:	4607      	mov	r7, r0
 8013f5c:	460e      	mov	r6, r1
 8013f5e:	d007      	beq.n	8013f70 <__pow5mult+0x20>
 8013f60:	4c25      	ldr	r4, [pc, #148]	@ (8013ff8 <__pow5mult+0xa8>)
 8013f62:	3a01      	subs	r2, #1
 8013f64:	2300      	movs	r3, #0
 8013f66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013f6a:	f7ff fe9f 	bl	8013cac <__multadd>
 8013f6e:	4606      	mov	r6, r0
 8013f70:	10ad      	asrs	r5, r5, #2
 8013f72:	d03d      	beq.n	8013ff0 <__pow5mult+0xa0>
 8013f74:	69fc      	ldr	r4, [r7, #28]
 8013f76:	b97c      	cbnz	r4, 8013f98 <__pow5mult+0x48>
 8013f78:	2010      	movs	r0, #16
 8013f7a:	f7fe f8cd 	bl	8012118 <malloc>
 8013f7e:	4602      	mov	r2, r0
 8013f80:	61f8      	str	r0, [r7, #28]
 8013f82:	b928      	cbnz	r0, 8013f90 <__pow5mult+0x40>
 8013f84:	4b1d      	ldr	r3, [pc, #116]	@ (8013ffc <__pow5mult+0xac>)
 8013f86:	481e      	ldr	r0, [pc, #120]	@ (8014000 <__pow5mult+0xb0>)
 8013f88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013f8c:	f000 fb98 	bl	80146c0 <__assert_func>
 8013f90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013f94:	6004      	str	r4, [r0, #0]
 8013f96:	60c4      	str	r4, [r0, #12]
 8013f98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013f9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013fa0:	b94c      	cbnz	r4, 8013fb6 <__pow5mult+0x66>
 8013fa2:	f240 2171 	movw	r1, #625	@ 0x271
 8013fa6:	4638      	mov	r0, r7
 8013fa8:	f7ff ff12 	bl	8013dd0 <__i2b>
 8013fac:	2300      	movs	r3, #0
 8013fae:	f8c8 0008 	str.w	r0, [r8, #8]
 8013fb2:	4604      	mov	r4, r0
 8013fb4:	6003      	str	r3, [r0, #0]
 8013fb6:	f04f 0900 	mov.w	r9, #0
 8013fba:	07eb      	lsls	r3, r5, #31
 8013fbc:	d50a      	bpl.n	8013fd4 <__pow5mult+0x84>
 8013fbe:	4631      	mov	r1, r6
 8013fc0:	4622      	mov	r2, r4
 8013fc2:	4638      	mov	r0, r7
 8013fc4:	f7ff ff1a 	bl	8013dfc <__multiply>
 8013fc8:	4631      	mov	r1, r6
 8013fca:	4680      	mov	r8, r0
 8013fcc:	4638      	mov	r0, r7
 8013fce:	f7ff fe4b 	bl	8013c68 <_Bfree>
 8013fd2:	4646      	mov	r6, r8
 8013fd4:	106d      	asrs	r5, r5, #1
 8013fd6:	d00b      	beq.n	8013ff0 <__pow5mult+0xa0>
 8013fd8:	6820      	ldr	r0, [r4, #0]
 8013fda:	b938      	cbnz	r0, 8013fec <__pow5mult+0x9c>
 8013fdc:	4622      	mov	r2, r4
 8013fde:	4621      	mov	r1, r4
 8013fe0:	4638      	mov	r0, r7
 8013fe2:	f7ff ff0b 	bl	8013dfc <__multiply>
 8013fe6:	6020      	str	r0, [r4, #0]
 8013fe8:	f8c0 9000 	str.w	r9, [r0]
 8013fec:	4604      	mov	r4, r0
 8013fee:	e7e4      	b.n	8013fba <__pow5mult+0x6a>
 8013ff0:	4630      	mov	r0, r6
 8013ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ff6:	bf00      	nop
 8013ff8:	08015b18 	.word	0x08015b18
 8013ffc:	08015a2e 	.word	0x08015a2e
 8014000:	08015abf 	.word	0x08015abf

08014004 <__lshift>:
 8014004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014008:	460c      	mov	r4, r1
 801400a:	6849      	ldr	r1, [r1, #4]
 801400c:	6923      	ldr	r3, [r4, #16]
 801400e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014012:	68a3      	ldr	r3, [r4, #8]
 8014014:	4607      	mov	r7, r0
 8014016:	4691      	mov	r9, r2
 8014018:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801401c:	f108 0601 	add.w	r6, r8, #1
 8014020:	42b3      	cmp	r3, r6
 8014022:	db0b      	blt.n	801403c <__lshift+0x38>
 8014024:	4638      	mov	r0, r7
 8014026:	f7ff fddf 	bl	8013be8 <_Balloc>
 801402a:	4605      	mov	r5, r0
 801402c:	b948      	cbnz	r0, 8014042 <__lshift+0x3e>
 801402e:	4602      	mov	r2, r0
 8014030:	4b28      	ldr	r3, [pc, #160]	@ (80140d4 <__lshift+0xd0>)
 8014032:	4829      	ldr	r0, [pc, #164]	@ (80140d8 <__lshift+0xd4>)
 8014034:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014038:	f000 fb42 	bl	80146c0 <__assert_func>
 801403c:	3101      	adds	r1, #1
 801403e:	005b      	lsls	r3, r3, #1
 8014040:	e7ee      	b.n	8014020 <__lshift+0x1c>
 8014042:	2300      	movs	r3, #0
 8014044:	f100 0114 	add.w	r1, r0, #20
 8014048:	f100 0210 	add.w	r2, r0, #16
 801404c:	4618      	mov	r0, r3
 801404e:	4553      	cmp	r3, sl
 8014050:	db33      	blt.n	80140ba <__lshift+0xb6>
 8014052:	6920      	ldr	r0, [r4, #16]
 8014054:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014058:	f104 0314 	add.w	r3, r4, #20
 801405c:	f019 091f 	ands.w	r9, r9, #31
 8014060:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014064:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014068:	d02b      	beq.n	80140c2 <__lshift+0xbe>
 801406a:	f1c9 0e20 	rsb	lr, r9, #32
 801406e:	468a      	mov	sl, r1
 8014070:	2200      	movs	r2, #0
 8014072:	6818      	ldr	r0, [r3, #0]
 8014074:	fa00 f009 	lsl.w	r0, r0, r9
 8014078:	4310      	orrs	r0, r2
 801407a:	f84a 0b04 	str.w	r0, [sl], #4
 801407e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014082:	459c      	cmp	ip, r3
 8014084:	fa22 f20e 	lsr.w	r2, r2, lr
 8014088:	d8f3      	bhi.n	8014072 <__lshift+0x6e>
 801408a:	ebac 0304 	sub.w	r3, ip, r4
 801408e:	3b15      	subs	r3, #21
 8014090:	f023 0303 	bic.w	r3, r3, #3
 8014094:	3304      	adds	r3, #4
 8014096:	f104 0015 	add.w	r0, r4, #21
 801409a:	4584      	cmp	ip, r0
 801409c:	bf38      	it	cc
 801409e:	2304      	movcc	r3, #4
 80140a0:	50ca      	str	r2, [r1, r3]
 80140a2:	b10a      	cbz	r2, 80140a8 <__lshift+0xa4>
 80140a4:	f108 0602 	add.w	r6, r8, #2
 80140a8:	3e01      	subs	r6, #1
 80140aa:	4638      	mov	r0, r7
 80140ac:	612e      	str	r6, [r5, #16]
 80140ae:	4621      	mov	r1, r4
 80140b0:	f7ff fdda 	bl	8013c68 <_Bfree>
 80140b4:	4628      	mov	r0, r5
 80140b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80140be:	3301      	adds	r3, #1
 80140c0:	e7c5      	b.n	801404e <__lshift+0x4a>
 80140c2:	3904      	subs	r1, #4
 80140c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80140c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80140cc:	459c      	cmp	ip, r3
 80140ce:	d8f9      	bhi.n	80140c4 <__lshift+0xc0>
 80140d0:	e7ea      	b.n	80140a8 <__lshift+0xa4>
 80140d2:	bf00      	nop
 80140d4:	08015a9d 	.word	0x08015a9d
 80140d8:	08015abf 	.word	0x08015abf

080140dc <__mcmp>:
 80140dc:	690a      	ldr	r2, [r1, #16]
 80140de:	4603      	mov	r3, r0
 80140e0:	6900      	ldr	r0, [r0, #16]
 80140e2:	1a80      	subs	r0, r0, r2
 80140e4:	b530      	push	{r4, r5, lr}
 80140e6:	d10e      	bne.n	8014106 <__mcmp+0x2a>
 80140e8:	3314      	adds	r3, #20
 80140ea:	3114      	adds	r1, #20
 80140ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80140f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80140f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80140f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80140fc:	4295      	cmp	r5, r2
 80140fe:	d003      	beq.n	8014108 <__mcmp+0x2c>
 8014100:	d205      	bcs.n	801410e <__mcmp+0x32>
 8014102:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014106:	bd30      	pop	{r4, r5, pc}
 8014108:	42a3      	cmp	r3, r4
 801410a:	d3f3      	bcc.n	80140f4 <__mcmp+0x18>
 801410c:	e7fb      	b.n	8014106 <__mcmp+0x2a>
 801410e:	2001      	movs	r0, #1
 8014110:	e7f9      	b.n	8014106 <__mcmp+0x2a>
	...

08014114 <__mdiff>:
 8014114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014118:	4689      	mov	r9, r1
 801411a:	4606      	mov	r6, r0
 801411c:	4611      	mov	r1, r2
 801411e:	4648      	mov	r0, r9
 8014120:	4614      	mov	r4, r2
 8014122:	f7ff ffdb 	bl	80140dc <__mcmp>
 8014126:	1e05      	subs	r5, r0, #0
 8014128:	d112      	bne.n	8014150 <__mdiff+0x3c>
 801412a:	4629      	mov	r1, r5
 801412c:	4630      	mov	r0, r6
 801412e:	f7ff fd5b 	bl	8013be8 <_Balloc>
 8014132:	4602      	mov	r2, r0
 8014134:	b928      	cbnz	r0, 8014142 <__mdiff+0x2e>
 8014136:	4b3f      	ldr	r3, [pc, #252]	@ (8014234 <__mdiff+0x120>)
 8014138:	f240 2137 	movw	r1, #567	@ 0x237
 801413c:	483e      	ldr	r0, [pc, #248]	@ (8014238 <__mdiff+0x124>)
 801413e:	f000 fabf 	bl	80146c0 <__assert_func>
 8014142:	2301      	movs	r3, #1
 8014144:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014148:	4610      	mov	r0, r2
 801414a:	b003      	add	sp, #12
 801414c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014150:	bfbc      	itt	lt
 8014152:	464b      	movlt	r3, r9
 8014154:	46a1      	movlt	r9, r4
 8014156:	4630      	mov	r0, r6
 8014158:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801415c:	bfba      	itte	lt
 801415e:	461c      	movlt	r4, r3
 8014160:	2501      	movlt	r5, #1
 8014162:	2500      	movge	r5, #0
 8014164:	f7ff fd40 	bl	8013be8 <_Balloc>
 8014168:	4602      	mov	r2, r0
 801416a:	b918      	cbnz	r0, 8014174 <__mdiff+0x60>
 801416c:	4b31      	ldr	r3, [pc, #196]	@ (8014234 <__mdiff+0x120>)
 801416e:	f240 2145 	movw	r1, #581	@ 0x245
 8014172:	e7e3      	b.n	801413c <__mdiff+0x28>
 8014174:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014178:	6926      	ldr	r6, [r4, #16]
 801417a:	60c5      	str	r5, [r0, #12]
 801417c:	f109 0310 	add.w	r3, r9, #16
 8014180:	f109 0514 	add.w	r5, r9, #20
 8014184:	f104 0e14 	add.w	lr, r4, #20
 8014188:	f100 0b14 	add.w	fp, r0, #20
 801418c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014190:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014194:	9301      	str	r3, [sp, #4]
 8014196:	46d9      	mov	r9, fp
 8014198:	f04f 0c00 	mov.w	ip, #0
 801419c:	9b01      	ldr	r3, [sp, #4]
 801419e:	f85e 0b04 	ldr.w	r0, [lr], #4
 80141a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80141a6:	9301      	str	r3, [sp, #4]
 80141a8:	fa1f f38a 	uxth.w	r3, sl
 80141ac:	4619      	mov	r1, r3
 80141ae:	b283      	uxth	r3, r0
 80141b0:	1acb      	subs	r3, r1, r3
 80141b2:	0c00      	lsrs	r0, r0, #16
 80141b4:	4463      	add	r3, ip
 80141b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80141ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80141be:	b29b      	uxth	r3, r3
 80141c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80141c4:	4576      	cmp	r6, lr
 80141c6:	f849 3b04 	str.w	r3, [r9], #4
 80141ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80141ce:	d8e5      	bhi.n	801419c <__mdiff+0x88>
 80141d0:	1b33      	subs	r3, r6, r4
 80141d2:	3b15      	subs	r3, #21
 80141d4:	f023 0303 	bic.w	r3, r3, #3
 80141d8:	3415      	adds	r4, #21
 80141da:	3304      	adds	r3, #4
 80141dc:	42a6      	cmp	r6, r4
 80141de:	bf38      	it	cc
 80141e0:	2304      	movcc	r3, #4
 80141e2:	441d      	add	r5, r3
 80141e4:	445b      	add	r3, fp
 80141e6:	461e      	mov	r6, r3
 80141e8:	462c      	mov	r4, r5
 80141ea:	4544      	cmp	r4, r8
 80141ec:	d30e      	bcc.n	801420c <__mdiff+0xf8>
 80141ee:	f108 0103 	add.w	r1, r8, #3
 80141f2:	1b49      	subs	r1, r1, r5
 80141f4:	f021 0103 	bic.w	r1, r1, #3
 80141f8:	3d03      	subs	r5, #3
 80141fa:	45a8      	cmp	r8, r5
 80141fc:	bf38      	it	cc
 80141fe:	2100      	movcc	r1, #0
 8014200:	440b      	add	r3, r1
 8014202:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014206:	b191      	cbz	r1, 801422e <__mdiff+0x11a>
 8014208:	6117      	str	r7, [r2, #16]
 801420a:	e79d      	b.n	8014148 <__mdiff+0x34>
 801420c:	f854 1b04 	ldr.w	r1, [r4], #4
 8014210:	46e6      	mov	lr, ip
 8014212:	0c08      	lsrs	r0, r1, #16
 8014214:	fa1c fc81 	uxtah	ip, ip, r1
 8014218:	4471      	add	r1, lr
 801421a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801421e:	b289      	uxth	r1, r1
 8014220:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014224:	f846 1b04 	str.w	r1, [r6], #4
 8014228:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801422c:	e7dd      	b.n	80141ea <__mdiff+0xd6>
 801422e:	3f01      	subs	r7, #1
 8014230:	e7e7      	b.n	8014202 <__mdiff+0xee>
 8014232:	bf00      	nop
 8014234:	08015a9d 	.word	0x08015a9d
 8014238:	08015abf 	.word	0x08015abf

0801423c <__d2b>:
 801423c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014240:	460f      	mov	r7, r1
 8014242:	2101      	movs	r1, #1
 8014244:	ec59 8b10 	vmov	r8, r9, d0
 8014248:	4616      	mov	r6, r2
 801424a:	f7ff fccd 	bl	8013be8 <_Balloc>
 801424e:	4604      	mov	r4, r0
 8014250:	b930      	cbnz	r0, 8014260 <__d2b+0x24>
 8014252:	4602      	mov	r2, r0
 8014254:	4b23      	ldr	r3, [pc, #140]	@ (80142e4 <__d2b+0xa8>)
 8014256:	4824      	ldr	r0, [pc, #144]	@ (80142e8 <__d2b+0xac>)
 8014258:	f240 310f 	movw	r1, #783	@ 0x30f
 801425c:	f000 fa30 	bl	80146c0 <__assert_func>
 8014260:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014264:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014268:	b10d      	cbz	r5, 801426e <__d2b+0x32>
 801426a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801426e:	9301      	str	r3, [sp, #4]
 8014270:	f1b8 0300 	subs.w	r3, r8, #0
 8014274:	d023      	beq.n	80142be <__d2b+0x82>
 8014276:	4668      	mov	r0, sp
 8014278:	9300      	str	r3, [sp, #0]
 801427a:	f7ff fd7c 	bl	8013d76 <__lo0bits>
 801427e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014282:	b1d0      	cbz	r0, 80142ba <__d2b+0x7e>
 8014284:	f1c0 0320 	rsb	r3, r0, #32
 8014288:	fa02 f303 	lsl.w	r3, r2, r3
 801428c:	430b      	orrs	r3, r1
 801428e:	40c2      	lsrs	r2, r0
 8014290:	6163      	str	r3, [r4, #20]
 8014292:	9201      	str	r2, [sp, #4]
 8014294:	9b01      	ldr	r3, [sp, #4]
 8014296:	61a3      	str	r3, [r4, #24]
 8014298:	2b00      	cmp	r3, #0
 801429a:	bf0c      	ite	eq
 801429c:	2201      	moveq	r2, #1
 801429e:	2202      	movne	r2, #2
 80142a0:	6122      	str	r2, [r4, #16]
 80142a2:	b1a5      	cbz	r5, 80142ce <__d2b+0x92>
 80142a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80142a8:	4405      	add	r5, r0
 80142aa:	603d      	str	r5, [r7, #0]
 80142ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80142b0:	6030      	str	r0, [r6, #0]
 80142b2:	4620      	mov	r0, r4
 80142b4:	b003      	add	sp, #12
 80142b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142ba:	6161      	str	r1, [r4, #20]
 80142bc:	e7ea      	b.n	8014294 <__d2b+0x58>
 80142be:	a801      	add	r0, sp, #4
 80142c0:	f7ff fd59 	bl	8013d76 <__lo0bits>
 80142c4:	9b01      	ldr	r3, [sp, #4]
 80142c6:	6163      	str	r3, [r4, #20]
 80142c8:	3020      	adds	r0, #32
 80142ca:	2201      	movs	r2, #1
 80142cc:	e7e8      	b.n	80142a0 <__d2b+0x64>
 80142ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80142d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80142d6:	6038      	str	r0, [r7, #0]
 80142d8:	6918      	ldr	r0, [r3, #16]
 80142da:	f7ff fd2d 	bl	8013d38 <__hi0bits>
 80142de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80142e2:	e7e5      	b.n	80142b0 <__d2b+0x74>
 80142e4:	08015a9d 	.word	0x08015a9d
 80142e8:	08015abf 	.word	0x08015abf

080142ec <__sread>:
 80142ec:	b510      	push	{r4, lr}
 80142ee:	460c      	mov	r4, r1
 80142f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142f4:	f000 f9c0 	bl	8014678 <_read_r>
 80142f8:	2800      	cmp	r0, #0
 80142fa:	bfab      	itete	ge
 80142fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80142fe:	89a3      	ldrhlt	r3, [r4, #12]
 8014300:	181b      	addge	r3, r3, r0
 8014302:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014306:	bfac      	ite	ge
 8014308:	6563      	strge	r3, [r4, #84]	@ 0x54
 801430a:	81a3      	strhlt	r3, [r4, #12]
 801430c:	bd10      	pop	{r4, pc}

0801430e <__swrite>:
 801430e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014312:	461f      	mov	r7, r3
 8014314:	898b      	ldrh	r3, [r1, #12]
 8014316:	05db      	lsls	r3, r3, #23
 8014318:	4605      	mov	r5, r0
 801431a:	460c      	mov	r4, r1
 801431c:	4616      	mov	r6, r2
 801431e:	d505      	bpl.n	801432c <__swrite+0x1e>
 8014320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014324:	2302      	movs	r3, #2
 8014326:	2200      	movs	r2, #0
 8014328:	f000 f994 	bl	8014654 <_lseek_r>
 801432c:	89a3      	ldrh	r3, [r4, #12]
 801432e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014332:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014336:	81a3      	strh	r3, [r4, #12]
 8014338:	4632      	mov	r2, r6
 801433a:	463b      	mov	r3, r7
 801433c:	4628      	mov	r0, r5
 801433e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014342:	f000 b9ab 	b.w	801469c <_write_r>

08014346 <__sseek>:
 8014346:	b510      	push	{r4, lr}
 8014348:	460c      	mov	r4, r1
 801434a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801434e:	f000 f981 	bl	8014654 <_lseek_r>
 8014352:	1c43      	adds	r3, r0, #1
 8014354:	89a3      	ldrh	r3, [r4, #12]
 8014356:	bf15      	itete	ne
 8014358:	6560      	strne	r0, [r4, #84]	@ 0x54
 801435a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801435e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014362:	81a3      	strheq	r3, [r4, #12]
 8014364:	bf18      	it	ne
 8014366:	81a3      	strhne	r3, [r4, #12]
 8014368:	bd10      	pop	{r4, pc}

0801436a <__sclose>:
 801436a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801436e:	f000 b93f 	b.w	80145f0 <_close_r>

08014372 <_realloc_r>:
 8014372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014376:	4680      	mov	r8, r0
 8014378:	4615      	mov	r5, r2
 801437a:	460c      	mov	r4, r1
 801437c:	b921      	cbnz	r1, 8014388 <_realloc_r+0x16>
 801437e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014382:	4611      	mov	r1, r2
 8014384:	f7fd bef2 	b.w	801216c <_malloc_r>
 8014388:	b92a      	cbnz	r2, 8014396 <_realloc_r+0x24>
 801438a:	f7ff f89d 	bl	80134c8 <_free_r>
 801438e:	2400      	movs	r4, #0
 8014390:	4620      	mov	r0, r4
 8014392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014396:	f000 f9d7 	bl	8014748 <_malloc_usable_size_r>
 801439a:	4285      	cmp	r5, r0
 801439c:	4606      	mov	r6, r0
 801439e:	d802      	bhi.n	80143a6 <_realloc_r+0x34>
 80143a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80143a4:	d8f4      	bhi.n	8014390 <_realloc_r+0x1e>
 80143a6:	4629      	mov	r1, r5
 80143a8:	4640      	mov	r0, r8
 80143aa:	f7fd fedf 	bl	801216c <_malloc_r>
 80143ae:	4607      	mov	r7, r0
 80143b0:	2800      	cmp	r0, #0
 80143b2:	d0ec      	beq.n	801438e <_realloc_r+0x1c>
 80143b4:	42b5      	cmp	r5, r6
 80143b6:	462a      	mov	r2, r5
 80143b8:	4621      	mov	r1, r4
 80143ba:	bf28      	it	cs
 80143bc:	4632      	movcs	r2, r6
 80143be:	f7fe fa29 	bl	8012814 <memcpy>
 80143c2:	4621      	mov	r1, r4
 80143c4:	4640      	mov	r0, r8
 80143c6:	f7ff f87f 	bl	80134c8 <_free_r>
 80143ca:	463c      	mov	r4, r7
 80143cc:	e7e0      	b.n	8014390 <_realloc_r+0x1e>

080143ce <__swbuf_r>:
 80143ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143d0:	460e      	mov	r6, r1
 80143d2:	4614      	mov	r4, r2
 80143d4:	4605      	mov	r5, r0
 80143d6:	b118      	cbz	r0, 80143e0 <__swbuf_r+0x12>
 80143d8:	6a03      	ldr	r3, [r0, #32]
 80143da:	b90b      	cbnz	r3, 80143e0 <__swbuf_r+0x12>
 80143dc:	f7fe f98c 	bl	80126f8 <__sinit>
 80143e0:	69a3      	ldr	r3, [r4, #24]
 80143e2:	60a3      	str	r3, [r4, #8]
 80143e4:	89a3      	ldrh	r3, [r4, #12]
 80143e6:	071a      	lsls	r2, r3, #28
 80143e8:	d501      	bpl.n	80143ee <__swbuf_r+0x20>
 80143ea:	6923      	ldr	r3, [r4, #16]
 80143ec:	b943      	cbnz	r3, 8014400 <__swbuf_r+0x32>
 80143ee:	4621      	mov	r1, r4
 80143f0:	4628      	mov	r0, r5
 80143f2:	f000 f82b 	bl	801444c <__swsetup_r>
 80143f6:	b118      	cbz	r0, 8014400 <__swbuf_r+0x32>
 80143f8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80143fc:	4638      	mov	r0, r7
 80143fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014400:	6823      	ldr	r3, [r4, #0]
 8014402:	6922      	ldr	r2, [r4, #16]
 8014404:	1a98      	subs	r0, r3, r2
 8014406:	6963      	ldr	r3, [r4, #20]
 8014408:	b2f6      	uxtb	r6, r6
 801440a:	4283      	cmp	r3, r0
 801440c:	4637      	mov	r7, r6
 801440e:	dc05      	bgt.n	801441c <__swbuf_r+0x4e>
 8014410:	4621      	mov	r1, r4
 8014412:	4628      	mov	r0, r5
 8014414:	f7ff fbc0 	bl	8013b98 <_fflush_r>
 8014418:	2800      	cmp	r0, #0
 801441a:	d1ed      	bne.n	80143f8 <__swbuf_r+0x2a>
 801441c:	68a3      	ldr	r3, [r4, #8]
 801441e:	3b01      	subs	r3, #1
 8014420:	60a3      	str	r3, [r4, #8]
 8014422:	6823      	ldr	r3, [r4, #0]
 8014424:	1c5a      	adds	r2, r3, #1
 8014426:	6022      	str	r2, [r4, #0]
 8014428:	701e      	strb	r6, [r3, #0]
 801442a:	6962      	ldr	r2, [r4, #20]
 801442c:	1c43      	adds	r3, r0, #1
 801442e:	429a      	cmp	r2, r3
 8014430:	d004      	beq.n	801443c <__swbuf_r+0x6e>
 8014432:	89a3      	ldrh	r3, [r4, #12]
 8014434:	07db      	lsls	r3, r3, #31
 8014436:	d5e1      	bpl.n	80143fc <__swbuf_r+0x2e>
 8014438:	2e0a      	cmp	r6, #10
 801443a:	d1df      	bne.n	80143fc <__swbuf_r+0x2e>
 801443c:	4621      	mov	r1, r4
 801443e:	4628      	mov	r0, r5
 8014440:	f7ff fbaa 	bl	8013b98 <_fflush_r>
 8014444:	2800      	cmp	r0, #0
 8014446:	d0d9      	beq.n	80143fc <__swbuf_r+0x2e>
 8014448:	e7d6      	b.n	80143f8 <__swbuf_r+0x2a>
	...

0801444c <__swsetup_r>:
 801444c:	b538      	push	{r3, r4, r5, lr}
 801444e:	4b29      	ldr	r3, [pc, #164]	@ (80144f4 <__swsetup_r+0xa8>)
 8014450:	4605      	mov	r5, r0
 8014452:	6818      	ldr	r0, [r3, #0]
 8014454:	460c      	mov	r4, r1
 8014456:	b118      	cbz	r0, 8014460 <__swsetup_r+0x14>
 8014458:	6a03      	ldr	r3, [r0, #32]
 801445a:	b90b      	cbnz	r3, 8014460 <__swsetup_r+0x14>
 801445c:	f7fe f94c 	bl	80126f8 <__sinit>
 8014460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014464:	0719      	lsls	r1, r3, #28
 8014466:	d422      	bmi.n	80144ae <__swsetup_r+0x62>
 8014468:	06da      	lsls	r2, r3, #27
 801446a:	d407      	bmi.n	801447c <__swsetup_r+0x30>
 801446c:	2209      	movs	r2, #9
 801446e:	602a      	str	r2, [r5, #0]
 8014470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014474:	81a3      	strh	r3, [r4, #12]
 8014476:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801447a:	e033      	b.n	80144e4 <__swsetup_r+0x98>
 801447c:	0758      	lsls	r0, r3, #29
 801447e:	d512      	bpl.n	80144a6 <__swsetup_r+0x5a>
 8014480:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014482:	b141      	cbz	r1, 8014496 <__swsetup_r+0x4a>
 8014484:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014488:	4299      	cmp	r1, r3
 801448a:	d002      	beq.n	8014492 <__swsetup_r+0x46>
 801448c:	4628      	mov	r0, r5
 801448e:	f7ff f81b 	bl	80134c8 <_free_r>
 8014492:	2300      	movs	r3, #0
 8014494:	6363      	str	r3, [r4, #52]	@ 0x34
 8014496:	89a3      	ldrh	r3, [r4, #12]
 8014498:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801449c:	81a3      	strh	r3, [r4, #12]
 801449e:	2300      	movs	r3, #0
 80144a0:	6063      	str	r3, [r4, #4]
 80144a2:	6923      	ldr	r3, [r4, #16]
 80144a4:	6023      	str	r3, [r4, #0]
 80144a6:	89a3      	ldrh	r3, [r4, #12]
 80144a8:	f043 0308 	orr.w	r3, r3, #8
 80144ac:	81a3      	strh	r3, [r4, #12]
 80144ae:	6923      	ldr	r3, [r4, #16]
 80144b0:	b94b      	cbnz	r3, 80144c6 <__swsetup_r+0x7a>
 80144b2:	89a3      	ldrh	r3, [r4, #12]
 80144b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80144b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80144bc:	d003      	beq.n	80144c6 <__swsetup_r+0x7a>
 80144be:	4621      	mov	r1, r4
 80144c0:	4628      	mov	r0, r5
 80144c2:	f000 f83f 	bl	8014544 <__smakebuf_r>
 80144c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144ca:	f013 0201 	ands.w	r2, r3, #1
 80144ce:	d00a      	beq.n	80144e6 <__swsetup_r+0x9a>
 80144d0:	2200      	movs	r2, #0
 80144d2:	60a2      	str	r2, [r4, #8]
 80144d4:	6962      	ldr	r2, [r4, #20]
 80144d6:	4252      	negs	r2, r2
 80144d8:	61a2      	str	r2, [r4, #24]
 80144da:	6922      	ldr	r2, [r4, #16]
 80144dc:	b942      	cbnz	r2, 80144f0 <__swsetup_r+0xa4>
 80144de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80144e2:	d1c5      	bne.n	8014470 <__swsetup_r+0x24>
 80144e4:	bd38      	pop	{r3, r4, r5, pc}
 80144e6:	0799      	lsls	r1, r3, #30
 80144e8:	bf58      	it	pl
 80144ea:	6962      	ldrpl	r2, [r4, #20]
 80144ec:	60a2      	str	r2, [r4, #8]
 80144ee:	e7f4      	b.n	80144da <__swsetup_r+0x8e>
 80144f0:	2000      	movs	r0, #0
 80144f2:	e7f7      	b.n	80144e4 <__swsetup_r+0x98>
 80144f4:	200000ec 	.word	0x200000ec

080144f8 <__swhatbuf_r>:
 80144f8:	b570      	push	{r4, r5, r6, lr}
 80144fa:	460c      	mov	r4, r1
 80144fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014500:	2900      	cmp	r1, #0
 8014502:	b096      	sub	sp, #88	@ 0x58
 8014504:	4615      	mov	r5, r2
 8014506:	461e      	mov	r6, r3
 8014508:	da0d      	bge.n	8014526 <__swhatbuf_r+0x2e>
 801450a:	89a3      	ldrh	r3, [r4, #12]
 801450c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014510:	f04f 0100 	mov.w	r1, #0
 8014514:	bf14      	ite	ne
 8014516:	2340      	movne	r3, #64	@ 0x40
 8014518:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801451c:	2000      	movs	r0, #0
 801451e:	6031      	str	r1, [r6, #0]
 8014520:	602b      	str	r3, [r5, #0]
 8014522:	b016      	add	sp, #88	@ 0x58
 8014524:	bd70      	pop	{r4, r5, r6, pc}
 8014526:	466a      	mov	r2, sp
 8014528:	f000 f872 	bl	8014610 <_fstat_r>
 801452c:	2800      	cmp	r0, #0
 801452e:	dbec      	blt.n	801450a <__swhatbuf_r+0x12>
 8014530:	9901      	ldr	r1, [sp, #4]
 8014532:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014536:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801453a:	4259      	negs	r1, r3
 801453c:	4159      	adcs	r1, r3
 801453e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014542:	e7eb      	b.n	801451c <__swhatbuf_r+0x24>

08014544 <__smakebuf_r>:
 8014544:	898b      	ldrh	r3, [r1, #12]
 8014546:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014548:	079d      	lsls	r5, r3, #30
 801454a:	4606      	mov	r6, r0
 801454c:	460c      	mov	r4, r1
 801454e:	d507      	bpl.n	8014560 <__smakebuf_r+0x1c>
 8014550:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014554:	6023      	str	r3, [r4, #0]
 8014556:	6123      	str	r3, [r4, #16]
 8014558:	2301      	movs	r3, #1
 801455a:	6163      	str	r3, [r4, #20]
 801455c:	b003      	add	sp, #12
 801455e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014560:	ab01      	add	r3, sp, #4
 8014562:	466a      	mov	r2, sp
 8014564:	f7ff ffc8 	bl	80144f8 <__swhatbuf_r>
 8014568:	9f00      	ldr	r7, [sp, #0]
 801456a:	4605      	mov	r5, r0
 801456c:	4639      	mov	r1, r7
 801456e:	4630      	mov	r0, r6
 8014570:	f7fd fdfc 	bl	801216c <_malloc_r>
 8014574:	b948      	cbnz	r0, 801458a <__smakebuf_r+0x46>
 8014576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801457a:	059a      	lsls	r2, r3, #22
 801457c:	d4ee      	bmi.n	801455c <__smakebuf_r+0x18>
 801457e:	f023 0303 	bic.w	r3, r3, #3
 8014582:	f043 0302 	orr.w	r3, r3, #2
 8014586:	81a3      	strh	r3, [r4, #12]
 8014588:	e7e2      	b.n	8014550 <__smakebuf_r+0xc>
 801458a:	89a3      	ldrh	r3, [r4, #12]
 801458c:	6020      	str	r0, [r4, #0]
 801458e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014592:	81a3      	strh	r3, [r4, #12]
 8014594:	9b01      	ldr	r3, [sp, #4]
 8014596:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801459a:	b15b      	cbz	r3, 80145b4 <__smakebuf_r+0x70>
 801459c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80145a0:	4630      	mov	r0, r6
 80145a2:	f000 f847 	bl	8014634 <_isatty_r>
 80145a6:	b128      	cbz	r0, 80145b4 <__smakebuf_r+0x70>
 80145a8:	89a3      	ldrh	r3, [r4, #12]
 80145aa:	f023 0303 	bic.w	r3, r3, #3
 80145ae:	f043 0301 	orr.w	r3, r3, #1
 80145b2:	81a3      	strh	r3, [r4, #12]
 80145b4:	89a3      	ldrh	r3, [r4, #12]
 80145b6:	431d      	orrs	r5, r3
 80145b8:	81a5      	strh	r5, [r4, #12]
 80145ba:	e7cf      	b.n	801455c <__smakebuf_r+0x18>

080145bc <memmove>:
 80145bc:	4288      	cmp	r0, r1
 80145be:	b510      	push	{r4, lr}
 80145c0:	eb01 0402 	add.w	r4, r1, r2
 80145c4:	d902      	bls.n	80145cc <memmove+0x10>
 80145c6:	4284      	cmp	r4, r0
 80145c8:	4623      	mov	r3, r4
 80145ca:	d807      	bhi.n	80145dc <memmove+0x20>
 80145cc:	1e43      	subs	r3, r0, #1
 80145ce:	42a1      	cmp	r1, r4
 80145d0:	d008      	beq.n	80145e4 <memmove+0x28>
 80145d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80145d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80145da:	e7f8      	b.n	80145ce <memmove+0x12>
 80145dc:	4402      	add	r2, r0
 80145de:	4601      	mov	r1, r0
 80145e0:	428a      	cmp	r2, r1
 80145e2:	d100      	bne.n	80145e6 <memmove+0x2a>
 80145e4:	bd10      	pop	{r4, pc}
 80145e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80145ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80145ee:	e7f7      	b.n	80145e0 <memmove+0x24>

080145f0 <_close_r>:
 80145f0:	b538      	push	{r3, r4, r5, lr}
 80145f2:	4d06      	ldr	r5, [pc, #24]	@ (801460c <_close_r+0x1c>)
 80145f4:	2300      	movs	r3, #0
 80145f6:	4604      	mov	r4, r0
 80145f8:	4608      	mov	r0, r1
 80145fa:	602b      	str	r3, [r5, #0]
 80145fc:	f7ee fba2 	bl	8002d44 <_close>
 8014600:	1c43      	adds	r3, r0, #1
 8014602:	d102      	bne.n	801460a <_close_r+0x1a>
 8014604:	682b      	ldr	r3, [r5, #0]
 8014606:	b103      	cbz	r3, 801460a <_close_r+0x1a>
 8014608:	6023      	str	r3, [r4, #0]
 801460a:	bd38      	pop	{r3, r4, r5, pc}
 801460c:	20001708 	.word	0x20001708

08014610 <_fstat_r>:
 8014610:	b538      	push	{r3, r4, r5, lr}
 8014612:	4d07      	ldr	r5, [pc, #28]	@ (8014630 <_fstat_r+0x20>)
 8014614:	2300      	movs	r3, #0
 8014616:	4604      	mov	r4, r0
 8014618:	4608      	mov	r0, r1
 801461a:	4611      	mov	r1, r2
 801461c:	602b      	str	r3, [r5, #0]
 801461e:	f7ee fb9d 	bl	8002d5c <_fstat>
 8014622:	1c43      	adds	r3, r0, #1
 8014624:	d102      	bne.n	801462c <_fstat_r+0x1c>
 8014626:	682b      	ldr	r3, [r5, #0]
 8014628:	b103      	cbz	r3, 801462c <_fstat_r+0x1c>
 801462a:	6023      	str	r3, [r4, #0]
 801462c:	bd38      	pop	{r3, r4, r5, pc}
 801462e:	bf00      	nop
 8014630:	20001708 	.word	0x20001708

08014634 <_isatty_r>:
 8014634:	b538      	push	{r3, r4, r5, lr}
 8014636:	4d06      	ldr	r5, [pc, #24]	@ (8014650 <_isatty_r+0x1c>)
 8014638:	2300      	movs	r3, #0
 801463a:	4604      	mov	r4, r0
 801463c:	4608      	mov	r0, r1
 801463e:	602b      	str	r3, [r5, #0]
 8014640:	f7ee fb9c 	bl	8002d7c <_isatty>
 8014644:	1c43      	adds	r3, r0, #1
 8014646:	d102      	bne.n	801464e <_isatty_r+0x1a>
 8014648:	682b      	ldr	r3, [r5, #0]
 801464a:	b103      	cbz	r3, 801464e <_isatty_r+0x1a>
 801464c:	6023      	str	r3, [r4, #0]
 801464e:	bd38      	pop	{r3, r4, r5, pc}
 8014650:	20001708 	.word	0x20001708

08014654 <_lseek_r>:
 8014654:	b538      	push	{r3, r4, r5, lr}
 8014656:	4d07      	ldr	r5, [pc, #28]	@ (8014674 <_lseek_r+0x20>)
 8014658:	4604      	mov	r4, r0
 801465a:	4608      	mov	r0, r1
 801465c:	4611      	mov	r1, r2
 801465e:	2200      	movs	r2, #0
 8014660:	602a      	str	r2, [r5, #0]
 8014662:	461a      	mov	r2, r3
 8014664:	f7ee fb95 	bl	8002d92 <_lseek>
 8014668:	1c43      	adds	r3, r0, #1
 801466a:	d102      	bne.n	8014672 <_lseek_r+0x1e>
 801466c:	682b      	ldr	r3, [r5, #0]
 801466e:	b103      	cbz	r3, 8014672 <_lseek_r+0x1e>
 8014670:	6023      	str	r3, [r4, #0]
 8014672:	bd38      	pop	{r3, r4, r5, pc}
 8014674:	20001708 	.word	0x20001708

08014678 <_read_r>:
 8014678:	b538      	push	{r3, r4, r5, lr}
 801467a:	4d07      	ldr	r5, [pc, #28]	@ (8014698 <_read_r+0x20>)
 801467c:	4604      	mov	r4, r0
 801467e:	4608      	mov	r0, r1
 8014680:	4611      	mov	r1, r2
 8014682:	2200      	movs	r2, #0
 8014684:	602a      	str	r2, [r5, #0]
 8014686:	461a      	mov	r2, r3
 8014688:	f7ee fb3f 	bl	8002d0a <_read>
 801468c:	1c43      	adds	r3, r0, #1
 801468e:	d102      	bne.n	8014696 <_read_r+0x1e>
 8014690:	682b      	ldr	r3, [r5, #0]
 8014692:	b103      	cbz	r3, 8014696 <_read_r+0x1e>
 8014694:	6023      	str	r3, [r4, #0]
 8014696:	bd38      	pop	{r3, r4, r5, pc}
 8014698:	20001708 	.word	0x20001708

0801469c <_write_r>:
 801469c:	b538      	push	{r3, r4, r5, lr}
 801469e:	4d07      	ldr	r5, [pc, #28]	@ (80146bc <_write_r+0x20>)
 80146a0:	4604      	mov	r4, r0
 80146a2:	4608      	mov	r0, r1
 80146a4:	4611      	mov	r1, r2
 80146a6:	2200      	movs	r2, #0
 80146a8:	602a      	str	r2, [r5, #0]
 80146aa:	461a      	mov	r2, r3
 80146ac:	f7ec fcd0 	bl	8001050 <_write>
 80146b0:	1c43      	adds	r3, r0, #1
 80146b2:	d102      	bne.n	80146ba <_write_r+0x1e>
 80146b4:	682b      	ldr	r3, [r5, #0]
 80146b6:	b103      	cbz	r3, 80146ba <_write_r+0x1e>
 80146b8:	6023      	str	r3, [r4, #0]
 80146ba:	bd38      	pop	{r3, r4, r5, pc}
 80146bc:	20001708 	.word	0x20001708

080146c0 <__assert_func>:
 80146c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80146c2:	4614      	mov	r4, r2
 80146c4:	461a      	mov	r2, r3
 80146c6:	4b09      	ldr	r3, [pc, #36]	@ (80146ec <__assert_func+0x2c>)
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	4605      	mov	r5, r0
 80146cc:	68d8      	ldr	r0, [r3, #12]
 80146ce:	b954      	cbnz	r4, 80146e6 <__assert_func+0x26>
 80146d0:	4b07      	ldr	r3, [pc, #28]	@ (80146f0 <__assert_func+0x30>)
 80146d2:	461c      	mov	r4, r3
 80146d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80146d8:	9100      	str	r1, [sp, #0]
 80146da:	462b      	mov	r3, r5
 80146dc:	4905      	ldr	r1, [pc, #20]	@ (80146f4 <__assert_func+0x34>)
 80146de:	f000 f83b 	bl	8014758 <fiprintf>
 80146e2:	f000 f858 	bl	8014796 <abort>
 80146e6:	4b04      	ldr	r3, [pc, #16]	@ (80146f8 <__assert_func+0x38>)
 80146e8:	e7f4      	b.n	80146d4 <__assert_func+0x14>
 80146ea:	bf00      	nop
 80146ec:	200000ec 	.word	0x200000ec
 80146f0:	08015c5d 	.word	0x08015c5d
 80146f4:	08015c2f 	.word	0x08015c2f
 80146f8:	08015c22 	.word	0x08015c22

080146fc <_calloc_r>:
 80146fc:	b570      	push	{r4, r5, r6, lr}
 80146fe:	fba1 5402 	umull	r5, r4, r1, r2
 8014702:	b93c      	cbnz	r4, 8014714 <_calloc_r+0x18>
 8014704:	4629      	mov	r1, r5
 8014706:	f7fd fd31 	bl	801216c <_malloc_r>
 801470a:	4606      	mov	r6, r0
 801470c:	b928      	cbnz	r0, 801471a <_calloc_r+0x1e>
 801470e:	2600      	movs	r6, #0
 8014710:	4630      	mov	r0, r6
 8014712:	bd70      	pop	{r4, r5, r6, pc}
 8014714:	220c      	movs	r2, #12
 8014716:	6002      	str	r2, [r0, #0]
 8014718:	e7f9      	b.n	801470e <_calloc_r+0x12>
 801471a:	462a      	mov	r2, r5
 801471c:	4621      	mov	r1, r4
 801471e:	f7fe f833 	bl	8012788 <memset>
 8014722:	e7f5      	b.n	8014710 <_calloc_r+0x14>

08014724 <__ascii_mbtowc>:
 8014724:	b082      	sub	sp, #8
 8014726:	b901      	cbnz	r1, 801472a <__ascii_mbtowc+0x6>
 8014728:	a901      	add	r1, sp, #4
 801472a:	b142      	cbz	r2, 801473e <__ascii_mbtowc+0x1a>
 801472c:	b14b      	cbz	r3, 8014742 <__ascii_mbtowc+0x1e>
 801472e:	7813      	ldrb	r3, [r2, #0]
 8014730:	600b      	str	r3, [r1, #0]
 8014732:	7812      	ldrb	r2, [r2, #0]
 8014734:	1e10      	subs	r0, r2, #0
 8014736:	bf18      	it	ne
 8014738:	2001      	movne	r0, #1
 801473a:	b002      	add	sp, #8
 801473c:	4770      	bx	lr
 801473e:	4610      	mov	r0, r2
 8014740:	e7fb      	b.n	801473a <__ascii_mbtowc+0x16>
 8014742:	f06f 0001 	mvn.w	r0, #1
 8014746:	e7f8      	b.n	801473a <__ascii_mbtowc+0x16>

08014748 <_malloc_usable_size_r>:
 8014748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801474c:	1f18      	subs	r0, r3, #4
 801474e:	2b00      	cmp	r3, #0
 8014750:	bfbc      	itt	lt
 8014752:	580b      	ldrlt	r3, [r1, r0]
 8014754:	18c0      	addlt	r0, r0, r3
 8014756:	4770      	bx	lr

08014758 <fiprintf>:
 8014758:	b40e      	push	{r1, r2, r3}
 801475a:	b503      	push	{r0, r1, lr}
 801475c:	4601      	mov	r1, r0
 801475e:	ab03      	add	r3, sp, #12
 8014760:	4805      	ldr	r0, [pc, #20]	@ (8014778 <fiprintf+0x20>)
 8014762:	f853 2b04 	ldr.w	r2, [r3], #4
 8014766:	6800      	ldr	r0, [r0, #0]
 8014768:	9301      	str	r3, [sp, #4]
 801476a:	f7ff f879 	bl	8013860 <_vfiprintf_r>
 801476e:	b002      	add	sp, #8
 8014770:	f85d eb04 	ldr.w	lr, [sp], #4
 8014774:	b003      	add	sp, #12
 8014776:	4770      	bx	lr
 8014778:	200000ec 	.word	0x200000ec

0801477c <__ascii_wctomb>:
 801477c:	4603      	mov	r3, r0
 801477e:	4608      	mov	r0, r1
 8014780:	b141      	cbz	r1, 8014794 <__ascii_wctomb+0x18>
 8014782:	2aff      	cmp	r2, #255	@ 0xff
 8014784:	d904      	bls.n	8014790 <__ascii_wctomb+0x14>
 8014786:	228a      	movs	r2, #138	@ 0x8a
 8014788:	601a      	str	r2, [r3, #0]
 801478a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801478e:	4770      	bx	lr
 8014790:	700a      	strb	r2, [r1, #0]
 8014792:	2001      	movs	r0, #1
 8014794:	4770      	bx	lr

08014796 <abort>:
 8014796:	b508      	push	{r3, lr}
 8014798:	2006      	movs	r0, #6
 801479a:	f000 f82b 	bl	80147f4 <raise>
 801479e:	2001      	movs	r0, #1
 80147a0:	f7ee faa8 	bl	8002cf4 <_exit>

080147a4 <_raise_r>:
 80147a4:	291f      	cmp	r1, #31
 80147a6:	b538      	push	{r3, r4, r5, lr}
 80147a8:	4605      	mov	r5, r0
 80147aa:	460c      	mov	r4, r1
 80147ac:	d904      	bls.n	80147b8 <_raise_r+0x14>
 80147ae:	2316      	movs	r3, #22
 80147b0:	6003      	str	r3, [r0, #0]
 80147b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80147b6:	bd38      	pop	{r3, r4, r5, pc}
 80147b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80147ba:	b112      	cbz	r2, 80147c2 <_raise_r+0x1e>
 80147bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80147c0:	b94b      	cbnz	r3, 80147d6 <_raise_r+0x32>
 80147c2:	4628      	mov	r0, r5
 80147c4:	f000 f830 	bl	8014828 <_getpid_r>
 80147c8:	4622      	mov	r2, r4
 80147ca:	4601      	mov	r1, r0
 80147cc:	4628      	mov	r0, r5
 80147ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80147d2:	f000 b817 	b.w	8014804 <_kill_r>
 80147d6:	2b01      	cmp	r3, #1
 80147d8:	d00a      	beq.n	80147f0 <_raise_r+0x4c>
 80147da:	1c59      	adds	r1, r3, #1
 80147dc:	d103      	bne.n	80147e6 <_raise_r+0x42>
 80147de:	2316      	movs	r3, #22
 80147e0:	6003      	str	r3, [r0, #0]
 80147e2:	2001      	movs	r0, #1
 80147e4:	e7e7      	b.n	80147b6 <_raise_r+0x12>
 80147e6:	2100      	movs	r1, #0
 80147e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80147ec:	4620      	mov	r0, r4
 80147ee:	4798      	blx	r3
 80147f0:	2000      	movs	r0, #0
 80147f2:	e7e0      	b.n	80147b6 <_raise_r+0x12>

080147f4 <raise>:
 80147f4:	4b02      	ldr	r3, [pc, #8]	@ (8014800 <raise+0xc>)
 80147f6:	4601      	mov	r1, r0
 80147f8:	6818      	ldr	r0, [r3, #0]
 80147fa:	f7ff bfd3 	b.w	80147a4 <_raise_r>
 80147fe:	bf00      	nop
 8014800:	200000ec 	.word	0x200000ec

08014804 <_kill_r>:
 8014804:	b538      	push	{r3, r4, r5, lr}
 8014806:	4d07      	ldr	r5, [pc, #28]	@ (8014824 <_kill_r+0x20>)
 8014808:	2300      	movs	r3, #0
 801480a:	4604      	mov	r4, r0
 801480c:	4608      	mov	r0, r1
 801480e:	4611      	mov	r1, r2
 8014810:	602b      	str	r3, [r5, #0]
 8014812:	f7ee fa5f 	bl	8002cd4 <_kill>
 8014816:	1c43      	adds	r3, r0, #1
 8014818:	d102      	bne.n	8014820 <_kill_r+0x1c>
 801481a:	682b      	ldr	r3, [r5, #0]
 801481c:	b103      	cbz	r3, 8014820 <_kill_r+0x1c>
 801481e:	6023      	str	r3, [r4, #0]
 8014820:	bd38      	pop	{r3, r4, r5, pc}
 8014822:	bf00      	nop
 8014824:	20001708 	.word	0x20001708

08014828 <_getpid_r>:
 8014828:	f7ee ba4c 	b.w	8002cc4 <_getpid>

0801482c <pow>:
 801482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801482e:	ed2d 8b02 	vpush	{d8}
 8014832:	eeb0 8a40 	vmov.f32	s16, s0
 8014836:	eef0 8a60 	vmov.f32	s17, s1
 801483a:	ec55 4b11 	vmov	r4, r5, d1
 801483e:	f000 f873 	bl	8014928 <__ieee754_pow>
 8014842:	4622      	mov	r2, r4
 8014844:	462b      	mov	r3, r5
 8014846:	4620      	mov	r0, r4
 8014848:	4629      	mov	r1, r5
 801484a:	ec57 6b10 	vmov	r6, r7, d0
 801484e:	f7ec f995 	bl	8000b7c <__aeabi_dcmpun>
 8014852:	2800      	cmp	r0, #0
 8014854:	d13b      	bne.n	80148ce <pow+0xa2>
 8014856:	ec51 0b18 	vmov	r0, r1, d8
 801485a:	2200      	movs	r2, #0
 801485c:	2300      	movs	r3, #0
 801485e:	f7ec f95b 	bl	8000b18 <__aeabi_dcmpeq>
 8014862:	b1b8      	cbz	r0, 8014894 <pow+0x68>
 8014864:	2200      	movs	r2, #0
 8014866:	2300      	movs	r3, #0
 8014868:	4620      	mov	r0, r4
 801486a:	4629      	mov	r1, r5
 801486c:	f7ec f954 	bl	8000b18 <__aeabi_dcmpeq>
 8014870:	2800      	cmp	r0, #0
 8014872:	d146      	bne.n	8014902 <pow+0xd6>
 8014874:	ec45 4b10 	vmov	d0, r4, r5
 8014878:	f000 f848 	bl	801490c <finite>
 801487c:	b338      	cbz	r0, 80148ce <pow+0xa2>
 801487e:	2200      	movs	r2, #0
 8014880:	2300      	movs	r3, #0
 8014882:	4620      	mov	r0, r4
 8014884:	4629      	mov	r1, r5
 8014886:	f7ec f951 	bl	8000b2c <__aeabi_dcmplt>
 801488a:	b300      	cbz	r0, 80148ce <pow+0xa2>
 801488c:	f7fd ff98 	bl	80127c0 <__errno>
 8014890:	2322      	movs	r3, #34	@ 0x22
 8014892:	e01b      	b.n	80148cc <pow+0xa0>
 8014894:	ec47 6b10 	vmov	d0, r6, r7
 8014898:	f000 f838 	bl	801490c <finite>
 801489c:	b9e0      	cbnz	r0, 80148d8 <pow+0xac>
 801489e:	eeb0 0a48 	vmov.f32	s0, s16
 80148a2:	eef0 0a68 	vmov.f32	s1, s17
 80148a6:	f000 f831 	bl	801490c <finite>
 80148aa:	b1a8      	cbz	r0, 80148d8 <pow+0xac>
 80148ac:	ec45 4b10 	vmov	d0, r4, r5
 80148b0:	f000 f82c 	bl	801490c <finite>
 80148b4:	b180      	cbz	r0, 80148d8 <pow+0xac>
 80148b6:	4632      	mov	r2, r6
 80148b8:	463b      	mov	r3, r7
 80148ba:	4630      	mov	r0, r6
 80148bc:	4639      	mov	r1, r7
 80148be:	f7ec f95d 	bl	8000b7c <__aeabi_dcmpun>
 80148c2:	2800      	cmp	r0, #0
 80148c4:	d0e2      	beq.n	801488c <pow+0x60>
 80148c6:	f7fd ff7b 	bl	80127c0 <__errno>
 80148ca:	2321      	movs	r3, #33	@ 0x21
 80148cc:	6003      	str	r3, [r0, #0]
 80148ce:	ecbd 8b02 	vpop	{d8}
 80148d2:	ec47 6b10 	vmov	d0, r6, r7
 80148d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148d8:	2200      	movs	r2, #0
 80148da:	2300      	movs	r3, #0
 80148dc:	4630      	mov	r0, r6
 80148de:	4639      	mov	r1, r7
 80148e0:	f7ec f91a 	bl	8000b18 <__aeabi_dcmpeq>
 80148e4:	2800      	cmp	r0, #0
 80148e6:	d0f2      	beq.n	80148ce <pow+0xa2>
 80148e8:	eeb0 0a48 	vmov.f32	s0, s16
 80148ec:	eef0 0a68 	vmov.f32	s1, s17
 80148f0:	f000 f80c 	bl	801490c <finite>
 80148f4:	2800      	cmp	r0, #0
 80148f6:	d0ea      	beq.n	80148ce <pow+0xa2>
 80148f8:	ec45 4b10 	vmov	d0, r4, r5
 80148fc:	f000 f806 	bl	801490c <finite>
 8014900:	e7c3      	b.n	801488a <pow+0x5e>
 8014902:	4f01      	ldr	r7, [pc, #4]	@ (8014908 <pow+0xdc>)
 8014904:	2600      	movs	r6, #0
 8014906:	e7e2      	b.n	80148ce <pow+0xa2>
 8014908:	3ff00000 	.word	0x3ff00000

0801490c <finite>:
 801490c:	b082      	sub	sp, #8
 801490e:	ed8d 0b00 	vstr	d0, [sp]
 8014912:	9801      	ldr	r0, [sp, #4]
 8014914:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8014918:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801491c:	0fc0      	lsrs	r0, r0, #31
 801491e:	b002      	add	sp, #8
 8014920:	4770      	bx	lr
 8014922:	0000      	movs	r0, r0
 8014924:	0000      	movs	r0, r0
	...

08014928 <__ieee754_pow>:
 8014928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801492c:	b091      	sub	sp, #68	@ 0x44
 801492e:	ed8d 1b00 	vstr	d1, [sp]
 8014932:	e9dd 1900 	ldrd	r1, r9, [sp]
 8014936:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801493a:	ea5a 0001 	orrs.w	r0, sl, r1
 801493e:	ec57 6b10 	vmov	r6, r7, d0
 8014942:	d113      	bne.n	801496c <__ieee754_pow+0x44>
 8014944:	19b3      	adds	r3, r6, r6
 8014946:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801494a:	4152      	adcs	r2, r2
 801494c:	4298      	cmp	r0, r3
 801494e:	4b98      	ldr	r3, [pc, #608]	@ (8014bb0 <__ieee754_pow+0x288>)
 8014950:	4193      	sbcs	r3, r2
 8014952:	f080 84ea 	bcs.w	801532a <__ieee754_pow+0xa02>
 8014956:	e9dd 2300 	ldrd	r2, r3, [sp]
 801495a:	4630      	mov	r0, r6
 801495c:	4639      	mov	r1, r7
 801495e:	f7eb fcbd 	bl	80002dc <__adddf3>
 8014962:	ec41 0b10 	vmov	d0, r0, r1
 8014966:	b011      	add	sp, #68	@ 0x44
 8014968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801496c:	4a91      	ldr	r2, [pc, #580]	@ (8014bb4 <__ieee754_pow+0x28c>)
 801496e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8014972:	4590      	cmp	r8, r2
 8014974:	463d      	mov	r5, r7
 8014976:	4633      	mov	r3, r6
 8014978:	d806      	bhi.n	8014988 <__ieee754_pow+0x60>
 801497a:	d101      	bne.n	8014980 <__ieee754_pow+0x58>
 801497c:	2e00      	cmp	r6, #0
 801497e:	d1ea      	bne.n	8014956 <__ieee754_pow+0x2e>
 8014980:	4592      	cmp	sl, r2
 8014982:	d801      	bhi.n	8014988 <__ieee754_pow+0x60>
 8014984:	d10e      	bne.n	80149a4 <__ieee754_pow+0x7c>
 8014986:	b169      	cbz	r1, 80149a4 <__ieee754_pow+0x7c>
 8014988:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801498c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8014990:	431d      	orrs	r5, r3
 8014992:	d1e0      	bne.n	8014956 <__ieee754_pow+0x2e>
 8014994:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014998:	18db      	adds	r3, r3, r3
 801499a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801499e:	4152      	adcs	r2, r2
 80149a0:	429d      	cmp	r5, r3
 80149a2:	e7d4      	b.n	801494e <__ieee754_pow+0x26>
 80149a4:	2d00      	cmp	r5, #0
 80149a6:	46c3      	mov	fp, r8
 80149a8:	da3a      	bge.n	8014a20 <__ieee754_pow+0xf8>
 80149aa:	4a83      	ldr	r2, [pc, #524]	@ (8014bb8 <__ieee754_pow+0x290>)
 80149ac:	4592      	cmp	sl, r2
 80149ae:	d84d      	bhi.n	8014a4c <__ieee754_pow+0x124>
 80149b0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80149b4:	4592      	cmp	sl, r2
 80149b6:	f240 84c7 	bls.w	8015348 <__ieee754_pow+0xa20>
 80149ba:	ea4f 522a 	mov.w	r2, sl, asr #20
 80149be:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80149c2:	2a14      	cmp	r2, #20
 80149c4:	dd0f      	ble.n	80149e6 <__ieee754_pow+0xbe>
 80149c6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80149ca:	fa21 f402 	lsr.w	r4, r1, r2
 80149ce:	fa04 f202 	lsl.w	r2, r4, r2
 80149d2:	428a      	cmp	r2, r1
 80149d4:	f040 84b8 	bne.w	8015348 <__ieee754_pow+0xa20>
 80149d8:	f004 0401 	and.w	r4, r4, #1
 80149dc:	f1c4 0402 	rsb	r4, r4, #2
 80149e0:	2900      	cmp	r1, #0
 80149e2:	d158      	bne.n	8014a96 <__ieee754_pow+0x16e>
 80149e4:	e00e      	b.n	8014a04 <__ieee754_pow+0xdc>
 80149e6:	2900      	cmp	r1, #0
 80149e8:	d154      	bne.n	8014a94 <__ieee754_pow+0x16c>
 80149ea:	f1c2 0214 	rsb	r2, r2, #20
 80149ee:	fa4a f402 	asr.w	r4, sl, r2
 80149f2:	fa04 f202 	lsl.w	r2, r4, r2
 80149f6:	4552      	cmp	r2, sl
 80149f8:	f040 84a3 	bne.w	8015342 <__ieee754_pow+0xa1a>
 80149fc:	f004 0401 	and.w	r4, r4, #1
 8014a00:	f1c4 0402 	rsb	r4, r4, #2
 8014a04:	4a6d      	ldr	r2, [pc, #436]	@ (8014bbc <__ieee754_pow+0x294>)
 8014a06:	4592      	cmp	sl, r2
 8014a08:	d12e      	bne.n	8014a68 <__ieee754_pow+0x140>
 8014a0a:	f1b9 0f00 	cmp.w	r9, #0
 8014a0e:	f280 8494 	bge.w	801533a <__ieee754_pow+0xa12>
 8014a12:	496a      	ldr	r1, [pc, #424]	@ (8014bbc <__ieee754_pow+0x294>)
 8014a14:	4632      	mov	r2, r6
 8014a16:	463b      	mov	r3, r7
 8014a18:	2000      	movs	r0, #0
 8014a1a:	f7eb ff3f 	bl	800089c <__aeabi_ddiv>
 8014a1e:	e7a0      	b.n	8014962 <__ieee754_pow+0x3a>
 8014a20:	2400      	movs	r4, #0
 8014a22:	bbc1      	cbnz	r1, 8014a96 <__ieee754_pow+0x16e>
 8014a24:	4a63      	ldr	r2, [pc, #396]	@ (8014bb4 <__ieee754_pow+0x28c>)
 8014a26:	4592      	cmp	sl, r2
 8014a28:	d1ec      	bne.n	8014a04 <__ieee754_pow+0xdc>
 8014a2a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8014a2e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8014a32:	431a      	orrs	r2, r3
 8014a34:	f000 8479 	beq.w	801532a <__ieee754_pow+0xa02>
 8014a38:	4b61      	ldr	r3, [pc, #388]	@ (8014bc0 <__ieee754_pow+0x298>)
 8014a3a:	4598      	cmp	r8, r3
 8014a3c:	d908      	bls.n	8014a50 <__ieee754_pow+0x128>
 8014a3e:	f1b9 0f00 	cmp.w	r9, #0
 8014a42:	f2c0 8476 	blt.w	8015332 <__ieee754_pow+0xa0a>
 8014a46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a4a:	e78a      	b.n	8014962 <__ieee754_pow+0x3a>
 8014a4c:	2402      	movs	r4, #2
 8014a4e:	e7e8      	b.n	8014a22 <__ieee754_pow+0xfa>
 8014a50:	f1b9 0f00 	cmp.w	r9, #0
 8014a54:	f04f 0000 	mov.w	r0, #0
 8014a58:	f04f 0100 	mov.w	r1, #0
 8014a5c:	da81      	bge.n	8014962 <__ieee754_pow+0x3a>
 8014a5e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014a62:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8014a66:	e77c      	b.n	8014962 <__ieee754_pow+0x3a>
 8014a68:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8014a6c:	d106      	bne.n	8014a7c <__ieee754_pow+0x154>
 8014a6e:	4632      	mov	r2, r6
 8014a70:	463b      	mov	r3, r7
 8014a72:	4630      	mov	r0, r6
 8014a74:	4639      	mov	r1, r7
 8014a76:	f7eb fde7 	bl	8000648 <__aeabi_dmul>
 8014a7a:	e772      	b.n	8014962 <__ieee754_pow+0x3a>
 8014a7c:	4a51      	ldr	r2, [pc, #324]	@ (8014bc4 <__ieee754_pow+0x29c>)
 8014a7e:	4591      	cmp	r9, r2
 8014a80:	d109      	bne.n	8014a96 <__ieee754_pow+0x16e>
 8014a82:	2d00      	cmp	r5, #0
 8014a84:	db07      	blt.n	8014a96 <__ieee754_pow+0x16e>
 8014a86:	ec47 6b10 	vmov	d0, r6, r7
 8014a8a:	b011      	add	sp, #68	@ 0x44
 8014a8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a90:	f000 bd50 	b.w	8015534 <__ieee754_sqrt>
 8014a94:	2400      	movs	r4, #0
 8014a96:	ec47 6b10 	vmov	d0, r6, r7
 8014a9a:	9302      	str	r3, [sp, #8]
 8014a9c:	f000 fcc4 	bl	8015428 <fabs>
 8014aa0:	9b02      	ldr	r3, [sp, #8]
 8014aa2:	ec51 0b10 	vmov	r0, r1, d0
 8014aa6:	bb53      	cbnz	r3, 8014afe <__ieee754_pow+0x1d6>
 8014aa8:	4b44      	ldr	r3, [pc, #272]	@ (8014bbc <__ieee754_pow+0x294>)
 8014aaa:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8014aae:	429a      	cmp	r2, r3
 8014ab0:	d002      	beq.n	8014ab8 <__ieee754_pow+0x190>
 8014ab2:	f1b8 0f00 	cmp.w	r8, #0
 8014ab6:	d122      	bne.n	8014afe <__ieee754_pow+0x1d6>
 8014ab8:	f1b9 0f00 	cmp.w	r9, #0
 8014abc:	da05      	bge.n	8014aca <__ieee754_pow+0x1a2>
 8014abe:	4602      	mov	r2, r0
 8014ac0:	460b      	mov	r3, r1
 8014ac2:	2000      	movs	r0, #0
 8014ac4:	493d      	ldr	r1, [pc, #244]	@ (8014bbc <__ieee754_pow+0x294>)
 8014ac6:	f7eb fee9 	bl	800089c <__aeabi_ddiv>
 8014aca:	2d00      	cmp	r5, #0
 8014acc:	f6bf af49 	bge.w	8014962 <__ieee754_pow+0x3a>
 8014ad0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8014ad4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8014ad8:	ea58 0804 	orrs.w	r8, r8, r4
 8014adc:	d108      	bne.n	8014af0 <__ieee754_pow+0x1c8>
 8014ade:	4602      	mov	r2, r0
 8014ae0:	460b      	mov	r3, r1
 8014ae2:	4610      	mov	r0, r2
 8014ae4:	4619      	mov	r1, r3
 8014ae6:	f7eb fbf7 	bl	80002d8 <__aeabi_dsub>
 8014aea:	4602      	mov	r2, r0
 8014aec:	460b      	mov	r3, r1
 8014aee:	e794      	b.n	8014a1a <__ieee754_pow+0xf2>
 8014af0:	2c01      	cmp	r4, #1
 8014af2:	f47f af36 	bne.w	8014962 <__ieee754_pow+0x3a>
 8014af6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014afa:	4619      	mov	r1, r3
 8014afc:	e731      	b.n	8014962 <__ieee754_pow+0x3a>
 8014afe:	0feb      	lsrs	r3, r5, #31
 8014b00:	3b01      	subs	r3, #1
 8014b02:	ea53 0204 	orrs.w	r2, r3, r4
 8014b06:	d102      	bne.n	8014b0e <__ieee754_pow+0x1e6>
 8014b08:	4632      	mov	r2, r6
 8014b0a:	463b      	mov	r3, r7
 8014b0c:	e7e9      	b.n	8014ae2 <__ieee754_pow+0x1ba>
 8014b0e:	3c01      	subs	r4, #1
 8014b10:	431c      	orrs	r4, r3
 8014b12:	d016      	beq.n	8014b42 <__ieee754_pow+0x21a>
 8014b14:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8014ba0 <__ieee754_pow+0x278>
 8014b18:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8014b1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014b20:	f240 8112 	bls.w	8014d48 <__ieee754_pow+0x420>
 8014b24:	4b28      	ldr	r3, [pc, #160]	@ (8014bc8 <__ieee754_pow+0x2a0>)
 8014b26:	459a      	cmp	sl, r3
 8014b28:	4b25      	ldr	r3, [pc, #148]	@ (8014bc0 <__ieee754_pow+0x298>)
 8014b2a:	d916      	bls.n	8014b5a <__ieee754_pow+0x232>
 8014b2c:	4598      	cmp	r8, r3
 8014b2e:	d80b      	bhi.n	8014b48 <__ieee754_pow+0x220>
 8014b30:	f1b9 0f00 	cmp.w	r9, #0
 8014b34:	da0b      	bge.n	8014b4e <__ieee754_pow+0x226>
 8014b36:	2000      	movs	r0, #0
 8014b38:	b011      	add	sp, #68	@ 0x44
 8014b3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b3e:	f000 bc6b 	b.w	8015418 <__math_oflow>
 8014b42:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8014ba8 <__ieee754_pow+0x280>
 8014b46:	e7e7      	b.n	8014b18 <__ieee754_pow+0x1f0>
 8014b48:	f1b9 0f00 	cmp.w	r9, #0
 8014b4c:	dcf3      	bgt.n	8014b36 <__ieee754_pow+0x20e>
 8014b4e:	2000      	movs	r0, #0
 8014b50:	b011      	add	sp, #68	@ 0x44
 8014b52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b56:	f000 bc57 	b.w	8015408 <__math_uflow>
 8014b5a:	4598      	cmp	r8, r3
 8014b5c:	d20c      	bcs.n	8014b78 <__ieee754_pow+0x250>
 8014b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b62:	2200      	movs	r2, #0
 8014b64:	2300      	movs	r3, #0
 8014b66:	f7eb ffe1 	bl	8000b2c <__aeabi_dcmplt>
 8014b6a:	3800      	subs	r0, #0
 8014b6c:	bf18      	it	ne
 8014b6e:	2001      	movne	r0, #1
 8014b70:	f1b9 0f00 	cmp.w	r9, #0
 8014b74:	daec      	bge.n	8014b50 <__ieee754_pow+0x228>
 8014b76:	e7df      	b.n	8014b38 <__ieee754_pow+0x210>
 8014b78:	4b10      	ldr	r3, [pc, #64]	@ (8014bbc <__ieee754_pow+0x294>)
 8014b7a:	4598      	cmp	r8, r3
 8014b7c:	f04f 0200 	mov.w	r2, #0
 8014b80:	d924      	bls.n	8014bcc <__ieee754_pow+0x2a4>
 8014b82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b86:	2300      	movs	r3, #0
 8014b88:	f7eb ffd0 	bl	8000b2c <__aeabi_dcmplt>
 8014b8c:	3800      	subs	r0, #0
 8014b8e:	bf18      	it	ne
 8014b90:	2001      	movne	r0, #1
 8014b92:	f1b9 0f00 	cmp.w	r9, #0
 8014b96:	dccf      	bgt.n	8014b38 <__ieee754_pow+0x210>
 8014b98:	e7da      	b.n	8014b50 <__ieee754_pow+0x228>
 8014b9a:	bf00      	nop
 8014b9c:	f3af 8000 	nop.w
 8014ba0:	00000000 	.word	0x00000000
 8014ba4:	3ff00000 	.word	0x3ff00000
 8014ba8:	00000000 	.word	0x00000000
 8014bac:	bff00000 	.word	0xbff00000
 8014bb0:	fff00000 	.word	0xfff00000
 8014bb4:	7ff00000 	.word	0x7ff00000
 8014bb8:	433fffff 	.word	0x433fffff
 8014bbc:	3ff00000 	.word	0x3ff00000
 8014bc0:	3fefffff 	.word	0x3fefffff
 8014bc4:	3fe00000 	.word	0x3fe00000
 8014bc8:	43f00000 	.word	0x43f00000
 8014bcc:	4b5a      	ldr	r3, [pc, #360]	@ (8014d38 <__ieee754_pow+0x410>)
 8014bce:	f7eb fb83 	bl	80002d8 <__aeabi_dsub>
 8014bd2:	a351      	add	r3, pc, #324	@ (adr r3, 8014d18 <__ieee754_pow+0x3f0>)
 8014bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bd8:	4604      	mov	r4, r0
 8014bda:	460d      	mov	r5, r1
 8014bdc:	f7eb fd34 	bl	8000648 <__aeabi_dmul>
 8014be0:	a34f      	add	r3, pc, #316	@ (adr r3, 8014d20 <__ieee754_pow+0x3f8>)
 8014be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014be6:	4606      	mov	r6, r0
 8014be8:	460f      	mov	r7, r1
 8014bea:	4620      	mov	r0, r4
 8014bec:	4629      	mov	r1, r5
 8014bee:	f7eb fd2b 	bl	8000648 <__aeabi_dmul>
 8014bf2:	4b52      	ldr	r3, [pc, #328]	@ (8014d3c <__ieee754_pow+0x414>)
 8014bf4:	4682      	mov	sl, r0
 8014bf6:	468b      	mov	fp, r1
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	4629      	mov	r1, r5
 8014bfe:	f7eb fd23 	bl	8000648 <__aeabi_dmul>
 8014c02:	4602      	mov	r2, r0
 8014c04:	460b      	mov	r3, r1
 8014c06:	a148      	add	r1, pc, #288	@ (adr r1, 8014d28 <__ieee754_pow+0x400>)
 8014c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c0c:	f7eb fb64 	bl	80002d8 <__aeabi_dsub>
 8014c10:	4622      	mov	r2, r4
 8014c12:	462b      	mov	r3, r5
 8014c14:	f7eb fd18 	bl	8000648 <__aeabi_dmul>
 8014c18:	4602      	mov	r2, r0
 8014c1a:	460b      	mov	r3, r1
 8014c1c:	2000      	movs	r0, #0
 8014c1e:	4948      	ldr	r1, [pc, #288]	@ (8014d40 <__ieee754_pow+0x418>)
 8014c20:	f7eb fb5a 	bl	80002d8 <__aeabi_dsub>
 8014c24:	4622      	mov	r2, r4
 8014c26:	4680      	mov	r8, r0
 8014c28:	4689      	mov	r9, r1
 8014c2a:	462b      	mov	r3, r5
 8014c2c:	4620      	mov	r0, r4
 8014c2e:	4629      	mov	r1, r5
 8014c30:	f7eb fd0a 	bl	8000648 <__aeabi_dmul>
 8014c34:	4602      	mov	r2, r0
 8014c36:	460b      	mov	r3, r1
 8014c38:	4640      	mov	r0, r8
 8014c3a:	4649      	mov	r1, r9
 8014c3c:	f7eb fd04 	bl	8000648 <__aeabi_dmul>
 8014c40:	a33b      	add	r3, pc, #236	@ (adr r3, 8014d30 <__ieee754_pow+0x408>)
 8014c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c46:	f7eb fcff 	bl	8000648 <__aeabi_dmul>
 8014c4a:	4602      	mov	r2, r0
 8014c4c:	460b      	mov	r3, r1
 8014c4e:	4650      	mov	r0, sl
 8014c50:	4659      	mov	r1, fp
 8014c52:	f7eb fb41 	bl	80002d8 <__aeabi_dsub>
 8014c56:	4602      	mov	r2, r0
 8014c58:	460b      	mov	r3, r1
 8014c5a:	4680      	mov	r8, r0
 8014c5c:	4689      	mov	r9, r1
 8014c5e:	4630      	mov	r0, r6
 8014c60:	4639      	mov	r1, r7
 8014c62:	f7eb fb3b 	bl	80002dc <__adddf3>
 8014c66:	2400      	movs	r4, #0
 8014c68:	4632      	mov	r2, r6
 8014c6a:	463b      	mov	r3, r7
 8014c6c:	4620      	mov	r0, r4
 8014c6e:	460d      	mov	r5, r1
 8014c70:	f7eb fb32 	bl	80002d8 <__aeabi_dsub>
 8014c74:	4602      	mov	r2, r0
 8014c76:	460b      	mov	r3, r1
 8014c78:	4640      	mov	r0, r8
 8014c7a:	4649      	mov	r1, r9
 8014c7c:	f7eb fb2c 	bl	80002d8 <__aeabi_dsub>
 8014c80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014c88:	2300      	movs	r3, #0
 8014c8a:	9304      	str	r3, [sp, #16]
 8014c8c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8014c90:	4606      	mov	r6, r0
 8014c92:	460f      	mov	r7, r1
 8014c94:	4652      	mov	r2, sl
 8014c96:	465b      	mov	r3, fp
 8014c98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014c9c:	f7eb fb1c 	bl	80002d8 <__aeabi_dsub>
 8014ca0:	4622      	mov	r2, r4
 8014ca2:	462b      	mov	r3, r5
 8014ca4:	f7eb fcd0 	bl	8000648 <__aeabi_dmul>
 8014ca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014cac:	4680      	mov	r8, r0
 8014cae:	4689      	mov	r9, r1
 8014cb0:	4630      	mov	r0, r6
 8014cb2:	4639      	mov	r1, r7
 8014cb4:	f7eb fcc8 	bl	8000648 <__aeabi_dmul>
 8014cb8:	4602      	mov	r2, r0
 8014cba:	460b      	mov	r3, r1
 8014cbc:	4640      	mov	r0, r8
 8014cbe:	4649      	mov	r1, r9
 8014cc0:	f7eb fb0c 	bl	80002dc <__adddf3>
 8014cc4:	4652      	mov	r2, sl
 8014cc6:	465b      	mov	r3, fp
 8014cc8:	4606      	mov	r6, r0
 8014cca:	460f      	mov	r7, r1
 8014ccc:	4620      	mov	r0, r4
 8014cce:	4629      	mov	r1, r5
 8014cd0:	f7eb fcba 	bl	8000648 <__aeabi_dmul>
 8014cd4:	460b      	mov	r3, r1
 8014cd6:	4602      	mov	r2, r0
 8014cd8:	4680      	mov	r8, r0
 8014cda:	4689      	mov	r9, r1
 8014cdc:	4630      	mov	r0, r6
 8014cde:	4639      	mov	r1, r7
 8014ce0:	f7eb fafc 	bl	80002dc <__adddf3>
 8014ce4:	4b17      	ldr	r3, [pc, #92]	@ (8014d44 <__ieee754_pow+0x41c>)
 8014ce6:	4299      	cmp	r1, r3
 8014ce8:	4604      	mov	r4, r0
 8014cea:	460d      	mov	r5, r1
 8014cec:	468a      	mov	sl, r1
 8014cee:	468b      	mov	fp, r1
 8014cf0:	f340 82ef 	ble.w	80152d2 <__ieee754_pow+0x9aa>
 8014cf4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8014cf8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8014cfc:	4303      	orrs	r3, r0
 8014cfe:	f000 81e8 	beq.w	80150d2 <__ieee754_pow+0x7aa>
 8014d02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d06:	2200      	movs	r2, #0
 8014d08:	2300      	movs	r3, #0
 8014d0a:	f7eb ff0f 	bl	8000b2c <__aeabi_dcmplt>
 8014d0e:	3800      	subs	r0, #0
 8014d10:	bf18      	it	ne
 8014d12:	2001      	movne	r0, #1
 8014d14:	e710      	b.n	8014b38 <__ieee754_pow+0x210>
 8014d16:	bf00      	nop
 8014d18:	60000000 	.word	0x60000000
 8014d1c:	3ff71547 	.word	0x3ff71547
 8014d20:	f85ddf44 	.word	0xf85ddf44
 8014d24:	3e54ae0b 	.word	0x3e54ae0b
 8014d28:	55555555 	.word	0x55555555
 8014d2c:	3fd55555 	.word	0x3fd55555
 8014d30:	652b82fe 	.word	0x652b82fe
 8014d34:	3ff71547 	.word	0x3ff71547
 8014d38:	3ff00000 	.word	0x3ff00000
 8014d3c:	3fd00000 	.word	0x3fd00000
 8014d40:	3fe00000 	.word	0x3fe00000
 8014d44:	408fffff 	.word	0x408fffff
 8014d48:	4bd5      	ldr	r3, [pc, #852]	@ (80150a0 <__ieee754_pow+0x778>)
 8014d4a:	402b      	ands	r3, r5
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	b92b      	cbnz	r3, 8014d5c <__ieee754_pow+0x434>
 8014d50:	4bd4      	ldr	r3, [pc, #848]	@ (80150a4 <__ieee754_pow+0x77c>)
 8014d52:	f7eb fc79 	bl	8000648 <__aeabi_dmul>
 8014d56:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8014d5a:	468b      	mov	fp, r1
 8014d5c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8014d60:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8014d64:	4413      	add	r3, r2
 8014d66:	930a      	str	r3, [sp, #40]	@ 0x28
 8014d68:	4bcf      	ldr	r3, [pc, #828]	@ (80150a8 <__ieee754_pow+0x780>)
 8014d6a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8014d6e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8014d72:	459b      	cmp	fp, r3
 8014d74:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8014d78:	dd08      	ble.n	8014d8c <__ieee754_pow+0x464>
 8014d7a:	4bcc      	ldr	r3, [pc, #816]	@ (80150ac <__ieee754_pow+0x784>)
 8014d7c:	459b      	cmp	fp, r3
 8014d7e:	f340 81a5 	ble.w	80150cc <__ieee754_pow+0x7a4>
 8014d82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014d84:	3301      	adds	r3, #1
 8014d86:	930a      	str	r3, [sp, #40]	@ 0x28
 8014d88:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8014d8c:	f04f 0a00 	mov.w	sl, #0
 8014d90:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8014d94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014d96:	4bc6      	ldr	r3, [pc, #792]	@ (80150b0 <__ieee754_pow+0x788>)
 8014d98:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014d9c:	ed93 7b00 	vldr	d7, [r3]
 8014da0:	4629      	mov	r1, r5
 8014da2:	ec53 2b17 	vmov	r2, r3, d7
 8014da6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014daa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014dae:	f7eb fa93 	bl	80002d8 <__aeabi_dsub>
 8014db2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014db6:	4606      	mov	r6, r0
 8014db8:	460f      	mov	r7, r1
 8014dba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014dbe:	f7eb fa8d 	bl	80002dc <__adddf3>
 8014dc2:	4602      	mov	r2, r0
 8014dc4:	460b      	mov	r3, r1
 8014dc6:	2000      	movs	r0, #0
 8014dc8:	49ba      	ldr	r1, [pc, #744]	@ (80150b4 <__ieee754_pow+0x78c>)
 8014dca:	f7eb fd67 	bl	800089c <__aeabi_ddiv>
 8014dce:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8014dd2:	4602      	mov	r2, r0
 8014dd4:	460b      	mov	r3, r1
 8014dd6:	4630      	mov	r0, r6
 8014dd8:	4639      	mov	r1, r7
 8014dda:	f7eb fc35 	bl	8000648 <__aeabi_dmul>
 8014dde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014de2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8014de6:	106d      	asrs	r5, r5, #1
 8014de8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8014dec:	f04f 0b00 	mov.w	fp, #0
 8014df0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8014df4:	4661      	mov	r1, ip
 8014df6:	2200      	movs	r2, #0
 8014df8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8014dfc:	4658      	mov	r0, fp
 8014dfe:	46e1      	mov	r9, ip
 8014e00:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8014e04:	4614      	mov	r4, r2
 8014e06:	461d      	mov	r5, r3
 8014e08:	f7eb fc1e 	bl	8000648 <__aeabi_dmul>
 8014e0c:	4602      	mov	r2, r0
 8014e0e:	460b      	mov	r3, r1
 8014e10:	4630      	mov	r0, r6
 8014e12:	4639      	mov	r1, r7
 8014e14:	f7eb fa60 	bl	80002d8 <__aeabi_dsub>
 8014e18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014e1c:	4606      	mov	r6, r0
 8014e1e:	460f      	mov	r7, r1
 8014e20:	4620      	mov	r0, r4
 8014e22:	4629      	mov	r1, r5
 8014e24:	f7eb fa58 	bl	80002d8 <__aeabi_dsub>
 8014e28:	4602      	mov	r2, r0
 8014e2a:	460b      	mov	r3, r1
 8014e2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014e30:	f7eb fa52 	bl	80002d8 <__aeabi_dsub>
 8014e34:	465a      	mov	r2, fp
 8014e36:	464b      	mov	r3, r9
 8014e38:	f7eb fc06 	bl	8000648 <__aeabi_dmul>
 8014e3c:	4602      	mov	r2, r0
 8014e3e:	460b      	mov	r3, r1
 8014e40:	4630      	mov	r0, r6
 8014e42:	4639      	mov	r1, r7
 8014e44:	f7eb fa48 	bl	80002d8 <__aeabi_dsub>
 8014e48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8014e4c:	f7eb fbfc 	bl	8000648 <__aeabi_dmul>
 8014e50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014e54:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014e58:	4610      	mov	r0, r2
 8014e5a:	4619      	mov	r1, r3
 8014e5c:	f7eb fbf4 	bl	8000648 <__aeabi_dmul>
 8014e60:	a37d      	add	r3, pc, #500	@ (adr r3, 8015058 <__ieee754_pow+0x730>)
 8014e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e66:	4604      	mov	r4, r0
 8014e68:	460d      	mov	r5, r1
 8014e6a:	f7eb fbed 	bl	8000648 <__aeabi_dmul>
 8014e6e:	a37c      	add	r3, pc, #496	@ (adr r3, 8015060 <__ieee754_pow+0x738>)
 8014e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e74:	f7eb fa32 	bl	80002dc <__adddf3>
 8014e78:	4622      	mov	r2, r4
 8014e7a:	462b      	mov	r3, r5
 8014e7c:	f7eb fbe4 	bl	8000648 <__aeabi_dmul>
 8014e80:	a379      	add	r3, pc, #484	@ (adr r3, 8015068 <__ieee754_pow+0x740>)
 8014e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e86:	f7eb fa29 	bl	80002dc <__adddf3>
 8014e8a:	4622      	mov	r2, r4
 8014e8c:	462b      	mov	r3, r5
 8014e8e:	f7eb fbdb 	bl	8000648 <__aeabi_dmul>
 8014e92:	a377      	add	r3, pc, #476	@ (adr r3, 8015070 <__ieee754_pow+0x748>)
 8014e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e98:	f7eb fa20 	bl	80002dc <__adddf3>
 8014e9c:	4622      	mov	r2, r4
 8014e9e:	462b      	mov	r3, r5
 8014ea0:	f7eb fbd2 	bl	8000648 <__aeabi_dmul>
 8014ea4:	a374      	add	r3, pc, #464	@ (adr r3, 8015078 <__ieee754_pow+0x750>)
 8014ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eaa:	f7eb fa17 	bl	80002dc <__adddf3>
 8014eae:	4622      	mov	r2, r4
 8014eb0:	462b      	mov	r3, r5
 8014eb2:	f7eb fbc9 	bl	8000648 <__aeabi_dmul>
 8014eb6:	a372      	add	r3, pc, #456	@ (adr r3, 8015080 <__ieee754_pow+0x758>)
 8014eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ebc:	f7eb fa0e 	bl	80002dc <__adddf3>
 8014ec0:	4622      	mov	r2, r4
 8014ec2:	4606      	mov	r6, r0
 8014ec4:	460f      	mov	r7, r1
 8014ec6:	462b      	mov	r3, r5
 8014ec8:	4620      	mov	r0, r4
 8014eca:	4629      	mov	r1, r5
 8014ecc:	f7eb fbbc 	bl	8000648 <__aeabi_dmul>
 8014ed0:	4602      	mov	r2, r0
 8014ed2:	460b      	mov	r3, r1
 8014ed4:	4630      	mov	r0, r6
 8014ed6:	4639      	mov	r1, r7
 8014ed8:	f7eb fbb6 	bl	8000648 <__aeabi_dmul>
 8014edc:	465a      	mov	r2, fp
 8014ede:	4604      	mov	r4, r0
 8014ee0:	460d      	mov	r5, r1
 8014ee2:	464b      	mov	r3, r9
 8014ee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014ee8:	f7eb f9f8 	bl	80002dc <__adddf3>
 8014eec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014ef0:	f7eb fbaa 	bl	8000648 <__aeabi_dmul>
 8014ef4:	4622      	mov	r2, r4
 8014ef6:	462b      	mov	r3, r5
 8014ef8:	f7eb f9f0 	bl	80002dc <__adddf3>
 8014efc:	465a      	mov	r2, fp
 8014efe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014f02:	464b      	mov	r3, r9
 8014f04:	4658      	mov	r0, fp
 8014f06:	4649      	mov	r1, r9
 8014f08:	f7eb fb9e 	bl	8000648 <__aeabi_dmul>
 8014f0c:	4b6a      	ldr	r3, [pc, #424]	@ (80150b8 <__ieee754_pow+0x790>)
 8014f0e:	2200      	movs	r2, #0
 8014f10:	4606      	mov	r6, r0
 8014f12:	460f      	mov	r7, r1
 8014f14:	f7eb f9e2 	bl	80002dc <__adddf3>
 8014f18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014f1c:	f7eb f9de 	bl	80002dc <__adddf3>
 8014f20:	46d8      	mov	r8, fp
 8014f22:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8014f26:	460d      	mov	r5, r1
 8014f28:	465a      	mov	r2, fp
 8014f2a:	460b      	mov	r3, r1
 8014f2c:	4640      	mov	r0, r8
 8014f2e:	4649      	mov	r1, r9
 8014f30:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8014f34:	f7eb fb88 	bl	8000648 <__aeabi_dmul>
 8014f38:	465c      	mov	r4, fp
 8014f3a:	4680      	mov	r8, r0
 8014f3c:	4689      	mov	r9, r1
 8014f3e:	4b5e      	ldr	r3, [pc, #376]	@ (80150b8 <__ieee754_pow+0x790>)
 8014f40:	2200      	movs	r2, #0
 8014f42:	4620      	mov	r0, r4
 8014f44:	4629      	mov	r1, r5
 8014f46:	f7eb f9c7 	bl	80002d8 <__aeabi_dsub>
 8014f4a:	4632      	mov	r2, r6
 8014f4c:	463b      	mov	r3, r7
 8014f4e:	f7eb f9c3 	bl	80002d8 <__aeabi_dsub>
 8014f52:	4602      	mov	r2, r0
 8014f54:	460b      	mov	r3, r1
 8014f56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014f5a:	f7eb f9bd 	bl	80002d8 <__aeabi_dsub>
 8014f5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014f62:	f7eb fb71 	bl	8000648 <__aeabi_dmul>
 8014f66:	4622      	mov	r2, r4
 8014f68:	4606      	mov	r6, r0
 8014f6a:	460f      	mov	r7, r1
 8014f6c:	462b      	mov	r3, r5
 8014f6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014f72:	f7eb fb69 	bl	8000648 <__aeabi_dmul>
 8014f76:	4602      	mov	r2, r0
 8014f78:	460b      	mov	r3, r1
 8014f7a:	4630      	mov	r0, r6
 8014f7c:	4639      	mov	r1, r7
 8014f7e:	f7eb f9ad 	bl	80002dc <__adddf3>
 8014f82:	4606      	mov	r6, r0
 8014f84:	460f      	mov	r7, r1
 8014f86:	4602      	mov	r2, r0
 8014f88:	460b      	mov	r3, r1
 8014f8a:	4640      	mov	r0, r8
 8014f8c:	4649      	mov	r1, r9
 8014f8e:	f7eb f9a5 	bl	80002dc <__adddf3>
 8014f92:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8014f96:	a33c      	add	r3, pc, #240	@ (adr r3, 8015088 <__ieee754_pow+0x760>)
 8014f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f9c:	4658      	mov	r0, fp
 8014f9e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8014fa2:	460d      	mov	r5, r1
 8014fa4:	f7eb fb50 	bl	8000648 <__aeabi_dmul>
 8014fa8:	465c      	mov	r4, fp
 8014faa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014fae:	4642      	mov	r2, r8
 8014fb0:	464b      	mov	r3, r9
 8014fb2:	4620      	mov	r0, r4
 8014fb4:	4629      	mov	r1, r5
 8014fb6:	f7eb f98f 	bl	80002d8 <__aeabi_dsub>
 8014fba:	4602      	mov	r2, r0
 8014fbc:	460b      	mov	r3, r1
 8014fbe:	4630      	mov	r0, r6
 8014fc0:	4639      	mov	r1, r7
 8014fc2:	f7eb f989 	bl	80002d8 <__aeabi_dsub>
 8014fc6:	a332      	add	r3, pc, #200	@ (adr r3, 8015090 <__ieee754_pow+0x768>)
 8014fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fcc:	f7eb fb3c 	bl	8000648 <__aeabi_dmul>
 8014fd0:	a331      	add	r3, pc, #196	@ (adr r3, 8015098 <__ieee754_pow+0x770>)
 8014fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fd6:	4606      	mov	r6, r0
 8014fd8:	460f      	mov	r7, r1
 8014fda:	4620      	mov	r0, r4
 8014fdc:	4629      	mov	r1, r5
 8014fde:	f7eb fb33 	bl	8000648 <__aeabi_dmul>
 8014fe2:	4602      	mov	r2, r0
 8014fe4:	460b      	mov	r3, r1
 8014fe6:	4630      	mov	r0, r6
 8014fe8:	4639      	mov	r1, r7
 8014fea:	f7eb f977 	bl	80002dc <__adddf3>
 8014fee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014ff0:	4b32      	ldr	r3, [pc, #200]	@ (80150bc <__ieee754_pow+0x794>)
 8014ff2:	4413      	add	r3, r2
 8014ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ff8:	f7eb f970 	bl	80002dc <__adddf3>
 8014ffc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015000:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015002:	f7eb fab7 	bl	8000574 <__aeabi_i2d>
 8015006:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015008:	4b2d      	ldr	r3, [pc, #180]	@ (80150c0 <__ieee754_pow+0x798>)
 801500a:	4413      	add	r3, r2
 801500c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015010:	4606      	mov	r6, r0
 8015012:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015016:	460f      	mov	r7, r1
 8015018:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801501c:	f7eb f95e 	bl	80002dc <__adddf3>
 8015020:	4642      	mov	r2, r8
 8015022:	464b      	mov	r3, r9
 8015024:	f7eb f95a 	bl	80002dc <__adddf3>
 8015028:	4632      	mov	r2, r6
 801502a:	463b      	mov	r3, r7
 801502c:	f7eb f956 	bl	80002dc <__adddf3>
 8015030:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8015034:	4632      	mov	r2, r6
 8015036:	463b      	mov	r3, r7
 8015038:	4658      	mov	r0, fp
 801503a:	460d      	mov	r5, r1
 801503c:	f7eb f94c 	bl	80002d8 <__aeabi_dsub>
 8015040:	4642      	mov	r2, r8
 8015042:	464b      	mov	r3, r9
 8015044:	f7eb f948 	bl	80002d8 <__aeabi_dsub>
 8015048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801504c:	f7eb f944 	bl	80002d8 <__aeabi_dsub>
 8015050:	465c      	mov	r4, fp
 8015052:	4602      	mov	r2, r0
 8015054:	e036      	b.n	80150c4 <__ieee754_pow+0x79c>
 8015056:	bf00      	nop
 8015058:	4a454eef 	.word	0x4a454eef
 801505c:	3fca7e28 	.word	0x3fca7e28
 8015060:	93c9db65 	.word	0x93c9db65
 8015064:	3fcd864a 	.word	0x3fcd864a
 8015068:	a91d4101 	.word	0xa91d4101
 801506c:	3fd17460 	.word	0x3fd17460
 8015070:	518f264d 	.word	0x518f264d
 8015074:	3fd55555 	.word	0x3fd55555
 8015078:	db6fabff 	.word	0xdb6fabff
 801507c:	3fdb6db6 	.word	0x3fdb6db6
 8015080:	33333303 	.word	0x33333303
 8015084:	3fe33333 	.word	0x3fe33333
 8015088:	e0000000 	.word	0xe0000000
 801508c:	3feec709 	.word	0x3feec709
 8015090:	dc3a03fd 	.word	0xdc3a03fd
 8015094:	3feec709 	.word	0x3feec709
 8015098:	145b01f5 	.word	0x145b01f5
 801509c:	be3e2fe0 	.word	0xbe3e2fe0
 80150a0:	7ff00000 	.word	0x7ff00000
 80150a4:	43400000 	.word	0x43400000
 80150a8:	0003988e 	.word	0x0003988e
 80150ac:	000bb679 	.word	0x000bb679
 80150b0:	08015c80 	.word	0x08015c80
 80150b4:	3ff00000 	.word	0x3ff00000
 80150b8:	40080000 	.word	0x40080000
 80150bc:	08015c60 	.word	0x08015c60
 80150c0:	08015c70 	.word	0x08015c70
 80150c4:	460b      	mov	r3, r1
 80150c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80150ca:	e5d7      	b.n	8014c7c <__ieee754_pow+0x354>
 80150cc:	f04f 0a01 	mov.w	sl, #1
 80150d0:	e65e      	b.n	8014d90 <__ieee754_pow+0x468>
 80150d2:	a3b4      	add	r3, pc, #720	@ (adr r3, 80153a4 <__ieee754_pow+0xa7c>)
 80150d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150d8:	4630      	mov	r0, r6
 80150da:	4639      	mov	r1, r7
 80150dc:	f7eb f8fe 	bl	80002dc <__adddf3>
 80150e0:	4642      	mov	r2, r8
 80150e2:	e9cd 0100 	strd	r0, r1, [sp]
 80150e6:	464b      	mov	r3, r9
 80150e8:	4620      	mov	r0, r4
 80150ea:	4629      	mov	r1, r5
 80150ec:	f7eb f8f4 	bl	80002d8 <__aeabi_dsub>
 80150f0:	4602      	mov	r2, r0
 80150f2:	460b      	mov	r3, r1
 80150f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150f8:	f7eb fd36 	bl	8000b68 <__aeabi_dcmpgt>
 80150fc:	2800      	cmp	r0, #0
 80150fe:	f47f ae00 	bne.w	8014d02 <__ieee754_pow+0x3da>
 8015102:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8015106:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801510a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801510e:	fa43 fa0a 	asr.w	sl, r3, sl
 8015112:	44da      	add	sl, fp
 8015114:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8015118:	489d      	ldr	r0, [pc, #628]	@ (8015390 <__ieee754_pow+0xa68>)
 801511a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801511e:	4108      	asrs	r0, r1
 8015120:	ea00 030a 	and.w	r3, r0, sl
 8015124:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8015128:	f1c1 0114 	rsb	r1, r1, #20
 801512c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8015130:	fa4a fa01 	asr.w	sl, sl, r1
 8015134:	f1bb 0f00 	cmp.w	fp, #0
 8015138:	4640      	mov	r0, r8
 801513a:	4649      	mov	r1, r9
 801513c:	f04f 0200 	mov.w	r2, #0
 8015140:	bfb8      	it	lt
 8015142:	f1ca 0a00 	rsblt	sl, sl, #0
 8015146:	f7eb f8c7 	bl	80002d8 <__aeabi_dsub>
 801514a:	4680      	mov	r8, r0
 801514c:	4689      	mov	r9, r1
 801514e:	4632      	mov	r2, r6
 8015150:	463b      	mov	r3, r7
 8015152:	4640      	mov	r0, r8
 8015154:	4649      	mov	r1, r9
 8015156:	f7eb f8c1 	bl	80002dc <__adddf3>
 801515a:	2400      	movs	r4, #0
 801515c:	a37c      	add	r3, pc, #496	@ (adr r3, 8015350 <__ieee754_pow+0xa28>)
 801515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015162:	4620      	mov	r0, r4
 8015164:	460d      	mov	r5, r1
 8015166:	f7eb fa6f 	bl	8000648 <__aeabi_dmul>
 801516a:	4642      	mov	r2, r8
 801516c:	e9cd 0100 	strd	r0, r1, [sp]
 8015170:	464b      	mov	r3, r9
 8015172:	4620      	mov	r0, r4
 8015174:	4629      	mov	r1, r5
 8015176:	f7eb f8af 	bl	80002d8 <__aeabi_dsub>
 801517a:	4602      	mov	r2, r0
 801517c:	460b      	mov	r3, r1
 801517e:	4630      	mov	r0, r6
 8015180:	4639      	mov	r1, r7
 8015182:	f7eb f8a9 	bl	80002d8 <__aeabi_dsub>
 8015186:	a374      	add	r3, pc, #464	@ (adr r3, 8015358 <__ieee754_pow+0xa30>)
 8015188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801518c:	f7eb fa5c 	bl	8000648 <__aeabi_dmul>
 8015190:	a373      	add	r3, pc, #460	@ (adr r3, 8015360 <__ieee754_pow+0xa38>)
 8015192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015196:	4680      	mov	r8, r0
 8015198:	4689      	mov	r9, r1
 801519a:	4620      	mov	r0, r4
 801519c:	4629      	mov	r1, r5
 801519e:	f7eb fa53 	bl	8000648 <__aeabi_dmul>
 80151a2:	4602      	mov	r2, r0
 80151a4:	460b      	mov	r3, r1
 80151a6:	4640      	mov	r0, r8
 80151a8:	4649      	mov	r1, r9
 80151aa:	f7eb f897 	bl	80002dc <__adddf3>
 80151ae:	4604      	mov	r4, r0
 80151b0:	460d      	mov	r5, r1
 80151b2:	4602      	mov	r2, r0
 80151b4:	460b      	mov	r3, r1
 80151b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151ba:	f7eb f88f 	bl	80002dc <__adddf3>
 80151be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151c2:	4680      	mov	r8, r0
 80151c4:	4689      	mov	r9, r1
 80151c6:	f7eb f887 	bl	80002d8 <__aeabi_dsub>
 80151ca:	4602      	mov	r2, r0
 80151cc:	460b      	mov	r3, r1
 80151ce:	4620      	mov	r0, r4
 80151d0:	4629      	mov	r1, r5
 80151d2:	f7eb f881 	bl	80002d8 <__aeabi_dsub>
 80151d6:	4642      	mov	r2, r8
 80151d8:	4606      	mov	r6, r0
 80151da:	460f      	mov	r7, r1
 80151dc:	464b      	mov	r3, r9
 80151de:	4640      	mov	r0, r8
 80151e0:	4649      	mov	r1, r9
 80151e2:	f7eb fa31 	bl	8000648 <__aeabi_dmul>
 80151e6:	a360      	add	r3, pc, #384	@ (adr r3, 8015368 <__ieee754_pow+0xa40>)
 80151e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ec:	4604      	mov	r4, r0
 80151ee:	460d      	mov	r5, r1
 80151f0:	f7eb fa2a 	bl	8000648 <__aeabi_dmul>
 80151f4:	a35e      	add	r3, pc, #376	@ (adr r3, 8015370 <__ieee754_pow+0xa48>)
 80151f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151fa:	f7eb f86d 	bl	80002d8 <__aeabi_dsub>
 80151fe:	4622      	mov	r2, r4
 8015200:	462b      	mov	r3, r5
 8015202:	f7eb fa21 	bl	8000648 <__aeabi_dmul>
 8015206:	a35c      	add	r3, pc, #368	@ (adr r3, 8015378 <__ieee754_pow+0xa50>)
 8015208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801520c:	f7eb f866 	bl	80002dc <__adddf3>
 8015210:	4622      	mov	r2, r4
 8015212:	462b      	mov	r3, r5
 8015214:	f7eb fa18 	bl	8000648 <__aeabi_dmul>
 8015218:	a359      	add	r3, pc, #356	@ (adr r3, 8015380 <__ieee754_pow+0xa58>)
 801521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801521e:	f7eb f85b 	bl	80002d8 <__aeabi_dsub>
 8015222:	4622      	mov	r2, r4
 8015224:	462b      	mov	r3, r5
 8015226:	f7eb fa0f 	bl	8000648 <__aeabi_dmul>
 801522a:	a357      	add	r3, pc, #348	@ (adr r3, 8015388 <__ieee754_pow+0xa60>)
 801522c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015230:	f7eb f854 	bl	80002dc <__adddf3>
 8015234:	4622      	mov	r2, r4
 8015236:	462b      	mov	r3, r5
 8015238:	f7eb fa06 	bl	8000648 <__aeabi_dmul>
 801523c:	4602      	mov	r2, r0
 801523e:	460b      	mov	r3, r1
 8015240:	4640      	mov	r0, r8
 8015242:	4649      	mov	r1, r9
 8015244:	f7eb f848 	bl	80002d8 <__aeabi_dsub>
 8015248:	4604      	mov	r4, r0
 801524a:	460d      	mov	r5, r1
 801524c:	4602      	mov	r2, r0
 801524e:	460b      	mov	r3, r1
 8015250:	4640      	mov	r0, r8
 8015252:	4649      	mov	r1, r9
 8015254:	f7eb f9f8 	bl	8000648 <__aeabi_dmul>
 8015258:	2200      	movs	r2, #0
 801525a:	e9cd 0100 	strd	r0, r1, [sp]
 801525e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8015262:	4620      	mov	r0, r4
 8015264:	4629      	mov	r1, r5
 8015266:	f7eb f837 	bl	80002d8 <__aeabi_dsub>
 801526a:	4602      	mov	r2, r0
 801526c:	460b      	mov	r3, r1
 801526e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015272:	f7eb fb13 	bl	800089c <__aeabi_ddiv>
 8015276:	4632      	mov	r2, r6
 8015278:	4604      	mov	r4, r0
 801527a:	460d      	mov	r5, r1
 801527c:	463b      	mov	r3, r7
 801527e:	4640      	mov	r0, r8
 8015280:	4649      	mov	r1, r9
 8015282:	f7eb f9e1 	bl	8000648 <__aeabi_dmul>
 8015286:	4632      	mov	r2, r6
 8015288:	463b      	mov	r3, r7
 801528a:	f7eb f827 	bl	80002dc <__adddf3>
 801528e:	4602      	mov	r2, r0
 8015290:	460b      	mov	r3, r1
 8015292:	4620      	mov	r0, r4
 8015294:	4629      	mov	r1, r5
 8015296:	f7eb f81f 	bl	80002d8 <__aeabi_dsub>
 801529a:	4642      	mov	r2, r8
 801529c:	464b      	mov	r3, r9
 801529e:	f7eb f81b 	bl	80002d8 <__aeabi_dsub>
 80152a2:	460b      	mov	r3, r1
 80152a4:	4602      	mov	r2, r0
 80152a6:	493b      	ldr	r1, [pc, #236]	@ (8015394 <__ieee754_pow+0xa6c>)
 80152a8:	2000      	movs	r0, #0
 80152aa:	f7eb f815 	bl	80002d8 <__aeabi_dsub>
 80152ae:	ec41 0b10 	vmov	d0, r0, r1
 80152b2:	ee10 3a90 	vmov	r3, s1
 80152b6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80152ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80152be:	da30      	bge.n	8015322 <__ieee754_pow+0x9fa>
 80152c0:	4650      	mov	r0, sl
 80152c2:	f000 f8b9 	bl	8015438 <scalbn>
 80152c6:	ec51 0b10 	vmov	r0, r1, d0
 80152ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80152ce:	f7ff bbd2 	b.w	8014a76 <__ieee754_pow+0x14e>
 80152d2:	4c31      	ldr	r4, [pc, #196]	@ (8015398 <__ieee754_pow+0xa70>)
 80152d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80152d8:	42a3      	cmp	r3, r4
 80152da:	d91a      	bls.n	8015312 <__ieee754_pow+0x9ea>
 80152dc:	4b2f      	ldr	r3, [pc, #188]	@ (801539c <__ieee754_pow+0xa74>)
 80152de:	440b      	add	r3, r1
 80152e0:	4303      	orrs	r3, r0
 80152e2:	d009      	beq.n	80152f8 <__ieee754_pow+0x9d0>
 80152e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152e8:	2200      	movs	r2, #0
 80152ea:	2300      	movs	r3, #0
 80152ec:	f7eb fc1e 	bl	8000b2c <__aeabi_dcmplt>
 80152f0:	3800      	subs	r0, #0
 80152f2:	bf18      	it	ne
 80152f4:	2001      	movne	r0, #1
 80152f6:	e42b      	b.n	8014b50 <__ieee754_pow+0x228>
 80152f8:	4642      	mov	r2, r8
 80152fa:	464b      	mov	r3, r9
 80152fc:	f7ea ffec 	bl	80002d8 <__aeabi_dsub>
 8015300:	4632      	mov	r2, r6
 8015302:	463b      	mov	r3, r7
 8015304:	f7eb fc26 	bl	8000b54 <__aeabi_dcmpge>
 8015308:	2800      	cmp	r0, #0
 801530a:	d1eb      	bne.n	80152e4 <__ieee754_pow+0x9bc>
 801530c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80153ac <__ieee754_pow+0xa84>
 8015310:	e6f7      	b.n	8015102 <__ieee754_pow+0x7da>
 8015312:	469a      	mov	sl, r3
 8015314:	4b22      	ldr	r3, [pc, #136]	@ (80153a0 <__ieee754_pow+0xa78>)
 8015316:	459a      	cmp	sl, r3
 8015318:	f63f aef3 	bhi.w	8015102 <__ieee754_pow+0x7da>
 801531c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8015320:	e715      	b.n	801514e <__ieee754_pow+0x826>
 8015322:	ec51 0b10 	vmov	r0, r1, d0
 8015326:	4619      	mov	r1, r3
 8015328:	e7cf      	b.n	80152ca <__ieee754_pow+0x9a2>
 801532a:	491a      	ldr	r1, [pc, #104]	@ (8015394 <__ieee754_pow+0xa6c>)
 801532c:	2000      	movs	r0, #0
 801532e:	f7ff bb18 	b.w	8014962 <__ieee754_pow+0x3a>
 8015332:	2000      	movs	r0, #0
 8015334:	2100      	movs	r1, #0
 8015336:	f7ff bb14 	b.w	8014962 <__ieee754_pow+0x3a>
 801533a:	4630      	mov	r0, r6
 801533c:	4639      	mov	r1, r7
 801533e:	f7ff bb10 	b.w	8014962 <__ieee754_pow+0x3a>
 8015342:	460c      	mov	r4, r1
 8015344:	f7ff bb5e 	b.w	8014a04 <__ieee754_pow+0xdc>
 8015348:	2400      	movs	r4, #0
 801534a:	f7ff bb49 	b.w	80149e0 <__ieee754_pow+0xb8>
 801534e:	bf00      	nop
 8015350:	00000000 	.word	0x00000000
 8015354:	3fe62e43 	.word	0x3fe62e43
 8015358:	fefa39ef 	.word	0xfefa39ef
 801535c:	3fe62e42 	.word	0x3fe62e42
 8015360:	0ca86c39 	.word	0x0ca86c39
 8015364:	be205c61 	.word	0xbe205c61
 8015368:	72bea4d0 	.word	0x72bea4d0
 801536c:	3e663769 	.word	0x3e663769
 8015370:	c5d26bf1 	.word	0xc5d26bf1
 8015374:	3ebbbd41 	.word	0x3ebbbd41
 8015378:	af25de2c 	.word	0xaf25de2c
 801537c:	3f11566a 	.word	0x3f11566a
 8015380:	16bebd93 	.word	0x16bebd93
 8015384:	3f66c16c 	.word	0x3f66c16c
 8015388:	5555553e 	.word	0x5555553e
 801538c:	3fc55555 	.word	0x3fc55555
 8015390:	fff00000 	.word	0xfff00000
 8015394:	3ff00000 	.word	0x3ff00000
 8015398:	4090cbff 	.word	0x4090cbff
 801539c:	3f6f3400 	.word	0x3f6f3400
 80153a0:	3fe00000 	.word	0x3fe00000
 80153a4:	652b82fe 	.word	0x652b82fe
 80153a8:	3c971547 	.word	0x3c971547
 80153ac:	4090cc00 	.word	0x4090cc00

080153b0 <with_errno>:
 80153b0:	b510      	push	{r4, lr}
 80153b2:	ed2d 8b02 	vpush	{d8}
 80153b6:	eeb0 8a40 	vmov.f32	s16, s0
 80153ba:	eef0 8a60 	vmov.f32	s17, s1
 80153be:	4604      	mov	r4, r0
 80153c0:	f7fd f9fe 	bl	80127c0 <__errno>
 80153c4:	eeb0 0a48 	vmov.f32	s0, s16
 80153c8:	eef0 0a68 	vmov.f32	s1, s17
 80153cc:	ecbd 8b02 	vpop	{d8}
 80153d0:	6004      	str	r4, [r0, #0]
 80153d2:	bd10      	pop	{r4, pc}

080153d4 <xflow>:
 80153d4:	4603      	mov	r3, r0
 80153d6:	b507      	push	{r0, r1, r2, lr}
 80153d8:	ec51 0b10 	vmov	r0, r1, d0
 80153dc:	b183      	cbz	r3, 8015400 <xflow+0x2c>
 80153de:	4602      	mov	r2, r0
 80153e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80153e4:	e9cd 2300 	strd	r2, r3, [sp]
 80153e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80153ec:	f7eb f92c 	bl	8000648 <__aeabi_dmul>
 80153f0:	ec41 0b10 	vmov	d0, r0, r1
 80153f4:	2022      	movs	r0, #34	@ 0x22
 80153f6:	b003      	add	sp, #12
 80153f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80153fc:	f7ff bfd8 	b.w	80153b0 <with_errno>
 8015400:	4602      	mov	r2, r0
 8015402:	460b      	mov	r3, r1
 8015404:	e7ee      	b.n	80153e4 <xflow+0x10>
	...

08015408 <__math_uflow>:
 8015408:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015410 <__math_uflow+0x8>
 801540c:	f7ff bfe2 	b.w	80153d4 <xflow>
 8015410:	00000000 	.word	0x00000000
 8015414:	10000000 	.word	0x10000000

08015418 <__math_oflow>:
 8015418:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015420 <__math_oflow+0x8>
 801541c:	f7ff bfda 	b.w	80153d4 <xflow>
 8015420:	00000000 	.word	0x00000000
 8015424:	70000000 	.word	0x70000000

08015428 <fabs>:
 8015428:	ec51 0b10 	vmov	r0, r1, d0
 801542c:	4602      	mov	r2, r0
 801542e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015432:	ec43 2b10 	vmov	d0, r2, r3
 8015436:	4770      	bx	lr

08015438 <scalbn>:
 8015438:	b570      	push	{r4, r5, r6, lr}
 801543a:	ec55 4b10 	vmov	r4, r5, d0
 801543e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8015442:	4606      	mov	r6, r0
 8015444:	462b      	mov	r3, r5
 8015446:	b991      	cbnz	r1, 801546e <scalbn+0x36>
 8015448:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801544c:	4323      	orrs	r3, r4
 801544e:	d03d      	beq.n	80154cc <scalbn+0x94>
 8015450:	4b35      	ldr	r3, [pc, #212]	@ (8015528 <scalbn+0xf0>)
 8015452:	4620      	mov	r0, r4
 8015454:	4629      	mov	r1, r5
 8015456:	2200      	movs	r2, #0
 8015458:	f7eb f8f6 	bl	8000648 <__aeabi_dmul>
 801545c:	4b33      	ldr	r3, [pc, #204]	@ (801552c <scalbn+0xf4>)
 801545e:	429e      	cmp	r6, r3
 8015460:	4604      	mov	r4, r0
 8015462:	460d      	mov	r5, r1
 8015464:	da0f      	bge.n	8015486 <scalbn+0x4e>
 8015466:	a328      	add	r3, pc, #160	@ (adr r3, 8015508 <scalbn+0xd0>)
 8015468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801546c:	e01e      	b.n	80154ac <scalbn+0x74>
 801546e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8015472:	4291      	cmp	r1, r2
 8015474:	d10b      	bne.n	801548e <scalbn+0x56>
 8015476:	4622      	mov	r2, r4
 8015478:	4620      	mov	r0, r4
 801547a:	4629      	mov	r1, r5
 801547c:	f7ea ff2e 	bl	80002dc <__adddf3>
 8015480:	4604      	mov	r4, r0
 8015482:	460d      	mov	r5, r1
 8015484:	e022      	b.n	80154cc <scalbn+0x94>
 8015486:	460b      	mov	r3, r1
 8015488:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801548c:	3936      	subs	r1, #54	@ 0x36
 801548e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8015492:	4296      	cmp	r6, r2
 8015494:	dd0d      	ble.n	80154b2 <scalbn+0x7a>
 8015496:	2d00      	cmp	r5, #0
 8015498:	a11d      	add	r1, pc, #116	@ (adr r1, 8015510 <scalbn+0xd8>)
 801549a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801549e:	da02      	bge.n	80154a6 <scalbn+0x6e>
 80154a0:	a11d      	add	r1, pc, #116	@ (adr r1, 8015518 <scalbn+0xe0>)
 80154a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154a6:	a31a      	add	r3, pc, #104	@ (adr r3, 8015510 <scalbn+0xd8>)
 80154a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154ac:	f7eb f8cc 	bl	8000648 <__aeabi_dmul>
 80154b0:	e7e6      	b.n	8015480 <scalbn+0x48>
 80154b2:	1872      	adds	r2, r6, r1
 80154b4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80154b8:	428a      	cmp	r2, r1
 80154ba:	dcec      	bgt.n	8015496 <scalbn+0x5e>
 80154bc:	2a00      	cmp	r2, #0
 80154be:	dd08      	ble.n	80154d2 <scalbn+0x9a>
 80154c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80154c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80154c8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80154cc:	ec45 4b10 	vmov	d0, r4, r5
 80154d0:	bd70      	pop	{r4, r5, r6, pc}
 80154d2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80154d6:	da08      	bge.n	80154ea <scalbn+0xb2>
 80154d8:	2d00      	cmp	r5, #0
 80154da:	a10b      	add	r1, pc, #44	@ (adr r1, 8015508 <scalbn+0xd0>)
 80154dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154e0:	dac1      	bge.n	8015466 <scalbn+0x2e>
 80154e2:	a10f      	add	r1, pc, #60	@ (adr r1, 8015520 <scalbn+0xe8>)
 80154e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154e8:	e7bd      	b.n	8015466 <scalbn+0x2e>
 80154ea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80154ee:	3236      	adds	r2, #54	@ 0x36
 80154f0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80154f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80154f8:	4620      	mov	r0, r4
 80154fa:	4b0d      	ldr	r3, [pc, #52]	@ (8015530 <scalbn+0xf8>)
 80154fc:	4629      	mov	r1, r5
 80154fe:	2200      	movs	r2, #0
 8015500:	e7d4      	b.n	80154ac <scalbn+0x74>
 8015502:	bf00      	nop
 8015504:	f3af 8000 	nop.w
 8015508:	c2f8f359 	.word	0xc2f8f359
 801550c:	01a56e1f 	.word	0x01a56e1f
 8015510:	8800759c 	.word	0x8800759c
 8015514:	7e37e43c 	.word	0x7e37e43c
 8015518:	8800759c 	.word	0x8800759c
 801551c:	fe37e43c 	.word	0xfe37e43c
 8015520:	c2f8f359 	.word	0xc2f8f359
 8015524:	81a56e1f 	.word	0x81a56e1f
 8015528:	43500000 	.word	0x43500000
 801552c:	ffff3cb0 	.word	0xffff3cb0
 8015530:	3c900000 	.word	0x3c900000

08015534 <__ieee754_sqrt>:
 8015534:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015538:	4a68      	ldr	r2, [pc, #416]	@ (80156dc <__ieee754_sqrt+0x1a8>)
 801553a:	ec55 4b10 	vmov	r4, r5, d0
 801553e:	43aa      	bics	r2, r5
 8015540:	462b      	mov	r3, r5
 8015542:	4621      	mov	r1, r4
 8015544:	d110      	bne.n	8015568 <__ieee754_sqrt+0x34>
 8015546:	4622      	mov	r2, r4
 8015548:	4620      	mov	r0, r4
 801554a:	4629      	mov	r1, r5
 801554c:	f7eb f87c 	bl	8000648 <__aeabi_dmul>
 8015550:	4602      	mov	r2, r0
 8015552:	460b      	mov	r3, r1
 8015554:	4620      	mov	r0, r4
 8015556:	4629      	mov	r1, r5
 8015558:	f7ea fec0 	bl	80002dc <__adddf3>
 801555c:	4604      	mov	r4, r0
 801555e:	460d      	mov	r5, r1
 8015560:	ec45 4b10 	vmov	d0, r4, r5
 8015564:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015568:	2d00      	cmp	r5, #0
 801556a:	dc0e      	bgt.n	801558a <__ieee754_sqrt+0x56>
 801556c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8015570:	4322      	orrs	r2, r4
 8015572:	d0f5      	beq.n	8015560 <__ieee754_sqrt+0x2c>
 8015574:	b19d      	cbz	r5, 801559e <__ieee754_sqrt+0x6a>
 8015576:	4622      	mov	r2, r4
 8015578:	4620      	mov	r0, r4
 801557a:	4629      	mov	r1, r5
 801557c:	f7ea feac 	bl	80002d8 <__aeabi_dsub>
 8015580:	4602      	mov	r2, r0
 8015582:	460b      	mov	r3, r1
 8015584:	f7eb f98a 	bl	800089c <__aeabi_ddiv>
 8015588:	e7e8      	b.n	801555c <__ieee754_sqrt+0x28>
 801558a:	152a      	asrs	r2, r5, #20
 801558c:	d115      	bne.n	80155ba <__ieee754_sqrt+0x86>
 801558e:	2000      	movs	r0, #0
 8015590:	e009      	b.n	80155a6 <__ieee754_sqrt+0x72>
 8015592:	0acb      	lsrs	r3, r1, #11
 8015594:	3a15      	subs	r2, #21
 8015596:	0549      	lsls	r1, r1, #21
 8015598:	2b00      	cmp	r3, #0
 801559a:	d0fa      	beq.n	8015592 <__ieee754_sqrt+0x5e>
 801559c:	e7f7      	b.n	801558e <__ieee754_sqrt+0x5a>
 801559e:	462a      	mov	r2, r5
 80155a0:	e7fa      	b.n	8015598 <__ieee754_sqrt+0x64>
 80155a2:	005b      	lsls	r3, r3, #1
 80155a4:	3001      	adds	r0, #1
 80155a6:	02dc      	lsls	r4, r3, #11
 80155a8:	d5fb      	bpl.n	80155a2 <__ieee754_sqrt+0x6e>
 80155aa:	1e44      	subs	r4, r0, #1
 80155ac:	1b12      	subs	r2, r2, r4
 80155ae:	f1c0 0420 	rsb	r4, r0, #32
 80155b2:	fa21 f404 	lsr.w	r4, r1, r4
 80155b6:	4323      	orrs	r3, r4
 80155b8:	4081      	lsls	r1, r0
 80155ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80155be:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80155c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80155c6:	07d2      	lsls	r2, r2, #31
 80155c8:	bf5c      	itt	pl
 80155ca:	005b      	lslpl	r3, r3, #1
 80155cc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80155d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80155d4:	bf58      	it	pl
 80155d6:	0049      	lslpl	r1, r1, #1
 80155d8:	2600      	movs	r6, #0
 80155da:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80155de:	106d      	asrs	r5, r5, #1
 80155e0:	0049      	lsls	r1, r1, #1
 80155e2:	2016      	movs	r0, #22
 80155e4:	4632      	mov	r2, r6
 80155e6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80155ea:	1917      	adds	r7, r2, r4
 80155ec:	429f      	cmp	r7, r3
 80155ee:	bfde      	ittt	le
 80155f0:	193a      	addle	r2, r7, r4
 80155f2:	1bdb      	suble	r3, r3, r7
 80155f4:	1936      	addle	r6, r6, r4
 80155f6:	0fcf      	lsrs	r7, r1, #31
 80155f8:	3801      	subs	r0, #1
 80155fa:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80155fe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015602:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015606:	d1f0      	bne.n	80155ea <__ieee754_sqrt+0xb6>
 8015608:	4604      	mov	r4, r0
 801560a:	2720      	movs	r7, #32
 801560c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8015610:	429a      	cmp	r2, r3
 8015612:	eb00 0e0c 	add.w	lr, r0, ip
 8015616:	db02      	blt.n	801561e <__ieee754_sqrt+0xea>
 8015618:	d113      	bne.n	8015642 <__ieee754_sqrt+0x10e>
 801561a:	458e      	cmp	lr, r1
 801561c:	d811      	bhi.n	8015642 <__ieee754_sqrt+0x10e>
 801561e:	f1be 0f00 	cmp.w	lr, #0
 8015622:	eb0e 000c 	add.w	r0, lr, ip
 8015626:	da42      	bge.n	80156ae <__ieee754_sqrt+0x17a>
 8015628:	2800      	cmp	r0, #0
 801562a:	db40      	blt.n	80156ae <__ieee754_sqrt+0x17a>
 801562c:	f102 0801 	add.w	r8, r2, #1
 8015630:	1a9b      	subs	r3, r3, r2
 8015632:	458e      	cmp	lr, r1
 8015634:	bf88      	it	hi
 8015636:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801563a:	eba1 010e 	sub.w	r1, r1, lr
 801563e:	4464      	add	r4, ip
 8015640:	4642      	mov	r2, r8
 8015642:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8015646:	3f01      	subs	r7, #1
 8015648:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801564c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015650:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8015654:	d1dc      	bne.n	8015610 <__ieee754_sqrt+0xdc>
 8015656:	4319      	orrs	r1, r3
 8015658:	d01b      	beq.n	8015692 <__ieee754_sqrt+0x15e>
 801565a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80156e0 <__ieee754_sqrt+0x1ac>
 801565e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80156e4 <__ieee754_sqrt+0x1b0>
 8015662:	e9da 0100 	ldrd	r0, r1, [sl]
 8015666:	e9db 2300 	ldrd	r2, r3, [fp]
 801566a:	f7ea fe35 	bl	80002d8 <__aeabi_dsub>
 801566e:	e9da 8900 	ldrd	r8, r9, [sl]
 8015672:	4602      	mov	r2, r0
 8015674:	460b      	mov	r3, r1
 8015676:	4640      	mov	r0, r8
 8015678:	4649      	mov	r1, r9
 801567a:	f7eb fa61 	bl	8000b40 <__aeabi_dcmple>
 801567e:	b140      	cbz	r0, 8015692 <__ieee754_sqrt+0x15e>
 8015680:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8015684:	e9da 0100 	ldrd	r0, r1, [sl]
 8015688:	e9db 2300 	ldrd	r2, r3, [fp]
 801568c:	d111      	bne.n	80156b2 <__ieee754_sqrt+0x17e>
 801568e:	3601      	adds	r6, #1
 8015690:	463c      	mov	r4, r7
 8015692:	1072      	asrs	r2, r6, #1
 8015694:	0863      	lsrs	r3, r4, #1
 8015696:	07f1      	lsls	r1, r6, #31
 8015698:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801569c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80156a0:	bf48      	it	mi
 80156a2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80156a6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80156aa:	4618      	mov	r0, r3
 80156ac:	e756      	b.n	801555c <__ieee754_sqrt+0x28>
 80156ae:	4690      	mov	r8, r2
 80156b0:	e7be      	b.n	8015630 <__ieee754_sqrt+0xfc>
 80156b2:	f7ea fe13 	bl	80002dc <__adddf3>
 80156b6:	e9da 8900 	ldrd	r8, r9, [sl]
 80156ba:	4602      	mov	r2, r0
 80156bc:	460b      	mov	r3, r1
 80156be:	4640      	mov	r0, r8
 80156c0:	4649      	mov	r1, r9
 80156c2:	f7eb fa33 	bl	8000b2c <__aeabi_dcmplt>
 80156c6:	b120      	cbz	r0, 80156d2 <__ieee754_sqrt+0x19e>
 80156c8:	1ca0      	adds	r0, r4, #2
 80156ca:	bf08      	it	eq
 80156cc:	3601      	addeq	r6, #1
 80156ce:	3402      	adds	r4, #2
 80156d0:	e7df      	b.n	8015692 <__ieee754_sqrt+0x15e>
 80156d2:	1c63      	adds	r3, r4, #1
 80156d4:	f023 0401 	bic.w	r4, r3, #1
 80156d8:	e7db      	b.n	8015692 <__ieee754_sqrt+0x15e>
 80156da:	bf00      	nop
 80156dc:	7ff00000 	.word	0x7ff00000
 80156e0:	200002b0 	.word	0x200002b0
 80156e4:	200002a8 	.word	0x200002a8

080156e8 <_init>:
 80156e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156ea:	bf00      	nop
 80156ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156ee:	bc08      	pop	{r3}
 80156f0:	469e      	mov	lr, r3
 80156f2:	4770      	bx	lr

080156f4 <_fini>:
 80156f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156f6:	bf00      	nop
 80156f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156fa:	bc08      	pop	{r3}
 80156fc:	469e      	mov	lr, r3
 80156fe:	4770      	bx	lr
