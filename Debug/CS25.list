
CS25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013a10  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  08013bf0  08013bf0  00014bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801418c  0801418c  000162a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801418c  0801418c  0001518c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014194  08014194  000162a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014194  08014194  00015194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014198  08014198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002a8  20000000  0801419c  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001448  200002a8  08014444  000162a8  2**2
                  ALLOC
 10 ._user_heap_stack 00001500  200016f0  08014444  000166f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000162a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000318fd  00000000  00000000  000162d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000067a9  00000000  00000000  00047bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a78  00000000  00000000  0004e380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000020c6  00000000  00000000  00050df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009cff  00000000  00000000  00052ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000346ef  00000000  00000000  0005cbbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff87c  00000000  00000000  000912ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00190b28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c620  00000000  00000000  00190b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0019d18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002a8 	.word	0x200002a8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013bd8 	.word	0x08013bd8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002ac 	.word	0x200002ac
 800021c:	08013bd8 	.word	0x08013bd8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <init_mission_data>:
volatile uint8_t simulation_enable = 0;

Mission_Data global_mission_data = {0};

void init_mission_data(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	memset(&global_mission_data, 0, sizeof(global_mission_data));
 8000f8c:	226c      	movs	r2, #108	@ 0x6c
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4829      	ldr	r0, [pc, #164]	@ (8001038 <init_mission_data+0xb0>)
 8000f92:	f010 fdcd 	bl	8011b30 <memset>

	global_mission_data.TEAM_ID = 3174;
 8000f96:	4b28      	ldr	r3, [pc, #160]	@ (8001038 <init_mission_data+0xb0>)
 8000f98:	f640 4266 	movw	r2, #3174	@ 0xc66
 8000f9c:	801a      	strh	r2, [r3, #0]
	strcpy(global_mission_data.MISSION_TIME, "XX:XX:XX"); // TEMP
 8000f9e:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <init_mission_data+0xb0>)
 8000fa0:	4926      	ldr	r1, [pc, #152]	@ (800103c <init_mission_data+0xb4>)
 8000fa2:	1c9a      	adds	r2, r3, #2
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	cb03      	ldmia	r3!, {r0, r1}
 8000fa8:	6010      	str	r0, [r2, #0]
 8000faa:	6051      	str	r1, [r2, #4]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	7213      	strb	r3, [r2, #8]
	global_mission_data.PACKET_COUNT = 0;				  // TEMP
 8000fb0:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <init_mission_data+0xb0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
	global_mission_data.MODE = 'F';
 8000fb6:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <init_mission_data+0xb0>)
 8000fb8:	2246      	movs	r2, #70	@ 0x46
 8000fba:	741a      	strb	r2, [r3, #16]
	strcpy(global_mission_data.STATE, "LAUNCH_PAD");
 8000fbc:	4a20      	ldr	r2, [pc, #128]	@ (8001040 <init_mission_data+0xb8>)
 8000fbe:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <init_mission_data+0xbc>)
 8000fc0:	cb03      	ldmia	r3!, {r0, r1}
 8000fc2:	6010      	str	r0, [r2, #0]
 8000fc4:	6051      	str	r1, [r2, #4]
 8000fc6:	8819      	ldrh	r1, [r3, #0]
 8000fc8:	789b      	ldrb	r3, [r3, #2]
 8000fca:	8111      	strh	r1, [r2, #8]
 8000fcc:	7293      	strb	r3, [r2, #10]
	global_mission_data.ALTITUDE = 0.0;				  // temp
 8000fce:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <init_mission_data+0xb0>)
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
	global_mission_data.MAG_R = 0.0;				  // TEMP
 8000fd6:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <init_mission_data+0xb0>)
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	63da      	str	r2, [r3, #60]	@ 0x3c
	global_mission_data.MAG_P = 0.0;				  // TEMP
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <init_mission_data+0xb0>)
 8000fe0:	f04f 0200 	mov.w	r2, #0
 8000fe4:	641a      	str	r2, [r3, #64]	@ 0x40
	global_mission_data.MAG_Y = 0.0;				  // TEMP
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <init_mission_data+0xb0>)
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	645a      	str	r2, [r3, #68]	@ 0x44
	global_mission_data.AUTO_GYRO_ROTATION_RATE = 0;  // TEMP
 8000fee:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <init_mission_data+0xb0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	strcpy(global_mission_data.GPS_TIME, "XX:XX:XX"); // TEMP
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <init_mission_data+0xb0>)
 8000ff8:	4910      	ldr	r1, [pc, #64]	@ (800103c <init_mission_data+0xb4>)
 8000ffa:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 8000ffe:	460b      	mov	r3, r1
 8001000:	cb03      	ldmia	r3!, {r0, r1}
 8001002:	6010      	str	r0, [r2, #0]
 8001004:	6051      	str	r1, [r2, #4]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	7213      	strb	r3, [r2, #8]
	global_mission_data.GPS_ALTITUDE = 0.0;			  // TEMP
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <init_mission_data+0xb0>)
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	655a      	str	r2, [r3, #84]	@ 0x54
	global_mission_data.GPS_LATITUDE = 0.0;			  // TEMP
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <init_mission_data+0xb0>)
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	659a      	str	r2, [r3, #88]	@ 0x58
	global_mission_data.GPS_LONGITUDE = 0.0;		  // TEMP
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <init_mission_data+0xb0>)
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	65da      	str	r2, [r3, #92]	@ 0x5c
	global_mission_data.GPS_SATS = 0;				  // TEMP
 8001022:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <init_mission_data+0xb0>)
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
	strcpy(global_mission_data.CMD_ECHO, "CMD");	  // TEMP
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <init_mission_data+0xc0>)
 800102c:	4a07      	ldr	r2, [pc, #28]	@ (800104c <init_mission_data+0xc4>)
 800102e:	6810      	ldr	r0, [r2, #0]
 8001030:	6018      	str	r0, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200002c4 	.word	0x200002c4
 800103c:	08013bf0 	.word	0x08013bf0
 8001040:	200002d5 	.word	0x200002d5
 8001044:	08013bfc 	.word	0x08013bfc
 8001048:	20000325 	.word	0x20000325
 800104c:	08013c08 	.word	0x08013c08

08001050 <_write>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int fd, char *ptr, int len)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  // ignore fd, just send to UART3
  HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	b29a      	uxth	r2, r3
 8001060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	4804      	ldr	r0, [pc, #16]	@ (8001078 <_write+0x28>)
 8001068:	f00a fba3 	bl	800b7b2 <HAL_UART_Transmit>
  return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000074c 	.word	0x2000074c
 800107c:	00000000 	.word	0x00000000

08001080 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001084:	b0e9      	sub	sp, #420	@ 0x1a4
 8001086:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001088:	f002 ff4c 	bl	8003f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108c:	f000 fa16 	bl	80014bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001090:	f000 ffd6 	bl	8002040 <MX_GPIO_Init>
  MX_DMA_Init();
 8001094:	f000 ffaa 	bl	8001fec <MX_DMA_Init>
  MX_ADC1_Init();
 8001098:	f000 faa2 	bl	80015e0 <MX_ADC1_Init>
  MX_I2C3_Init();
 800109c:	f000 fb40 	bl	8001720 <MX_I2C3_Init>
  MX_IRTIM_Init();
 80010a0:	f000 fb7e 	bl	80017a0 <MX_IRTIM_Init>
  MX_RTC_Init();
 80010a4:	f000 fb9a 	bl	80017dc <MX_RTC_Init>
  MX_SPI2_Init();
 80010a8:	f000 fbcc 	bl	8001844 <MX_SPI2_Init>
  MX_TIM1_Init();
 80010ac:	f000 fc08 	bl	80018c0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80010b0:	f000 fc80 	bl	80019b4 <MX_TIM3_Init>
  MX_TIM8_Init();
 80010b4:	f000 fd16 	bl	8001ae4 <MX_TIM8_Init>
  MX_TIM15_Init();
 80010b8:	f000 fd8e 	bl	8001bd8 <MX_TIM15_Init>
  MX_TIM16_Init();
 80010bc:	f000 fe12 	bl	8001ce4 <MX_TIM16_Init>
  MX_TIM17_Init();
 80010c0:	f000 fe86 	bl	8001dd0 <MX_TIM17_Init>
  MX_UART5_Init();
 80010c4:	f000 fefa 	bl	8001ebc <MX_UART5_Init>
  MX_RNG_Init();
 80010c8:	f000 fb72 	bl	80017b0 <MX_RNG_Init>
  MX_USB_Device_Init();
 80010cc:	f00f fa3e 	bl	801054c <MX_USB_Device_Init>
  MX_USART3_UART_Init();
 80010d0:	f000 ff40 	bl	8001f54 <MX_USART3_UART_Init>
  MX_CORDIC_Init();
 80010d4:	f000 fafc 	bl	80016d0 <MX_CORDIC_Init>
  MX_FMAC_Init();
 80010d8:	f000 fb0e 	bl	80016f8 <MX_FMAC_Init>
  /* USER CODE BEGIN 2 */
  // Feedback LED
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2180      	movs	r1, #128	@ 0x80
 80010e0:	486f      	ldr	r0, [pc, #444]	@ (80012a0 <main+0x220>)
 80010e2:	f004 fe2b 	bl	8005d3c <HAL_GPIO_WritePin>

  // Enable GPS and XBEE
  HAL_GPIO_WritePin(XBEE_RST_GPIO_Port, XBEE_RST_Pin, GPIO_PIN_SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f0:	f004 fe24 	bl	8005d3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2120      	movs	r1, #32
 80010f8:	4869      	ldr	r0, [pc, #420]	@ (80012a0 <main+0x220>)
 80010fa:	f004 fe1f 	bl	8005d3c <HAL_GPIO_WritePin>
  HAL_Delay(3000); // wait for the Xbee to get brought back up again
 80010fe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001102:	f002 ff45 	bl	8003f90 <HAL_Delay>

  // Disable ALL chip selects
  HAL_GPIO_WritePin(IMU_nCS_GPIO_Port, IMU_nCS_Pin, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2104      	movs	r1, #4
 800110a:	4865      	ldr	r0, [pc, #404]	@ (80012a0 <main+0x220>)
 800110c:	f004 fe16 	bl	8005d3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BMP_nCS_GPIO_Port, BMP_nCS_Pin, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001116:	4862      	ldr	r0, [pc, #392]	@ (80012a0 <main+0x220>)
 8001118:	f004 fe10 	bl	8005d3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MAG_nCS_GPIO_Port, MAG_nCS_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001122:	485f      	ldr	r0, [pc, #380]	@ (80012a0 <main+0x220>)
 8001124:	f004 fe0a 	bl	8005d3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MAGEXT_nCS_GPIO_Port, MAGEXT_nCS_Pin, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800112e:	485c      	ldr	r0, [pc, #368]	@ (80012a0 <main+0x220>)
 8001130:	f004 fe04 	bl	8005d3c <HAL_GPIO_WritePin>

  // Initialize IMU
  ICM42688P_init(&hspi2, IMU_nCS_GPIO_Port, IMU_nCS_Pin);
 8001134:	2204      	movs	r2, #4
 8001136:	495a      	ldr	r1, [pc, #360]	@ (80012a0 <main+0x220>)
 8001138:	485a      	ldr	r0, [pc, #360]	@ (80012a4 <main+0x224>)
 800113a:	f002 fa27 	bl	800358c <ICM42688P_init>

  // Initialize MS5607
  MS5607_Init(&hspi2, BMP_nCS_GPIO_Port, BMP_nCS_Pin);
 800113e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001142:	4957      	ldr	r1, [pc, #348]	@ (80012a0 <main+0x220>)
 8001144:	4857      	ldr	r0, [pc, #348]	@ (80012a4 <main+0x224>)
 8001146:	f002 fab1 	bl	80036ac <MS5607_Init>

  // Initialize BMM150
  struct bmm150_dev bmm150 = BMM150_spi_init(&hspi2, MAG_nCS_GPIO_Port, MAG_nCS_Pin);
 800114a:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800114e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001152:	4a53      	ldr	r2, [pc, #332]	@ (80012a0 <main+0x220>)
 8001154:	4953      	ldr	r1, [pc, #332]	@ (80012a4 <main+0x224>)
 8001156:	f001 ffdd 	bl	8003114 <BMM150_spi_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  int strlen = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

  MS5607Readings bmp_data;
  ICM42688P_AccelData imu_data;
  BMM150_mag_data mag_data;

  uint8_t test = ICM42688P_read_reg(0x75);
 8001166:	2075      	movs	r0, #117	@ 0x75
 8001168:	f002 f9e6 	bl	8003538 <ICM42688P_read_reg>
 800116c:	4603      	mov	r3, r0
 800116e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

  init_mission_data();
 8001172:	f7ff ff09 	bl	8000f88 <init_mission_data>
  // HAL_Delay(10);
  // printf("BMM is... 0x%X", bmm150.chip_id); // Not working :(

  while (1)
  {
    bmp_data = MS5607ReadValues();
 8001176:	f002 fe79 	bl	8003e6c <MS5607ReadValues>
 800117a:	eeb0 6a40 	vmov.f32	s12, s0
 800117e:	eef0 6a60 	vmov.f32	s13, s1
 8001182:	eeb0 7a41 	vmov.f32	s14, s2
 8001186:	eef0 7a61 	vmov.f32	s15, s3
 800118a:	ed87 6b40 	vstr	d6, [r7, #256]	@ 0x100
 800118e:	ed87 7b42 	vstr	d7, [r7, #264]	@ 0x108
    imu_data = ICM42688P_read_data();
 8001192:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001196:	4618      	mov	r0, r3
 8001198:	f002 fa22 	bl	80035e0 <ICM42688P_read_data>

    global_mission_data.TEMPERATURE = bmp_data.temperature_C;
 800119c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	f7ff fd28 	bl	8000bf8 <__aeabi_d2f>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a3f      	ldr	r2, [pc, #252]	@ (80012a8 <main+0x228>)
 80011ac:	6253      	str	r3, [r2, #36]	@ 0x24
    global_mission_data.PRESSURE = bmp_data.pressure_kPa;
 80011ae:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	f7ff fd1f 	bl	8000bf8 <__aeabi_d2f>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a3a      	ldr	r2, [pc, #232]	@ (80012a8 <main+0x228>)
 80011be:	6293      	str	r3, [r2, #40]	@ 0x28
    global_mission_data.VOLTAGE = (7.62 + (0.0002 * (float)(uint8_t)rand()));
 80011c0:	f010 fbb6 	bl	8011930 <rand>
 80011c4:	4603      	mov	r3, r0
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	ee07 3a90 	vmov	s15, r3
 80011cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011d0:	ee17 0a90 	vmov	r0, s15
 80011d4:	f7ff f9e0 	bl	8000598 <__aeabi_f2d>
 80011d8:	a32d      	add	r3, pc, #180	@ (adr r3, 8001290 <main+0x210>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff fa33 	bl	8000648 <__aeabi_dmul>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	a32b      	add	r3, pc, #172	@ (adr r3, 8001298 <main+0x218>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff f874 	bl	80002dc <__adddf3>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f7ff fcfc 	bl	8000bf8 <__aeabi_d2f>
 8001200:	4603      	mov	r3, r0
 8001202:	4a29      	ldr	r2, [pc, #164]	@ (80012a8 <main+0x228>)
 8001204:	62d3      	str	r3, [r2, #44]	@ 0x2c
    global_mission_data.GYRO_R = -imu_data.gyro_z * 2000;
 8001206:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 800120a:	461a      	mov	r2, r3
 800120c:	0152      	lsls	r2, r2, #5
 800120e:	1ad2      	subs	r2, r2, r3
 8001210:	0192      	lsls	r2, r2, #6
 8001212:	441a      	add	r2, r3
 8001214:	0052      	lsls	r2, r2, #1
 8001216:	4413      	add	r3, r2
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	b29b      	uxth	r3, r3
 800121c:	b21a      	sxth	r2, r3
 800121e:	4b22      	ldr	r3, [pc, #136]	@ (80012a8 <main+0x228>)
 8001220:	861a      	strh	r2, [r3, #48]	@ 0x30
    global_mission_data.GYRO_P = imu_data.gyro_x * 2000;
 8001222:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	@ 0xfa
 8001226:	461a      	mov	r2, r3
 8001228:	0152      	lsls	r2, r2, #5
 800122a:	1ad2      	subs	r2, r2, r3
 800122c:	0092      	lsls	r2, r2, #2
 800122e:	4413      	add	r3, r2
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	b29b      	uxth	r3, r3
 8001234:	b21a      	sxth	r2, r3
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <main+0x228>)
 8001238:	865a      	strh	r2, [r3, #50]	@ 0x32
    global_mission_data.GYRO_Y = imu_data.gyro_y * 2000;
 800123a:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 800123e:	461a      	mov	r2, r3
 8001240:	0152      	lsls	r2, r2, #5
 8001242:	1ad2      	subs	r2, r2, r3
 8001244:	0092      	lsls	r2, r2, #2
 8001246:	4413      	add	r3, r2
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	b29b      	uxth	r3, r3
 800124c:	b21a      	sxth	r2, r3
 800124e:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <main+0x228>)
 8001250:	869a      	strh	r2, [r3, #52]	@ 0x34

    // needs to be updated
    global_mission_data.ACCEL_R = imu_data.accel_z;
 8001252:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 8001256:	b21a      	sxth	r2, r3
 8001258:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <main+0x228>)
 800125a:	86da      	strh	r2, [r3, #54]	@ 0x36
    global_mission_data.ACCEL_P = imu_data.accel_x;
 800125c:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 8001260:	b21a      	sxth	r2, r3
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <main+0x228>)
 8001264:	871a      	strh	r2, [r3, #56]	@ 0x38
    global_mission_data.ACCEL_Y = imu_data.accel_y;
 8001266:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 800126a:	b21a      	sxth	r2, r3
 800126c:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <main+0x228>)
 800126e:	875a      	strh	r2, [r3, #58]	@ 0x3a

    uint8_t mission_data_length = sizeof(global_mission_data);
 8001270:	236c      	movs	r3, #108	@ 0x6c
 8001272:	f887 3146 	strb.w	r3, [r7, #326]	@ 0x146

    // checksum
    uint8_t bytesum = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
    unsigned char *mission_data = (unsigned char *)&global_mission_data;
 800127c:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <main+0x228>)
 800127e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    for (unsigned int i = 0; i < sizeof(global_mission_data); i++)
 8001282:	2300      	movs	r3, #0
 8001284:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001288:	e020      	b.n	80012cc <main+0x24c>
 800128a:	bf00      	nop
 800128c:	f3af 8000 	nop.w
 8001290:	eb1c432d 	.word	0xeb1c432d
 8001294:	3f2a36e2 	.word	0x3f2a36e2
 8001298:	47ae147b 	.word	0x47ae147b
 800129c:	401e7ae1 	.word	0x401e7ae1
 80012a0:	48000400 	.word	0x48000400
 80012a4:	2000048c 	.word	0x2000048c
 80012a8:	200002c4 	.word	0x200002c4
    {
      bytesum += mission_data[i];
 80012ac:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80012b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80012b4:	4413      	add	r3, r2
 80012b6:	781a      	ldrb	r2, [r3, #0]
 80012b8:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 80012bc:	4413      	add	r3, r2
 80012be:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
    for (unsigned int i = 0; i < sizeof(global_mission_data); i++)
 80012c2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80012c6:	3301      	adds	r3, #1
 80012c8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80012cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80012d0:	2b6b      	cmp	r3, #107	@ 0x6b
 80012d2:	d9eb      	bls.n	80012ac <main+0x22c>
    }
    uint8_t checksum = 0xFF - bytesum;
 80012d4:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 80012d8:	43db      	mvns	r3, r3
 80012da:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    // model packet
    char telemetry_string[200];
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%.1f,%d,%d,%d",
                     global_mission_data.TEAM_ID,      // team id
 80012de:	4b6e      	ldr	r3, [pc, #440]	@ (8001498 <main+0x418>)
 80012e0:	f9b3 3000 	ldrsh.w	r3, [r3]
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	4b6c      	ldr	r3, [pc, #432]	@ (8001498 <main+0x418>)
 80012e8:	68de      	ldr	r6, [r3, #12]
                     global_mission_data.MISSION_TIME, // temp; mission time
                     global_mission_data.PACKET_COUNT, // temp; packet count
                     global_mission_data.MODE,         // mode
 80012ea:	4b6b      	ldr	r3, [pc, #428]	@ (8001498 <main+0x418>)
 80012ec:	7c1b      	ldrb	r3, [r3, #16]
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 80012ee:	61bb      	str	r3, [r7, #24]
                     global_mission_data.STATE,        // state
                     global_mission_data.ALTITUDE,     // temp; altitude
 80012f0:	4b69      	ldr	r3, [pc, #420]	@ (8001498 <main+0x418>)
 80012f2:	6a1b      	ldr	r3, [r3, #32]
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f94f 	bl	8000598 <__aeabi_f2d>
 80012fa:	4604      	mov	r4, r0
 80012fc:	460d      	mov	r5, r1
                     global_mission_data.TEMPERATURE,  // temperature
 80012fe:	4b66      	ldr	r3, [pc, #408]	@ (8001498 <main+0x418>)
 8001300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f948 	bl	8000598 <__aeabi_f2d>
 8001308:	4680      	mov	r8, r0
 800130a:	4689      	mov	r9, r1
                     global_mission_data.PRESSURE,     // pressure
 800130c:	4b62      	ldr	r3, [pc, #392]	@ (8001498 <main+0x418>)
 800130e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f941 	bl	8000598 <__aeabi_f2d>
 8001316:	4682      	mov	sl, r0
 8001318:	468b      	mov	fp, r1
                     global_mission_data.VOLTAGE,
 800131a:	4b5f      	ldr	r3, [pc, #380]	@ (8001498 <main+0x418>)
 800131c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f93a 	bl	8000598 <__aeabi_f2d>
 8001324:	460a      	mov	r2, r1
 8001326:	4601      	mov	r1, r0
                     global_mission_data.GYRO_R, // gyro_r
 8001328:	4b5b      	ldr	r3, [pc, #364]	@ (8001498 <main+0x418>)
 800132a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 800132e:	617b      	str	r3, [r7, #20]
                     global_mission_data.GYRO_P, // gyro_p
 8001330:	4b59      	ldr	r3, [pc, #356]	@ (8001498 <main+0x418>)
 8001332:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 8001336:	60bb      	str	r3, [r7, #8]
                     global_mission_data.GYRO_Y
 8001338:	4b57      	ldr	r3, [pc, #348]	@ (8001498 <main+0x418>)
 800133a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 800133e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001342:	930e      	str	r3, [sp, #56]	@ 0x38
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	930d      	str	r3, [sp, #52]	@ 0x34
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	930c      	str	r3, [sp, #48]	@ 0x30
 800134c:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8001350:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001354:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001358:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800135c:	4b4f      	ldr	r3, [pc, #316]	@ (800149c <main+0x41c>)
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	69b9      	ldr	r1, [r7, #24]
 8001362:	9101      	str	r1, [sp, #4]
 8001364:	9600      	str	r6, [sp, #0]
 8001366:	4b4e      	ldr	r3, [pc, #312]	@ (80014a0 <main+0x420>)
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	494e      	ldr	r1, [pc, #312]	@ (80014a4 <main+0x424>)
 800136c:	f010 fac0 	bl	80118f0 <siprintf>
 8001370:	f8c7 0148 	str.w	r0, [r7, #328]	@ 0x148
                     // gyro_y
    );
    // strlen = sizeof(telemetry_string);
    HAL_UART_Transmit(&huart3, telemetry_string, strlen, HAL_MAX_DELAY);
 8001374:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001378:	b29a      	uxth	r2, r3
 800137a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800137e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001382:	4849      	ldr	r0, [pc, #292]	@ (80014a8 <main+0x428>)
 8001384:	f00a fa15 	bl	800b7b2 <HAL_UART_Transmit>
    memset(telemetry_string, 0, sizeof(telemetry_string)); // flush array
 8001388:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800138c:	22c8      	movs	r2, #200	@ 0xc8
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f010 fbcd 	bl	8011b30 <memset>
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
                     global_mission_data.ACCEL_R, // accel_r
 8001396:	4b40      	ldr	r3, [pc, #256]	@ (8001498 <main+0x418>)
 8001398:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 800139c:	61fb      	str	r3, [r7, #28]
                     global_mission_data.ACCEL_P, // accel_p
 800139e:	4b3e      	ldr	r3, [pc, #248]	@ (8001498 <main+0x418>)
 80013a0:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80013a4:	61bb      	str	r3, [r7, #24]
                     global_mission_data.ACCEL_Y,
 80013a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001498 <main+0x418>)
 80013a8:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	@ 0x3a
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80013ac:	617b      	str	r3, [r7, #20]
                     global_mission_data.MAG_R,                   // temp; mag_r
 80013ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001498 <main+0x418>)
 80013b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f8f0 	bl	8000598 <__aeabi_f2d>
 80013b8:	4605      	mov	r5, r0
 80013ba:	460e      	mov	r6, r1
                     global_mission_data.MAG_P,                   // temp; mag_p
 80013bc:	4b36      	ldr	r3, [pc, #216]	@ (8001498 <main+0x418>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f8e9 	bl	8000598 <__aeabi_f2d>
 80013c6:	e9c7 0102 	strd	r0, r1, [r7, #8]
                     global_mission_data.MAG_Y,                   // temp; mag_y
 80013ca:	4b33      	ldr	r3, [pc, #204]	@ (8001498 <main+0x418>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8e2 	bl	8000598 <__aeabi_f2d>
 80013d4:	e9c7 0100 	strd	r0, r1, [r7]
                     global_mission_data.AUTO_GYRO_ROTATION_RATE, // temp; auto-gyro rotation rate
 80013d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001498 <main+0x418>)
 80013da:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80013de:	613b      	str	r3, [r7, #16]
                     global_mission_data.GPS_TIME,                // temp; gps time
                     global_mission_data.GPS_ALTITUDE,            // temp; gps altitude
 80013e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001498 <main+0x418>)
 80013e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f8d7 	bl	8000598 <__aeabi_f2d>
 80013ea:	4682      	mov	sl, r0
 80013ec:	468b      	mov	fp, r1
                     global_mission_data.GPS_LATITUDE,            // temp; gps latitude
 80013ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001498 <main+0x418>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f8d0 	bl	8000598 <__aeabi_f2d>
 80013f8:	4680      	mov	r8, r0
 80013fa:	4689      	mov	r9, r1
                     global_mission_data.GPS_LONGITUDE,           // temp; gps longitude
 80013fc:	4b26      	ldr	r3, [pc, #152]	@ (8001498 <main+0x418>)
 80013fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f8c9 	bl	8000598 <__aeabi_f2d>
                     global_mission_data.GPS_SATS,                // temp; # of gps satellites
 8001406:	4b24      	ldr	r3, [pc, #144]	@ (8001498 <main+0x418>)
 8001408:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 800140c:	461a      	mov	r2, r3
 800140e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001412:	4b26      	ldr	r3, [pc, #152]	@ (80014ac <main+0x42c>)
 8001414:	9311      	str	r3, [sp, #68]	@ 0x44
 8001416:	9210      	str	r2, [sp, #64]	@ 0x40
 8001418:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800141c:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 8001420:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8001424:	4b22      	ldr	r3, [pc, #136]	@ (80014b0 <main+0x430>)
 8001426:	9309      	str	r3, [sp, #36]	@ 0x24
 8001428:	6939      	ldr	r1, [r7, #16]
 800142a:	9108      	str	r1, [sp, #32]
 800142c:	ed97 7b00 	vldr	d7, [r7]
 8001430:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001434:	ed97 7b02 	vldr	d7, [r7, #8]
 8001438:	ed8d 7b04 	vstr	d7, [sp, #16]
 800143c:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8001440:	6979      	ldr	r1, [r7, #20]
 8001442:	9100      	str	r1, [sp, #0]
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	491a      	ldr	r1, [pc, #104]	@ (80014b4 <main+0x434>)
 800144a:	4620      	mov	r0, r4
 800144c:	f010 fa50 	bl	80118f0 <siprintf>
 8001450:	f8c7 0148 	str.w	r0, [r7, #328]	@ 0x148
                     global_mission_data.CMD_ECHO);
    HAL_UART_Transmit(&huart3, telemetry_string, strlen, HAL_MAX_DELAY);
 8001454:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001458:	b29a      	uxth	r2, r3
 800145a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800145e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001462:	4811      	ldr	r0, [pc, #68]	@ (80014a8 <main+0x428>)
 8001464:	f00a f9a5 	bl	800b7b2 <HAL_UART_Transmit>

    global_mission_data.PACKET_COUNT = global_mission_data.PACKET_COUNT + 1;
 8001468:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <main+0x418>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	3301      	adds	r3, #1
 800146e:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <main+0x418>)
 8001470:	60d3      	str	r3, [r2, #12]

    HAL_Delay(1000);
 8001472:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001476:	f002 fd8b 	bl	8003f90 <HAL_Delay>

    HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	2180      	movs	r1, #128	@ 0x80
 800147e:	480e      	ldr	r0, [pc, #56]	@ (80014b8 <main+0x438>)
 8001480:	f004 fc5c 	bl	8005d3c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001484:	2064      	movs	r0, #100	@ 0x64
 8001486:	f002 fd83 	bl	8003f90 <HAL_Delay>
    HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_SET);
 800148a:	2201      	movs	r2, #1
 800148c:	2180      	movs	r1, #128	@ 0x80
 800148e:	480a      	ldr	r0, [pc, #40]	@ (80014b8 <main+0x438>)
 8001490:	f004 fc54 	bl	8005d3c <HAL_GPIO_WritePin>
  {
 8001494:	e66f      	b.n	8001176 <main+0xf6>
 8001496:	bf00      	nop
 8001498:	200002c4 	.word	0x200002c4
 800149c:	200002d5 	.word	0x200002d5
 80014a0:	200002c6 	.word	0x200002c6
 80014a4:	08013c0c 	.word	0x08013c0c
 80014a8:	2000074c 	.word	0x2000074c
 80014ac:	20000325 	.word	0x20000325
 80014b0:	2000030e 	.word	0x2000030e
 80014b4:	08013c3c 	.word	0x08013c3c
 80014b8:	48000400 	.word	0x48000400

080014bc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b09a      	sub	sp, #104	@ 0x68
 80014c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014c6:	2238      	movs	r2, #56	@ 0x38
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f010 fb30 	bl	8011b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  RCC_CRSInitTypeDef pInit = {0};
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]
 80014ee:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014f4:	f006 fb9a 	bl	8007c2c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 80014f8:	f006 fb08 	bl	8007b0c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014fc:	4b37      	ldr	r3, [pc, #220]	@ (80015dc <SystemClock_Config+0x120>)
 80014fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001502:	4a36      	ldr	r2, [pc, #216]	@ (80015dc <SystemClock_Config+0x120>)
 8001504:	f023 0318 	bic.w	r3, r3, #24
 8001508:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 800150c:	232e      	movs	r3, #46	@ 0x2e
 800150e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001510:	2301      	movs	r3, #1
 8001512:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001514:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001518:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800151a:	2340      	movs	r3, #64	@ 0x40
 800151c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800151e:	2301      	movs	r3, #1
 8001520:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001522:	2301      	movs	r3, #1
 8001524:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001526:	2302      	movs	r3, #2
 8001528:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800152a:	2302      	movs	r3, #2
 800152c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800152e:	2301      	movs	r3, #1
 8001530:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001532:	2308      	movs	r3, #8
 8001534:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001536:	2302      	movs	r3, #2
 8001538:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800153a:	2302      	movs	r3, #2
 800153c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800153e:	2302      	movs	r3, #2
 8001540:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001542:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001546:	4618      	mov	r0, r3
 8001548:	f006 fc24 	bl	8007d94 <HAL_RCC_OscConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001552:	f000 fe79 	bl	8002248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001556:	230f      	movs	r3, #15
 8001558:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155a:	2303      	movs	r3, #3
 800155c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	2102      	movs	r1, #2
 8001570:	4618      	mov	r0, r3
 8001572:	f006 ff21 	bl	80083b8 <HAL_RCC_ClockConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800157c:	f000 fe64 	bl	8002248 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001580:	2200      	movs	r2, #0
 8001582:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 8001586:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800158a:	f007 f851 	bl	8008630 <HAL_RCC_MCOConfig>
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSE);
 800158e:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8001592:	f007 fbe1 	bl	8008d58 <HAL_RCCEx_EnableLSCO>

  /** Enable the SYSCFG APB clock
   */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001596:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <SystemClock_Config+0x120>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159a:	4a10      	ldr	r2, [pc, #64]	@ (80015dc <SystemClock_Config+0x120>)
 800159c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a2:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <SystemClock_Config+0x120>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]

  /** Configures CRS
   */
  pInit.Prescaler = RCC_CRS_SYNC_DIV1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
  pInit.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80015b2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80015b6:	60bb      	str	r3, [r7, #8]
  pInit.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  pInit.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 32768);
 80015bc:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 80015c0:	613b      	str	r3, [r7, #16]
  pInit.ErrorLimitValue = 34;
 80015c2:	2322      	movs	r3, #34	@ 0x22
 80015c4:	617b      	str	r3, [r7, #20]
  pInit.HSI48CalibrationValue = 32;
 80015c6:	2320      	movs	r3, #32
 80015c8:	61bb      	str	r3, [r7, #24]

  HAL_RCCEx_CRSConfig(&pInit);
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	4618      	mov	r0, r3
 80015ce:	f007 fc2d 	bl	8008e2c <HAL_RCCEx_CRSConfig>
}
 80015d2:	bf00      	nop
 80015d4:	3768      	adds	r7, #104	@ 0x68
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000

080015e0 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08c      	sub	sp, #48	@ 0x30
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80015e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	2220      	movs	r2, #32
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f010 fa99 	bl	8011b30 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 80015fe:	4b32      	ldr	r3, [pc, #200]	@ (80016c8 <MX_ADC1_Init+0xe8>)
 8001600:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001606:	4b30      	ldr	r3, [pc, #192]	@ (80016c8 <MX_ADC1_Init+0xe8>)
 8001608:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800160c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800160e:	4b2e      	ldr	r3, [pc, #184]	@ (80016c8 <MX_ADC1_Init+0xe8>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001614:	4b2c      	ldr	r3, [pc, #176]	@ (80016c8 <MX_ADC1_Init+0xe8>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800161a:	4b2b      	ldr	r3, [pc, #172]	@ (80016c8 <MX_ADC1_Init+0xe8>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001620:	4b29      	ldr	r3, [pc, #164]	@ (80016c8 <MX_ADC1_Init+0xe8>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001626:	4b28      	ldr	r3, [pc, #160]	@ (80016c8 <MX_ADC1_Init+0xe8>)
 8001628:	2204      	movs	r2, #4
 800162a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800162c:	4b26      	ldr	r3, [pc, #152]	@ (80016c8 <MX_ADC1_Init+0xe8>)
 800162e:	2200      	movs	r2, #0
 8001630:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001632:	4b25      	ldr	r3, [pc, #148]	@ (80016c8 <MX_ADC1_Init+0xe8>)
 8001634:	2200      	movs	r2, #0
 8001636:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001638:	4b23      	ldr	r3, [pc, #140]	@ (80016c8 <MX_ADC1_Init+0xe8>)
 800163a:	2201      	movs	r2, #1
 800163c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800163e:	4b22      	ldr	r3, [pc, #136]	@ (80016c8 <MX_ADC1_Init+0xe8>)
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001646:	4b20      	ldr	r3, [pc, #128]	@ (80016c8 <MX_ADC1_Init+0xe8>)
 8001648:	2200      	movs	r2, #0
 800164a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800164c:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <MX_ADC1_Init+0xe8>)
 800164e:	2200      	movs	r2, #0
 8001650:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001652:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <MX_ADC1_Init+0xe8>)
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800165a:	4b1b      	ldr	r3, [pc, #108]	@ (80016c8 <MX_ADC1_Init+0xe8>)
 800165c:	2200      	movs	r2, #0
 800165e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001660:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <MX_ADC1_Init+0xe8>)
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001668:	4817      	ldr	r0, [pc, #92]	@ (80016c8 <MX_ADC1_Init+0xe8>)
 800166a:	f002 fead 	bl	80043c8 <HAL_ADC_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001674:	f000 fde8 	bl	8002248 <Error_Handler>
  }

  /** Configure the ADC multi-mode
   */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800167c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001680:	4619      	mov	r1, r3
 8001682:	4811      	ldr	r0, [pc, #68]	@ (80016c8 <MX_ADC1_Init+0xe8>)
 8001684:	f003 fca0 	bl	8004fc8 <HAL_ADCEx_MultiModeConfigChannel>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800168e:	f000 fddb 	bl	8002248 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_9;
 8001692:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <MX_ADC1_Init+0xec>)
 8001694:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001696:	2306      	movs	r3, #6
 8001698:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800169e:	237f      	movs	r3, #127	@ 0x7f
 80016a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016a2:	2304      	movs	r3, #4
 80016a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	4619      	mov	r1, r3
 80016ae:	4806      	ldr	r0, [pc, #24]	@ (80016c8 <MX_ADC1_Init+0xe8>)
 80016b0:	f003 f838 	bl	8004724 <HAL_ADC_ConfigChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80016ba:	f000 fdc5 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80016be:	bf00      	nop
 80016c0:	3730      	adds	r7, #48	@ 0x30
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000330 	.word	0x20000330
 80016cc:	25b00200 	.word	0x25b00200

080016d0 <MX_CORDIC_Init>:
 * @brief CORDIC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CORDIC_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <MX_CORDIC_Init+0x20>)
 80016d6:	4a07      	ldr	r2, [pc, #28]	@ (80016f4 <MX_CORDIC_Init+0x24>)
 80016d8:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80016da:	4805      	ldr	r0, [pc, #20]	@ (80016f0 <MX_CORDIC_Init+0x20>)
 80016dc:	f003 fd5c 	bl	8005198 <HAL_CORDIC_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80016e6:	f000 fdaf 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000039c 	.word	0x2000039c
 80016f4:	40020c00 	.word	0x40020c00

080016f8 <MX_FMAC_Init>:
 * @brief FMAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_FMAC_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <MX_FMAC_Init+0x20>)
 80016fe:	4a07      	ldr	r2, [pc, #28]	@ (800171c <MX_FMAC_Init+0x24>)
 8001700:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8001702:	4805      	ldr	r0, [pc, #20]	@ (8001718 <MX_FMAC_Init+0x20>)
 8001704:	f004 f8d4 	bl	80058b0 <HAL_FMAC_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 800170e:	f000 fd9b 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200003c4 	.word	0x200003c4
 800171c:	40021400 	.word	0x40021400

08001720 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001724:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <MX_I2C3_Init+0x74>)
 8001726:	4a1c      	ldr	r2, [pc, #112]	@ (8001798 <MX_I2C3_Init+0x78>)
 8001728:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C12166;
 800172a:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <MX_I2C3_Init+0x74>)
 800172c:	4a1b      	ldr	r2, [pc, #108]	@ (800179c <MX_I2C3_Init+0x7c>)
 800172e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001730:	4b18      	ldr	r3, [pc, #96]	@ (8001794 <MX_I2C3_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001736:	4b17      	ldr	r3, [pc, #92]	@ (8001794 <MX_I2C3_Init+0x74>)
 8001738:	2201      	movs	r2, #1
 800173a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800173c:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <MX_I2C3_Init+0x74>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001742:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <MX_I2C3_Init+0x74>)
 8001744:	2200      	movs	r2, #0
 8001746:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <MX_I2C3_Init+0x74>)
 800174a:	2200      	movs	r2, #0
 800174c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800174e:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <MX_I2C3_Init+0x74>)
 8001750:	2200      	movs	r2, #0
 8001752:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001754:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <MX_I2C3_Init+0x74>)
 8001756:	2200      	movs	r2, #0
 8001758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800175a:	480e      	ldr	r0, [pc, #56]	@ (8001794 <MX_I2C3_Init+0x74>)
 800175c:	f004 fb06 	bl	8005d6c <HAL_I2C_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001766:	f000 fd6f 	bl	8002248 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800176a:	2100      	movs	r1, #0
 800176c:	4809      	ldr	r0, [pc, #36]	@ (8001794 <MX_I2C3_Init+0x74>)
 800176e:	f004 fb98 	bl	8005ea2 <HAL_I2CEx_ConfigAnalogFilter>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001778:	f000 fd66 	bl	8002248 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800177c:	2100      	movs	r1, #0
 800177e:	4805      	ldr	r0, [pc, #20]	@ (8001794 <MX_I2C3_Init+0x74>)
 8001780:	f004 fbda 	bl	8005f38 <HAL_I2CEx_ConfigDigitalFilter>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800178a:	f000 fd5d 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200003fc 	.word	0x200003fc
 8001798:	40007800 	.word	0x40007800
 800179c:	00c12166 	.word	0x00c12166

080017a0 <MX_IRTIM_Init>:
 * @brief IRTIM Initialization Function
 * @param None
 * @retval None
 */
static void MX_IRTIM_Init(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END IRTIM_Init 1 */
  /* USER CODE BEGIN IRTIM_Init 2 */

  /* USER CODE END IRTIM_Init 2 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <MX_RNG_Init>:
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80017b4:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <MX_RNG_Init+0x24>)
 80017b6:	4a08      	ldr	r2, [pc, #32]	@ (80017d8 <MX_RNG_Init+0x28>)
 80017b8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <MX_RNG_Init+0x24>)
 80017bc:	2200      	movs	r2, #0
 80017be:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80017c0:	4804      	ldr	r0, [pc, #16]	@ (80017d4 <MX_RNG_Init+0x24>)
 80017c2:	f007 fb75 	bl	8008eb0 <HAL_RNG_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80017cc:	f000 fd3c 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000450 	.word	0x20000450
 80017d8:	50060800 	.word	0x50060800

080017dc <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 80017e0:	4b16      	ldr	r3, [pc, #88]	@ (800183c <MX_RTC_Init+0x60>)
 80017e2:	4a17      	ldr	r2, [pc, #92]	@ (8001840 <MX_RTC_Init+0x64>)
 80017e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017e6:	4b15      	ldr	r3, [pc, #84]	@ (800183c <MX_RTC_Init+0x60>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80017ec:	4b13      	ldr	r3, [pc, #76]	@ (800183c <MX_RTC_Init+0x60>)
 80017ee:	227f      	movs	r2, #127	@ 0x7f
 80017f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80017f2:	4b12      	ldr	r3, [pc, #72]	@ (800183c <MX_RTC_Init+0x60>)
 80017f4:	22ff      	movs	r2, #255	@ 0xff
 80017f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017f8:	4b10      	ldr	r3, [pc, #64]	@ (800183c <MX_RTC_Init+0x60>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017fe:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <MX_RTC_Init+0x60>)
 8001800:	2200      	movs	r2, #0
 8001802:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001804:	4b0d      	ldr	r3, [pc, #52]	@ (800183c <MX_RTC_Init+0x60>)
 8001806:	2200      	movs	r2, #0
 8001808:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800180a:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <MX_RTC_Init+0x60>)
 800180c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001810:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001812:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <MX_RTC_Init+0x60>)
 8001814:	2200      	movs	r2, #0
 8001816:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001818:	4808      	ldr	r0, [pc, #32]	@ (800183c <MX_RTC_Init+0x60>)
 800181a:	f007 fb7e 	bl	8008f1a <HAL_RTC_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8001824:	f000 fd10 	bl	8002248 <Error_Handler>
  }

  /** Enable the reference Clock input
   */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8001828:	4804      	ldr	r0, [pc, #16]	@ (800183c <MX_RTC_Init+0x60>)
 800182a:	f007 fc92 	bl	8009152 <HAL_RTCEx_SetRefClock>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001834:	f000 fd08 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000464 	.word	0x20000464
 8001840:	40002800 	.word	0x40002800

08001844 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001848:	4b1b      	ldr	r3, [pc, #108]	@ (80018b8 <MX_SPI2_Init+0x74>)
 800184a:	4a1c      	ldr	r2, [pc, #112]	@ (80018bc <MX_SPI2_Init+0x78>)
 800184c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800184e:	4b1a      	ldr	r3, [pc, #104]	@ (80018b8 <MX_SPI2_Init+0x74>)
 8001850:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001854:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001856:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <MX_SPI2_Init+0x74>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800185c:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <MX_SPI2_Init+0x74>)
 800185e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001862:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001864:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <MX_SPI2_Init+0x74>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800186a:	4b13      	ldr	r3, [pc, #76]	@ (80018b8 <MX_SPI2_Init+0x74>)
 800186c:	2200      	movs	r2, #0
 800186e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <MX_SPI2_Init+0x74>)
 8001872:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001876:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001878:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <MX_SPI2_Init+0x74>)
 800187a:	2210      	movs	r2, #16
 800187c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800187e:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <MX_SPI2_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001884:	4b0c      	ldr	r3, [pc, #48]	@ (80018b8 <MX_SPI2_Init+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800188a:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <MX_SPI2_Init+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001890:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <MX_SPI2_Init+0x74>)
 8001892:	2207      	movs	r2, #7
 8001894:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001896:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <MX_SPI2_Init+0x74>)
 8001898:	2200      	movs	r2, #0
 800189a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <MX_SPI2_Init+0x74>)
 800189e:	2208      	movs	r2, #8
 80018a0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018a2:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <MX_SPI2_Init+0x74>)
 80018a4:	f007 fc99 	bl	80091da <HAL_SPI_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80018ae:	f000 fccb 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2000048c 	.word	0x2000048c
 80018bc:	40003800 	.word	0x40003800

080018c0 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b092      	sub	sp, #72	@ 0x48
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ca:	2224      	movs	r2, #36	@ 0x24
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f010 f92e 	bl	8011b30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d4:	f107 0318 	add.w	r3, r7, #24
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
 80018ec:	611a      	str	r2, [r3, #16]
 80018ee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018f0:	4b2e      	ldr	r3, [pc, #184]	@ (80019ac <MX_TIM1_Init+0xec>)
 80018f2:	4a2f      	ldr	r2, [pc, #188]	@ (80019b0 <MX_TIM1_Init+0xf0>)
 80018f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018f6:	4b2d      	ldr	r3, [pc, #180]	@ (80019ac <MX_TIM1_Init+0xec>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fc:	4b2b      	ldr	r3, [pc, #172]	@ (80019ac <MX_TIM1_Init+0xec>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001902:	4b2a      	ldr	r3, [pc, #168]	@ (80019ac <MX_TIM1_Init+0xec>)
 8001904:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001908:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190a:	4b28      	ldr	r3, [pc, #160]	@ (80019ac <MX_TIM1_Init+0xec>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001910:	4b26      	ldr	r3, [pc, #152]	@ (80019ac <MX_TIM1_Init+0xec>)
 8001912:	2200      	movs	r2, #0
 8001914:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001916:	4b25      	ldr	r3, [pc, #148]	@ (80019ac <MX_TIM1_Init+0xec>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800191c:	2301      	movs	r3, #1
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001924:	2301      	movs	r3, #1
 8001926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001930:	2300      	movs	r3, #0
 8001932:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001934:	2301      	movs	r3, #1
 8001936:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001938:	2300      	movs	r3, #0
 800193a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001940:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001944:	4619      	mov	r1, r3
 8001946:	4819      	ldr	r0, [pc, #100]	@ (80019ac <MX_TIM1_Init+0xec>)
 8001948:	f008 fc9b 	bl	800a282 <HAL_TIM_Encoder_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001952:	f000 fc79 	bl	8002248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001962:	f107 0318 	add.w	r3, r7, #24
 8001966:	4619      	mov	r1, r3
 8001968:	4810      	ldr	r0, [pc, #64]	@ (80019ac <MX_TIM1_Init+0xec>)
 800196a:	f009 fd2f 	bl	800b3cc <HAL_TIMEx_MasterConfigSynchronization>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001974:	f000 fc68 	bl	8002248 <Error_Handler>
  }
  sEncoderIndexConfig.Polarity = TIM_ENCODERINDEX_POLARITY_NONINVERTED;
 8001978:	2300      	movs	r3, #0
 800197a:	603b      	str	r3, [r7, #0]
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 800197c:	2300      	movs	r3, #0
 800197e:	607b      	str	r3, [r7, #4]
  sEncoderIndexConfig.Filter = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	733b      	strb	r3, [r7, #12]
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_00;
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_ConfigEncoderIndex(&htim1, &sEncoderIndexConfig) != HAL_OK)
 8001990:	463b      	mov	r3, r7
 8001992:	4619      	mov	r1, r3
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <MX_TIM1_Init+0xec>)
 8001996:	f009 fe3b 	bl	800b610 <HAL_TIMEx_ConfigEncoderIndex>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80019a0:	f000 fc52 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
}
 80019a4:	bf00      	nop
 80019a6:	3748      	adds	r7, #72	@ 0x48
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200004f0 	.word	0x200004f0
 80019b0:	40012c00 	.word	0x40012c00

080019b4 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08e      	sub	sp, #56	@ 0x38
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c8:	f107 031c 	add.w	r3, r7, #28
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d4:	463b      	mov	r3, r7
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	611a      	str	r2, [r3, #16]
 80019e2:	615a      	str	r2, [r3, #20]
 80019e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e6:	4b3d      	ldr	r3, [pc, #244]	@ (8001adc <MX_TIM3_Init+0x128>)
 80019e8:	4a3d      	ldr	r2, [pc, #244]	@ (8001ae0 <MX_TIM3_Init+0x12c>)
 80019ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019ec:	4b3b      	ldr	r3, [pc, #236]	@ (8001adc <MX_TIM3_Init+0x128>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f2:	4b3a      	ldr	r3, [pc, #232]	@ (8001adc <MX_TIM3_Init+0x128>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019f8:	4b38      	ldr	r3, [pc, #224]	@ (8001adc <MX_TIM3_Init+0x128>)
 80019fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a00:	4b36      	ldr	r3, [pc, #216]	@ (8001adc <MX_TIM3_Init+0x128>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a06:	4b35      	ldr	r3, [pc, #212]	@ (8001adc <MX_TIM3_Init+0x128>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a0c:	4833      	ldr	r0, [pc, #204]	@ (8001adc <MX_TIM3_Init+0x128>)
 8001a0e:	f008 fb19 	bl	800a044 <HAL_TIM_Base_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001a18:	f000 fc16 	bl	8002248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a20:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a26:	4619      	mov	r1, r3
 8001a28:	482c      	ldr	r0, [pc, #176]	@ (8001adc <MX_TIM3_Init+0x128>)
 8001a2a:	f008 ff33 	bl	800a894 <HAL_TIM_ConfigClockSource>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001a34:	f000 fc08 	bl	8002248 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a38:	4828      	ldr	r0, [pc, #160]	@ (8001adc <MX_TIM3_Init+0x128>)
 8001a3a:	f008 fbcb 	bl	800a1d4 <HAL_TIM_PWM_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001a44:	f000 fc00 	bl	8002248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4619      	mov	r1, r3
 8001a56:	4821      	ldr	r0, [pc, #132]	@ (8001adc <MX_TIM3_Init+0x128>)
 8001a58:	f009 fcb8 	bl	800b3cc <HAL_TIMEx_MasterConfigSynchronization>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001a62:	f000 fbf1 	bl	8002248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a66:	2360      	movs	r3, #96	@ 0x60
 8001a68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a76:	463b      	mov	r3, r7
 8001a78:	2200      	movs	r2, #0
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4817      	ldr	r0, [pc, #92]	@ (8001adc <MX_TIM3_Init+0x128>)
 8001a7e:	f008 fdf5 	bl	800a66c <HAL_TIM_PWM_ConfigChannel>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001a88:	f000 fbde 	bl	8002248 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a8c:	463b      	mov	r3, r7
 8001a8e:	2204      	movs	r2, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4812      	ldr	r0, [pc, #72]	@ (8001adc <MX_TIM3_Init+0x128>)
 8001a94:	f008 fdea 	bl	800a66c <HAL_TIM_PWM_ConfigChannel>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001a9e:	f000 fbd3 	bl	8002248 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	2208      	movs	r2, #8
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480c      	ldr	r0, [pc, #48]	@ (8001adc <MX_TIM3_Init+0x128>)
 8001aaa:	f008 fddf 	bl	800a66c <HAL_TIM_PWM_ConfigChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001ab4:	f000 fbc8 	bl	8002248 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ab8:	463b      	mov	r3, r7
 8001aba:	220c      	movs	r2, #12
 8001abc:	4619      	mov	r1, r3
 8001abe:	4807      	ldr	r0, [pc, #28]	@ (8001adc <MX_TIM3_Init+0x128>)
 8001ac0:	f008 fdd4 	bl	800a66c <HAL_TIM_PWM_ConfigChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001aca:	f000 fbbd 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ace:	4803      	ldr	r0, [pc, #12]	@ (8001adc <MX_TIM3_Init+0x128>)
 8001ad0:	f000 feb8 	bl	8002844 <HAL_TIM_MspPostInit>
}
 8001ad4:	bf00      	nop
 8001ad6:	3738      	adds	r7, #56	@ 0x38
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	2000053c 	.word	0x2000053c
 8001ae0:	40000400 	.word	0x40000400

08001ae4 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b092      	sub	sp, #72	@ 0x48
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aee:	2224      	movs	r2, #36	@ 0x24
 8001af0:	2100      	movs	r1, #0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f010 f81c 	bl	8011b30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af8:	f107 0318 	add.w	r3, r7, #24
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 8001b04:	463b      	mov	r3, r7
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	611a      	str	r2, [r3, #16]
 8001b12:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b14:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd0 <MX_TIM8_Init+0xec>)
 8001b16:	4a2f      	ldr	r2, [pc, #188]	@ (8001bd4 <MX_TIM8_Init+0xf0>)
 8001b18:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd0 <MX_TIM8_Init+0xec>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b20:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd0 <MX_TIM8_Init+0xec>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b26:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd0 <MX_TIM8_Init+0xec>)
 8001b28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b2c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2e:	4b28      	ldr	r3, [pc, #160]	@ (8001bd0 <MX_TIM8_Init+0xec>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b34:	4b26      	ldr	r3, [pc, #152]	@ (8001bd0 <MX_TIM8_Init+0xec>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3a:	4b25      	ldr	r3, [pc, #148]	@ (8001bd0 <MX_TIM8_Init+0xec>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b40:	2301      	movs	r3, #1
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b54:	2300      	movs	r3, #0
 8001b56:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4819      	ldr	r0, [pc, #100]	@ (8001bd0 <MX_TIM8_Init+0xec>)
 8001b6c:	f008 fb89 	bl	800a282 <HAL_TIM_Encoder_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001b76:	f000 fb67 	bl	8002248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b86:	f107 0318 	add.w	r3, r7, #24
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4810      	ldr	r0, [pc, #64]	@ (8001bd0 <MX_TIM8_Init+0xec>)
 8001b8e:	f009 fc1d 	bl	800b3cc <HAL_TIMEx_MasterConfigSynchronization>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8001b98:	f000 fb56 	bl	8002248 <Error_Handler>
  }
  sEncoderIndexConfig.Polarity = TIM_ENCODERINDEX_POLARITY_NONINVERTED;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	603b      	str	r3, [r7, #0]
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
  sEncoderIndexConfig.Filter = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	733b      	strb	r3, [r7, #12]
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_00;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_ConfigEncoderIndex(&htim8, &sEncoderIndexConfig) != HAL_OK)
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4805      	ldr	r0, [pc, #20]	@ (8001bd0 <MX_TIM8_Init+0xec>)
 8001bba:	f009 fd29 	bl	800b610 <HAL_TIMEx_ConfigEncoderIndex>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM8_Init+0xe4>
  {
    Error_Handler();
 8001bc4:	f000 fb40 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
}
 8001bc8:	bf00      	nop
 8001bca:	3748      	adds	r7, #72	@ 0x48
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000588 	.word	0x20000588
 8001bd4:	40013400 	.word	0x40013400

08001bd8 <MX_TIM15_Init>:
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b098      	sub	sp, #96	@ 0x60
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bde:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
 8001bf8:	611a      	str	r2, [r3, #16]
 8001bfa:	615a      	str	r2, [r3, #20]
 8001bfc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	2234      	movs	r2, #52	@ 0x34
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f00f ff93 	bl	8011b30 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001c0a:	4b34      	ldr	r3, [pc, #208]	@ (8001cdc <MX_TIM15_Init+0x104>)
 8001c0c:	4a34      	ldr	r2, [pc, #208]	@ (8001ce0 <MX_TIM15_Init+0x108>)
 8001c0e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001c10:	4b32      	ldr	r3, [pc, #200]	@ (8001cdc <MX_TIM15_Init+0x104>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c16:	4b31      	ldr	r3, [pc, #196]	@ (8001cdc <MX_TIM15_Init+0x104>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001c1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cdc <MX_TIM15_Init+0x104>)
 8001c1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c22:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c24:	4b2d      	ldr	r3, [pc, #180]	@ (8001cdc <MX_TIM15_Init+0x104>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001cdc <MX_TIM15_Init+0x104>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c30:	4b2a      	ldr	r3, [pc, #168]	@ (8001cdc <MX_TIM15_Init+0x104>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001c36:	4829      	ldr	r0, [pc, #164]	@ (8001cdc <MX_TIM15_Init+0x104>)
 8001c38:	f008 facc 	bl	800a1d4 <HAL_TIM_PWM_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001c42:	f000 fb01 	bl	8002248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001c4e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c52:	4619      	mov	r1, r3
 8001c54:	4821      	ldr	r0, [pc, #132]	@ (8001cdc <MX_TIM15_Init+0x104>)
 8001c56:	f009 fbb9 	bl	800b3cc <HAL_TIMEx_MasterConfigSynchronization>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001c60:	f000 faf2 	bl	8002248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c64:	2360      	movs	r3, #96	@ 0x60
 8001c66:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c70:	2300      	movs	r3, #0
 8001c72:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c80:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c84:	2204      	movs	r2, #4
 8001c86:	4619      	mov	r1, r3
 8001c88:	4814      	ldr	r0, [pc, #80]	@ (8001cdc <MX_TIM15_Init+0x104>)
 8001c8a:	f008 fcef 	bl	800a66c <HAL_TIM_PWM_ConfigChannel>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001c94:	f000 fad8 	bl	8002248 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cb0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4807      	ldr	r0, [pc, #28]	@ (8001cdc <MX_TIM15_Init+0x104>)
 8001cc0:	f009 fc12 	bl	800b4e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001cca:	f000 fabd 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001cce:	4803      	ldr	r0, [pc, #12]	@ (8001cdc <MX_TIM15_Init+0x104>)
 8001cd0:	f000 fdb8 	bl	8002844 <HAL_TIM_MspPostInit>
}
 8001cd4:	bf00      	nop
 8001cd6:	3760      	adds	r7, #96	@ 0x60
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	200005d4 	.word	0x200005d4
 8001ce0:	40014000 	.word	0x40014000

08001ce4 <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b094      	sub	sp, #80	@ 0x50
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
 8001cf8:	611a      	str	r2, [r3, #16]
 8001cfa:	615a      	str	r2, [r3, #20]
 8001cfc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cfe:	463b      	mov	r3, r7
 8001d00:	2234      	movs	r2, #52	@ 0x34
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f00f ff13 	bl	8011b30 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc8 <MX_TIM16_Init+0xe4>)
 8001d0c:	4a2f      	ldr	r2, [pc, #188]	@ (8001dcc <MX_TIM16_Init+0xe8>)
 8001d0e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001d10:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc8 <MX_TIM16_Init+0xe4>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d16:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc8 <MX_TIM16_Init+0xe4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc8 <MX_TIM16_Init+0xe4>)
 8001d1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d22:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d24:	4b28      	ldr	r3, [pc, #160]	@ (8001dc8 <MX_TIM16_Init+0xe4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d2a:	4b27      	ldr	r3, [pc, #156]	@ (8001dc8 <MX_TIM16_Init+0xe4>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d30:	4b25      	ldr	r3, [pc, #148]	@ (8001dc8 <MX_TIM16_Init+0xe4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001d36:	4824      	ldr	r0, [pc, #144]	@ (8001dc8 <MX_TIM16_Init+0xe4>)
 8001d38:	f008 f984 	bl	800a044 <HAL_TIM_Base_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001d42:	f000 fa81 	bl	8002248 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001d46:	4820      	ldr	r0, [pc, #128]	@ (8001dc8 <MX_TIM16_Init+0xe4>)
 8001d48:	f008 fa44 	bl	800a1d4 <HAL_TIM_PWM_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001d52:	f000 fa79 	bl	8002248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d56:	2360      	movs	r3, #96	@ 0x60
 8001d58:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d62:	2300      	movs	r3, #0
 8001d64:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d72:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d76:	2200      	movs	r2, #0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4813      	ldr	r0, [pc, #76]	@ (8001dc8 <MX_TIM16_Init+0xe4>)
 8001d7c:	f008 fc76 	bl	800a66c <HAL_TIM_PWM_ConfigChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001d86:	f000 fa5f 	bl	8002248 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001da2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001dac:	463b      	mov	r3, r7
 8001dae:	4619      	mov	r1, r3
 8001db0:	4805      	ldr	r0, [pc, #20]	@ (8001dc8 <MX_TIM16_Init+0xe4>)
 8001db2:	f009 fb99 	bl	800b4e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001dbc:	f000 fa44 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 8001dc0:	bf00      	nop
 8001dc2:	3750      	adds	r7, #80	@ 0x50
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000620 	.word	0x20000620
 8001dcc:	40014400 	.word	0x40014400

08001dd0 <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b094      	sub	sp, #80	@ 0x50
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
 8001de4:	611a      	str	r2, [r3, #16]
 8001de6:	615a      	str	r2, [r3, #20]
 8001de8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dea:	463b      	mov	r3, r7
 8001dec:	2234      	movs	r2, #52	@ 0x34
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f00f fe9d 	bl	8011b30 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001df6:	4b2f      	ldr	r3, [pc, #188]	@ (8001eb4 <MX_TIM17_Init+0xe4>)
 8001df8:	4a2f      	ldr	r2, [pc, #188]	@ (8001eb8 <MX_TIM17_Init+0xe8>)
 8001dfa:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb4 <MX_TIM17_Init+0xe4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e02:	4b2c      	ldr	r3, [pc, #176]	@ (8001eb4 <MX_TIM17_Init+0xe4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001e08:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb4 <MX_TIM17_Init+0xe4>)
 8001e0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e0e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e10:	4b28      	ldr	r3, [pc, #160]	@ (8001eb4 <MX_TIM17_Init+0xe4>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001e16:	4b27      	ldr	r3, [pc, #156]	@ (8001eb4 <MX_TIM17_Init+0xe4>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1c:	4b25      	ldr	r3, [pc, #148]	@ (8001eb4 <MX_TIM17_Init+0xe4>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001e22:	4824      	ldr	r0, [pc, #144]	@ (8001eb4 <MX_TIM17_Init+0xe4>)
 8001e24:	f008 f90e 	bl	800a044 <HAL_TIM_Base_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001e2e:	f000 fa0b 	bl	8002248 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001e32:	4820      	ldr	r0, [pc, #128]	@ (8001eb4 <MX_TIM17_Init+0xe4>)
 8001e34:	f008 f9ce 	bl	800a1d4 <HAL_TIM_PWM_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001e3e:	f000 fa03 	bl	8002248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e42:	2360      	movs	r3, #96	@ 0x60
 8001e44:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e5e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e62:	2200      	movs	r2, #0
 8001e64:	4619      	mov	r1, r3
 8001e66:	4813      	ldr	r0, [pc, #76]	@ (8001eb4 <MX_TIM17_Init+0xe4>)
 8001e68:	f008 fc00 	bl	800a66c <HAL_TIM_PWM_ConfigChannel>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001e72:	f000 f9e9 	bl	8002248 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001e98:	463b      	mov	r3, r7
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4805      	ldr	r0, [pc, #20]	@ (8001eb4 <MX_TIM17_Init+0xe4>)
 8001e9e:	f009 fb23 	bl	800b4e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001ea8:	f000 f9ce 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
}
 8001eac:	bf00      	nop
 8001eae:	3750      	adds	r7, #80	@ 0x50
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	2000066c 	.word	0x2000066c
 8001eb8:	40014800 	.word	0x40014800

08001ebc <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001ec0:	4b22      	ldr	r3, [pc, #136]	@ (8001f4c <MX_UART5_Init+0x90>)
 8001ec2:	4a23      	ldr	r2, [pc, #140]	@ (8001f50 <MX_UART5_Init+0x94>)
 8001ec4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001ec6:	4b21      	ldr	r3, [pc, #132]	@ (8001f4c <MX_UART5_Init+0x90>)
 8001ec8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ecc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001ece:	4b1f      	ldr	r3, [pc, #124]	@ (8001f4c <MX_UART5_Init+0x90>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f4c <MX_UART5_Init+0x90>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001eda:	4b1c      	ldr	r3, [pc, #112]	@ (8001f4c <MX_UART5_Init+0x90>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <MX_UART5_Init+0x90>)
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee6:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <MX_UART5_Init+0x90>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eec:	4b17      	ldr	r3, [pc, #92]	@ (8001f4c <MX_UART5_Init+0x90>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ef2:	4b16      	ldr	r3, [pc, #88]	@ (8001f4c <MX_UART5_Init+0x90>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ef8:	4b14      	ldr	r3, [pc, #80]	@ (8001f4c <MX_UART5_Init+0x90>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001efe:	4b13      	ldr	r3, [pc, #76]	@ (8001f4c <MX_UART5_Init+0x90>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f04:	4811      	ldr	r0, [pc, #68]	@ (8001f4c <MX_UART5_Init+0x90>)
 8001f06:	f009 fc04 	bl	800b712 <HAL_UART_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001f10:	f000 f99a 	bl	8002248 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f14:	2100      	movs	r1, #0
 8001f16:	480d      	ldr	r0, [pc, #52]	@ (8001f4c <MX_UART5_Init+0x90>)
 8001f18:	f00a fdeb 	bl	800caf2 <HAL_UARTEx_SetTxFifoThreshold>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001f22:	f000 f991 	bl	8002248 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f26:	2100      	movs	r1, #0
 8001f28:	4808      	ldr	r0, [pc, #32]	@ (8001f4c <MX_UART5_Init+0x90>)
 8001f2a:	f00a fe20 	bl	800cb6e <HAL_UARTEx_SetRxFifoThreshold>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001f34:	f000 f988 	bl	8002248 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001f38:	4804      	ldr	r0, [pc, #16]	@ (8001f4c <MX_UART5_Init+0x90>)
 8001f3a:	f00a fda1 	bl	800ca80 <HAL_UARTEx_DisableFifoMode>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001f44:	f000 f980 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	200006b8 	.word	0x200006b8
 8001f50:	40005000 	.word	0x40005000

08001f54 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f58:	4b22      	ldr	r3, [pc, #136]	@ (8001fe4 <MX_USART3_UART_Init+0x90>)
 8001f5a:	4a23      	ldr	r2, [pc, #140]	@ (8001fe8 <MX_USART3_UART_Init+0x94>)
 8001f5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8001f5e:	4b21      	ldr	r3, [pc, #132]	@ (8001fe4 <MX_USART3_UART_Init+0x90>)
 8001f60:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001f64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f66:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe4 <MX_USART3_UART_Init+0x90>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe4 <MX_USART3_UART_Init+0x90>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f72:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe4 <MX_USART3_UART_Init+0x90>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f78:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe4 <MX_USART3_UART_Init+0x90>)
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7e:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <MX_USART3_UART_Init+0x90>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f84:	4b17      	ldr	r3, [pc, #92]	@ (8001fe4 <MX_USART3_UART_Init+0x90>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f8a:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <MX_USART3_UART_Init+0x90>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f90:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <MX_USART3_UART_Init+0x90>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f96:	4b13      	ldr	r3, [pc, #76]	@ (8001fe4 <MX_USART3_UART_Init+0x90>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f9c:	4811      	ldr	r0, [pc, #68]	@ (8001fe4 <MX_USART3_UART_Init+0x90>)
 8001f9e:	f009 fbb8 	bl	800b712 <HAL_UART_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001fa8:	f000 f94e 	bl	8002248 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fac:	2100      	movs	r1, #0
 8001fae:	480d      	ldr	r0, [pc, #52]	@ (8001fe4 <MX_USART3_UART_Init+0x90>)
 8001fb0:	f00a fd9f 	bl	800caf2 <HAL_UARTEx_SetTxFifoThreshold>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001fba:	f000 f945 	bl	8002248 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4808      	ldr	r0, [pc, #32]	@ (8001fe4 <MX_USART3_UART_Init+0x90>)
 8001fc2:	f00a fdd4 	bl	800cb6e <HAL_UARTEx_SetRxFifoThreshold>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001fcc:	f000 f93c 	bl	8002248 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001fd0:	4804      	ldr	r0, [pc, #16]	@ (8001fe4 <MX_USART3_UART_Init+0x90>)
 8001fd2:	f00a fd55 	bl	800ca80 <HAL_UARTEx_DisableFifoMode>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001fdc:	f000 f934 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	2000074c 	.word	0x2000074c
 8001fe8:	40004800 	.word	0x40004800

08001fec <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ff2:	4b12      	ldr	r3, [pc, #72]	@ (800203c <MX_DMA_Init+0x50>)
 8001ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff6:	4a11      	ldr	r2, [pc, #68]	@ (800203c <MX_DMA_Init+0x50>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800203c <MX_DMA_Init+0x50>)
 8002000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800200a:	4b0c      	ldr	r3, [pc, #48]	@ (800203c <MX_DMA_Init+0x50>)
 800200c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800200e:	4a0b      	ldr	r2, [pc, #44]	@ (800203c <MX_DMA_Init+0x50>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6493      	str	r3, [r2, #72]	@ 0x48
 8002016:	4b09      	ldr	r3, [pc, #36]	@ (800203c <MX_DMA_Init+0x50>)
 8002018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002022:	2200      	movs	r2, #0
 8002024:	2100      	movs	r1, #0
 8002026:	200d      	movs	r0, #13
 8002028:	f003 f9a0 	bl	800536c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800202c:	200d      	movs	r0, #13
 800202e:	f003 f9b7 	bl	80053a0 <HAL_NVIC_EnableIRQ>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000

08002040 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	@ 0x28
 8002044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002046:	f107 0314 	add.w	r3, r7, #20
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	60da      	str	r2, [r3, #12]
 8002054:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002056:	4b6e      	ldr	r3, [pc, #440]	@ (8002210 <MX_GPIO_Init+0x1d0>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205a:	4a6d      	ldr	r2, [pc, #436]	@ (8002210 <MX_GPIO_Init+0x1d0>)
 800205c:	f043 0304 	orr.w	r3, r3, #4
 8002060:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002062:	4b6b      	ldr	r3, [pc, #428]	@ (8002210 <MX_GPIO_Init+0x1d0>)
 8002064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800206e:	4b68      	ldr	r3, [pc, #416]	@ (8002210 <MX_GPIO_Init+0x1d0>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002072:	4a67      	ldr	r2, [pc, #412]	@ (8002210 <MX_GPIO_Init+0x1d0>)
 8002074:	f043 0320 	orr.w	r3, r3, #32
 8002078:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800207a:	4b65      	ldr	r3, [pc, #404]	@ (8002210 <MX_GPIO_Init+0x1d0>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	4b62      	ldr	r3, [pc, #392]	@ (8002210 <MX_GPIO_Init+0x1d0>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208a:	4a61      	ldr	r2, [pc, #388]	@ (8002210 <MX_GPIO_Init+0x1d0>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002092:	4b5f      	ldr	r3, [pc, #380]	@ (8002210 <MX_GPIO_Init+0x1d0>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800209e:	4b5c      	ldr	r3, [pc, #368]	@ (8002210 <MX_GPIO_Init+0x1d0>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002210 <MX_GPIO_Init+0x1d0>)
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020aa:	4b59      	ldr	r3, [pc, #356]	@ (8002210 <MX_GPIO_Init+0x1d0>)
 80020ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	607b      	str	r3, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b6:	4b56      	ldr	r3, [pc, #344]	@ (8002210 <MX_GPIO_Init+0x1d0>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ba:	4a55      	ldr	r2, [pc, #340]	@ (8002210 <MX_GPIO_Init+0x1d0>)
 80020bc:	f043 0308 	orr.w	r3, r3, #8
 80020c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020c2:	4b53      	ldr	r3, [pc, #332]	@ (8002210 <MX_GPIO_Init+0x1d0>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STAT_BKUP_Pin | EN_5V_Pin | CAM1_CTRL_Pin, GPIO_PIN_RESET);
 80020ce:	2200      	movs	r2, #0
 80020d0:	f242 0124 	movw	r1, #8228	@ 0x2024
 80020d4:	484f      	ldr	r0, [pc, #316]	@ (8002214 <MX_GPIO_Init+0x1d4>)
 80020d6:	f003 fe31 	bl	8005d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRV_DIR_Pin | CAM0_CTRL_Pin | XBEE_RST_Pin, GPIO_PIN_RESET);
 80020da:	2200      	movs	r2, #0
 80020dc:	f248 0130 	movw	r1, #32816	@ 0x8030
 80020e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020e4:	f003 fe2a 	bl	8005d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_nCS_Pin | MAGEXT_nCS_Pin | MAG_nCS_Pin | BMP_nCS_Pin | GPS_RST_Pin | USR_LED_Pin, GPIO_PIN_RESET);
 80020e8:	2200      	movs	r2, #0
 80020ea:	f641 41a4 	movw	r1, #7332	@ 0x1ca4
 80020ee:	484a      	ldr	r0, [pc, #296]	@ (8002218 <MX_GPIO_Init+0x1d8>)
 80020f0:	f003 fe24 	bl	8005d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STAT_BKUP_Pin EN_5V_Pin CAM1_CTRL_Pin */
  GPIO_InitStruct.Pin = STAT_BKUP_Pin | EN_5V_Pin | CAM1_CTRL_Pin;
 80020f4:	f242 0324 	movw	r3, #8228	@ 0x2024
 80020f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fa:	2301      	movs	r3, #1
 80020fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002106:	f107 0314 	add.w	r3, r7, #20
 800210a:	4619      	mov	r1, r3
 800210c:	4841      	ldr	r0, [pc, #260]	@ (8002214 <MX_GPIO_Init+0x1d4>)
 800210e:	f003 fc7b 	bl	8005a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_STAT2_Pin CHG_STAT1_Pin */
  GPIO_InitStruct.Pin = CHG_STAT2_Pin | CHG_STAT1_Pin;
 8002112:	2303      	movs	r3, #3
 8002114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	4619      	mov	r1, r3
 8002124:	483d      	ldr	r0, [pc, #244]	@ (800221c <MX_GPIO_Init+0x1dc>)
 8002126:	f003 fc6f 	bl	8005a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_32K_Pin */
  GPIO_InitStruct.Pin = CLK_32K_Pin;
 800212a:	2304      	movs	r3, #4
 800212c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800212e:	2303      	movs	r3, #3
 8002130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CLK_32K_GPIO_Port, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002140:	f003 fc62 	bl	8005a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRV_DIR_Pin CAM0_CTRL_Pin XBEE_RST_Pin */
  GPIO_InitStruct.Pin = DRV_DIR_Pin | CAM0_CTRL_Pin | XBEE_RST_Pin;
 8002144:	f248 0330 	movw	r3, #32816	@ 0x8030
 8002148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214a:	2301      	movs	r3, #1
 800214c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002160:	f003 fc52 	bl	8005a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_nCS_Pin MAGEXT_nCS_Pin MAG_nCS_Pin BMP_nCS_Pin
                           USR_LED_Pin */
  GPIO_InitStruct.Pin = IMU_nCS_Pin | MAGEXT_nCS_Pin | MAG_nCS_Pin | BMP_nCS_Pin | USR_LED_Pin;
 8002164:	f641 4384 	movw	r3, #7300	@ 0x1c84
 8002168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216a:	2301      	movs	r3, #1
 800216c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002176:	f107 0314 	add.w	r3, r7, #20
 800217a:	4619      	mov	r1, r3
 800217c:	4826      	ldr	r0, [pc, #152]	@ (8002218 <MX_GPIO_Init+0x1d8>)
 800217e:	f003 fc43 	bl	8005a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002182:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	4619      	mov	r1, r3
 800219e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a2:	f003 fc31 	bl	8005a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
 80021a6:	2350      	movs	r3, #80	@ 0x50
 80021a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021aa:	2303      	movs	r3, #3
 80021ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4619      	mov	r1, r3
 80021b8:	4817      	ldr	r0, [pc, #92]	@ (8002218 <MX_GPIO_Init+0x1d8>)
 80021ba:	f003 fc25 	bl	8005a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 80021be:	2320      	movs	r3, #32
 80021c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80021c2:	2311      	movs	r3, #17
 80021c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2300      	movs	r3, #0
 80021cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	4619      	mov	r1, r3
 80021d4:	4810      	ldr	r0, [pc, #64]	@ (8002218 <MX_GPIO_Init+0x1d8>)
 80021d6:	f003 fc17 	bl	8005a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80021da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e8:	2300      	movs	r3, #0
 80021ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_IR;
 80021ec:	2306      	movs	r3, #6
 80021ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	4619      	mov	r1, r3
 80021f6:	4808      	ldr	r0, [pc, #32]	@ (8002218 <MX_GPIO_Init+0x1d8>)
 80021f8:	f003 fc06 	bl	8005a08 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 80021fc:	4b08      	ldr	r3, [pc, #32]	@ (8002220 <MX_GPIO_Init+0x1e0>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4a07      	ldr	r2, [pc, #28]	@ (8002220 <MX_GPIO_Init+0x1e0>)
 8002202:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002206:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002208:	bf00      	nop
 800220a:	3728      	adds	r7, #40	@ 0x28
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40021000 	.word	0x40021000
 8002214:	48000800 	.word	0x48000800
 8002218:	48000400 	.word	0x48000400
 800221c:	48001400 	.word	0x48001400
 8002220:	40010000 	.word	0x40010000

08002224 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a04      	ldr	r2, [pc, #16]	@ (8002244 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d101      	bne.n	800223a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002236:	f001 fe8d 	bl	8003f54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40001000 	.word	0x40001000

08002248 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800224c:	b672      	cpsid	i
}
 800224e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <Error_Handler+0x8>

08002254 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 800225a:	f107 0308 	add.w	r3, r7, #8
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002264:	4b16      	ldr	r3, [pc, #88]	@ (80022c0 <HAL_MspInit+0x6c>)
 8002266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002268:	4a15      	ldr	r2, [pc, #84]	@ (80022c0 <HAL_MspInit+0x6c>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002270:	4b13      	ldr	r3, [pc, #76]	@ (80022c0 <HAL_MspInit+0x6c>)
 8002272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800227c:	4b10      	ldr	r3, [pc, #64]	@ (80022c0 <HAL_MspInit+0x6c>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002280:	4a0f      	ldr	r2, [pc, #60]	@ (80022c0 <HAL_MspInit+0x6c>)
 8002282:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002286:	6593      	str	r3, [r2, #88]	@ 0x58
 8002288:	4b0d      	ldr	r3, [pc, #52]	@ (80022c0 <HAL_MspInit+0x6c>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002290:	603b      	str	r3, [r7, #0]
 8002292:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8002294:	2300      	movs	r3, #0
 8002296:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 800229c:	f107 0308 	add.w	r3, r7, #8
 80022a0:	4618      	mov	r0, r3
 80022a2:	f005 fc53 	bl	8007b4c <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80022a6:	f005 fcb1 	bl	8007c0c <HAL_PWR_EnablePVD>

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80022aa:	f001 fea7 	bl	8003ffc <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80022ae:	2002      	movs	r0, #2
 80022b0:	f001 fe90 	bl	8003fd4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80022b4:	f005 fd5e 	bl	8007d74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b8:	bf00      	nop
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000

080022c4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b09e      	sub	sp, #120	@ 0x78
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	2250      	movs	r2, #80	@ 0x50
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f00f fc23 	bl	8011b30 <memset>
  if(hadc->Instance==ADC1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022f2:	d133      	bne.n	800235c <HAL_ADC_MspInit+0x98>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80022f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022f8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80022fa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80022fe:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	4618      	mov	r0, r3
 8002306:	f006 faeb 	bl	80088e0 <HAL_RCCEx_PeriphCLKConfig>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002310:	f7ff ff9a 	bl	8002248 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002314:	4b13      	ldr	r3, [pc, #76]	@ (8002364 <HAL_ADC_MspInit+0xa0>)
 8002316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002318:	4a12      	ldr	r2, [pc, #72]	@ (8002364 <HAL_ADC_MspInit+0xa0>)
 800231a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800231e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002320:	4b10      	ldr	r3, [pc, #64]	@ (8002364 <HAL_ADC_MspInit+0xa0>)
 8002322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002324:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800232c:	4b0d      	ldr	r3, [pc, #52]	@ (8002364 <HAL_ADC_MspInit+0xa0>)
 800232e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002330:	4a0c      	ldr	r2, [pc, #48]	@ (8002364 <HAL_ADC_MspInit+0xa0>)
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002338:	4b0a      	ldr	r3, [pc, #40]	@ (8002364 <HAL_ADC_MspInit+0xa0>)
 800233a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VUSB_Pin;
 8002344:	2308      	movs	r3, #8
 8002346:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002348:	2303      	movs	r3, #3
 800234a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(VUSB_GPIO_Port, &GPIO_InitStruct);
 8002350:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002354:	4619      	mov	r1, r3
 8002356:	4804      	ldr	r0, [pc, #16]	@ (8002368 <HAL_ADC_MspInit+0xa4>)
 8002358:	f003 fb56 	bl	8005a08 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800235c:	bf00      	nop
 800235e:	3778      	adds	r7, #120	@ 0x78
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000
 8002368:	48000800 	.word	0x48000800

0800236c <HAL_CORDIC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcordic: CORDIC handle pointer
  * @retval None
  */
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0a      	ldr	r2, [pc, #40]	@ (80023a4 <HAL_CORDIC_MspInit+0x38>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d10b      	bne.n	8002396 <HAL_CORDIC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CORDIC_MspInit 0 */

    /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800237e:	4b0a      	ldr	r3, [pc, #40]	@ (80023a8 <HAL_CORDIC_MspInit+0x3c>)
 8002380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002382:	4a09      	ldr	r2, [pc, #36]	@ (80023a8 <HAL_CORDIC_MspInit+0x3c>)
 8002384:	f043 0308 	orr.w	r3, r3, #8
 8002388:	6493      	str	r3, [r2, #72]	@ 0x48
 800238a:	4b07      	ldr	r3, [pc, #28]	@ (80023a8 <HAL_CORDIC_MspInit+0x3c>)
 800238c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40020c00 	.word	0x40020c00
 80023a8:	40021000 	.word	0x40021000

080023ac <HAL_FMAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfmac: FMAC handle pointer
  * @retval None
  */
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0a      	ldr	r2, [pc, #40]	@ (80023e4 <HAL_FMAC_MspInit+0x38>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d10b      	bne.n	80023d6 <HAL_FMAC_MspInit+0x2a>
  {
    /* USER CODE BEGIN FMAC_MspInit 0 */

    /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80023be:	4b0a      	ldr	r3, [pc, #40]	@ (80023e8 <HAL_FMAC_MspInit+0x3c>)
 80023c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c2:	4a09      	ldr	r2, [pc, #36]	@ (80023e8 <HAL_FMAC_MspInit+0x3c>)
 80023c4:	f043 0310 	orr.w	r3, r3, #16
 80023c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80023ca:	4b07      	ldr	r3, [pc, #28]	@ (80023e8 <HAL_FMAC_MspInit+0x3c>)
 80023cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END FMAC_MspInit 1 */

  }

}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40021400 	.word	0x40021400
 80023e8:	40021000 	.word	0x40021000

080023ec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b09e      	sub	sp, #120	@ 0x78
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	2250      	movs	r2, #80	@ 0x50
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f00f fb8f 	bl	8011b30 <memset>
  if(hi2c->Instance==I2C3)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1f      	ldr	r2, [pc, #124]	@ (8002494 <HAL_I2C_MspInit+0xa8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d137      	bne.n	800248c <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800241c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002420:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002422:	2300      	movs	r3, #0
 8002424:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	4618      	mov	r0, r3
 800242c:	f006 fa58 	bl	80088e0 <HAL_RCCEx_PeriphCLKConfig>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002436:	f7ff ff07 	bl	8002248 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800243a:	4b17      	ldr	r3, [pc, #92]	@ (8002498 <HAL_I2C_MspInit+0xac>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243e:	4a16      	ldr	r2, [pc, #88]	@ (8002498 <HAL_I2C_MspInit+0xac>)
 8002440:	f043 0304 	orr.w	r3, r3, #4
 8002444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002446:	4b14      	ldr	r3, [pc, #80]	@ (8002498 <HAL_I2C_MspInit+0xac>)
 8002448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002452:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002456:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002458:	2312      	movs	r3, #18
 800245a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002460:	2300      	movs	r3, #0
 8002462:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002464:	2308      	movs	r3, #8
 8002466:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002468:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800246c:	4619      	mov	r1, r3
 800246e:	480b      	ldr	r0, [pc, #44]	@ (800249c <HAL_I2C_MspInit+0xb0>)
 8002470:	f003 faca 	bl	8005a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002474:	4b08      	ldr	r3, [pc, #32]	@ (8002498 <HAL_I2C_MspInit+0xac>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002478:	4a07      	ldr	r2, [pc, #28]	@ (8002498 <HAL_I2C_MspInit+0xac>)
 800247a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800247e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002480:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <HAL_I2C_MspInit+0xac>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002484:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 800248c:	bf00      	nop
 800248e:	3778      	adds	r7, #120	@ 0x78
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40007800 	.word	0x40007800
 8002498:	40021000 	.word	0x40021000
 800249c:	48000800 	.word	0x48000800

080024a0 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b098      	sub	sp, #96	@ 0x60
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024a8:	f107 0310 	add.w	r3, r7, #16
 80024ac:	2250      	movs	r2, #80	@ 0x50
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f00f fb3d 	bl	8011b30 <memset>
  if(hrng->Instance==RNG)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a11      	ldr	r2, [pc, #68]	@ (8002500 <HAL_RNG_MspInit+0x60>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d11a      	bne.n	80024f6 <HAL_RNG_MspInit+0x56>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80024c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024c4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80024c6:	2300      	movs	r3, #0
 80024c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ca:	f107 0310 	add.w	r3, r7, #16
 80024ce:	4618      	mov	r0, r3
 80024d0:	f006 fa06 	bl	80088e0 <HAL_RCCEx_PeriphCLKConfig>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_RNG_MspInit+0x3e>
    {
      Error_Handler();
 80024da:	f7ff feb5 	bl	8002248 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80024de:	4b09      	ldr	r3, [pc, #36]	@ (8002504 <HAL_RNG_MspInit+0x64>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e2:	4a08      	ldr	r2, [pc, #32]	@ (8002504 <HAL_RNG_MspInit+0x64>)
 80024e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ea:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <HAL_RNG_MspInit+0x64>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 80024f6:	bf00      	nop
 80024f8:	3760      	adds	r7, #96	@ 0x60
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	50060800 	.word	0x50060800
 8002504:	40021000 	.word	0x40021000

08002508 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b09e      	sub	sp, #120	@ 0x78
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002510:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	2250      	movs	r2, #80	@ 0x50
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f00f fb01 	bl	8011b30 <memset>
  if(hrtc->Instance==RTC)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a24      	ldr	r2, [pc, #144]	@ (80025c4 <HAL_RTC_MspInit+0xbc>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d140      	bne.n	80025ba <HAL_RTC_MspInit+0xb2>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002538:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800253c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800253e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002542:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	4618      	mov	r0, r3
 800254a:	f006 f9c9 	bl	80088e0 <HAL_RCCEx_PeriphCLKConfig>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8002554:	f7ff fe78 	bl	8002248 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002558:	4b1b      	ldr	r3, [pc, #108]	@ (80025c8 <HAL_RTC_MspInit+0xc0>)
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800255e:	4a1a      	ldr	r2, [pc, #104]	@ (80025c8 <HAL_RTC_MspInit+0xc0>)
 8002560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002568:	4b17      	ldr	r3, [pc, #92]	@ (80025c8 <HAL_RTC_MspInit+0xc0>)
 800256a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256c:	4a16      	ldr	r2, [pc, #88]	@ (80025c8 <HAL_RTC_MspInit+0xc0>)
 800256e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002572:	6593      	str	r3, [r2, #88]	@ 0x58
 8002574:	4b14      	ldr	r3, [pc, #80]	@ (80025c8 <HAL_RTC_MspInit+0xc0>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002580:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <HAL_RTC_MspInit+0xc0>)
 8002582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002584:	4a10      	ldr	r2, [pc, #64]	@ (80025c8 <HAL_RTC_MspInit+0xc0>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800258c:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <HAL_RTC_MspInit+0xc0>)
 800258e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PA1     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 8002598:	2302      	movs	r3, #2
 800259a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 80025a8:	2300      	movs	r3, #0
 80025aa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 80025ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025b0:	4619      	mov	r1, r3
 80025b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025b6:	f003 fa27 	bl	8005a08 <HAL_GPIO_Init>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80025ba:	bf00      	nop
 80025bc:	3778      	adds	r7, #120	@ 0x78
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40002800 	.word	0x40002800
 80025c8:	40021000 	.word	0x40021000

080025cc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	@ 0x28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a17      	ldr	r2, [pc, #92]	@ (8002648 <HAL_SPI_MspInit+0x7c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d128      	bne.n	8002640 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025ee:	4b17      	ldr	r3, [pc, #92]	@ (800264c <HAL_SPI_MspInit+0x80>)
 80025f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f2:	4a16      	ldr	r2, [pc, #88]	@ (800264c <HAL_SPI_MspInit+0x80>)
 80025f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80025fa:	4b14      	ldr	r3, [pc, #80]	@ (800264c <HAL_SPI_MspInit+0x80>)
 80025fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002606:	4b11      	ldr	r3, [pc, #68]	@ (800264c <HAL_SPI_MspInit+0x80>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260a:	4a10      	ldr	r2, [pc, #64]	@ (800264c <HAL_SPI_MspInit+0x80>)
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002612:	4b0e      	ldr	r3, [pc, #56]	@ (800264c <HAL_SPI_MspInit+0x80>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800261e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002624:	2302      	movs	r3, #2
 8002626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262c:	2300      	movs	r3, #0
 800262e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002630:	2305      	movs	r3, #5
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	4619      	mov	r1, r3
 800263a:	4805      	ldr	r0, [pc, #20]	@ (8002650 <HAL_SPI_MspInit+0x84>)
 800263c:	f003 f9e4 	bl	8005a08 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002640:	bf00      	nop
 8002642:	3728      	adds	r7, #40	@ 0x28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40003800 	.word	0x40003800
 800264c:	40021000 	.word	0x40021000
 8002650:	48000400 	.word	0x48000400

08002654 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08c      	sub	sp, #48	@ 0x30
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265c:	f107 031c 	add.w	r3, r7, #28
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a3c      	ldr	r2, [pc, #240]	@ (8002764 <HAL_TIM_Encoder_MspInit+0x110>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d128      	bne.n	80026c8 <HAL_TIM_Encoder_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002676:	4b3c      	ldr	r3, [pc, #240]	@ (8002768 <HAL_TIM_Encoder_MspInit+0x114>)
 8002678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800267a:	4a3b      	ldr	r2, [pc, #236]	@ (8002768 <HAL_TIM_Encoder_MspInit+0x114>)
 800267c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002680:	6613      	str	r3, [r2, #96]	@ 0x60
 8002682:	4b39      	ldr	r3, [pc, #228]	@ (8002768 <HAL_TIM_Encoder_MspInit+0x114>)
 8002684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002686:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800268e:	4b36      	ldr	r3, [pc, #216]	@ (8002768 <HAL_TIM_Encoder_MspInit+0x114>)
 8002690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002692:	4a35      	ldr	r2, [pc, #212]	@ (8002768 <HAL_TIM_Encoder_MspInit+0x114>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800269a:	4b33      	ldr	r3, [pc, #204]	@ (8002768 <HAL_TIM_Encoder_MspInit+0x114>)
 800269c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC4     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = ENC0_A_Pin|ENC0_B_Pin|ENC0_Z_Pin;
 80026a6:	2313      	movs	r3, #19
 80026a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b2:	2300      	movs	r3, #0
 80026b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80026b6:	2302      	movs	r3, #2
 80026b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ba:	f107 031c 	add.w	r3, r7, #28
 80026be:	4619      	mov	r1, r3
 80026c0:	482a      	ldr	r0, [pc, #168]	@ (800276c <HAL_TIM_Encoder_MspInit+0x118>)
 80026c2:	f003 f9a1 	bl	8005a08 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80026c6:	e049      	b.n	800275c <HAL_TIM_Encoder_MspInit+0x108>
  else if(htim_encoder->Instance==TIM8)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a28      	ldr	r2, [pc, #160]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x11c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d144      	bne.n	800275c <HAL_TIM_Encoder_MspInit+0x108>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026d2:	4b25      	ldr	r3, [pc, #148]	@ (8002768 <HAL_TIM_Encoder_MspInit+0x114>)
 80026d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d6:	4a24      	ldr	r2, [pc, #144]	@ (8002768 <HAL_TIM_Encoder_MspInit+0x114>)
 80026d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80026de:	4b22      	ldr	r3, [pc, #136]	@ (8002768 <HAL_TIM_Encoder_MspInit+0x114>)
 80026e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002768 <HAL_TIM_Encoder_MspInit+0x114>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002768 <HAL_TIM_Encoder_MspInit+0x114>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002768 <HAL_TIM_Encoder_MspInit+0x114>)
 80026f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002702:	4b19      	ldr	r3, [pc, #100]	@ (8002768 <HAL_TIM_Encoder_MspInit+0x114>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002706:	4a18      	ldr	r2, [pc, #96]	@ (8002768 <HAL_TIM_Encoder_MspInit+0x114>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800270e:	4b16      	ldr	r3, [pc, #88]	@ (8002768 <HAL_TIM_Encoder_MspInit+0x114>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC1_Z_Pin;
 800271a:	2301      	movs	r3, #1
 800271c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800272a:	230a      	movs	r3, #10
 800272c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ENC1_Z_GPIO_Port, &GPIO_InitStruct);
 800272e:	f107 031c 	add.w	r3, r7, #28
 8002732:	4619      	mov	r1, r3
 8002734:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002738:	f003 f966 	bl	8005a08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 800273c:	23c0      	movs	r3, #192	@ 0xc0
 800273e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002740:	2302      	movs	r3, #2
 8002742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	2300      	movs	r3, #0
 800274a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800274c:	2304      	movs	r3, #4
 800274e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002750:	f107 031c 	add.w	r3, r7, #28
 8002754:	4619      	mov	r1, r3
 8002756:	4805      	ldr	r0, [pc, #20]	@ (800276c <HAL_TIM_Encoder_MspInit+0x118>)
 8002758:	f003 f956 	bl	8005a08 <HAL_GPIO_Init>
}
 800275c:	bf00      	nop
 800275e:	3730      	adds	r7, #48	@ 0x30
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40012c00 	.word	0x40012c00
 8002768:	40021000 	.word	0x40021000
 800276c:	48000800 	.word	0x48000800
 8002770:	40013400 	.word	0x40013400

08002774 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a1c      	ldr	r2, [pc, #112]	@ (80027f4 <HAL_TIM_Base_MspInit+0x80>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d10c      	bne.n	80027a0 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002786:	4b1c      	ldr	r3, [pc, #112]	@ (80027f8 <HAL_TIM_Base_MspInit+0x84>)
 8002788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278a:	4a1b      	ldr	r2, [pc, #108]	@ (80027f8 <HAL_TIM_Base_MspInit+0x84>)
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	6593      	str	r3, [r2, #88]	@ 0x58
 8002792:	4b19      	ldr	r3, [pc, #100]	@ (80027f8 <HAL_TIM_Base_MspInit+0x84>)
 8002794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 800279e:	e022      	b.n	80027e6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a15      	ldr	r2, [pc, #84]	@ (80027fc <HAL_TIM_Base_MspInit+0x88>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d10c      	bne.n	80027c4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80027aa:	4b13      	ldr	r3, [pc, #76]	@ (80027f8 <HAL_TIM_Base_MspInit+0x84>)
 80027ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ae:	4a12      	ldr	r2, [pc, #72]	@ (80027f8 <HAL_TIM_Base_MspInit+0x84>)
 80027b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80027b6:	4b10      	ldr	r3, [pc, #64]	@ (80027f8 <HAL_TIM_Base_MspInit+0x84>)
 80027b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	693b      	ldr	r3, [r7, #16]
}
 80027c2:	e010      	b.n	80027e6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM17)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002800 <HAL_TIM_Base_MspInit+0x8c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d10b      	bne.n	80027e6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80027ce:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <HAL_TIM_Base_MspInit+0x84>)
 80027d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027d2:	4a09      	ldr	r2, [pc, #36]	@ (80027f8 <HAL_TIM_Base_MspInit+0x84>)
 80027d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80027da:	4b07      	ldr	r3, [pc, #28]	@ (80027f8 <HAL_TIM_Base_MspInit+0x84>)
 80027dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
}
 80027e6:	bf00      	nop
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40000400 	.word	0x40000400
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40014400 	.word	0x40014400
 8002800:	40014800 	.word	0x40014800

08002804 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0a      	ldr	r2, [pc, #40]	@ (800283c <HAL_TIM_PWM_MspInit+0x38>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d10b      	bne.n	800282e <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM15_MspInit 0 */

    /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002816:	4b0a      	ldr	r3, [pc, #40]	@ (8002840 <HAL_TIM_PWM_MspInit+0x3c>)
 8002818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800281a:	4a09      	ldr	r2, [pc, #36]	@ (8002840 <HAL_TIM_PWM_MspInit+0x3c>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002820:	6613      	str	r3, [r2, #96]	@ 0x60
 8002822:	4b07      	ldr	r3, [pc, #28]	@ (8002840 <HAL_TIM_PWM_MspInit+0x3c>)
 8002824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM15_MspInit 1 */

  }

}
 800282e:	bf00      	nop
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40014000 	.word	0x40014000
 8002840:	40021000 	.word	0x40021000

08002844 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08a      	sub	sp, #40	@ 0x28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a31      	ldr	r2, [pc, #196]	@ (8002928 <HAL_TIM_MspPostInit+0xe4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d139      	bne.n	80028da <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002866:	4b31      	ldr	r3, [pc, #196]	@ (800292c <HAL_TIM_MspPostInit+0xe8>)
 8002868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286a:	4a30      	ldr	r2, [pc, #192]	@ (800292c <HAL_TIM_MspPostInit+0xe8>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002872:	4b2e      	ldr	r3, [pc, #184]	@ (800292c <HAL_TIM_MspPostInit+0xe8>)
 8002874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	4b2b      	ldr	r3, [pc, #172]	@ (800292c <HAL_TIM_MspPostInit+0xe8>)
 8002880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002882:	4a2a      	ldr	r2, [pc, #168]	@ (800292c <HAL_TIM_MspPostInit+0xe8>)
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800288a:	4b28      	ldr	r3, [pc, #160]	@ (800292c <HAL_TIM_MspPostInit+0xe8>)
 800288c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = SERVO_PWM0_Pin|SERVO_PWM1_Pin;
 8002896:	23c0      	movs	r3, #192	@ 0xc0
 8002898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028a6:	2302      	movs	r3, #2
 80028a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028aa:	f107 0314 	add.w	r3, r7, #20
 80028ae:	4619      	mov	r1, r3
 80028b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028b4:	f003 f8a8 	bl	8005a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SERVO_PWM2_Pin|SERVO_PWM3_Pin;
 80028b8:	2303      	movs	r3, #3
 80028ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028c8:	2302      	movs	r3, #2
 80028ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	4619      	mov	r1, r3
 80028d2:	4817      	ldr	r0, [pc, #92]	@ (8002930 <HAL_TIM_MspPostInit+0xec>)
 80028d4:	f003 f898 	bl	8005a08 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80028d8:	e021      	b.n	800291e <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM15)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a15      	ldr	r2, [pc, #84]	@ (8002934 <HAL_TIM_MspPostInit+0xf0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d11c      	bne.n	800291e <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e4:	4b11      	ldr	r3, [pc, #68]	@ (800292c <HAL_TIM_MspPostInit+0xe8>)
 80028e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e8:	4a10      	ldr	r2, [pc, #64]	@ (800292c <HAL_TIM_MspPostInit+0xe8>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028f0:	4b0e      	ldr	r3, [pc, #56]	@ (800292c <HAL_TIM_MspPostInit+0xe8>)
 80028f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DRV_PWM_Pin;
 80028fc:	2308      	movs	r3, #8
 80028fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002908:	2300      	movs	r3, #0
 800290a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 800290c:	2309      	movs	r3, #9
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DRV_PWM_GPIO_Port, &GPIO_InitStruct);
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	4619      	mov	r1, r3
 8002916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800291a:	f003 f875 	bl	8005a08 <HAL_GPIO_Init>
}
 800291e:	bf00      	nop
 8002920:	3728      	adds	r7, #40	@ 0x28
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40000400 	.word	0x40000400
 800292c:	40021000 	.word	0x40021000
 8002930:	48000400 	.word	0x48000400
 8002934:	40014000 	.word	0x40014000

08002938 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b0a0      	sub	sp, #128	@ 0x80
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002950:	f107 031c 	add.w	r3, r7, #28
 8002954:	2250      	movs	r2, #80	@ 0x50
 8002956:	2100      	movs	r1, #0
 8002958:	4618      	mov	r0, r3
 800295a:	f00f f8e9 	bl	8011b30 <memset>
  if(huart->Instance==UART5)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a64      	ldr	r2, [pc, #400]	@ (8002af4 <HAL_UART_MspInit+0x1bc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d153      	bne.n	8002a10 <HAL_UART_MspInit+0xd8>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002968:	2310      	movs	r3, #16
 800296a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800296c:	2300      	movs	r3, #0
 800296e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002970:	f107 031c 	add.w	r3, r7, #28
 8002974:	4618      	mov	r0, r3
 8002976:	f005 ffb3 	bl	80088e0 <HAL_RCCEx_PeriphCLKConfig>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002980:	f7ff fc62 	bl	8002248 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002984:	4b5c      	ldr	r3, [pc, #368]	@ (8002af8 <HAL_UART_MspInit+0x1c0>)
 8002986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002988:	4a5b      	ldr	r2, [pc, #364]	@ (8002af8 <HAL_UART_MspInit+0x1c0>)
 800298a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800298e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002990:	4b59      	ldr	r3, [pc, #356]	@ (8002af8 <HAL_UART_MspInit+0x1c0>)
 8002992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002994:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800299c:	4b56      	ldr	r3, [pc, #344]	@ (8002af8 <HAL_UART_MspInit+0x1c0>)
 800299e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a0:	4a55      	ldr	r2, [pc, #340]	@ (8002af8 <HAL_UART_MspInit+0x1c0>)
 80029a2:	f043 0304 	orr.w	r3, r3, #4
 80029a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029a8:	4b53      	ldr	r3, [pc, #332]	@ (8002af8 <HAL_UART_MspInit+0x1c0>)
 80029aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b4:	4b50      	ldr	r3, [pc, #320]	@ (8002af8 <HAL_UART_MspInit+0x1c0>)
 80029b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b8:	4a4f      	ldr	r2, [pc, #316]	@ (8002af8 <HAL_UART_MspInit+0x1c0>)
 80029ba:	f043 0308 	orr.w	r3, r3, #8
 80029be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029c0:	4b4d      	ldr	r3, [pc, #308]	@ (8002af8 <HAL_UART_MspInit+0x1c0>)
 80029c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 80029cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029da:	2300      	movs	r3, #0
 80029dc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80029de:	2305      	movs	r3, #5
 80029e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 80029e2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80029e6:	4619      	mov	r1, r3
 80029e8:	4844      	ldr	r0, [pc, #272]	@ (8002afc <HAL_UART_MspInit+0x1c4>)
 80029ea:	f003 f80d 	bl	8005a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_TX_Pin;
 80029ee:	2304      	movs	r3, #4
 80029f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fa:	2300      	movs	r3, #0
 80029fc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80029fe:	2305      	movs	r3, #5
 8002a00:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 8002a02:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002a06:	4619      	mov	r1, r3
 8002a08:	483d      	ldr	r0, [pc, #244]	@ (8002b00 <HAL_UART_MspInit+0x1c8>)
 8002a0a:	f002 fffd 	bl	8005a08 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a0e:	e06c      	b.n	8002aea <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a3b      	ldr	r2, [pc, #236]	@ (8002b04 <HAL_UART_MspInit+0x1cc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d167      	bne.n	8002aea <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a22:	f107 031c 	add.w	r3, r7, #28
 8002a26:	4618      	mov	r0, r3
 8002a28:	f005 ff5a 	bl	80088e0 <HAL_RCCEx_PeriphCLKConfig>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8002a32:	f7ff fc09 	bl	8002248 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a36:	4b30      	ldr	r3, [pc, #192]	@ (8002af8 <HAL_UART_MspInit+0x1c0>)
 8002a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3a:	4a2f      	ldr	r2, [pc, #188]	@ (8002af8 <HAL_UART_MspInit+0x1c0>)
 8002a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a40:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a42:	4b2d      	ldr	r3, [pc, #180]	@ (8002af8 <HAL_UART_MspInit+0x1c0>)
 8002a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002af8 <HAL_UART_MspInit+0x1c0>)
 8002a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a52:	4a29      	ldr	r2, [pc, #164]	@ (8002af8 <HAL_UART_MspInit+0x1c0>)
 8002a54:	f043 0304 	orr.w	r3, r3, #4
 8002a58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a5a:	4b27      	ldr	r3, [pc, #156]	@ (8002af8 <HAL_UART_MspInit+0x1c0>)
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a66:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002a6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a74:	2300      	movs	r3, #0
 8002a76:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a78:	2307      	movs	r3, #7
 8002a7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a7c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002a80:	4619      	mov	r1, r3
 8002a82:	481e      	ldr	r0, [pc, #120]	@ (8002afc <HAL_UART_MspInit+0x1c4>)
 8002a84:	f002 ffc0 	bl	8005a08 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel3;
 8002a88:	4b1f      	ldr	r3, [pc, #124]	@ (8002b08 <HAL_UART_MspInit+0x1d0>)
 8002a8a:	4a20      	ldr	r2, [pc, #128]	@ (8002b0c <HAL_UART_MspInit+0x1d4>)
 8002a8c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b08 <HAL_UART_MspInit+0x1d0>)
 8002a90:	221d      	movs	r2, #29
 8002a92:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a94:	4b1c      	ldr	r3, [pc, #112]	@ (8002b08 <HAL_UART_MspInit+0x1d0>)
 8002a96:	2210      	movs	r2, #16
 8002a98:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b08 <HAL_UART_MspInit+0x1d0>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002aa0:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <HAL_UART_MspInit+0x1d0>)
 8002aa2:	2280      	movs	r2, #128	@ 0x80
 8002aa4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aa6:	4b18      	ldr	r3, [pc, #96]	@ (8002b08 <HAL_UART_MspInit+0x1d0>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aac:	4b16      	ldr	r3, [pc, #88]	@ (8002b08 <HAL_UART_MspInit+0x1d0>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002ab2:	4b15      	ldr	r3, [pc, #84]	@ (8002b08 <HAL_UART_MspInit+0x1d0>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ab8:	4b13      	ldr	r3, [pc, #76]	@ (8002b08 <HAL_UART_MspInit+0x1d0>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002abe:	4812      	ldr	r0, [pc, #72]	@ (8002b08 <HAL_UART_MspInit+0x1d0>)
 8002ac0:	f002 fc7c 	bl	80053bc <HAL_DMA_Init>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_UART_MspInit+0x196>
      Error_Handler();
 8002aca:	f7ff fbbd 	bl	8002248 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8002b08 <HAL_UART_MspInit+0x1d0>)
 8002ad2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002ad4:	4a0c      	ldr	r2, [pc, #48]	@ (8002b08 <HAL_UART_MspInit+0x1d0>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 14, 0);
 8002ada:	2200      	movs	r2, #0
 8002adc:	210e      	movs	r1, #14
 8002ade:	2027      	movs	r0, #39	@ 0x27
 8002ae0:	f002 fc44 	bl	800536c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ae4:	2027      	movs	r0, #39	@ 0x27
 8002ae6:	f002 fc5b 	bl	80053a0 <HAL_NVIC_EnableIRQ>
}
 8002aea:	bf00      	nop
 8002aec:	3780      	adds	r7, #128	@ 0x80
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40005000 	.word	0x40005000
 8002af8:	40021000 	.word	0x40021000
 8002afc:	48000800 	.word	0x48000800
 8002b00:	48000c00 	.word	0x48000c00
 8002b04:	40004800 	.word	0x40004800
 8002b08:	200007e0 	.word	0x200007e0
 8002b0c:	40020030 	.word	0x40020030

08002b10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08c      	sub	sp, #48	@ 0x30
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b20:	4b2c      	ldr	r3, [pc, #176]	@ (8002bd4 <HAL_InitTick+0xc4>)
 8002b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b24:	4a2b      	ldr	r2, [pc, #172]	@ (8002bd4 <HAL_InitTick+0xc4>)
 8002b26:	f043 0310 	orr.w	r3, r3, #16
 8002b2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b2c:	4b29      	ldr	r3, [pc, #164]	@ (8002bd4 <HAL_InitTick+0xc4>)
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b38:	f107 020c 	add.w	r2, r7, #12
 8002b3c:	f107 0310 	add.w	r3, r7, #16
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f005 fe54 	bl	80087f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b48:	f005 fe26 	bl	8008798 <HAL_RCC_GetPCLK1Freq>
 8002b4c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b50:	4a21      	ldr	r2, [pc, #132]	@ (8002bd8 <HAL_InitTick+0xc8>)
 8002b52:	fba2 2303 	umull	r2, r3, r2, r3
 8002b56:	0c9b      	lsrs	r3, r3, #18
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bdc <HAL_InitTick+0xcc>)
 8002b5e:	4a20      	ldr	r2, [pc, #128]	@ (8002be0 <HAL_InitTick+0xd0>)
 8002b60:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002b62:	4b1e      	ldr	r3, [pc, #120]	@ (8002bdc <HAL_InitTick+0xcc>)
 8002b64:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b68:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002bdc <HAL_InitTick+0xcc>)
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002b70:	4b1a      	ldr	r3, [pc, #104]	@ (8002bdc <HAL_InitTick+0xcc>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b76:	4b19      	ldr	r3, [pc, #100]	@ (8002bdc <HAL_InitTick+0xcc>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002b7c:	4817      	ldr	r0, [pc, #92]	@ (8002bdc <HAL_InitTick+0xcc>)
 8002b7e:	f007 fa61 	bl	800a044 <HAL_TIM_Base_Init>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002b88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d11b      	bne.n	8002bc8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002b90:	4812      	ldr	r0, [pc, #72]	@ (8002bdc <HAL_InitTick+0xcc>)
 8002b92:	f007 faaf 	bl	800a0f4 <HAL_TIM_Base_Start_IT>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002b9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d111      	bne.n	8002bc8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ba4:	2036      	movs	r0, #54	@ 0x36
 8002ba6:	f002 fbfb 	bl	80053a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b0f      	cmp	r3, #15
 8002bae:	d808      	bhi.n	8002bc2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	2036      	movs	r0, #54	@ 0x36
 8002bb6:	f002 fbd9 	bl	800536c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bba:	4a0a      	ldr	r2, [pc, #40]	@ (8002be4 <HAL_InitTick+0xd4>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	e002      	b.n	8002bc8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002bc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3730      	adds	r7, #48	@ 0x30
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	431bde83 	.word	0x431bde83
 8002bdc:	20000840 	.word	0x20000840
 8002be0:	40001000 	.word	0x40001000
 8002be4:	20000004 	.word	0x20000004

08002be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bec:	bf00      	nop
 8002bee:	e7fd      	b.n	8002bec <NMI_Handler+0x4>

08002bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bf4:	bf00      	nop
 8002bf6:	e7fd      	b.n	8002bf4 <HardFault_Handler+0x4>

08002bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <MemManage_Handler+0x4>

08002c00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c04:	bf00      	nop
 8002c06:	e7fd      	b.n	8002c04 <BusFault_Handler+0x4>

08002c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c0c:	bf00      	nop
 8002c0e:	e7fd      	b.n	8002c0c <UsageFault_Handler+0x4>

08002c10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002c4c:	4802      	ldr	r0, [pc, #8]	@ (8002c58 <DMA1_Channel3_IRQHandler+0x10>)
 8002c4e:	f002 fd1d 	bl	800568c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	200007e0 	.word	0x200007e0

08002c5c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c60:	4802      	ldr	r0, [pc, #8]	@ (8002c6c <USB_LP_IRQHandler+0x10>)
 8002c62:	f003 fac7 	bl	80061f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000eac 	.word	0x20000eac

08002c70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c74:	4802      	ldr	r0, [pc, #8]	@ (8002c80 <USART3_IRQHandler+0x10>)
 8002c76:	f008 fe2b 	bl	800b8d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	2000074c 	.word	0x2000074c

08002c84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c88:	4802      	ldr	r0, [pc, #8]	@ (8002c94 <TIM6_DAC_IRQHandler+0x10>)
 8002c8a:	f007 fba0 	bl	800a3ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000840 	.word	0x20000840

08002c98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return 1;
 8002c9c:	2301      	movs	r3, #1
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <_kill>:

int _kill(int pid, int sig)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cb2:	f00e ff59 	bl	8011b68 <__errno>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2216      	movs	r2, #22
 8002cba:	601a      	str	r2, [r3, #0]
  return -1;
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <_exit>:

void _exit (int status)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ffe7 	bl	8002ca8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cda:	bf00      	nop
 8002cdc:	e7fd      	b.n	8002cda <_exit+0x12>

08002cde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b086      	sub	sp, #24
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e00a      	b.n	8002d06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cf0:	f3af 8000 	nop.w
 8002cf4:	4601      	mov	r1, r0
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	60ba      	str	r2, [r7, #8]
 8002cfc:	b2ca      	uxtb	r2, r1
 8002cfe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	3301      	adds	r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	dbf0      	blt.n	8002cf0 <_read+0x12>
  }

  return len;
 8002d0e:	687b      	ldr	r3, [r7, #4]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d40:	605a      	str	r2, [r3, #4]
  return 0;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <_isatty>:

int _isatty(int file)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d58:	2301      	movs	r3, #1
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b085      	sub	sp, #20
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d88:	4a14      	ldr	r2, [pc, #80]	@ (8002ddc <_sbrk+0x5c>)
 8002d8a:	4b15      	ldr	r3, [pc, #84]	@ (8002de0 <_sbrk+0x60>)
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d94:	4b13      	ldr	r3, [pc, #76]	@ (8002de4 <_sbrk+0x64>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d9c:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <_sbrk+0x64>)
 8002d9e:	4a12      	ldr	r2, [pc, #72]	@ (8002de8 <_sbrk+0x68>)
 8002da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002da2:	4b10      	ldr	r3, [pc, #64]	@ (8002de4 <_sbrk+0x64>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4413      	add	r3, r2
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d207      	bcs.n	8002dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002db0:	f00e feda 	bl	8011b68 <__errno>
 8002db4:	4603      	mov	r3, r0
 8002db6:	220c      	movs	r2, #12
 8002db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dbe:	e009      	b.n	8002dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dc0:	4b08      	ldr	r3, [pc, #32]	@ (8002de4 <_sbrk+0x64>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dc6:	4b07      	ldr	r3, [pc, #28]	@ (8002de4 <_sbrk+0x64>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	4a05      	ldr	r2, [pc, #20]	@ (8002de4 <_sbrk+0x64>)
 8002dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	2001c000 	.word	0x2001c000
 8002de0:	00000600 	.word	0x00000600
 8002de4:	2000088c 	.word	0x2000088c
 8002de8:	200016f0 	.word	0x200016f0

08002dec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002df0:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <SystemInit+0x20>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df6:	4a05      	ldr	r2, [pc, #20]	@ (8002e0c <SystemInit+0x20>)
 8002df8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002dfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e10:	480d      	ldr	r0, [pc, #52]	@ (8002e48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e12:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e14:	f7ff ffea 	bl	8002dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e18:	480c      	ldr	r0, [pc, #48]	@ (8002e4c <LoopForever+0x6>)
  ldr r1, =_edata
 8002e1a:	490d      	ldr	r1, [pc, #52]	@ (8002e50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e54 <LoopForever+0xe>)
  movs r3, #0
 8002e1e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002e20:	e002      	b.n	8002e28 <LoopCopyDataInit>

08002e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e26:	3304      	adds	r3, #4

08002e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e2c:	d3f9      	bcc.n	8002e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e30:	4c0a      	ldr	r4, [pc, #40]	@ (8002e5c <LoopForever+0x16>)
  movs r3, #0
 8002e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e34:	e001      	b.n	8002e3a <LoopFillZerobss>

08002e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e38:	3204      	adds	r2, #4

08002e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e3c:	d3fb      	bcc.n	8002e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e3e:	f00e fe99 	bl	8011b74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e42:	f7fe f91d 	bl	8001080 <main>

08002e46 <LoopForever>:

LoopForever:
    b LoopForever
 8002e46:	e7fe      	b.n	8002e46 <LoopForever>
  ldr   r0, =_estack
 8002e48:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e50:	200002a8 	.word	0x200002a8
  ldr r2, =_sidata
 8002e54:	0801419c 	.word	0x0801419c
  ldr r2, =_sbss
 8002e58:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 8002e5c:	200016f0 	.word	0x200016f0

08002e60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e60:	e7fe      	b.n	8002e60 <ADC1_2_IRQHandler>

08002e62 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d105      	bne.n	8002e7c <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002e70:	b672      	cpsid	i
}
 8002e72:	bf00      	nop
 8002e74:	f7ff f9e8 	bl	8002248 <Error_Handler>
 8002e78:	bf00      	nop
 8002e7a:	e7fd      	b.n	8002e78 <stm32_lock_init+0x16>
  lock->flag = 0;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	705a      	strb	r2, [r3, #1]
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e98:	f3ef 8310 	mrs	r3, PRIMASK
 8002e9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e9e:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea8:	b672      	cpsid	i
}
 8002eaa:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002eac:	f3bf 8f4f 	dsb	sy
}
 8002eb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002eb2:	f3bf 8f6f 	isb	sy
}
 8002eb6:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d105      	bne.n	8002eca <stm32_lock_acquire+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002ebe:	b672      	cpsid	i
}
 8002ec0:	bf00      	nop
 8002ec2:	f7ff f9c1 	bl	8002248 <Error_Handler>
 8002ec6:	bf00      	nop
 8002ec8:	e7fd      	b.n	8002ec6 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	785b      	ldrb	r3, [r3, #1]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d103      	bne.n	8002eda <stm32_lock_acquire+0x4a>
  {
    lock->flag = flag;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	7bfa      	ldrb	r2, [r7, #15]
 8002ed6:	701a      	strb	r2, [r3, #0]
 8002ed8:	e009      	b.n	8002eee <stm32_lock_acquire+0x5e>
  }
  else if (lock->counter == UINT8_MAX)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	785b      	ldrb	r3, [r3, #1]
 8002ede:	2bff      	cmp	r3, #255	@ 0xff
 8002ee0:	d105      	bne.n	8002eee <stm32_lock_acquire+0x5e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee2:	b672      	cpsid	i
}
 8002ee4:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8002ee6:	f7ff f9af 	bl	8002248 <Error_Handler>
 8002eea:	bf00      	nop
 8002eec:	e7fd      	b.n	8002eea <stm32_lock_acquire+0x5a>
  }
  lock->counter++;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	785b      	ldrb	r3, [r3, #1]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	705a      	strb	r2, [r3, #1]
}
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d105      	bne.n	8002f1c <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f10:	b672      	cpsid	i
}
 8002f12:	bf00      	nop
 8002f14:	f7ff f998 	bl	8002248 <Error_Handler>
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	785b      	ldrb	r3, [r3, #1]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d105      	bne.n	8002f30 <stm32_lock_release+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f24:	b672      	cpsid	i
}
 8002f26:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8002f28:	f7ff f98e 	bl	8002248 <Error_Handler>
 8002f2c:	bf00      	nop
 8002f2e:	e7fd      	b.n	8002f2c <stm32_lock_release+0x2a>
  }
  lock->counter--;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	785b      	ldrb	r3, [r3, #1]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	785b      	ldrb	r3, [r3, #1]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d105      	bne.n	8002f50 <stm32_lock_release+0x4e>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <stm32_lock_release+0x4e>
  __ASM volatile ("cpsie i" : : : "memory");
 8002f4c:	b662      	cpsie	i
}
 8002f4e:	bf00      	nop
  {
    __enable_irq();
  }
}
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d105      	bne.n	8002f72 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8002f66:	f00e fdff 	bl	8011b68 <__errno>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2216      	movs	r2, #22
 8002f6e:	601a      	str	r2, [r3, #0]
    return;
 8002f70:	e016      	b.n	8002fa0 <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002f72:	2002      	movs	r0, #2
 8002f74:	f00e fa78 	bl	8011468 <malloc>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff68 	bl	8002e62 <stm32_lock_init>
    return;
 8002f92:	e005      	b.n	8002fa0 <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f94:	b672      	cpsid	i
}
 8002f96:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8002f98:	f7ff f956 	bl	8002248 <Error_Handler>
 8002f9c:	bf00      	nop
 8002f9e:	e7fd      	b.n	8002f9c <__retarget_lock_init_recursive+0x44>
}
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b082      	sub	sp, #8
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d105      	bne.n	8002fc0 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb4:	b672      	cpsid	i
}
 8002fb6:	bf00      	nop
 8002fb8:	f7ff f946 	bl	8002248 <Error_Handler>
 8002fbc:	bf00      	nop
 8002fbe:	e7fd      	b.n	8002fbc <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff ff64 	bl	8002e90 <stm32_lock_acquire>
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d105      	bne.n	8002fea <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002fde:	b672      	cpsid	i
}
 8002fe0:	bf00      	nop
 8002fe2:	f7ff f931 	bl	8002248 <Error_Handler>
 8002fe6:	bf00      	nop
 8002fe8:	e7fd      	b.n	8002fe6 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff ff88 	bl	8002f02 <stm32_lock_release>
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <BMM150_enable_chip_select>:
	GPIO_TypeDef* chip_select_port;
	uint16_t chip_select_pin;
};

void BMM150_enable_chip_select(GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	460b      	mov	r3, r1
 8003004:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(cs_port, cs_gpio_pin, GPIO_PIN_RESET);
 8003006:	887b      	ldrh	r3, [r7, #2]
 8003008:	2200      	movs	r2, #0
 800300a:	4619      	mov	r1, r3
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f002 fe95 	bl	8005d3c <HAL_GPIO_WritePin>
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <BMM150_disable_chip_select>:

void BMM150_disable_chip_select(GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	460b      	mov	r3, r1
 8003024:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(cs_port, cs_gpio_pin, GPIO_PIN_SET);
 8003026:	887b      	ldrh	r3, [r7, #2]
 8003028:	2201      	movs	r2, #1
 800302a:	4619      	mov	r1, r3
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f002 fe85 	bl	8005d3c <HAL_GPIO_WritePin>
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <BMM150_SPI_read>:
	osDelay(period_in_micro_s / tick_amount);
}
*/

BMM150_INTF_RET_TYPE BMM150_SPI_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b086      	sub	sp, #24
 800303e:	af00      	add	r7, sp, #0
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	4603      	mov	r3, r0
 8003048:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	75fb      	strb	r3, [r7, #23]
	struct spi_interface *spi = (struct spi_interface *)intf_ptr;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	613b      	str	r3, [r7, #16]

	BMM150_enable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	891b      	ldrh	r3, [r3, #8]
 800305a:	4619      	mov	r1, r3
 800305c:	4610      	mov	r0, r2
 800305e:	f7ff ffcc 	bl	8002ffa <BMM150_enable_chip_select>

	status = HAL_SPI_Transmit(spi->spi_handle, reg_addr, sizeof(reg_addr), BMM150_TIMEOUT_DURATION);
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	4619      	mov	r1, r3
 800306a:	230a      	movs	r3, #10
 800306c:	2201      	movs	r2, #1
 800306e:	f006 f95f 	bl	8009330 <HAL_SPI_Transmit>
 8003072:	4603      	mov	r3, r0
 8003074:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(spi->spi_handle, reg_data, length, BMM150_TIMEOUT_DURATION);
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	b29a      	uxth	r2, r3
 800307e:	230a      	movs	r3, #10
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	f006 facb 	bl	800961c <HAL_SPI_Receive>
 8003086:	4603      	mov	r3, r0
 8003088:	75fb      	strb	r3, [r7, #23]

	BMM150_disable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	891b      	ldrh	r3, [r3, #8]
 8003092:	4619      	mov	r1, r3
 8003094:	4610      	mov	r0, r2
 8003096:	f7ff ffc0 	bl	800301a <BMM150_disable_chip_select>


	return (BMM150_INTF_RET_TYPE)status;
 800309a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <BMM150_SPI_write>:

BMM150_INTF_RET_TYPE BMM150_SPI_write(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b086      	sub	sp, #24
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	4603      	mov	r3, r0
 80030b4:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	75fb      	strb	r3, [r7, #23]
	struct spi_interface *spi = (struct spi_interface *)intf_ptr;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	613b      	str	r3, [r7, #16]

	BMM150_enable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	891b      	ldrh	r3, [r3, #8]
 80030c6:	4619      	mov	r1, r3
 80030c8:	4610      	mov	r0, r2
 80030ca:	f7ff ff96 	bl	8002ffa <BMM150_enable_chip_select>

	status = HAL_SPI_Transmit(spi->spi_handle, reg_addr, sizeof(reg_addr), BMM150_TIMEOUT_DURATION);
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	4619      	mov	r1, r3
 80030d6:	230a      	movs	r3, #10
 80030d8:	2201      	movs	r2, #1
 80030da:	f006 f929 	bl	8009330 <HAL_SPI_Transmit>
 80030de:	4603      	mov	r3, r0
 80030e0:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Transmit(spi->spi_handle, reg_data, length, BMM150_TIMEOUT_DURATION);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	230a      	movs	r3, #10
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	f006 f91f 	bl	8009330 <HAL_SPI_Transmit>
 80030f2:	4603      	mov	r3, r0
 80030f4:	75fb      	strb	r3, [r7, #23]

	BMM150_disable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	891b      	ldrh	r3, [r3, #8]
 80030fe:	4619      	mov	r1, r3
 8003100:	4610      	mov	r0, r2
 8003102:	f7ff ff8a 	bl	800301a <BMM150_disable_chip_select>

	return (BMM150_INTF_RET_TYPE)status;
 8003106:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <BMM150_spi_init>:

struct bmm150_dev BMM150_spi_init(SPI_HandleTypeDef *spi_handle, GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 8003114:	b5b0      	push	{r4, r5, r7, lr}
 8003116:	b09e      	sub	sp, #120	@ 0x78
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	807b      	strh	r3, [r7, #2]
	struct bmm150_dev bmm150 = (struct bmm150_dev){ 0 };
 8003122:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003126:	222c      	movs	r2, #44	@ 0x2c
 8003128:	2100      	movs	r1, #0
 800312a:	4618      	mov	r0, r3
 800312c:	f00e fd00 	bl	8011b30 <memset>

	if (spi_handle == NULL)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10f      	bne.n	8003156 <BMM150_spi_init+0x42>
	{
		bmm150.intf_rslt = BMM150_E_NULL_PTR;
 8003136:	23ff      	movs	r3, #255	@ 0xff
 8003138:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
		return bmm150;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	461d      	mov	r5, r3
 8003140:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8003144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800314a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800314c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003150:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003154:	e026      	b.n	80031a4 <BMM150_spi_init+0x90>
	}

	struct spi_interface my_spi = {
 8003156:	f107 0308 	add.w	r3, r7, #8
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	1d3b      	adds	r3, r7, #4
 800315e:	61bb      	str	r3, [r7, #24]
 8003160:	887b      	ldrh	r3, [r7, #2]
 8003162:	83bb      	strh	r3, [r7, #28]
		.spi_handle = &spi_handle,
		.chip_select_port = &cs_port,
		.chip_select_pin = cs_gpio_pin
	};

	bmm150.intf = BMM150_SPI_INTF;
 8003164:	2300      	movs	r3, #0
 8003166:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	bmm150.read = BMM150_SPI_read;
 800316a:	4b10      	ldr	r3, [pc, #64]	@ (80031ac <BMM150_spi_init+0x98>)
 800316c:	65bb      	str	r3, [r7, #88]	@ 0x58
	bmm150.write = BMM150_SPI_write;
 800316e:	4b10      	ldr	r3, [pc, #64]	@ (80031b0 <BMM150_spi_init+0x9c>)
 8003170:	65fb      	str	r3, [r7, #92]	@ 0x5c
	bmm150.delay_us = HAL_Delay;
 8003172:	4b10      	ldr	r3, [pc, #64]	@ (80031b4 <BMM150_spi_init+0xa0>)
 8003174:	663b      	str	r3, [r7, #96]	@ 0x60
	bmm150.intf_ptr = &my_spi;
 8003176:	f107 0314 	add.w	r3, r7, #20
 800317a:	653b      	str	r3, [r7, #80]	@ 0x50

	//NOTE: Potential error: is chip id initialized properly?
	bmm150.intf_rslt = bmm150_init(&bmm150);
 800317c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003180:	4618      	mov	r0, r3
 8003182:	f000 f819 	bl	80031b8 <bmm150_init>
 8003186:	4603      	mov	r3, r0
 8003188:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	return bmm150;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	461d      	mov	r5, r3
 8003190:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8003194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800319a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800319c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80031a0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	3778      	adds	r7, #120	@ 0x78
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bdb0      	pop	{r4, r5, r7, pc}
 80031ac:	0800303b 	.word	0x0800303b
 80031b0:	080030a7 	.word	0x080030a7
 80031b4:	08003f91 	.word	0x08003f91

080031b8 <bmm150_init>:
 *  @brief This API is the entry point, Call this API before using other APIs.
 *  This API reads the chip-id of the sensor which is the first step to
 *  verify the sensor and updates the trim parameters of the sensor.
 */
int8_t bmm150_init(struct bmm150_dev *dev)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	73bb      	strb	r3, [r7, #14]

    /* Power up the sensor from suspend to sleep mode */
    rslt = set_power_control_bit(BMM150_POWER_CNTRL_ENABLE, dev);
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	2001      	movs	r0, #1
 80031c8:	f000 f8ac 	bl	8003324 <set_power_control_bit>
 80031cc:	4603      	mov	r3, r0
 80031ce:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 80031d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d11e      	bne.n	8003216 <bmm150_init+0x5e>
    {
        /* Start-up time delay of 3ms */
        dev->delay_us(BMM150_START_UP_TIME, dev->intf_ptr);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6852      	ldr	r2, [r2, #4]
 80031e0:	4611      	mov	r1, r2
 80031e2:	2003      	movs	r0, #3
 80031e4:	4798      	blx	r3

        /* Chip ID of the sensor is read */
        rslt = bmm150_get_regs(BMM150_REG_CHIP_ID, &chip_id, 1, dev);
 80031e6:	f107 010e 	add.w	r1, r7, #14
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	2040      	movs	r0, #64	@ 0x40
 80031f0:	f000 f843 	bl	800327a <bmm150_get_regs>
 80031f4:	4603      	mov	r3, r0
 80031f6:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMM150_OK)
 80031f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10a      	bne.n	8003216 <bmm150_init+0x5e>
        {
            /* Check for chip id validity */
            if (chip_id == BMM150_CHIP_ID)
 8003200:	7bbb      	ldrb	r3, [r7, #14]
 8003202:	2b32      	cmp	r3, #50	@ 0x32
 8003204:	d107      	bne.n	8003216 <bmm150_init+0x5e>
            {
                dev->chip_id = chip_id;
 8003206:	7bba      	ldrb	r2, [r7, #14]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	701a      	strb	r2, [r3, #0]

                /* Function to update trim values */
                rslt = read_trim_registers(dev);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f8c3 	bl	8003398 <read_trim_registers>
 8003212:	4603      	mov	r3, r0
 8003214:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003216:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <bmm150_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmm150_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 8003222:	b590      	push	{r4, r7, lr}
 8003224:	b087      	sub	sp, #28
 8003226:	af00      	add	r7, sp, #0
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
 800322e:	4603      	mov	r3, r0
 8003230:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8003232:	6838      	ldr	r0, [r7, #0]
 8003234:	f000 f852 	bl	80032dc <null_ptr_check>
 8003238:	4603      	mov	r3, r0
 800323a:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL) && (len != 0))
 800323c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d112      	bne.n	800326a <bmm150_set_regs+0x48>
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00f      	beq.n	800326a <bmm150_set_regs+0x48>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00c      	beq.n	800326a <bmm150_set_regs+0x48>
        /* Write the data to the reg_addr */

        /* SPI write requires to set The MSB of reg_addr as 0
         * but in default the MSB is always 0
         */
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	691c      	ldr	r4, [r3, #16]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	7bf8      	ldrb	r0, [r7, #15]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	47a0      	blx	r4
 8003260:	4603      	mov	r3, r0
 8003262:	461a      	mov	r2, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	721a      	strb	r2, [r3, #8]
 8003268:	e001      	b.n	800326e <bmm150_set_regs+0x4c>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 800326a:	23ff      	movs	r3, #255	@ 0xff
 800326c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800326e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003272:	4618      	mov	r0, r3
 8003274:	371c      	adds	r7, #28
 8003276:	46bd      	mov	sp, r7
 8003278:	bd90      	pop	{r4, r7, pc}

0800327a <bmm150_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmm150_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 800327a:	b590      	push	{r4, r7, lr}
 800327c:	b087      	sub	sp, #28
 800327e:	af00      	add	r7, sp, #0
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	4603      	mov	r3, r0
 8003288:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800328a:	6838      	ldr	r0, [r7, #0]
 800328c:	f000 f826 	bl	80032dc <null_ptr_check>
 8003290:	4603      	mov	r3, r0
 8003292:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL))
 8003294:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d117      	bne.n	80032cc <bmm150_get_regs+0x52>
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d014      	beq.n	80032cc <bmm150_get_regs+0x52>
    {
        if (dev->intf != BMM150_I2C_INTF)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	785b      	ldrb	r3, [r3, #1]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d003      	beq.n	80032b2 <bmm150_get_regs+0x38>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | 0x80;
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80032b0:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68dc      	ldr	r4, [r3, #12]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	7bf8      	ldrb	r0, [r7, #15]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	47a0      	blx	r4
 80032c2:	4603      	mov	r3, r0
 80032c4:	461a      	mov	r2, r3
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	721a      	strb	r2, [r3, #8]
 80032ca:	e001      	b.n	80032d0 <bmm150_get_regs+0x56>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 80032cc:	23ff      	movs	r3, #255	@ 0xff
 80032ce:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80032d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd90      	pop	{r4, r7, pc}

080032dc <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmm150_dev *dev)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00f      	beq.n	800330a <null_ptr_check+0x2e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <null_ptr_check+0x2e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d007      	beq.n	800330a <null_ptr_check+0x2e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMM150_E_NULL_PTR;
 800330a:	23ff      	movs	r3, #255	@ 0xff
 800330c:	73fb      	strb	r3, [r7, #15]
 800330e:	e001      	b.n	8003314 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMM150_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003314:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <set_power_control_bit>:

/*!
 * @brief This internal API sets/resets the power control bit of 0x4B register.
 */
static int8_t set_power_control_bit(uint8_t pwrcntrl_bit, struct bmm150_dev *dev)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	6039      	str	r1, [r7, #0]
 800332e:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	73bb      	strb	r3, [r7, #14]

    /* Power control register 0x4B is read */
    rslt = bmm150_get_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 8003334:	f107 010e 	add.w	r1, r7, #14
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2201      	movs	r2, #1
 800333c:	204b      	movs	r0, #75	@ 0x4b
 800333e:	f7ff ff9c 	bl	800327a <bmm150_get_regs>
 8003342:	4603      	mov	r3, r0
 8003344:	73fb      	strb	r3, [r7, #15]

    /* Proceed if everything is fine until now */
    if (rslt == BMM150_OK)
 8003346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d11e      	bne.n	800338c <set_power_control_bit+0x68>
    {
        /* Sets the value of power control bit */
        reg_data = BMM150_SET_BITS_POS_0(reg_data, BMM150_PWR_CNTRL, pwrcntrl_bit);
 800334e:	7bbb      	ldrb	r3, [r7, #14]
 8003350:	b25b      	sxtb	r3, r3
 8003352:	f023 0301 	bic.w	r3, r3, #1
 8003356:	b25a      	sxtb	r2, r3
 8003358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	b25b      	sxtb	r3, r3
 8003362:	4313      	orrs	r3, r2
 8003364:	b25b      	sxtb	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 800336a:	f107 010e 	add.w	r1, r7, #14
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2201      	movs	r2, #1
 8003372:	204b      	movs	r0, #75	@ 0x4b
 8003374:	f7ff ff55 	bl	8003222 <bmm150_set_regs>
 8003378:	4603      	mov	r3, r0
 800337a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMM150_OK)
 800337c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d103      	bne.n	800338c <set_power_control_bit+0x68>
        {
            /* Store the power control bit
             * value in dev structure
             */
            dev->pwr_cntrl_bit = pwrcntrl_bit;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	79fa      	ldrb	r2, [r7, #7]
 8003388:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        }
    }

    return rslt;
 800338c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <read_trim_registers>:
/*!
 * @brief This internal API reads the trim registers of the sensor and stores
 * the trim values in the "trim_data" of device structure.
 */
static int8_t read_trim_registers(struct bmm150_dev *dev)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t trim_x1y1[2] = { 0 };
 80033a0:	2300      	movs	r3, #0
 80033a2:	833b      	strh	r3, [r7, #24]
    uint8_t trim_xyz_data[4] = { 0 };
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
    uint8_t trim_xy1xy2[10] = { 0 };
 80033a8:	2300      	movs	r3, #0
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	f107 030c 	add.w	r3, r7, #12
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	809a      	strh	r2, [r3, #4]
    uint16_t temp_msb = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	83bb      	strh	r3, [r7, #28]

    /* Trim register value is read */
    rslt = bmm150_get_regs(BMM150_DIG_X1, trim_x1y1, 2, dev);
 80033ba:	f107 0118 	add.w	r1, r7, #24
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2202      	movs	r2, #2
 80033c2:	205d      	movs	r0, #93	@ 0x5d
 80033c4:	f7ff ff59 	bl	800327a <bmm150_get_regs>
 80033c8:	4603      	mov	r3, r0
 80033ca:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 80033cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d16a      	bne.n	80034aa <read_trim_registers+0x112>
    {
        rslt = bmm150_get_regs(BMM150_DIG_Z4_LSB, trim_xyz_data, 4, dev);
 80033d4:	f107 0114 	add.w	r1, r7, #20
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2204      	movs	r2, #4
 80033dc:	2062      	movs	r0, #98	@ 0x62
 80033de:	f7ff ff4c 	bl	800327a <bmm150_get_regs>
 80033e2:	4603      	mov	r3, r0
 80033e4:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMM150_OK)
 80033e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d15d      	bne.n	80034aa <read_trim_registers+0x112>
        {
            rslt = bmm150_get_regs(BMM150_DIG_Z2_LSB, trim_xy1xy2, 10, dev);
 80033ee:	f107 0108 	add.w	r1, r7, #8
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	220a      	movs	r2, #10
 80033f6:	2068      	movs	r0, #104	@ 0x68
 80033f8:	f7ff ff3f 	bl	800327a <bmm150_get_regs>
 80033fc:	4603      	mov	r3, r0
 80033fe:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMM150_OK)
 8003400:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d150      	bne.n	80034aa <read_trim_registers+0x112>
            {
                /* Trim data which is read is updated
                 * in the device structure
                 */
                dev->trim_data.dig_x1 = (int8_t)trim_x1y1[0];
 8003408:	7e3b      	ldrb	r3, [r7, #24]
 800340a:	b25a      	sxtb	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	761a      	strb	r2, [r3, #24]
                dev->trim_data.dig_y1 = (int8_t)trim_x1y1[1];
 8003410:	7e7b      	ldrb	r3, [r7, #25]
 8003412:	b25a      	sxtb	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	765a      	strb	r2, [r3, #25]
                dev->trim_data.dig_x2 = (int8_t)trim_xyz_data[2];
 8003418:	7dbb      	ldrb	r3, [r7, #22]
 800341a:	b25a      	sxtb	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	769a      	strb	r2, [r3, #26]
                dev->trim_data.dig_y2 = (int8_t)trim_xyz_data[3];
 8003420:	7dfb      	ldrb	r3, [r7, #23]
 8003422:	b25a      	sxtb	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	76da      	strb	r2, [r3, #27]
                temp_msb = ((uint16_t)trim_xy1xy2[3]) << 8;
 8003428:	7afb      	ldrb	r3, [r7, #11]
 800342a:	021b      	lsls	r3, r3, #8
 800342c:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z1 = (uint16_t)(temp_msb | trim_xy1xy2[2]);
 800342e:	7abb      	ldrb	r3, [r7, #10]
 8003430:	461a      	mov	r2, r3
 8003432:	8bbb      	ldrh	r3, [r7, #28]
 8003434:	4313      	orrs	r3, r2
 8003436:	b29a      	uxth	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	839a      	strh	r2, [r3, #28]
                temp_msb = ((uint16_t)trim_xy1xy2[1]) << 8;
 800343c:	7a7b      	ldrb	r3, [r7, #9]
 800343e:	021b      	lsls	r3, r3, #8
 8003440:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z2 = (int16_t)(temp_msb | trim_xy1xy2[0]);
 8003442:	7a3b      	ldrb	r3, [r7, #8]
 8003444:	461a      	mov	r2, r3
 8003446:	8bbb      	ldrh	r3, [r7, #28]
 8003448:	4313      	orrs	r3, r2
 800344a:	b29b      	uxth	r3, r3
 800344c:	b21a      	sxth	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	83da      	strh	r2, [r3, #30]
                temp_msb = ((uint16_t)trim_xy1xy2[7]) << 8;
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z3 = (int16_t)(temp_msb | trim_xy1xy2[6]);
 8003458:	7bbb      	ldrb	r3, [r7, #14]
 800345a:	461a      	mov	r2, r3
 800345c:	8bbb      	ldrh	r3, [r7, #28]
 800345e:	4313      	orrs	r3, r2
 8003460:	b29b      	uxth	r3, r3
 8003462:	b21a      	sxth	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	841a      	strh	r2, [r3, #32]
                temp_msb = ((uint16_t)trim_xyz_data[1]) << 8;
 8003468:	7d7b      	ldrb	r3, [r7, #21]
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z4 = (int16_t)(temp_msb | trim_xyz_data[0]);
 800346e:	7d3b      	ldrb	r3, [r7, #20]
 8003470:	461a      	mov	r2, r3
 8003472:	8bbb      	ldrh	r3, [r7, #28]
 8003474:	4313      	orrs	r3, r2
 8003476:	b29b      	uxth	r3, r3
 8003478:	b21a      	sxth	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	845a      	strh	r2, [r3, #34]	@ 0x22
                dev->trim_data.dig_xy1 = trim_xy1xy2[9];
 800347e:	7c7a      	ldrb	r2, [r7, #17]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                dev->trim_data.dig_xy2 = (int8_t)trim_xy1xy2[8];
 8003486:	7c3b      	ldrb	r3, [r7, #16]
 8003488:	b25a      	sxtb	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
 8003490:	7b7b      	ldrb	r3, [r7, #13]
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	b29b      	uxth	r3, r3
 8003496:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 800349a:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
 800349c:	7b3b      	ldrb	r3, [r7, #12]
 800349e:	461a      	mov	r2, r3
 80034a0:	8bbb      	ldrh	r3, [r7, #28]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	84da      	strh	r2, [r3, #38]	@ 0x26
            }
        }
    }

    return rslt;
 80034aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3720      	adds	r7, #32
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <ICM42688P_disable_chip_select>:
/* Private GPIO CS Pin Variables */
static GPIO_TypeDef* ChipSelect_GPIO_Port;
static uint16_t ChipSelect_Pin;

static void ICM42688P_disable_chip_select()
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_RESET);
 80034bc:	4b04      	ldr	r3, [pc, #16]	@ (80034d0 <ICM42688P_disable_chip_select+0x18>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a04      	ldr	r2, [pc, #16]	@ (80034d4 <ICM42688P_disable_chip_select+0x1c>)
 80034c2:	8811      	ldrh	r1, [r2, #0]
 80034c4:	2200      	movs	r2, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f002 fc38 	bl	8005d3c <HAL_GPIO_WritePin>
}
 80034cc:	bf00      	nop
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	2000089c 	.word	0x2000089c
 80034d4:	200008a0 	.word	0x200008a0

080034d8 <ICM42688P_enable_chip_select>:

static void ICM42688P_enable_chip_select()
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_SET);
 80034dc:	4b04      	ldr	r3, [pc, #16]	@ (80034f0 <ICM42688P_enable_chip_select+0x18>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a04      	ldr	r2, [pc, #16]	@ (80034f4 <ICM42688P_enable_chip_select+0x1c>)
 80034e2:	8811      	ldrh	r1, [r2, #0]
 80034e4:	2201      	movs	r2, #1
 80034e6:	4618      	mov	r0, r3
 80034e8:	f002 fc28 	bl	8005d3c <HAL_GPIO_WritePin>
}
 80034ec:	bf00      	nop
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	2000089c 	.word	0x2000089c
 80034f4:	200008a0 	.word	0x200008a0

080034f8 <ICM42688P_write_reg>:

static HAL_StatusTypeDef ICM42688P_write_reg(uint8_t reg, uint8_t data)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	460a      	mov	r2, r1
 8003502:	71fb      	strb	r3, [r7, #7]
 8003504:	4613      	mov	r3, r2
 8003506:	71bb      	strb	r3, [r7, #6]
    uint8_t tx[2] = {reg, data};
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	733b      	strb	r3, [r7, #12]
 800350c:	79bb      	ldrb	r3, [r7, #6]
 800350e:	737b      	strb	r3, [r7, #13]
    ICM42688P_disable_chip_select();
 8003510:	f7ff ffd2 	bl	80034b8 <ICM42688P_disable_chip_select>
    HAL_SPI_Transmit(hspi, tx, 2, HAL_MAX_DELAY);
 8003514:	4b07      	ldr	r3, [pc, #28]	@ (8003534 <ICM42688P_write_reg+0x3c>)
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	f107 010c 	add.w	r1, r7, #12
 800351c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003520:	2202      	movs	r2, #2
 8003522:	f005 ff05 	bl	8009330 <HAL_SPI_Transmit>
    ICM42688P_enable_chip_select();
 8003526:	f7ff ffd7 	bl	80034d8 <ICM42688P_enable_chip_select>
    return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20000898 	.word	0x20000898

08003538 <ICM42688P_read_reg>:

uint8_t ICM42688P_read_reg(uint8_t reg)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = reg | (1 << 7);
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003548:	b2db      	uxtb	r3, r3
 800354a:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	73bb      	strb	r3, [r7, #14]
    ICM42688P_disable_chip_select();
 8003550:	f7ff ffb2 	bl	80034b8 <ICM42688P_disable_chip_select>
    HAL_SPI_Transmit(hspi, &tx, 1, HAL_MAX_DELAY);
 8003554:	4b0c      	ldr	r3, [pc, #48]	@ (8003588 <ICM42688P_read_reg+0x50>)
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	f107 010f 	add.w	r1, r7, #15
 800355c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003560:	2201      	movs	r2, #1
 8003562:	f005 fee5 	bl	8009330 <HAL_SPI_Transmit>
    
    HAL_SPI_Receive(hspi, &rx, 1, HAL_MAX_DELAY);
 8003566:	4b08      	ldr	r3, [pc, #32]	@ (8003588 <ICM42688P_read_reg+0x50>)
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	f107 010e 	add.w	r1, r7, #14
 800356e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003572:	2201      	movs	r2, #1
 8003574:	f006 f852 	bl	800961c <HAL_SPI_Receive>
    ICM42688P_enable_chip_select();
 8003578:	f7ff ffae 	bl	80034d8 <ICM42688P_enable_chip_select>
    return rx;
 800357c:	7bbb      	ldrb	r3, [r7, #14]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000898 	.word	0x20000898

0800358c <ICM42688P_init>:

uint8_t ICM42688P_init(SPI_TypeDef* spi_handle, GPIO_TypeDef* chip_select_port, uint16_t chip_select_gpio_pin)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	4613      	mov	r3, r2
 8003598:	80fb      	strh	r3, [r7, #6]
    hspi = spi_handle;
 800359a:	4a0e      	ldr	r2, [pc, #56]	@ (80035d4 <ICM42688P_init+0x48>)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6013      	str	r3, [r2, #0]
    ChipSelect_GPIO_Port = chip_select_port;
 80035a0:	4a0d      	ldr	r2, [pc, #52]	@ (80035d8 <ICM42688P_init+0x4c>)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	6013      	str	r3, [r2, #0]
    ChipSelect_Pin = chip_select_gpio_pin;
 80035a6:	4a0d      	ldr	r2, [pc, #52]	@ (80035dc <ICM42688P_init+0x50>)
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	8013      	strh	r3, [r2, #0]
    HAL_Delay(100);
    ICM42688P_write_reg(0x11, 0x00);  // Power management
    ICM42688P_write_reg(0x10, 0x0F);  // Gyro and accel config
    */

    ICM42688P_write_reg(0x11, 0x01); // Reset Device
 80035ac:	2101      	movs	r1, #1
 80035ae:	2011      	movs	r0, #17
 80035b0:	f7ff ffa2 	bl	80034f8 <ICM42688P_write_reg>
    HAL_Delay(100);
 80035b4:	2064      	movs	r0, #100	@ 0x64
 80035b6:	f000 fceb 	bl	8003f90 <HAL_Delay>
    ICM42688P_write_reg(0x4E, (0b11 << 2) | (0b11 << 0)); // Enable gyro & accelerometer
 80035ba:	210f      	movs	r1, #15
 80035bc:	204e      	movs	r0, #78	@ 0x4e
 80035be:	f7ff ff9b 	bl	80034f8 <ICM42688P_write_reg>
    ICM42688P_write_reg(0x7B, (0b10 << 1)); // Enable CLKIN
 80035c2:	2104      	movs	r1, #4
 80035c4:	207b      	movs	r0, #123	@ 0x7b
 80035c6:	f7ff ff97 	bl	80034f8 <ICM42688P_write_reg>

    return 0;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	20000898 	.word	0x20000898
 80035d8:	2000089c 	.word	0x2000089c
 80035dc:	200008a0 	.word	0x200008a0

080035e0 <ICM42688P_read_data>:

ICM42688P_AccelData ICM42688P_read_data()
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b08b      	sub	sp, #44	@ 0x2c
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
    ICM42688P_AccelData data = { 0 };
 80035e8:	f107 031c 	add.w	r3, r7, #28
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	609a      	str	r2, [r3, #8]

    uint8_t buffer[12];
    ICM42688P_disable_chip_select();
 80035f4:	f7ff ff60 	bl	80034b8 <ICM42688P_disable_chip_select>
    //This register should be correct
    uint8_t reg = 0x1F | (1 << 7);
 80035f8:	239f      	movs	r3, #159	@ 0x9f
 80035fa:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_Transmit(hspi, &reg, 1, HAL_MAX_DELAY);
 80035fc:	4b2a      	ldr	r3, [pc, #168]	@ (80036a8 <ICM42688P_read_data+0xc8>)
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	f107 010f 	add.w	r1, r7, #15
 8003604:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003608:	2201      	movs	r2, #1
 800360a:	f005 fe91 	bl	8009330 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, buffer, sizeof(buffer) / sizeof(buffer[0]), HAL_MAX_DELAY);
 800360e:	4b26      	ldr	r3, [pc, #152]	@ (80036a8 <ICM42688P_read_data+0xc8>)
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	f107 0110 	add.w	r1, r7, #16
 8003616:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800361a:	220c      	movs	r2, #12
 800361c:	f005 fffe 	bl	800961c <HAL_SPI_Receive>
    ICM42688P_enable_chip_select();
 8003620:	f7ff ff5a 	bl	80034d8 <ICM42688P_enable_chip_select>

    data.accel_x = (buffer[0] << 8) | buffer[1];
 8003624:	7c3b      	ldrb	r3, [r7, #16]
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	b21a      	sxth	r2, r3
 800362a:	7c7b      	ldrb	r3, [r7, #17]
 800362c:	b21b      	sxth	r3, r3
 800362e:	4313      	orrs	r3, r2
 8003630:	b21b      	sxth	r3, r3
 8003632:	b29b      	uxth	r3, r3
 8003634:	83bb      	strh	r3, [r7, #28]
    data.accel_y = (buffer[2] << 8) | buffer[3];
 8003636:	7cbb      	ldrb	r3, [r7, #18]
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	b21a      	sxth	r2, r3
 800363c:	7cfb      	ldrb	r3, [r7, #19]
 800363e:	b21b      	sxth	r3, r3
 8003640:	4313      	orrs	r3, r2
 8003642:	b21b      	sxth	r3, r3
 8003644:	b29b      	uxth	r3, r3
 8003646:	83fb      	strh	r3, [r7, #30]
    data.accel_z = (buffer[4] << 8) | buffer[5];
 8003648:	7d3b      	ldrb	r3, [r7, #20]
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	b21a      	sxth	r2, r3
 800364e:	7d7b      	ldrb	r3, [r7, #21]
 8003650:	b21b      	sxth	r3, r3
 8003652:	4313      	orrs	r3, r2
 8003654:	b21b      	sxth	r3, r3
 8003656:	b29b      	uxth	r3, r3
 8003658:	843b      	strh	r3, [r7, #32]
    data.gyro_x = (buffer[6] << 8) | buffer[7];
 800365a:	7dbb      	ldrb	r3, [r7, #22]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	b21a      	sxth	r2, r3
 8003660:	7dfb      	ldrb	r3, [r7, #23]
 8003662:	b21b      	sxth	r3, r3
 8003664:	4313      	orrs	r3, r2
 8003666:	b21b      	sxth	r3, r3
 8003668:	b29b      	uxth	r3, r3
 800366a:	847b      	strh	r3, [r7, #34]	@ 0x22
    data.gyro_y = (buffer[8] << 8) | buffer[9];
 800366c:	7e3b      	ldrb	r3, [r7, #24]
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	b21a      	sxth	r2, r3
 8003672:	7e7b      	ldrb	r3, [r7, #25]
 8003674:	b21b      	sxth	r3, r3
 8003676:	4313      	orrs	r3, r2
 8003678:	b21b      	sxth	r3, r3
 800367a:	b29b      	uxth	r3, r3
 800367c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    data.gyro_z = (buffer[10] << 8) | buffer[11];
 800367e:	7ebb      	ldrb	r3, [r7, #26]
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	b21a      	sxth	r2, r3
 8003684:	7efb      	ldrb	r3, [r7, #27]
 8003686:	b21b      	sxth	r3, r3
 8003688:	4313      	orrs	r3, r2
 800368a:	b21b      	sxth	r3, r3
 800368c:	b29b      	uxth	r3, r3
 800368e:	84fb      	strh	r3, [r7, #38]	@ 0x26

    return data;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	461c      	mov	r4, r3
 8003694:	f107 031c 	add.w	r3, r7, #28
 8003698:	cb07      	ldmia	r3!, {r0, r1, r2}
 800369a:	6020      	str	r0, [r4, #0]
 800369c:	6061      	str	r1, [r4, #4]
 800369e:	60a2      	str	r2, [r4, #8]
}
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	372c      	adds	r7, #44	@ 0x2c
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd90      	pop	{r4, r7, pc}
 80036a8:	20000898 	.word	0x20000898

080036ac <MS5607_Init>:
/** Reset and prepare for general usage.
 * This will reset the device and perform the PROM reading to find the conversion values and if
 * the communication is working.
 */
MS5607StateTypeDef MS5607_Init(SPI_HandleTypeDef *spi_handle, GPIO_TypeDef *chip_select_port, uint16_t chip_select_gpio_pin)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	4613      	mov	r3, r2
 80036b8:	80fb      	strh	r3, [r7, #6]
  hspi = spi_handle;
 80036ba:	4a16      	ldr	r2, [pc, #88]	@ (8003714 <MS5607_Init+0x68>)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6013      	str	r3, [r2, #0]
  ChipSelect_GPIO_Port = chip_select_port;
 80036c0:	4a15      	ldr	r2, [pc, #84]	@ (8003718 <MS5607_Init+0x6c>)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	6013      	str	r3, [r2, #0]
  ChipSelect_Pin = chip_select_gpio_pin;
 80036c6:	4a15      	ldr	r2, [pc, #84]	@ (800371c <MS5607_Init+0x70>)
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	8013      	strh	r3, [r2, #0]

  enableCSB();
 80036cc:	f000 fc0a 	bl	8003ee4 <enableCSB>
  SPITransmitData = RESET_COMMAND;
 80036d0:	4b13      	ldr	r3, [pc, #76]	@ (8003720 <MS5607_Init+0x74>)
 80036d2:	221e      	movs	r2, #30
 80036d4:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 80036d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003714 <MS5607_Init+0x68>)
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	230a      	movs	r3, #10
 80036dc:	2201      	movs	r2, #1
 80036de:	4910      	ldr	r1, [pc, #64]	@ (8003720 <MS5607_Init+0x74>)
 80036e0:	f005 fe26 	bl	8009330 <HAL_SPI_Transmit>
  HAL_Delay(3);
 80036e4:	2003      	movs	r0, #3
 80036e6:	f000 fc53 	bl	8003f90 <HAL_Delay>
  disableCSB();
 80036ea:	f000 fc0b 	bl	8003f04 <disableCSB>

  MS5607PromRead(&promData);
 80036ee:	480d      	ldr	r0, [pc, #52]	@ (8003724 <MS5607_Init+0x78>)
 80036f0:	f000 f81a 	bl	8003728 <MS5607PromRead>

  if (promData.reserved == 0x00 || promData.reserved == 0xff)
 80036f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003724 <MS5607_Init+0x78>)
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <MS5607_Init+0x58>
 80036fc:	4b09      	ldr	r3, [pc, #36]	@ (8003724 <MS5607_Init+0x78>)
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	2bff      	cmp	r3, #255	@ 0xff
 8003702:	d101      	bne.n	8003708 <MS5607_Init+0x5c>
    return MS5607_STATE_FAILED;
 8003704:	2300      	movs	r3, #0
 8003706:	e000      	b.n	800370a <MS5607_Init+0x5e>
  else
    return MS5607_STATE_READY;
 8003708:	2301      	movs	r3, #1
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	200008a4 	.word	0x200008a4
 8003718:	200008a8 	.word	0x200008a8
 800371c:	200008ac 	.word	0x200008ac
 8003720:	200008ae 	.word	0x200008ae
 8003724:	200008b4 	.word	0x200008b4

08003728 <MS5607PromRead>:

/* Performs a reading on the devices PROM. */
void MS5607PromRead(struct promData *prom)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint8_t address;
  uint16_t *structPointer;

  /* As the PROM is made of 8 16bit addresses I used a pointer for accessing the data structure */
  structPointer = (uint16_t *)prom;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	613b      	str	r3, [r7, #16]

  for (address = 0; address < 8; address++)
 8003734:	2300      	movs	r3, #0
 8003736:	75fb      	strb	r3, [r7, #23]
 8003738:	e020      	b.n	800377c <MS5607PromRead+0x54>
  {
    SPITransmitData = PROM_READ(address);
 800373a:	7dfb      	ldrb	r3, [r7, #23]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	b25b      	sxtb	r3, r3
 8003740:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8003744:	b25b      	sxtb	r3, r3
 8003746:	b2da      	uxtb	r2, r3
 8003748:	4b1e      	ldr	r3, [pc, #120]	@ (80037c4 <MS5607PromRead+0x9c>)
 800374a:	701a      	strb	r2, [r3, #0]
    enableCSB();
 800374c:	f000 fbca 	bl	8003ee4 <enableCSB>
    HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003750:	4b1d      	ldr	r3, [pc, #116]	@ (80037c8 <MS5607PromRead+0xa0>)
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	230a      	movs	r3, #10
 8003756:	2201      	movs	r2, #1
 8003758:	491a      	ldr	r1, [pc, #104]	@ (80037c4 <MS5607PromRead+0x9c>)
 800375a:	f005 fde9 	bl	8009330 <HAL_SPI_Transmit>
    /* Receive two bytes at once and stores it directly at the structure */
    HAL_SPI_Receive(hspi, structPointer, 2, 10);
 800375e:	4b1a      	ldr	r3, [pc, #104]	@ (80037c8 <MS5607PromRead+0xa0>)
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	230a      	movs	r3, #10
 8003764:	2202      	movs	r2, #2
 8003766:	6939      	ldr	r1, [r7, #16]
 8003768:	f005 ff58 	bl	800961c <HAL_SPI_Receive>
    disableCSB();
 800376c:	f000 fbca 	bl	8003f04 <disableCSB>
    structPointer++;
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	3302      	adds	r3, #2
 8003774:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 8003776:	7dfb      	ldrb	r3, [r7, #23]
 8003778:	3301      	adds	r3, #1
 800377a:	75fb      	strb	r3, [r7, #23]
 800377c:	7dfb      	ldrb	r3, [r7, #23]
 800377e:	2b07      	cmp	r3, #7
 8003780:	d9db      	bls.n	800373a <MS5607PromRead+0x12>
  }

  /* Byte swap on 16bit integers*/
  structPointer = (uint16_t *)prom;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 8003786:	2300      	movs	r3, #0
 8003788:	75fb      	strb	r3, [r7, #23]
 800378a:	e012      	b.n	80037b2 <MS5607PromRead+0x8a>
  {
    uint8_t *toSwap = (uint8_t *)structPointer;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	60fb      	str	r3, [r7, #12]
    uint8_t secondByte = toSwap[0];
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	72fb      	strb	r3, [r7, #11]
    toSwap[0] = toSwap[1];
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	785a      	ldrb	r2, [r3, #1]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	701a      	strb	r2, [r3, #0]
    toSwap[1] = secondByte;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3301      	adds	r3, #1
 80037a2:	7afa      	ldrb	r2, [r7, #11]
 80037a4:	701a      	strb	r2, [r3, #0]
    structPointer++;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	3302      	adds	r3, #2
 80037aa:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	3301      	adds	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	2b07      	cmp	r3, #7
 80037b6:	d9e9      	bls.n	800378c <MS5607PromRead+0x64>
  }
}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	200008ae 	.word	0x200008ae
 80037c8:	200008a4 	.word	0x200008a4

080037cc <MS5607UncompensatedRead>:

/* Performs a reading on the devices PROM. */
void MS5607UncompensatedRead(struct MS5607UncompensatedValues *uncompValues)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

  /*Sensor reply data buffer*/
  uint8_t reply[3];

  enableCSB();
 80037d4:	f000 fb86 	bl	8003ee4 <enableCSB>
  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D1_COMMAND | Pressure_OSR;
 80037d8:	4b54      	ldr	r3, [pc, #336]	@ (800392c <MS5607UncompensatedRead+0x160>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	4b53      	ldr	r3, [pc, #332]	@ (8003930 <MS5607UncompensatedRead+0x164>)
 80037e4:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 80037e6:	4b53      	ldr	r3, [pc, #332]	@ (8003934 <MS5607UncompensatedRead+0x168>)
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	230a      	movs	r3, #10
 80037ec:	2201      	movs	r2, #1
 80037ee:	4950      	ldr	r1, [pc, #320]	@ (8003930 <MS5607UncompensatedRead+0x164>)
 80037f0:	f005 fd9e 	bl	8009330 <HAL_SPI_Transmit>

  if (Pressure_OSR == 0x00)
 80037f4:	4b4d      	ldr	r3, [pc, #308]	@ (800392c <MS5607UncompensatedRead+0x160>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d103      	bne.n	8003804 <MS5607UncompensatedRead+0x38>
    HAL_Delay(1);
 80037fc:	2001      	movs	r0, #1
 80037fe:	f000 fbc7 	bl	8003f90 <HAL_Delay>
 8003802:	e01a      	b.n	800383a <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x02)
 8003804:	4b49      	ldr	r3, [pc, #292]	@ (800392c <MS5607UncompensatedRead+0x160>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b02      	cmp	r3, #2
 800380a:	d103      	bne.n	8003814 <MS5607UncompensatedRead+0x48>
    HAL_Delay(2);
 800380c:	2002      	movs	r0, #2
 800380e:	f000 fbbf 	bl	8003f90 <HAL_Delay>
 8003812:	e012      	b.n	800383a <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x04)
 8003814:	4b45      	ldr	r3, [pc, #276]	@ (800392c <MS5607UncompensatedRead+0x160>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b04      	cmp	r3, #4
 800381a:	d103      	bne.n	8003824 <MS5607UncompensatedRead+0x58>
    HAL_Delay(3);
 800381c:	2003      	movs	r0, #3
 800381e:	f000 fbb7 	bl	8003f90 <HAL_Delay>
 8003822:	e00a      	b.n	800383a <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x06)
 8003824:	4b41      	ldr	r3, [pc, #260]	@ (800392c <MS5607UncompensatedRead+0x160>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b06      	cmp	r3, #6
 800382a:	d103      	bne.n	8003834 <MS5607UncompensatedRead+0x68>
    HAL_Delay(5);
 800382c:	2005      	movs	r0, #5
 800382e:	f000 fbaf 	bl	8003f90 <HAL_Delay>
 8003832:	e002      	b.n	800383a <MS5607UncompensatedRead+0x6e>
  else
    HAL_Delay(10);
 8003834:	200a      	movs	r0, #10
 8003836:	f000 fbab 	bl	8003f90 <HAL_Delay>

  disableCSB();
 800383a:	f000 fb63 	bl	8003f04 <disableCSB>

  /* Performs the reading of the 24 bits from the ADC */

  enableCSB();
 800383e:	f000 fb51 	bl	8003ee4 <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 8003842:	4b3b      	ldr	r3, [pc, #236]	@ (8003930 <MS5607UncompensatedRead+0x164>)
 8003844:	2200      	movs	r2, #0
 8003846:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003848:	4b3a      	ldr	r3, [pc, #232]	@ (8003934 <MS5607UncompensatedRead+0x168>)
 800384a:	6818      	ldr	r0, [r3, #0]
 800384c:	230a      	movs	r3, #10
 800384e:	2201      	movs	r2, #1
 8003850:	4937      	ldr	r1, [pc, #220]	@ (8003930 <MS5607UncompensatedRead+0x164>)
 8003852:	f005 fd6d 	bl	8009330 <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, reply, 3, 10);
 8003856:	4b37      	ldr	r3, [pc, #220]	@ (8003934 <MS5607UncompensatedRead+0x168>)
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	f107 010c 	add.w	r1, r7, #12
 800385e:	230a      	movs	r3, #10
 8003860:	2203      	movs	r2, #3
 8003862:	f005 fedb 	bl	800961c <HAL_SPI_Receive>

  disableCSB();
 8003866:	f000 fb4d 	bl	8003f04 <disableCSB>

  /* Tranfer the 24bits read into a 32bit int */
  uncompValues->pressure = ((uint32_t)reply[0] << 16) | ((uint32_t)reply[1] << 8) | (uint32_t)reply[2];
 800386a:	7b3b      	ldrb	r3, [r7, #12]
 800386c:	041a      	lsls	r2, r3, #16
 800386e:	7b7b      	ldrb	r3, [r7, #13]
 8003870:	021b      	lsls	r3, r3, #8
 8003872:	4313      	orrs	r3, r2
 8003874:	7bba      	ldrb	r2, [r7, #14]
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	601a      	str	r2, [r3, #0]

  enableCSB();
 800387c:	f000 fb32 	bl	8003ee4 <enableCSB>

  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D2_COMMAND | Temperature_OSR;
 8003880:	4b2d      	ldr	r3, [pc, #180]	@ (8003938 <MS5607UncompensatedRead+0x16c>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8003888:	b2da      	uxtb	r2, r3
 800388a:	4b29      	ldr	r3, [pc, #164]	@ (8003930 <MS5607UncompensatedRead+0x164>)
 800388c:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 800388e:	4b29      	ldr	r3, [pc, #164]	@ (8003934 <MS5607UncompensatedRead+0x168>)
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	230a      	movs	r3, #10
 8003894:	2201      	movs	r2, #1
 8003896:	4926      	ldr	r1, [pc, #152]	@ (8003930 <MS5607UncompensatedRead+0x164>)
 8003898:	f005 fd4a 	bl	8009330 <HAL_SPI_Transmit>

  if (Temperature_OSR == 0x00)
 800389c:	4b26      	ldr	r3, [pc, #152]	@ (8003938 <MS5607UncompensatedRead+0x16c>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d103      	bne.n	80038ac <MS5607UncompensatedRead+0xe0>
    HAL_Delay(1);
 80038a4:	2001      	movs	r0, #1
 80038a6:	f000 fb73 	bl	8003f90 <HAL_Delay>
 80038aa:	e01a      	b.n	80038e2 <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x02)
 80038ac:	4b22      	ldr	r3, [pc, #136]	@ (8003938 <MS5607UncompensatedRead+0x16c>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d103      	bne.n	80038bc <MS5607UncompensatedRead+0xf0>
    HAL_Delay(2);
 80038b4:	2002      	movs	r0, #2
 80038b6:	f000 fb6b 	bl	8003f90 <HAL_Delay>
 80038ba:	e012      	b.n	80038e2 <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x04)
 80038bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003938 <MS5607UncompensatedRead+0x16c>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d103      	bne.n	80038cc <MS5607UncompensatedRead+0x100>
    HAL_Delay(3);
 80038c4:	2003      	movs	r0, #3
 80038c6:	f000 fb63 	bl	8003f90 <HAL_Delay>
 80038ca:	e00a      	b.n	80038e2 <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x06)
 80038cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003938 <MS5607UncompensatedRead+0x16c>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b06      	cmp	r3, #6
 80038d2:	d103      	bne.n	80038dc <MS5607UncompensatedRead+0x110>
    HAL_Delay(5);
 80038d4:	2005      	movs	r0, #5
 80038d6:	f000 fb5b 	bl	8003f90 <HAL_Delay>
 80038da:	e002      	b.n	80038e2 <MS5607UncompensatedRead+0x116>
  else
    HAL_Delay(10);
 80038dc:	200a      	movs	r0, #10
 80038de:	f000 fb57 	bl	8003f90 <HAL_Delay>

  disableCSB();
 80038e2:	f000 fb0f 	bl	8003f04 <disableCSB>

  enableCSB();
 80038e6:	f000 fafd 	bl	8003ee4 <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 80038ea:	4b11      	ldr	r3, [pc, #68]	@ (8003930 <MS5607UncompensatedRead+0x164>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 80038f0:	4b10      	ldr	r3, [pc, #64]	@ (8003934 <MS5607UncompensatedRead+0x168>)
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	230a      	movs	r3, #10
 80038f6:	2201      	movs	r2, #1
 80038f8:	490d      	ldr	r1, [pc, #52]	@ (8003930 <MS5607UncompensatedRead+0x164>)
 80038fa:	f005 fd19 	bl	8009330 <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, reply, 3, 10);
 80038fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003934 <MS5607UncompensatedRead+0x168>)
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	f107 010c 	add.w	r1, r7, #12
 8003906:	230a      	movs	r3, #10
 8003908:	2203      	movs	r2, #3
 800390a:	f005 fe87 	bl	800961c <HAL_SPI_Receive>

  disableCSB();
 800390e:	f000 faf9 	bl	8003f04 <disableCSB>

  /* Assemble the conversion command based on previously set OSR */
  uncompValues->temperature = ((uint32_t)reply[0] << 16) | ((uint32_t)reply[1] << 8) | (uint32_t)reply[2];
 8003912:	7b3b      	ldrb	r3, [r7, #12]
 8003914:	041a      	lsls	r2, r3, #16
 8003916:	7b7b      	ldrb	r3, [r7, #13]
 8003918:	021b      	lsls	r3, r3, #8
 800391a:	4313      	orrs	r3, r2
 800391c:	7bba      	ldrb	r2, [r7, #14]
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	605a      	str	r2, [r3, #4]
}
 8003924:	bf00      	nop
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	200008af 	.word	0x200008af
 8003930:	200008ae 	.word	0x200008ae
 8003934:	200008a4 	.word	0x200008a4
 8003938:	200008b0 	.word	0x200008b0

0800393c <MS5607Convert>:

/* Performs the data conversion according to the MS5607 datasheet */
void MS5607Convert(struct MS5607UncompensatedValues *sample, struct MS5607IntReadings *value)
{
 800393c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003940:	b0d7      	sub	sp, #348	@ 0x15c
 8003942:	af00      	add	r7, sp, #0
 8003944:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8003948:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
  int32_t dT;
  int32_t TEMP;
  int64_t OFF;
  int64_t SENS;

  dT = sample->temperature - ((int32_t)(promData.tref << 8));
 800394c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	4bda      	ldr	r3, [pc, #872]	@ (8003cbc <MS5607Convert+0x380>)
 8003954:	895b      	ldrh	r3, [r3, #10]
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

  TEMP = 2000 + (((int64_t)dT * promData.tempsens) >> 23);
 800395e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003962:	17da      	asrs	r2, r3, #31
 8003964:	469a      	mov	sl, r3
 8003966:	4693      	mov	fp, r2
 8003968:	4bd4      	ldr	r3, [pc, #848]	@ (8003cbc <MS5607Convert+0x380>)
 800396a:	899b      	ldrh	r3, [r3, #12]
 800396c:	b29b      	uxth	r3, r3
 800396e:	2200      	movs	r2, #0
 8003970:	4698      	mov	r8, r3
 8003972:	4691      	mov	r9, r2
 8003974:	fb08 f20b 	mul.w	r2, r8, fp
 8003978:	fb0a f309 	mul.w	r3, sl, r9
 800397c:	4413      	add	r3, r2
 800397e:	fbaa 4508 	umull	r4, r5, sl, r8
 8003982:	442b      	add	r3, r5
 8003984:	461d      	mov	r5, r3
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	0de2      	lsrs	r2, r4, #23
 8003990:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 8003994:	15eb      	asrs	r3, r5, #23
 8003996:	4613      	mov	r3, r2
 8003998:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800399c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

  OFF = ((int64_t)promData.off << 17) + (((int64_t)promData.tco * dT) >> 6);
 80039a0:	4bc6      	ldr	r3, [pc, #792]	@ (8003cbc <MS5607Convert+0x380>)
 80039a2:	889b      	ldrh	r3, [r3, #4]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2200      	movs	r2, #0
 80039a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80039ac:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80039b0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80039b4:	460b      	mov	r3, r1
 80039b6:	0bdb      	lsrs	r3, r3, #15
 80039b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80039bc:	460b      	mov	r3, r1
 80039be:	045b      	lsls	r3, r3, #17
 80039c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039c4:	4bbd      	ldr	r3, [pc, #756]	@ (8003cbc <MS5607Convert+0x380>)
 80039c6:	891b      	ldrh	r3, [r3, #8]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2200      	movs	r2, #0
 80039cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039d0:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80039d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80039d8:	17da      	asrs	r2, r3, #31
 80039da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039de:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039e2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80039e6:	462b      	mov	r3, r5
 80039e8:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80039ec:	4642      	mov	r2, r8
 80039ee:	fb02 f203 	mul.w	r2, r2, r3
 80039f2:	464b      	mov	r3, r9
 80039f4:	4621      	mov	r1, r4
 80039f6:	fb01 f303 	mul.w	r3, r1, r3
 80039fa:	4413      	add	r3, r2
 80039fc:	4622      	mov	r2, r4
 80039fe:	4641      	mov	r1, r8
 8003a00:	fba2 1201 	umull	r1, r2, r2, r1
 8003a04:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8003a08:	460a      	mov	r2, r1
 8003a0a:	f8c7 2108 	str.w	r2, [r7, #264]	@ 0x108
 8003a0e:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8003a12:	4413      	add	r3, r2
 8003a14:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8003a24:	4621      	mov	r1, r4
 8003a26:	098a      	lsrs	r2, r1, #6
 8003a28:	4629      	mov	r1, r5
 8003a2a:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8003a2e:	4629      	mov	r1, r5
 8003a30:	118b      	asrs	r3, r1, #6
 8003a32:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8003a36:	4621      	mov	r1, r4
 8003a38:	1889      	adds	r1, r1, r2
 8003a3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	eb43 0101 	adc.w	r1, r3, r1
 8003a42:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8003a44:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8003a48:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
  SENS = ((int64_t)promData.sens << 16) + (((int64_t)promData.tcs * dT) >> 7);
 8003a4c:	4b9b      	ldr	r3, [pc, #620]	@ (8003cbc <MS5607Convert+0x380>)
 8003a4e:	885b      	ldrh	r3, [r3, #2]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2200      	movs	r2, #0
 8003a54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a5c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003a60:	460b      	mov	r3, r1
 8003a62:	0c1b      	lsrs	r3, r3, #16
 8003a64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a68:	460b      	mov	r3, r1
 8003a6a:	041b      	lsls	r3, r3, #16
 8003a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a70:	4b92      	ldr	r3, [pc, #584]	@ (8003cbc <MS5607Convert+0x380>)
 8003a72:	88db      	ldrh	r3, [r3, #6]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003a84:	17da      	asrs	r2, r3, #31
 8003a86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a8a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a8e:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8003a92:	462b      	mov	r3, r5
 8003a94:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a98:	4642      	mov	r2, r8
 8003a9a:	fb02 f203 	mul.w	r2, r2, r3
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	fb01 f303 	mul.w	r3, r1, r3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	4622      	mov	r2, r4
 8003aaa:	4641      	mov	r1, r8
 8003aac:	fba2 1201 	umull	r1, r2, r2, r1
 8003ab0:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8003ab4:	460a      	mov	r2, r1
 8003ab6:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8003aba:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8003abe:	4413      	add	r3, r2
 8003ac0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	09ca      	lsrs	r2, r1, #7
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8003ada:	4629      	mov	r1, r5
 8003adc:	11cb      	asrs	r3, r1, #7
 8003ade:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	1889      	adds	r1, r1, r2
 8003ae6:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ae8:	4629      	mov	r1, r5
 8003aea:	eb43 0101 	adc.w	r1, r3, r1
 8003aee:	6379      	str	r1, [r7, #52]	@ 0x34
 8003af0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003af4:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140

  /**/
  if (TEMP < 2000)
 8003af8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003afc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003b00:	f280 8152 	bge.w	8003da8 <MS5607Convert+0x46c>
  {
    int32_t T2 = ((int64_t)dT * (int64_t)dT) >> 31;
 8003b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003b08:	17da      	asrs	r2, r3, #31
 8003b0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b0e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003b16:	17da      	asrs	r2, r3, #31
 8003b18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b1c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b20:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8003b24:	462b      	mov	r3, r5
 8003b26:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8003b2a:	4642      	mov	r2, r8
 8003b2c:	fb02 f203 	mul.w	r2, r2, r3
 8003b30:	464b      	mov	r3, r9
 8003b32:	4621      	mov	r1, r4
 8003b34:	fb01 f303 	mul.w	r3, r1, r3
 8003b38:	4413      	add	r3, r2
 8003b3a:	4622      	mov	r2, r4
 8003b3c:	4641      	mov	r1, r8
 8003b3e:	fba2 1201 	umull	r1, r2, r2, r1
 8003b42:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8003b46:	460a      	mov	r2, r1
 8003b48:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8003b4c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8003b50:	4413      	add	r3, r2
 8003b52:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8003b62:	4621      	mov	r1, r4
 8003b64:	0fca      	lsrs	r2, r1, #31
 8003b66:	4629      	mov	r1, r5
 8003b68:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	17cb      	asrs	r3, r1, #31
 8003b70:	4613      	mov	r3, r2
 8003b72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    int32_t TEMPM = TEMP - 2000;
 8003b76:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003b7a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8003b7e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    int64_t OFF2 = (61 * (int64_t)TEMPM * (int64_t)TEMPM) >> 4;
 8003b82:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003b86:	17da      	asrs	r2, r3, #31
 8003b88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b90:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003b94:	17da      	asrs	r2, r3, #31
 8003b96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b9a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003b9e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8003ba2:	462b      	mov	r3, r5
 8003ba4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8003ba8:	4642      	mov	r2, r8
 8003baa:	fb02 f203 	mul.w	r2, r2, r3
 8003bae:	464b      	mov	r3, r9
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	4622      	mov	r2, r4
 8003bba:	4641      	mov	r1, r8
 8003bbc:	fba2 1201 	umull	r1, r2, r2, r1
 8003bc0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003bc4:	460a      	mov	r2, r1
 8003bc6:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8003bca:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8003bce:	4413      	add	r3, r2
 8003bd0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003bd4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8003bd8:	4622      	mov	r2, r4
 8003bda:	462b      	mov	r3, r5
 8003bdc:	f04f 0000 	mov.w	r0, #0
 8003be0:	f04f 0100 	mov.w	r1, #0
 8003be4:	0119      	lsls	r1, r3, #4
 8003be6:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8003bea:	0110      	lsls	r0, r2, #4
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	1a51      	subs	r1, r2, r1
 8003bf4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003bf6:	4629      	mov	r1, r5
 8003bf8:	eb63 0301 	sbc.w	r3, r3, r1
 8003bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003c0a:	4649      	mov	r1, r9
 8003c0c:	008b      	lsls	r3, r1, #2
 8003c0e:	4641      	mov	r1, r8
 8003c10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c14:	4641      	mov	r1, r8
 8003c16:	008a      	lsls	r2, r1, #2
 8003c18:	4610      	mov	r0, r2
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	4622      	mov	r2, r4
 8003c20:	189b      	adds	r3, r3, r2
 8003c22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c24:	462b      	mov	r3, r5
 8003c26:	460a      	mov	r2, r1
 8003c28:	eb42 0303 	adc.w	r3, r2, r3
 8003c2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003c3a:	4621      	mov	r1, r4
 8003c3c:	090a      	lsrs	r2, r1, #4
 8003c3e:	4629      	mov	r1, r5
 8003c40:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8003c44:	4629      	mov	r1, r5
 8003c46:	110b      	asrs	r3, r1, #4
 8003c48:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    int64_t SENS2 = 2 * (int64_t)TEMPM * (int64_t)TEMPM;
 8003c4c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003c50:	17da      	asrs	r2, r3, #31
 8003c52:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c54:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c56:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003c5a:	17da      	asrs	r2, r3, #31
 8003c5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c60:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8003c64:	462b      	mov	r3, r5
 8003c66:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8003c6a:	4642      	mov	r2, r8
 8003c6c:	fb02 f203 	mul.w	r2, r2, r3
 8003c70:	464b      	mov	r3, r9
 8003c72:	4621      	mov	r1, r4
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	4413      	add	r3, r2
 8003c7a:	4622      	mov	r2, r4
 8003c7c:	4641      	mov	r1, r8
 8003c7e:	fba2 1201 	umull	r1, r2, r2, r1
 8003c82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003c86:	460a      	mov	r2, r1
 8003c88:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8003c8c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003c90:	4413      	add	r3, r2
 8003c92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003c96:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	18db      	adds	r3, r3, r3
 8003c9e:	623b      	str	r3, [r7, #32]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	eb42 0303 	adc.w	r3, r2, r3
 8003ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ca8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003cac:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    if (TEMP < -1500)
 8003cb0:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8003cb4:	4b02      	ldr	r3, [pc, #8]	@ (8003cc0 <MS5607Convert+0x384>)
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	da55      	bge.n	8003d66 <MS5607Convert+0x42a>
 8003cba:	e003      	b.n	8003cc4 <MS5607Convert+0x388>
 8003cbc:	200008b4 	.word	0x200008b4
 8003cc0:	fffffa24 	.word	0xfffffa24
    {
      int32_t TEMPP = TEMP + 1500;
 8003cc4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003cc8:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8003ccc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      int32_t TEMPP2 = TEMPP * TEMPP;
 8003cd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003cd4:	fb03 f303 	mul.w	r3, r3, r3
 8003cd8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
      OFF2 = OFF2 + (int64_t)15 * TEMPP2;
 8003cdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ce0:	17da      	asrs	r2, r3, #31
 8003ce2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ce4:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ce6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003cea:	4622      	mov	r2, r4
 8003cec:	462b      	mov	r3, r5
 8003cee:	f04f 0000 	mov.w	r0, #0
 8003cf2:	f04f 0100 	mov.w	r1, #0
 8003cf6:	0119      	lsls	r1, r3, #4
 8003cf8:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8003cfc:	0110      	lsls	r0, r2, #4
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4621      	mov	r1, r4
 8003d04:	1a51      	subs	r1, r2, r1
 8003d06:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d08:	4629      	mov	r1, r5
 8003d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d10:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8003d14:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8003d18:	4621      	mov	r1, r4
 8003d1a:	1851      	adds	r1, r2, r1
 8003d1c:	61b9      	str	r1, [r7, #24]
 8003d1e:	4629      	mov	r1, r5
 8003d20:	eb43 0101 	adc.w	r1, r3, r1
 8003d24:	61f9      	str	r1, [r7, #28]
 8003d26:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003d2a:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
      SENS2 = SENS2 + (int64_t)8 * TEMPP2;
 8003d2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d32:	17da      	asrs	r2, r3, #31
 8003d34:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d36:	657a      	str	r2, [r7, #84]	@ 0x54
 8003d38:	f04f 0000 	mov.w	r0, #0
 8003d3c:	f04f 0100 	mov.w	r1, #0
 8003d40:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8003d44:	462b      	mov	r3, r5
 8003d46:	00d9      	lsls	r1, r3, #3
 8003d48:	4623      	mov	r3, r4
 8003d4a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8003d4e:	4623      	mov	r3, r4
 8003d50:	00d8      	lsls	r0, r3, #3
 8003d52:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8003d56:	1814      	adds	r4, r2, r0
 8003d58:	613c      	str	r4, [r7, #16]
 8003d5a:	414b      	adcs	r3, r1
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003d62:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    }
    TEMP -= T2;
 8003d66:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8003d6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    OFF -= OFF2;
 8003d74:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8003d78:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8003d7c:	1a84      	subs	r4, r0, r2
 8003d7e:	60bc      	str	r4, [r7, #8]
 8003d80:	eb61 0303 	sbc.w	r3, r1, r3
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003d8a:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
    SENS -= SENS2;
 8003d8e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8003d92:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8003d96:	1a84      	subs	r4, r0, r2
 8003d98:	603c      	str	r4, [r7, #0]
 8003d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8003d9e:	607b      	str	r3, [r7, #4]
 8003da0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003da4:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
  }

  value->pressure = ((((int64_t)sample->pressure * SENS) >> 21) - OFF) >> 15;
 8003da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2200      	movs	r2, #0
 8003db0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003db2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003db4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003db8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003dbc:	462a      	mov	r2, r5
 8003dbe:	fb02 f203 	mul.w	r2, r2, r3
 8003dc2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	fb01 f303 	mul.w	r3, r1, r3
 8003dcc:	4413      	add	r3, r2
 8003dce:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	fba2 1201 	umull	r1, r2, r2, r1
 8003dd8:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8003ddc:	460a      	mov	r2, r1
 8003dde:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8003de2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003de6:	4413      	add	r3, r2
 8003de8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8003df8:	4621      	mov	r1, r4
 8003dfa:	0d4a      	lsrs	r2, r1, #21
 8003dfc:	4629      	mov	r1, r5
 8003dfe:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8003e02:	4629      	mov	r1, r5
 8003e04:	154b      	asrs	r3, r1, #21
 8003e06:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8003e0a:	1a14      	subs	r4, r2, r0
 8003e0c:	643c      	str	r4, [r7, #64]	@ 0x40
 8003e0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e12:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8003e20:	4621      	mov	r1, r4
 8003e22:	0bca      	lsrs	r2, r1, #15
 8003e24:	4629      	mov	r1, r5
 8003e26:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	13cb      	asrs	r3, r1, #15
 8003e2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003e32:	601a      	str	r2, [r3, #0]
  value->temperature = TEMP;
 8003e34:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003e38:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8003e3c:	605a      	str	r2, [r3, #4]
}
 8003e3e:	bf00      	nop
 8003e40:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 8003e44:	46bd      	mov	sp, r7
 8003e46:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003e4a:	4770      	bx	lr

08003e4c <MS5607Update>:

/* Performs the sensor reading updating the data structures */
void MS5607Update(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  MS5607UncompensatedRead(&uncompValues);
 8003e50:	4804      	ldr	r0, [pc, #16]	@ (8003e64 <MS5607Update+0x18>)
 8003e52:	f7ff fcbb 	bl	80037cc <MS5607UncompensatedRead>
  MS5607Convert(&uncompValues, &readings);
 8003e56:	4904      	ldr	r1, [pc, #16]	@ (8003e68 <MS5607Update+0x1c>)
 8003e58:	4802      	ldr	r0, [pc, #8]	@ (8003e64 <MS5607Update+0x18>)
 8003e5a:	f7ff fd6f 	bl	800393c <MS5607Convert>
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	200008c4 	.word	0x200008c4
 8003e68:	200008cc 	.word	0x200008cc

08003e6c <MS5607ReadValues>:

MS5607Readings MS5607ReadValues(void)
{
 8003e6c:	b5b0      	push	{r4, r5, r7, lr}
 8003e6e:	b08c      	sub	sp, #48	@ 0x30
 8003e70:	af00      	add	r7, sp, #0
  MS5607Update();
 8003e72:	f7ff ffeb 	bl	8003e4c <MS5607Update>
  return (MS5607Readings){.pressure_kPa = readings.pressure / 1000.0, .temperature_C = readings.temperature / 100.0};
 8003e76:	4b18      	ldr	r3, [pc, #96]	@ (8003ed8 <MS5607ReadValues+0x6c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fc fb7a 	bl	8000574 <__aeabi_i2d>
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	4b15      	ldr	r3, [pc, #84]	@ (8003edc <MS5607ReadValues+0x70>)
 8003e86:	f7fc fd09 	bl	800089c <__aeabi_ddiv>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4614      	mov	r4, r2
 8003e90:	461d      	mov	r5, r3
 8003e92:	4b11      	ldr	r3, [pc, #68]	@ (8003ed8 <MS5607ReadValues+0x6c>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fc fb6c 	bl	8000574 <__aeabi_i2d>
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee0 <MS5607ReadValues+0x74>)
 8003ea2:	f7fc fcfb 	bl	800089c <__aeabi_ddiv>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	e9c7 4508 	strd	r4, r5, [r7, #32]
 8003eae:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8003eb2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003eb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003eba:	ec41 0b16 	vmov	d6, r0, r1
 8003ebe:	ec43 2b17 	vmov	d7, r2, r3
}
 8003ec2:	eeb0 0a46 	vmov.f32	s0, s12
 8003ec6:	eef0 0a66 	vmov.f32	s1, s13
 8003eca:	eeb0 1a47 	vmov.f32	s2, s14
 8003ece:	eef0 1a67 	vmov.f32	s3, s15
 8003ed2:	3730      	adds	r7, #48	@ 0x30
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ed8:	200008cc 	.word	0x200008cc
 8003edc:	408f4000 	.word	0x408f4000
 8003ee0:	40590000 	.word	0x40590000

08003ee4 <enableCSB>:
  return readings.pressure / 1000.0;
}

/* Sets the CS pin */
void enableCSB(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_RESET);
 8003ee8:	4b04      	ldr	r3, [pc, #16]	@ (8003efc <enableCSB+0x18>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a04      	ldr	r2, [pc, #16]	@ (8003f00 <enableCSB+0x1c>)
 8003eee:	8811      	ldrh	r1, [r2, #0]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f001 ff22 	bl	8005d3c <HAL_GPIO_WritePin>
}
 8003ef8:	bf00      	nop
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	200008a8 	.word	0x200008a8
 8003f00:	200008ac 	.word	0x200008ac

08003f04 <disableCSB>:

/* Sets the CS pin */
void disableCSB(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_SET);
 8003f08:	4b04      	ldr	r3, [pc, #16]	@ (8003f1c <disableCSB+0x18>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a04      	ldr	r2, [pc, #16]	@ (8003f20 <disableCSB+0x1c>)
 8003f0e:	8811      	ldrh	r1, [r2, #0]
 8003f10:	2201      	movs	r2, #1
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 ff12 	bl	8005d3c <HAL_GPIO_WritePin>
}
 8003f18:	bf00      	nop
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	200008a8 	.word	0x200008a8
 8003f20:	200008ac 	.word	0x200008ac

08003f24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f2e:	2003      	movs	r0, #3
 8003f30:	f001 fa11 	bl	8005356 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f34:	200f      	movs	r0, #15
 8003f36:	f7fe fdeb 	bl	8002b10 <HAL_InitTick>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	71fb      	strb	r3, [r7, #7]
 8003f44:	e001      	b.n	8003f4a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f46:	f7fe f985 	bl	8002254 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f4a:	79fb      	ldrb	r3, [r7, #7]

}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f58:	4b05      	ldr	r3, [pc, #20]	@ (8003f70 <HAL_IncTick+0x1c>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	4b05      	ldr	r3, [pc, #20]	@ (8003f74 <HAL_IncTick+0x20>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4413      	add	r3, r2
 8003f62:	4a03      	ldr	r2, [pc, #12]	@ (8003f70 <HAL_IncTick+0x1c>)
 8003f64:	6013      	str	r3, [r2, #0]
}
 8003f66:	bf00      	nop
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	200008d4 	.word	0x200008d4
 8003f74:	20000008 	.word	0x20000008

08003f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f7c:	4b03      	ldr	r3, [pc, #12]	@ (8003f8c <HAL_GetTick+0x14>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	200008d4 	.word	0x200008d4

08003f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f98:	f7ff ffee 	bl	8003f78 <HAL_GetTick>
 8003f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fa8:	d004      	beq.n	8003fb4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003faa:	4b09      	ldr	r3, [pc, #36]	@ (8003fd0 <HAL_Delay+0x40>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fb4:	bf00      	nop
 8003fb6:	f7ff ffdf 	bl	8003f78 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d8f7      	bhi.n	8003fb6 <HAL_Delay+0x26>
  {
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000008 	.word	0x20000008

08003fd4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8003fdc:	4b06      	ldr	r3, [pc, #24]	@ (8003ff8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f023 0202 	bic.w	r2, r3, #2
 8003fe4:	4904      	ldr	r1, [pc, #16]	@ (8003ff8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	600b      	str	r3, [r1, #0]
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	40010030 	.word	0x40010030

08003ffc <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8004000:	4b05      	ldr	r3, [pc, #20]	@ (8004018 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a04      	ldr	r2, [pc, #16]	@ (8004018 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	6013      	str	r3, [r2, #0]
}
 800400c:	bf00      	nop
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40010030 	.word	0x40010030

0800401c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	609a      	str	r2, [r3, #8]
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	609a      	str	r2, [r3, #8]
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3360      	adds	r3, #96	@ 0x60
 8004096:	461a      	mov	r2, r3
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4b08      	ldr	r3, [pc, #32]	@ (80040c8 <LL_ADC_SetOffset+0x44>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	03fff000 	.word	0x03fff000

080040cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3360      	adds	r3, #96	@ 0x60
 80040da:	461a      	mov	r2, r3
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3360      	adds	r3, #96	@ 0x60
 8004108:	461a      	mov	r2, r3
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	431a      	orrs	r2, r3
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800412e:	b480      	push	{r7}
 8004130:	b087      	sub	sp, #28
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	3360      	adds	r3, #96	@ 0x60
 800413e:	461a      	mov	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	431a      	orrs	r2, r3
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004158:	bf00      	nop
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3360      	adds	r3, #96	@ 0x60
 8004174:	461a      	mov	r2, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	431a      	orrs	r2, r3
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	615a      	str	r2, [r3, #20]
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3330      	adds	r3, #48	@ 0x30
 80041d0:	461a      	mov	r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	0a1b      	lsrs	r3, r3, #8
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	f003 030c 	and.w	r3, r3, #12
 80041dc:	4413      	add	r3, r2
 80041de:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	211f      	movs	r1, #31
 80041ec:	fa01 f303 	lsl.w	r3, r1, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	401a      	ands	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	0e9b      	lsrs	r3, r3, #26
 80041f8:	f003 011f 	and.w	r1, r3, #31
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f003 031f 	and.w	r3, r3, #31
 8004202:	fa01 f303 	lsl.w	r3, r1, r3
 8004206:	431a      	orrs	r2, r3
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3314      	adds	r3, #20
 8004228:	461a      	mov	r2, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	0e5b      	lsrs	r3, r3, #25
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	4413      	add	r3, r2
 8004236:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	0d1b      	lsrs	r3, r3, #20
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2107      	movs	r1, #7
 8004246:	fa01 f303 	lsl.w	r3, r1, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	401a      	ands	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	0d1b      	lsrs	r3, r3, #20
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	fa01 f303 	lsl.w	r3, r1, r3
 800425c:	431a      	orrs	r2, r3
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
	...

08004270 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004288:	43db      	mvns	r3, r3
 800428a:	401a      	ands	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f003 0318 	and.w	r3, r3, #24
 8004292:	4908      	ldr	r1, [pc, #32]	@ (80042b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004294:	40d9      	lsrs	r1, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	400b      	ands	r3, r1
 800429a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800429e:	431a      	orrs	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80042a6:	bf00      	nop
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	0007ffff 	.word	0x0007ffff

080042b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80042c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6093      	str	r3, [r2, #8]
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042f0:	d101      	bne.n	80042f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004314:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004318:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800433c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004340:	d101      	bne.n	8004346 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <LL_ADC_IsEnabled+0x18>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <LL_ADC_IsEnabled+0x1a>
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b04      	cmp	r3, #4
 800438c:	d101      	bne.n	8004392 <LL_ADC_REG_IsConversionOngoing+0x18>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d101      	bne.n	80043b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043c8:	b590      	push	{r4, r7, lr}
 80043ca:	b089      	sub	sp, #36	@ 0x24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e19b      	b.n	800471a <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d109      	bne.n	8004404 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7fd ff67 	bl	80022c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff ff67 	bl	80042dc <LL_ADC_IsDeepPowerDownEnabled>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d004      	beq.n	800441e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff ff4d 	bl	80042b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff ff82 	bl	800432c <LL_ADC_IsInternalRegulatorEnabled>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d115      	bne.n	800445a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff ff66 	bl	8004304 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004438:	4b97      	ldr	r3, [pc, #604]	@ (8004698 <HAL_ADC_Init+0x2d0>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	099b      	lsrs	r3, r3, #6
 800443e:	4a97      	ldr	r2, [pc, #604]	@ (800469c <HAL_ADC_Init+0x2d4>)
 8004440:	fba2 2303 	umull	r2, r3, r2, r3
 8004444:	099b      	lsrs	r3, r3, #6
 8004446:	3301      	adds	r3, #1
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800444c:	e002      	b.n	8004454 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3b01      	subs	r3, #1
 8004452:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f9      	bne.n	800444e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff ff64 	bl	800432c <LL_ADC_IsInternalRegulatorEnabled>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10d      	bne.n	8004486 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800446e:	f043 0210 	orr.w	r2, r3, #16
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800447a:	f043 0201 	orr.w	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff ff75 	bl	800437a <LL_ADC_REG_IsConversionOngoing>
 8004490:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	2b00      	cmp	r3, #0
 800449c:	f040 8134 	bne.w	8004708 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f040 8130 	bne.w	8004708 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80044b0:	f043 0202 	orr.w	r2, r3, #2
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff ff49 	bl	8004354 <LL_ADC_IsEnabled>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d137      	bne.n	8004538 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044d0:	d004      	beq.n	80044dc <HAL_ADC_Init+0x114>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a72      	ldr	r2, [pc, #456]	@ (80046a0 <HAL_ADC_Init+0x2d8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d10f      	bne.n	80044fc <HAL_ADC_Init+0x134>
 80044dc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80044e0:	f7ff ff38 	bl	8004354 <LL_ADC_IsEnabled>
 80044e4:	4604      	mov	r4, r0
 80044e6:	486e      	ldr	r0, [pc, #440]	@ (80046a0 <HAL_ADC_Init+0x2d8>)
 80044e8:	f7ff ff34 	bl	8004354 <LL_ADC_IsEnabled>
 80044ec:	4603      	mov	r3, r0
 80044ee:	4323      	orrs	r3, r4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bf0c      	ite	eq
 80044f4:	2301      	moveq	r3, #1
 80044f6:	2300      	movne	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	e008      	b.n	800450e <HAL_ADC_Init+0x146>
 80044fc:	4869      	ldr	r0, [pc, #420]	@ (80046a4 <HAL_ADC_Init+0x2dc>)
 80044fe:	f7ff ff29 	bl	8004354 <LL_ADC_IsEnabled>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	bf0c      	ite	eq
 8004508:	2301      	moveq	r3, #1
 800450a:	2300      	movne	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d012      	beq.n	8004538 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800451a:	d004      	beq.n	8004526 <HAL_ADC_Init+0x15e>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a5f      	ldr	r2, [pc, #380]	@ (80046a0 <HAL_ADC_Init+0x2d8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d101      	bne.n	800452a <HAL_ADC_Init+0x162>
 8004526:	4a60      	ldr	r2, [pc, #384]	@ (80046a8 <HAL_ADC_Init+0x2e0>)
 8004528:	e000      	b.n	800452c <HAL_ADC_Init+0x164>
 800452a:	4a60      	ldr	r2, [pc, #384]	@ (80046ac <HAL_ADC_Init+0x2e4>)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f7ff fd72 	bl	800401c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	7f5b      	ldrb	r3, [r3, #29]
 800453c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004542:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004548:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800454e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004556:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004558:	4313      	orrs	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004562:	2b01      	cmp	r3, #1
 8004564:	d106      	bne.n	8004574 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456a:	3b01      	subs	r3, #1
 800456c:	045b      	lsls	r3, r3, #17
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4313      	orrs	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004578:	2b00      	cmp	r3, #0
 800457a:	d009      	beq.n	8004590 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004580:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004588:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	4313      	orrs	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	4b46      	ldr	r3, [pc, #280]	@ (80046b0 <HAL_ADC_Init+0x2e8>)
 8004598:	4013      	ands	r3, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	69b9      	ldr	r1, [r7, #24]
 80045a0:	430b      	orrs	r3, r1
 80045a2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff feee 	bl	80043a0 <LL_ADC_INJ_IsConversionOngoing>
 80045c4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d17b      	bne.n	80046c4 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d178      	bne.n	80046c4 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80045d6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80045de:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80045e0:	4313      	orrs	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045ee:	f023 0302 	bic.w	r3, r3, #2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	69b9      	ldr	r1, [r7, #24]
 80045f8:	430b      	orrs	r3, r1
 80045fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d017      	beq.n	8004634 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004612:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800461c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004620:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6911      	ldr	r1, [r2, #16]
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	430b      	orrs	r3, r1
 800462e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004632:	e013      	b.n	800465c <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004642:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004654:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004658:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004662:	2b01      	cmp	r3, #1
 8004664:	d126      	bne.n	80046b4 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004670:	f023 0304 	bic.w	r3, r3, #4
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800467c:	4311      	orrs	r1, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004682:	4311      	orrs	r1, r2
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004688:	430a      	orrs	r2, r1
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0201 	orr.w	r2, r2, #1
 8004694:	611a      	str	r2, [r3, #16]
 8004696:	e015      	b.n	80046c4 <HAL_ADC_Init+0x2fc>
 8004698:	20000000 	.word	0x20000000
 800469c:	053e2d63 	.word	0x053e2d63
 80046a0:	50000100 	.word	0x50000100
 80046a4:	50000400 	.word	0x50000400
 80046a8:	50000300 	.word	0x50000300
 80046ac:	50000700 	.word	0x50000700
 80046b0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691a      	ldr	r2, [r3, #16]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d10c      	bne.n	80046e6 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d2:	f023 010f 	bic.w	r1, r3, #15
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	1e5a      	subs	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80046e4:	e007      	b.n	80046f6 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 020f 	bic.w	r2, r2, #15
 80046f4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fa:	f023 0303 	bic.w	r3, r3, #3
 80046fe:	f043 0201 	orr.w	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004706:	e007      	b.n	8004718 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800470c:	f043 0210 	orr.w	r2, r3, #16
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004718:	7ffb      	ldrb	r3, [r7, #31]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3724      	adds	r7, #36	@ 0x24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd90      	pop	{r4, r7, pc}
 8004722:	bf00      	nop

08004724 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b0b6      	sub	sp, #216	@ 0xd8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800473e:	2b01      	cmp	r3, #1
 8004740:	d102      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x24>
 8004742:	2302      	movs	r3, #2
 8004744:	f000 bc04 	b.w	8004f50 <HAL_ADC_ConfigChannel+0x82c>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff fe10 	bl	800437a <LL_ADC_REG_IsConversionOngoing>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	f040 83e8 	bne.w	8004f32 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6859      	ldr	r1, [r3, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	f7ff fd26 	bl	80041c0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff fdfe 	bl	800437a <LL_ADC_REG_IsConversionOngoing>
 800477e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff fe0a 	bl	80043a0 <LL_ADC_INJ_IsConversionOngoing>
 800478c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004790:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004794:	2b00      	cmp	r3, #0
 8004796:	f040 81d9 	bne.w	8004b4c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800479a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f040 81d4 	bne.w	8004b4c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047ac:	d10f      	bne.n	80047ce <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2200      	movs	r2, #0
 80047b8:	4619      	mov	r1, r3
 80047ba:	f7ff fd2d 	bl	8004218 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff fce7 	bl	800419a <LL_ADC_SetSamplingTimeCommonConfig>
 80047cc:	e00e      	b.n	80047ec <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	6819      	ldr	r1, [r3, #0]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	461a      	mov	r2, r3
 80047dc:	f7ff fd1c 	bl	8004218 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2100      	movs	r1, #0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fcd7 	bl	800419a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	695a      	ldr	r2, [r3, #20]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	08db      	lsrs	r3, r3, #3
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	2b04      	cmp	r3, #4
 800480c:	d022      	beq.n	8004854 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6919      	ldr	r1, [r3, #16]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800481e:	f7ff fc31 	bl	8004084 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6919      	ldr	r1, [r3, #16]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	461a      	mov	r2, r3
 8004830:	f7ff fc7d 	bl	800412e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004840:	2b01      	cmp	r3, #1
 8004842:	d102      	bne.n	800484a <HAL_ADC_ConfigChannel+0x126>
 8004844:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004848:	e000      	b.n	800484c <HAL_ADC_ConfigChannel+0x128>
 800484a:	2300      	movs	r3, #0
 800484c:	461a      	mov	r2, r3
 800484e:	f7ff fc89 	bl	8004164 <LL_ADC_SetOffsetSaturation>
 8004852:	e17b      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2100      	movs	r1, #0
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff fc36 	bl	80040cc <LL_ADC_GetOffsetChannel>
 8004860:	4603      	mov	r3, r0
 8004862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10a      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x15c>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2100      	movs	r1, #0
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff fc2b 	bl	80040cc <LL_ADC_GetOffsetChannel>
 8004876:	4603      	mov	r3, r0
 8004878:	0e9b      	lsrs	r3, r3, #26
 800487a:	f003 021f 	and.w	r2, r3, #31
 800487e:	e01e      	b.n	80048be <HAL_ADC_ConfigChannel+0x19a>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2100      	movs	r1, #0
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff fc20 	bl	80040cc <LL_ADC_GetOffsetChannel>
 800488c:	4603      	mov	r3, r0
 800488e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004892:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004896:	fa93 f3a3 	rbit	r3, r3
 800489a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800489e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80048a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80048a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80048ae:	2320      	movs	r3, #32
 80048b0:	e004      	b.n	80048bc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80048b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048b6:	fab3 f383 	clz	r3, r3
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d105      	bne.n	80048d6 <HAL_ADC_ConfigChannel+0x1b2>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	0e9b      	lsrs	r3, r3, #26
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	e018      	b.n	8004908 <HAL_ADC_ConfigChannel+0x1e4>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048e2:	fa93 f3a3 	rbit	r3, r3
 80048e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80048ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80048f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80048fa:	2320      	movs	r3, #32
 80048fc:	e004      	b.n	8004908 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80048fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004902:	fab3 f383 	clz	r3, r3
 8004906:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004908:	429a      	cmp	r2, r3
 800490a:	d106      	bne.n	800491a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2200      	movs	r2, #0
 8004912:	2100      	movs	r1, #0
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff fbef 	bl	80040f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2101      	movs	r1, #1
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff fbd3 	bl	80040cc <LL_ADC_GetOffsetChannel>
 8004926:	4603      	mov	r3, r0
 8004928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x222>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2101      	movs	r1, #1
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff fbc8 	bl	80040cc <LL_ADC_GetOffsetChannel>
 800493c:	4603      	mov	r3, r0
 800493e:	0e9b      	lsrs	r3, r3, #26
 8004940:	f003 021f 	and.w	r2, r3, #31
 8004944:	e01e      	b.n	8004984 <HAL_ADC_ConfigChannel+0x260>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2101      	movs	r1, #1
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff fbbd 	bl	80040cc <LL_ADC_GetOffsetChannel>
 8004952:	4603      	mov	r3, r0
 8004954:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004958:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800495c:	fa93 f3a3 	rbit	r3, r3
 8004960:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004964:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004968:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800496c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004974:	2320      	movs	r3, #32
 8004976:	e004      	b.n	8004982 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800497c:	fab3 f383 	clz	r3, r3
 8004980:	b2db      	uxtb	r3, r3
 8004982:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800498c:	2b00      	cmp	r3, #0
 800498e:	d105      	bne.n	800499c <HAL_ADC_ConfigChannel+0x278>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	0e9b      	lsrs	r3, r3, #26
 8004996:	f003 031f 	and.w	r3, r3, #31
 800499a:	e018      	b.n	80049ce <HAL_ADC_ConfigChannel+0x2aa>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049a8:	fa93 f3a3 	rbit	r3, r3
 80049ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80049b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80049b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80049c0:	2320      	movs	r3, #32
 80049c2:	e004      	b.n	80049ce <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80049c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049c8:	fab3 f383 	clz	r3, r3
 80049cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d106      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2200      	movs	r2, #0
 80049d8:	2101      	movs	r1, #1
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fb8c 	bl	80040f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2102      	movs	r1, #2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff fb70 	bl	80040cc <LL_ADC_GetOffsetChannel>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10a      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x2e8>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2102      	movs	r1, #2
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff fb65 	bl	80040cc <LL_ADC_GetOffsetChannel>
 8004a02:	4603      	mov	r3, r0
 8004a04:	0e9b      	lsrs	r3, r3, #26
 8004a06:	f003 021f 	and.w	r2, r3, #31
 8004a0a:	e01e      	b.n	8004a4a <HAL_ADC_ConfigChannel+0x326>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2102      	movs	r1, #2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fb5a 	bl	80040cc <LL_ADC_GetOffsetChannel>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a22:	fa93 f3a3 	rbit	r3, r3
 8004a26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004a2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004a32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004a3a:	2320      	movs	r3, #32
 8004a3c:	e004      	b.n	8004a48 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004a3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a42:	fab3 f383 	clz	r3, r3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d105      	bne.n	8004a62 <HAL_ADC_ConfigChannel+0x33e>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	0e9b      	lsrs	r3, r3, #26
 8004a5c:	f003 031f 	and.w	r3, r3, #31
 8004a60:	e016      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x36c>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a6e:	fa93 f3a3 	rbit	r3, r3
 8004a72:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004a74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004a7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004a82:	2320      	movs	r3, #32
 8004a84:	e004      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004a86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a8a:	fab3 f383 	clz	r3, r3
 8004a8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d106      	bne.n	8004aa2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2102      	movs	r1, #2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff fb2b 	bl	80040f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2103      	movs	r1, #3
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff fb0f 	bl	80040cc <LL_ADC_GetOffsetChannel>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <HAL_ADC_ConfigChannel+0x3aa>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2103      	movs	r1, #3
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff fb04 	bl	80040cc <LL_ADC_GetOffsetChannel>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	0e9b      	lsrs	r3, r3, #26
 8004ac8:	f003 021f 	and.w	r2, r3, #31
 8004acc:	e017      	b.n	8004afe <HAL_ADC_ConfigChannel+0x3da>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2103      	movs	r1, #3
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff faf9 	bl	80040cc <LL_ADC_GetOffsetChannel>
 8004ada:	4603      	mov	r3, r0
 8004adc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ade:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ae0:	fa93 f3a3 	rbit	r3, r3
 8004ae4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004ae6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ae8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004aea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004af0:	2320      	movs	r3, #32
 8004af2:	e003      	b.n	8004afc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004af4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004af6:	fab3 f383 	clz	r3, r3
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d105      	bne.n	8004b16 <HAL_ADC_ConfigChannel+0x3f2>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	0e9b      	lsrs	r3, r3, #26
 8004b10:	f003 031f 	and.w	r3, r3, #31
 8004b14:	e011      	b.n	8004b3a <HAL_ADC_ConfigChannel+0x416>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b1e:	fa93 f3a3 	rbit	r3, r3
 8004b22:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004b24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b26:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004b28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004b2e:	2320      	movs	r3, #32
 8004b30:	e003      	b.n	8004b3a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004b32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b34:	fab3 f383 	clz	r3, r3
 8004b38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d106      	bne.n	8004b4c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2200      	movs	r2, #0
 8004b44:	2103      	movs	r1, #3
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff fad6 	bl	80040f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff fbff 	bl	8004354 <LL_ADC_IsEnabled>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f040 813d 	bne.w	8004dd8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	6819      	ldr	r1, [r3, #0]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f7ff fb80 	bl	8004270 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	4aa2      	ldr	r2, [pc, #648]	@ (8004e00 <HAL_ADC_ConfigChannel+0x6dc>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	f040 812e 	bne.w	8004dd8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10b      	bne.n	8004ba4 <HAL_ADC_ConfigChannel+0x480>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	0e9b      	lsrs	r3, r3, #26
 8004b92:	3301      	adds	r3, #1
 8004b94:	f003 031f 	and.w	r3, r3, #31
 8004b98:	2b09      	cmp	r3, #9
 8004b9a:	bf94      	ite	ls
 8004b9c:	2301      	movls	r3, #1
 8004b9e:	2300      	movhi	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	e019      	b.n	8004bd8 <HAL_ADC_ConfigChannel+0x4b4>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004baa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bac:	fa93 f3a3 	rbit	r3, r3
 8004bb0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004bb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bb4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004bb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004bbc:	2320      	movs	r3, #32
 8004bbe:	e003      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004bc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bc2:	fab3 f383 	clz	r3, r3
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	3301      	adds	r3, #1
 8004bca:	f003 031f 	and.w	r3, r3, #31
 8004bce:	2b09      	cmp	r3, #9
 8004bd0:	bf94      	ite	ls
 8004bd2:	2301      	movls	r3, #1
 8004bd4:	2300      	movhi	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d079      	beq.n	8004cd0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d107      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x4d4>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	0e9b      	lsrs	r3, r3, #26
 8004bee:	3301      	adds	r3, #1
 8004bf0:	069b      	lsls	r3, r3, #26
 8004bf2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004bf6:	e015      	b.n	8004c24 <HAL_ADC_ConfigChannel+0x500>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c00:	fa93 f3a3 	rbit	r3, r3
 8004c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004c06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c08:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004c10:	2320      	movs	r3, #32
 8004c12:	e003      	b.n	8004c1c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c16:	fab3 f383 	clz	r3, r3
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	069b      	lsls	r3, r3, #26
 8004c20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d109      	bne.n	8004c44 <HAL_ADC_ConfigChannel+0x520>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	0e9b      	lsrs	r3, r3, #26
 8004c36:	3301      	adds	r3, #1
 8004c38:	f003 031f 	and.w	r3, r3, #31
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c42:	e017      	b.n	8004c74 <HAL_ADC_ConfigChannel+0x550>
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c4c:	fa93 f3a3 	rbit	r3, r3
 8004c50:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c54:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004c5c:	2320      	movs	r3, #32
 8004c5e:	e003      	b.n	8004c68 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004c60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c62:	fab3 f383 	clz	r3, r3
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	3301      	adds	r3, #1
 8004c6a:	f003 031f 	and.w	r3, r3, #31
 8004c6e:	2101      	movs	r1, #1
 8004c70:	fa01 f303 	lsl.w	r3, r1, r3
 8004c74:	ea42 0103 	orr.w	r1, r2, r3
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10a      	bne.n	8004c9a <HAL_ADC_ConfigChannel+0x576>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	0e9b      	lsrs	r3, r3, #26
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	f003 021f 	and.w	r2, r3, #31
 8004c90:	4613      	mov	r3, r2
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	4413      	add	r3, r2
 8004c96:	051b      	lsls	r3, r3, #20
 8004c98:	e018      	b.n	8004ccc <HAL_ADC_ConfigChannel+0x5a8>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca2:	fa93 f3a3 	rbit	r3, r3
 8004ca6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004cb2:	2320      	movs	r3, #32
 8004cb4:	e003      	b.n	8004cbe <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cb8:	fab3 f383 	clz	r3, r3
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	f003 021f 	and.w	r2, r3, #31
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	4413      	add	r3, r2
 8004cca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	e07e      	b.n	8004dce <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d107      	bne.n	8004cec <HAL_ADC_ConfigChannel+0x5c8>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	0e9b      	lsrs	r3, r3, #26
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	069b      	lsls	r3, r3, #26
 8004ce6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cea:	e015      	b.n	8004d18 <HAL_ADC_ConfigChannel+0x5f4>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf4:	fa93 f3a3 	rbit	r3, r3
 8004cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004d04:	2320      	movs	r3, #32
 8004d06:	e003      	b.n	8004d10 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0a:	fab3 f383 	clz	r3, r3
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	3301      	adds	r3, #1
 8004d12:	069b      	lsls	r3, r3, #26
 8004d14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d109      	bne.n	8004d38 <HAL_ADC_ConfigChannel+0x614>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	0e9b      	lsrs	r3, r3, #26
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	f003 031f 	and.w	r3, r3, #31
 8004d30:	2101      	movs	r1, #1
 8004d32:	fa01 f303 	lsl.w	r3, r1, r3
 8004d36:	e017      	b.n	8004d68 <HAL_ADC_ConfigChannel+0x644>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	fa93 f3a3 	rbit	r3, r3
 8004d44:	61fb      	str	r3, [r7, #28]
  return result;
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004d50:	2320      	movs	r3, #32
 8004d52:	e003      	b.n	8004d5c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d56:	fab3 f383 	clz	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	f003 031f 	and.w	r3, r3, #31
 8004d62:	2101      	movs	r1, #1
 8004d64:	fa01 f303 	lsl.w	r3, r1, r3
 8004d68:	ea42 0103 	orr.w	r1, r2, r3
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10d      	bne.n	8004d94 <HAL_ADC_ConfigChannel+0x670>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	0e9b      	lsrs	r3, r3, #26
 8004d7e:	3301      	adds	r3, #1
 8004d80:	f003 021f 	and.w	r2, r3, #31
 8004d84:	4613      	mov	r3, r2
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	4413      	add	r3, r2
 8004d8a:	3b1e      	subs	r3, #30
 8004d8c:	051b      	lsls	r3, r3, #20
 8004d8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d92:	e01b      	b.n	8004dcc <HAL_ADC_ConfigChannel+0x6a8>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	fa93 f3a3 	rbit	r3, r3
 8004da0:	613b      	str	r3, [r7, #16]
  return result;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004dac:	2320      	movs	r3, #32
 8004dae:	e003      	b.n	8004db8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	fab3 f383 	clz	r3, r3
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	3301      	adds	r3, #1
 8004dba:	f003 021f 	and.w	r2, r3, #31
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	4413      	add	r3, r2
 8004dc4:	3b1e      	subs	r3, #30
 8004dc6:	051b      	lsls	r3, r3, #20
 8004dc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dcc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	f7ff fa20 	bl	8004218 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4b09      	ldr	r3, [pc, #36]	@ (8004e04 <HAL_ADC_ConfigChannel+0x6e0>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 80af 	beq.w	8004f44 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dee:	d004      	beq.n	8004dfa <HAL_ADC_ConfigChannel+0x6d6>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a04      	ldr	r2, [pc, #16]	@ (8004e08 <HAL_ADC_ConfigChannel+0x6e4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d10a      	bne.n	8004e10 <HAL_ADC_ConfigChannel+0x6ec>
 8004dfa:	4b04      	ldr	r3, [pc, #16]	@ (8004e0c <HAL_ADC_ConfigChannel+0x6e8>)
 8004dfc:	e009      	b.n	8004e12 <HAL_ADC_ConfigChannel+0x6ee>
 8004dfe:	bf00      	nop
 8004e00:	407f0000 	.word	0x407f0000
 8004e04:	80080000 	.word	0x80080000
 8004e08:	50000100 	.word	0x50000100
 8004e0c:	50000300 	.word	0x50000300
 8004e10:	4b51      	ldr	r3, [pc, #324]	@ (8004f58 <HAL_ADC_ConfigChannel+0x834>)
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff f928 	bl	8004068 <LL_ADC_GetCommonPathInternalCh>
 8004e18:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a4e      	ldr	r2, [pc, #312]	@ (8004f5c <HAL_ADC_ConfigChannel+0x838>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d004      	beq.n	8004e30 <HAL_ADC_ConfigChannel+0x70c>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a4d      	ldr	r2, [pc, #308]	@ (8004f60 <HAL_ADC_ConfigChannel+0x83c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d134      	bne.n	8004e9a <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d12e      	bne.n	8004e9a <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e44:	d17e      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e4e:	d004      	beq.n	8004e5a <HAL_ADC_ConfigChannel+0x736>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a43      	ldr	r2, [pc, #268]	@ (8004f64 <HAL_ADC_ConfigChannel+0x840>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d101      	bne.n	8004e5e <HAL_ADC_ConfigChannel+0x73a>
 8004e5a:	4a43      	ldr	r2, [pc, #268]	@ (8004f68 <HAL_ADC_ConfigChannel+0x844>)
 8004e5c:	e000      	b.n	8004e60 <HAL_ADC_ConfigChannel+0x73c>
 8004e5e:	4a3e      	ldr	r2, [pc, #248]	@ (8004f58 <HAL_ADC_ConfigChannel+0x834>)
 8004e60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	f7ff f8e9 	bl	8004042 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e70:	4b3e      	ldr	r3, [pc, #248]	@ (8004f6c <HAL_ADC_ConfigChannel+0x848>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	099b      	lsrs	r3, r3, #6
 8004e76:	4a3e      	ldr	r2, [pc, #248]	@ (8004f70 <HAL_ADC_ConfigChannel+0x84c>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	099b      	lsrs	r3, r3, #6
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	4613      	mov	r3, r2
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	4413      	add	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e8a:	e002      	b.n	8004e92 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1f9      	bne.n	8004e8c <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e98:	e054      	b.n	8004f44 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a35      	ldr	r2, [pc, #212]	@ (8004f74 <HAL_ADC_ConfigChannel+0x850>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d120      	bne.n	8004ee6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ea4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ea8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d11a      	bne.n	8004ee6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004eb8:	d144      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ec2:	d004      	beq.n	8004ece <HAL_ADC_ConfigChannel+0x7aa>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a26      	ldr	r2, [pc, #152]	@ (8004f64 <HAL_ADC_ConfigChannel+0x840>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d101      	bne.n	8004ed2 <HAL_ADC_ConfigChannel+0x7ae>
 8004ece:	4a26      	ldr	r2, [pc, #152]	@ (8004f68 <HAL_ADC_ConfigChannel+0x844>)
 8004ed0:	e000      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x7b0>
 8004ed2:	4a21      	ldr	r2, [pc, #132]	@ (8004f58 <HAL_ADC_ConfigChannel+0x834>)
 8004ed4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ed8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004edc:	4619      	mov	r1, r3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	f7ff f8af 	bl	8004042 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ee4:	e02e      	b.n	8004f44 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a23      	ldr	r2, [pc, #140]	@ (8004f78 <HAL_ADC_ConfigChannel+0x854>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d129      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ef4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d123      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a18      	ldr	r2, [pc, #96]	@ (8004f64 <HAL_ADC_ConfigChannel+0x840>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d01e      	beq.n	8004f44 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f0e:	d004      	beq.n	8004f1a <HAL_ADC_ConfigChannel+0x7f6>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a13      	ldr	r2, [pc, #76]	@ (8004f64 <HAL_ADC_ConfigChannel+0x840>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d101      	bne.n	8004f1e <HAL_ADC_ConfigChannel+0x7fa>
 8004f1a:	4a13      	ldr	r2, [pc, #76]	@ (8004f68 <HAL_ADC_ConfigChannel+0x844>)
 8004f1c:	e000      	b.n	8004f20 <HAL_ADC_ConfigChannel+0x7fc>
 8004f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8004f58 <HAL_ADC_ConfigChannel+0x834>)
 8004f20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f7ff f889 	bl	8004042 <LL_ADC_SetCommonPathInternalCh>
 8004f30:	e008      	b.n	8004f44 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f36:	f043 0220 	orr.w	r2, r3, #32
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f4c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	37d8      	adds	r7, #216	@ 0xd8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	50000700 	.word	0x50000700
 8004f5c:	c3210000 	.word	0xc3210000
 8004f60:	90c00010 	.word	0x90c00010
 8004f64:	50000100 	.word	0x50000100
 8004f68:	50000300 	.word	0x50000300
 8004f6c:	20000000 	.word	0x20000000
 8004f70:	053e2d63 	.word	0x053e2d63
 8004f74:	c7520000 	.word	0xc7520000
 8004f78:	cb840000 	.word	0xcb840000

08004f7c <LL_ADC_IsEnabled>:
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <LL_ADC_IsEnabled+0x18>
 8004f90:	2301      	movs	r3, #1
 8004f92:	e000      	b.n	8004f96 <LL_ADC_IsEnabled+0x1a>
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <LL_ADC_REG_IsConversionOngoing>:
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d101      	bne.n	8004fba <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b0a1      	sub	sp, #132	@ 0x84
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e0cb      	b.n	800517e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004fee:	2300      	movs	r3, #0
 8004ff0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ffe:	d102      	bne.n	8005006 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005000:	4b61      	ldr	r3, [pc, #388]	@ (8005188 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005002:	60bb      	str	r3, [r7, #8]
 8005004:	e001      	b.n	800500a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005006:	2300      	movs	r3, #0
 8005008:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10b      	bne.n	8005028 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005014:	f043 0220 	orr.w	r2, r3, #32
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0aa      	b.n	800517e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff ffb9 	bl	8004fa2 <LL_ADC_REG_IsConversionOngoing>
 8005030:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff ffb3 	bl	8004fa2 <LL_ADC_REG_IsConversionOngoing>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	f040 808c 	bne.w	800515c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005044:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005046:	2b00      	cmp	r3, #0
 8005048:	f040 8088 	bne.w	800515c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005054:	d004      	beq.n	8005060 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a4b      	ldr	r2, [pc, #300]	@ (8005188 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d101      	bne.n	8005064 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8005060:	4b4a      	ldr	r3, [pc, #296]	@ (800518c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8005062:	e000      	b.n	8005066 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005064:	4b4a      	ldr	r3, [pc, #296]	@ (8005190 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8005066:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d041      	beq.n	80050f4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005070:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	6859      	ldr	r1, [r3, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005082:	035b      	lsls	r3, r3, #13
 8005084:	430b      	orrs	r3, r1
 8005086:	431a      	orrs	r2, r3
 8005088:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800508a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005094:	d004      	beq.n	80050a0 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a3b      	ldr	r2, [pc, #236]	@ (8005188 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d10f      	bne.n	80050c0 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 80050a0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80050a4:	f7ff ff6a 	bl	8004f7c <LL_ADC_IsEnabled>
 80050a8:	4604      	mov	r4, r0
 80050aa:	4837      	ldr	r0, [pc, #220]	@ (8005188 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80050ac:	f7ff ff66 	bl	8004f7c <LL_ADC_IsEnabled>
 80050b0:	4603      	mov	r3, r0
 80050b2:	4323      	orrs	r3, r4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	bf0c      	ite	eq
 80050b8:	2301      	moveq	r3, #1
 80050ba:	2300      	movne	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	e008      	b.n	80050d2 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 80050c0:	4834      	ldr	r0, [pc, #208]	@ (8005194 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80050c2:	f7ff ff5b 	bl	8004f7c <LL_ADC_IsEnabled>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	bf0c      	ite	eq
 80050cc:	2301      	moveq	r3, #1
 80050ce:	2300      	movne	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d04c      	beq.n	8005170 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80050d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80050de:	f023 030f 	bic.w	r3, r3, #15
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	6811      	ldr	r1, [r2, #0]
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	6892      	ldr	r2, [r2, #8]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	431a      	orrs	r2, r3
 80050ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050f0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050f2:	e03d      	b.n	8005170 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80050f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050fe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005108:	d004      	beq.n	8005114 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1e      	ldr	r2, [pc, #120]	@ (8005188 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d10f      	bne.n	8005134 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8005114:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005118:	f7ff ff30 	bl	8004f7c <LL_ADC_IsEnabled>
 800511c:	4604      	mov	r4, r0
 800511e:	481a      	ldr	r0, [pc, #104]	@ (8005188 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005120:	f7ff ff2c 	bl	8004f7c <LL_ADC_IsEnabled>
 8005124:	4603      	mov	r3, r0
 8005126:	4323      	orrs	r3, r4
 8005128:	2b00      	cmp	r3, #0
 800512a:	bf0c      	ite	eq
 800512c:	2301      	moveq	r3, #1
 800512e:	2300      	movne	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	e008      	b.n	8005146 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8005134:	4817      	ldr	r0, [pc, #92]	@ (8005194 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8005136:	f7ff ff21 	bl	8004f7c <LL_ADC_IsEnabled>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	bf0c      	ite	eq
 8005140:	2301      	moveq	r3, #1
 8005142:	2300      	movne	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d012      	beq.n	8005170 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800514a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005152:	f023 030f 	bic.w	r3, r3, #15
 8005156:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005158:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800515a:	e009      	b.n	8005170 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005160:	f043 0220 	orr.w	r2, r3, #32
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800516e:	e000      	b.n	8005172 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005170:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800517a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800517e:	4618      	mov	r0, r3
 8005180:	3784      	adds	r7, #132	@ 0x84
 8005182:	46bd      	mov	sp, r7
 8005184:	bd90      	pop	{r4, r7, pc}
 8005186:	bf00      	nop
 8005188:	50000100 	.word	0x50000100
 800518c:	50000300 	.word	0x50000300
 8005190:	50000700 	.word	0x50000700
 8005194:	50000400 	.word	0x50000400

08005198 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e023      	b.n	80051f2 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fd f8d4 	bl	800236c <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800520c:	4b0c      	ldr	r3, [pc, #48]	@ (8005240 <__NVIC_SetPriorityGrouping+0x44>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005218:	4013      	ands	r3, r2
 800521a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005224:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005228:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800522c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800522e:	4a04      	ldr	r2, [pc, #16]	@ (8005240 <__NVIC_SetPriorityGrouping+0x44>)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	60d3      	str	r3, [r2, #12]
}
 8005234:	bf00      	nop
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	e000ed00 	.word	0xe000ed00

08005244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005248:	4b04      	ldr	r3, [pc, #16]	@ (800525c <__NVIC_GetPriorityGrouping+0x18>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	0a1b      	lsrs	r3, r3, #8
 800524e:	f003 0307 	and.w	r3, r3, #7
}
 8005252:	4618      	mov	r0, r3
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	e000ed00 	.word	0xe000ed00

08005260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	4603      	mov	r3, r0
 8005268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800526a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526e:	2b00      	cmp	r3, #0
 8005270:	db0b      	blt.n	800528a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	f003 021f 	and.w	r2, r3, #31
 8005278:	4907      	ldr	r1, [pc, #28]	@ (8005298 <__NVIC_EnableIRQ+0x38>)
 800527a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	2001      	movs	r0, #1
 8005282:	fa00 f202 	lsl.w	r2, r0, r2
 8005286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	e000e100 	.word	0xe000e100

0800529c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	4603      	mov	r3, r0
 80052a4:	6039      	str	r1, [r7, #0]
 80052a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	db0a      	blt.n	80052c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	490c      	ldr	r1, [pc, #48]	@ (80052e8 <__NVIC_SetPriority+0x4c>)
 80052b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ba:	0112      	lsls	r2, r2, #4
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	440b      	add	r3, r1
 80052c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052c4:	e00a      	b.n	80052dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	4908      	ldr	r1, [pc, #32]	@ (80052ec <__NVIC_SetPriority+0x50>)
 80052cc:	79fb      	ldrb	r3, [r7, #7]
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	3b04      	subs	r3, #4
 80052d4:	0112      	lsls	r2, r2, #4
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	440b      	add	r3, r1
 80052da:	761a      	strb	r2, [r3, #24]
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	e000e100 	.word	0xe000e100
 80052ec:	e000ed00 	.word	0xe000ed00

080052f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b089      	sub	sp, #36	@ 0x24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	f1c3 0307 	rsb	r3, r3, #7
 800530a:	2b04      	cmp	r3, #4
 800530c:	bf28      	it	cs
 800530e:	2304      	movcs	r3, #4
 8005310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	3304      	adds	r3, #4
 8005316:	2b06      	cmp	r3, #6
 8005318:	d902      	bls.n	8005320 <NVIC_EncodePriority+0x30>
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	3b03      	subs	r3, #3
 800531e:	e000      	b.n	8005322 <NVIC_EncodePriority+0x32>
 8005320:	2300      	movs	r3, #0
 8005322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005324:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	fa02 f303 	lsl.w	r3, r2, r3
 800532e:	43da      	mvns	r2, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	401a      	ands	r2, r3
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005338:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	fa01 f303 	lsl.w	r3, r1, r3
 8005342:	43d9      	mvns	r1, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005348:	4313      	orrs	r3, r2
         );
}
 800534a:	4618      	mov	r0, r3
 800534c:	3724      	adds	r7, #36	@ 0x24
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff ff4c 	bl	80051fc <__NVIC_SetPriorityGrouping>
}
 8005364:	bf00      	nop
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800537a:	f7ff ff63 	bl	8005244 <__NVIC_GetPriorityGrouping>
 800537e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	6978      	ldr	r0, [r7, #20]
 8005386:	f7ff ffb3 	bl	80052f0 <NVIC_EncodePriority>
 800538a:	4602      	mov	r2, r0
 800538c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005390:	4611      	mov	r1, r2
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff ff82 	bl	800529c <__NVIC_SetPriority>
}
 8005398:	bf00      	nop
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff ff56 	bl	8005260 <__NVIC_EnableIRQ>
}
 80053b4:	bf00      	nop
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e08d      	b.n	80054ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	4b47      	ldr	r3, [pc, #284]	@ (80054f4 <HAL_DMA_Init+0x138>)
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d80f      	bhi.n	80053fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	4b45      	ldr	r3, [pc, #276]	@ (80054f8 <HAL_DMA_Init+0x13c>)
 80053e2:	4413      	add	r3, r2
 80053e4:	4a45      	ldr	r2, [pc, #276]	@ (80054fc <HAL_DMA_Init+0x140>)
 80053e6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ea:	091b      	lsrs	r3, r3, #4
 80053ec:	009a      	lsls	r2, r3, #2
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a42      	ldr	r2, [pc, #264]	@ (8005500 <HAL_DMA_Init+0x144>)
 80053f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80053f8:	e00e      	b.n	8005418 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	461a      	mov	r2, r3
 8005400:	4b40      	ldr	r3, [pc, #256]	@ (8005504 <HAL_DMA_Init+0x148>)
 8005402:	4413      	add	r3, r2
 8005404:	4a3d      	ldr	r2, [pc, #244]	@ (80054fc <HAL_DMA_Init+0x140>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	091b      	lsrs	r3, r3, #4
 800540c:	009a      	lsls	r2, r3, #2
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a3c      	ldr	r2, [pc, #240]	@ (8005508 <HAL_DMA_Init+0x14c>)
 8005416:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800542e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005432:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800543c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005448:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005454:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f9be 	bl	80057ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005478:	d102      	bne.n	8005480 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005494:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d010      	beq.n	80054c0 <HAL_DMA_Init+0x104>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d80c      	bhi.n	80054c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f9de 	bl	8005868 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80054bc:	605a      	str	r2, [r3, #4]
 80054be:	e008      	b.n	80054d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40020407 	.word	0x40020407
 80054f8:	bffdfff8 	.word	0xbffdfff8
 80054fc:	cccccccd 	.word	0xcccccccd
 8005500:	40020000 	.word	0x40020000
 8005504:	bffdfbf8 	.word	0xbffdfbf8
 8005508:	40020400 	.word	0x40020400

0800550c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d005      	beq.n	8005530 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2204      	movs	r2, #4
 8005528:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
 800552e:	e037      	b.n	80055a0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 020e 	bic.w	r2, r2, #14
 800553e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800554a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800554e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0201 	bic.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005564:	f003 021f 	and.w	r2, r3, #31
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556c:	2101      	movs	r1, #1
 800556e:	fa01 f202 	lsl.w	r2, r1, r2
 8005572:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800557c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00c      	beq.n	80055a0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005590:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005594:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800559e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d00d      	beq.n	80055f2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2204      	movs	r2, #4
 80055da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	73fb      	strb	r3, [r7, #15]
 80055f0:	e047      	b.n	8005682 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 020e 	bic.w	r2, r2, #14
 8005600:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0201 	bic.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800561c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005620:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005626:	f003 021f 	and.w	r2, r3, #31
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562e:	2101      	movs	r1, #1
 8005630:	fa01 f202 	lsl.w	r2, r1, r2
 8005634:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800563e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00c      	beq.n	8005662 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005652:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005656:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005660:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	4798      	blx	r3
    }
  }
  return status;
 8005682:	7bfb      	ldrb	r3, [r7, #15]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a8:	f003 031f 	and.w	r3, r3, #31
 80056ac:	2204      	movs	r2, #4
 80056ae:	409a      	lsls	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d026      	beq.n	8005706 <HAL_DMA_IRQHandler+0x7a>
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f003 0304 	and.w	r3, r3, #4
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d021      	beq.n	8005706 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0320 	and.w	r3, r3, #32
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d107      	bne.n	80056e0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0204 	bic.w	r2, r2, #4
 80056de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e4:	f003 021f 	and.w	r2, r3, #31
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ec:	2104      	movs	r1, #4
 80056ee:	fa01 f202 	lsl.w	r2, r1, r2
 80056f2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d071      	beq.n	80057e0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005704:	e06c      	b.n	80057e0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570a:	f003 031f 	and.w	r3, r3, #31
 800570e:	2202      	movs	r2, #2
 8005710:	409a      	lsls	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4013      	ands	r3, r2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d02e      	beq.n	8005778 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d029      	beq.n	8005778 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10b      	bne.n	800574a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 020a 	bic.w	r2, r2, #10
 8005740:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574e:	f003 021f 	and.w	r2, r3, #31
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005756:	2102      	movs	r1, #2
 8005758:	fa01 f202 	lsl.w	r2, r1, r2
 800575c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d038      	beq.n	80057e0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005776:	e033      	b.n	80057e0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800577c:	f003 031f 	and.w	r3, r3, #31
 8005780:	2208      	movs	r2, #8
 8005782:	409a      	lsls	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4013      	ands	r3, r2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d02a      	beq.n	80057e2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d025      	beq.n	80057e2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 020e 	bic.w	r2, r2, #14
 80057a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057aa:	f003 021f 	and.w	r2, r3, #31
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b2:	2101      	movs	r1, #1
 80057b4:	fa01 f202 	lsl.w	r2, r1, r2
 80057b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d004      	beq.n	80057e2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80057e0:	bf00      	nop
 80057e2:	bf00      	nop
}
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	4b16      	ldr	r3, [pc, #88]	@ (8005854 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d802      	bhi.n	8005806 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005800:	4b15      	ldr	r3, [pc, #84]	@ (8005858 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	e001      	b.n	800580a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005806:	4b15      	ldr	r3, [pc, #84]	@ (800585c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005808:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	3b08      	subs	r3, #8
 8005816:	4a12      	ldr	r2, [pc, #72]	@ (8005860 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005818:	fba2 2303 	umull	r2, r3, r2, r3
 800581c:	091b      	lsrs	r3, r3, #4
 800581e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005824:	089b      	lsrs	r3, r3, #2
 8005826:	009a      	lsls	r2, r3, #2
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	4413      	add	r3, r2
 800582c:	461a      	mov	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a0b      	ldr	r2, [pc, #44]	@ (8005864 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005836:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f003 031f 	and.w	r3, r3, #31
 800583e:	2201      	movs	r2, #1
 8005840:	409a      	lsls	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40020407 	.word	0x40020407
 8005858:	40020800 	.word	0x40020800
 800585c:	40020820 	.word	0x40020820
 8005860:	cccccccd 	.word	0xcccccccd
 8005864:	40020880 	.word	0x40020880

08005868 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	b2db      	uxtb	r3, r3
 8005876:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4b0b      	ldr	r3, [pc, #44]	@ (80058a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800587c:	4413      	add	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	461a      	mov	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a08      	ldr	r2, [pc, #32]	@ (80058ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800588a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3b01      	subs	r3, #1
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	2201      	movs	r2, #1
 8005896:	409a      	lsls	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800589c:	bf00      	nop
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	1000823f 	.word	0x1000823f
 80058ac:	40020940 	.word	0x40020940

080058b0 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e033      	b.n	800592a <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7fc fd68 	bl	80023ac <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f854 	bl	8005990 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f822 	bl	8005932 <FMAC_Reset>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d10c      	bne.n	800590e <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f8:	f043 0210 	orr.w	r2, r3, #16
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	22a0      	movs	r2, #160	@ 0xa0
 8005904:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	73fb      	strb	r3, [r7, #15]
 800590c:	e008      	b.n	8005920 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8005928:	7bfb      	ldrb	r3, [r7, #15]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b084      	sub	sp, #16
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800593a:	f7fe fb1d 	bl	8003f78 <HAL_GetTick>
 800593e:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800594e:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8005950:	e00f      	b.n	8005972 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8005952:	f7fe fb11 	bl	8003f78 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005960:	d907      	bls.n	8005972 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005966:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e00a      	b.n	8005988 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e8      	bne.n	8005952 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f807 	bl	80059ac <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f81b 	bl	80059da <FMAC_ResetOutputStateAndDataPointers>
}
 80059a4:	bf00      	nop
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005a16:	e15a      	b.n	8005cce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	fa01 f303 	lsl.w	r3, r1, r3
 8005a24:	4013      	ands	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 814c 	beq.w	8005cc8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f003 0303 	and.w	r3, r3, #3
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d005      	beq.n	8005a48 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d130      	bne.n	8005aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	2203      	movs	r2, #3
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a7e:	2201      	movs	r2, #1
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	fa02 f303 	lsl.w	r3, r2, r3
 8005a86:	43db      	mvns	r3, r3
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	091b      	lsrs	r3, r3, #4
 8005a94:	f003 0201 	and.w	r2, r3, #1
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d017      	beq.n	8005ae6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4013      	ands	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d123      	bne.n	8005b3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	08da      	lsrs	r2, r3, #3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3208      	adds	r2, #8
 8005afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	220f      	movs	r2, #15
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4013      	ands	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	691a      	ldr	r2, [r3, #16]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	fa02 f303 	lsl.w	r3, r2, r3
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	08da      	lsrs	r2, r3, #3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3208      	adds	r2, #8
 8005b34:	6939      	ldr	r1, [r7, #16]
 8005b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	2203      	movs	r2, #3
 8005b46:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4a:	43db      	mvns	r3, r3
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f003 0203 	and.w	r2, r3, #3
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 80a6 	beq.w	8005cc8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b7c:	4b5b      	ldr	r3, [pc, #364]	@ (8005cec <HAL_GPIO_Init+0x2e4>)
 8005b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b80:	4a5a      	ldr	r2, [pc, #360]	@ (8005cec <HAL_GPIO_Init+0x2e4>)
 8005b82:	f043 0301 	orr.w	r3, r3, #1
 8005b86:	6613      	str	r3, [r2, #96]	@ 0x60
 8005b88:	4b58      	ldr	r3, [pc, #352]	@ (8005cec <HAL_GPIO_Init+0x2e4>)
 8005b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	60bb      	str	r3, [r7, #8]
 8005b92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b94:	4a56      	ldr	r2, [pc, #344]	@ (8005cf0 <HAL_GPIO_Init+0x2e8>)
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	089b      	lsrs	r3, r3, #2
 8005b9a:	3302      	adds	r3, #2
 8005b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f003 0303 	and.w	r3, r3, #3
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	220f      	movs	r2, #15
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	43db      	mvns	r3, r3
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005bbe:	d01f      	beq.n	8005c00 <HAL_GPIO_Init+0x1f8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a4c      	ldr	r2, [pc, #304]	@ (8005cf4 <HAL_GPIO_Init+0x2ec>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d019      	beq.n	8005bfc <HAL_GPIO_Init+0x1f4>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a4b      	ldr	r2, [pc, #300]	@ (8005cf8 <HAL_GPIO_Init+0x2f0>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d013      	beq.n	8005bf8 <HAL_GPIO_Init+0x1f0>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a4a      	ldr	r2, [pc, #296]	@ (8005cfc <HAL_GPIO_Init+0x2f4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00d      	beq.n	8005bf4 <HAL_GPIO_Init+0x1ec>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a49      	ldr	r2, [pc, #292]	@ (8005d00 <HAL_GPIO_Init+0x2f8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d007      	beq.n	8005bf0 <HAL_GPIO_Init+0x1e8>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a48      	ldr	r2, [pc, #288]	@ (8005d04 <HAL_GPIO_Init+0x2fc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d101      	bne.n	8005bec <HAL_GPIO_Init+0x1e4>
 8005be8:	2305      	movs	r3, #5
 8005bea:	e00a      	b.n	8005c02 <HAL_GPIO_Init+0x1fa>
 8005bec:	2306      	movs	r3, #6
 8005bee:	e008      	b.n	8005c02 <HAL_GPIO_Init+0x1fa>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	e006      	b.n	8005c02 <HAL_GPIO_Init+0x1fa>
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e004      	b.n	8005c02 <HAL_GPIO_Init+0x1fa>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e002      	b.n	8005c02 <HAL_GPIO_Init+0x1fa>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e000      	b.n	8005c02 <HAL_GPIO_Init+0x1fa>
 8005c00:	2300      	movs	r3, #0
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	f002 0203 	and.w	r2, r2, #3
 8005c08:	0092      	lsls	r2, r2, #2
 8005c0a:	4093      	lsls	r3, r2
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c12:	4937      	ldr	r1, [pc, #220]	@ (8005cf0 <HAL_GPIO_Init+0x2e8>)
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	089b      	lsrs	r3, r3, #2
 8005c18:	3302      	adds	r3, #2
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c20:	4b39      	ldr	r3, [pc, #228]	@ (8005d08 <HAL_GPIO_Init+0x300>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005c44:	4a30      	ldr	r2, [pc, #192]	@ (8005d08 <HAL_GPIO_Init+0x300>)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005d08 <HAL_GPIO_Init+0x300>)
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	43db      	mvns	r3, r3
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4013      	ands	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c6e:	4a26      	ldr	r2, [pc, #152]	@ (8005d08 <HAL_GPIO_Init+0x300>)
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005c74:	4b24      	ldr	r3, [pc, #144]	@ (8005d08 <HAL_GPIO_Init+0x300>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	43db      	mvns	r3, r3
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4013      	ands	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c98:	4a1b      	ldr	r2, [pc, #108]	@ (8005d08 <HAL_GPIO_Init+0x300>)
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005d08 <HAL_GPIO_Init+0x300>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	4013      	ands	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005cc2:	4a11      	ldr	r2, [pc, #68]	@ (8005d08 <HAL_GPIO_Init+0x300>)
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f47f ae9d 	bne.w	8005a18 <HAL_GPIO_Init+0x10>
  }
}
 8005cde:	bf00      	nop
 8005ce0:	bf00      	nop
 8005ce2:	371c      	adds	r7, #28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	40021000 	.word	0x40021000
 8005cf0:	40010000 	.word	0x40010000
 8005cf4:	48000400 	.word	0x48000400
 8005cf8:	48000800 	.word	0x48000800
 8005cfc:	48000c00 	.word	0x48000c00
 8005d00:	48001000 	.word	0x48001000
 8005d04:	48001400 	.word	0x48001400
 8005d08:	40010400 	.word	0x40010400

08005d0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691a      	ldr	r2, [r3, #16]
 8005d1c:	887b      	ldrh	r3, [r7, #2]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d24:	2301      	movs	r3, #1
 8005d26:	73fb      	strb	r3, [r7, #15]
 8005d28:	e001      	b.n	8005d2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	807b      	strh	r3, [r7, #2]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d4c:	787b      	ldrb	r3, [r7, #1]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005d52:	887a      	ldrh	r2, [r7, #2]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d58:	e002      	b.n	8005d60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d5a:	887a      	ldrh	r2, [r7, #2]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e08d      	b.n	8005e9a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fc fb2a 	bl	80023ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2224      	movs	r2, #36	@ 0x24
 8005d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0201 	bic.w	r2, r2, #1
 8005dae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005dbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005dcc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d107      	bne.n	8005de6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005de2:	609a      	str	r2, [r3, #8]
 8005de4:	e006      	b.n	8005df4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005df2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d108      	bne.n	8005e0e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e0a:	605a      	str	r2, [r3, #4]
 8005e0c:	e007      	b.n	8005e1e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6812      	ldr	r2, [r2, #0]
 8005e28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005e2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691a      	ldr	r2, [r3, #16]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	69d9      	ldr	r1, [r3, #28]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a1a      	ldr	r2, [r3, #32]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0201 	orr.w	r2, r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	d138      	bne.n	8005f2a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e032      	b.n	8005f2c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2224      	movs	r2, #36	@ 0x24
 8005ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0201 	bic.w	r2, r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ef4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6819      	ldr	r1, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f042 0201 	orr.w	r2, r2, #1
 8005f14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	e000      	b.n	8005f2c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f2a:	2302      	movs	r3, #2
  }
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b20      	cmp	r3, #32
 8005f4c:	d139      	bne.n	8005fc2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d101      	bne.n	8005f5c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	e033      	b.n	8005fc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2224      	movs	r2, #36	@ 0x24
 8005f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0201 	bic.w	r2, r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005f8a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	021b      	lsls	r3, r3, #8
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f042 0201 	orr.w	r2, r2, #1
 8005fac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	e000      	b.n	8005fc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005fc2:	2302      	movs	r3, #2
  }
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e0c0      	b.n	8006164 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d106      	bne.n	8005ffc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f00a fc2e 	bl	8010858 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2203      	movs	r2, #3
 8006000:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4618      	mov	r0, r3
 800600a:	f006 fe54 	bl	800ccb6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800600e:	2300      	movs	r3, #0
 8006010:	73fb      	strb	r3, [r7, #15]
 8006012:	e03e      	b.n	8006092 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006014:	7bfa      	ldrb	r2, [r7, #15]
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	440b      	add	r3, r1
 8006022:	3311      	adds	r3, #17
 8006024:	2201      	movs	r2, #1
 8006026:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006028:	7bfa      	ldrb	r2, [r7, #15]
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	440b      	add	r3, r1
 8006036:	3310      	adds	r3, #16
 8006038:	7bfa      	ldrb	r2, [r7, #15]
 800603a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800603c:	7bfa      	ldrb	r2, [r7, #15]
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	4613      	mov	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	440b      	add	r3, r1
 800604a:	3313      	adds	r3, #19
 800604c:	2200      	movs	r2, #0
 800604e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006050:	7bfa      	ldrb	r2, [r7, #15]
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	440b      	add	r3, r1
 800605e:	3320      	adds	r3, #32
 8006060:	2200      	movs	r2, #0
 8006062:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006064:	7bfa      	ldrb	r2, [r7, #15]
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	4613      	mov	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	440b      	add	r3, r1
 8006072:	3324      	adds	r3, #36	@ 0x24
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	4613      	mov	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	440b      	add	r3, r1
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	3301      	adds	r3, #1
 8006090:	73fb      	strb	r3, [r7, #15]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	791b      	ldrb	r3, [r3, #4]
 8006096:	7bfa      	ldrb	r2, [r7, #15]
 8006098:	429a      	cmp	r2, r3
 800609a:	d3bb      	bcc.n	8006014 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800609c:	2300      	movs	r3, #0
 800609e:	73fb      	strb	r3, [r7, #15]
 80060a0:	e044      	b.n	800612c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80060a2:	7bfa      	ldrb	r2, [r7, #15]
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	440b      	add	r3, r1
 80060b0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80060b8:	7bfa      	ldrb	r2, [r7, #15]
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	4613      	mov	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	440b      	add	r3, r1
 80060c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80060ca:	7bfa      	ldrb	r2, [r7, #15]
 80060cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80060ce:	7bfa      	ldrb	r2, [r7, #15]
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	4613      	mov	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	440b      	add	r3, r1
 80060dc:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80060e0:	2200      	movs	r2, #0
 80060e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80060e4:	7bfa      	ldrb	r2, [r7, #15]
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	440b      	add	r3, r1
 80060f2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80060fa:	7bfa      	ldrb	r2, [r7, #15]
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	4613      	mov	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	440b      	add	r3, r1
 8006108:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006110:	7bfa      	ldrb	r2, [r7, #15]
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	4613      	mov	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	440b      	add	r3, r1
 800611e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	3301      	adds	r3, #1
 800612a:	73fb      	strb	r3, [r7, #15]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	791b      	ldrb	r3, [r3, #4]
 8006130:	7bfa      	ldrb	r2, [r7, #15]
 8006132:	429a      	cmp	r2, r3
 8006134:	d3b5      	bcc.n	80060a2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6818      	ldr	r0, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3304      	adds	r3, #4
 800613e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006142:	f006 fdd3 	bl	800ccec <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	7a9b      	ldrb	r3, [r3, #10]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d102      	bne.n	8006162 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 fcaa 	bl	8007ab6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800617a:	2b01      	cmp	r3, #1
 800617c:	d101      	bne.n	8006182 <HAL_PCD_Start+0x16>
 800617e:	2302      	movs	r3, #2
 8006180:	e012      	b.n	80061a8 <HAL_PCD_Start+0x3c>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4618      	mov	r0, r3
 8006190:	f006 fd7a 	bl	800cc88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f008 f96a 	bl	800e472 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_PCD_Stop+0x16>
 80061c2:	2302      	movs	r3, #2
 80061c4:	e012      	b.n	80061ec <HAL_PCD_Stop+0x3c>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f006 fd6f 	bl	800ccb6 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4618      	mov	r0, r3
 80061de:	f008 f95f 	bl	800e4a0 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4618      	mov	r0, r3
 8006202:	f008 f962 	bl	800e4ca <USB_ReadInterrupts>
 8006206:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 faa6 	bl	8006764 <PCD_EP_ISR_Handler>

    return;
 8006218:	e110      	b.n	800643c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006220:	2b00      	cmp	r3, #0
 8006222:	d013      	beq.n	800624c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800622c:	b29a      	uxth	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006236:	b292      	uxth	r2, r2
 8006238:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f00a fb9c 	bl	801097a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006242:	2100      	movs	r1, #0
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f8fc 	bl	8006442 <HAL_PCD_SetAddress>

    return;
 800624a:	e0f7      	b.n	800643c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00c      	beq.n	8006270 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800625e:	b29a      	uxth	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006268:	b292      	uxth	r2, r2
 800626a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800626e:	e0e5      	b.n	800643c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00c      	beq.n	8006294 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006282:	b29a      	uxth	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800628c:	b292      	uxth	r2, r2
 800628e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006292:	e0d3      	b.n	800643c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d034      	beq.n	8006308 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0204 	bic.w	r2, r2, #4
 80062b0:	b292      	uxth	r2, r2
 80062b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80062be:	b29a      	uxth	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0208 	bic.w	r2, r2, #8
 80062c8:	b292      	uxth	r2, r2
 80062ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d107      	bne.n	80062e8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80062e0:	2100      	movs	r1, #0
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f00a fd76 	bl	8010dd4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f00a fb7f 	bl	80109ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006300:	b292      	uxth	r2, r2
 8006302:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006306:	e099      	b.n	800643c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800630e:	2b00      	cmp	r3, #0
 8006310:	d027      	beq.n	8006362 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800631a:	b29a      	uxth	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f042 0208 	orr.w	r2, r2, #8
 8006324:	b292      	uxth	r2, r2
 8006326:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006332:	b29a      	uxth	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800633c:	b292      	uxth	r2, r2
 800633e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800634a:	b29a      	uxth	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0204 	orr.w	r2, r2, #4
 8006354:	b292      	uxth	r2, r2
 8006356:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f00a fb2c 	bl	80109b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006360:	e06c      	b.n	800643c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006368:	2b00      	cmp	r3, #0
 800636a:	d040      	beq.n	80063ee <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006374:	b29a      	uxth	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800637e:	b292      	uxth	r2, r2
 8006380:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d12b      	bne.n	80063e6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006396:	b29a      	uxth	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0204 	orr.w	r2, r2, #4
 80063a0:	b292      	uxth	r2, r2
 80063a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f042 0208 	orr.w	r2, r2, #8
 80063b8:	b292      	uxth	r2, r2
 80063ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	089b      	lsrs	r3, r3, #2
 80063d2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80063dc:	2101      	movs	r1, #1
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f00a fcf8 	bl	8010dd4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80063e4:	e02a      	b.n	800643c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f00a fae6 	bl	80109b8 <HAL_PCD_SuspendCallback>
    return;
 80063ec:	e026      	b.n	800643c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00f      	beq.n	8006418 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006400:	b29a      	uxth	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800640a:	b292      	uxth	r2, r2
 800640c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f00a faa4 	bl	801095e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006416:	e011      	b.n	800643c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00c      	beq.n	800643c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800642a:	b29a      	uxth	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006434:	b292      	uxth	r2, r2
 8006436:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800643a:	bf00      	nop
  }
}
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b082      	sub	sp, #8
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	460b      	mov	r3, r1
 800644c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <HAL_PCD_SetAddress+0x1a>
 8006458:	2302      	movs	r3, #2
 800645a:	e012      	b.n	8006482 <HAL_PCD_SetAddress+0x40>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	78fa      	ldrb	r2, [r7, #3]
 8006468:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	78fa      	ldrb	r2, [r7, #3]
 8006470:	4611      	mov	r1, r2
 8006472:	4618      	mov	r0, r3
 8006474:	f007 ffe9 	bl	800e44a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b084      	sub	sp, #16
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	4608      	mov	r0, r1
 8006494:	4611      	mov	r1, r2
 8006496:	461a      	mov	r2, r3
 8006498:	4603      	mov	r3, r0
 800649a:	70fb      	strb	r3, [r7, #3]
 800649c:	460b      	mov	r3, r1
 800649e:	803b      	strh	r3, [r7, #0]
 80064a0:	4613      	mov	r3, r2
 80064a2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	da0e      	bge.n	80064ce <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	f003 0207 	and.w	r2, r3, #7
 80064b6:	4613      	mov	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	3310      	adds	r3, #16
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	4413      	add	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2201      	movs	r2, #1
 80064ca:	705a      	strb	r2, [r3, #1]
 80064cc:	e00e      	b.n	80064ec <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	f003 0207 	and.w	r2, r3, #7
 80064d4:	4613      	mov	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	4413      	add	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80064f8:	883b      	ldrh	r3, [r7, #0]
 80064fa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	78ba      	ldrb	r2, [r7, #2]
 8006506:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006508:	78bb      	ldrb	r3, [r7, #2]
 800650a:	2b02      	cmp	r3, #2
 800650c:	d102      	bne.n	8006514 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800651a:	2b01      	cmp	r3, #1
 800651c:	d101      	bne.n	8006522 <HAL_PCD_EP_Open+0x98>
 800651e:	2302      	movs	r3, #2
 8006520:	e00e      	b.n	8006540 <HAL_PCD_EP_Open+0xb6>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68f9      	ldr	r1, [r7, #12]
 8006530:	4618      	mov	r0, r3
 8006532:	f006 fbf9 	bl	800cd28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800653e:	7afb      	ldrb	r3, [r7, #11]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	607a      	str	r2, [r7, #4]
 8006552:	603b      	str	r3, [r7, #0]
 8006554:	460b      	mov	r3, r1
 8006556:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006558:	7afb      	ldrb	r3, [r7, #11]
 800655a:	f003 0207 	and.w	r2, r3, #7
 800655e:	4613      	mov	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	4413      	add	r3, r2
 800656e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	2200      	movs	r2, #0
 8006580:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2200      	movs	r2, #0
 8006586:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006588:	7afb      	ldrb	r3, [r7, #11]
 800658a:	f003 0307 	and.w	r3, r3, #7
 800658e:	b2da      	uxtb	r2, r3
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6979      	ldr	r1, [r7, #20]
 800659a:	4618      	mov	r0, r3
 800659c:	f007 f8ac 	bl	800d6f8 <USB_EPStartXfer>

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3718      	adds	r7, #24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b086      	sub	sp, #24
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	60f8      	str	r0, [r7, #12]
 80065b2:	607a      	str	r2, [r7, #4]
 80065b4:	603b      	str	r3, [r7, #0]
 80065b6:	460b      	mov	r3, r1
 80065b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065ba:	7afb      	ldrb	r3, [r7, #11]
 80065bc:	f003 0207 	and.w	r2, r3, #7
 80065c0:	4613      	mov	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	00db      	lsls	r3, r3, #3
 80065c8:	3310      	adds	r3, #16
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	4413      	add	r3, r2
 80065ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2200      	movs	r2, #0
 80065ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	2201      	movs	r2, #1
 80065f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065f6:	7afb      	ldrb	r3, [r7, #11]
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6979      	ldr	r1, [r7, #20]
 8006608:	4618      	mov	r0, r3
 800660a:	f007 f875 	bl	800d6f8 <USB_EPStartXfer>

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006624:	78fb      	ldrb	r3, [r7, #3]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	7912      	ldrb	r2, [r2, #4]
 800662e:	4293      	cmp	r3, r2
 8006630:	d901      	bls.n	8006636 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e03e      	b.n	80066b4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006636:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800663a:	2b00      	cmp	r3, #0
 800663c:	da0e      	bge.n	800665c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800663e:	78fb      	ldrb	r3, [r7, #3]
 8006640:	f003 0207 	and.w	r2, r3, #7
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	3310      	adds	r3, #16
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	4413      	add	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2201      	movs	r2, #1
 8006658:	705a      	strb	r2, [r3, #1]
 800665a:	e00c      	b.n	8006676 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800665c:	78fa      	ldrb	r2, [r7, #3]
 800665e:	4613      	mov	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	4413      	add	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2201      	movs	r2, #1
 800667a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800667c:	78fb      	ldrb	r3, [r7, #3]
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	b2da      	uxtb	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800668e:	2b01      	cmp	r3, #1
 8006690:	d101      	bne.n	8006696 <HAL_PCD_EP_SetStall+0x7e>
 8006692:	2302      	movs	r3, #2
 8006694:	e00e      	b.n	80066b4 <HAL_PCD_EP_SetStall+0x9c>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68f9      	ldr	r1, [r7, #12]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f007 fdd6 	bl	800e256 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	f003 030f 	and.w	r3, r3, #15
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	7912      	ldrb	r2, [r2, #4]
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d901      	bls.n	80066da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e040      	b.n	800675c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80066da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	da0e      	bge.n	8006700 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066e2:	78fb      	ldrb	r3, [r7, #3]
 80066e4:	f003 0207 	and.w	r2, r3, #7
 80066e8:	4613      	mov	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	3310      	adds	r3, #16
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	4413      	add	r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2201      	movs	r2, #1
 80066fc:	705a      	strb	r2, [r3, #1]
 80066fe:	e00e      	b.n	800671e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	f003 0207 	and.w	r2, r3, #7
 8006706:	4613      	mov	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	00db      	lsls	r3, r3, #3
 800670e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	4413      	add	r3, r2
 8006716:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006724:	78fb      	ldrb	r3, [r7, #3]
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	b2da      	uxtb	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006736:	2b01      	cmp	r3, #1
 8006738:	d101      	bne.n	800673e <HAL_PCD_EP_ClrStall+0x82>
 800673a:	2302      	movs	r3, #2
 800673c:	e00e      	b.n	800675c <HAL_PCD_EP_ClrStall+0xa0>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68f9      	ldr	r1, [r7, #12]
 800674c:	4618      	mov	r0, r3
 800674e:	f007 fdd3 	bl	800e2f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b092      	sub	sp, #72	@ 0x48
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800676c:	e333      	b.n	8006dd6 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006776:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006778:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8006784:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006788:	2b00      	cmp	r3, #0
 800678a:	f040 8108 	bne.w	800699e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800678e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006790:	f003 0310 	and.w	r3, r3, #16
 8006794:	2b00      	cmp	r3, #0
 8006796:	d14c      	bne.n	8006832 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80067a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a8:	813b      	strh	r3, [r7, #8]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	893b      	ldrh	r3, [r7, #8]
 80067b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3310      	adds	r3, #16
 80067c0:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	461a      	mov	r2, r3
 80067ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	4413      	add	r3, r2
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	6812      	ldr	r2, [r2, #0]
 80067da:	4413      	add	r3, r2
 80067dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80067e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80067ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067ec:	695a      	ldr	r2, [r3, #20]
 80067ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	441a      	add	r2, r3
 80067f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067f6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80067f8:	2100      	movs	r1, #0
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f00a f895 	bl	801092a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	7b1b      	ldrb	r3, [r3, #12]
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 82e5 	beq.w	8006dd6 <PCD_EP_ISR_Handler+0x672>
 800680c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	2b00      	cmp	r3, #0
 8006812:	f040 82e0 	bne.w	8006dd6 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	7b1b      	ldrb	r3, [r3, #12]
 800681a:	b2db      	uxtb	r3, r3
 800681c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006820:	b2da      	uxtb	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	731a      	strb	r2, [r3, #12]
 8006830:	e2d1      	b.n	8006dd6 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006838:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006842:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006844:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006848:	2b00      	cmp	r3, #0
 800684a:	d032      	beq.n	80068b2 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006854:	b29b      	uxth	r3, r3
 8006856:	461a      	mov	r2, r3
 8006858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	00db      	lsls	r3, r3, #3
 800685e:	4413      	add	r3, r2
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	6812      	ldr	r2, [r2, #0]
 8006864:	4413      	add	r3, r2
 8006866:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006870:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006872:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6818      	ldr	r0, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800687e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006880:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006884:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006886:	b29b      	uxth	r3, r3
 8006888:	f007 fe71 	bl	800e56e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	b29a      	uxth	r2, r3
 8006894:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006898:	4013      	ands	r3, r2
 800689a:	817b      	strh	r3, [r7, #10]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	897a      	ldrh	r2, [r7, #10]
 80068a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80068a6:	b292      	uxth	r2, r2
 80068a8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f00a f810 	bl	80108d0 <HAL_PCD_SetupStageCallback>
 80068b0:	e291      	b.n	8006dd6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80068b2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f280 828d 	bge.w	8006dd6 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80068c8:	4013      	ands	r3, r2
 80068ca:	81fb      	strh	r3, [r7, #14]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	89fa      	ldrh	r2, [r7, #14]
 80068d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80068d6:	b292      	uxth	r2, r2
 80068d8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	461a      	mov	r2, r3
 80068e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	00db      	lsls	r3, r3, #3
 80068ec:	4413      	add	r3, r2
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	6812      	ldr	r2, [r2, #0]
 80068f2:	4413      	add	r3, r2
 80068f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80068fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006900:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d019      	beq.n	800693e <PCD_EP_ISR_Handler+0x1da>
 800690a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d015      	beq.n	800693e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6818      	ldr	r0, [r3, #0]
 8006916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006918:	6959      	ldr	r1, [r3, #20]
 800691a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800691c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800691e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006920:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006922:	b29b      	uxth	r3, r3
 8006924:	f007 fe23 	bl	800e56e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800692a:	695a      	ldr	r2, [r3, #20]
 800692c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800692e:	69db      	ldr	r3, [r3, #28]
 8006930:	441a      	add	r2, r3
 8006932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006934:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006936:	2100      	movs	r1, #0
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f009 ffdb 	bl	80108f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006946:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006948:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800694c:	2b00      	cmp	r3, #0
 800694e:	f040 8242 	bne.w	8006dd6 <PCD_EP_ISR_Handler+0x672>
 8006952:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006954:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006958:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800695c:	f000 823b 	beq.w	8006dd6 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	b29b      	uxth	r3, r3
 8006968:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800696c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006970:	81bb      	strh	r3, [r7, #12]
 8006972:	89bb      	ldrh	r3, [r7, #12]
 8006974:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006978:	81bb      	strh	r3, [r7, #12]
 800697a:	89bb      	ldrh	r3, [r7, #12]
 800697c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006980:	81bb      	strh	r3, [r7, #12]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	89bb      	ldrh	r3, [r7, #12]
 8006988:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800698c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006990:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006998:	b29b      	uxth	r3, r3
 800699a:	8013      	strh	r3, [r2, #0]
 800699c:	e21b      	b.n	8006dd6 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80069b0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f280 80f1 	bge.w	8006b9c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80069d0:	4013      	ands	r3, r2
 80069d2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	461a      	mov	r2, r3
 80069da:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80069e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80069e8:	b292      	uxth	r2, r2
 80069ea:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80069ec:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80069f0:	4613      	mov	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	4413      	add	r3, r2
 8006a00:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a04:	7b1b      	ldrb	r3, [r3, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d123      	bne.n	8006a52 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	461a      	mov	r2, r3
 8006a16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	4413      	add	r3, r2
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	6812      	ldr	r2, [r2, #0]
 8006a22:	4413      	add	r3, r2
 8006a24:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a2e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8006a32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 808b 	beq.w	8006b52 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6818      	ldr	r0, [r3, #0]
 8006a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a42:	6959      	ldr	r1, [r3, #20]
 8006a44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a46:	88da      	ldrh	r2, [r3, #6]
 8006a48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006a4c:	f007 fd8f 	bl	800e56e <USB_ReadPMA>
 8006a50:	e07f      	b.n	8006b52 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a54:	78db      	ldrb	r3, [r3, #3]
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d109      	bne.n	8006a6e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006a5a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f9c6 	bl	8006df2 <HAL_PCD_EP_DB_Receive>
 8006a66:	4603      	mov	r3, r0
 8006a68:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006a6c:	e071      	b.n	8006b52 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	461a      	mov	r2, r3
 8006a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a88:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	441a      	add	r2, r3
 8006a98:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006a9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aa6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d022      	beq.n	8006b0e <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	00db      	lsls	r3, r3, #3
 8006ada:	4413      	add	r3, r2
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	6812      	ldr	r2, [r2, #0]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006aec:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8006af0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d02c      	beq.n	8006b52 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6818      	ldr	r0, [r3, #0]
 8006afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006afe:	6959      	ldr	r1, [r3, #20]
 8006b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b02:	891a      	ldrh	r2, [r3, #8]
 8006b04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006b08:	f007 fd31 	bl	800e56e <USB_ReadPMA>
 8006b0c:	e021      	b.n	8006b52 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	461a      	mov	r2, r3
 8006b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	4413      	add	r3, r2
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	6812      	ldr	r2, [r2, #0]
 8006b26:	4413      	add	r3, r2
 8006b28:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b32:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8006b36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d009      	beq.n	8006b52 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6818      	ldr	r0, [r3, #0]
 8006b42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b44:	6959      	ldr	r1, [r3, #20]
 8006b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b48:	895a      	ldrh	r2, [r3, #10]
 8006b4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006b4e:	f007 fd0e 	bl	800e56e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006b52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b54:	69da      	ldr	r2, [r3, #28]
 8006b56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006b5a:	441a      	add	r2, r3
 8006b5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b5e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006b60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b62:	695a      	ldr	r2, [r3, #20]
 8006b64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006b68:	441a      	add	r2, r3
 8006b6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b6c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006b6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d005      	beq.n	8006b82 <PCD_EP_ISR_Handler+0x41e>
 8006b76:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8006b7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d206      	bcs.n	8006b90 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f009 feb3 	bl	80108f4 <HAL_PCD_DataOutStageCallback>
 8006b8e:	e005      	b.n	8006b9c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b96:	4618      	mov	r0, r3
 8006b98:	f006 fdae 	bl	800d6f8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006b9c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 8117 	beq.w	8006dd6 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8006ba8:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006bac:	4613      	mov	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	3310      	adds	r3, #16
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	4413      	add	r3, r2
 8006bba:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	441a      	add	r2, r3
 8006be6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bf6:	78db      	ldrb	r3, [r3, #3]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	f040 80a1 	bne.w	8006d40 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8006bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c00:	2200      	movs	r2, #0
 8006c02:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006c04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c06:	7b1b      	ldrb	r3, [r3, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 8092 	beq.w	8006d32 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006c0e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d046      	beq.n	8006ca6 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006c18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c1a:	785b      	ldrb	r3, [r3, #1]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d126      	bne.n	8006c6e <PCD_EP_ISR_Handler+0x50a>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	617b      	str	r3, [r7, #20]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	461a      	mov	r2, r3
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	4413      	add	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	00da      	lsls	r2, r3, #3
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	4413      	add	r3, r2
 8006c42:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c46:	613b      	str	r3, [r7, #16]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	801a      	strh	r2, [r3, #0]
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	801a      	strh	r2, [r3, #0]
 8006c6c:	e061      	b.n	8006d32 <PCD_EP_ISR_Handler+0x5ce>
 8006c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c70:	785b      	ldrb	r3, [r3, #1]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d15d      	bne.n	8006d32 <PCD_EP_ISR_Handler+0x5ce>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	61fb      	str	r3, [r7, #28]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	461a      	mov	r2, r3
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	61fb      	str	r3, [r7, #28]
 8006c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	00da      	lsls	r2, r3, #3
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	4413      	add	r3, r2
 8006c98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c9c:	61bb      	str	r3, [r7, #24]
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	801a      	strh	r2, [r3, #0]
 8006ca4:	e045      	b.n	8006d32 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cae:	785b      	ldrb	r3, [r3, #1]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d126      	bne.n	8006d02 <PCD_EP_ISR_Handler+0x59e>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	4413      	add	r3, r2
 8006cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ccc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	00da      	lsls	r2, r3, #3
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006cda:	623b      	str	r3, [r7, #32]
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	801a      	strh	r2, [r3, #0]
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	801a      	strh	r2, [r3, #0]
 8006d00:	e017      	b.n	8006d32 <PCD_EP_ISR_Handler+0x5ce>
 8006d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d04:	785b      	ldrb	r3, [r3, #1]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d113      	bne.n	8006d32 <PCD_EP_ISR_Handler+0x5ce>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	461a      	mov	r2, r3
 8006d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d18:	4413      	add	r3, r2
 8006d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	00da      	lsls	r2, r3, #3
 8006d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d24:	4413      	add	r3, r2
 8006d26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2e:	2200      	movs	r2, #0
 8006d30:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f009 fdf6 	bl	801092a <HAL_PCD_DataInStageCallback>
 8006d3e:	e04a      	b.n	8006dd6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006d40:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d13f      	bne.n	8006dca <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	461a      	mov	r2, r3
 8006d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	4413      	add	r3, r2
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	6812      	ldr	r2, [r2, #0]
 8006d62:	4413      	add	r3, r2
 8006d64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d6e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8006d70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d72:	699a      	ldr	r2, [r3, #24]
 8006d74:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d906      	bls.n	8006d88 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8006d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d7c:	699a      	ldr	r2, [r3, #24]
 8006d7e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006d80:	1ad2      	subs	r2, r2, r3
 8006d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d84:	619a      	str	r2, [r3, #24]
 8006d86:	e002      	b.n	8006d8e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8006d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d106      	bne.n	8006da4 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f009 fdc4 	bl	801092a <HAL_PCD_DataInStageCallback>
 8006da2:	e018      	b.n	8006dd6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006da4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006da6:	695a      	ldr	r2, [r3, #20]
 8006da8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006daa:	441a      	add	r2, r3
 8006dac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dae:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006db0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006db2:	69da      	ldr	r2, [r3, #28]
 8006db4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006db6:	441a      	add	r2, r3
 8006db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dba:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f006 fc98 	bl	800d6f8 <USB_EPStartXfer>
 8006dc8:	e005      	b.n	8006dd6 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006dca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006dcc:	461a      	mov	r2, r3
 8006dce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f917 	bl	8007004 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	b21b      	sxth	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f6ff acc3 	blt.w	800676e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3748      	adds	r7, #72	@ 0x48
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b088      	sub	sp, #32
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	60f8      	str	r0, [r7, #12]
 8006dfa:	60b9      	str	r1, [r7, #8]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006e00:	88fb      	ldrh	r3, [r7, #6]
 8006e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d07c      	beq.n	8006f04 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	461a      	mov	r2, r3
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	4413      	add	r3, r2
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	6812      	ldr	r2, [r2, #0]
 8006e22:	4413      	add	r3, r2
 8006e24:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e2e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	699a      	ldr	r2, [r3, #24]
 8006e34:	8b7b      	ldrh	r3, [r7, #26]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d306      	bcc.n	8006e48 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	699a      	ldr	r2, [r3, #24]
 8006e3e:	8b7b      	ldrh	r3, [r7, #26]
 8006e40:	1ad2      	subs	r2, r2, r3
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	619a      	str	r2, [r3, #24]
 8006e46:	e002      	b.n	8006e4e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d123      	bne.n	8006e9e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e70:	833b      	strh	r3, [r7, #24]
 8006e72:	8b3b      	ldrh	r3, [r7, #24]
 8006e74:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e78:	833b      	strh	r3, [r7, #24]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	441a      	add	r2, r3
 8006e88:	8b3b      	ldrh	r3, [r7, #24]
 8006e8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006e9e:	88fb      	ldrh	r3, [r7, #6]
 8006ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01f      	beq.n	8006ee8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	461a      	mov	r2, r3
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	881b      	ldrh	r3, [r3, #0]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ec2:	82fb      	strh	r3, [r7, #22]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	441a      	add	r2, r3
 8006ed2:	8afb      	ldrh	r3, [r7, #22]
 8006ed4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ed8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006edc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ee0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006ee8:	8b7b      	ldrh	r3, [r7, #26]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 8085 	beq.w	8006ffa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6818      	ldr	r0, [r3, #0]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	6959      	ldr	r1, [r3, #20]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	891a      	ldrh	r2, [r3, #8]
 8006efc:	8b7b      	ldrh	r3, [r7, #26]
 8006efe:	f007 fb36 	bl	800e56e <USB_ReadPMA>
 8006f02:	e07a      	b.n	8006ffa <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	461a      	mov	r2, r3
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	00db      	lsls	r3, r3, #3
 8006f16:	4413      	add	r3, r2
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	6812      	ldr	r2, [r2, #0]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f28:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	699a      	ldr	r2, [r3, #24]
 8006f2e:	8b7b      	ldrh	r3, [r7, #26]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d306      	bcc.n	8006f42 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	699a      	ldr	r2, [r3, #24]
 8006f38:	8b7b      	ldrh	r3, [r7, #26]
 8006f3a:	1ad2      	subs	r2, r2, r3
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	619a      	str	r2, [r3, #24]
 8006f40:	e002      	b.n	8006f48 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2200      	movs	r2, #0
 8006f46:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d123      	bne.n	8006f98 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	461a      	mov	r2, r3
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f6a:	83fb      	strh	r3, [r7, #30]
 8006f6c:	8bfb      	ldrh	r3, [r7, #30]
 8006f6e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006f72:	83fb      	strh	r3, [r7, #30]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	441a      	add	r2, r3
 8006f82:	8bfb      	ldrh	r3, [r7, #30]
 8006f84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006f98:	88fb      	ldrh	r3, [r7, #6]
 8006f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d11f      	bne.n	8006fe2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fbc:	83bb      	strh	r3, [r7, #28]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	441a      	add	r2, r3
 8006fcc:	8bbb      	ldrh	r3, [r7, #28]
 8006fce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006fe2:	8b7b      	ldrh	r3, [r7, #26]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d008      	beq.n	8006ffa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6818      	ldr	r0, [r3, #0]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	6959      	ldr	r1, [r3, #20]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	895a      	ldrh	r2, [r3, #10]
 8006ff4:	8b7b      	ldrh	r3, [r7, #26]
 8006ff6:	f007 faba 	bl	800e56e <USB_ReadPMA>
    }
  }

  return count;
 8006ffa:	8b7b      	ldrh	r3, [r7, #26]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3720      	adds	r7, #32
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b0a6      	sub	sp, #152	@ 0x98
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	4613      	mov	r3, r2
 8007010:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007012:	88fb      	ldrh	r3, [r7, #6]
 8007014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 81f7 	beq.w	800740c <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007026:	b29b      	uxth	r3, r3
 8007028:	461a      	mov	r2, r3
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	00db      	lsls	r3, r3, #3
 8007030:	4413      	add	r3, r2
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	6812      	ldr	r2, [r2, #0]
 8007036:	4413      	add	r3, r2
 8007038:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007042:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	699a      	ldr	r2, [r3, #24]
 800704a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800704e:	429a      	cmp	r2, r3
 8007050:	d907      	bls.n	8007062 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	699a      	ldr	r2, [r3, #24]
 8007056:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800705a:	1ad2      	subs	r2, r2, r3
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	619a      	str	r2, [r3, #24]
 8007060:	e002      	b.n	8007068 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2200      	movs	r2, #0
 8007066:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	2b00      	cmp	r3, #0
 800706e:	f040 80e1 	bne.w	8007234 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	785b      	ldrb	r3, [r3, #1]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d126      	bne.n	80070c8 <HAL_PCD_EP_DB_Transmit+0xc4>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007088:	b29b      	uxth	r3, r3
 800708a:	461a      	mov	r2, r3
 800708c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708e:	4413      	add	r3, r2
 8007090:	633b      	str	r3, [r7, #48]	@ 0x30
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	00da      	lsls	r2, r3, #3
 8007098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709a:	4413      	add	r3, r2
 800709c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80070a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b0:	801a      	strh	r2, [r3, #0]
 80070b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c4:	801a      	strh	r2, [r3, #0]
 80070c6:	e01a      	b.n	80070fe <HAL_PCD_EP_DB_Transmit+0xfa>
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	785b      	ldrb	r3, [r3, #1]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d116      	bne.n	80070fe <HAL_PCD_EP_DB_Transmit+0xfa>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070de:	b29b      	uxth	r3, r3
 80070e0:	461a      	mov	r2, r3
 80070e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e4:	4413      	add	r3, r2
 80070e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	00da      	lsls	r2, r3, #3
 80070ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f0:	4413      	add	r3, r2
 80070f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80070f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070fa:	2200      	movs	r2, #0
 80070fc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	785b      	ldrb	r3, [r3, #1]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d126      	bne.n	800715a <HAL_PCD_EP_DB_Transmit+0x156>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	623b      	str	r3, [r7, #32]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800711a:	b29b      	uxth	r3, r3
 800711c:	461a      	mov	r2, r3
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	4413      	add	r3, r2
 8007122:	623b      	str	r3, [r7, #32]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	00da      	lsls	r2, r3, #3
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	4413      	add	r3, r2
 800712e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007132:	61fb      	str	r3, [r7, #28]
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	b29b      	uxth	r3, r3
 800713a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800713e:	b29a      	uxth	r2, r3
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	801a      	strh	r2, [r3, #0]
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	b29b      	uxth	r3, r3
 800714a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800714e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007152:	b29a      	uxth	r2, r3
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	801a      	strh	r2, [r3, #0]
 8007158:	e017      	b.n	800718a <HAL_PCD_EP_DB_Transmit+0x186>
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	785b      	ldrb	r3, [r3, #1]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d113      	bne.n	800718a <HAL_PCD_EP_DB_Transmit+0x186>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800716a:	b29b      	uxth	r3, r3
 800716c:	461a      	mov	r2, r3
 800716e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007170:	4413      	add	r3, r2
 8007172:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	00da      	lsls	r2, r3, #3
 800717a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717c:	4413      	add	r3, r2
 800717e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007182:	627b      	str	r3, [r7, #36]	@ 0x24
 8007184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007186:	2200      	movs	r2, #0
 8007188:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	78db      	ldrb	r3, [r3, #3]
 800718e:	2b02      	cmp	r3, #2
 8007190:	d123      	bne.n	80071da <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071ac:	837b      	strh	r3, [r7, #26]
 80071ae:	8b7b      	ldrh	r3, [r7, #26]
 80071b0:	f083 0320 	eor.w	r3, r3, #32
 80071b4:	837b      	strh	r3, [r7, #26]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	461a      	mov	r2, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	441a      	add	r2, r3
 80071c4:	8b7b      	ldrh	r3, [r7, #26]
 80071c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	4619      	mov	r1, r3
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f009 fba2 	bl	801092a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80071e6:	88fb      	ldrh	r3, [r7, #6]
 80071e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01f      	beq.n	8007230 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	461a      	mov	r2, r3
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	b29b      	uxth	r3, r3
 8007202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800720a:	833b      	strh	r3, [r7, #24]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	461a      	mov	r2, r3
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	441a      	add	r2, r3
 800721a:	8b3b      	ldrh	r3, [r7, #24]
 800721c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007220:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007224:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007228:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800722c:	b29b      	uxth	r3, r3
 800722e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8007230:	2300      	movs	r3, #0
 8007232:	e31f      	b.n	8007874 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007234:	88fb      	ldrh	r3, [r7, #6]
 8007236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d021      	beq.n	8007282 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	b29b      	uxth	r3, r3
 8007250:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007258:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	461a      	mov	r2, r3
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	441a      	add	r2, r3
 800726a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800726e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007272:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007276:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800727a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800727e:	b29b      	uxth	r3, r3
 8007280:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007288:	2b01      	cmp	r3, #1
 800728a:	f040 82ca 	bne.w	8007822 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	695a      	ldr	r2, [r3, #20]
 8007292:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007296:	441a      	add	r2, r3
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	69da      	ldr	r2, [r3, #28]
 80072a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80072a4:	441a      	add	r2, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	6a1a      	ldr	r2, [r3, #32]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d309      	bcc.n	80072ca <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	6a1a      	ldr	r2, [r3, #32]
 80072c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072c2:	1ad2      	subs	r2, r2, r3
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	621a      	str	r2, [r3, #32]
 80072c8:	e015      	b.n	80072f6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d107      	bne.n	80072e2 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80072d2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80072d6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80072e0:	e009      	b.n	80072f6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2200      	movs	r2, #0
 80072f4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	785b      	ldrb	r3, [r3, #1]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d15f      	bne.n	80073be <HAL_PCD_EP_DB_Transmit+0x3ba>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	643b      	str	r3, [r7, #64]	@ 0x40
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800730c:	b29b      	uxth	r3, r3
 800730e:	461a      	mov	r2, r3
 8007310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007312:	4413      	add	r3, r2
 8007314:	643b      	str	r3, [r7, #64]	@ 0x40
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	00da      	lsls	r2, r3, #3
 800731c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800731e:	4413      	add	r3, r2
 8007320:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007324:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007328:	881b      	ldrh	r3, [r3, #0]
 800732a:	b29b      	uxth	r3, r3
 800732c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007330:	b29a      	uxth	r2, r3
 8007332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007334:	801a      	strh	r2, [r3, #0]
 8007336:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10a      	bne.n	8007352 <HAL_PCD_EP_DB_Transmit+0x34e>
 800733c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800733e:	881b      	ldrh	r3, [r3, #0]
 8007340:	b29b      	uxth	r3, r3
 8007342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800734a:	b29a      	uxth	r2, r3
 800734c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800734e:	801a      	strh	r2, [r3, #0]
 8007350:	e051      	b.n	80073f6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007352:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007354:	2b3e      	cmp	r3, #62	@ 0x3e
 8007356:	d816      	bhi.n	8007386 <HAL_PCD_EP_DB_Transmit+0x382>
 8007358:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800735a:	085b      	lsrs	r3, r3, #1
 800735c:	653b      	str	r3, [r7, #80]	@ 0x50
 800735e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <HAL_PCD_EP_DB_Transmit+0x36a>
 8007368:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800736a:	3301      	adds	r3, #1
 800736c:	653b      	str	r3, [r7, #80]	@ 0x50
 800736e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	b29a      	uxth	r2, r3
 8007374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007376:	b29b      	uxth	r3, r3
 8007378:	029b      	lsls	r3, r3, #10
 800737a:	b29b      	uxth	r3, r3
 800737c:	4313      	orrs	r3, r2
 800737e:	b29a      	uxth	r2, r3
 8007380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007382:	801a      	strh	r2, [r3, #0]
 8007384:	e037      	b.n	80073f6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007386:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007388:	095b      	lsrs	r3, r3, #5
 800738a:	653b      	str	r3, [r7, #80]	@ 0x50
 800738c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800738e:	f003 031f 	and.w	r3, r3, #31
 8007392:	2b00      	cmp	r3, #0
 8007394:	d102      	bne.n	800739c <HAL_PCD_EP_DB_Transmit+0x398>
 8007396:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007398:	3b01      	subs	r3, #1
 800739a:	653b      	str	r3, [r7, #80]	@ 0x50
 800739c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	029b      	lsls	r3, r3, #10
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	4313      	orrs	r3, r2
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ba:	801a      	strh	r2, [r3, #0]
 80073bc:	e01b      	b.n	80073f6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	785b      	ldrb	r3, [r3, #1]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d117      	bne.n	80073f6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	461a      	mov	r2, r3
 80073d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073da:	4413      	add	r3, r2
 80073dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	00da      	lsls	r2, r3, #3
 80073e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073e6:	4413      	add	r3, r2
 80073e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80073ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073f4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6818      	ldr	r0, [r3, #0]
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	6959      	ldr	r1, [r3, #20]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	891a      	ldrh	r2, [r3, #8]
 8007402:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007404:	b29b      	uxth	r3, r3
 8007406:	f007 f870 	bl	800e4ea <USB_WritePMA>
 800740a:	e20a      	b.n	8007822 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007414:	b29b      	uxth	r3, r3
 8007416:	461a      	mov	r2, r3
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	00db      	lsls	r3, r3, #3
 800741e:	4413      	add	r3, r2
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	6812      	ldr	r2, [r2, #0]
 8007424:	4413      	add	r3, r2
 8007426:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007430:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	699a      	ldr	r2, [r3, #24]
 8007438:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800743c:	429a      	cmp	r2, r3
 800743e:	d307      	bcc.n	8007450 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	699a      	ldr	r2, [r3, #24]
 8007444:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007448:	1ad2      	subs	r2, r2, r3
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	619a      	str	r2, [r3, #24]
 800744e:	e002      	b.n	8007456 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2200      	movs	r2, #0
 8007454:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	2b00      	cmp	r3, #0
 800745c:	f040 80f6 	bne.w	800764c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	785b      	ldrb	r3, [r3, #1]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d126      	bne.n	80074b6 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	677b      	str	r3, [r7, #116]	@ 0x74
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007476:	b29b      	uxth	r3, r3
 8007478:	461a      	mov	r2, r3
 800747a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800747c:	4413      	add	r3, r2
 800747e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	00da      	lsls	r2, r3, #3
 8007486:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007488:	4413      	add	r3, r2
 800748a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800748e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007490:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800749a:	b29a      	uxth	r2, r3
 800749c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800749e:	801a      	strh	r2, [r3, #0]
 80074a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80074a2:	881b      	ldrh	r3, [r3, #0]
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80074b2:	801a      	strh	r2, [r3, #0]
 80074b4:	e01a      	b.n	80074ec <HAL_PCD_EP_DB_Transmit+0x4e8>
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	785b      	ldrb	r3, [r3, #1]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d116      	bne.n	80074ec <HAL_PCD_EP_DB_Transmit+0x4e8>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	461a      	mov	r2, r3
 80074d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80074d2:	4413      	add	r3, r2
 80074d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	00da      	lsls	r2, r3, #3
 80074dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80074de:	4413      	add	r3, r2
 80074e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074e8:	2200      	movs	r2, #0
 80074ea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	785b      	ldrb	r3, [r3, #1]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d12f      	bne.n	800755c <HAL_PCD_EP_DB_Transmit+0x558>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800750c:	b29b      	uxth	r3, r3
 800750e:	461a      	mov	r2, r3
 8007510:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007514:	4413      	add	r3, r2
 8007516:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	00da      	lsls	r2, r3, #3
 8007520:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007524:	4413      	add	r3, r2
 8007526:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800752a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800752e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	b29b      	uxth	r3, r3
 8007536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800753a:	b29a      	uxth	r2, r3
 800753c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007540:	801a      	strh	r2, [r3, #0]
 8007542:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	b29b      	uxth	r3, r3
 800754a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800754e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007552:	b29a      	uxth	r2, r3
 8007554:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007558:	801a      	strh	r2, [r3, #0]
 800755a:	e01c      	b.n	8007596 <HAL_PCD_EP_DB_Transmit+0x592>
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	785b      	ldrb	r3, [r3, #1]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d118      	bne.n	8007596 <HAL_PCD_EP_DB_Transmit+0x592>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800756c:	b29b      	uxth	r3, r3
 800756e:	461a      	mov	r2, r3
 8007570:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007574:	4413      	add	r3, r2
 8007576:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	00da      	lsls	r2, r3, #3
 8007580:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007584:	4413      	add	r3, r2
 8007586:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800758a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800758e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007592:	2200      	movs	r2, #0
 8007594:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	78db      	ldrb	r3, [r3, #3]
 800759a:	2b02      	cmp	r3, #2
 800759c:	d127      	bne.n	80075ee <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075b8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80075bc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80075c0:	f083 0320 	eor.w	r3, r3, #32
 80075c4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	441a      	add	r2, r3
 80075d6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80075da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	4619      	mov	r1, r3
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f009 f998 	bl	801092a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80075fa:	88fb      	ldrh	r3, [r7, #6]
 80075fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d121      	bne.n	8007648 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	461a      	mov	r2, r3
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	881b      	ldrh	r3, [r3, #0]
 8007614:	b29b      	uxth	r3, r3
 8007616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800761a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800761e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	441a      	add	r2, r3
 8007630:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007634:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007638:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800763c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007644:	b29b      	uxth	r3, r3
 8007646:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	e113      	b.n	8007874 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800764c:	88fb      	ldrh	r3, [r7, #6]
 800764e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d121      	bne.n	800769a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	461a      	mov	r2, r3
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	b29b      	uxth	r3, r3
 8007668:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800766c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007670:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	461a      	mov	r2, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	441a      	add	r2, r3
 8007682:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007686:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800768a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800768e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007696:	b29b      	uxth	r3, r3
 8007698:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	f040 80be 	bne.w	8007822 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	695a      	ldr	r2, [r3, #20]
 80076aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80076ae:	441a      	add	r2, r3
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	69da      	ldr	r2, [r3, #28]
 80076b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80076bc:	441a      	add	r2, r3
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	6a1a      	ldr	r2, [r3, #32]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d309      	bcc.n	80076e2 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	6a1a      	ldr	r2, [r3, #32]
 80076d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076da:	1ad2      	subs	r2, r2, r3
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	621a      	str	r2, [r3, #32]
 80076e0:	e015      	b.n	800770e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d107      	bne.n	80076fa <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80076ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80076ee:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80076f8:	e009      	b.n	800770e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2200      	movs	r2, #0
 8007704:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	785b      	ldrb	r3, [r3, #1]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d15f      	bne.n	80077dc <HAL_PCD_EP_DB_Transmit+0x7d8>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800772a:	b29b      	uxth	r3, r3
 800772c:	461a      	mov	r2, r3
 800772e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007730:	4413      	add	r3, r2
 8007732:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	00da      	lsls	r2, r3, #3
 800773a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800773c:	4413      	add	r3, r2
 800773e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007742:	667b      	str	r3, [r7, #100]	@ 0x64
 8007744:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	b29b      	uxth	r3, r3
 800774a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800774e:	b29a      	uxth	r2, r3
 8007750:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007752:	801a      	strh	r2, [r3, #0]
 8007754:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10a      	bne.n	8007770 <HAL_PCD_EP_DB_Transmit+0x76c>
 800775a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29b      	uxth	r3, r3
 8007760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007768:	b29a      	uxth	r2, r3
 800776a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800776c:	801a      	strh	r2, [r3, #0]
 800776e:	e04e      	b.n	800780e <HAL_PCD_EP_DB_Transmit+0x80a>
 8007770:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007772:	2b3e      	cmp	r3, #62	@ 0x3e
 8007774:	d816      	bhi.n	80077a4 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8007776:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007778:	085b      	lsrs	r3, r3, #1
 800777a:	663b      	str	r3, [r7, #96]	@ 0x60
 800777c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	d002      	beq.n	800778c <HAL_PCD_EP_DB_Transmit+0x788>
 8007786:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007788:	3301      	adds	r3, #1
 800778a:	663b      	str	r3, [r7, #96]	@ 0x60
 800778c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	b29a      	uxth	r2, r3
 8007792:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007794:	b29b      	uxth	r3, r3
 8007796:	029b      	lsls	r3, r3, #10
 8007798:	b29b      	uxth	r3, r3
 800779a:	4313      	orrs	r3, r2
 800779c:	b29a      	uxth	r2, r3
 800779e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077a0:	801a      	strh	r2, [r3, #0]
 80077a2:	e034      	b.n	800780e <HAL_PCD_EP_DB_Transmit+0x80a>
 80077a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077a6:	095b      	lsrs	r3, r3, #5
 80077a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80077aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077ac:	f003 031f 	and.w	r3, r3, #31
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d102      	bne.n	80077ba <HAL_PCD_EP_DB_Transmit+0x7b6>
 80077b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077b6:	3b01      	subs	r3, #1
 80077b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80077ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	b29a      	uxth	r2, r3
 80077c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	029b      	lsls	r3, r3, #10
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	4313      	orrs	r3, r2
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077d8:	801a      	strh	r2, [r3, #0]
 80077da:	e018      	b.n	800780e <HAL_PCD_EP_DB_Transmit+0x80a>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	785b      	ldrb	r3, [r3, #1]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d114      	bne.n	800780e <HAL_PCD_EP_DB_Transmit+0x80a>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	461a      	mov	r2, r3
 80077f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077f2:	4413      	add	r3, r2
 80077f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	00da      	lsls	r2, r3, #3
 80077fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077fe:	4413      	add	r3, r2
 8007800:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007804:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007806:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007808:	b29a      	uxth	r2, r3
 800780a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800780c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6818      	ldr	r0, [r3, #0]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	6959      	ldr	r1, [r3, #20]
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	895a      	ldrh	r2, [r3, #10]
 800781a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800781c:	b29b      	uxth	r3, r3
 800781e:	f006 fe64 	bl	800e4ea <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	881b      	ldrh	r3, [r3, #0]
 8007832:	b29b      	uxth	r3, r3
 8007834:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007838:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800783c:	82fb      	strh	r3, [r7, #22]
 800783e:	8afb      	ldrh	r3, [r7, #22]
 8007840:	f083 0310 	eor.w	r3, r3, #16
 8007844:	82fb      	strh	r3, [r7, #22]
 8007846:	8afb      	ldrh	r3, [r7, #22]
 8007848:	f083 0320 	eor.w	r3, r3, #32
 800784c:	82fb      	strh	r3, [r7, #22]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	441a      	add	r2, r3
 800785c:	8afb      	ldrh	r3, [r7, #22]
 800785e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007862:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800786a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800786e:	b29b      	uxth	r3, r3
 8007870:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3798      	adds	r7, #152	@ 0x98
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	607b      	str	r3, [r7, #4]
 8007886:	460b      	mov	r3, r1
 8007888:	817b      	strh	r3, [r7, #10]
 800788a:	4613      	mov	r3, r2
 800788c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800788e:	897b      	ldrh	r3, [r7, #10]
 8007890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007894:	b29b      	uxth	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00b      	beq.n	80078b2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800789a:	897b      	ldrh	r3, [r7, #10]
 800789c:	f003 0207 	and.w	r2, r3, #7
 80078a0:	4613      	mov	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	00db      	lsls	r3, r3, #3
 80078a8:	3310      	adds	r3, #16
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	4413      	add	r3, r2
 80078ae:	617b      	str	r3, [r7, #20]
 80078b0:	e009      	b.n	80078c6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80078b2:	897a      	ldrh	r2, [r7, #10]
 80078b4:	4613      	mov	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	4413      	add	r3, r2
 80078c4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80078c6:	893b      	ldrh	r3, [r7, #8]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d107      	bne.n	80078dc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2200      	movs	r2, #0
 80078d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	80da      	strh	r2, [r3, #6]
 80078da:	e00b      	b.n	80078f4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	2201      	movs	r2, #1
 80078e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	0c1b      	lsrs	r3, r3, #16
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	371c      	adds	r7, #28
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8007902:	b480      	push	{r7}
 8007904:	b085      	sub	sp, #20
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4

  /* Enable BCD feature */
  USBx->BCDR |= USB_BCDR_BCDEN;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800791e:	b29b      	uxth	r3, r3
 8007920:	f043 0301 	orr.w	r3, r3, #1
 8007924:	b29a      	uxth	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  /* Enable DCD : Data Contact Detect */
  USBx->BCDR &= ~(USB_BCDR_PDEN);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007932:	b29b      	uxth	r3, r3
 8007934:	f023 0304 	bic.w	r3, r3, #4
 8007938:	b29a      	uxth	r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  USBx->BCDR &= ~(USB_BCDR_SDEN);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007946:	b29b      	uxth	r3, r3
 8007948:	f023 0308 	bic.w	r3, r3, #8
 800794c:	b29a      	uxth	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  USBx->BCDR |= USB_BCDR_DCDEN;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800795a:	b29b      	uxth	r3, r3
 800795c:	f043 0302 	orr.w	r3, r3, #2
 8007960:	b29a      	uxth	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <HAL_PCDEx_DeActivateBCD>:
  * @brief  Deactivate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_DeActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8007976:	b480      	push	{r7}
 8007978:	b085      	sub	sp, #20
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 0U;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4

  /* Disable BCD feature */
  USBx->BCDR &= ~(USB_BCDR_BCDEN);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007992:	b29b      	uxth	r3, r3
 8007994:	f023 0301 	bic.w	r3, r3, #1
 8007998:	b29a      	uxth	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3714      	adds	r7, #20
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <HAL_PCDEx_BCD_VBUSDetect>:
  * @brief  Handle BatteryCharging Process.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCDEx_BCD_VBUSDetect(PCD_HandleTypeDef *hpcd)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b084      	sub	sp, #16
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = HAL_GetTick();
 80079bc:	f7fc fadc 	bl	8003f78 <HAL_GetTick>
 80079c0:	60b8      	str	r0, [r7, #8]

  /* Wait for Min DCD Timeout */
  HAL_Delay(300U);
 80079c2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80079c6:	f7fc fae3 	bl	8003f90 <HAL_Delay>

  /* Data Pin Contact ? Check Detect flag */
  if ((USBx->BCDR & USB_BCDR_DCDET) == USB_BCDR_DCDET)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	f003 0310 	and.w	r3, r3, #16
 80079d6:	2b10      	cmp	r3, #16
 80079d8:	d103      	bne.n	80079e2 <HAL_PCDEx_BCD_VBUSDetect+0x34>
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_CONTACT_DETECTION);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CONTACT_DETECTION);
 80079da:	21fe      	movs	r1, #254	@ 0xfe
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f009 f821 	bl	8010a24 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }
  /* Primary detection: checks if connected to Standard Downstream Port
  (without charging capability) */
  USBx->BCDR &= ~(USB_BCDR_DCDEN);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	f023 0302 	bic.w	r3, r3, #2
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  HAL_Delay(50U);
 80079f6:	2032      	movs	r0, #50	@ 0x32
 80079f8:	f7fc faca 	bl	8003f90 <HAL_Delay>
  USBx->BCDR |= (USB_BCDR_PDEN);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	f043 0304 	orr.w	r3, r3, #4
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  HAL_Delay(50U);
 8007a10:	2032      	movs	r0, #50	@ 0x32
 8007a12:	f7fc fabd 	bl	8003f90 <HAL_Delay>

  /* If Charger detect ? */
  if ((USBx->BCDR & USB_BCDR_PDET) == USB_BCDR_PDET)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	f003 0320 	and.w	r3, r3, #32
 8007a22:	2b20      	cmp	r3, #32
 8007a24:	d12b      	bne.n	8007a7e <HAL_PCDEx_BCD_VBUSDetect+0xd0>
  {
    /* Start secondary detection to check connection to Charging Downstream
    Port or Dedicated Charging Port */
    USBx->BCDR &= ~(USB_BCDR_PDEN);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	f023 0304 	bic.w	r3, r3, #4
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    HAL_Delay(50U);
 8007a3a:	2032      	movs	r0, #50	@ 0x32
 8007a3c:	f7fc faa8 	bl	8003f90 <HAL_Delay>
    USBx->BCDR |= (USB_BCDR_SDEN);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	f043 0308 	orr.w	r3, r3, #8
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    HAL_Delay(50U);
 8007a54:	2032      	movs	r0, #50	@ 0x32
 8007a56:	f7fc fa9b 	bl	8003f90 <HAL_Delay>

    /* If CDP ? */
    if ((USBx->BCDR & USB_BCDR_SDET) == USB_BCDR_SDET)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a66:	2b40      	cmp	r3, #64	@ 0x40
 8007a68:	d104      	bne.n	8007a74 <HAL_PCDEx_BCD_VBUSDetect+0xc6>
    {
      /* Dedicated Downstream Port DCP */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->BCDCallback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
#else
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
 8007a6a:	21fb      	movs	r1, #251	@ 0xfb
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f008 ffd9 	bl	8010a24 <HAL_PCDEx_BCD_Callback>
 8007a72:	e008      	b.n	8007a86 <HAL_PCDEx_BCD_VBUSDetect+0xd8>
    {
      /* Charging Downstream Port CDP */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->BCDCallback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
#else
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
 8007a74:	21fc      	movs	r1, #252	@ 0xfc
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f008 ffd4 	bl	8010a24 <HAL_PCDEx_BCD_Callback>
 8007a7c:	e003      	b.n	8007a86 <HAL_PCDEx_BCD_VBUSDetect+0xd8>
  {
    /* Standard Downstream Port */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
 8007a7e:	21fd      	movs	r1, #253	@ 0xfd
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f008 ffcf 	bl	8010a24 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Battery Charging capability discovery finished Start Enumeration */
  (void)HAL_PCDEx_DeActivateBCD(hpcd);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7ff ff75 	bl	8007976 <HAL_PCDEx_DeActivateBCD>

  /* Check for the Timeout, else start USB Device */
  if ((HAL_GetTick() - tickstart) > 1000U)
 8007a8c:	f7fc fa74 	bl	8003f78 <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a9a:	d904      	bls.n	8007aa6 <HAL_PCDEx_BCD_VBUSDetect+0xf8>
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_ERROR);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_ERROR);
 8007a9c:	21ff      	movs	r1, #255	@ 0xff
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f008 ffc0 	bl	8010a24 <HAL_PCDEx_BCD_Callback>
    hpcd->BCDCallback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }
}
 8007aa4:	e003      	b.n	8007aae <HAL_PCDEx_BCD_VBUSDetect+0x100>
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f008 ffbb 	bl	8010a24 <HAL_PCDEx_BCD_Callback>
}
 8007aae:	bf00      	nop
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b085      	sub	sp, #20
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	f043 0301 	orr.w	r3, r3, #1
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	f043 0302 	orr.w	r3, r3, #2
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
	...

08007b0c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b10:	4b05      	ldr	r3, [pc, #20]	@ (8007b28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a04      	ldr	r2, [pc, #16]	@ (8007b28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b1a:	6013      	str	r3, [r2, #0]
}
 8007b1c:	bf00      	nop
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	40007000 	.word	0x40007000

08007b2c <HAL_PWR_DisableBkUpAccess>:
  * @brief Disable access to the backup domain
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b30:	4b05      	ldr	r3, [pc, #20]	@ (8007b48 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a04      	ldr	r2, [pc, #16]	@ (8007b48 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8007b36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b3a:	6013      	str	r3, [r2, #0]
}
 8007b3c:	bf00      	nop
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	40007000 	.word	0x40007000

08007b4c <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8007b54:	4b2b      	ldr	r3, [pc, #172]	@ (8007c04 <HAL_PWR_ConfigPVD+0xb8>)
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f023 020e 	bic.w	r2, r3, #14
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4928      	ldr	r1, [pc, #160]	@ (8007c04 <HAL_PWR_ConfigPVD+0xb8>)
 8007b62:	4313      	orrs	r3, r2
 8007b64:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8007b66:	4b28      	ldr	r3, [pc, #160]	@ (8007c08 <HAL_PWR_ConfigPVD+0xbc>)
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	4a27      	ldr	r2, [pc, #156]	@ (8007c08 <HAL_PWR_ConfigPVD+0xbc>)
 8007b6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b70:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8007b72:	4b25      	ldr	r3, [pc, #148]	@ (8007c08 <HAL_PWR_ConfigPVD+0xbc>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a24      	ldr	r2, [pc, #144]	@ (8007c08 <HAL_PWR_ConfigPVD+0xbc>)
 8007b78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b7c:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8007b7e:	4b22      	ldr	r3, [pc, #136]	@ (8007c08 <HAL_PWR_ConfigPVD+0xbc>)
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	4a21      	ldr	r2, [pc, #132]	@ (8007c08 <HAL_PWR_ConfigPVD+0xbc>)
 8007b84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b88:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8007b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8007c08 <HAL_PWR_ConfigPVD+0xbc>)
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8007c08 <HAL_PWR_ConfigPVD+0xbc>)
 8007b90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b94:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d005      	beq.n	8007bae <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8007ba2:	4b19      	ldr	r3, [pc, #100]	@ (8007c08 <HAL_PWR_ConfigPVD+0xbc>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a18      	ldr	r2, [pc, #96]	@ (8007c08 <HAL_PWR_ConfigPVD+0xbc>)
 8007ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bac:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d005      	beq.n	8007bc6 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8007bba:	4b13      	ldr	r3, [pc, #76]	@ (8007c08 <HAL_PWR_ConfigPVD+0xbc>)
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	4a12      	ldr	r2, [pc, #72]	@ (8007c08 <HAL_PWR_ConfigPVD+0xbc>)
 8007bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bc4:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d005      	beq.n	8007bde <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8007bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007c08 <HAL_PWR_ConfigPVD+0xbc>)
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8007c08 <HAL_PWR_ConfigPVD+0xbc>)
 8007bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bdc:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d005      	beq.n	8007bf6 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8007bea:	4b07      	ldr	r3, [pc, #28]	@ (8007c08 <HAL_PWR_ConfigPVD+0xbc>)
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	4a06      	ldr	r2, [pc, #24]	@ (8007c08 <HAL_PWR_ConfigPVD+0xbc>)
 8007bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bf4:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	40007000 	.word	0x40007000
 8007c08:	40010400 	.word	0x40010400

08007c0c <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8007c10:	4b05      	ldr	r3, [pc, #20]	@ (8007c28 <HAL_PWR_EnablePVD+0x1c>)
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	4a04      	ldr	r2, [pc, #16]	@ (8007c28 <HAL_PWR_EnablePVD+0x1c>)
 8007c16:	f043 0301 	orr.w	r3, r3, #1
 8007c1a:	6053      	str	r3, [r2, #4]
}
 8007c1c:	bf00      	nop
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	40007000 	.word	0x40007000

08007c2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d141      	bne.n	8007cbe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c3a:	4b4b      	ldr	r3, [pc, #300]	@ (8007d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c46:	d131      	bne.n	8007cac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c48:	4b47      	ldr	r3, [pc, #284]	@ (8007d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c4e:	4a46      	ldr	r2, [pc, #280]	@ (8007d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c58:	4b43      	ldr	r3, [pc, #268]	@ (8007d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007c60:	4a41      	ldr	r2, [pc, #260]	@ (8007d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c68:	4b40      	ldr	r3, [pc, #256]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2232      	movs	r2, #50	@ 0x32
 8007c6e:	fb02 f303 	mul.w	r3, r2, r3
 8007c72:	4a3f      	ldr	r2, [pc, #252]	@ (8007d70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007c74:	fba2 2303 	umull	r2, r3, r2, r3
 8007c78:	0c9b      	lsrs	r3, r3, #18
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c7e:	e002      	b.n	8007c86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c86:	4b38      	ldr	r3, [pc, #224]	@ (8007d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c92:	d102      	bne.n	8007c9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1f2      	bne.n	8007c80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c9a:	4b33      	ldr	r3, [pc, #204]	@ (8007d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ca6:	d158      	bne.n	8007d5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e057      	b.n	8007d5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007cac:	4b2e      	ldr	r3, [pc, #184]	@ (8007d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cb2:	4a2d      	ldr	r2, [pc, #180]	@ (8007d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007cbc:	e04d      	b.n	8007d5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cc4:	d141      	bne.n	8007d4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007cc6:	4b28      	ldr	r3, [pc, #160]	@ (8007d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cd2:	d131      	bne.n	8007d38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007cd4:	4b24      	ldr	r3, [pc, #144]	@ (8007d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cda:	4a23      	ldr	r2, [pc, #140]	@ (8007d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ce0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ce4:	4b20      	ldr	r3, [pc, #128]	@ (8007d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007cec:	4a1e      	ldr	r2, [pc, #120]	@ (8007d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007cf2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2232      	movs	r2, #50	@ 0x32
 8007cfa:	fb02 f303 	mul.w	r3, r2, r3
 8007cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8007d70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007d00:	fba2 2303 	umull	r2, r3, r2, r3
 8007d04:	0c9b      	lsrs	r3, r3, #18
 8007d06:	3301      	adds	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d0a:	e002      	b.n	8007d12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d12:	4b15      	ldr	r3, [pc, #84]	@ (8007d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d1e:	d102      	bne.n	8007d26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1f2      	bne.n	8007d0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007d26:	4b10      	ldr	r3, [pc, #64]	@ (8007d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d32:	d112      	bne.n	8007d5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e011      	b.n	8007d5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d38:	4b0b      	ldr	r3, [pc, #44]	@ (8007d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8007d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007d48:	e007      	b.n	8007d5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007d4a:	4b07      	ldr	r3, [pc, #28]	@ (8007d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007d52:	4a05      	ldr	r2, [pc, #20]	@ (8007d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007d58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	40007000 	.word	0x40007000
 8007d6c:	20000000 	.word	0x20000000
 8007d70:	431bde83 	.word	0x431bde83

08007d74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007d74:	b480      	push	{r7}
 8007d76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007d78:	4b05      	ldr	r3, [pc, #20]	@ (8007d90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	4a04      	ldr	r2, [pc, #16]	@ (8007d90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007d7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d82:	6093      	str	r3, [r2, #8]
}
 8007d84:	bf00      	nop
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	40007000 	.word	0x40007000

08007d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b088      	sub	sp, #32
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e2fe      	b.n	80083a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d075      	beq.n	8007e9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007db2:	4b97      	ldr	r3, [pc, #604]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f003 030c 	and.w	r3, r3, #12
 8007dba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007dbc:	4b94      	ldr	r3, [pc, #592]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f003 0303 	and.w	r3, r3, #3
 8007dc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	2b0c      	cmp	r3, #12
 8007dca:	d102      	bne.n	8007dd2 <HAL_RCC_OscConfig+0x3e>
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d002      	beq.n	8007dd8 <HAL_RCC_OscConfig+0x44>
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	2b08      	cmp	r3, #8
 8007dd6:	d10b      	bne.n	8007df0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dd8:	4b8d      	ldr	r3, [pc, #564]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d05b      	beq.n	8007e9c <HAL_RCC_OscConfig+0x108>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d157      	bne.n	8007e9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e2d9      	b.n	80083a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007df8:	d106      	bne.n	8007e08 <HAL_RCC_OscConfig+0x74>
 8007dfa:	4b85      	ldr	r3, [pc, #532]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a84      	ldr	r2, [pc, #528]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e04:	6013      	str	r3, [r2, #0]
 8007e06:	e01d      	b.n	8007e44 <HAL_RCC_OscConfig+0xb0>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e10:	d10c      	bne.n	8007e2c <HAL_RCC_OscConfig+0x98>
 8007e12:	4b7f      	ldr	r3, [pc, #508]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a7e      	ldr	r2, [pc, #504]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e1c:	6013      	str	r3, [r2, #0]
 8007e1e:	4b7c      	ldr	r3, [pc, #496]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a7b      	ldr	r2, [pc, #492]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e28:	6013      	str	r3, [r2, #0]
 8007e2a:	e00b      	b.n	8007e44 <HAL_RCC_OscConfig+0xb0>
 8007e2c:	4b78      	ldr	r3, [pc, #480]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a77      	ldr	r2, [pc, #476]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e36:	6013      	str	r3, [r2, #0]
 8007e38:	4b75      	ldr	r3, [pc, #468]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a74      	ldr	r2, [pc, #464]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d013      	beq.n	8007e74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e4c:	f7fc f894 	bl	8003f78 <HAL_GetTick>
 8007e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e52:	e008      	b.n	8007e66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e54:	f7fc f890 	bl	8003f78 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b64      	cmp	r3, #100	@ 0x64
 8007e60:	d901      	bls.n	8007e66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e29e      	b.n	80083a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e66:	4b6a      	ldr	r3, [pc, #424]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d0f0      	beq.n	8007e54 <HAL_RCC_OscConfig+0xc0>
 8007e72:	e014      	b.n	8007e9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e74:	f7fc f880 	bl	8003f78 <HAL_GetTick>
 8007e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007e7a:	e008      	b.n	8007e8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e7c:	f7fc f87c 	bl	8003f78 <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	2b64      	cmp	r3, #100	@ 0x64
 8007e88:	d901      	bls.n	8007e8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e28a      	b.n	80083a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007e8e:	4b60      	ldr	r3, [pc, #384]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1f0      	bne.n	8007e7c <HAL_RCC_OscConfig+0xe8>
 8007e9a:	e000      	b.n	8007e9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d075      	beq.n	8007f96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007eaa:	4b59      	ldr	r3, [pc, #356]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f003 030c 	and.w	r3, r3, #12
 8007eb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007eb4:	4b56      	ldr	r3, [pc, #344]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	f003 0303 	and.w	r3, r3, #3
 8007ebc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	2b0c      	cmp	r3, #12
 8007ec2:	d102      	bne.n	8007eca <HAL_RCC_OscConfig+0x136>
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d002      	beq.n	8007ed0 <HAL_RCC_OscConfig+0x13c>
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	d11f      	bne.n	8007f10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ed0:	4b4f      	ldr	r3, [pc, #316]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d005      	beq.n	8007ee8 <HAL_RCC_OscConfig+0x154>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e25d      	b.n	80083a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ee8:	4b49      	ldr	r3, [pc, #292]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	061b      	lsls	r3, r3, #24
 8007ef6:	4946      	ldr	r1, [pc, #280]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007efc:	4b45      	ldr	r3, [pc, #276]	@ (8008014 <HAL_RCC_OscConfig+0x280>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fa fe05 	bl	8002b10 <HAL_InitTick>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d043      	beq.n	8007f94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e249      	b.n	80083a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d023      	beq.n	8007f60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f18:	4b3d      	ldr	r3, [pc, #244]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a3c      	ldr	r2, [pc, #240]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f24:	f7fc f828 	bl	8003f78 <HAL_GetTick>
 8007f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f2a:	e008      	b.n	8007f3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f2c:	f7fc f824 	bl	8003f78 <HAL_GetTick>
 8007f30:	4602      	mov	r2, r0
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d901      	bls.n	8007f3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e232      	b.n	80083a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f3e:	4b34      	ldr	r3, [pc, #208]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d0f0      	beq.n	8007f2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f4a:	4b31      	ldr	r3, [pc, #196]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	061b      	lsls	r3, r3, #24
 8007f58:	492d      	ldr	r1, [pc, #180]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	604b      	str	r3, [r1, #4]
 8007f5e:	e01a      	b.n	8007f96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f60:	4b2b      	ldr	r3, [pc, #172]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a2a      	ldr	r2, [pc, #168]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007f66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f6c:	f7fc f804 	bl	8003f78 <HAL_GetTick>
 8007f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f72:	e008      	b.n	8007f86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f74:	f7fc f800 	bl	8003f78 <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e20e      	b.n	80083a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f86:	4b22      	ldr	r3, [pc, #136]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1f0      	bne.n	8007f74 <HAL_RCC_OscConfig+0x1e0>
 8007f92:	e000      	b.n	8007f96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0308 	and.w	r3, r3, #8
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d041      	beq.n	8008026 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	695b      	ldr	r3, [r3, #20]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d01c      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007faa:	4b19      	ldr	r3, [pc, #100]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fb0:	4a17      	ldr	r2, [pc, #92]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007fb2:	f043 0301 	orr.w	r3, r3, #1
 8007fb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fba:	f7fb ffdd 	bl	8003f78 <HAL_GetTick>
 8007fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007fc0:	e008      	b.n	8007fd4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007fc2:	f7fb ffd9 	bl	8003f78 <HAL_GetTick>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d901      	bls.n	8007fd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e1e7      	b.n	80083a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0ef      	beq.n	8007fc2 <HAL_RCC_OscConfig+0x22e>
 8007fe2:	e020      	b.n	8008026 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fea:	4a09      	ldr	r2, [pc, #36]	@ (8008010 <HAL_RCC_OscConfig+0x27c>)
 8007fec:	f023 0301 	bic.w	r3, r3, #1
 8007ff0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ff4:	f7fb ffc0 	bl	8003f78 <HAL_GetTick>
 8007ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007ffa:	e00d      	b.n	8008018 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ffc:	f7fb ffbc 	bl	8003f78 <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	2b02      	cmp	r3, #2
 8008008:	d906      	bls.n	8008018 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e1ca      	b.n	80083a4 <HAL_RCC_OscConfig+0x610>
 800800e:	bf00      	nop
 8008010:	40021000 	.word	0x40021000
 8008014:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008018:	4b8c      	ldr	r3, [pc, #560]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 800801a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1ea      	bne.n	8007ffc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 0304 	and.w	r3, r3, #4
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 80a6 	beq.w	8008180 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008034:	2300      	movs	r3, #0
 8008036:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008038:	4b84      	ldr	r3, [pc, #528]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 800803a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800803c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <HAL_RCC_OscConfig+0x2b4>
 8008044:	2301      	movs	r3, #1
 8008046:	e000      	b.n	800804a <HAL_RCC_OscConfig+0x2b6>
 8008048:	2300      	movs	r3, #0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00d      	beq.n	800806a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800804e:	4b7f      	ldr	r3, [pc, #508]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 8008050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008052:	4a7e      	ldr	r2, [pc, #504]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 8008054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008058:	6593      	str	r3, [r2, #88]	@ 0x58
 800805a:	4b7c      	ldr	r3, [pc, #496]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 800805c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800805e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008062:	60fb      	str	r3, [r7, #12]
 8008064:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008066:	2301      	movs	r3, #1
 8008068:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800806a:	4b79      	ldr	r3, [pc, #484]	@ (8008250 <HAL_RCC_OscConfig+0x4bc>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008072:	2b00      	cmp	r3, #0
 8008074:	d118      	bne.n	80080a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008076:	4b76      	ldr	r3, [pc, #472]	@ (8008250 <HAL_RCC_OscConfig+0x4bc>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a75      	ldr	r2, [pc, #468]	@ (8008250 <HAL_RCC_OscConfig+0x4bc>)
 800807c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008082:	f7fb ff79 	bl	8003f78 <HAL_GetTick>
 8008086:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008088:	e008      	b.n	800809c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800808a:	f7fb ff75 	bl	8003f78 <HAL_GetTick>
 800808e:	4602      	mov	r2, r0
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	2b02      	cmp	r3, #2
 8008096:	d901      	bls.n	800809c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e183      	b.n	80083a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800809c:	4b6c      	ldr	r3, [pc, #432]	@ (8008250 <HAL_RCC_OscConfig+0x4bc>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d0f0      	beq.n	800808a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d108      	bne.n	80080c2 <HAL_RCC_OscConfig+0x32e>
 80080b0:	4b66      	ldr	r3, [pc, #408]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 80080b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080b6:	4a65      	ldr	r2, [pc, #404]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 80080b8:	f043 0301 	orr.w	r3, r3, #1
 80080bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80080c0:	e024      	b.n	800810c <HAL_RCC_OscConfig+0x378>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	2b05      	cmp	r3, #5
 80080c8:	d110      	bne.n	80080ec <HAL_RCC_OscConfig+0x358>
 80080ca:	4b60      	ldr	r3, [pc, #384]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 80080cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080d0:	4a5e      	ldr	r2, [pc, #376]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 80080d2:	f043 0304 	orr.w	r3, r3, #4
 80080d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80080da:	4b5c      	ldr	r3, [pc, #368]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 80080dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080e0:	4a5a      	ldr	r2, [pc, #360]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 80080e2:	f043 0301 	orr.w	r3, r3, #1
 80080e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80080ea:	e00f      	b.n	800810c <HAL_RCC_OscConfig+0x378>
 80080ec:	4b57      	ldr	r3, [pc, #348]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 80080ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f2:	4a56      	ldr	r2, [pc, #344]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 80080f4:	f023 0301 	bic.w	r3, r3, #1
 80080f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80080fc:	4b53      	ldr	r3, [pc, #332]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 80080fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008102:	4a52      	ldr	r2, [pc, #328]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 8008104:	f023 0304 	bic.w	r3, r3, #4
 8008108:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d016      	beq.n	8008142 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008114:	f7fb ff30 	bl	8003f78 <HAL_GetTick>
 8008118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800811a:	e00a      	b.n	8008132 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800811c:	f7fb ff2c 	bl	8003f78 <HAL_GetTick>
 8008120:	4602      	mov	r2, r0
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800812a:	4293      	cmp	r3, r2
 800812c:	d901      	bls.n	8008132 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e138      	b.n	80083a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008132:	4b46      	ldr	r3, [pc, #280]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 8008134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008138:	f003 0302 	and.w	r3, r3, #2
 800813c:	2b00      	cmp	r3, #0
 800813e:	d0ed      	beq.n	800811c <HAL_RCC_OscConfig+0x388>
 8008140:	e015      	b.n	800816e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008142:	f7fb ff19 	bl	8003f78 <HAL_GetTick>
 8008146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008148:	e00a      	b.n	8008160 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800814a:	f7fb ff15 	bl	8003f78 <HAL_GetTick>
 800814e:	4602      	mov	r2, r0
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008158:	4293      	cmp	r3, r2
 800815a:	d901      	bls.n	8008160 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800815c:	2303      	movs	r3, #3
 800815e:	e121      	b.n	80083a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008160:	4b3a      	ldr	r3, [pc, #232]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 8008162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008166:	f003 0302 	and.w	r3, r3, #2
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1ed      	bne.n	800814a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800816e:	7ffb      	ldrb	r3, [r7, #31]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d105      	bne.n	8008180 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008174:	4b35      	ldr	r3, [pc, #212]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 8008176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008178:	4a34      	ldr	r2, [pc, #208]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 800817a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800817e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0320 	and.w	r3, r3, #32
 8008188:	2b00      	cmp	r3, #0
 800818a:	d03c      	beq.n	8008206 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d01c      	beq.n	80081ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008194:	4b2d      	ldr	r3, [pc, #180]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 8008196:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800819a:	4a2c      	ldr	r2, [pc, #176]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 800819c:	f043 0301 	orr.w	r3, r3, #1
 80081a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081a4:	f7fb fee8 	bl	8003f78 <HAL_GetTick>
 80081a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80081aa:	e008      	b.n	80081be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081ac:	f7fb fee4 	bl	8003f78 <HAL_GetTick>
 80081b0:	4602      	mov	r2, r0
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d901      	bls.n	80081be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e0f2      	b.n	80083a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80081be:	4b23      	ldr	r3, [pc, #140]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 80081c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d0ef      	beq.n	80081ac <HAL_RCC_OscConfig+0x418>
 80081cc:	e01b      	b.n	8008206 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80081ce:	4b1f      	ldr	r3, [pc, #124]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 80081d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081d4:	4a1d      	ldr	r2, [pc, #116]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 80081d6:	f023 0301 	bic.w	r3, r3, #1
 80081da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081de:	f7fb fecb 	bl	8003f78 <HAL_GetTick>
 80081e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80081e4:	e008      	b.n	80081f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081e6:	f7fb fec7 	bl	8003f78 <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d901      	bls.n	80081f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e0d5      	b.n	80083a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80081f8:	4b14      	ldr	r3, [pc, #80]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 80081fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1ef      	bne.n	80081e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 80c9 	beq.w	80083a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008210:	4b0e      	ldr	r3, [pc, #56]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f003 030c 	and.w	r3, r3, #12
 8008218:	2b0c      	cmp	r3, #12
 800821a:	f000 8083 	beq.w	8008324 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d15e      	bne.n	80082e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008226:	4b09      	ldr	r3, [pc, #36]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a08      	ldr	r2, [pc, #32]	@ (800824c <HAL_RCC_OscConfig+0x4b8>)
 800822c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008232:	f7fb fea1 	bl	8003f78 <HAL_GetTick>
 8008236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008238:	e00c      	b.n	8008254 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800823a:	f7fb fe9d 	bl	8003f78 <HAL_GetTick>
 800823e:	4602      	mov	r2, r0
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	2b02      	cmp	r3, #2
 8008246:	d905      	bls.n	8008254 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008248:	2303      	movs	r3, #3
 800824a:	e0ab      	b.n	80083a4 <HAL_RCC_OscConfig+0x610>
 800824c:	40021000 	.word	0x40021000
 8008250:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008254:	4b55      	ldr	r3, [pc, #340]	@ (80083ac <HAL_RCC_OscConfig+0x618>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1ec      	bne.n	800823a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008260:	4b52      	ldr	r3, [pc, #328]	@ (80083ac <HAL_RCC_OscConfig+0x618>)
 8008262:	68da      	ldr	r2, [r3, #12]
 8008264:	4b52      	ldr	r3, [pc, #328]	@ (80083b0 <HAL_RCC_OscConfig+0x61c>)
 8008266:	4013      	ands	r3, r2
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	6a11      	ldr	r1, [r2, #32]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008270:	3a01      	subs	r2, #1
 8008272:	0112      	lsls	r2, r2, #4
 8008274:	4311      	orrs	r1, r2
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800827a:	0212      	lsls	r2, r2, #8
 800827c:	4311      	orrs	r1, r2
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008282:	0852      	lsrs	r2, r2, #1
 8008284:	3a01      	subs	r2, #1
 8008286:	0552      	lsls	r2, r2, #21
 8008288:	4311      	orrs	r1, r2
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800828e:	0852      	lsrs	r2, r2, #1
 8008290:	3a01      	subs	r2, #1
 8008292:	0652      	lsls	r2, r2, #25
 8008294:	4311      	orrs	r1, r2
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800829a:	06d2      	lsls	r2, r2, #27
 800829c:	430a      	orrs	r2, r1
 800829e:	4943      	ldr	r1, [pc, #268]	@ (80083ac <HAL_RCC_OscConfig+0x618>)
 80082a0:	4313      	orrs	r3, r2
 80082a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082a4:	4b41      	ldr	r3, [pc, #260]	@ (80083ac <HAL_RCC_OscConfig+0x618>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a40      	ldr	r2, [pc, #256]	@ (80083ac <HAL_RCC_OscConfig+0x618>)
 80082aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80082ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80082b0:	4b3e      	ldr	r3, [pc, #248]	@ (80083ac <HAL_RCC_OscConfig+0x618>)
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	4a3d      	ldr	r2, [pc, #244]	@ (80083ac <HAL_RCC_OscConfig+0x618>)
 80082b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80082ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082bc:	f7fb fe5c 	bl	8003f78 <HAL_GetTick>
 80082c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082c2:	e008      	b.n	80082d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082c4:	f7fb fe58 	bl	8003f78 <HAL_GetTick>
 80082c8:	4602      	mov	r2, r0
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d901      	bls.n	80082d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e066      	b.n	80083a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082d6:	4b35      	ldr	r3, [pc, #212]	@ (80083ac <HAL_RCC_OscConfig+0x618>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d0f0      	beq.n	80082c4 <HAL_RCC_OscConfig+0x530>
 80082e2:	e05e      	b.n	80083a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082e4:	4b31      	ldr	r3, [pc, #196]	@ (80083ac <HAL_RCC_OscConfig+0x618>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a30      	ldr	r2, [pc, #192]	@ (80083ac <HAL_RCC_OscConfig+0x618>)
 80082ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f0:	f7fb fe42 	bl	8003f78 <HAL_GetTick>
 80082f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082f6:	e008      	b.n	800830a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082f8:	f7fb fe3e 	bl	8003f78 <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	2b02      	cmp	r3, #2
 8008304:	d901      	bls.n	800830a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e04c      	b.n	80083a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800830a:	4b28      	ldr	r3, [pc, #160]	@ (80083ac <HAL_RCC_OscConfig+0x618>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1f0      	bne.n	80082f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008316:	4b25      	ldr	r3, [pc, #148]	@ (80083ac <HAL_RCC_OscConfig+0x618>)
 8008318:	68da      	ldr	r2, [r3, #12]
 800831a:	4924      	ldr	r1, [pc, #144]	@ (80083ac <HAL_RCC_OscConfig+0x618>)
 800831c:	4b25      	ldr	r3, [pc, #148]	@ (80083b4 <HAL_RCC_OscConfig+0x620>)
 800831e:	4013      	ands	r3, r2
 8008320:	60cb      	str	r3, [r1, #12]
 8008322:	e03e      	b.n	80083a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d101      	bne.n	8008330 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e039      	b.n	80083a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008330:	4b1e      	ldr	r3, [pc, #120]	@ (80083ac <HAL_RCC_OscConfig+0x618>)
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f003 0203 	and.w	r2, r3, #3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a1b      	ldr	r3, [r3, #32]
 8008340:	429a      	cmp	r2, r3
 8008342:	d12c      	bne.n	800839e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800834e:	3b01      	subs	r3, #1
 8008350:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008352:	429a      	cmp	r2, r3
 8008354:	d123      	bne.n	800839e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008360:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008362:	429a      	cmp	r2, r3
 8008364:	d11b      	bne.n	800839e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008370:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008372:	429a      	cmp	r2, r3
 8008374:	d113      	bne.n	800839e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008380:	085b      	lsrs	r3, r3, #1
 8008382:	3b01      	subs	r3, #1
 8008384:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008386:	429a      	cmp	r2, r3
 8008388:	d109      	bne.n	800839e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008394:	085b      	lsrs	r3, r3, #1
 8008396:	3b01      	subs	r3, #1
 8008398:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800839a:	429a      	cmp	r2, r3
 800839c:	d001      	beq.n	80083a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e000      	b.n	80083a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3720      	adds	r7, #32
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	40021000 	.word	0x40021000
 80083b0:	019f800c 	.word	0x019f800c
 80083b4:	feeefffc 	.word	0xfeeefffc

080083b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80083c2:	2300      	movs	r3, #0
 80083c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e11e      	b.n	800860e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80083d0:	4b91      	ldr	r3, [pc, #580]	@ (8008618 <HAL_RCC_ClockConfig+0x260>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 030f 	and.w	r3, r3, #15
 80083d8:	683a      	ldr	r2, [r7, #0]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d910      	bls.n	8008400 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083de:	4b8e      	ldr	r3, [pc, #568]	@ (8008618 <HAL_RCC_ClockConfig+0x260>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f023 020f 	bic.w	r2, r3, #15
 80083e6:	498c      	ldr	r1, [pc, #560]	@ (8008618 <HAL_RCC_ClockConfig+0x260>)
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ee:	4b8a      	ldr	r3, [pc, #552]	@ (8008618 <HAL_RCC_ClockConfig+0x260>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 030f 	and.w	r3, r3, #15
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d001      	beq.n	8008400 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e106      	b.n	800860e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0301 	and.w	r3, r3, #1
 8008408:	2b00      	cmp	r3, #0
 800840a:	d073      	beq.n	80084f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	2b03      	cmp	r3, #3
 8008412:	d129      	bne.n	8008468 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008414:	4b81      	ldr	r3, [pc, #516]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e0f4      	b.n	800860e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008424:	f000 fa16 	bl	8008854 <RCC_GetSysClockFreqFromPLLSource>
 8008428:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	4a7c      	ldr	r2, [pc, #496]	@ (8008620 <HAL_RCC_ClockConfig+0x268>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d93f      	bls.n	80084b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008432:	4b7a      	ldr	r3, [pc, #488]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d009      	beq.n	8008452 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008446:	2b00      	cmp	r3, #0
 8008448:	d033      	beq.n	80084b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800844e:	2b00      	cmp	r3, #0
 8008450:	d12f      	bne.n	80084b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008452:	4b72      	ldr	r3, [pc, #456]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800845a:	4a70      	ldr	r2, [pc, #448]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 800845c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008460:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008462:	2380      	movs	r3, #128	@ 0x80
 8008464:	617b      	str	r3, [r7, #20]
 8008466:	e024      	b.n	80084b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	2b02      	cmp	r3, #2
 800846e:	d107      	bne.n	8008480 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008470:	4b6a      	ldr	r3, [pc, #424]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d109      	bne.n	8008490 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e0c6      	b.n	800860e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008480:	4b66      	ldr	r3, [pc, #408]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008488:	2b00      	cmp	r3, #0
 800848a:	d101      	bne.n	8008490 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e0be      	b.n	800860e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008490:	f000 f914 	bl	80086bc <HAL_RCC_GetSysClockFreq>
 8008494:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	4a61      	ldr	r2, [pc, #388]	@ (8008620 <HAL_RCC_ClockConfig+0x268>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d909      	bls.n	80084b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800849e:	4b5f      	ldr	r3, [pc, #380]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084a6:	4a5d      	ldr	r2, [pc, #372]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 80084a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80084ae:	2380      	movs	r3, #128	@ 0x80
 80084b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80084b2:	4b5a      	ldr	r3, [pc, #360]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f023 0203 	bic.w	r2, r3, #3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	4957      	ldr	r1, [pc, #348]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 80084c0:	4313      	orrs	r3, r2
 80084c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084c4:	f7fb fd58 	bl	8003f78 <HAL_GetTick>
 80084c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084ca:	e00a      	b.n	80084e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084cc:	f7fb fd54 	bl	8003f78 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084da:	4293      	cmp	r3, r2
 80084dc:	d901      	bls.n	80084e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e095      	b.n	800860e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084e2:	4b4e      	ldr	r3, [pc, #312]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f003 020c 	and.w	r2, r3, #12
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d1eb      	bne.n	80084cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 0302 	and.w	r3, r3, #2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d023      	beq.n	8008548 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0304 	and.w	r3, r3, #4
 8008508:	2b00      	cmp	r3, #0
 800850a:	d005      	beq.n	8008518 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800850c:	4b43      	ldr	r3, [pc, #268]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	4a42      	ldr	r2, [pc, #264]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 8008512:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008516:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0308 	and.w	r3, r3, #8
 8008520:	2b00      	cmp	r3, #0
 8008522:	d007      	beq.n	8008534 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008524:	4b3d      	ldr	r3, [pc, #244]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800852c:	4a3b      	ldr	r2, [pc, #236]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 800852e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008532:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008534:	4b39      	ldr	r3, [pc, #228]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	4936      	ldr	r1, [pc, #216]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 8008542:	4313      	orrs	r3, r2
 8008544:	608b      	str	r3, [r1, #8]
 8008546:	e008      	b.n	800855a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	2b80      	cmp	r3, #128	@ 0x80
 800854c:	d105      	bne.n	800855a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800854e:	4b33      	ldr	r3, [pc, #204]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	4a32      	ldr	r2, [pc, #200]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 8008554:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008558:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800855a:	4b2f      	ldr	r3, [pc, #188]	@ (8008618 <HAL_RCC_ClockConfig+0x260>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 030f 	and.w	r3, r3, #15
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	429a      	cmp	r2, r3
 8008566:	d21d      	bcs.n	80085a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008568:	4b2b      	ldr	r3, [pc, #172]	@ (8008618 <HAL_RCC_ClockConfig+0x260>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f023 020f 	bic.w	r2, r3, #15
 8008570:	4929      	ldr	r1, [pc, #164]	@ (8008618 <HAL_RCC_ClockConfig+0x260>)
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	4313      	orrs	r3, r2
 8008576:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008578:	f7fb fcfe 	bl	8003f78 <HAL_GetTick>
 800857c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800857e:	e00a      	b.n	8008596 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008580:	f7fb fcfa 	bl	8003f78 <HAL_GetTick>
 8008584:	4602      	mov	r2, r0
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800858e:	4293      	cmp	r3, r2
 8008590:	d901      	bls.n	8008596 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	e03b      	b.n	800860e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008596:	4b20      	ldr	r3, [pc, #128]	@ (8008618 <HAL_RCC_ClockConfig+0x260>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 030f 	and.w	r3, r3, #15
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d1ed      	bne.n	8008580 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0304 	and.w	r3, r3, #4
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d008      	beq.n	80085c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085b0:	4b1a      	ldr	r3, [pc, #104]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	4917      	ldr	r1, [pc, #92]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0308 	and.w	r3, r3, #8
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d009      	beq.n	80085e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085ce:	4b13      	ldr	r3, [pc, #76]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	00db      	lsls	r3, r3, #3
 80085dc:	490f      	ldr	r1, [pc, #60]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80085e2:	f000 f86b 	bl	80086bc <HAL_RCC_GetSysClockFreq>
 80085e6:	4602      	mov	r2, r0
 80085e8:	4b0c      	ldr	r3, [pc, #48]	@ (800861c <HAL_RCC_ClockConfig+0x264>)
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	091b      	lsrs	r3, r3, #4
 80085ee:	f003 030f 	and.w	r3, r3, #15
 80085f2:	490c      	ldr	r1, [pc, #48]	@ (8008624 <HAL_RCC_ClockConfig+0x26c>)
 80085f4:	5ccb      	ldrb	r3, [r1, r3]
 80085f6:	f003 031f 	and.w	r3, r3, #31
 80085fa:	fa22 f303 	lsr.w	r3, r2, r3
 80085fe:	4a0a      	ldr	r2, [pc, #40]	@ (8008628 <HAL_RCC_ClockConfig+0x270>)
 8008600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008602:	4b0a      	ldr	r3, [pc, #40]	@ (800862c <HAL_RCC_ClockConfig+0x274>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4618      	mov	r0, r3
 8008608:	f7fa fa82 	bl	8002b10 <HAL_InitTick>
 800860c:	4603      	mov	r3, r0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	40022000 	.word	0x40022000
 800861c:	40021000 	.word	0x40021000
 8008620:	04c4b400 	.word	0x04c4b400
 8008624:	08013d84 	.word	0x08013d84
 8008628:	20000000 	.word	0x20000000
 800862c:	20000004 	.word	0x20000004

08008630 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b08c      	sub	sp, #48	@ 0x30
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 800863c:	2302      	movs	r3, #2
 800863e:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8008640:	2303      	movs	r3, #3
 8008642:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8008644:	2300      	movs	r3, #0
 8008646:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800864e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	0c1b      	lsrs	r3, r3, #16
 8008654:	f003 030f 	and.w	r3, r3, #15
 8008658:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 800865c:	029b      	lsls	r3, r3, #10
 800865e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	0c1b      	lsrs	r3, r3, #16
 8008664:	f003 030f 	and.w	r3, r3, #15
 8008668:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 800866a:	4b13      	ldr	r3, [pc, #76]	@ (80086b8 <HAL_RCC_MCOConfig+0x88>)
 800866c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800866e:	2101      	movs	r1, #1
 8008670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008672:	fa01 f303 	lsl.w	r3, r1, r3
 8008676:	4910      	ldr	r1, [pc, #64]	@ (80086b8 <HAL_RCC_MCOConfig+0x88>)
 8008678:	4313      	orrs	r3, r2
 800867a:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	b29b      	uxth	r3, r3
 8008680:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	0d1b      	lsrs	r3, r3, #20
 8008686:	b2db      	uxtb	r3, r3
 8008688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 800868a:	f107 0310 	add.w	r3, r7, #16
 800868e:	4619      	mov	r1, r3
 8008690:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008692:	f7fd f9b9 	bl	8005a08 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8008696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008698:	2b00      	cmp	r3, #0
 800869a:	d109      	bne.n	80086b0 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 800869c:	4b06      	ldr	r3, [pc, #24]	@ (80086b8 <HAL_RCC_MCOConfig+0x88>)
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80086a4:	68b9      	ldr	r1, [r7, #8]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	430b      	orrs	r3, r1
 80086aa:	4903      	ldr	r1, [pc, #12]	@ (80086b8 <HAL_RCC_MCOConfig+0x88>)
 80086ac:	4313      	orrs	r3, r2
 80086ae:	608b      	str	r3, [r1, #8]
  }
}
 80086b0:	bf00      	nop
 80086b2:	3730      	adds	r7, #48	@ 0x30
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	40021000 	.word	0x40021000

080086bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80086c2:	4b2c      	ldr	r3, [pc, #176]	@ (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f003 030c 	and.w	r3, r3, #12
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d102      	bne.n	80086d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80086ce:	4b2a      	ldr	r3, [pc, #168]	@ (8008778 <HAL_RCC_GetSysClockFreq+0xbc>)
 80086d0:	613b      	str	r3, [r7, #16]
 80086d2:	e047      	b.n	8008764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80086d4:	4b27      	ldr	r3, [pc, #156]	@ (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f003 030c 	and.w	r3, r3, #12
 80086dc:	2b08      	cmp	r3, #8
 80086de:	d102      	bne.n	80086e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80086e0:	4b26      	ldr	r3, [pc, #152]	@ (800877c <HAL_RCC_GetSysClockFreq+0xc0>)
 80086e2:	613b      	str	r3, [r7, #16]
 80086e4:	e03e      	b.n	8008764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80086e6:	4b23      	ldr	r3, [pc, #140]	@ (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f003 030c 	and.w	r3, r3, #12
 80086ee:	2b0c      	cmp	r3, #12
 80086f0:	d136      	bne.n	8008760 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80086f2:	4b20      	ldr	r3, [pc, #128]	@ (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	f003 0303 	and.w	r3, r3, #3
 80086fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80086fc:	4b1d      	ldr	r3, [pc, #116]	@ (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	091b      	lsrs	r3, r3, #4
 8008702:	f003 030f 	and.w	r3, r3, #15
 8008706:	3301      	adds	r3, #1
 8008708:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2b03      	cmp	r3, #3
 800870e:	d10c      	bne.n	800872a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008710:	4a1a      	ldr	r2, [pc, #104]	@ (800877c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	fbb2 f3f3 	udiv	r3, r2, r3
 8008718:	4a16      	ldr	r2, [pc, #88]	@ (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 800871a:	68d2      	ldr	r2, [r2, #12]
 800871c:	0a12      	lsrs	r2, r2, #8
 800871e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008722:	fb02 f303 	mul.w	r3, r2, r3
 8008726:	617b      	str	r3, [r7, #20]
      break;
 8008728:	e00c      	b.n	8008744 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800872a:	4a13      	ldr	r2, [pc, #76]	@ (8008778 <HAL_RCC_GetSysClockFreq+0xbc>)
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008732:	4a10      	ldr	r2, [pc, #64]	@ (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008734:	68d2      	ldr	r2, [r2, #12]
 8008736:	0a12      	lsrs	r2, r2, #8
 8008738:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800873c:	fb02 f303 	mul.w	r3, r2, r3
 8008740:	617b      	str	r3, [r7, #20]
      break;
 8008742:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008744:	4b0b      	ldr	r3, [pc, #44]	@ (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	0e5b      	lsrs	r3, r3, #25
 800874a:	f003 0303 	and.w	r3, r3, #3
 800874e:	3301      	adds	r3, #1
 8008750:	005b      	lsls	r3, r3, #1
 8008752:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	fbb2 f3f3 	udiv	r3, r2, r3
 800875c:	613b      	str	r3, [r7, #16]
 800875e:	e001      	b.n	8008764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008760:	2300      	movs	r3, #0
 8008762:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008764:	693b      	ldr	r3, [r7, #16]
}
 8008766:	4618      	mov	r0, r3
 8008768:	371c      	adds	r7, #28
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	40021000 	.word	0x40021000
 8008778:	00f42400 	.word	0x00f42400
 800877c:	007a1200 	.word	0x007a1200

08008780 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008780:	b480      	push	{r7}
 8008782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008784:	4b03      	ldr	r3, [pc, #12]	@ (8008794 <HAL_RCC_GetHCLKFreq+0x14>)
 8008786:	681b      	ldr	r3, [r3, #0]
}
 8008788:	4618      	mov	r0, r3
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	20000000 	.word	0x20000000

08008798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800879c:	f7ff fff0 	bl	8008780 <HAL_RCC_GetHCLKFreq>
 80087a0:	4602      	mov	r2, r0
 80087a2:	4b06      	ldr	r3, [pc, #24]	@ (80087bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	0a1b      	lsrs	r3, r3, #8
 80087a8:	f003 0307 	and.w	r3, r3, #7
 80087ac:	4904      	ldr	r1, [pc, #16]	@ (80087c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80087ae:	5ccb      	ldrb	r3, [r1, r3]
 80087b0:	f003 031f 	and.w	r3, r3, #31
 80087b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	40021000 	.word	0x40021000
 80087c0:	08013d94 	.word	0x08013d94

080087c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80087c8:	f7ff ffda 	bl	8008780 <HAL_RCC_GetHCLKFreq>
 80087cc:	4602      	mov	r2, r0
 80087ce:	4b06      	ldr	r3, [pc, #24]	@ (80087e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	0adb      	lsrs	r3, r3, #11
 80087d4:	f003 0307 	and.w	r3, r3, #7
 80087d8:	4904      	ldr	r1, [pc, #16]	@ (80087ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80087da:	5ccb      	ldrb	r3, [r1, r3]
 80087dc:	f003 031f 	and.w	r3, r3, #31
 80087e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	40021000 	.word	0x40021000
 80087ec:	08013d94 	.word	0x08013d94

080087f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	220f      	movs	r2, #15
 80087fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008800:	4b12      	ldr	r3, [pc, #72]	@ (800884c <HAL_RCC_GetClockConfig+0x5c>)
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	f003 0203 	and.w	r2, r3, #3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800880c:	4b0f      	ldr	r3, [pc, #60]	@ (800884c <HAL_RCC_GetClockConfig+0x5c>)
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008818:	4b0c      	ldr	r3, [pc, #48]	@ (800884c <HAL_RCC_GetClockConfig+0x5c>)
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008824:	4b09      	ldr	r3, [pc, #36]	@ (800884c <HAL_RCC_GetClockConfig+0x5c>)
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	08db      	lsrs	r3, r3, #3
 800882a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008832:	4b07      	ldr	r3, [pc, #28]	@ (8008850 <HAL_RCC_GetClockConfig+0x60>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 020f 	and.w	r2, r3, #15
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	601a      	str	r2, [r3, #0]
}
 800883e:	bf00      	nop
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	40021000 	.word	0x40021000
 8008850:	40022000 	.word	0x40022000

08008854 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008854:	b480      	push	{r7}
 8008856:	b087      	sub	sp, #28
 8008858:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800885a:	4b1e      	ldr	r3, [pc, #120]	@ (80088d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	f003 0303 	and.w	r3, r3, #3
 8008862:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008864:	4b1b      	ldr	r3, [pc, #108]	@ (80088d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	091b      	lsrs	r3, r3, #4
 800886a:	f003 030f 	and.w	r3, r3, #15
 800886e:	3301      	adds	r3, #1
 8008870:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b03      	cmp	r3, #3
 8008876:	d10c      	bne.n	8008892 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008878:	4a17      	ldr	r2, [pc, #92]	@ (80088d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008880:	4a14      	ldr	r2, [pc, #80]	@ (80088d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008882:	68d2      	ldr	r2, [r2, #12]
 8008884:	0a12      	lsrs	r2, r2, #8
 8008886:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800888a:	fb02 f303 	mul.w	r3, r2, r3
 800888e:	617b      	str	r3, [r7, #20]
    break;
 8008890:	e00c      	b.n	80088ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008892:	4a12      	ldr	r2, [pc, #72]	@ (80088dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	fbb2 f3f3 	udiv	r3, r2, r3
 800889a:	4a0e      	ldr	r2, [pc, #56]	@ (80088d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800889c:	68d2      	ldr	r2, [r2, #12]
 800889e:	0a12      	lsrs	r2, r2, #8
 80088a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80088a4:	fb02 f303 	mul.w	r3, r2, r3
 80088a8:	617b      	str	r3, [r7, #20]
    break;
 80088aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80088ac:	4b09      	ldr	r3, [pc, #36]	@ (80088d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	0e5b      	lsrs	r3, r3, #25
 80088b2:	f003 0303 	and.w	r3, r3, #3
 80088b6:	3301      	adds	r3, #1
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80088c6:	687b      	ldr	r3, [r7, #4]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	371c      	adds	r7, #28
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	40021000 	.word	0x40021000
 80088d8:	007a1200 	.word	0x007a1200
 80088dc:	00f42400 	.word	0x00f42400

080088e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80088e8:	2300      	movs	r3, #0
 80088ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80088ec:	2300      	movs	r3, #0
 80088ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 8098 	beq.w	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088fe:	2300      	movs	r3, #0
 8008900:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008902:	4b43      	ldr	r3, [pc, #268]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10d      	bne.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800890e:	4b40      	ldr	r3, [pc, #256]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008912:	4a3f      	ldr	r2, [pc, #252]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008918:	6593      	str	r3, [r2, #88]	@ 0x58
 800891a:	4b3d      	ldr	r3, [pc, #244]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800891c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800891e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008922:	60bb      	str	r3, [r7, #8]
 8008924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008926:	2301      	movs	r3, #1
 8008928:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800892a:	4b3a      	ldr	r3, [pc, #232]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a39      	ldr	r2, [pc, #228]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008934:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008936:	f7fb fb1f 	bl	8003f78 <HAL_GetTick>
 800893a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800893c:	e009      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800893e:	f7fb fb1b 	bl	8003f78 <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	2b02      	cmp	r3, #2
 800894a:	d902      	bls.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800894c:	2303      	movs	r3, #3
 800894e:	74fb      	strb	r3, [r7, #19]
        break;
 8008950:	e005      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008952:	4b30      	ldr	r3, [pc, #192]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800895a:	2b00      	cmp	r3, #0
 800895c:	d0ef      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800895e:	7cfb      	ldrb	r3, [r7, #19]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d159      	bne.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008964:	4b2a      	ldr	r3, [pc, #168]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800896a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800896e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d01e      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	429a      	cmp	r2, r3
 800897e:	d019      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008980:	4b23      	ldr	r3, [pc, #140]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008986:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800898a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800898c:	4b20      	ldr	r3, [pc, #128]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800898e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008992:	4a1f      	ldr	r2, [pc, #124]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800899c:	4b1c      	ldr	r3, [pc, #112]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800899e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089a2:	4a1b      	ldr	r2, [pc, #108]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80089ac:	4a18      	ldr	r2, [pc, #96]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d016      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089be:	f7fb fadb 	bl	8003f78 <HAL_GetTick>
 80089c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089c4:	e00b      	b.n	80089de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089c6:	f7fb fad7 	bl	8003f78 <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d902      	bls.n	80089de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	74fb      	strb	r3, [r7, #19]
            break;
 80089dc:	e006      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089de:	4b0c      	ldr	r3, [pc, #48]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089e4:	f003 0302 	and.w	r3, r3, #2
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d0ec      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80089ec:	7cfb      	ldrb	r3, [r7, #19]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10b      	bne.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089f2:	4b07      	ldr	r3, [pc, #28]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a00:	4903      	ldr	r1, [pc, #12]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008a08:	e008      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a0a:	7cfb      	ldrb	r3, [r7, #19]
 8008a0c:	74bb      	strb	r3, [r7, #18]
 8008a0e:	e005      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008a10:	40021000 	.word	0x40021000
 8008a14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a18:	7cfb      	ldrb	r3, [r7, #19]
 8008a1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a1c:	7c7b      	ldrb	r3, [r7, #17]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d105      	bne.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a22:	4ba7      	ldr	r3, [pc, #668]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a26:	4aa6      	ldr	r2, [pc, #664]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00a      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a3a:	4ba1      	ldr	r3, [pc, #644]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a40:	f023 0203 	bic.w	r2, r3, #3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	499d      	ldr	r1, [pc, #628]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0302 	and.w	r3, r3, #2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00a      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008a5c:	4b98      	ldr	r3, [pc, #608]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a62:	f023 020c 	bic.w	r2, r3, #12
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	4995      	ldr	r1, [pc, #596]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0304 	and.w	r3, r3, #4
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00a      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008a7e:	4b90      	ldr	r3, [pc, #576]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a84:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	498c      	ldr	r1, [pc, #560]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0308 	and.w	r3, r3, #8
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00a      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008aa0:	4b87      	ldr	r3, [pc, #540]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aa6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	4984      	ldr	r1, [pc, #528]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0310 	and.w	r3, r3, #16
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00a      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008ac2:	4b7f      	ldr	r3, [pc, #508]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ac8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	695b      	ldr	r3, [r3, #20]
 8008ad0:	497b      	ldr	r1, [pc, #492]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0320 	and.w	r3, r3, #32
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00a      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ae4:	4b76      	ldr	r3, [pc, #472]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	4973      	ldr	r1, [pc, #460]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008af4:	4313      	orrs	r3, r2
 8008af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00a      	beq.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b06:	4b6e      	ldr	r3, [pc, #440]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b0c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	496a      	ldr	r1, [pc, #424]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b16:	4313      	orrs	r3, r2
 8008b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00a      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008b28:	4b65      	ldr	r3, [pc, #404]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b2e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	4962      	ldr	r1, [pc, #392]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00a      	beq.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008b4a:	4b5d      	ldr	r3, [pc, #372]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b58:	4959      	ldr	r1, [pc, #356]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00a      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b6c:	4b54      	ldr	r3, [pc, #336]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b72:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b7a:	4951      	ldr	r1, [pc, #324]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d015      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b8e:	4b4c      	ldr	r3, [pc, #304]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b94:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b9c:	4948      	ldr	r1, [pc, #288]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bac:	d105      	bne.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bae:	4b44      	ldr	r3, [pc, #272]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	4a43      	ldr	r2, [pc, #268]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bb8:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d015      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bcc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bd4:	493a      	ldr	r1, [pc, #232]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008be0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008be4:	d105      	bne.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008be6:	4b36      	ldr	r3, [pc, #216]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	4a35      	ldr	r2, [pc, #212]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bf0:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d015      	beq.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008bfe:	4b30      	ldr	r3, [pc, #192]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c04:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c0c:	492c      	ldr	r1, [pc, #176]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c1c:	d105      	bne.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c1e:	4b28      	ldr	r3, [pc, #160]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	4a27      	ldr	r2, [pc, #156]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c28:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d015      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c36:	4b22      	ldr	r3, [pc, #136]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c3c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c44:	491e      	ldr	r1, [pc, #120]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c46:	4313      	orrs	r3, r2
 8008c48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c54:	d105      	bne.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c56:	4b1a      	ldr	r3, [pc, #104]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	4a19      	ldr	r2, [pc, #100]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c60:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d015      	beq.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c6e:	4b14      	ldr	r3, [pc, #80]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c74:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c7c:	4910      	ldr	r1, [pc, #64]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c8c:	d105      	bne.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	4a0b      	ldr	r2, [pc, #44]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c98:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d018      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008ca6:	4b06      	ldr	r3, [pc, #24]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cac:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cb4:	4902      	ldr	r1, [pc, #8]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	e001      	b.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008cc0:	40021000 	.word	0x40021000
 8008cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cca:	d105      	bne.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008ccc:	4b21      	ldr	r3, [pc, #132]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	4a20      	ldr	r2, [pc, #128]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008cd6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d015      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cea:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cf2:	4918      	ldr	r1, [pc, #96]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d02:	d105      	bne.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008d04:	4b13      	ldr	r3, [pc, #76]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	4a12      	ldr	r2, [pc, #72]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d0e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d015      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008d22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d2a:	490a      	ldr	r1, [pc, #40]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d3a:	d105      	bne.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d3c:	4b05      	ldr	r3, [pc, #20]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	4a04      	ldr	r2, [pc, #16]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008d48:	7cbb      	ldrb	r3, [r7, #18]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3718      	adds	r7, #24
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	40021000 	.word	0x40021000

08008d58 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08a      	sub	sp, #40	@ 0x28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8008d60:	2300      	movs	r3, #0
 8008d62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  FlagStatus       backupchanged = RESET;
 8008d66:	2300      	movs	r3, #0
 8008d68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  __LSCO_CLK_ENABLE();
 8008d6c:	4b2d      	ldr	r3, [pc, #180]	@ (8008e24 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d70:	4a2c      	ldr	r2, [pc, #176]	@ (8008e24 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008d72:	f043 0301 	orr.w	r3, r3, #1
 8008d76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008d78:	4b2a      	ldr	r3, [pc, #168]	@ (8008e24 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	60fb      	str	r3, [r7, #12]
 8008d82:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 8008d84:	2304      	movs	r3, #4
 8008d86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d8c:	2302      	movs	r3, #2
 8008d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d90:	2300      	movs	r3, #0
 8008d92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 8008d94:	f107 0310 	add.w	r3, r7, #16
 8008d98:	4619      	mov	r1, r3
 8008d9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008d9e:	f7fc fe33 	bl	8005a08 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008da2:	4b20      	ldr	r3, [pc, #128]	@ (8008e24 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10e      	bne.n	8008dcc <HAL_RCCEx_EnableLSCO+0x74>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008dae:	4b1d      	ldr	r3, [pc, #116]	@ (8008e24 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008db2:	4a1c      	ldr	r2, [pc, #112]	@ (8008e24 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008db8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008dba:	4b1a      	ldr	r3, [pc, #104]	@ (8008e24 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008dc2:	60bb      	str	r3, [r7, #8]
 8008dc4:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008dcc:	4b16      	ldr	r3, [pc, #88]	@ (8008e28 <HAL_RCCEx_EnableLSCO+0xd0>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d104      	bne.n	8008de2 <HAL_RCCEx_EnableLSCO+0x8a>
  {
    HAL_PWR_EnableBkUpAccess();
 8008dd8:	f7fe fe98 	bl	8007b0c <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8008de2:	4b10      	ldr	r3, [pc, #64]	@ (8008e24 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008de8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	4a0c      	ldr	r2, [pc, #48]	@ (8008e24 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008df2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008df6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  if(backupchanged == SET)
 8008dfa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d101      	bne.n	8008e06 <HAL_RCCEx_EnableLSCO+0xae>
  {
    HAL_PWR_DisableBkUpAccess();
 8008e02:	f7fe fe93 	bl	8007b2c <HAL_PWR_DisableBkUpAccess>
  }
  if(pwrclkchanged == SET)
 8008e06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d105      	bne.n	8008e1a <HAL_RCCEx_EnableLSCO+0xc2>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8008e0e:	4b05      	ldr	r3, [pc, #20]	@ (8008e24 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e12:	4a04      	ldr	r2, [pc, #16]	@ (8008e24 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008e14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e18:	6593      	str	r3, [r2, #88]	@ 0x58
  }
}
 8008e1a:	bf00      	nop
 8008e1c:	3728      	adds	r7, #40	@ 0x28
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	40021000 	.word	0x40021000
 8008e28:	40007000 	.word	0x40007000

08008e2c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8008e34:	4b1c      	ldr	r3, [pc, #112]	@ (8008ea8 <HAL_RCCEx_CRSConfig+0x7c>)
 8008e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e38:	4a1b      	ldr	r2, [pc, #108]	@ (8008ea8 <HAL_RCCEx_CRSConfig+0x7c>)
 8008e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e3e:	6393      	str	r3, [r2, #56]	@ 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 8008e40:	4b19      	ldr	r3, [pc, #100]	@ (8008ea8 <HAL_RCCEx_CRSConfig+0x7c>)
 8008e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e44:	4a18      	ldr	r2, [pc, #96]	@ (8008ea8 <HAL_RCCEx_CRSConfig+0x7c>)
 8008e46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e4a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	431a      	orrs	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	041b      	lsls	r3, r3, #16
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8008e74:	4a0d      	ldr	r2, [pc, #52]	@ (8008eac <HAL_RCCEx_CRSConfig+0x80>)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8008e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8008eac <HAL_RCCEx_CRSConfig+0x80>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	021b      	lsls	r3, r3, #8
 8008e88:	4908      	ldr	r1, [pc, #32]	@ (8008eac <HAL_RCCEx_CRSConfig+0x80>)
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8008e8e:	4b07      	ldr	r3, [pc, #28]	@ (8008eac <HAL_RCCEx_CRSConfig+0x80>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a06      	ldr	r2, [pc, #24]	@ (8008eac <HAL_RCCEx_CRSConfig+0x80>)
 8008e94:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008e98:	6013      	str	r3, [r2, #0]
}
 8008e9a:	bf00      	nop
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	40021000 	.word	0x40021000
 8008eac:	40002000 	.word	0x40002000

08008eb0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d101      	bne.n	8008ec2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e027      	b.n	8008f12 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	7a5b      	ldrb	r3, [r3, #9]
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d105      	bne.n	8008ed8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7f9 fae4 	bl	80024a0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2202      	movs	r2, #2
 8008edc:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f023 0108 	bic.w	r1, r3, #8
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	430a      	orrs	r2, r1
 8008ef2:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f042 0204 	orr.w	r2, r2, #4
 8008f02:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b084      	sub	sp, #16
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d070      	beq.n	800900e <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d106      	bne.n	8008f46 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7f9 fae1 	bl	8002508 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2202      	movs	r2, #2
 8008f4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	f003 0310 	and.w	r3, r3, #16
 8008f58:	2b10      	cmp	r3, #16
 8008f5a:	d04f      	beq.n	8008ffc <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	22ca      	movs	r2, #202	@ 0xca
 8008f62:	625a      	str	r2, [r3, #36]	@ 0x24
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2253      	movs	r2, #83	@ 0x53
 8008f6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f877 	bl	8009060 <RTC_EnterInitMode>
 8008f72:	4603      	mov	r3, r0
 8008f74:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d126      	bne.n	8008fca <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	699b      	ldr	r3, [r3, #24]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	6812      	ldr	r2, [r2, #0]
 8008f86:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8008f8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f8e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6999      	ldr	r1, [r3, #24]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	685a      	ldr	r2, [r3, #4]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	431a      	orrs	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	431a      	orrs	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	430a      	orrs	r2, r1
 8008fac:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68d9      	ldr	r1, [r3, #12]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	041a      	lsls	r2, r3, #16
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	430a      	orrs	r2, r1
 8008fbe:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f883 	bl	80090cc <RTC_ExitInitMode>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d110      	bne.n	8008ff2 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a1a      	ldr	r2, [r3, #32]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	431a      	orrs	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	430a      	orrs	r2, r1
 8008ff0:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	22ff      	movs	r2, #255	@ 0xff
 8008ff8:	625a      	str	r2, [r3, #36]	@ 0x24
 8008ffa:	e001      	b.n	8009000 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009000:	7bfb      	ldrb	r3, [r7, #15]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d103      	bne.n	800900e <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 800900e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009010:	4618      	mov	r0, r3
 8009012:	3710      	adds	r7, #16
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a0d      	ldr	r2, [pc, #52]	@ (800905c <HAL_RTC_WaitForSynchro+0x44>)
 8009026:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009028:	f7fa ffa6 	bl	8003f78 <HAL_GetTick>
 800902c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800902e:	e009      	b.n	8009044 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009030:	f7fa ffa2 	bl	8003f78 <HAL_GetTick>
 8009034:	4602      	mov	r2, r0
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800903e:	d901      	bls.n	8009044 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8009040:	2303      	movs	r3, #3
 8009042:	e007      	b.n	8009054 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	f003 0320 	and.w	r3, r3, #32
 800904e:	2b00      	cmp	r3, #0
 8009050:	d0ee      	beq.n	8009030 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	0001005f 	.word	0x0001005f

08009060 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009076:	2b00      	cmp	r3, #0
 8009078:	d123      	bne.n	80090c2 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68da      	ldr	r2, [r3, #12]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009088:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800908a:	f7fa ff75 	bl	8003f78 <HAL_GetTick>
 800908e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009090:	e00d      	b.n	80090ae <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009092:	f7fa ff71 	bl	8003f78 <HAL_GetTick>
 8009096:	4602      	mov	r2, r0
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80090a0:	d905      	bls.n	80090ae <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80090a2:	2303      	movs	r3, #3
 80090a4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2203      	movs	r2, #3
 80090aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d102      	bne.n	80090c2 <RTC_EnterInitMode+0x62>
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
 80090be:	2b03      	cmp	r3, #3
 80090c0:	d1e7      	bne.n	8009092 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 80090c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68da      	ldr	r2, [r3, #12]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80090e6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	f003 0320 	and.w	r3, r3, #32
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d10c      	bne.n	8009110 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7ff ff8e 	bl	8009018 <HAL_RTC_WaitForSynchro>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d022      	beq.n	8009148 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2203      	movs	r2, #3
 8009106:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800910a:	2303      	movs	r3, #3
 800910c:	73fb      	strb	r3, [r7, #15]
 800910e:	e01b      	b.n	8009148 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	699a      	ldr	r2, [r3, #24]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f022 0220 	bic.w	r2, r2, #32
 800911e:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7ff ff79 	bl	8009018 <HAL_RTC_WaitForSynchro>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d005      	beq.n	8009138 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2203      	movs	r2, #3
 8009130:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	699a      	ldr	r2, [r3, #24]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f042 0220 	orr.w	r2, r2, #32
 8009146:	619a      	str	r2, [r3, #24]
  }

  return status;
 8009148:	7bfb      	ldrb	r3, [r7, #15]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b084      	sub	sp, #16
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009160:	2b01      	cmp	r3, #1
 8009162:	d101      	bne.n	8009168 <HAL_RTCEx_SetRefClock+0x16>
 8009164:	2302      	movs	r3, #2
 8009166:	e034      	b.n	80091d2 <HAL_RTCEx_SetRefClock+0x80>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2202      	movs	r2, #2
 8009174:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	22ca      	movs	r2, #202	@ 0xca
 800917e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2253      	movs	r2, #83	@ 0x53
 8009186:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7ff ff69 	bl	8009060 <RTC_EnterInitMode>
 800918e:	4603      	mov	r3, r0
 8009190:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 8009192:	7bfb      	ldrb	r3, [r7, #15]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10c      	bne.n	80091b2 <HAL_RTCEx_SetRefClock+0x60>
  {
    /* Enable clockref detection */
    SET_BIT(hrtc->Instance->CR, RTC_CR_REFCKON);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	699a      	ldr	r2, [r3, #24]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f042 0210 	orr.w	r2, r2, #16
 80091a6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7ff ff8f 	bl	80090cc <RTC_ExitInitMode>
 80091ae:	4603      	mov	r3, r0
 80091b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	22ff      	movs	r2, #255	@ 0xff
 80091b8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d103      	bne.n	80091c8 <HAL_RTCEx_SetRefClock+0x76>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b084      	sub	sp, #16
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d101      	bne.n	80091ec <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80091e8:	2301      	movs	r3, #1
 80091ea:	e09d      	b.n	8009328 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d108      	bne.n	8009206 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091fc:	d009      	beq.n	8009212 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	61da      	str	r2, [r3, #28]
 8009204:	e005      	b.n	8009212 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b00      	cmp	r3, #0
 8009222:	d106      	bne.n	8009232 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7f9 f9cd 	bl	80025cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2202      	movs	r2, #2
 8009236:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009248:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009252:	d902      	bls.n	800925a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009254:	2300      	movs	r3, #0
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	e002      	b.n	8009260 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800925a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800925e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009268:	d007      	beq.n	800927a <HAL_SPI_Init+0xa0>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009272:	d002      	beq.n	800927a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800928a:	431a      	orrs	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	f003 0302 	and.w	r3, r3, #2
 8009294:	431a      	orrs	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	f003 0301 	and.w	r3, r3, #1
 800929e:	431a      	orrs	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092a8:	431a      	orrs	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	69db      	ldr	r3, [r3, #28]
 80092ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092b2:	431a      	orrs	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a1b      	ldr	r3, [r3, #32]
 80092b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092bc:	ea42 0103 	orr.w	r1, r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	430a      	orrs	r2, r1
 80092ce:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	0c1b      	lsrs	r3, r3, #16
 80092d6:	f003 0204 	and.w	r2, r3, #4
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092de:	f003 0310 	and.w	r3, r3, #16
 80092e2:	431a      	orrs	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092e8:	f003 0308 	and.w	r3, r3, #8
 80092ec:	431a      	orrs	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80092f6:	ea42 0103 	orr.w	r1, r2, r3
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	430a      	orrs	r2, r1
 8009306:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	69da      	ldr	r2, [r3, #28]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009316:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b088      	sub	sp, #32
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	603b      	str	r3, [r7, #0]
 800933c:	4613      	mov	r3, r2
 800933e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009340:	f7fa fe1a 	bl	8003f78 <HAL_GetTick>
 8009344:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009346:	88fb      	ldrh	r3, [r7, #6]
 8009348:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b01      	cmp	r3, #1
 8009354:	d001      	beq.n	800935a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009356:	2302      	movs	r3, #2
 8009358:	e15c      	b.n	8009614 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d002      	beq.n	8009366 <HAL_SPI_Transmit+0x36>
 8009360:	88fb      	ldrh	r3, [r7, #6]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d101      	bne.n	800936a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e154      	b.n	8009614 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009370:	2b01      	cmp	r3, #1
 8009372:	d101      	bne.n	8009378 <HAL_SPI_Transmit+0x48>
 8009374:	2302      	movs	r3, #2
 8009376:	e14d      	b.n	8009614 <HAL_SPI_Transmit+0x2e4>
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2203      	movs	r2, #3
 8009384:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	88fa      	ldrh	r2, [r7, #6]
 8009398:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	88fa      	ldrh	r2, [r7, #6]
 800939e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2200      	movs	r2, #0
 80093ba:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093ca:	d10f      	bne.n	80093ec <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80093ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093f6:	2b40      	cmp	r3, #64	@ 0x40
 80093f8:	d007      	beq.n	800940a <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009408:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009412:	d952      	bls.n	80094ba <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d002      	beq.n	8009422 <HAL_SPI_Transmit+0xf2>
 800941c:	8b7b      	ldrh	r3, [r7, #26]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d145      	bne.n	80094ae <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009426:	881a      	ldrh	r2, [r3, #0]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009432:	1c9a      	adds	r2, r3, #2
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800943c:	b29b      	uxth	r3, r3
 800943e:	3b01      	subs	r3, #1
 8009440:	b29a      	uxth	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009446:	e032      	b.n	80094ae <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	f003 0302 	and.w	r3, r3, #2
 8009452:	2b02      	cmp	r3, #2
 8009454:	d112      	bne.n	800947c <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800945a:	881a      	ldrh	r2, [r3, #0]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009466:	1c9a      	adds	r2, r3, #2
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009470:	b29b      	uxth	r3, r3
 8009472:	3b01      	subs	r3, #1
 8009474:	b29a      	uxth	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800947a:	e018      	b.n	80094ae <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800947c:	f7fa fd7c 	bl	8003f78 <HAL_GetTick>
 8009480:	4602      	mov	r2, r0
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	683a      	ldr	r2, [r7, #0]
 8009488:	429a      	cmp	r2, r3
 800948a:	d803      	bhi.n	8009494 <HAL_SPI_Transmit+0x164>
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009492:	d102      	bne.n	800949a <HAL_SPI_Transmit+0x16a>
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d109      	bne.n	80094ae <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	e0b2      	b.n	8009614 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d1c7      	bne.n	8009448 <HAL_SPI_Transmit+0x118>
 80094b8:	e083      	b.n	80095c2 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d002      	beq.n	80094c8 <HAL_SPI_Transmit+0x198>
 80094c2:	8b7b      	ldrh	r3, [r7, #26]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d177      	bne.n	80095b8 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d912      	bls.n	80094f8 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d6:	881a      	ldrh	r2, [r3, #0]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e2:	1c9a      	adds	r2, r3, #2
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	3b02      	subs	r3, #2
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80094f6:	e05f      	b.n	80095b8 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	330c      	adds	r3, #12
 8009502:	7812      	ldrb	r2, [r2, #0]
 8009504:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800950a:	1c5a      	adds	r2, r3, #1
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009514:	b29b      	uxth	r3, r3
 8009516:	3b01      	subs	r3, #1
 8009518:	b29a      	uxth	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800951e:	e04b      	b.n	80095b8 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f003 0302 	and.w	r3, r3, #2
 800952a:	2b02      	cmp	r3, #2
 800952c:	d12b      	bne.n	8009586 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009532:	b29b      	uxth	r3, r3
 8009534:	2b01      	cmp	r3, #1
 8009536:	d912      	bls.n	800955e <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800953c:	881a      	ldrh	r2, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009548:	1c9a      	adds	r2, r3, #2
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009552:	b29b      	uxth	r3, r3
 8009554:	3b02      	subs	r3, #2
 8009556:	b29a      	uxth	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800955c:	e02c      	b.n	80095b8 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	330c      	adds	r3, #12
 8009568:	7812      	ldrb	r2, [r2, #0]
 800956a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009570:	1c5a      	adds	r2, r3, #1
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800957a:	b29b      	uxth	r3, r3
 800957c:	3b01      	subs	r3, #1
 800957e:	b29a      	uxth	r2, r3
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009584:	e018      	b.n	80095b8 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009586:	f7fa fcf7 	bl	8003f78 <HAL_GetTick>
 800958a:	4602      	mov	r2, r0
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	1ad3      	subs	r3, r2, r3
 8009590:	683a      	ldr	r2, [r7, #0]
 8009592:	429a      	cmp	r2, r3
 8009594:	d803      	bhi.n	800959e <HAL_SPI_Transmit+0x26e>
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800959c:	d102      	bne.n	80095a4 <HAL_SPI_Transmit+0x274>
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d109      	bne.n	80095b8 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80095b4:	2303      	movs	r3, #3
 80095b6:	e02d      	b.n	8009614 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80095bc:	b29b      	uxth	r3, r3
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1ae      	bne.n	8009520 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095c2:	69fa      	ldr	r2, [r7, #28]
 80095c4:	6839      	ldr	r1, [r7, #0]
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f000 fcf6 	bl	8009fb8 <SPI_EndRxTxTransaction>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d002      	beq.n	80095d8 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2220      	movs	r2, #32
 80095d6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10a      	bne.n	80095f6 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095e0:	2300      	movs	r3, #0
 80095e2:	617b      	str	r3, [r7, #20]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	617b      	str	r3, [r7, #20]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	617b      	str	r3, [r7, #20]
 80095f4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e000      	b.n	8009614 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8009612:	2300      	movs	r3, #0
  }
}
 8009614:	4618      	mov	r0, r3
 8009616:	3720      	adds	r7, #32
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b088      	sub	sp, #32
 8009620:	af02      	add	r7, sp, #8
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	603b      	str	r3, [r7, #0]
 8009628:	4613      	mov	r3, r2
 800962a:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b01      	cmp	r3, #1
 8009636:	d001      	beq.n	800963c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8009638:	2302      	movs	r3, #2
 800963a:	e123      	b.n	8009884 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d002      	beq.n	8009648 <HAL_SPI_Receive+0x2c>
 8009642:	88fb      	ldrh	r3, [r7, #6]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d101      	bne.n	800964c <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	e11b      	b.n	8009884 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009654:	d112      	bne.n	800967c <HAL_SPI_Receive+0x60>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10e      	bne.n	800967c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2204      	movs	r2, #4
 8009662:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009666:	88fa      	ldrh	r2, [r7, #6]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	4613      	mov	r3, r2
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	68b9      	ldr	r1, [r7, #8]
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f000 f90a 	bl	800988c <HAL_SPI_TransmitReceive>
 8009678:	4603      	mov	r3, r0
 800967a:	e103      	b.n	8009884 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800967c:	f7fa fc7c 	bl	8003f78 <HAL_GetTick>
 8009680:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009688:	2b01      	cmp	r3, #1
 800968a:	d101      	bne.n	8009690 <HAL_SPI_Receive+0x74>
 800968c:	2302      	movs	r3, #2
 800968e:	e0f9      	b.n	8009884 <HAL_SPI_Receive+0x268>
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2204      	movs	r2, #4
 800969c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	88fa      	ldrh	r2, [r7, #6]
 80096b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	88fa      	ldrh	r2, [r7, #6]
 80096b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2200      	movs	r2, #0
 80096c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2200      	movs	r2, #0
 80096cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2200      	movs	r2, #0
 80096d8:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80096e2:	d908      	bls.n	80096f6 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	685a      	ldr	r2, [r3, #4]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80096f2:	605a      	str	r2, [r3, #4]
 80096f4:	e007      	b.n	8009706 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009704:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800970e:	d10f      	bne.n	8009730 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800971e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800972e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800973a:	2b40      	cmp	r3, #64	@ 0x40
 800973c:	d007      	beq.n	800974e <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800974c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009756:	d875      	bhi.n	8009844 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009758:	e037      	b.n	80097ca <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	f003 0301 	and.w	r3, r3, #1
 8009764:	2b01      	cmp	r3, #1
 8009766:	d117      	bne.n	8009798 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f103 020c 	add.w	r2, r3, #12
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009774:	7812      	ldrb	r2, [r2, #0]
 8009776:	b2d2      	uxtb	r2, r2
 8009778:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800977e:	1c5a      	adds	r2, r3, #1
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800978a:	b29b      	uxth	r3, r3
 800978c:	3b01      	subs	r3, #1
 800978e:	b29a      	uxth	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009796:	e018      	b.n	80097ca <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009798:	f7fa fbee 	bl	8003f78 <HAL_GetTick>
 800979c:	4602      	mov	r2, r0
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d803      	bhi.n	80097b0 <HAL_SPI_Receive+0x194>
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097ae:	d102      	bne.n	80097b6 <HAL_SPI_Receive+0x19a>
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d109      	bne.n	80097ca <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2201      	movs	r2, #1
 80097ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80097c6:	2303      	movs	r3, #3
 80097c8:	e05c      	b.n	8009884 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1c1      	bne.n	800975a <HAL_SPI_Receive+0x13e>
 80097d6:	e03b      	b.n	8009850 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d115      	bne.n	8009812 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68da      	ldr	r2, [r3, #12]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097f0:	b292      	uxth	r2, r2
 80097f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097f8:	1c9a      	adds	r2, r3, #2
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009804:	b29b      	uxth	r3, r3
 8009806:	3b01      	subs	r3, #1
 8009808:	b29a      	uxth	r2, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009810:	e018      	b.n	8009844 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009812:	f7fa fbb1 	bl	8003f78 <HAL_GetTick>
 8009816:	4602      	mov	r2, r0
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	683a      	ldr	r2, [r7, #0]
 800981e:	429a      	cmp	r2, r3
 8009820:	d803      	bhi.n	800982a <HAL_SPI_Receive+0x20e>
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009828:	d102      	bne.n	8009830 <HAL_SPI_Receive+0x214>
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d109      	bne.n	8009844 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2200      	movs	r2, #0
 800983c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	e01f      	b.n	8009884 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800984a:	b29b      	uxth	r3, r3
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1c3      	bne.n	80097d8 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	6839      	ldr	r1, [r7, #0]
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f000 fb57 	bl	8009f08 <SPI_EndRxTransaction>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d002      	beq.n	8009866 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2220      	movs	r2, #32
 8009864:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2201      	movs	r2, #1
 800986a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e000      	b.n	8009884 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8009882:	2300      	movs	r3, #0
  }
}
 8009884:	4618      	mov	r0, r3
 8009886:	3718      	adds	r7, #24
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b08a      	sub	sp, #40	@ 0x28
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]
 8009898:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800989a:	2301      	movs	r3, #1
 800989c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800989e:	f7fa fb6b 	bl	8003f78 <HAL_GetTick>
 80098a2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80098aa:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80098b2:	887b      	ldrh	r3, [r7, #2]
 80098b4:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80098b6:	887b      	ldrh	r3, [r7, #2]
 80098b8:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80098ba:	7ffb      	ldrb	r3, [r7, #31]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d00c      	beq.n	80098da <HAL_SPI_TransmitReceive+0x4e>
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80098c6:	d106      	bne.n	80098d6 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d102      	bne.n	80098d6 <HAL_SPI_TransmitReceive+0x4a>
 80098d0:	7ffb      	ldrb	r3, [r7, #31]
 80098d2:	2b04      	cmp	r3, #4
 80098d4:	d001      	beq.n	80098da <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80098d6:	2302      	movs	r3, #2
 80098d8:	e1f3      	b.n	8009cc2 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d005      	beq.n	80098ec <HAL_SPI_TransmitReceive+0x60>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d002      	beq.n	80098ec <HAL_SPI_TransmitReceive+0x60>
 80098e6:	887b      	ldrh	r3, [r7, #2]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d101      	bne.n	80098f0 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	e1e8      	b.n	8009cc2 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d101      	bne.n	80098fe <HAL_SPI_TransmitReceive+0x72>
 80098fa:	2302      	movs	r3, #2
 80098fc:	e1e1      	b.n	8009cc2 <HAL_SPI_TransmitReceive+0x436>
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800990c:	b2db      	uxtb	r3, r3
 800990e:	2b04      	cmp	r3, #4
 8009910:	d003      	beq.n	800991a <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2205      	movs	r2, #5
 8009916:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2200      	movs	r2, #0
 800991e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	887a      	ldrh	r2, [r7, #2]
 800992a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	887a      	ldrh	r2, [r7, #2]
 8009932:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	887a      	ldrh	r2, [r7, #2]
 8009940:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	887a      	ldrh	r2, [r7, #2]
 8009946:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800995c:	d802      	bhi.n	8009964 <HAL_SPI_TransmitReceive+0xd8>
 800995e:	8abb      	ldrh	r3, [r7, #20]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d908      	bls.n	8009976 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	685a      	ldr	r2, [r3, #4]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009972:	605a      	str	r2, [r3, #4]
 8009974:	e007      	b.n	8009986 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	685a      	ldr	r2, [r3, #4]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009984:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009990:	2b40      	cmp	r3, #64	@ 0x40
 8009992:	d007      	beq.n	80099a4 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80099ac:	f240 8083 	bls.w	8009ab6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <HAL_SPI_TransmitReceive+0x132>
 80099b8:	8afb      	ldrh	r3, [r7, #22]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d16f      	bne.n	8009a9e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c2:	881a      	ldrh	r2, [r3, #0]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ce:	1c9a      	adds	r2, r3, #2
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099d8:	b29b      	uxth	r3, r3
 80099da:	3b01      	subs	r3, #1
 80099dc:	b29a      	uxth	r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099e2:	e05c      	b.n	8009a9e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	f003 0302 	and.w	r3, r3, #2
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d11b      	bne.n	8009a2a <HAL_SPI_TransmitReceive+0x19e>
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d016      	beq.n	8009a2a <HAL_SPI_TransmitReceive+0x19e>
 80099fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d113      	bne.n	8009a2a <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a06:	881a      	ldrh	r2, [r3, #0]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a12:	1c9a      	adds	r2, r3, #2
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a26:	2300      	movs	r3, #0
 8009a28:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	f003 0301 	and.w	r3, r3, #1
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d11c      	bne.n	8009a72 <HAL_SPI_TransmitReceive+0x1e6>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d016      	beq.n	8009a72 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68da      	ldr	r2, [r3, #12]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a4e:	b292      	uxth	r2, r2
 8009a50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a56:	1c9a      	adds	r2, r3, #2
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	3b01      	subs	r3, #1
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009a72:	f7fa fa81 	bl	8003f78 <HAL_GetTick>
 8009a76:	4602      	mov	r2, r0
 8009a78:	6a3b      	ldr	r3, [r7, #32]
 8009a7a:	1ad3      	subs	r3, r2, r3
 8009a7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d80d      	bhi.n	8009a9e <HAL_SPI_TransmitReceive+0x212>
 8009a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a88:	d009      	beq.n	8009a9e <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	e111      	b.n	8009cc2 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d19d      	bne.n	80099e4 <HAL_SPI_TransmitReceive+0x158>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d197      	bne.n	80099e4 <HAL_SPI_TransmitReceive+0x158>
 8009ab4:	e0e5      	b.n	8009c82 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d003      	beq.n	8009ac6 <HAL_SPI_TransmitReceive+0x23a>
 8009abe:	8afb      	ldrh	r3, [r7, #22]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	f040 80d1 	bne.w	8009c68 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d912      	bls.n	8009af6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ad4:	881a      	ldrh	r2, [r3, #0]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ae0:	1c9a      	adds	r2, r3, #2
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	3b02      	subs	r3, #2
 8009aee:	b29a      	uxth	r2, r3
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009af4:	e0b8      	b.n	8009c68 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	330c      	adds	r3, #12
 8009b00:	7812      	ldrb	r2, [r2, #0]
 8009b02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b08:	1c5a      	adds	r2, r3, #1
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	3b01      	subs	r3, #1
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b1c:	e0a4      	b.n	8009c68 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	f003 0302 	and.w	r3, r3, #2
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d134      	bne.n	8009b96 <HAL_SPI_TransmitReceive+0x30a>
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d02f      	beq.n	8009b96 <HAL_SPI_TransmitReceive+0x30a>
 8009b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d12c      	bne.n	8009b96 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d912      	bls.n	8009b6c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b4a:	881a      	ldrh	r2, [r3, #0]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b56:	1c9a      	adds	r2, r3, #2
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	3b02      	subs	r3, #2
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009b6a:	e012      	b.n	8009b92 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	330c      	adds	r3, #12
 8009b76:	7812      	ldrb	r2, [r2, #0]
 8009b78:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b7e:	1c5a      	adds	r2, r3, #1
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b92:	2300      	movs	r3, #0
 8009b94:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	f003 0301 	and.w	r3, r3, #1
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d148      	bne.n	8009c36 <HAL_SPI_TransmitReceive+0x3aa>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d042      	beq.n	8009c36 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d923      	bls.n	8009c04 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68da      	ldr	r2, [r3, #12]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bc6:	b292      	uxth	r2, r2
 8009bc8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bce:	1c9a      	adds	r2, r3, #2
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	3b02      	subs	r3, #2
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d81f      	bhi.n	8009c32 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	685a      	ldr	r2, [r3, #4]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009c00:	605a      	str	r2, [r3, #4]
 8009c02:	e016      	b.n	8009c32 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f103 020c 	add.w	r2, r3, #12
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c10:	7812      	ldrb	r2, [r2, #0]
 8009c12:	b2d2      	uxtb	r2, r2
 8009c14:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c1a:	1c5a      	adds	r2, r3, #1
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c32:	2301      	movs	r3, #1
 8009c34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009c36:	f7fa f99f 	bl	8003f78 <HAL_GetTick>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d803      	bhi.n	8009c4e <HAL_SPI_TransmitReceive+0x3c2>
 8009c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c4c:	d102      	bne.n	8009c54 <HAL_SPI_TransmitReceive+0x3c8>
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d109      	bne.n	8009c68 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2201      	movs	r2, #1
 8009c58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e02c      	b.n	8009cc2 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f47f af55 	bne.w	8009b1e <HAL_SPI_TransmitReceive+0x292>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f47f af4e 	bne.w	8009b1e <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c82:	6a3a      	ldr	r2, [r7, #32]
 8009c84:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f000 f996 	bl	8009fb8 <SPI_EndRxTxTransaction>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d008      	beq.n	8009ca4 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2220      	movs	r2, #32
 8009c96:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e00e      	b.n	8009cc2 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d001      	beq.n	8009cc0 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e000      	b.n	8009cc2 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
  }
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3728      	adds	r7, #40	@ 0x28
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
	...

08009ccc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b088      	sub	sp, #32
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	603b      	str	r3, [r7, #0]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009cdc:	f7fa f94c 	bl	8003f78 <HAL_GetTick>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce4:	1a9b      	subs	r3, r3, r2
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	4413      	add	r3, r2
 8009cea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009cec:	f7fa f944 	bl	8003f78 <HAL_GetTick>
 8009cf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009cf2:	4b39      	ldr	r3, [pc, #228]	@ (8009dd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	015b      	lsls	r3, r3, #5
 8009cf8:	0d1b      	lsrs	r3, r3, #20
 8009cfa:	69fa      	ldr	r2, [r7, #28]
 8009cfc:	fb02 f303 	mul.w	r3, r2, r3
 8009d00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d02:	e054      	b.n	8009dae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d0a:	d050      	beq.n	8009dae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d0c:	f7fa f934 	bl	8003f78 <HAL_GetTick>
 8009d10:	4602      	mov	r2, r0
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	1ad3      	subs	r3, r2, r3
 8009d16:	69fa      	ldr	r2, [r7, #28]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d902      	bls.n	8009d22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d13d      	bne.n	8009d9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009d30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d3a:	d111      	bne.n	8009d60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d44:	d004      	beq.n	8009d50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d4e:	d107      	bne.n	8009d60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d68:	d10f      	bne.n	8009d8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009d78:	601a      	str	r2, [r3, #0]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009d88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e017      	b.n	8009dce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d101      	bne.n	8009da8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009da4:	2300      	movs	r3, #0
 8009da6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	3b01      	subs	r3, #1
 8009dac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	689a      	ldr	r2, [r3, #8]
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	4013      	ands	r3, r2
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	bf0c      	ite	eq
 8009dbe:	2301      	moveq	r3, #1
 8009dc0:	2300      	movne	r3, #0
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	79fb      	ldrb	r3, [r7, #7]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d19b      	bne.n	8009d04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3720      	adds	r7, #32
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	20000000 	.word	0x20000000

08009ddc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b08a      	sub	sp, #40	@ 0x28
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
 8009de8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009dea:	2300      	movs	r3, #0
 8009dec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009dee:	f7fa f8c3 	bl	8003f78 <HAL_GetTick>
 8009df2:	4602      	mov	r2, r0
 8009df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df6:	1a9b      	subs	r3, r3, r2
 8009df8:	683a      	ldr	r2, [r7, #0]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009dfe:	f7fa f8bb 	bl	8003f78 <HAL_GetTick>
 8009e02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	330c      	adds	r3, #12
 8009e0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009e0c:	4b3d      	ldr	r3, [pc, #244]	@ (8009f04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	4613      	mov	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4413      	add	r3, r2
 8009e16:	00da      	lsls	r2, r3, #3
 8009e18:	1ad3      	subs	r3, r2, r3
 8009e1a:	0d1b      	lsrs	r3, r3, #20
 8009e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e1e:	fb02 f303 	mul.w	r3, r2, r3
 8009e22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009e24:	e060      	b.n	8009ee8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009e2c:	d107      	bne.n	8009e3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d104      	bne.n	8009e3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009e3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e44:	d050      	beq.n	8009ee8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e46:	f7fa f897 	bl	8003f78 <HAL_GetTick>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	6a3b      	ldr	r3, [r7, #32]
 8009e4e:	1ad3      	subs	r3, r2, r3
 8009e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d902      	bls.n	8009e5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d13d      	bne.n	8009ed8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	685a      	ldr	r2, [r3, #4]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009e6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009e74:	d111      	bne.n	8009e9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e7e:	d004      	beq.n	8009e8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e88:	d107      	bne.n	8009e9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ea2:	d10f      	bne.n	8009ec4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009ec2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009ed4:	2303      	movs	r3, #3
 8009ed6:	e010      	b.n	8009efa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d101      	bne.n	8009ee2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	689a      	ldr	r2, [r3, #8]
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d196      	bne.n	8009e26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3728      	adds	r7, #40	@ 0x28
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	20000000 	.word	0x20000000

08009f08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af02      	add	r7, sp, #8
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009f1c:	d111      	bne.n	8009f42 <SPI_EndRxTransaction+0x3a>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f26:	d004      	beq.n	8009f32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f30:	d107      	bne.n	8009f42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f40:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	2180      	movs	r1, #128	@ 0x80
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f7ff febd 	bl	8009ccc <SPI_WaitFlagStateUntilTimeout>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d007      	beq.n	8009f68 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f5c:	f043 0220 	orr.w	r2, r3, #32
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e023      	b.n	8009fb0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009f70:	d11d      	bne.n	8009fae <SPI_EndRxTransaction+0xa6>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f7a:	d004      	beq.n	8009f86 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f84:	d113      	bne.n	8009fae <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f7ff ff22 	bl	8009ddc <SPI_WaitFifoStateUntilTimeout>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d007      	beq.n	8009fae <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fa2:	f043 0220 	orr.w	r2, r3, #32
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009faa:	2303      	movs	r3, #3
 8009fac:	e000      	b.n	8009fb0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af02      	add	r7, sp, #8
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f7ff ff03 	bl	8009ddc <SPI_WaitFifoStateUntilTimeout>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d007      	beq.n	8009fec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fe0:	f043 0220 	orr.w	r2, r3, #32
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009fe8:	2303      	movs	r3, #3
 8009fea:	e027      	b.n	800a03c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	9300      	str	r3, [sp, #0]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	2180      	movs	r1, #128	@ 0x80
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f7ff fe68 	bl	8009ccc <SPI_WaitFlagStateUntilTimeout>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d007      	beq.n	800a012 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a006:	f043 0220 	orr.w	r2, r3, #32
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a00e:	2303      	movs	r3, #3
 800a010:	e014      	b.n	800a03c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	2200      	movs	r2, #0
 800a01a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f7ff fedc 	bl	8009ddc <SPI_WaitFifoStateUntilTimeout>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d007      	beq.n	800a03a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a02e:	f043 0220 	orr.w	r2, r3, #32
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e000      	b.n	800a03c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3710      	adds	r7, #16
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d101      	bne.n	800a056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a052:	2301      	movs	r3, #1
 800a054:	e049      	b.n	800a0ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d106      	bne.n	800a070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7f8 fb82 	bl	8002774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2202      	movs	r2, #2
 800a074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	3304      	adds	r3, #4
 800a080:	4619      	mov	r1, r3
 800a082:	4610      	mov	r0, r2
 800a084:	f000 fd32 	bl	800aaec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
	...

0800a0f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a102:	b2db      	uxtb	r3, r3
 800a104:	2b01      	cmp	r3, #1
 800a106:	d001      	beq.n	800a10c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	e04f      	b.n	800a1ac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2202      	movs	r2, #2
 800a110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68da      	ldr	r2, [r3, #12]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f042 0201 	orr.w	r2, r2, #1
 800a122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a23      	ldr	r2, [pc, #140]	@ (800a1b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d01d      	beq.n	800a16a <HAL_TIM_Base_Start_IT+0x76>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a136:	d018      	beq.n	800a16a <HAL_TIM_Base_Start_IT+0x76>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a1f      	ldr	r2, [pc, #124]	@ (800a1bc <HAL_TIM_Base_Start_IT+0xc8>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d013      	beq.n	800a16a <HAL_TIM_Base_Start_IT+0x76>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a1e      	ldr	r2, [pc, #120]	@ (800a1c0 <HAL_TIM_Base_Start_IT+0xcc>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d00e      	beq.n	800a16a <HAL_TIM_Base_Start_IT+0x76>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a1c      	ldr	r2, [pc, #112]	@ (800a1c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d009      	beq.n	800a16a <HAL_TIM_Base_Start_IT+0x76>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a1b      	ldr	r2, [pc, #108]	@ (800a1c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d004      	beq.n	800a16a <HAL_TIM_Base_Start_IT+0x76>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a19      	ldr	r2, [pc, #100]	@ (800a1cc <HAL_TIM_Base_Start_IT+0xd8>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d115      	bne.n	800a196 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	689a      	ldr	r2, [r3, #8]
 800a170:	4b17      	ldr	r3, [pc, #92]	@ (800a1d0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a172:	4013      	ands	r3, r2
 800a174:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2b06      	cmp	r3, #6
 800a17a:	d015      	beq.n	800a1a8 <HAL_TIM_Base_Start_IT+0xb4>
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a182:	d011      	beq.n	800a1a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f042 0201 	orr.w	r2, r2, #1
 800a192:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a194:	e008      	b.n	800a1a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f042 0201 	orr.w	r2, r2, #1
 800a1a4:	601a      	str	r2, [r3, #0]
 800a1a6:	e000      	b.n	800a1aa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1aa:	2300      	movs	r3, #0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3714      	adds	r7, #20
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr
 800a1b8:	40012c00 	.word	0x40012c00
 800a1bc:	40000400 	.word	0x40000400
 800a1c0:	40000800 	.word	0x40000800
 800a1c4:	40013400 	.word	0x40013400
 800a1c8:	40014000 	.word	0x40014000
 800a1cc:	40015000 	.word	0x40015000
 800a1d0:	00010007 	.word	0x00010007

0800a1d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d101      	bne.n	800a1e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e049      	b.n	800a27a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d106      	bne.n	800a200 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7f8 fb02 	bl	8002804 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2202      	movs	r2, #2
 800a204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	3304      	adds	r3, #4
 800a210:	4619      	mov	r1, r3
 800a212:	4610      	mov	r0, r2
 800a214:	f000 fc6a 	bl	800aaec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3708      	adds	r7, #8
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b086      	sub	sp, #24
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
 800a28a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d101      	bne.n	800a296 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e097      	b.n	800a3c6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d106      	bne.n	800a2b0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f7f8 f9d2 	bl	8002654 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	6812      	ldr	r2, [r2, #0]
 800a2c2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800a2c6:	f023 0307 	bic.w	r3, r3, #7
 800a2ca:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	f000 fc08 	bl	800aaec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	699b      	ldr	r3, [r3, #24]
 800a2ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6a1b      	ldr	r3, [r3, #32]
 800a2f2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a304:	f023 0303 	bic.w	r3, r3, #3
 800a308:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	689a      	ldr	r2, [r3, #8]
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	699b      	ldr	r3, [r3, #24]
 800a312:	021b      	lsls	r3, r3, #8
 800a314:	4313      	orrs	r3, r2
 800a316:	693a      	ldr	r2, [r7, #16]
 800a318:	4313      	orrs	r3, r2
 800a31a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a322:	f023 030c 	bic.w	r3, r3, #12
 800a326:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a32e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	68da      	ldr	r2, [r3, #12]
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	69db      	ldr	r3, [r3, #28]
 800a33c:	021b      	lsls	r3, r3, #8
 800a33e:	4313      	orrs	r3, r2
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	4313      	orrs	r3, r2
 800a344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	011a      	lsls	r2, r3, #4
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	6a1b      	ldr	r3, [r3, #32]
 800a350:	031b      	lsls	r3, r3, #12
 800a352:	4313      	orrs	r3, r2
 800a354:	693a      	ldr	r2, [r7, #16]
 800a356:	4313      	orrs	r3, r2
 800a358:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a360:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a368:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	685a      	ldr	r2, [r3, #4]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	695b      	ldr	r3, [r3, #20]
 800a372:	011b      	lsls	r3, r3, #4
 800a374:	4313      	orrs	r3, r2
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	4313      	orrs	r3, r2
 800a37a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	697a      	ldr	r2, [r7, #20]
 800a382:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	693a      	ldr	r2, [r7, #16]
 800a38a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3718      	adds	r7, #24
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b084      	sub	sp, #16
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	691b      	ldr	r3, [r3, #16]
 800a3e4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	f003 0302 	and.w	r3, r3, #2
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d020      	beq.n	800a432 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f003 0302 	and.w	r3, r3, #2
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d01b      	beq.n	800a432 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f06f 0202 	mvn.w	r2, #2
 800a402:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	699b      	ldr	r3, [r3, #24]
 800a410:	f003 0303 	and.w	r3, r3, #3
 800a414:	2b00      	cmp	r3, #0
 800a416:	d003      	beq.n	800a420 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fb49 	bl	800aab0 <HAL_TIM_IC_CaptureCallback>
 800a41e:	e005      	b.n	800a42c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 fb3b 	bl	800aa9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 fb4c 	bl	800aac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	f003 0304 	and.w	r3, r3, #4
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d020      	beq.n	800a47e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f003 0304 	and.w	r3, r3, #4
 800a442:	2b00      	cmp	r3, #0
 800a444:	d01b      	beq.n	800a47e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f06f 0204 	mvn.w	r2, #4
 800a44e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2202      	movs	r2, #2
 800a454:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a460:	2b00      	cmp	r3, #0
 800a462:	d003      	beq.n	800a46c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fb23 	bl	800aab0 <HAL_TIM_IC_CaptureCallback>
 800a46a:	e005      	b.n	800a478 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fb15 	bl	800aa9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 fb26 	bl	800aac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	f003 0308 	and.w	r3, r3, #8
 800a484:	2b00      	cmp	r3, #0
 800a486:	d020      	beq.n	800a4ca <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f003 0308 	and.w	r3, r3, #8
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d01b      	beq.n	800a4ca <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f06f 0208 	mvn.w	r2, #8
 800a49a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2204      	movs	r2, #4
 800a4a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	69db      	ldr	r3, [r3, #28]
 800a4a8:	f003 0303 	and.w	r3, r3, #3
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d003      	beq.n	800a4b8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 fafd 	bl	800aab0 <HAL_TIM_IC_CaptureCallback>
 800a4b6:	e005      	b.n	800a4c4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 faef 	bl	800aa9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 fb00 	bl	800aac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	f003 0310 	and.w	r3, r3, #16
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d020      	beq.n	800a516 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f003 0310 	and.w	r3, r3, #16
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d01b      	beq.n	800a516 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f06f 0210 	mvn.w	r2, #16
 800a4e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2208      	movs	r2, #8
 800a4ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	69db      	ldr	r3, [r3, #28]
 800a4f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d003      	beq.n	800a504 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 fad7 	bl	800aab0 <HAL_TIM_IC_CaptureCallback>
 800a502:	e005      	b.n	800a510 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fac9 	bl	800aa9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 fada 	bl	800aac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	f003 0301 	and.w	r3, r3, #1
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00c      	beq.n	800a53a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f003 0301 	and.w	r3, r3, #1
 800a526:	2b00      	cmp	r3, #0
 800a528:	d007      	beq.n	800a53a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f06f 0201 	mvn.w	r2, #1
 800a532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f7f7 fe75 	bl	8002224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a540:	2b00      	cmp	r3, #0
 800a542:	d104      	bne.n	800a54e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00c      	beq.n	800a568 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a554:	2b00      	cmp	r3, #0
 800a556:	d007      	beq.n	800a568 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f001 f899 	bl	800b69a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00c      	beq.n	800a58c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d007      	beq.n	800a58c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f001 f891 	bl	800b6ae <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00c      	beq.n	800a5b0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d007      	beq.n	800a5b0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a5a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fa94 	bl	800aad8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	f003 0320 	and.w	r3, r3, #32
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00c      	beq.n	800a5d4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f003 0320 	and.w	r3, r3, #32
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d007      	beq.n	800a5d4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f06f 0220 	mvn.w	r2, #32
 800a5cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f001 f859 	bl	800b686 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00c      	beq.n	800a5f8 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d007      	beq.n	800a5f8 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a5f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f001 f865 	bl	800b6c2 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00c      	beq.n	800a61c <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d007      	beq.n	800a61c <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f001 f85d 	bl	800b6d6 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00c      	beq.n	800a640 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d007      	beq.n	800a640 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f001 f855 	bl	800b6ea <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00c      	beq.n	800a664 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a650:	2b00      	cmp	r3, #0
 800a652:	d007      	beq.n	800a664 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a65c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f001 f84d 	bl	800b6fe <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a664:	bf00      	nop
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a678:	2300      	movs	r3, #0
 800a67a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a682:	2b01      	cmp	r3, #1
 800a684:	d101      	bne.n	800a68a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a686:	2302      	movs	r3, #2
 800a688:	e0ff      	b.n	800a88a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2201      	movs	r2, #1
 800a68e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2b14      	cmp	r3, #20
 800a696:	f200 80f0 	bhi.w	800a87a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a69a:	a201      	add	r2, pc, #4	@ (adr r2, 800a6a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a0:	0800a6f5 	.word	0x0800a6f5
 800a6a4:	0800a87b 	.word	0x0800a87b
 800a6a8:	0800a87b 	.word	0x0800a87b
 800a6ac:	0800a87b 	.word	0x0800a87b
 800a6b0:	0800a735 	.word	0x0800a735
 800a6b4:	0800a87b 	.word	0x0800a87b
 800a6b8:	0800a87b 	.word	0x0800a87b
 800a6bc:	0800a87b 	.word	0x0800a87b
 800a6c0:	0800a777 	.word	0x0800a777
 800a6c4:	0800a87b 	.word	0x0800a87b
 800a6c8:	0800a87b 	.word	0x0800a87b
 800a6cc:	0800a87b 	.word	0x0800a87b
 800a6d0:	0800a7b7 	.word	0x0800a7b7
 800a6d4:	0800a87b 	.word	0x0800a87b
 800a6d8:	0800a87b 	.word	0x0800a87b
 800a6dc:	0800a87b 	.word	0x0800a87b
 800a6e0:	0800a7f9 	.word	0x0800a7f9
 800a6e4:	0800a87b 	.word	0x0800a87b
 800a6e8:	0800a87b 	.word	0x0800a87b
 800a6ec:	0800a87b 	.word	0x0800a87b
 800a6f0:	0800a839 	.word	0x0800a839
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68b9      	ldr	r1, [r7, #8]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 faa0 	bl	800ac40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	699a      	ldr	r2, [r3, #24]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f042 0208 	orr.w	r2, r2, #8
 800a70e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	699a      	ldr	r2, [r3, #24]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f022 0204 	bic.w	r2, r2, #4
 800a71e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	6999      	ldr	r1, [r3, #24]
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	691a      	ldr	r2, [r3, #16]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	430a      	orrs	r2, r1
 800a730:	619a      	str	r2, [r3, #24]
      break;
 800a732:	e0a5      	b.n	800a880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	68b9      	ldr	r1, [r7, #8]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 fb1a 	bl	800ad74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	699a      	ldr	r2, [r3, #24]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a74e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	699a      	ldr	r2, [r3, #24]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a75e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	6999      	ldr	r1, [r3, #24]
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	691b      	ldr	r3, [r3, #16]
 800a76a:	021a      	lsls	r2, r3, #8
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	430a      	orrs	r2, r1
 800a772:	619a      	str	r2, [r3, #24]
      break;
 800a774:	e084      	b.n	800a880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68b9      	ldr	r1, [r7, #8]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 fb8d 	bl	800ae9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	69da      	ldr	r2, [r3, #28]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f042 0208 	orr.w	r2, r2, #8
 800a790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	69da      	ldr	r2, [r3, #28]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f022 0204 	bic.w	r2, r2, #4
 800a7a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	69d9      	ldr	r1, [r3, #28]
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	691a      	ldr	r2, [r3, #16]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	430a      	orrs	r2, r1
 800a7b2:	61da      	str	r2, [r3, #28]
      break;
 800a7b4:	e064      	b.n	800a880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	68b9      	ldr	r1, [r7, #8]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f000 fbff 	bl	800afc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	69da      	ldr	r2, [r3, #28]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a7d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	69da      	ldr	r2, [r3, #28]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a7e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	69d9      	ldr	r1, [r3, #28]
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	021a      	lsls	r2, r3, #8
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	430a      	orrs	r2, r1
 800a7f4:	61da      	str	r2, [r3, #28]
      break;
 800a7f6:	e043      	b.n	800a880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68b9      	ldr	r1, [r7, #8]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 fc72 	bl	800b0e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f042 0208 	orr.w	r2, r2, #8
 800a812:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f022 0204 	bic.w	r2, r2, #4
 800a822:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	691a      	ldr	r2, [r3, #16]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	430a      	orrs	r2, r1
 800a834:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a836:	e023      	b.n	800a880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68b9      	ldr	r1, [r7, #8]
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 fcbc 	bl	800b1bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a852:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a862:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	021a      	lsls	r2, r3, #8
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	430a      	orrs	r2, r1
 800a876:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a878:	e002      	b.n	800a880 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	75fb      	strb	r3, [r7, #23]
      break;
 800a87e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a888:	7dfb      	ldrb	r3, [r7, #23]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3718      	adds	r7, #24
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop

0800a894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d101      	bne.n	800a8b0 <HAL_TIM_ConfigClockSource+0x1c>
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	e0e6      	b.n	800aa7e <HAL_TIM_ConfigClockSource+0x1ea>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a8ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a8d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a8da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	68ba      	ldr	r2, [r7, #8]
 800a8e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a67      	ldr	r2, [pc, #412]	@ (800aa88 <HAL_TIM_ConfigClockSource+0x1f4>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	f000 80b1 	beq.w	800aa52 <HAL_TIM_ConfigClockSource+0x1be>
 800a8f0:	4a65      	ldr	r2, [pc, #404]	@ (800aa88 <HAL_TIM_ConfigClockSource+0x1f4>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	f200 80b6 	bhi.w	800aa64 <HAL_TIM_ConfigClockSource+0x1d0>
 800a8f8:	4a64      	ldr	r2, [pc, #400]	@ (800aa8c <HAL_TIM_ConfigClockSource+0x1f8>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	f000 80a9 	beq.w	800aa52 <HAL_TIM_ConfigClockSource+0x1be>
 800a900:	4a62      	ldr	r2, [pc, #392]	@ (800aa8c <HAL_TIM_ConfigClockSource+0x1f8>)
 800a902:	4293      	cmp	r3, r2
 800a904:	f200 80ae 	bhi.w	800aa64 <HAL_TIM_ConfigClockSource+0x1d0>
 800a908:	4a61      	ldr	r2, [pc, #388]	@ (800aa90 <HAL_TIM_ConfigClockSource+0x1fc>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	f000 80a1 	beq.w	800aa52 <HAL_TIM_ConfigClockSource+0x1be>
 800a910:	4a5f      	ldr	r2, [pc, #380]	@ (800aa90 <HAL_TIM_ConfigClockSource+0x1fc>)
 800a912:	4293      	cmp	r3, r2
 800a914:	f200 80a6 	bhi.w	800aa64 <HAL_TIM_ConfigClockSource+0x1d0>
 800a918:	4a5e      	ldr	r2, [pc, #376]	@ (800aa94 <HAL_TIM_ConfigClockSource+0x200>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	f000 8099 	beq.w	800aa52 <HAL_TIM_ConfigClockSource+0x1be>
 800a920:	4a5c      	ldr	r2, [pc, #368]	@ (800aa94 <HAL_TIM_ConfigClockSource+0x200>)
 800a922:	4293      	cmp	r3, r2
 800a924:	f200 809e 	bhi.w	800aa64 <HAL_TIM_ConfigClockSource+0x1d0>
 800a928:	4a5b      	ldr	r2, [pc, #364]	@ (800aa98 <HAL_TIM_ConfigClockSource+0x204>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	f000 8091 	beq.w	800aa52 <HAL_TIM_ConfigClockSource+0x1be>
 800a930:	4a59      	ldr	r2, [pc, #356]	@ (800aa98 <HAL_TIM_ConfigClockSource+0x204>)
 800a932:	4293      	cmp	r3, r2
 800a934:	f200 8096 	bhi.w	800aa64 <HAL_TIM_ConfigClockSource+0x1d0>
 800a938:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a93c:	f000 8089 	beq.w	800aa52 <HAL_TIM_ConfigClockSource+0x1be>
 800a940:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a944:	f200 808e 	bhi.w	800aa64 <HAL_TIM_ConfigClockSource+0x1d0>
 800a948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a94c:	d03e      	beq.n	800a9cc <HAL_TIM_ConfigClockSource+0x138>
 800a94e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a952:	f200 8087 	bhi.w	800aa64 <HAL_TIM_ConfigClockSource+0x1d0>
 800a956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a95a:	f000 8086 	beq.w	800aa6a <HAL_TIM_ConfigClockSource+0x1d6>
 800a95e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a962:	d87f      	bhi.n	800aa64 <HAL_TIM_ConfigClockSource+0x1d0>
 800a964:	2b70      	cmp	r3, #112	@ 0x70
 800a966:	d01a      	beq.n	800a99e <HAL_TIM_ConfigClockSource+0x10a>
 800a968:	2b70      	cmp	r3, #112	@ 0x70
 800a96a:	d87b      	bhi.n	800aa64 <HAL_TIM_ConfigClockSource+0x1d0>
 800a96c:	2b60      	cmp	r3, #96	@ 0x60
 800a96e:	d050      	beq.n	800aa12 <HAL_TIM_ConfigClockSource+0x17e>
 800a970:	2b60      	cmp	r3, #96	@ 0x60
 800a972:	d877      	bhi.n	800aa64 <HAL_TIM_ConfigClockSource+0x1d0>
 800a974:	2b50      	cmp	r3, #80	@ 0x50
 800a976:	d03c      	beq.n	800a9f2 <HAL_TIM_ConfigClockSource+0x15e>
 800a978:	2b50      	cmp	r3, #80	@ 0x50
 800a97a:	d873      	bhi.n	800aa64 <HAL_TIM_ConfigClockSource+0x1d0>
 800a97c:	2b40      	cmp	r3, #64	@ 0x40
 800a97e:	d058      	beq.n	800aa32 <HAL_TIM_ConfigClockSource+0x19e>
 800a980:	2b40      	cmp	r3, #64	@ 0x40
 800a982:	d86f      	bhi.n	800aa64 <HAL_TIM_ConfigClockSource+0x1d0>
 800a984:	2b30      	cmp	r3, #48	@ 0x30
 800a986:	d064      	beq.n	800aa52 <HAL_TIM_ConfigClockSource+0x1be>
 800a988:	2b30      	cmp	r3, #48	@ 0x30
 800a98a:	d86b      	bhi.n	800aa64 <HAL_TIM_ConfigClockSource+0x1d0>
 800a98c:	2b20      	cmp	r3, #32
 800a98e:	d060      	beq.n	800aa52 <HAL_TIM_ConfigClockSource+0x1be>
 800a990:	2b20      	cmp	r3, #32
 800a992:	d867      	bhi.n	800aa64 <HAL_TIM_ConfigClockSource+0x1d0>
 800a994:	2b00      	cmp	r3, #0
 800a996:	d05c      	beq.n	800aa52 <HAL_TIM_ConfigClockSource+0x1be>
 800a998:	2b10      	cmp	r3, #16
 800a99a:	d05a      	beq.n	800aa52 <HAL_TIM_ConfigClockSource+0x1be>
 800a99c:	e062      	b.n	800aa64 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a9ae:	f000 fced 	bl	800b38c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a9c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	609a      	str	r2, [r3, #8]
      break;
 800a9ca:	e04f      	b.n	800aa6c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a9dc:	f000 fcd6 	bl	800b38c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	689a      	ldr	r2, [r3, #8]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a9ee:	609a      	str	r2, [r3, #8]
      break;
 800a9f0:	e03c      	b.n	800aa6c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9fe:	461a      	mov	r2, r3
 800aa00:	f000 fc48 	bl	800b294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2150      	movs	r1, #80	@ 0x50
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 fca1 	bl	800b352 <TIM_ITRx_SetConfig>
      break;
 800aa10:	e02c      	b.n	800aa6c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa1e:	461a      	mov	r2, r3
 800aa20:	f000 fc67 	bl	800b2f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2160      	movs	r1, #96	@ 0x60
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 fc91 	bl	800b352 <TIM_ITRx_SetConfig>
      break;
 800aa30:	e01c      	b.n	800aa6c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa3e:	461a      	mov	r2, r3
 800aa40:	f000 fc28 	bl	800b294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2140      	movs	r1, #64	@ 0x40
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f000 fc81 	bl	800b352 <TIM_ITRx_SetConfig>
      break;
 800aa50:	e00c      	b.n	800aa6c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	f000 fc78 	bl	800b352 <TIM_ITRx_SetConfig>
      break;
 800aa62:	e003      	b.n	800aa6c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800aa64:	2301      	movs	r3, #1
 800aa66:	73fb      	strb	r3, [r7, #15]
      break;
 800aa68:	e000      	b.n	800aa6c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800aa6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aa7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	00100070 	.word	0x00100070
 800aa8c:	00100050 	.word	0x00100050
 800aa90:	00100040 	.word	0x00100040
 800aa94:	00100030 	.word	0x00100030
 800aa98:	00100020 	.word	0x00100020

0800aa9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aaa4:	bf00      	nop
 800aaa6:	370c      	adds	r7, #12
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aab8:	bf00      	nop
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aacc:	bf00      	nop
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aae0:	bf00      	nop
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a48      	ldr	r2, [pc, #288]	@ (800ac20 <TIM_Base_SetConfig+0x134>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d013      	beq.n	800ab2c <TIM_Base_SetConfig+0x40>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab0a:	d00f      	beq.n	800ab2c <TIM_Base_SetConfig+0x40>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4a45      	ldr	r2, [pc, #276]	@ (800ac24 <TIM_Base_SetConfig+0x138>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d00b      	beq.n	800ab2c <TIM_Base_SetConfig+0x40>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4a44      	ldr	r2, [pc, #272]	@ (800ac28 <TIM_Base_SetConfig+0x13c>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d007      	beq.n	800ab2c <TIM_Base_SetConfig+0x40>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a43      	ldr	r2, [pc, #268]	@ (800ac2c <TIM_Base_SetConfig+0x140>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d003      	beq.n	800ab2c <TIM_Base_SetConfig+0x40>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a42      	ldr	r2, [pc, #264]	@ (800ac30 <TIM_Base_SetConfig+0x144>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d108      	bne.n	800ab3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4a37      	ldr	r2, [pc, #220]	@ (800ac20 <TIM_Base_SetConfig+0x134>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d01f      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab4c:	d01b      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a34      	ldr	r2, [pc, #208]	@ (800ac24 <TIM_Base_SetConfig+0x138>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d017      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4a33      	ldr	r2, [pc, #204]	@ (800ac28 <TIM_Base_SetConfig+0x13c>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d013      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4a32      	ldr	r2, [pc, #200]	@ (800ac2c <TIM_Base_SetConfig+0x140>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d00f      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4a32      	ldr	r2, [pc, #200]	@ (800ac34 <TIM_Base_SetConfig+0x148>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d00b      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a31      	ldr	r2, [pc, #196]	@ (800ac38 <TIM_Base_SetConfig+0x14c>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d007      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a30      	ldr	r2, [pc, #192]	@ (800ac3c <TIM_Base_SetConfig+0x150>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d003      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a2b      	ldr	r2, [pc, #172]	@ (800ac30 <TIM_Base_SetConfig+0x144>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d108      	bne.n	800ab98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	4313      	orrs	r3, r2
 800ab96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	695b      	ldr	r3, [r3, #20]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	689a      	ldr	r2, [r3, #8]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4a18      	ldr	r2, [pc, #96]	@ (800ac20 <TIM_Base_SetConfig+0x134>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d013      	beq.n	800abec <TIM_Base_SetConfig+0x100>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a19      	ldr	r2, [pc, #100]	@ (800ac2c <TIM_Base_SetConfig+0x140>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d00f      	beq.n	800abec <TIM_Base_SetConfig+0x100>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	4a19      	ldr	r2, [pc, #100]	@ (800ac34 <TIM_Base_SetConfig+0x148>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d00b      	beq.n	800abec <TIM_Base_SetConfig+0x100>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4a18      	ldr	r2, [pc, #96]	@ (800ac38 <TIM_Base_SetConfig+0x14c>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d007      	beq.n	800abec <TIM_Base_SetConfig+0x100>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	4a17      	ldr	r2, [pc, #92]	@ (800ac3c <TIM_Base_SetConfig+0x150>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d003      	beq.n	800abec <TIM_Base_SetConfig+0x100>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4a12      	ldr	r2, [pc, #72]	@ (800ac30 <TIM_Base_SetConfig+0x144>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d103      	bne.n	800abf4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	691a      	ldr	r2, [r3, #16]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2201      	movs	r2, #1
 800abf8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	f003 0301 	and.w	r3, r3, #1
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d105      	bne.n	800ac12 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	f023 0201 	bic.w	r2, r3, #1
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	611a      	str	r2, [r3, #16]
  }
}
 800ac12:	bf00      	nop
 800ac14:	3714      	adds	r7, #20
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	40012c00 	.word	0x40012c00
 800ac24:	40000400 	.word	0x40000400
 800ac28:	40000800 	.word	0x40000800
 800ac2c:	40013400 	.word	0x40013400
 800ac30:	40015000 	.word	0x40015000
 800ac34:	40014000 	.word	0x40014000
 800ac38:	40014400 	.word	0x40014400
 800ac3c:	40014800 	.word	0x40014800

0800ac40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b087      	sub	sp, #28
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a1b      	ldr	r3, [r3, #32]
 800ac4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a1b      	ldr	r3, [r3, #32]
 800ac54:	f023 0201 	bic.w	r2, r3, #1
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	699b      	ldr	r3, [r3, #24]
 800ac66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f023 0303 	bic.w	r3, r3, #3
 800ac7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	f023 0302 	bic.w	r3, r3, #2
 800ac8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	697a      	ldr	r2, [r7, #20]
 800ac94:	4313      	orrs	r3, r2
 800ac96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4a30      	ldr	r2, [pc, #192]	@ (800ad5c <TIM_OC1_SetConfig+0x11c>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d013      	beq.n	800acc8 <TIM_OC1_SetConfig+0x88>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a2f      	ldr	r2, [pc, #188]	@ (800ad60 <TIM_OC1_SetConfig+0x120>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d00f      	beq.n	800acc8 <TIM_OC1_SetConfig+0x88>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a2e      	ldr	r2, [pc, #184]	@ (800ad64 <TIM_OC1_SetConfig+0x124>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d00b      	beq.n	800acc8 <TIM_OC1_SetConfig+0x88>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a2d      	ldr	r2, [pc, #180]	@ (800ad68 <TIM_OC1_SetConfig+0x128>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d007      	beq.n	800acc8 <TIM_OC1_SetConfig+0x88>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4a2c      	ldr	r2, [pc, #176]	@ (800ad6c <TIM_OC1_SetConfig+0x12c>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d003      	beq.n	800acc8 <TIM_OC1_SetConfig+0x88>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4a2b      	ldr	r2, [pc, #172]	@ (800ad70 <TIM_OC1_SetConfig+0x130>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d10c      	bne.n	800ace2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	f023 0308 	bic.w	r3, r3, #8
 800acce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	697a      	ldr	r2, [r7, #20]
 800acd6:	4313      	orrs	r3, r2
 800acd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	f023 0304 	bic.w	r3, r3, #4
 800ace0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4a1d      	ldr	r2, [pc, #116]	@ (800ad5c <TIM_OC1_SetConfig+0x11c>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d013      	beq.n	800ad12 <TIM_OC1_SetConfig+0xd2>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a1c      	ldr	r2, [pc, #112]	@ (800ad60 <TIM_OC1_SetConfig+0x120>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d00f      	beq.n	800ad12 <TIM_OC1_SetConfig+0xd2>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a1b      	ldr	r2, [pc, #108]	@ (800ad64 <TIM_OC1_SetConfig+0x124>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d00b      	beq.n	800ad12 <TIM_OC1_SetConfig+0xd2>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a1a      	ldr	r2, [pc, #104]	@ (800ad68 <TIM_OC1_SetConfig+0x128>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d007      	beq.n	800ad12 <TIM_OC1_SetConfig+0xd2>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4a19      	ldr	r2, [pc, #100]	@ (800ad6c <TIM_OC1_SetConfig+0x12c>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d003      	beq.n	800ad12 <TIM_OC1_SetConfig+0xd2>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4a18      	ldr	r2, [pc, #96]	@ (800ad70 <TIM_OC1_SetConfig+0x130>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d111      	bne.n	800ad36 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ad20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	695b      	ldr	r3, [r3, #20]
 800ad26:	693a      	ldr	r2, [r7, #16]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	699b      	ldr	r3, [r3, #24]
 800ad30:	693a      	ldr	r2, [r7, #16]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	693a      	ldr	r2, [r7, #16]
 800ad3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	68fa      	ldr	r2, [r7, #12]
 800ad40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	685a      	ldr	r2, [r3, #4]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	697a      	ldr	r2, [r7, #20]
 800ad4e:	621a      	str	r2, [r3, #32]
}
 800ad50:	bf00      	nop
 800ad52:	371c      	adds	r7, #28
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr
 800ad5c:	40012c00 	.word	0x40012c00
 800ad60:	40013400 	.word	0x40013400
 800ad64:	40014000 	.word	0x40014000
 800ad68:	40014400 	.word	0x40014400
 800ad6c:	40014800 	.word	0x40014800
 800ad70:	40015000 	.word	0x40015000

0800ad74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b087      	sub	sp, #28
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a1b      	ldr	r3, [r3, #32]
 800ad82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a1b      	ldr	r3, [r3, #32]
 800ad88:	f023 0210 	bic.w	r2, r3, #16
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	699b      	ldr	r3, [r3, #24]
 800ad9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ada2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ada6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800adae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	021b      	lsls	r3, r3, #8
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	4313      	orrs	r3, r2
 800adba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	f023 0320 	bic.w	r3, r3, #32
 800adc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	011b      	lsls	r3, r3, #4
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	4313      	orrs	r3, r2
 800adce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4a2c      	ldr	r2, [pc, #176]	@ (800ae84 <TIM_OC2_SetConfig+0x110>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d007      	beq.n	800ade8 <TIM_OC2_SetConfig+0x74>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4a2b      	ldr	r2, [pc, #172]	@ (800ae88 <TIM_OC2_SetConfig+0x114>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d003      	beq.n	800ade8 <TIM_OC2_SetConfig+0x74>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a2a      	ldr	r2, [pc, #168]	@ (800ae8c <TIM_OC2_SetConfig+0x118>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d10d      	bne.n	800ae04 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	011b      	lsls	r3, r3, #4
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	4313      	orrs	r3, r2
 800adfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a1f      	ldr	r2, [pc, #124]	@ (800ae84 <TIM_OC2_SetConfig+0x110>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d013      	beq.n	800ae34 <TIM_OC2_SetConfig+0xc0>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a1e      	ldr	r2, [pc, #120]	@ (800ae88 <TIM_OC2_SetConfig+0x114>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d00f      	beq.n	800ae34 <TIM_OC2_SetConfig+0xc0>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4a1e      	ldr	r2, [pc, #120]	@ (800ae90 <TIM_OC2_SetConfig+0x11c>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d00b      	beq.n	800ae34 <TIM_OC2_SetConfig+0xc0>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	4a1d      	ldr	r2, [pc, #116]	@ (800ae94 <TIM_OC2_SetConfig+0x120>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d007      	beq.n	800ae34 <TIM_OC2_SetConfig+0xc0>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a1c      	ldr	r2, [pc, #112]	@ (800ae98 <TIM_OC2_SetConfig+0x124>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d003      	beq.n	800ae34 <TIM_OC2_SetConfig+0xc0>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	4a17      	ldr	r2, [pc, #92]	@ (800ae8c <TIM_OC2_SetConfig+0x118>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d113      	bne.n	800ae5c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ae3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ae42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	695b      	ldr	r3, [r3, #20]
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	693a      	ldr	r2, [r7, #16]
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	699b      	ldr	r3, [r3, #24]
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	693a      	ldr	r2, [r7, #16]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	693a      	ldr	r2, [r7, #16]
 800ae60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	685a      	ldr	r2, [r3, #4]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	697a      	ldr	r2, [r7, #20]
 800ae74:	621a      	str	r2, [r3, #32]
}
 800ae76:	bf00      	nop
 800ae78:	371c      	adds	r7, #28
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	40012c00 	.word	0x40012c00
 800ae88:	40013400 	.word	0x40013400
 800ae8c:	40015000 	.word	0x40015000
 800ae90:	40014000 	.word	0x40014000
 800ae94:	40014400 	.word	0x40014400
 800ae98:	40014800 	.word	0x40014800

0800ae9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b087      	sub	sp, #28
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a1b      	ldr	r3, [r3, #32]
 800aeaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a1b      	ldr	r3, [r3, #32]
 800aeb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	69db      	ldr	r3, [r3, #28]
 800aec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aeca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f023 0303 	bic.w	r3, r3, #3
 800aed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	4313      	orrs	r3, r2
 800aee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	021b      	lsls	r3, r3, #8
 800aef0:	697a      	ldr	r2, [r7, #20]
 800aef2:	4313      	orrs	r3, r2
 800aef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4a2b      	ldr	r2, [pc, #172]	@ (800afa8 <TIM_OC3_SetConfig+0x10c>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d007      	beq.n	800af0e <TIM_OC3_SetConfig+0x72>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a2a      	ldr	r2, [pc, #168]	@ (800afac <TIM_OC3_SetConfig+0x110>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d003      	beq.n	800af0e <TIM_OC3_SetConfig+0x72>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4a29      	ldr	r2, [pc, #164]	@ (800afb0 <TIM_OC3_SetConfig+0x114>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d10d      	bne.n	800af2a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800af14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	68db      	ldr	r3, [r3, #12]
 800af1a:	021b      	lsls	r3, r3, #8
 800af1c:	697a      	ldr	r2, [r7, #20]
 800af1e:	4313      	orrs	r3, r2
 800af20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800af28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4a1e      	ldr	r2, [pc, #120]	@ (800afa8 <TIM_OC3_SetConfig+0x10c>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d013      	beq.n	800af5a <TIM_OC3_SetConfig+0xbe>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	4a1d      	ldr	r2, [pc, #116]	@ (800afac <TIM_OC3_SetConfig+0x110>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d00f      	beq.n	800af5a <TIM_OC3_SetConfig+0xbe>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	4a1d      	ldr	r2, [pc, #116]	@ (800afb4 <TIM_OC3_SetConfig+0x118>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d00b      	beq.n	800af5a <TIM_OC3_SetConfig+0xbe>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	4a1c      	ldr	r2, [pc, #112]	@ (800afb8 <TIM_OC3_SetConfig+0x11c>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d007      	beq.n	800af5a <TIM_OC3_SetConfig+0xbe>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	4a1b      	ldr	r2, [pc, #108]	@ (800afbc <TIM_OC3_SetConfig+0x120>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d003      	beq.n	800af5a <TIM_OC3_SetConfig+0xbe>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4a16      	ldr	r2, [pc, #88]	@ (800afb0 <TIM_OC3_SetConfig+0x114>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d113      	bne.n	800af82 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800af68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	695b      	ldr	r3, [r3, #20]
 800af6e:	011b      	lsls	r3, r3, #4
 800af70:	693a      	ldr	r2, [r7, #16]
 800af72:	4313      	orrs	r3, r2
 800af74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	699b      	ldr	r3, [r3, #24]
 800af7a:	011b      	lsls	r3, r3, #4
 800af7c:	693a      	ldr	r2, [r7, #16]
 800af7e:	4313      	orrs	r3, r2
 800af80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	693a      	ldr	r2, [r7, #16]
 800af86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	685a      	ldr	r2, [r3, #4]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	621a      	str	r2, [r3, #32]
}
 800af9c:	bf00      	nop
 800af9e:	371c      	adds	r7, #28
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr
 800afa8:	40012c00 	.word	0x40012c00
 800afac:	40013400 	.word	0x40013400
 800afb0:	40015000 	.word	0x40015000
 800afb4:	40014000 	.word	0x40014000
 800afb8:	40014400 	.word	0x40014400
 800afbc:	40014800 	.word	0x40014800

0800afc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b087      	sub	sp, #28
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a1b      	ldr	r3, [r3, #32]
 800afce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a1b      	ldr	r3, [r3, #32]
 800afd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	69db      	ldr	r3, [r3, #28]
 800afe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800afee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800affa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	021b      	lsls	r3, r3, #8
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	4313      	orrs	r3, r2
 800b006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b00e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	031b      	lsls	r3, r3, #12
 800b016:	697a      	ldr	r2, [r7, #20]
 800b018:	4313      	orrs	r3, r2
 800b01a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4a2c      	ldr	r2, [pc, #176]	@ (800b0d0 <TIM_OC4_SetConfig+0x110>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d007      	beq.n	800b034 <TIM_OC4_SetConfig+0x74>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a2b      	ldr	r2, [pc, #172]	@ (800b0d4 <TIM_OC4_SetConfig+0x114>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d003      	beq.n	800b034 <TIM_OC4_SetConfig+0x74>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a2a      	ldr	r2, [pc, #168]	@ (800b0d8 <TIM_OC4_SetConfig+0x118>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d10d      	bne.n	800b050 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b03a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	031b      	lsls	r3, r3, #12
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	4313      	orrs	r3, r2
 800b046:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b04e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a1f      	ldr	r2, [pc, #124]	@ (800b0d0 <TIM_OC4_SetConfig+0x110>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d013      	beq.n	800b080 <TIM_OC4_SetConfig+0xc0>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a1e      	ldr	r2, [pc, #120]	@ (800b0d4 <TIM_OC4_SetConfig+0x114>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d00f      	beq.n	800b080 <TIM_OC4_SetConfig+0xc0>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4a1e      	ldr	r2, [pc, #120]	@ (800b0dc <TIM_OC4_SetConfig+0x11c>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d00b      	beq.n	800b080 <TIM_OC4_SetConfig+0xc0>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	4a1d      	ldr	r2, [pc, #116]	@ (800b0e0 <TIM_OC4_SetConfig+0x120>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d007      	beq.n	800b080 <TIM_OC4_SetConfig+0xc0>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	4a1c      	ldr	r2, [pc, #112]	@ (800b0e4 <TIM_OC4_SetConfig+0x124>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d003      	beq.n	800b080 <TIM_OC4_SetConfig+0xc0>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4a17      	ldr	r2, [pc, #92]	@ (800b0d8 <TIM_OC4_SetConfig+0x118>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d113      	bne.n	800b0a8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b086:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b08e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	695b      	ldr	r3, [r3, #20]
 800b094:	019b      	lsls	r3, r3, #6
 800b096:	693a      	ldr	r2, [r7, #16]
 800b098:	4313      	orrs	r3, r2
 800b09a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	699b      	ldr	r3, [r3, #24]
 800b0a0:	019b      	lsls	r3, r3, #6
 800b0a2:	693a      	ldr	r2, [r7, #16]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	693a      	ldr	r2, [r7, #16]
 800b0ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	685a      	ldr	r2, [r3, #4]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	697a      	ldr	r2, [r7, #20]
 800b0c0:	621a      	str	r2, [r3, #32]
}
 800b0c2:	bf00      	nop
 800b0c4:	371c      	adds	r7, #28
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	40012c00 	.word	0x40012c00
 800b0d4:	40013400 	.word	0x40013400
 800b0d8:	40015000 	.word	0x40015000
 800b0dc:	40014000 	.word	0x40014000
 800b0e0:	40014400 	.word	0x40014400
 800b0e4:	40014800 	.word	0x40014800

0800b0e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b087      	sub	sp, #28
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a1b      	ldr	r3, [r3, #32]
 800b0f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6a1b      	ldr	r3, [r3, #32]
 800b0fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b10e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b11a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	4313      	orrs	r3, r2
 800b124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b12c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	041b      	lsls	r3, r3, #16
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	4313      	orrs	r3, r2
 800b138:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a19      	ldr	r2, [pc, #100]	@ (800b1a4 <TIM_OC5_SetConfig+0xbc>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d013      	beq.n	800b16a <TIM_OC5_SetConfig+0x82>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a18      	ldr	r2, [pc, #96]	@ (800b1a8 <TIM_OC5_SetConfig+0xc0>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d00f      	beq.n	800b16a <TIM_OC5_SetConfig+0x82>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4a17      	ldr	r2, [pc, #92]	@ (800b1ac <TIM_OC5_SetConfig+0xc4>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d00b      	beq.n	800b16a <TIM_OC5_SetConfig+0x82>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4a16      	ldr	r2, [pc, #88]	@ (800b1b0 <TIM_OC5_SetConfig+0xc8>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d007      	beq.n	800b16a <TIM_OC5_SetConfig+0x82>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4a15      	ldr	r2, [pc, #84]	@ (800b1b4 <TIM_OC5_SetConfig+0xcc>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d003      	beq.n	800b16a <TIM_OC5_SetConfig+0x82>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4a14      	ldr	r2, [pc, #80]	@ (800b1b8 <TIM_OC5_SetConfig+0xd0>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d109      	bne.n	800b17e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b170:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	695b      	ldr	r3, [r3, #20]
 800b176:	021b      	lsls	r3, r3, #8
 800b178:	697a      	ldr	r2, [r7, #20]
 800b17a:	4313      	orrs	r3, r2
 800b17c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	697a      	ldr	r2, [r7, #20]
 800b182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	68fa      	ldr	r2, [r7, #12]
 800b188:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	685a      	ldr	r2, [r3, #4]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	693a      	ldr	r2, [r7, #16]
 800b196:	621a      	str	r2, [r3, #32]
}
 800b198:	bf00      	nop
 800b19a:	371c      	adds	r7, #28
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr
 800b1a4:	40012c00 	.word	0x40012c00
 800b1a8:	40013400 	.word	0x40013400
 800b1ac:	40014000 	.word	0x40014000
 800b1b0:	40014400 	.word	0x40014400
 800b1b4:	40014800 	.word	0x40014800
 800b1b8:	40015000 	.word	0x40015000

0800b1bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b087      	sub	sp, #28
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6a1b      	ldr	r3, [r3, #32]
 800b1ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6a1b      	ldr	r3, [r3, #32]
 800b1d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b1ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	021b      	lsls	r3, r3, #8
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	051b      	lsls	r3, r3, #20
 800b20a:	693a      	ldr	r2, [r7, #16]
 800b20c:	4313      	orrs	r3, r2
 800b20e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	4a1a      	ldr	r2, [pc, #104]	@ (800b27c <TIM_OC6_SetConfig+0xc0>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d013      	beq.n	800b240 <TIM_OC6_SetConfig+0x84>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	4a19      	ldr	r2, [pc, #100]	@ (800b280 <TIM_OC6_SetConfig+0xc4>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d00f      	beq.n	800b240 <TIM_OC6_SetConfig+0x84>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	4a18      	ldr	r2, [pc, #96]	@ (800b284 <TIM_OC6_SetConfig+0xc8>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d00b      	beq.n	800b240 <TIM_OC6_SetConfig+0x84>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4a17      	ldr	r2, [pc, #92]	@ (800b288 <TIM_OC6_SetConfig+0xcc>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d007      	beq.n	800b240 <TIM_OC6_SetConfig+0x84>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	4a16      	ldr	r2, [pc, #88]	@ (800b28c <TIM_OC6_SetConfig+0xd0>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d003      	beq.n	800b240 <TIM_OC6_SetConfig+0x84>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4a15      	ldr	r2, [pc, #84]	@ (800b290 <TIM_OC6_SetConfig+0xd4>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d109      	bne.n	800b254 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b246:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	695b      	ldr	r3, [r3, #20]
 800b24c:	029b      	lsls	r3, r3, #10
 800b24e:	697a      	ldr	r2, [r7, #20]
 800b250:	4313      	orrs	r3, r2
 800b252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	697a      	ldr	r2, [r7, #20]
 800b258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	685a      	ldr	r2, [r3, #4]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	693a      	ldr	r2, [r7, #16]
 800b26c:	621a      	str	r2, [r3, #32]
}
 800b26e:	bf00      	nop
 800b270:	371c      	adds	r7, #28
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr
 800b27a:	bf00      	nop
 800b27c:	40012c00 	.word	0x40012c00
 800b280:	40013400 	.word	0x40013400
 800b284:	40014000 	.word	0x40014000
 800b288:	40014400 	.word	0x40014400
 800b28c:	40014800 	.word	0x40014800
 800b290:	40015000 	.word	0x40015000

0800b294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b294:	b480      	push	{r7}
 800b296:	b087      	sub	sp, #28
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6a1b      	ldr	r3, [r3, #32]
 800b2a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	6a1b      	ldr	r3, [r3, #32]
 800b2aa:	f023 0201 	bic.w	r2, r3, #1
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	699b      	ldr	r3, [r3, #24]
 800b2b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b2be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	011b      	lsls	r3, r3, #4
 800b2c4:	693a      	ldr	r2, [r7, #16]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	f023 030a 	bic.w	r3, r3, #10
 800b2d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2d2:	697a      	ldr	r2, [r7, #20]
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	693a      	ldr	r2, [r7, #16]
 800b2de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	697a      	ldr	r2, [r7, #20]
 800b2e4:	621a      	str	r2, [r3, #32]
}
 800b2e6:	bf00      	nop
 800b2e8:	371c      	adds	r7, #28
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2f2:	b480      	push	{r7}
 800b2f4:	b087      	sub	sp, #28
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	60f8      	str	r0, [r7, #12]
 800b2fa:	60b9      	str	r1, [r7, #8]
 800b2fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	6a1b      	ldr	r3, [r3, #32]
 800b302:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6a1b      	ldr	r3, [r3, #32]
 800b308:	f023 0210 	bic.w	r2, r3, #16
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	699b      	ldr	r3, [r3, #24]
 800b314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b31c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	031b      	lsls	r3, r3, #12
 800b322:	693a      	ldr	r2, [r7, #16]
 800b324:	4313      	orrs	r3, r2
 800b326:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b32e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	011b      	lsls	r3, r3, #4
 800b334:	697a      	ldr	r2, [r7, #20]
 800b336:	4313      	orrs	r3, r2
 800b338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	693a      	ldr	r2, [r7, #16]
 800b33e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	697a      	ldr	r2, [r7, #20]
 800b344:	621a      	str	r2, [r3, #32]
}
 800b346:	bf00      	nop
 800b348:	371c      	adds	r7, #28
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr

0800b352 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b352:	b480      	push	{r7}
 800b354:	b085      	sub	sp, #20
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
 800b35a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b368:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b36c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b36e:	683a      	ldr	r2, [r7, #0]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	4313      	orrs	r3, r2
 800b374:	f043 0307 	orr.w	r3, r3, #7
 800b378:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	609a      	str	r2, [r3, #8]
}
 800b380:	bf00      	nop
 800b382:	3714      	adds	r7, #20
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b087      	sub	sp, #28
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
 800b398:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b3a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	021a      	lsls	r2, r3, #8
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	431a      	orrs	r2, r3
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	697a      	ldr	r2, [r7, #20]
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	697a      	ldr	r2, [r7, #20]
 800b3be:	609a      	str	r2, [r3, #8]
}
 800b3c0:	bf00      	nop
 800b3c2:	371c      	adds	r7, #28
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b085      	sub	sp, #20
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d101      	bne.n	800b3e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3e0:	2302      	movs	r3, #2
 800b3e2:	e06f      	b.n	800b4c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2202      	movs	r2, #2
 800b3f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a31      	ldr	r2, [pc, #196]	@ (800b4d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d009      	beq.n	800b422 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a30      	ldr	r2, [pc, #192]	@ (800b4d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d004      	beq.n	800b422 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a2e      	ldr	r2, [pc, #184]	@ (800b4d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d108      	bne.n	800b434 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b428:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	4313      	orrs	r3, r2
 800b432:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b43a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b43e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	68fa      	ldr	r2, [r7, #12]
 800b446:	4313      	orrs	r3, r2
 800b448:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	68fa      	ldr	r2, [r7, #12]
 800b450:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a1e      	ldr	r2, [pc, #120]	@ (800b4d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d01d      	beq.n	800b498 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b464:	d018      	beq.n	800b498 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a1c      	ldr	r2, [pc, #112]	@ (800b4dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d013      	beq.n	800b498 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a1a      	ldr	r2, [pc, #104]	@ (800b4e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d00e      	beq.n	800b498 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a15      	ldr	r2, [pc, #84]	@ (800b4d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d009      	beq.n	800b498 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a16      	ldr	r2, [pc, #88]	@ (800b4e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d004      	beq.n	800b498 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a11      	ldr	r2, [pc, #68]	@ (800b4d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d10c      	bne.n	800b4b2 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b49e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	689b      	ldr	r3, [r3, #8]
 800b4a4:	68ba      	ldr	r2, [r7, #8]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	68ba      	ldr	r2, [r7, #8]
 800b4b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b4c2:	2300      	movs	r3, #0
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3714      	adds	r7, #20
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	40012c00 	.word	0x40012c00
 800b4d4:	40013400 	.word	0x40013400
 800b4d8:	40015000 	.word	0x40015000
 800b4dc:	40000400 	.word	0x40000400
 800b4e0:	40000800 	.word	0x40000800
 800b4e4:	40014000 	.word	0x40014000

0800b4e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d101      	bne.n	800b504 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b500:	2302      	movs	r3, #2
 800b502:	e078      	b.n	800b5f6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	4313      	orrs	r3, r2
 800b518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	4313      	orrs	r3, r2
 800b526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	4313      	orrs	r3, r2
 800b534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4313      	orrs	r3, r2
 800b542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	4313      	orrs	r3, r2
 800b550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	695b      	ldr	r3, [r3, #20]
 800b55c:	4313      	orrs	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b56a:	4313      	orrs	r3, r2
 800b56c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	041b      	lsls	r3, r3, #16
 800b57a:	4313      	orrs	r3, r2
 800b57c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	69db      	ldr	r3, [r3, #28]
 800b588:	4313      	orrs	r3, r2
 800b58a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a1c      	ldr	r2, [pc, #112]	@ (800b604 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d009      	beq.n	800b5aa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a1b      	ldr	r2, [pc, #108]	@ (800b608 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d004      	beq.n	800b5aa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a19      	ldr	r2, [pc, #100]	@ (800b60c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d11c      	bne.n	800b5e4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5b4:	051b      	lsls	r3, r3, #20
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	6a1b      	ldr	r3, [r3, #32]
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3714      	adds	r7, #20
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
 800b602:	bf00      	nop
 800b604:	40012c00 	.word	0x40012c00
 800b608:	40013400 	.word	0x40013400
 800b60c:	40015000 	.word	0x40015000

0800b610 <HAL_TIMEx_ConfigEncoderIndex>:
  * @param  sEncoderIndexConfig Encoder index configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigEncoderIndex(TIM_HandleTypeDef *htim,
                                               TIMEx_EncoderIndexConfigTypeDef *sEncoderIndexConfig)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  assert_param(IS_FUNCTIONAL_STATE(sEncoderIndexConfig->FirstIndexEnable));
  assert_param(IS_TIM_ENCODERINDEX_POSITION(sEncoderIndexConfig->Position));
  assert_param(IS_TIM_ENCODERINDEX_DIRECTION(sEncoderIndexConfig->Direction));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b620:	2b01      	cmp	r3, #1
 800b622:	d101      	bne.n	800b628 <HAL_TIMEx_ConfigEncoderIndex+0x18>
 800b624:	2302      	movs	r3, #2
 800b626:	e02a      	b.n	800b67e <HAL_TIMEx_ConfigEncoderIndex+0x6e>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2201      	movs	r2, #1
 800b62c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Configures the TIMx External Trigger (ETR) which is used as Index input */
  TIM_ETR_SetConfig(htim->Instance,
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6818      	ldr	r0, [r3, #0]
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	6859      	ldr	r1, [r3, #4]
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	f7ff fea4 	bl	800b38c <TIM_ETR_SetConfig>
                    sEncoderIndexConfig->Prescaler,
                    sEncoderIndexConfig->Polarity,
                    sEncoderIndexConfig->Filter);

  /* Configures the encoder index */
  MODIFY_REG(htim->Instance->ECR,
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b64a:	f023 02e6 	bic.w	r2, r3, #230	@ 0xe6
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	695b      	ldr	r3, [r3, #20]
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	7b09      	ldrb	r1, [r1, #12]
 800b656:	2901      	cmp	r1, #1
 800b658:	d101      	bne.n	800b65e <HAL_TIMEx_ConfigEncoderIndex+0x4e>
 800b65a:	2120      	movs	r1, #32
 800b65c:	e000      	b.n	800b660 <HAL_TIMEx_ConfigEncoderIndex+0x50>
 800b65e:	2100      	movs	r1, #0
 800b660:	4319      	orrs	r1, r3
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	691b      	ldr	r3, [r3, #16]
 800b666:	430b      	orrs	r3, r1
 800b668:	431a      	orrs	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f042 0201 	orr.w	r2, r2, #1
 800b672:	659a      	str	r2, [r3, #88]	@ 0x58
             (sEncoderIndexConfig->Direction |
              ((sEncoderIndexConfig->FirstIndexEnable == ENABLE) ? (0x1U << TIM_ECR_FIDX_Pos) : 0U) |
              sEncoderIndexConfig->Position |
              TIM_ECR_IE));

  __HAL_UNLOCK(htim);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b67c:	2300      	movs	r3, #0
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b686:	b480      	push	{r7}
 800b688:	b083      	sub	sp, #12
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b68e:	bf00      	nop
 800b690:	370c      	adds	r7, #12
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr

0800b69a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b69a:	b480      	push	{r7}
 800b69c:	b083      	sub	sp, #12
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b6a2:	bf00      	nop
 800b6a4:	370c      	adds	r7, #12
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr

0800b6ae <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b6ae:	b480      	push	{r7}
 800b6b0:	b083      	sub	sp, #12
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b6b6:	bf00      	nop
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr

0800b6c2 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b6c2:	b480      	push	{r7}
 800b6c4:	b083      	sub	sp, #12
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b6ca:	bf00      	nop
 800b6cc:	370c      	adds	r7, #12
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr

0800b6d6 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b6d6:	b480      	push	{r7}
 800b6d8:	b083      	sub	sp, #12
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b6de:	bf00      	nop
 800b6e0:	370c      	adds	r7, #12
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr

0800b6ea <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b6ea:	b480      	push	{r7}
 800b6ec:	b083      	sub	sp, #12
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b6f2:	bf00      	nop
 800b6f4:	370c      	adds	r7, #12
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr

0800b6fe <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b6fe:	b480      	push	{r7}
 800b700:	b083      	sub	sp, #12
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b706:	bf00      	nop
 800b708:	370c      	adds	r7, #12
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr

0800b712 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b712:	b580      	push	{r7, lr}
 800b714:	b082      	sub	sp, #8
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d101      	bne.n	800b724 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b720:	2301      	movs	r3, #1
 800b722:	e042      	b.n	800b7aa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d106      	bne.n	800b73c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f7f7 f8fe 	bl	8002938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2224      	movs	r2, #36	@ 0x24
 800b740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f022 0201 	bic.w	r2, r2, #1
 800b752:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d002      	beq.n	800b762 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 ff15 	bl	800c58c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 fc16 	bl	800bf94 <UART_SetConfig>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d101      	bne.n	800b772 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b76e:	2301      	movs	r3, #1
 800b770:	e01b      	b.n	800b7aa <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	685a      	ldr	r2, [r3, #4]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b780:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	689a      	ldr	r2, [r3, #8]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b790:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f042 0201 	orr.w	r2, r2, #1
 800b7a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 ff94 	bl	800c6d0 <UART_CheckIdleState>
 800b7a8:	4603      	mov	r3, r0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3708      	adds	r7, #8
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b08a      	sub	sp, #40	@ 0x28
 800b7b6:	af02      	add	r7, sp, #8
 800b7b8:	60f8      	str	r0, [r7, #12]
 800b7ba:	60b9      	str	r1, [r7, #8]
 800b7bc:	603b      	str	r3, [r7, #0]
 800b7be:	4613      	mov	r3, r2
 800b7c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7c8:	2b20      	cmp	r3, #32
 800b7ca:	d17b      	bne.n	800b8c4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d002      	beq.n	800b7d8 <HAL_UART_Transmit+0x26>
 800b7d2:	88fb      	ldrh	r3, [r7, #6]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d101      	bne.n	800b7dc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	e074      	b.n	800b8c6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2221      	movs	r2, #33	@ 0x21
 800b7e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b7ec:	f7f8 fbc4 	bl	8003f78 <HAL_GetTick>
 800b7f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	88fa      	ldrh	r2, [r7, #6]
 800b7f6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	88fa      	ldrh	r2, [r7, #6]
 800b7fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b80a:	d108      	bne.n	800b81e <HAL_UART_Transmit+0x6c>
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d104      	bne.n	800b81e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b814:	2300      	movs	r3, #0
 800b816:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	61bb      	str	r3, [r7, #24]
 800b81c:	e003      	b.n	800b826 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b822:	2300      	movs	r3, #0
 800b824:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b826:	e030      	b.n	800b88a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	9300      	str	r3, [sp, #0]
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	2200      	movs	r2, #0
 800b830:	2180      	movs	r1, #128	@ 0x80
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f000 fff6 	bl	800c824 <UART_WaitOnFlagUntilTimeout>
 800b838:	4603      	mov	r3, r0
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d005      	beq.n	800b84a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2220      	movs	r2, #32
 800b842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b846:	2303      	movs	r3, #3
 800b848:	e03d      	b.n	800b8c6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b84a:	69fb      	ldr	r3, [r7, #28]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10b      	bne.n	800b868 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b850:	69bb      	ldr	r3, [r7, #24]
 800b852:	881b      	ldrh	r3, [r3, #0]
 800b854:	461a      	mov	r2, r3
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b85e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	3302      	adds	r3, #2
 800b864:	61bb      	str	r3, [r7, #24]
 800b866:	e007      	b.n	800b878 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	781a      	ldrb	r2, [r3, #0]
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	3301      	adds	r3, #1
 800b876:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b87e:	b29b      	uxth	r3, r3
 800b880:	3b01      	subs	r3, #1
 800b882:	b29a      	uxth	r2, r3
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b890:	b29b      	uxth	r3, r3
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1c8      	bne.n	800b828 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	9300      	str	r3, [sp, #0]
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	2200      	movs	r2, #0
 800b89e:	2140      	movs	r1, #64	@ 0x40
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	f000 ffbf 	bl	800c824 <UART_WaitOnFlagUntilTimeout>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d005      	beq.n	800b8b8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2220      	movs	r2, #32
 800b8b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	e006      	b.n	800b8c6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2220      	movs	r2, #32
 800b8bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	e000      	b.n	800b8c6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b8c4:	2302      	movs	r3, #2
  }
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3720      	adds	r7, #32
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
	...

0800b8d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b0ba      	sub	sp, #232	@ 0xe8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	69db      	ldr	r3, [r3, #28]
 800b8de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	689b      	ldr	r3, [r3, #8]
 800b8f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b8f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b8fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b8fe:	4013      	ands	r3, r2
 800b900:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b904:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d11b      	bne.n	800b944 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b90c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b910:	f003 0320 	and.w	r3, r3, #32
 800b914:	2b00      	cmp	r3, #0
 800b916:	d015      	beq.n	800b944 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b91c:	f003 0320 	and.w	r3, r3, #32
 800b920:	2b00      	cmp	r3, #0
 800b922:	d105      	bne.n	800b930 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d009      	beq.n	800b944 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b934:	2b00      	cmp	r3, #0
 800b936:	f000 8300 	beq.w	800bf3a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	4798      	blx	r3
      }
      return;
 800b942:	e2fa      	b.n	800bf3a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b944:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f000 8123 	beq.w	800bb94 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b94e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b952:	4b8d      	ldr	r3, [pc, #564]	@ (800bb88 <HAL_UART_IRQHandler+0x2b8>)
 800b954:	4013      	ands	r3, r2
 800b956:	2b00      	cmp	r3, #0
 800b958:	d106      	bne.n	800b968 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b95a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b95e:	4b8b      	ldr	r3, [pc, #556]	@ (800bb8c <HAL_UART_IRQHandler+0x2bc>)
 800b960:	4013      	ands	r3, r2
 800b962:	2b00      	cmp	r3, #0
 800b964:	f000 8116 	beq.w	800bb94 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b96c:	f003 0301 	and.w	r3, r3, #1
 800b970:	2b00      	cmp	r3, #0
 800b972:	d011      	beq.n	800b998 <HAL_UART_IRQHandler+0xc8>
 800b974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00b      	beq.n	800b998 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2201      	movs	r2, #1
 800b986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b98e:	f043 0201 	orr.w	r2, r3, #1
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b99c:	f003 0302 	and.w	r3, r3, #2
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d011      	beq.n	800b9c8 <HAL_UART_IRQHandler+0xf8>
 800b9a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b9a8:	f003 0301 	and.w	r3, r3, #1
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00b      	beq.n	800b9c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2202      	movs	r2, #2
 800b9b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9be:	f043 0204 	orr.w	r2, r3, #4
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9cc:	f003 0304 	and.w	r3, r3, #4
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d011      	beq.n	800b9f8 <HAL_UART_IRQHandler+0x128>
 800b9d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b9d8:	f003 0301 	and.w	r3, r3, #1
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00b      	beq.n	800b9f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2204      	movs	r2, #4
 800b9e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9ee:	f043 0202 	orr.w	r2, r3, #2
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b9f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9fc:	f003 0308 	and.w	r3, r3, #8
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d017      	beq.n	800ba34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ba04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba08:	f003 0320 	and.w	r3, r3, #32
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d105      	bne.n	800ba1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ba10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ba14:	4b5c      	ldr	r3, [pc, #368]	@ (800bb88 <HAL_UART_IRQHandler+0x2b8>)
 800ba16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00b      	beq.n	800ba34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	2208      	movs	r2, #8
 800ba22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba2a:	f043 0208 	orr.w	r2, r3, #8
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ba34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d012      	beq.n	800ba66 <HAL_UART_IRQHandler+0x196>
 800ba40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00c      	beq.n	800ba66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ba54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba5c:	f043 0220 	orr.w	r2, r3, #32
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f000 8266 	beq.w	800bf3e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ba72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba76:	f003 0320 	and.w	r3, r3, #32
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d013      	beq.n	800baa6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ba7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba82:	f003 0320 	and.w	r3, r3, #32
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d105      	bne.n	800ba96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ba8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d007      	beq.n	800baa6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d003      	beq.n	800baa6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800baac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baba:	2b40      	cmp	r3, #64	@ 0x40
 800babc:	d005      	beq.n	800baca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800babe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bac2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d054      	beq.n	800bb74 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 ff17 	bl	800c8fe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bada:	2b40      	cmp	r3, #64	@ 0x40
 800badc:	d146      	bne.n	800bb6c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	3308      	adds	r3, #8
 800bae4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800baec:	e853 3f00 	ldrex	r3, [r3]
 800baf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800baf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800baf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bafc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	3308      	adds	r3, #8
 800bb06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bb0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bb0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bb16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bb1a:	e841 2300 	strex	r3, r2, [r1]
 800bb1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bb22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1d9      	bne.n	800bade <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d017      	beq.n	800bb64 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb3a:	4a15      	ldr	r2, [pc, #84]	@ (800bb90 <HAL_UART_IRQHandler+0x2c0>)
 800bb3c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7f9 fd3a 	bl	80055be <HAL_DMA_Abort_IT>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d019      	beq.n	800bb84 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800bb5e:	4610      	mov	r0, r2
 800bb60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb62:	e00f      	b.n	800bb84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 f9ff 	bl	800bf68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb6a:	e00b      	b.n	800bb84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 f9fb 	bl	800bf68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb72:	e007      	b.n	800bb84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 f9f7 	bl	800bf68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800bb82:	e1dc      	b.n	800bf3e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb84:	bf00      	nop
    return;
 800bb86:	e1da      	b.n	800bf3e <HAL_UART_IRQHandler+0x66e>
 800bb88:	10000001 	.word	0x10000001
 800bb8c:	04000120 	.word	0x04000120
 800bb90:	0800c9cb 	.word	0x0800c9cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	f040 8170 	bne.w	800be7e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bb9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bba2:	f003 0310 	and.w	r3, r3, #16
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f000 8169 	beq.w	800be7e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bbac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbb0:	f003 0310 	and.w	r3, r3, #16
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f000 8162 	beq.w	800be7e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2210      	movs	r2, #16
 800bbc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbcc:	2b40      	cmp	r3, #64	@ 0x40
 800bbce:	f040 80d8 	bne.w	800bd82 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bbe0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	f000 80af 	beq.w	800bd48 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bbf0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	f080 80a7 	bcs.w	800bd48 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bc00:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f003 0320 	and.w	r3, r3, #32
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f040 8087 	bne.w	800bd26 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bc24:	e853 3f00 	ldrex	r3, [r3]
 800bc28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bc2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bc30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bc42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bc46:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bc4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bc52:	e841 2300 	strex	r3, r2, [r1]
 800bc56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bc5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d1da      	bne.n	800bc18 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	3308      	adds	r3, #8
 800bc68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc6c:	e853 3f00 	ldrex	r3, [r3]
 800bc70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bc72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc74:	f023 0301 	bic.w	r3, r3, #1
 800bc78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	3308      	adds	r3, #8
 800bc82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bc86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bc8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bc8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bc92:	e841 2300 	strex	r3, r2, [r1]
 800bc96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bc98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d1e1      	bne.n	800bc62 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	3308      	adds	r3, #8
 800bca4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bca8:	e853 3f00 	ldrex	r3, [r3]
 800bcac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bcae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bcb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	3308      	adds	r3, #8
 800bcbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bcc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bcc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bcc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bcca:	e841 2300 	strex	r3, r2, [r1]
 800bcce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bcd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d1e3      	bne.n	800bc9e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2220      	movs	r2, #32
 800bcda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcec:	e853 3f00 	ldrex	r3, [r3]
 800bcf0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bcf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcf4:	f023 0310 	bic.w	r3, r3, #16
 800bcf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	461a      	mov	r2, r3
 800bd02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd06:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bd0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd0e:	e841 2300 	strex	r3, r2, [r1]
 800bd12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bd14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1e4      	bne.n	800bce4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7f9 fbf3 	bl	800550c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2202      	movs	r2, #2
 800bd2a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	1ad3      	subs	r3, r2, r3
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	4619      	mov	r1, r3
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 f91b 	bl	800bf7c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800bd46:	e0fc      	b.n	800bf42 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bd4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bd52:	429a      	cmp	r2, r3
 800bd54:	f040 80f5 	bne.w	800bf42 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f003 0320 	and.w	r3, r3, #32
 800bd66:	2b20      	cmp	r3, #32
 800bd68:	f040 80eb 	bne.w	800bf42 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2202      	movs	r2, #2
 800bd70:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bd78:	4619      	mov	r1, r3
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 f8fe 	bl	800bf7c <HAL_UARTEx_RxEventCallback>
      return;
 800bd80:	e0df      	b.n	800bf42 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	1ad3      	subs	r3, r2, r3
 800bd92:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	f000 80d1 	beq.w	800bf46 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800bda4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f000 80cc 	beq.w	800bf46 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdb6:	e853 3f00 	ldrex	r3, [r3]
 800bdba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bdbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bdc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	461a      	mov	r2, r3
 800bdcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bdd0:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdd2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bdd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bdd8:	e841 2300 	strex	r3, r2, [r1]
 800bddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bdde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d1e4      	bne.n	800bdae <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	3308      	adds	r3, #8
 800bdea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdee:	e853 3f00 	ldrex	r3, [r3]
 800bdf2:	623b      	str	r3, [r7, #32]
   return(result);
 800bdf4:	6a3b      	ldr	r3, [r7, #32]
 800bdf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bdfa:	f023 0301 	bic.w	r3, r3, #1
 800bdfe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	3308      	adds	r3, #8
 800be08:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800be0c:	633a      	str	r2, [r7, #48]	@ 0x30
 800be0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be14:	e841 2300 	strex	r3, r2, [r1]
 800be18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800be1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d1e1      	bne.n	800bde4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2220      	movs	r2, #32
 800be24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	e853 3f00 	ldrex	r3, [r3]
 800be40:	60fb      	str	r3, [r7, #12]
   return(result);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f023 0310 	bic.w	r3, r3, #16
 800be48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	461a      	mov	r2, r3
 800be52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800be56:	61fb      	str	r3, [r7, #28]
 800be58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be5a:	69b9      	ldr	r1, [r7, #24]
 800be5c:	69fa      	ldr	r2, [r7, #28]
 800be5e:	e841 2300 	strex	r3, r2, [r1]
 800be62:	617b      	str	r3, [r7, #20]
   return(result);
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1e4      	bne.n	800be34 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2202      	movs	r2, #2
 800be6e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800be74:	4619      	mov	r1, r3
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 f880 	bl	800bf7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800be7c:	e063      	b.n	800bf46 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800be7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800be86:	2b00      	cmp	r3, #0
 800be88:	d00e      	beq.n	800bea8 <HAL_UART_IRQHandler+0x5d8>
 800be8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be92:	2b00      	cmp	r3, #0
 800be94:	d008      	beq.n	800bea8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800be9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 fdcf 	bl	800ca44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bea6:	e051      	b.n	800bf4c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800beac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d014      	beq.n	800bede <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800beb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800beb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d105      	bne.n	800becc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bec4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d008      	beq.n	800bede <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d03a      	beq.n	800bf4a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	4798      	blx	r3
    }
    return;
 800bedc:	e035      	b.n	800bf4a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d009      	beq.n	800befe <HAL_UART_IRQHandler+0x62e>
 800beea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800beee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d003      	beq.n	800befe <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fd79 	bl	800c9ee <UART_EndTransmit_IT>
    return;
 800befc:	e026      	b.n	800bf4c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800befe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d009      	beq.n	800bf1e <HAL_UART_IRQHandler+0x64e>
 800bf0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf0e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d003      	beq.n	800bf1e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 fda8 	bl	800ca6c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf1c:	e016      	b.n	800bf4c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bf1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d010      	beq.n	800bf4c <HAL_UART_IRQHandler+0x67c>
 800bf2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	da0c      	bge.n	800bf4c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 fd90 	bl	800ca58 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf38:	e008      	b.n	800bf4c <HAL_UART_IRQHandler+0x67c>
      return;
 800bf3a:	bf00      	nop
 800bf3c:	e006      	b.n	800bf4c <HAL_UART_IRQHandler+0x67c>
    return;
 800bf3e:	bf00      	nop
 800bf40:	e004      	b.n	800bf4c <HAL_UART_IRQHandler+0x67c>
      return;
 800bf42:	bf00      	nop
 800bf44:	e002      	b.n	800bf4c <HAL_UART_IRQHandler+0x67c>
      return;
 800bf46:	bf00      	nop
 800bf48:	e000      	b.n	800bf4c <HAL_UART_IRQHandler+0x67c>
    return;
 800bf4a:	bf00      	nop
  }
}
 800bf4c:	37e8      	adds	r7, #232	@ 0xe8
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop

0800bf54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bf5c:	bf00      	nop
 800bf5e:	370c      	adds	r7, #12
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bf70:	bf00      	nop
 800bf72:	370c      	adds	r7, #12
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	460b      	mov	r3, r1
 800bf86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf88:	bf00      	nop
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf98:	b08c      	sub	sp, #48	@ 0x30
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	689a      	ldr	r2, [r3, #8]
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	691b      	ldr	r3, [r3, #16]
 800bfac:	431a      	orrs	r2, r3
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	695b      	ldr	r3, [r3, #20]
 800bfb2:	431a      	orrs	r2, r3
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	69db      	ldr	r3, [r3, #28]
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	681a      	ldr	r2, [r3, #0]
 800bfc2:	4baa      	ldr	r3, [pc, #680]	@ (800c26c <UART_SetConfig+0x2d8>)
 800bfc4:	4013      	ands	r3, r2
 800bfc6:	697a      	ldr	r2, [r7, #20]
 800bfc8:	6812      	ldr	r2, [r2, #0]
 800bfca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bfcc:	430b      	orrs	r3, r1
 800bfce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	68da      	ldr	r2, [r3, #12]
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	430a      	orrs	r2, r1
 800bfe4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	699b      	ldr	r3, [r3, #24]
 800bfea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a9f      	ldr	r2, [pc, #636]	@ (800c270 <UART_SetConfig+0x2dc>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d004      	beq.n	800c000 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	6a1b      	ldr	r3, [r3, #32]
 800bffa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bffc:	4313      	orrs	r3, r2
 800bffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c00a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c00e:	697a      	ldr	r2, [r7, #20]
 800c010:	6812      	ldr	r2, [r2, #0]
 800c012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c014:	430b      	orrs	r3, r1
 800c016:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c01e:	f023 010f 	bic.w	r1, r3, #15
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	430a      	orrs	r2, r1
 800c02c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a90      	ldr	r2, [pc, #576]	@ (800c274 <UART_SetConfig+0x2e0>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d125      	bne.n	800c084 <UART_SetConfig+0xf0>
 800c038:	4b8f      	ldr	r3, [pc, #572]	@ (800c278 <UART_SetConfig+0x2e4>)
 800c03a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c03e:	f003 0303 	and.w	r3, r3, #3
 800c042:	2b03      	cmp	r3, #3
 800c044:	d81a      	bhi.n	800c07c <UART_SetConfig+0xe8>
 800c046:	a201      	add	r2, pc, #4	@ (adr r2, 800c04c <UART_SetConfig+0xb8>)
 800c048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c04c:	0800c05d 	.word	0x0800c05d
 800c050:	0800c06d 	.word	0x0800c06d
 800c054:	0800c065 	.word	0x0800c065
 800c058:	0800c075 	.word	0x0800c075
 800c05c:	2301      	movs	r3, #1
 800c05e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c062:	e116      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c064:	2302      	movs	r3, #2
 800c066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c06a:	e112      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c06c:	2304      	movs	r3, #4
 800c06e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c072:	e10e      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c074:	2308      	movs	r3, #8
 800c076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c07a:	e10a      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c07c:	2310      	movs	r3, #16
 800c07e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c082:	e106      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a7c      	ldr	r2, [pc, #496]	@ (800c27c <UART_SetConfig+0x2e8>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d138      	bne.n	800c100 <UART_SetConfig+0x16c>
 800c08e:	4b7a      	ldr	r3, [pc, #488]	@ (800c278 <UART_SetConfig+0x2e4>)
 800c090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c094:	f003 030c 	and.w	r3, r3, #12
 800c098:	2b0c      	cmp	r3, #12
 800c09a:	d82d      	bhi.n	800c0f8 <UART_SetConfig+0x164>
 800c09c:	a201      	add	r2, pc, #4	@ (adr r2, 800c0a4 <UART_SetConfig+0x110>)
 800c09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a2:	bf00      	nop
 800c0a4:	0800c0d9 	.word	0x0800c0d9
 800c0a8:	0800c0f9 	.word	0x0800c0f9
 800c0ac:	0800c0f9 	.word	0x0800c0f9
 800c0b0:	0800c0f9 	.word	0x0800c0f9
 800c0b4:	0800c0e9 	.word	0x0800c0e9
 800c0b8:	0800c0f9 	.word	0x0800c0f9
 800c0bc:	0800c0f9 	.word	0x0800c0f9
 800c0c0:	0800c0f9 	.word	0x0800c0f9
 800c0c4:	0800c0e1 	.word	0x0800c0e1
 800c0c8:	0800c0f9 	.word	0x0800c0f9
 800c0cc:	0800c0f9 	.word	0x0800c0f9
 800c0d0:	0800c0f9 	.word	0x0800c0f9
 800c0d4:	0800c0f1 	.word	0x0800c0f1
 800c0d8:	2300      	movs	r3, #0
 800c0da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0de:	e0d8      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c0e0:	2302      	movs	r3, #2
 800c0e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0e6:	e0d4      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c0e8:	2304      	movs	r3, #4
 800c0ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0ee:	e0d0      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c0f0:	2308      	movs	r3, #8
 800c0f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0f6:	e0cc      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c0f8:	2310      	movs	r3, #16
 800c0fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0fe:	e0c8      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a5e      	ldr	r2, [pc, #376]	@ (800c280 <UART_SetConfig+0x2ec>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d125      	bne.n	800c156 <UART_SetConfig+0x1c2>
 800c10a:	4b5b      	ldr	r3, [pc, #364]	@ (800c278 <UART_SetConfig+0x2e4>)
 800c10c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c110:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c114:	2b30      	cmp	r3, #48	@ 0x30
 800c116:	d016      	beq.n	800c146 <UART_SetConfig+0x1b2>
 800c118:	2b30      	cmp	r3, #48	@ 0x30
 800c11a:	d818      	bhi.n	800c14e <UART_SetConfig+0x1ba>
 800c11c:	2b20      	cmp	r3, #32
 800c11e:	d00a      	beq.n	800c136 <UART_SetConfig+0x1a2>
 800c120:	2b20      	cmp	r3, #32
 800c122:	d814      	bhi.n	800c14e <UART_SetConfig+0x1ba>
 800c124:	2b00      	cmp	r3, #0
 800c126:	d002      	beq.n	800c12e <UART_SetConfig+0x19a>
 800c128:	2b10      	cmp	r3, #16
 800c12a:	d008      	beq.n	800c13e <UART_SetConfig+0x1aa>
 800c12c:	e00f      	b.n	800c14e <UART_SetConfig+0x1ba>
 800c12e:	2300      	movs	r3, #0
 800c130:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c134:	e0ad      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c136:	2302      	movs	r3, #2
 800c138:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c13c:	e0a9      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c13e:	2304      	movs	r3, #4
 800c140:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c144:	e0a5      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c146:	2308      	movs	r3, #8
 800c148:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c14c:	e0a1      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c14e:	2310      	movs	r3, #16
 800c150:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c154:	e09d      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4a4a      	ldr	r2, [pc, #296]	@ (800c284 <UART_SetConfig+0x2f0>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d125      	bne.n	800c1ac <UART_SetConfig+0x218>
 800c160:	4b45      	ldr	r3, [pc, #276]	@ (800c278 <UART_SetConfig+0x2e4>)
 800c162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c166:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c16a:	2bc0      	cmp	r3, #192	@ 0xc0
 800c16c:	d016      	beq.n	800c19c <UART_SetConfig+0x208>
 800c16e:	2bc0      	cmp	r3, #192	@ 0xc0
 800c170:	d818      	bhi.n	800c1a4 <UART_SetConfig+0x210>
 800c172:	2b80      	cmp	r3, #128	@ 0x80
 800c174:	d00a      	beq.n	800c18c <UART_SetConfig+0x1f8>
 800c176:	2b80      	cmp	r3, #128	@ 0x80
 800c178:	d814      	bhi.n	800c1a4 <UART_SetConfig+0x210>
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d002      	beq.n	800c184 <UART_SetConfig+0x1f0>
 800c17e:	2b40      	cmp	r3, #64	@ 0x40
 800c180:	d008      	beq.n	800c194 <UART_SetConfig+0x200>
 800c182:	e00f      	b.n	800c1a4 <UART_SetConfig+0x210>
 800c184:	2300      	movs	r3, #0
 800c186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c18a:	e082      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c18c:	2302      	movs	r3, #2
 800c18e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c192:	e07e      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c194:	2304      	movs	r3, #4
 800c196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c19a:	e07a      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c19c:	2308      	movs	r3, #8
 800c19e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1a2:	e076      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c1a4:	2310      	movs	r3, #16
 800c1a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1aa:	e072      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a35      	ldr	r2, [pc, #212]	@ (800c288 <UART_SetConfig+0x2f4>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d12a      	bne.n	800c20c <UART_SetConfig+0x278>
 800c1b6:	4b30      	ldr	r3, [pc, #192]	@ (800c278 <UART_SetConfig+0x2e4>)
 800c1b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c1bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c1c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c1c4:	d01a      	beq.n	800c1fc <UART_SetConfig+0x268>
 800c1c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c1ca:	d81b      	bhi.n	800c204 <UART_SetConfig+0x270>
 800c1cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1d0:	d00c      	beq.n	800c1ec <UART_SetConfig+0x258>
 800c1d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1d6:	d815      	bhi.n	800c204 <UART_SetConfig+0x270>
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d003      	beq.n	800c1e4 <UART_SetConfig+0x250>
 800c1dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c1e0:	d008      	beq.n	800c1f4 <UART_SetConfig+0x260>
 800c1e2:	e00f      	b.n	800c204 <UART_SetConfig+0x270>
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1ea:	e052      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c1ec:	2302      	movs	r3, #2
 800c1ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1f2:	e04e      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c1f4:	2304      	movs	r3, #4
 800c1f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1fa:	e04a      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c1fc:	2308      	movs	r3, #8
 800c1fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c202:	e046      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c204:	2310      	movs	r3, #16
 800c206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c20a:	e042      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a17      	ldr	r2, [pc, #92]	@ (800c270 <UART_SetConfig+0x2dc>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d13a      	bne.n	800c28c <UART_SetConfig+0x2f8>
 800c216:	4b18      	ldr	r3, [pc, #96]	@ (800c278 <UART_SetConfig+0x2e4>)
 800c218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c21c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c220:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c224:	d01a      	beq.n	800c25c <UART_SetConfig+0x2c8>
 800c226:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c22a:	d81b      	bhi.n	800c264 <UART_SetConfig+0x2d0>
 800c22c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c230:	d00c      	beq.n	800c24c <UART_SetConfig+0x2b8>
 800c232:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c236:	d815      	bhi.n	800c264 <UART_SetConfig+0x2d0>
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d003      	beq.n	800c244 <UART_SetConfig+0x2b0>
 800c23c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c240:	d008      	beq.n	800c254 <UART_SetConfig+0x2c0>
 800c242:	e00f      	b.n	800c264 <UART_SetConfig+0x2d0>
 800c244:	2300      	movs	r3, #0
 800c246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c24a:	e022      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c24c:	2302      	movs	r3, #2
 800c24e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c252:	e01e      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c254:	2304      	movs	r3, #4
 800c256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c25a:	e01a      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c25c:	2308      	movs	r3, #8
 800c25e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c262:	e016      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c264:	2310      	movs	r3, #16
 800c266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c26a:	e012      	b.n	800c292 <UART_SetConfig+0x2fe>
 800c26c:	cfff69f3 	.word	0xcfff69f3
 800c270:	40008000 	.word	0x40008000
 800c274:	40013800 	.word	0x40013800
 800c278:	40021000 	.word	0x40021000
 800c27c:	40004400 	.word	0x40004400
 800c280:	40004800 	.word	0x40004800
 800c284:	40004c00 	.word	0x40004c00
 800c288:	40005000 	.word	0x40005000
 800c28c:	2310      	movs	r3, #16
 800c28e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4aae      	ldr	r2, [pc, #696]	@ (800c550 <UART_SetConfig+0x5bc>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	f040 8097 	bne.w	800c3cc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c29e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c2a2:	2b08      	cmp	r3, #8
 800c2a4:	d823      	bhi.n	800c2ee <UART_SetConfig+0x35a>
 800c2a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c2ac <UART_SetConfig+0x318>)
 800c2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ac:	0800c2d1 	.word	0x0800c2d1
 800c2b0:	0800c2ef 	.word	0x0800c2ef
 800c2b4:	0800c2d9 	.word	0x0800c2d9
 800c2b8:	0800c2ef 	.word	0x0800c2ef
 800c2bc:	0800c2df 	.word	0x0800c2df
 800c2c0:	0800c2ef 	.word	0x0800c2ef
 800c2c4:	0800c2ef 	.word	0x0800c2ef
 800c2c8:	0800c2ef 	.word	0x0800c2ef
 800c2cc:	0800c2e7 	.word	0x0800c2e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2d0:	f7fc fa62 	bl	8008798 <HAL_RCC_GetPCLK1Freq>
 800c2d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c2d6:	e010      	b.n	800c2fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c2d8:	4b9e      	ldr	r3, [pc, #632]	@ (800c554 <UART_SetConfig+0x5c0>)
 800c2da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c2dc:	e00d      	b.n	800c2fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c2de:	f7fc f9ed 	bl	80086bc <HAL_RCC_GetSysClockFreq>
 800c2e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c2e4:	e009      	b.n	800c2fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c2ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c2ec:	e005      	b.n	800c2fa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c2f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	f000 8130 	beq.w	800c562 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c306:	4a94      	ldr	r2, [pc, #592]	@ (800c558 <UART_SetConfig+0x5c4>)
 800c308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c30c:	461a      	mov	r2, r3
 800c30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c310:	fbb3 f3f2 	udiv	r3, r3, r2
 800c314:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	685a      	ldr	r2, [r3, #4]
 800c31a:	4613      	mov	r3, r2
 800c31c:	005b      	lsls	r3, r3, #1
 800c31e:	4413      	add	r3, r2
 800c320:	69ba      	ldr	r2, [r7, #24]
 800c322:	429a      	cmp	r2, r3
 800c324:	d305      	bcc.n	800c332 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c32c:	69ba      	ldr	r2, [r7, #24]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d903      	bls.n	800c33a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c332:	2301      	movs	r3, #1
 800c334:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c338:	e113      	b.n	800c562 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33c:	2200      	movs	r2, #0
 800c33e:	60bb      	str	r3, [r7, #8]
 800c340:	60fa      	str	r2, [r7, #12]
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c346:	4a84      	ldr	r2, [pc, #528]	@ (800c558 <UART_SetConfig+0x5c4>)
 800c348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	2200      	movs	r2, #0
 800c350:	603b      	str	r3, [r7, #0]
 800c352:	607a      	str	r2, [r7, #4]
 800c354:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c358:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c35c:	f7f4 fc9c 	bl	8000c98 <__aeabi_uldivmod>
 800c360:	4602      	mov	r2, r0
 800c362:	460b      	mov	r3, r1
 800c364:	4610      	mov	r0, r2
 800c366:	4619      	mov	r1, r3
 800c368:	f04f 0200 	mov.w	r2, #0
 800c36c:	f04f 0300 	mov.w	r3, #0
 800c370:	020b      	lsls	r3, r1, #8
 800c372:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c376:	0202      	lsls	r2, r0, #8
 800c378:	6979      	ldr	r1, [r7, #20]
 800c37a:	6849      	ldr	r1, [r1, #4]
 800c37c:	0849      	lsrs	r1, r1, #1
 800c37e:	2000      	movs	r0, #0
 800c380:	460c      	mov	r4, r1
 800c382:	4605      	mov	r5, r0
 800c384:	eb12 0804 	adds.w	r8, r2, r4
 800c388:	eb43 0905 	adc.w	r9, r3, r5
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	2200      	movs	r2, #0
 800c392:	469a      	mov	sl, r3
 800c394:	4693      	mov	fp, r2
 800c396:	4652      	mov	r2, sl
 800c398:	465b      	mov	r3, fp
 800c39a:	4640      	mov	r0, r8
 800c39c:	4649      	mov	r1, r9
 800c39e:	f7f4 fc7b 	bl	8000c98 <__aeabi_uldivmod>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c3aa:	6a3b      	ldr	r3, [r7, #32]
 800c3ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c3b0:	d308      	bcc.n	800c3c4 <UART_SetConfig+0x430>
 800c3b2:	6a3b      	ldr	r3, [r7, #32]
 800c3b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c3b8:	d204      	bcs.n	800c3c4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	6a3a      	ldr	r2, [r7, #32]
 800c3c0:	60da      	str	r2, [r3, #12]
 800c3c2:	e0ce      	b.n	800c562 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c3ca:	e0ca      	b.n	800c562 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	69db      	ldr	r3, [r3, #28]
 800c3d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c3d4:	d166      	bne.n	800c4a4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c3d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c3da:	2b08      	cmp	r3, #8
 800c3dc:	d827      	bhi.n	800c42e <UART_SetConfig+0x49a>
 800c3de:	a201      	add	r2, pc, #4	@ (adr r2, 800c3e4 <UART_SetConfig+0x450>)
 800c3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e4:	0800c409 	.word	0x0800c409
 800c3e8:	0800c411 	.word	0x0800c411
 800c3ec:	0800c419 	.word	0x0800c419
 800c3f0:	0800c42f 	.word	0x0800c42f
 800c3f4:	0800c41f 	.word	0x0800c41f
 800c3f8:	0800c42f 	.word	0x0800c42f
 800c3fc:	0800c42f 	.word	0x0800c42f
 800c400:	0800c42f 	.word	0x0800c42f
 800c404:	0800c427 	.word	0x0800c427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c408:	f7fc f9c6 	bl	8008798 <HAL_RCC_GetPCLK1Freq>
 800c40c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c40e:	e014      	b.n	800c43a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c410:	f7fc f9d8 	bl	80087c4 <HAL_RCC_GetPCLK2Freq>
 800c414:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c416:	e010      	b.n	800c43a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c418:	4b4e      	ldr	r3, [pc, #312]	@ (800c554 <UART_SetConfig+0x5c0>)
 800c41a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c41c:	e00d      	b.n	800c43a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c41e:	f7fc f94d 	bl	80086bc <HAL_RCC_GetSysClockFreq>
 800c422:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c424:	e009      	b.n	800c43a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c426:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c42a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c42c:	e005      	b.n	800c43a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c42e:	2300      	movs	r3, #0
 800c430:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c432:	2301      	movs	r3, #1
 800c434:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c438:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f000 8090 	beq.w	800c562 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c446:	4a44      	ldr	r2, [pc, #272]	@ (800c558 <UART_SetConfig+0x5c4>)
 800c448:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c44c:	461a      	mov	r2, r3
 800c44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c450:	fbb3 f3f2 	udiv	r3, r3, r2
 800c454:	005a      	lsls	r2, r3, #1
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	085b      	lsrs	r3, r3, #1
 800c45c:	441a      	add	r2, r3
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	fbb2 f3f3 	udiv	r3, r2, r3
 800c466:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c468:	6a3b      	ldr	r3, [r7, #32]
 800c46a:	2b0f      	cmp	r3, #15
 800c46c:	d916      	bls.n	800c49c <UART_SetConfig+0x508>
 800c46e:	6a3b      	ldr	r3, [r7, #32]
 800c470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c474:	d212      	bcs.n	800c49c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c476:	6a3b      	ldr	r3, [r7, #32]
 800c478:	b29b      	uxth	r3, r3
 800c47a:	f023 030f 	bic.w	r3, r3, #15
 800c47e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c480:	6a3b      	ldr	r3, [r7, #32]
 800c482:	085b      	lsrs	r3, r3, #1
 800c484:	b29b      	uxth	r3, r3
 800c486:	f003 0307 	and.w	r3, r3, #7
 800c48a:	b29a      	uxth	r2, r3
 800c48c:	8bfb      	ldrh	r3, [r7, #30]
 800c48e:	4313      	orrs	r3, r2
 800c490:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	8bfa      	ldrh	r2, [r7, #30]
 800c498:	60da      	str	r2, [r3, #12]
 800c49a:	e062      	b.n	800c562 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c49c:	2301      	movs	r3, #1
 800c49e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c4a2:	e05e      	b.n	800c562 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c4a4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c4a8:	2b08      	cmp	r3, #8
 800c4aa:	d828      	bhi.n	800c4fe <UART_SetConfig+0x56a>
 800c4ac:	a201      	add	r2, pc, #4	@ (adr r2, 800c4b4 <UART_SetConfig+0x520>)
 800c4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b2:	bf00      	nop
 800c4b4:	0800c4d9 	.word	0x0800c4d9
 800c4b8:	0800c4e1 	.word	0x0800c4e1
 800c4bc:	0800c4e9 	.word	0x0800c4e9
 800c4c0:	0800c4ff 	.word	0x0800c4ff
 800c4c4:	0800c4ef 	.word	0x0800c4ef
 800c4c8:	0800c4ff 	.word	0x0800c4ff
 800c4cc:	0800c4ff 	.word	0x0800c4ff
 800c4d0:	0800c4ff 	.word	0x0800c4ff
 800c4d4:	0800c4f7 	.word	0x0800c4f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c4d8:	f7fc f95e 	bl	8008798 <HAL_RCC_GetPCLK1Freq>
 800c4dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c4de:	e014      	b.n	800c50a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c4e0:	f7fc f970 	bl	80087c4 <HAL_RCC_GetPCLK2Freq>
 800c4e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c4e6:	e010      	b.n	800c50a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c4e8:	4b1a      	ldr	r3, [pc, #104]	@ (800c554 <UART_SetConfig+0x5c0>)
 800c4ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c4ec:	e00d      	b.n	800c50a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c4ee:	f7fc f8e5 	bl	80086bc <HAL_RCC_GetSysClockFreq>
 800c4f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c4f4:	e009      	b.n	800c50a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c4fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c4fc:	e005      	b.n	800c50a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c4fe:	2300      	movs	r3, #0
 800c500:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c502:	2301      	movs	r3, #1
 800c504:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c508:	bf00      	nop
    }

    if (pclk != 0U)
 800c50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d028      	beq.n	800c562 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c514:	4a10      	ldr	r2, [pc, #64]	@ (800c558 <UART_SetConfig+0x5c4>)
 800c516:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c51a:	461a      	mov	r2, r3
 800c51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c51e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	085b      	lsrs	r3, r3, #1
 800c528:	441a      	add	r2, r3
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c532:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c534:	6a3b      	ldr	r3, [r7, #32]
 800c536:	2b0f      	cmp	r3, #15
 800c538:	d910      	bls.n	800c55c <UART_SetConfig+0x5c8>
 800c53a:	6a3b      	ldr	r3, [r7, #32]
 800c53c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c540:	d20c      	bcs.n	800c55c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c542:	6a3b      	ldr	r3, [r7, #32]
 800c544:	b29a      	uxth	r2, r3
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	60da      	str	r2, [r3, #12]
 800c54c:	e009      	b.n	800c562 <UART_SetConfig+0x5ce>
 800c54e:	bf00      	nop
 800c550:	40008000 	.word	0x40008000
 800c554:	00f42400 	.word	0x00f42400
 800c558:	08013d9c 	.word	0x08013d9c
      }
      else
      {
        ret = HAL_ERROR;
 800c55c:	2301      	movs	r3, #1
 800c55e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	2201      	movs	r2, #1
 800c566:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	2201      	movs	r2, #1
 800c56e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	2200      	movs	r2, #0
 800c576:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	2200      	movs	r2, #0
 800c57c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c57e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c582:	4618      	mov	r0, r3
 800c584:	3730      	adds	r7, #48	@ 0x30
 800c586:	46bd      	mov	sp, r7
 800c588:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c58c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c598:	f003 0308 	and.w	r3, r3, #8
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d00a      	beq.n	800c5b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	430a      	orrs	r2, r1
 800c5b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5ba:	f003 0301 	and.w	r3, r3, #1
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d00a      	beq.n	800c5d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	430a      	orrs	r2, r1
 800c5d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5dc:	f003 0302 	and.w	r3, r3, #2
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d00a      	beq.n	800c5fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	430a      	orrs	r2, r1
 800c5f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5fe:	f003 0304 	and.w	r3, r3, #4
 800c602:	2b00      	cmp	r3, #0
 800c604:	d00a      	beq.n	800c61c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	430a      	orrs	r2, r1
 800c61a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c620:	f003 0310 	and.w	r3, r3, #16
 800c624:	2b00      	cmp	r3, #0
 800c626:	d00a      	beq.n	800c63e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	430a      	orrs	r2, r1
 800c63c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c642:	f003 0320 	and.w	r3, r3, #32
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00a      	beq.n	800c660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	689b      	ldr	r3, [r3, #8]
 800c650:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	430a      	orrs	r2, r1
 800c65e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d01a      	beq.n	800c6a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	430a      	orrs	r2, r1
 800c680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c686:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c68a:	d10a      	bne.n	800c6a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	430a      	orrs	r2, r1
 800c6a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00a      	beq.n	800c6c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	430a      	orrs	r2, r1
 800c6c2:	605a      	str	r2, [r3, #4]
  }
}
 800c6c4:	bf00      	nop
 800c6c6:	370c      	adds	r7, #12
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr

0800c6d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b098      	sub	sp, #96	@ 0x60
 800c6d4:	af02      	add	r7, sp, #8
 800c6d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c6e0:	f7f7 fc4a 	bl	8003f78 <HAL_GetTick>
 800c6e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f003 0308 	and.w	r3, r3, #8
 800c6f0:	2b08      	cmp	r3, #8
 800c6f2:	d12f      	bne.n	800c754 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c6f8:	9300      	str	r3, [sp, #0]
 800c6fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 f88e 	bl	800c824 <UART_WaitOnFlagUntilTimeout>
 800c708:	4603      	mov	r3, r0
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d022      	beq.n	800c754 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c716:	e853 3f00 	ldrex	r3, [r3]
 800c71a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c71c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c71e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c722:	653b      	str	r3, [r7, #80]	@ 0x50
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	461a      	mov	r2, r3
 800c72a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c72c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c72e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c730:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c732:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c734:	e841 2300 	strex	r3, r2, [r1]
 800c738:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c73a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1e6      	bne.n	800c70e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2220      	movs	r2, #32
 800c744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c750:	2303      	movs	r3, #3
 800c752:	e063      	b.n	800c81c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f003 0304 	and.w	r3, r3, #4
 800c75e:	2b04      	cmp	r3, #4
 800c760:	d149      	bne.n	800c7f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c762:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c766:	9300      	str	r3, [sp, #0]
 800c768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c76a:	2200      	movs	r2, #0
 800c76c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 f857 	bl	800c824 <UART_WaitOnFlagUntilTimeout>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d03c      	beq.n	800c7f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c784:	e853 3f00 	ldrex	r3, [r3]
 800c788:	623b      	str	r3, [r7, #32]
   return(result);
 800c78a:	6a3b      	ldr	r3, [r7, #32]
 800c78c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c790:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	461a      	mov	r2, r3
 800c798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c79a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c79c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c79e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c7a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7a2:	e841 2300 	strex	r3, r2, [r1]
 800c7a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c7a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d1e6      	bne.n	800c77c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	3308      	adds	r3, #8
 800c7b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	e853 3f00 	ldrex	r3, [r3]
 800c7bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f023 0301 	bic.w	r3, r3, #1
 800c7c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	3308      	adds	r3, #8
 800c7cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c7ce:	61fa      	str	r2, [r7, #28]
 800c7d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7d2:	69b9      	ldr	r1, [r7, #24]
 800c7d4:	69fa      	ldr	r2, [r7, #28]
 800c7d6:	e841 2300 	strex	r3, r2, [r1]
 800c7da:	617b      	str	r3, [r7, #20]
   return(result);
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d1e5      	bne.n	800c7ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2220      	movs	r2, #32
 800c7e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c7f2:	2303      	movs	r3, #3
 800c7f4:	e012      	b.n	800c81c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2220      	movs	r2, #32
 800c7fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2220      	movs	r2, #32
 800c802:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c81a:	2300      	movs	r3, #0
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3758      	adds	r7, #88	@ 0x58
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	603b      	str	r3, [r7, #0]
 800c830:	4613      	mov	r3, r2
 800c832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c834:	e04f      	b.n	800c8d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c83c:	d04b      	beq.n	800c8d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c83e:	f7f7 fb9b 	bl	8003f78 <HAL_GetTick>
 800c842:	4602      	mov	r2, r0
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	69ba      	ldr	r2, [r7, #24]
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d302      	bcc.n	800c854 <UART_WaitOnFlagUntilTimeout+0x30>
 800c84e:	69bb      	ldr	r3, [r7, #24]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d101      	bne.n	800c858 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c854:	2303      	movs	r3, #3
 800c856:	e04e      	b.n	800c8f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f003 0304 	and.w	r3, r3, #4
 800c862:	2b00      	cmp	r3, #0
 800c864:	d037      	beq.n	800c8d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	2b80      	cmp	r3, #128	@ 0x80
 800c86a:	d034      	beq.n	800c8d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	2b40      	cmp	r3, #64	@ 0x40
 800c870:	d031      	beq.n	800c8d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	69db      	ldr	r3, [r3, #28]
 800c878:	f003 0308 	and.w	r3, r3, #8
 800c87c:	2b08      	cmp	r3, #8
 800c87e:	d110      	bne.n	800c8a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2208      	movs	r2, #8
 800c886:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c888:	68f8      	ldr	r0, [r7, #12]
 800c88a:	f000 f838 	bl	800c8fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2208      	movs	r2, #8
 800c892:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2200      	movs	r2, #0
 800c89a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	e029      	b.n	800c8f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	69db      	ldr	r3, [r3, #28]
 800c8a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c8ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c8b0:	d111      	bne.n	800c8d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c8ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f000 f81e 	bl	800c8fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2220      	movs	r2, #32
 800c8c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c8d2:	2303      	movs	r3, #3
 800c8d4:	e00f      	b.n	800c8f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	69da      	ldr	r2, [r3, #28]
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	4013      	ands	r3, r2
 800c8e0:	68ba      	ldr	r2, [r7, #8]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	bf0c      	ite	eq
 800c8e6:	2301      	moveq	r3, #1
 800c8e8:	2300      	movne	r3, #0
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	79fb      	ldrb	r3, [r7, #7]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d0a0      	beq.n	800c836 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c8f4:	2300      	movs	r3, #0
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3710      	adds	r7, #16
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}

0800c8fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c8fe:	b480      	push	{r7}
 800c900:	b095      	sub	sp, #84	@ 0x54
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c90c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c90e:	e853 3f00 	ldrex	r3, [r3]
 800c912:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c916:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c91a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	461a      	mov	r2, r3
 800c922:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c924:	643b      	str	r3, [r7, #64]	@ 0x40
 800c926:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c928:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c92a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c92c:	e841 2300 	strex	r3, r2, [r1]
 800c930:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1e6      	bne.n	800c906 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	3308      	adds	r3, #8
 800c93e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c940:	6a3b      	ldr	r3, [r7, #32]
 800c942:	e853 3f00 	ldrex	r3, [r3]
 800c946:	61fb      	str	r3, [r7, #28]
   return(result);
 800c948:	69fb      	ldr	r3, [r7, #28]
 800c94a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c94e:	f023 0301 	bic.w	r3, r3, #1
 800c952:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	3308      	adds	r3, #8
 800c95a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c95c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c95e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c960:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c962:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c964:	e841 2300 	strex	r3, r2, [r1]
 800c968:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d1e3      	bne.n	800c938 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c974:	2b01      	cmp	r3, #1
 800c976:	d118      	bne.n	800c9aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	e853 3f00 	ldrex	r3, [r3]
 800c984:	60bb      	str	r3, [r7, #8]
   return(result);
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	f023 0310 	bic.w	r3, r3, #16
 800c98c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	461a      	mov	r2, r3
 800c994:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c996:	61bb      	str	r3, [r7, #24]
 800c998:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c99a:	6979      	ldr	r1, [r7, #20]
 800c99c:	69ba      	ldr	r2, [r7, #24]
 800c99e:	e841 2300 	strex	r3, r2, [r1]
 800c9a2:	613b      	str	r3, [r7, #16]
   return(result);
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d1e6      	bne.n	800c978 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2220      	movs	r2, #32
 800c9ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c9be:	bf00      	nop
 800c9c0:	3754      	adds	r7, #84	@ 0x54
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr

0800c9ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b084      	sub	sp, #16
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c9e0:	68f8      	ldr	r0, [r7, #12]
 800c9e2:	f7ff fac1 	bl	800bf68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9e6:	bf00      	nop
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b088      	sub	sp, #32
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	e853 3f00 	ldrex	r3, [r3]
 800ca02:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca0a:	61fb      	str	r3, [r7, #28]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	461a      	mov	r2, r3
 800ca12:	69fb      	ldr	r3, [r7, #28]
 800ca14:	61bb      	str	r3, [r7, #24]
 800ca16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca18:	6979      	ldr	r1, [r7, #20]
 800ca1a:	69ba      	ldr	r2, [r7, #24]
 800ca1c:	e841 2300 	strex	r3, r2, [r1]
 800ca20:	613b      	str	r3, [r7, #16]
   return(result);
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d1e6      	bne.n	800c9f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2220      	movs	r2, #32
 800ca2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2200      	movs	r2, #0
 800ca34:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f7ff fa8c 	bl	800bf54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca3c:	bf00      	nop
 800ca3e:	3720      	adds	r7, #32
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ca4c:	bf00      	nop
 800ca4e:	370c      	adds	r7, #12
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ca60:	bf00      	nop
 800ca62:	370c      	adds	r7, #12
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ca74:	bf00      	nop
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b085      	sub	sp, #20
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d101      	bne.n	800ca96 <HAL_UARTEx_DisableFifoMode+0x16>
 800ca92:	2302      	movs	r3, #2
 800ca94:	e027      	b.n	800cae6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2201      	movs	r2, #1
 800ca9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2224      	movs	r2, #36	@ 0x24
 800caa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	681a      	ldr	r2, [r3, #0]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f022 0201 	bic.w	r2, r2, #1
 800cabc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cac4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2200      	movs	r2, #0
 800caca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2220      	movs	r2, #32
 800cad8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2200      	movs	r2, #0
 800cae0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cae4:	2300      	movs	r3, #0
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3714      	adds	r7, #20
 800caea:	46bd      	mov	sp, r7
 800caec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf0:	4770      	bx	lr

0800caf2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800caf2:	b580      	push	{r7, lr}
 800caf4:	b084      	sub	sp, #16
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	6078      	str	r0, [r7, #4]
 800cafa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d101      	bne.n	800cb0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cb06:	2302      	movs	r3, #2
 800cb08:	e02d      	b.n	800cb66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2201      	movs	r2, #1
 800cb0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2224      	movs	r2, #36	@ 0x24
 800cb16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f022 0201 	bic.w	r2, r2, #1
 800cb30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	683a      	ldr	r2, [r7, #0]
 800cb42:	430a      	orrs	r2, r1
 800cb44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 f850 	bl	800cbec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	68fa      	ldr	r2, [r7, #12]
 800cb52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2220      	movs	r2, #32
 800cb58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb64:	2300      	movs	r3, #0
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b084      	sub	sp, #16
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
 800cb76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d101      	bne.n	800cb86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cb82:	2302      	movs	r3, #2
 800cb84:	e02d      	b.n	800cbe2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2201      	movs	r2, #1
 800cb8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2224      	movs	r2, #36	@ 0x24
 800cb92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f022 0201 	bic.w	r2, r2, #1
 800cbac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	683a      	ldr	r2, [r7, #0]
 800cbbe:	430a      	orrs	r2, r1
 800cbc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f812 	bl	800cbec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2220      	movs	r2, #32
 800cbd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
	...

0800cbec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d108      	bne.n	800cc0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2201      	movs	r2, #1
 800cc00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2201      	movs	r2, #1
 800cc08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cc0c:	e031      	b.n	800cc72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cc0e:	2308      	movs	r3, #8
 800cc10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cc12:	2308      	movs	r3, #8
 800cc14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	689b      	ldr	r3, [r3, #8]
 800cc1c:	0e5b      	lsrs	r3, r3, #25
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	f003 0307 	and.w	r3, r3, #7
 800cc24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	0f5b      	lsrs	r3, r3, #29
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	f003 0307 	and.w	r3, r3, #7
 800cc34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc36:	7bbb      	ldrb	r3, [r7, #14]
 800cc38:	7b3a      	ldrb	r2, [r7, #12]
 800cc3a:	4911      	ldr	r1, [pc, #68]	@ (800cc80 <UARTEx_SetNbDataToProcess+0x94>)
 800cc3c:	5c8a      	ldrb	r2, [r1, r2]
 800cc3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cc42:	7b3a      	ldrb	r2, [r7, #12]
 800cc44:	490f      	ldr	r1, [pc, #60]	@ (800cc84 <UARTEx_SetNbDataToProcess+0x98>)
 800cc46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc48:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc4c:	b29a      	uxth	r2, r3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc54:	7bfb      	ldrb	r3, [r7, #15]
 800cc56:	7b7a      	ldrb	r2, [r7, #13]
 800cc58:	4909      	ldr	r1, [pc, #36]	@ (800cc80 <UARTEx_SetNbDataToProcess+0x94>)
 800cc5a:	5c8a      	ldrb	r2, [r1, r2]
 800cc5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cc60:	7b7a      	ldrb	r2, [r7, #13]
 800cc62:	4908      	ldr	r1, [pc, #32]	@ (800cc84 <UARTEx_SetNbDataToProcess+0x98>)
 800cc64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc66:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc6a:	b29a      	uxth	r2, r3
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cc72:	bf00      	nop
 800cc74:	3714      	adds	r7, #20
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop
 800cc80:	08013db4 	.word	0x08013db4
 800cc84:	08013dbc 	.word	0x08013dbc

0800cc88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2200      	movs	r2, #0
 800cc94:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cc98:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800cc9c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	b29a      	uxth	r2, r3
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800cca8:	2300      	movs	r3, #0
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3714      	adds	r7, #20
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr

0800ccb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ccb6:	b480      	push	{r7}
 800ccb8:	b085      	sub	sp, #20
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ccbe:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800ccc2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800ccca:	b29a      	uxth	r2, r3
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	43db      	mvns	r3, r3
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	4013      	ands	r3, r2
 800ccd6:	b29a      	uxth	r2, r3
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ccde:	2300      	movs	r3, #0
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3714      	adds	r7, #20
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b085      	sub	sp, #20
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	60f8      	str	r0, [r7, #12]
 800ccf4:	1d3b      	adds	r3, r7, #4
 800ccf6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2200      	movs	r2, #0
 800cd06:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2200      	movs	r2, #0
 800cd16:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800cd1a:	2300      	movs	r3, #0
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3714      	adds	r7, #20
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b0a7      	sub	sp, #156	@ 0x9c
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800cd32:	2300      	movs	r3, #0
 800cd34:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	4413      	add	r3, r2
 800cd42:	881b      	ldrh	r3, [r3, #0]
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800cd4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd4e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	78db      	ldrb	r3, [r3, #3]
 800cd56:	2b03      	cmp	r3, #3
 800cd58:	d81f      	bhi.n	800cd9a <USB_ActivateEndpoint+0x72>
 800cd5a:	a201      	add	r2, pc, #4	@ (adr r2, 800cd60 <USB_ActivateEndpoint+0x38>)
 800cd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd60:	0800cd71 	.word	0x0800cd71
 800cd64:	0800cd8d 	.word	0x0800cd8d
 800cd68:	0800cda3 	.word	0x0800cda3
 800cd6c:	0800cd7f 	.word	0x0800cd7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800cd70:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800cd74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cd78:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800cd7c:	e012      	b.n	800cda4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800cd7e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800cd82:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800cd86:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800cd8a:	e00b      	b.n	800cda4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800cd8c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800cd90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cd94:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800cd98:	e004      	b.n	800cda4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800cda0:	e000      	b.n	800cda4 <USB_ActivateEndpoint+0x7c>
      break;
 800cda2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	441a      	add	r2, r3
 800cdae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800cdb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cdba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	4413      	add	r3, r2
 800cdd0:	881b      	ldrh	r3, [r3, #0]
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	b21b      	sxth	r3, r3
 800cdd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cdda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdde:	b21a      	sxth	r2, r3
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	b21b      	sxth	r3, r3
 800cde6:	4313      	orrs	r3, r2
 800cde8:	b21b      	sxth	r3, r3
 800cdea:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	441a      	add	r2, r3
 800cdf8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800cdfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	7b1b      	ldrb	r3, [r3, #12]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	f040 8180 	bne.w	800d11a <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	785b      	ldrb	r3, [r3, #1]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	f000 8084 	beq.w	800cf2c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	61bb      	str	r3, [r7, #24]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	461a      	mov	r2, r3
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	4413      	add	r3, r2
 800ce36:	61bb      	str	r3, [r7, #24]
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	00da      	lsls	r2, r3, #3
 800ce3e:	69bb      	ldr	r3, [r7, #24]
 800ce40:	4413      	add	r3, r2
 800ce42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ce46:	617b      	str	r3, [r7, #20]
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	88db      	ldrh	r3, [r3, #6]
 800ce4c:	085b      	lsrs	r3, r3, #1
 800ce4e:	b29b      	uxth	r3, r3
 800ce50:	005b      	lsls	r3, r3, #1
 800ce52:	b29a      	uxth	r2, r3
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	009b      	lsls	r3, r3, #2
 800ce60:	4413      	add	r3, r2
 800ce62:	881b      	ldrh	r3, [r3, #0]
 800ce64:	827b      	strh	r3, [r7, #18]
 800ce66:	8a7b      	ldrh	r3, [r7, #18]
 800ce68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d01b      	beq.n	800cea8 <USB_ActivateEndpoint+0x180>
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	009b      	lsls	r3, r3, #2
 800ce78:	4413      	add	r3, r2
 800ce7a:	881b      	ldrh	r3, [r3, #0]
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce86:	823b      	strh	r3, [r7, #16]
 800ce88:	687a      	ldr	r2, [r7, #4]
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	009b      	lsls	r3, r3, #2
 800ce90:	441a      	add	r2, r3
 800ce92:	8a3b      	ldrh	r3, [r7, #16]
 800ce94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cea0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	78db      	ldrb	r3, [r3, #3]
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d020      	beq.n	800cef2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	4413      	add	r3, r2
 800ceba:	881b      	ldrh	r3, [r3, #0]
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cec2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cec6:	81bb      	strh	r3, [r7, #12]
 800cec8:	89bb      	ldrh	r3, [r7, #12]
 800ceca:	f083 0320 	eor.w	r3, r3, #32
 800cece:	81bb      	strh	r3, [r7, #12]
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	441a      	add	r2, r3
 800ceda:	89bb      	ldrh	r3, [r7, #12]
 800cedc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cee0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	8013      	strh	r3, [r2, #0]
 800cef0:	e3f9      	b.n	800d6e6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	009b      	lsls	r3, r3, #2
 800cefa:	4413      	add	r3, r2
 800cefc:	881b      	ldrh	r3, [r3, #0]
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf08:	81fb      	strh	r3, [r7, #14]
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	009b      	lsls	r3, r3, #2
 800cf12:	441a      	add	r2, r3
 800cf14:	89fb      	ldrh	r3, [r7, #14]
 800cf16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf26:	b29b      	uxth	r3, r3
 800cf28:	8013      	strh	r3, [r2, #0]
 800cf2a:	e3dc      	b.n	800d6e6 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	461a      	mov	r2, r3
 800cf3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf3c:	4413      	add	r3, r2
 800cf3e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	00da      	lsls	r2, r3, #3
 800cf46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf48:	4413      	add	r3, r2
 800cf4a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800cf4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	88db      	ldrh	r3, [r3, #6]
 800cf54:	085b      	lsrs	r3, r3, #1
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	005b      	lsls	r3, r3, #1
 800cf5a:	b29a      	uxth	r2, r3
 800cf5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf5e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	461a      	mov	r2, r3
 800cf6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf70:	4413      	add	r3, r2
 800cf72:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	00da      	lsls	r2, r3, #3
 800cf7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf7c:	4413      	add	r3, r2
 800cf7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cf82:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf86:	881b      	ldrh	r3, [r3, #0]
 800cf88:	b29b      	uxth	r3, r3
 800cf8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf8e:	b29a      	uxth	r2, r3
 800cf90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf92:	801a      	strh	r2, [r3, #0]
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	691b      	ldr	r3, [r3, #16]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d10a      	bne.n	800cfb2 <USB_ActivateEndpoint+0x28a>
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf9e:	881b      	ldrh	r3, [r3, #0]
 800cfa0:	b29b      	uxth	r3, r3
 800cfa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfaa:	b29a      	uxth	r2, r3
 800cfac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfae:	801a      	strh	r2, [r3, #0]
 800cfb0:	e041      	b.n	800d036 <USB_ActivateEndpoint+0x30e>
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	691b      	ldr	r3, [r3, #16]
 800cfb6:	2b3e      	cmp	r3, #62	@ 0x3e
 800cfb8:	d81c      	bhi.n	800cff4 <USB_ActivateEndpoint+0x2cc>
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	691b      	ldr	r3, [r3, #16]
 800cfbe:	085b      	lsrs	r3, r3, #1
 800cfc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	691b      	ldr	r3, [r3, #16]
 800cfc8:	f003 0301 	and.w	r3, r3, #1
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d004      	beq.n	800cfda <USB_ActivateEndpoint+0x2b2>
 800cfd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cfda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfdc:	881b      	ldrh	r3, [r3, #0]
 800cfde:	b29a      	uxth	r2, r3
 800cfe0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cfe4:	b29b      	uxth	r3, r3
 800cfe6:	029b      	lsls	r3, r3, #10
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	4313      	orrs	r3, r2
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cff0:	801a      	strh	r2, [r3, #0]
 800cff2:	e020      	b.n	800d036 <USB_ActivateEndpoint+0x30e>
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	691b      	ldr	r3, [r3, #16]
 800cff8:	095b      	lsrs	r3, r3, #5
 800cffa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	691b      	ldr	r3, [r3, #16]
 800d002:	f003 031f 	and.w	r3, r3, #31
 800d006:	2b00      	cmp	r3, #0
 800d008:	d104      	bne.n	800d014 <USB_ActivateEndpoint+0x2ec>
 800d00a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d00e:	3b01      	subs	r3, #1
 800d010:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d016:	881b      	ldrh	r3, [r3, #0]
 800d018:	b29a      	uxth	r2, r3
 800d01a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d01e:	b29b      	uxth	r3, r3
 800d020:	029b      	lsls	r3, r3, #10
 800d022:	b29b      	uxth	r3, r3
 800d024:	4313      	orrs	r3, r2
 800d026:	b29b      	uxth	r3, r3
 800d028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d02c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d030:	b29a      	uxth	r2, r3
 800d032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d034:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d036:	687a      	ldr	r2, [r7, #4]
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	781b      	ldrb	r3, [r3, #0]
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	4413      	add	r3, r2
 800d040:	881b      	ldrh	r3, [r3, #0]
 800d042:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d044:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d01b      	beq.n	800d086 <USB_ActivateEndpoint+0x35e>
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	4413      	add	r3, r2
 800d058:	881b      	ldrh	r3, [r3, #0]
 800d05a:	b29b      	uxth	r3, r3
 800d05c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d064:	843b      	strh	r3, [r7, #32]
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	009b      	lsls	r3, r3, #2
 800d06e:	441a      	add	r2, r3
 800d070:	8c3b      	ldrh	r3, [r7, #32]
 800d072:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d076:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d07a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d07e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d082:	b29b      	uxth	r3, r3
 800d084:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d124      	bne.n	800d0d8 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	4413      	add	r3, r2
 800d098:	881b      	ldrh	r3, [r3, #0]
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d0a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0a4:	83bb      	strh	r3, [r7, #28]
 800d0a6:	8bbb      	ldrh	r3, [r7, #28]
 800d0a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d0ac:	83bb      	strh	r3, [r7, #28]
 800d0ae:	8bbb      	ldrh	r3, [r7, #28]
 800d0b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d0b4:	83bb      	strh	r3, [r7, #28]
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	441a      	add	r2, r3
 800d0c0:	8bbb      	ldrh	r3, [r7, #28]
 800d0c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	8013      	strh	r3, [r2, #0]
 800d0d6:	e306      	b.n	800d6e6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	009b      	lsls	r3, r3, #2
 800d0e0:	4413      	add	r3, r2
 800d0e2:	881b      	ldrh	r3, [r3, #0]
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d0ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0ee:	83fb      	strh	r3, [r7, #30]
 800d0f0:	8bfb      	ldrh	r3, [r7, #30]
 800d0f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d0f6:	83fb      	strh	r3, [r7, #30]
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	441a      	add	r2, r3
 800d102:	8bfb      	ldrh	r3, [r7, #30]
 800d104:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d108:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d10c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d114:	b29b      	uxth	r3, r3
 800d116:	8013      	strh	r3, [r2, #0]
 800d118:	e2e5      	b.n	800d6e6 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	78db      	ldrb	r3, [r3, #3]
 800d11e:	2b02      	cmp	r3, #2
 800d120:	d11e      	bne.n	800d160 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	009b      	lsls	r3, r3, #2
 800d12a:	4413      	add	r3, r2
 800d12c:	881b      	ldrh	r3, [r3, #0]
 800d12e:	b29b      	uxth	r3, r3
 800d130:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d138:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	009b      	lsls	r3, r3, #2
 800d144:	441a      	add	r2, r3
 800d146:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800d14a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d14e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d152:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	8013      	strh	r3, [r2, #0]
 800d15e:	e01d      	b.n	800d19c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	4413      	add	r3, r2
 800d16a:	881b      	ldrh	r3, [r3, #0]
 800d16c:	b29b      	uxth	r3, r3
 800d16e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d176:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800d17a:	687a      	ldr	r2, [r7, #4]
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	009b      	lsls	r3, r3, #2
 800d182:	441a      	add	r2, r3
 800d184:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800d188:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d18c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d190:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d198:	b29b      	uxth	r3, r3
 800d19a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d1ac:	4413      	add	r3, r2
 800d1ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	00da      	lsls	r2, r3, #3
 800d1b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d1b8:	4413      	add	r3, r2
 800d1ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d1be:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	891b      	ldrh	r3, [r3, #8]
 800d1c4:	085b      	lsrs	r3, r3, #1
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	005b      	lsls	r3, r3, #1
 800d1ca:	b29a      	uxth	r2, r3
 800d1cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1ce:	801a      	strh	r2, [r3, #0]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	677b      	str	r3, [r7, #116]	@ 0x74
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1da:	b29b      	uxth	r3, r3
 800d1dc:	461a      	mov	r2, r3
 800d1de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d1e0:	4413      	add	r3, r2
 800d1e2:	677b      	str	r3, [r7, #116]	@ 0x74
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	00da      	lsls	r2, r3, #3
 800d1ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d1ec:	4413      	add	r3, r2
 800d1ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800d1f2:	673b      	str	r3, [r7, #112]	@ 0x70
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	895b      	ldrh	r3, [r3, #10]
 800d1f8:	085b      	lsrs	r3, r3, #1
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	005b      	lsls	r3, r3, #1
 800d1fe:	b29a      	uxth	r2, r3
 800d200:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d202:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	785b      	ldrb	r3, [r3, #1]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	f040 81af 	bne.w	800d56c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	4413      	add	r3, r2
 800d218:	881b      	ldrh	r3, [r3, #0]
 800d21a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800d21e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800d222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d226:	2b00      	cmp	r3, #0
 800d228:	d01d      	beq.n	800d266 <USB_ActivateEndpoint+0x53e>
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	4413      	add	r3, r2
 800d234:	881b      	ldrh	r3, [r3, #0]
 800d236:	b29b      	uxth	r3, r3
 800d238:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d23c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d240:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	781b      	ldrb	r3, [r3, #0]
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	441a      	add	r2, r3
 800d24e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800d252:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d256:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d25a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d25e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d262:	b29b      	uxth	r3, r3
 800d264:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d266:	687a      	ldr	r2, [r7, #4]
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	4413      	add	r3, r2
 800d270:	881b      	ldrh	r3, [r3, #0]
 800d272:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800d276:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800d27a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d01d      	beq.n	800d2be <USB_ActivateEndpoint+0x596>
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	4413      	add	r3, r2
 800d28c:	881b      	ldrh	r3, [r3, #0]
 800d28e:	b29b      	uxth	r3, r3
 800d290:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d298:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	441a      	add	r2, r3
 800d2a6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800d2aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d2ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d2b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d2b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	785b      	ldrb	r3, [r3, #1]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d16b      	bne.n	800d39e <USB_ActivateEndpoint+0x676>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2d6:	4413      	add	r3, r2
 800d2d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	00da      	lsls	r2, r3, #3
 800d2e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2e2:	4413      	add	r3, r2
 800d2e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d2e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2ec:	881b      	ldrh	r3, [r3, #0]
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2f8:	801a      	strh	r2, [r3, #0]
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	691b      	ldr	r3, [r3, #16]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d10a      	bne.n	800d318 <USB_ActivateEndpoint+0x5f0>
 800d302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d304:	881b      	ldrh	r3, [r3, #0]
 800d306:	b29b      	uxth	r3, r3
 800d308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d30c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d310:	b29a      	uxth	r2, r3
 800d312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d314:	801a      	strh	r2, [r3, #0]
 800d316:	e05d      	b.n	800d3d4 <USB_ActivateEndpoint+0x6ac>
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	691b      	ldr	r3, [r3, #16]
 800d31c:	2b3e      	cmp	r3, #62	@ 0x3e
 800d31e:	d81c      	bhi.n	800d35a <USB_ActivateEndpoint+0x632>
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	691b      	ldr	r3, [r3, #16]
 800d324:	085b      	lsrs	r3, r3, #1
 800d326:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	691b      	ldr	r3, [r3, #16]
 800d32e:	f003 0301 	and.w	r3, r3, #1
 800d332:	2b00      	cmp	r3, #0
 800d334:	d004      	beq.n	800d340 <USB_ActivateEndpoint+0x618>
 800d336:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d33a:	3301      	adds	r3, #1
 800d33c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d340:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d342:	881b      	ldrh	r3, [r3, #0]
 800d344:	b29a      	uxth	r2, r3
 800d346:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	029b      	lsls	r3, r3, #10
 800d34e:	b29b      	uxth	r3, r3
 800d350:	4313      	orrs	r3, r2
 800d352:	b29a      	uxth	r2, r3
 800d354:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d356:	801a      	strh	r2, [r3, #0]
 800d358:	e03c      	b.n	800d3d4 <USB_ActivateEndpoint+0x6ac>
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	691b      	ldr	r3, [r3, #16]
 800d35e:	095b      	lsrs	r3, r3, #5
 800d360:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	691b      	ldr	r3, [r3, #16]
 800d368:	f003 031f 	and.w	r3, r3, #31
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d104      	bne.n	800d37a <USB_ActivateEndpoint+0x652>
 800d370:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d374:	3b01      	subs	r3, #1
 800d376:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d37a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d37c:	881b      	ldrh	r3, [r3, #0]
 800d37e:	b29a      	uxth	r2, r3
 800d380:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d384:	b29b      	uxth	r3, r3
 800d386:	029b      	lsls	r3, r3, #10
 800d388:	b29b      	uxth	r3, r3
 800d38a:	4313      	orrs	r3, r2
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d396:	b29a      	uxth	r2, r3
 800d398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d39a:	801a      	strh	r2, [r3, #0]
 800d39c:	e01a      	b.n	800d3d4 <USB_ActivateEndpoint+0x6ac>
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	785b      	ldrb	r3, [r3, #1]
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d116      	bne.n	800d3d4 <USB_ActivateEndpoint+0x6ac>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	657b      	str	r3, [r7, #84]	@ 0x54
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3b6:	4413      	add	r3, r2
 800d3b8:	657b      	str	r3, [r7, #84]	@ 0x54
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	00da      	lsls	r2, r3, #3
 800d3c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3c2:	4413      	add	r3, r2
 800d3c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d3c8:	653b      	str	r3, [r7, #80]	@ 0x50
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	691b      	ldr	r3, [r3, #16]
 800d3ce:	b29a      	uxth	r2, r3
 800d3d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3d2:	801a      	strh	r2, [r3, #0]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	785b      	ldrb	r3, [r3, #1]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d16b      	bne.n	800d4b8 <USB_ActivateEndpoint+0x790>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3f0:	4413      	add	r3, r2
 800d3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	00da      	lsls	r2, r3, #3
 800d3fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3fc:	4413      	add	r3, r2
 800d3fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d402:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d406:	881b      	ldrh	r3, [r3, #0]
 800d408:	b29b      	uxth	r3, r3
 800d40a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d40e:	b29a      	uxth	r2, r3
 800d410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d412:	801a      	strh	r2, [r3, #0]
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	691b      	ldr	r3, [r3, #16]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d10a      	bne.n	800d432 <USB_ActivateEndpoint+0x70a>
 800d41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d41e:	881b      	ldrh	r3, [r3, #0]
 800d420:	b29b      	uxth	r3, r3
 800d422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d42a:	b29a      	uxth	r2, r3
 800d42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d42e:	801a      	strh	r2, [r3, #0]
 800d430:	e05b      	b.n	800d4ea <USB_ActivateEndpoint+0x7c2>
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	691b      	ldr	r3, [r3, #16]
 800d436:	2b3e      	cmp	r3, #62	@ 0x3e
 800d438:	d81c      	bhi.n	800d474 <USB_ActivateEndpoint+0x74c>
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	691b      	ldr	r3, [r3, #16]
 800d43e:	085b      	lsrs	r3, r3, #1
 800d440:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	691b      	ldr	r3, [r3, #16]
 800d448:	f003 0301 	and.w	r3, r3, #1
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d004      	beq.n	800d45a <USB_ActivateEndpoint+0x732>
 800d450:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d454:	3301      	adds	r3, #1
 800d456:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d45c:	881b      	ldrh	r3, [r3, #0]
 800d45e:	b29a      	uxth	r2, r3
 800d460:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d464:	b29b      	uxth	r3, r3
 800d466:	029b      	lsls	r3, r3, #10
 800d468:	b29b      	uxth	r3, r3
 800d46a:	4313      	orrs	r3, r2
 800d46c:	b29a      	uxth	r2, r3
 800d46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d470:	801a      	strh	r2, [r3, #0]
 800d472:	e03a      	b.n	800d4ea <USB_ActivateEndpoint+0x7c2>
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	691b      	ldr	r3, [r3, #16]
 800d478:	095b      	lsrs	r3, r3, #5
 800d47a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	691b      	ldr	r3, [r3, #16]
 800d482:	f003 031f 	and.w	r3, r3, #31
 800d486:	2b00      	cmp	r3, #0
 800d488:	d104      	bne.n	800d494 <USB_ActivateEndpoint+0x76c>
 800d48a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d48e:	3b01      	subs	r3, #1
 800d490:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d496:	881b      	ldrh	r3, [r3, #0]
 800d498:	b29a      	uxth	r2, r3
 800d49a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	029b      	lsls	r3, r3, #10
 800d4a2:	b29b      	uxth	r3, r3
 800d4a4:	4313      	orrs	r3, r2
 800d4a6:	b29b      	uxth	r3, r3
 800d4a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4b4:	801a      	strh	r2, [r3, #0]
 800d4b6:	e018      	b.n	800d4ea <USB_ActivateEndpoint+0x7c2>
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	785b      	ldrb	r3, [r3, #1]
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d114      	bne.n	800d4ea <USB_ActivateEndpoint+0x7c2>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4c6:	b29b      	uxth	r3, r3
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4cc:	4413      	add	r3, r2
 800d4ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	781b      	ldrb	r3, [r3, #0]
 800d4d4:	00da      	lsls	r2, r3, #3
 800d4d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4d8:	4413      	add	r3, r2
 800d4da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d4de:	643b      	str	r3, [r7, #64]	@ 0x40
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	691b      	ldr	r3, [r3, #16]
 800d4e4:	b29a      	uxth	r2, r3
 800d4e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4e8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d4ea:	687a      	ldr	r2, [r7, #4]
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	4413      	add	r3, r2
 800d4f4:	881b      	ldrh	r3, [r3, #0]
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d4fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d500:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d502:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d504:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d508:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d50a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d50c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d510:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	441a      	add	r2, r3
 800d51c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d51e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d522:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d526:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d52a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d52e:	b29b      	uxth	r3, r3
 800d530:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	009b      	lsls	r3, r3, #2
 800d53a:	4413      	add	r3, r2
 800d53c:	881b      	ldrh	r3, [r3, #0]
 800d53e:	b29b      	uxth	r3, r3
 800d540:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d544:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d548:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800d54a:	687a      	ldr	r2, [r7, #4]
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	009b      	lsls	r3, r3, #2
 800d552:	441a      	add	r2, r3
 800d554:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d556:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d55a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d55e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d566:	b29b      	uxth	r3, r3
 800d568:	8013      	strh	r3, [r2, #0]
 800d56a:	e0bc      	b.n	800d6e6 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	009b      	lsls	r3, r3, #2
 800d574:	4413      	add	r3, r2
 800d576:	881b      	ldrh	r3, [r3, #0]
 800d578:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800d57c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d584:	2b00      	cmp	r3, #0
 800d586:	d01d      	beq.n	800d5c4 <USB_ActivateEndpoint+0x89c>
 800d588:	687a      	ldr	r2, [r7, #4]
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	4413      	add	r3, r2
 800d592:	881b      	ldrh	r3, [r3, #0]
 800d594:	b29b      	uxth	r3, r3
 800d596:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d59a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d59e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800d5a2:	687a      	ldr	r2, [r7, #4]
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	009b      	lsls	r3, r3, #2
 800d5aa:	441a      	add	r2, r3
 800d5ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d5b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d5b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d5b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d5bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5c0:	b29b      	uxth	r3, r3
 800d5c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	4413      	add	r3, r2
 800d5ce:	881b      	ldrh	r3, [r3, #0]
 800d5d0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800d5d4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800d5d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d01d      	beq.n	800d61c <USB_ActivateEndpoint+0x8f4>
 800d5e0:	687a      	ldr	r2, [r7, #4]
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	4413      	add	r3, r2
 800d5ea:	881b      	ldrh	r3, [r3, #0]
 800d5ec:	b29b      	uxth	r3, r3
 800d5ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d5f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d5f6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	441a      	add	r2, r3
 800d604:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800d608:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d60c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d610:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d614:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d618:	b29b      	uxth	r3, r3
 800d61a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	78db      	ldrb	r3, [r3, #3]
 800d620:	2b01      	cmp	r3, #1
 800d622:	d024      	beq.n	800d66e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	4413      	add	r3, r2
 800d62e:	881b      	ldrh	r3, [r3, #0]
 800d630:	b29b      	uxth	r3, r3
 800d632:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d63a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d63e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d642:	f083 0320 	eor.w	r3, r3, #32
 800d646:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	009b      	lsls	r3, r3, #2
 800d652:	441a      	add	r2, r3
 800d654:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d658:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d65c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d660:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d668:	b29b      	uxth	r3, r3
 800d66a:	8013      	strh	r3, [r2, #0]
 800d66c:	e01d      	b.n	800d6aa <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	4413      	add	r3, r2
 800d678:	881b      	ldrh	r3, [r3, #0]
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d684:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800d688:	687a      	ldr	r2, [r7, #4]
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	441a      	add	r2, r3
 800d692:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800d696:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d69a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d69e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d6aa:	687a      	ldr	r2, [r7, #4]
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	009b      	lsls	r3, r3, #2
 800d6b2:	4413      	add	r3, r2
 800d6b4:	881b      	ldrh	r3, [r3, #0]
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d6bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6c0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	009b      	lsls	r3, r3, #2
 800d6cc:	441a      	add	r2, r3
 800d6ce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d6d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d6e6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	379c      	adds	r7, #156	@ 0x9c
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop

0800d6f8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b0ac      	sub	sp, #176	@ 0xb0
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	785b      	ldrb	r3, [r3, #1]
 800d706:	2b01      	cmp	r3, #1
 800d708:	f040 84ca 	bne.w	800e0a0 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	699a      	ldr	r2, [r3, #24]
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	691b      	ldr	r3, [r3, #16]
 800d714:	429a      	cmp	r2, r3
 800d716:	d904      	bls.n	800d722 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	691b      	ldr	r3, [r3, #16]
 800d71c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d720:	e003      	b.n	800d72a <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	699b      	ldr	r3, [r3, #24]
 800d726:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	7b1b      	ldrb	r3, [r3, #12]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d122      	bne.n	800d778 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	6959      	ldr	r1, [r3, #20]
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	88da      	ldrh	r2, [r3, #6]
 800d73a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d73e:	b29b      	uxth	r3, r3
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 fed2 	bl	800e4ea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	613b      	str	r3, [r7, #16]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d750:	b29b      	uxth	r3, r3
 800d752:	461a      	mov	r2, r3
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	4413      	add	r3, r2
 800d758:	613b      	str	r3, [r7, #16]
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	00da      	lsls	r2, r3, #3
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	4413      	add	r3, r2
 800d764:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d768:	60fb      	str	r3, [r7, #12]
 800d76a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d76e:	b29a      	uxth	r2, r3
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	801a      	strh	r2, [r3, #0]
 800d774:	f000 bc6f 	b.w	800e056 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	78db      	ldrb	r3, [r3, #3]
 800d77c:	2b02      	cmp	r3, #2
 800d77e:	f040 831e 	bne.w	800ddbe <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	6a1a      	ldr	r2, [r3, #32]
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	691b      	ldr	r3, [r3, #16]
 800d78a:	429a      	cmp	r2, r3
 800d78c:	f240 82cf 	bls.w	800dd2e <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d790:	687a      	ldr	r2, [r7, #4]
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	009b      	lsls	r3, r3, #2
 800d798:	4413      	add	r3, r2
 800d79a:	881b      	ldrh	r3, [r3, #0]
 800d79c:	b29b      	uxth	r3, r3
 800d79e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d7a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7a6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	009b      	lsls	r3, r3, #2
 800d7b2:	441a      	add	r2, r3
 800d7b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d7b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d7bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7c0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d7c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	6a1a      	ldr	r2, [r3, #32]
 800d7d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7d4:	1ad2      	subs	r2, r2, r3
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	009b      	lsls	r3, r3, #2
 800d7e2:	4413      	add	r3, r2
 800d7e4:	881b      	ldrh	r3, [r3, #0]
 800d7e6:	b29b      	uxth	r3, r3
 800d7e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	f000 814f 	beq.w	800da90 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	785b      	ldrb	r3, [r3, #1]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d16b      	bne.n	800d8d6 <USB_EPStartXfer+0x1de>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d808:	b29b      	uxth	r3, r3
 800d80a:	461a      	mov	r2, r3
 800d80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d80e:	4413      	add	r3, r2
 800d810:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	00da      	lsls	r2, r3, #3
 800d818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d81a:	4413      	add	r3, r2
 800d81c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d820:	627b      	str	r3, [r7, #36]	@ 0x24
 800d822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d824:	881b      	ldrh	r3, [r3, #0]
 800d826:	b29b      	uxth	r3, r3
 800d828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d82c:	b29a      	uxth	r2, r3
 800d82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d830:	801a      	strh	r2, [r3, #0]
 800d832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d836:	2b00      	cmp	r3, #0
 800d838:	d10a      	bne.n	800d850 <USB_EPStartXfer+0x158>
 800d83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d83c:	881b      	ldrh	r3, [r3, #0]
 800d83e:	b29b      	uxth	r3, r3
 800d840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d848:	b29a      	uxth	r2, r3
 800d84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84c:	801a      	strh	r2, [r3, #0]
 800d84e:	e05b      	b.n	800d908 <USB_EPStartXfer+0x210>
 800d850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d854:	2b3e      	cmp	r3, #62	@ 0x3e
 800d856:	d81c      	bhi.n	800d892 <USB_EPStartXfer+0x19a>
 800d858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d85c:	085b      	lsrs	r3, r3, #1
 800d85e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d866:	f003 0301 	and.w	r3, r3, #1
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d004      	beq.n	800d878 <USB_EPStartXfer+0x180>
 800d86e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d872:	3301      	adds	r3, #1
 800d874:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d87a:	881b      	ldrh	r3, [r3, #0]
 800d87c:	b29a      	uxth	r2, r3
 800d87e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d882:	b29b      	uxth	r3, r3
 800d884:	029b      	lsls	r3, r3, #10
 800d886:	b29b      	uxth	r3, r3
 800d888:	4313      	orrs	r3, r2
 800d88a:	b29a      	uxth	r2, r3
 800d88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d88e:	801a      	strh	r2, [r3, #0]
 800d890:	e03a      	b.n	800d908 <USB_EPStartXfer+0x210>
 800d892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d896:	095b      	lsrs	r3, r3, #5
 800d898:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d89c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d8a0:	f003 031f 	and.w	r3, r3, #31
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d104      	bne.n	800d8b2 <USB_EPStartXfer+0x1ba>
 800d8a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8ac:	3b01      	subs	r3, #1
 800d8ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b4:	881b      	ldrh	r3, [r3, #0]
 800d8b6:	b29a      	uxth	r2, r3
 800d8b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	029b      	lsls	r3, r3, #10
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	4313      	orrs	r3, r2
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8ce:	b29a      	uxth	r2, r3
 800d8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d2:	801a      	strh	r2, [r3, #0]
 800d8d4:	e018      	b.n	800d908 <USB_EPStartXfer+0x210>
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	785b      	ldrb	r3, [r3, #1]
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d114      	bne.n	800d908 <USB_EPStartXfer+0x210>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ea:	4413      	add	r3, r2
 800d8ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	00da      	lsls	r2, r3, #3
 800d8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8f6:	4413      	add	r3, r2
 800d8f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d8fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d8fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d902:	b29a      	uxth	r2, r3
 800d904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d906:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	895b      	ldrh	r3, [r3, #10]
 800d90c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	6959      	ldr	r1, [r3, #20]
 800d914:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d918:	b29b      	uxth	r3, r3
 800d91a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f000 fde3 	bl	800e4ea <USB_WritePMA>
            ep->xfer_buff += len;
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	695a      	ldr	r2, [r3, #20]
 800d928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d92c:	441a      	add	r2, r3
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	6a1a      	ldr	r2, [r3, #32]
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	691b      	ldr	r3, [r3, #16]
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d907      	bls.n	800d94e <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	6a1a      	ldr	r2, [r3, #32]
 800d942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d946:	1ad2      	subs	r2, r2, r3
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	621a      	str	r2, [r3, #32]
 800d94c:	e006      	b.n	800d95c <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	6a1b      	ldr	r3, [r3, #32]
 800d952:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	2200      	movs	r2, #0
 800d95a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	785b      	ldrb	r3, [r3, #1]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d16b      	bne.n	800da3c <USB_EPStartXfer+0x344>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	61bb      	str	r3, [r7, #24]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d96e:	b29b      	uxth	r3, r3
 800d970:	461a      	mov	r2, r3
 800d972:	69bb      	ldr	r3, [r7, #24]
 800d974:	4413      	add	r3, r2
 800d976:	61bb      	str	r3, [r7, #24]
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	00da      	lsls	r2, r3, #3
 800d97e:	69bb      	ldr	r3, [r7, #24]
 800d980:	4413      	add	r3, r2
 800d982:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d986:	617b      	str	r3, [r7, #20]
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	881b      	ldrh	r3, [r3, #0]
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d992:	b29a      	uxth	r2, r3
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	801a      	strh	r2, [r3, #0]
 800d998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d10a      	bne.n	800d9b6 <USB_EPStartXfer+0x2be>
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	881b      	ldrh	r3, [r3, #0]
 800d9a4:	b29b      	uxth	r3, r3
 800d9a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9ae:	b29a      	uxth	r2, r3
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	801a      	strh	r2, [r3, #0]
 800d9b4:	e05d      	b.n	800da72 <USB_EPStartXfer+0x37a>
 800d9b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9ba:	2b3e      	cmp	r3, #62	@ 0x3e
 800d9bc:	d81c      	bhi.n	800d9f8 <USB_EPStartXfer+0x300>
 800d9be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9c2:	085b      	lsrs	r3, r3, #1
 800d9c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d9c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9cc:	f003 0301 	and.w	r3, r3, #1
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d004      	beq.n	800d9de <USB_EPStartXfer+0x2e6>
 800d9d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d9d8:	3301      	adds	r3, #1
 800d9da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	881b      	ldrh	r3, [r3, #0]
 800d9e2:	b29a      	uxth	r2, r3
 800d9e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	029b      	lsls	r3, r3, #10
 800d9ec:	b29b      	uxth	r3, r3
 800d9ee:	4313      	orrs	r3, r2
 800d9f0:	b29a      	uxth	r2, r3
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	801a      	strh	r2, [r3, #0]
 800d9f6:	e03c      	b.n	800da72 <USB_EPStartXfer+0x37a>
 800d9f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9fc:	095b      	lsrs	r3, r3, #5
 800d9fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800da02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da06:	f003 031f 	and.w	r3, r3, #31
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d104      	bne.n	800da18 <USB_EPStartXfer+0x320>
 800da0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800da12:	3b01      	subs	r3, #1
 800da14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	881b      	ldrh	r3, [r3, #0]
 800da1c:	b29a      	uxth	r2, r3
 800da1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800da22:	b29b      	uxth	r3, r3
 800da24:	029b      	lsls	r3, r3, #10
 800da26:	b29b      	uxth	r3, r3
 800da28:	4313      	orrs	r3, r2
 800da2a:	b29b      	uxth	r3, r3
 800da2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da34:	b29a      	uxth	r2, r3
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	801a      	strh	r2, [r3, #0]
 800da3a:	e01a      	b.n	800da72 <USB_EPStartXfer+0x37a>
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	785b      	ldrb	r3, [r3, #1]
 800da40:	2b01      	cmp	r3, #1
 800da42:	d116      	bne.n	800da72 <USB_EPStartXfer+0x37a>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	623b      	str	r3, [r7, #32]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da4e:	b29b      	uxth	r3, r3
 800da50:	461a      	mov	r2, r3
 800da52:	6a3b      	ldr	r3, [r7, #32]
 800da54:	4413      	add	r3, r2
 800da56:	623b      	str	r3, [r7, #32]
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	00da      	lsls	r2, r3, #3
 800da5e:	6a3b      	ldr	r3, [r7, #32]
 800da60:	4413      	add	r3, r2
 800da62:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800da66:	61fb      	str	r3, [r7, #28]
 800da68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da6c:	b29a      	uxth	r2, r3
 800da6e:	69fb      	ldr	r3, [r7, #28]
 800da70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	891b      	ldrh	r3, [r3, #8]
 800da76:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	6959      	ldr	r1, [r3, #20]
 800da7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da82:	b29b      	uxth	r3, r3
 800da84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f000 fd2e 	bl	800e4ea <USB_WritePMA>
 800da8e:	e2e2      	b.n	800e056 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	785b      	ldrb	r3, [r3, #1]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d16b      	bne.n	800db70 <USB_EPStartXfer+0x478>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800daa2:	b29b      	uxth	r3, r3
 800daa4:	461a      	mov	r2, r3
 800daa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800daa8:	4413      	add	r3, r2
 800daaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	00da      	lsls	r2, r3, #3
 800dab2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dab4:	4413      	add	r3, r2
 800dab6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800daba:	647b      	str	r3, [r7, #68]	@ 0x44
 800dabc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dabe:	881b      	ldrh	r3, [r3, #0]
 800dac0:	b29b      	uxth	r3, r3
 800dac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dac6:	b29a      	uxth	r2, r3
 800dac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800daca:	801a      	strh	r2, [r3, #0]
 800dacc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d10a      	bne.n	800daea <USB_EPStartXfer+0x3f2>
 800dad4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dad6:	881b      	ldrh	r3, [r3, #0]
 800dad8:	b29b      	uxth	r3, r3
 800dada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dae2:	b29a      	uxth	r2, r3
 800dae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dae6:	801a      	strh	r2, [r3, #0]
 800dae8:	e05d      	b.n	800dba6 <USB_EPStartXfer+0x4ae>
 800daea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800daee:	2b3e      	cmp	r3, #62	@ 0x3e
 800daf0:	d81c      	bhi.n	800db2c <USB_EPStartXfer+0x434>
 800daf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800daf6:	085b      	lsrs	r3, r3, #1
 800daf8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dafc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db00:	f003 0301 	and.w	r3, r3, #1
 800db04:	2b00      	cmp	r3, #0
 800db06:	d004      	beq.n	800db12 <USB_EPStartXfer+0x41a>
 800db08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800db0c:	3301      	adds	r3, #1
 800db0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800db12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db14:	881b      	ldrh	r3, [r3, #0]
 800db16:	b29a      	uxth	r2, r3
 800db18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	029b      	lsls	r3, r3, #10
 800db20:	b29b      	uxth	r3, r3
 800db22:	4313      	orrs	r3, r2
 800db24:	b29a      	uxth	r2, r3
 800db26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db28:	801a      	strh	r2, [r3, #0]
 800db2a:	e03c      	b.n	800dba6 <USB_EPStartXfer+0x4ae>
 800db2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db30:	095b      	lsrs	r3, r3, #5
 800db32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800db36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db3a:	f003 031f 	and.w	r3, r3, #31
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d104      	bne.n	800db4c <USB_EPStartXfer+0x454>
 800db42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800db46:	3b01      	subs	r3, #1
 800db48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800db4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db4e:	881b      	ldrh	r3, [r3, #0]
 800db50:	b29a      	uxth	r2, r3
 800db52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800db56:	b29b      	uxth	r3, r3
 800db58:	029b      	lsls	r3, r3, #10
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	4313      	orrs	r3, r2
 800db5e:	b29b      	uxth	r3, r3
 800db60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db68:	b29a      	uxth	r2, r3
 800db6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db6c:	801a      	strh	r2, [r3, #0]
 800db6e:	e01a      	b.n	800dba6 <USB_EPStartXfer+0x4ae>
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	785b      	ldrb	r3, [r3, #1]
 800db74:	2b01      	cmp	r3, #1
 800db76:	d116      	bne.n	800dba6 <USB_EPStartXfer+0x4ae>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	653b      	str	r3, [r7, #80]	@ 0x50
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db82:	b29b      	uxth	r3, r3
 800db84:	461a      	mov	r2, r3
 800db86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db88:	4413      	add	r3, r2
 800db8a:	653b      	str	r3, [r7, #80]	@ 0x50
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	00da      	lsls	r2, r3, #3
 800db92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db94:	4413      	add	r3, r2
 800db96:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800db9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800db9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dba0:	b29a      	uxth	r2, r3
 800dba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dba4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	891b      	ldrh	r3, [r3, #8]
 800dbaa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	6959      	ldr	r1, [r3, #20]
 800dbb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f000 fc94 	bl	800e4ea <USB_WritePMA>
            ep->xfer_buff += len;
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	695a      	ldr	r2, [r3, #20]
 800dbc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dbca:	441a      	add	r2, r3
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	6a1a      	ldr	r2, [r3, #32]
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	691b      	ldr	r3, [r3, #16]
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d907      	bls.n	800dbec <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	6a1a      	ldr	r2, [r3, #32]
 800dbe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dbe4:	1ad2      	subs	r2, r2, r3
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	621a      	str	r2, [r3, #32]
 800dbea:	e006      	b.n	800dbfa <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	6a1b      	ldr	r3, [r3, #32]
 800dbf0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	643b      	str	r3, [r7, #64]	@ 0x40
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	785b      	ldrb	r3, [r3, #1]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d16b      	bne.n	800dcde <USB_EPStartXfer+0x5e6>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	461a      	mov	r2, r3
 800dc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc16:	4413      	add	r3, r2
 800dc18:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	00da      	lsls	r2, r3, #3
 800dc20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc22:	4413      	add	r3, r2
 800dc24:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dc28:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc2c:	881b      	ldrh	r3, [r3, #0]
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc34:	b29a      	uxth	r2, r3
 800dc36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc38:	801a      	strh	r2, [r3, #0]
 800dc3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d10a      	bne.n	800dc58 <USB_EPStartXfer+0x560>
 800dc42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc44:	881b      	ldrh	r3, [r3, #0]
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc54:	801a      	strh	r2, [r3, #0]
 800dc56:	e05b      	b.n	800dd10 <USB_EPStartXfer+0x618>
 800dc58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc5c:	2b3e      	cmp	r3, #62	@ 0x3e
 800dc5e:	d81c      	bhi.n	800dc9a <USB_EPStartXfer+0x5a2>
 800dc60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc64:	085b      	lsrs	r3, r3, #1
 800dc66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dc6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc6e:	f003 0301 	and.w	r3, r3, #1
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d004      	beq.n	800dc80 <USB_EPStartXfer+0x588>
 800dc76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dc80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc82:	881b      	ldrh	r3, [r3, #0]
 800dc84:	b29a      	uxth	r2, r3
 800dc86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	029b      	lsls	r3, r3, #10
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	4313      	orrs	r3, r2
 800dc92:	b29a      	uxth	r2, r3
 800dc94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc96:	801a      	strh	r2, [r3, #0]
 800dc98:	e03a      	b.n	800dd10 <USB_EPStartXfer+0x618>
 800dc9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc9e:	095b      	lsrs	r3, r3, #5
 800dca0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dca4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dca8:	f003 031f 	and.w	r3, r3, #31
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d104      	bne.n	800dcba <USB_EPStartXfer+0x5c2>
 800dcb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dcb4:	3b01      	subs	r3, #1
 800dcb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dcba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcbc:	881b      	ldrh	r3, [r3, #0]
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	029b      	lsls	r3, r3, #10
 800dcc8:	b29b      	uxth	r3, r3
 800dcca:	4313      	orrs	r3, r2
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcd6:	b29a      	uxth	r2, r3
 800dcd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcda:	801a      	strh	r2, [r3, #0]
 800dcdc:	e018      	b.n	800dd10 <USB_EPStartXfer+0x618>
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	785b      	ldrb	r3, [r3, #1]
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d114      	bne.n	800dd10 <USB_EPStartXfer+0x618>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	461a      	mov	r2, r3
 800dcf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcf2:	4413      	add	r3, r2
 800dcf4:	643b      	str	r3, [r7, #64]	@ 0x40
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	00da      	lsls	r2, r3, #3
 800dcfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcfe:	4413      	add	r3, r2
 800dd00:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dd04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd0a:	b29a      	uxth	r2, r3
 800dd0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	895b      	ldrh	r3, [r3, #10]
 800dd14:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	6959      	ldr	r1, [r3, #20]
 800dd1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f000 fbdf 	bl	800e4ea <USB_WritePMA>
 800dd2c:	e193      	b.n	800e056 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	6a1b      	ldr	r3, [r3, #32]
 800dd32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800dd36:	687a      	ldr	r2, [r7, #4]
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	781b      	ldrb	r3, [r3, #0]
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	4413      	add	r3, r2
 800dd40:	881b      	ldrh	r3, [r3, #0]
 800dd42:	b29b      	uxth	r3, r3
 800dd44:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800dd48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd4c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	009b      	lsls	r3, r3, #2
 800dd58:	441a      	add	r2, r3
 800dd5a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800dd5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	461a      	mov	r2, r3
 800dd80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd82:	4413      	add	r3, r2
 800dd84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	00da      	lsls	r2, r3, #3
 800dd8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd8e:	4413      	add	r3, r2
 800dd90:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dd94:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dd96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd9a:	b29a      	uxth	r2, r3
 800dd9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd9e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	891b      	ldrh	r3, [r3, #8]
 800dda4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	6959      	ldr	r1, [r3, #20]
 800ddac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f000 fb97 	bl	800e4ea <USB_WritePMA>
 800ddbc:	e14b      	b.n	800e056 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	6a1a      	ldr	r2, [r3, #32]
 800ddc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ddc6:	1ad2      	subs	r2, r2, r3
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ddcc:	687a      	ldr	r2, [r7, #4]
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	009b      	lsls	r3, r3, #2
 800ddd4:	4413      	add	r3, r2
 800ddd6:	881b      	ldrh	r3, [r3, #0]
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	f000 809a 	beq.w	800df18 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	673b      	str	r3, [r7, #112]	@ 0x70
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	785b      	ldrb	r3, [r3, #1]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d16b      	bne.n	800dec8 <USB_EPStartXfer+0x7d0>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de00:	4413      	add	r3, r2
 800de02:	66bb      	str	r3, [r7, #104]	@ 0x68
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	00da      	lsls	r2, r3, #3
 800de0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de0c:	4413      	add	r3, r2
 800de0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800de12:	667b      	str	r3, [r7, #100]	@ 0x64
 800de14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de16:	881b      	ldrh	r3, [r3, #0]
 800de18:	b29b      	uxth	r3, r3
 800de1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800de1e:	b29a      	uxth	r2, r3
 800de20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de22:	801a      	strh	r2, [r3, #0]
 800de24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d10a      	bne.n	800de42 <USB_EPStartXfer+0x74a>
 800de2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de2e:	881b      	ldrh	r3, [r3, #0]
 800de30:	b29b      	uxth	r3, r3
 800de32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de3a:	b29a      	uxth	r2, r3
 800de3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de3e:	801a      	strh	r2, [r3, #0]
 800de40:	e05b      	b.n	800defa <USB_EPStartXfer+0x802>
 800de42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de46:	2b3e      	cmp	r3, #62	@ 0x3e
 800de48:	d81c      	bhi.n	800de84 <USB_EPStartXfer+0x78c>
 800de4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de4e:	085b      	lsrs	r3, r3, #1
 800de50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800de54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de58:	f003 0301 	and.w	r3, r3, #1
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d004      	beq.n	800de6a <USB_EPStartXfer+0x772>
 800de60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800de64:	3301      	adds	r3, #1
 800de66:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800de6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de6c:	881b      	ldrh	r3, [r3, #0]
 800de6e:	b29a      	uxth	r2, r3
 800de70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800de74:	b29b      	uxth	r3, r3
 800de76:	029b      	lsls	r3, r3, #10
 800de78:	b29b      	uxth	r3, r3
 800de7a:	4313      	orrs	r3, r2
 800de7c:	b29a      	uxth	r2, r3
 800de7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de80:	801a      	strh	r2, [r3, #0]
 800de82:	e03a      	b.n	800defa <USB_EPStartXfer+0x802>
 800de84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de88:	095b      	lsrs	r3, r3, #5
 800de8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800de8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de92:	f003 031f 	and.w	r3, r3, #31
 800de96:	2b00      	cmp	r3, #0
 800de98:	d104      	bne.n	800dea4 <USB_EPStartXfer+0x7ac>
 800de9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800de9e:	3b01      	subs	r3, #1
 800dea0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800dea4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dea6:	881b      	ldrh	r3, [r3, #0]
 800dea8:	b29a      	uxth	r2, r3
 800deaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800deae:	b29b      	uxth	r3, r3
 800deb0:	029b      	lsls	r3, r3, #10
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	4313      	orrs	r3, r2
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800debc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dec0:	b29a      	uxth	r2, r3
 800dec2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dec4:	801a      	strh	r2, [r3, #0]
 800dec6:	e018      	b.n	800defa <USB_EPStartXfer+0x802>
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	785b      	ldrb	r3, [r3, #1]
 800decc:	2b01      	cmp	r3, #1
 800dece:	d114      	bne.n	800defa <USB_EPStartXfer+0x802>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	461a      	mov	r2, r3
 800deda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dedc:	4413      	add	r3, r2
 800dede:	673b      	str	r3, [r7, #112]	@ 0x70
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	00da      	lsls	r2, r3, #3
 800dee6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dee8:	4413      	add	r3, r2
 800deea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800deee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800def0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800def4:	b29a      	uxth	r2, r3
 800def6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800def8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	895b      	ldrh	r3, [r3, #10]
 800defe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	6959      	ldr	r1, [r3, #20]
 800df06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f000 faea 	bl	800e4ea <USB_WritePMA>
 800df16:	e09e      	b.n	800e056 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	785b      	ldrb	r3, [r3, #1]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d16b      	bne.n	800dff8 <USB_EPStartXfer+0x900>
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df2a:	b29b      	uxth	r3, r3
 800df2c:	461a      	mov	r2, r3
 800df2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800df30:	4413      	add	r3, r2
 800df32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	00da      	lsls	r2, r3, #3
 800df3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800df3c:	4413      	add	r3, r2
 800df3e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800df42:	67bb      	str	r3, [r7, #120]	@ 0x78
 800df44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df46:	881b      	ldrh	r3, [r3, #0]
 800df48:	b29b      	uxth	r3, r3
 800df4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800df4e:	b29a      	uxth	r2, r3
 800df50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df52:	801a      	strh	r2, [r3, #0]
 800df54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d10a      	bne.n	800df72 <USB_EPStartXfer+0x87a>
 800df5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df5e:	881b      	ldrh	r3, [r3, #0]
 800df60:	b29b      	uxth	r3, r3
 800df62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df6e:	801a      	strh	r2, [r3, #0]
 800df70:	e063      	b.n	800e03a <USB_EPStartXfer+0x942>
 800df72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df76:	2b3e      	cmp	r3, #62	@ 0x3e
 800df78:	d81c      	bhi.n	800dfb4 <USB_EPStartXfer+0x8bc>
 800df7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df7e:	085b      	lsrs	r3, r3, #1
 800df80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800df84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df88:	f003 0301 	and.w	r3, r3, #1
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d004      	beq.n	800df9a <USB_EPStartXfer+0x8a2>
 800df90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800df94:	3301      	adds	r3, #1
 800df96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800df9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df9c:	881b      	ldrh	r3, [r3, #0]
 800df9e:	b29a      	uxth	r2, r3
 800dfa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	029b      	lsls	r3, r3, #10
 800dfa8:	b29b      	uxth	r3, r3
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	b29a      	uxth	r2, r3
 800dfae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dfb0:	801a      	strh	r2, [r3, #0]
 800dfb2:	e042      	b.n	800e03a <USB_EPStartXfer+0x942>
 800dfb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfb8:	095b      	lsrs	r3, r3, #5
 800dfba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dfbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfc2:	f003 031f 	and.w	r3, r3, #31
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d104      	bne.n	800dfd4 <USB_EPStartXfer+0x8dc>
 800dfca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800dfce:	3b01      	subs	r3, #1
 800dfd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dfd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dfd6:	881b      	ldrh	r3, [r3, #0]
 800dfd8:	b29a      	uxth	r2, r3
 800dfda:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	029b      	lsls	r3, r3, #10
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dfec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dff0:	b29a      	uxth	r2, r3
 800dff2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dff4:	801a      	strh	r2, [r3, #0]
 800dff6:	e020      	b.n	800e03a <USB_EPStartXfer+0x942>
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	785b      	ldrb	r3, [r3, #1]
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	d11c      	bne.n	800e03a <USB_EPStartXfer+0x942>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	461a      	mov	r2, r3
 800e010:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e014:	4413      	add	r3, r2
 800e016:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	00da      	lsls	r2, r3, #3
 800e020:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e024:	4413      	add	r3, r2
 800e026:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e02a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e02e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e032:	b29a      	uxth	r2, r3
 800e034:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e038:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	891b      	ldrh	r3, [r3, #8]
 800e03e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	6959      	ldr	r1, [r3, #20]
 800e046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f000 fa4a 	bl	800e4ea <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800e056:	687a      	ldr	r2, [r7, #4]
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	009b      	lsls	r3, r3, #2
 800e05e:	4413      	add	r3, r2
 800e060:	881b      	ldrh	r3, [r3, #0]
 800e062:	b29b      	uxth	r3, r3
 800e064:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e068:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e06c:	817b      	strh	r3, [r7, #10]
 800e06e:	897b      	ldrh	r3, [r7, #10]
 800e070:	f083 0310 	eor.w	r3, r3, #16
 800e074:	817b      	strh	r3, [r7, #10]
 800e076:	897b      	ldrh	r3, [r7, #10]
 800e078:	f083 0320 	eor.w	r3, r3, #32
 800e07c:	817b      	strh	r3, [r7, #10]
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	441a      	add	r2, r3
 800e088:	897b      	ldrh	r3, [r7, #10]
 800e08a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e08e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e092:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	8013      	strh	r3, [r2, #0]
 800e09e:	e0d5      	b.n	800e24c <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	7b1b      	ldrb	r3, [r3, #12]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d156      	bne.n	800e156 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	699b      	ldr	r3, [r3, #24]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d122      	bne.n	800e0f6 <USB_EPStartXfer+0x9fe>
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	78db      	ldrb	r3, [r3, #3]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d11e      	bne.n	800e0f6 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	4413      	add	r3, r2
 800e0c2:	881b      	ldrh	r3, [r3, #0]
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e0ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e0ce:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800e0d2:	687a      	ldr	r2, [r7, #4]
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	441a      	add	r2, r3
 800e0dc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e0e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e0e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e0e8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e0ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	8013      	strh	r3, [r2, #0]
 800e0f4:	e01d      	b.n	800e132 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	4413      	add	r3, r2
 800e100:	881b      	ldrh	r3, [r3, #0]
 800e102:	b29b      	uxth	r3, r3
 800e104:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800e108:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e10c:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800e110:	687a      	ldr	r2, [r7, #4]
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	009b      	lsls	r3, r3, #2
 800e118:	441a      	add	r2, r3
 800e11a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800e11e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e122:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e126:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e12a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e12e:	b29b      	uxth	r3, r3
 800e130:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	699a      	ldr	r2, [r3, #24]
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	691b      	ldr	r3, [r3, #16]
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d907      	bls.n	800e14e <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	699a      	ldr	r2, [r3, #24]
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	691b      	ldr	r3, [r3, #16]
 800e146:	1ad2      	subs	r2, r2, r3
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	619a      	str	r2, [r3, #24]
 800e14c:	e054      	b.n	800e1f8 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	2200      	movs	r2, #0
 800e152:	619a      	str	r2, [r3, #24]
 800e154:	e050      	b.n	800e1f8 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	78db      	ldrb	r3, [r3, #3]
 800e15a:	2b02      	cmp	r3, #2
 800e15c:	d142      	bne.n	800e1e4 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	69db      	ldr	r3, [r3, #28]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d048      	beq.n	800e1f8 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e166:	687a      	ldr	r2, [r7, #4]
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	009b      	lsls	r3, r3, #2
 800e16e:	4413      	add	r3, r2
 800e170:	881b      	ldrh	r3, [r3, #0]
 800e172:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e176:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e17a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d005      	beq.n	800e18e <USB_EPStartXfer+0xa96>
 800e182:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d10b      	bne.n	800e1a6 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e18e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e196:	2b00      	cmp	r3, #0
 800e198:	d12e      	bne.n	800e1f8 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e19a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e19e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d128      	bne.n	800e1f8 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e1a6:	687a      	ldr	r2, [r7, #4]
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	009b      	lsls	r3, r3, #2
 800e1ae:	4413      	add	r3, r2
 800e1b0:	881b      	ldrh	r3, [r3, #0]
 800e1b2:	b29b      	uxth	r3, r3
 800e1b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e1b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e1bc:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800e1c0:	687a      	ldr	r2, [r7, #4]
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	009b      	lsls	r3, r3, #2
 800e1c8:	441a      	add	r2, r3
 800e1ca:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800e1ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e1d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e1d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	8013      	strh	r3, [r2, #0]
 800e1e2:	e009      	b.n	800e1f8 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	78db      	ldrb	r3, [r3, #3]
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d103      	bne.n	800e1f4 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	619a      	str	r2, [r3, #24]
 800e1f2:	e001      	b.n	800e1f8 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	e02a      	b.n	800e24e <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	009b      	lsls	r3, r3, #2
 800e200:	4413      	add	r3, r2
 800e202:	881b      	ldrh	r3, [r3, #0]
 800e204:	b29b      	uxth	r3, r3
 800e206:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e20a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e20e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e212:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e216:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e21a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e21e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e222:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e226:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e22a:	687a      	ldr	r2, [r7, #4]
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	009b      	lsls	r3, r3, #2
 800e232:	441a      	add	r2, r3
 800e234:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e238:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e23c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e240:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e248:	b29b      	uxth	r3, r3
 800e24a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e24c:	2300      	movs	r3, #0
}
 800e24e:	4618      	mov	r0, r3
 800e250:	37b0      	adds	r7, #176	@ 0xb0
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}

0800e256 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e256:	b480      	push	{r7}
 800e258:	b085      	sub	sp, #20
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	6078      	str	r0, [r7, #4]
 800e25e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	785b      	ldrb	r3, [r3, #1]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d020      	beq.n	800e2aa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	4413      	add	r3, r2
 800e272:	881b      	ldrh	r3, [r3, #0]
 800e274:	b29b      	uxth	r3, r3
 800e276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e27a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e27e:	81bb      	strh	r3, [r7, #12]
 800e280:	89bb      	ldrh	r3, [r7, #12]
 800e282:	f083 0310 	eor.w	r3, r3, #16
 800e286:	81bb      	strh	r3, [r7, #12]
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	781b      	ldrb	r3, [r3, #0]
 800e28e:	009b      	lsls	r3, r3, #2
 800e290:	441a      	add	r2, r3
 800e292:	89bb      	ldrh	r3, [r7, #12]
 800e294:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e298:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e29c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	8013      	strh	r3, [r2, #0]
 800e2a8:	e01f      	b.n	800e2ea <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e2aa:	687a      	ldr	r2, [r7, #4]
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	4413      	add	r3, r2
 800e2b4:	881b      	ldrh	r3, [r3, #0]
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e2bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e2c0:	81fb      	strh	r3, [r7, #14]
 800e2c2:	89fb      	ldrh	r3, [r7, #14]
 800e2c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e2c8:	81fb      	strh	r3, [r7, #14]
 800e2ca:	687a      	ldr	r2, [r7, #4]
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	441a      	add	r2, r3
 800e2d4:	89fb      	ldrh	r3, [r7, #14]
 800e2d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e2da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e2de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2e6:	b29b      	uxth	r3, r3
 800e2e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e2ea:	2300      	movs	r3, #0
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3714      	adds	r7, #20
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr

0800e2f8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b087      	sub	sp, #28
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	785b      	ldrb	r3, [r3, #1]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d04c      	beq.n	800e3a4 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e30a:	687a      	ldr	r2, [r7, #4]
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	009b      	lsls	r3, r3, #2
 800e312:	4413      	add	r3, r2
 800e314:	881b      	ldrh	r3, [r3, #0]
 800e316:	823b      	strh	r3, [r7, #16]
 800e318:	8a3b      	ldrh	r3, [r7, #16]
 800e31a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d01b      	beq.n	800e35a <USB_EPClearStall+0x62>
 800e322:	687a      	ldr	r2, [r7, #4]
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	009b      	lsls	r3, r3, #2
 800e32a:	4413      	add	r3, r2
 800e32c:	881b      	ldrh	r3, [r3, #0]
 800e32e:	b29b      	uxth	r3, r3
 800e330:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e338:	81fb      	strh	r3, [r7, #14]
 800e33a:	687a      	ldr	r2, [r7, #4]
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	009b      	lsls	r3, r3, #2
 800e342:	441a      	add	r2, r3
 800e344:	89fb      	ldrh	r3, [r7, #14]
 800e346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e34a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e34e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e352:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e356:	b29b      	uxth	r3, r3
 800e358:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	78db      	ldrb	r3, [r3, #3]
 800e35e:	2b01      	cmp	r3, #1
 800e360:	d06c      	beq.n	800e43c <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e362:	687a      	ldr	r2, [r7, #4]
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	4413      	add	r3, r2
 800e36c:	881b      	ldrh	r3, [r3, #0]
 800e36e:	b29b      	uxth	r3, r3
 800e370:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e374:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e378:	81bb      	strh	r3, [r7, #12]
 800e37a:	89bb      	ldrh	r3, [r7, #12]
 800e37c:	f083 0320 	eor.w	r3, r3, #32
 800e380:	81bb      	strh	r3, [r7, #12]
 800e382:	687a      	ldr	r2, [r7, #4]
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	441a      	add	r2, r3
 800e38c:	89bb      	ldrh	r3, [r7, #12]
 800e38e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e392:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e396:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e39a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	8013      	strh	r3, [r2, #0]
 800e3a2:	e04b      	b.n	800e43c <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e3a4:	687a      	ldr	r2, [r7, #4]
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	009b      	lsls	r3, r3, #2
 800e3ac:	4413      	add	r3, r2
 800e3ae:	881b      	ldrh	r3, [r3, #0]
 800e3b0:	82fb      	strh	r3, [r7, #22]
 800e3b2:	8afb      	ldrh	r3, [r7, #22]
 800e3b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d01b      	beq.n	800e3f4 <USB_EPClearStall+0xfc>
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	4413      	add	r3, r2
 800e3c6:	881b      	ldrh	r3, [r3, #0]
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e3ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e3d2:	82bb      	strh	r3, [r7, #20]
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	441a      	add	r2, r3
 800e3de:	8abb      	ldrh	r3, [r7, #20]
 800e3e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e3e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e3e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e3ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e3f4:	687a      	ldr	r2, [r7, #4]
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	781b      	ldrb	r3, [r3, #0]
 800e3fa:	009b      	lsls	r3, r3, #2
 800e3fc:	4413      	add	r3, r2
 800e3fe:	881b      	ldrh	r3, [r3, #0]
 800e400:	b29b      	uxth	r3, r3
 800e402:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e40a:	827b      	strh	r3, [r7, #18]
 800e40c:	8a7b      	ldrh	r3, [r7, #18]
 800e40e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e412:	827b      	strh	r3, [r7, #18]
 800e414:	8a7b      	ldrh	r3, [r7, #18]
 800e416:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e41a:	827b      	strh	r3, [r7, #18]
 800e41c:	687a      	ldr	r2, [r7, #4]
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	009b      	lsls	r3, r3, #2
 800e424:	441a      	add	r2, r3
 800e426:	8a7b      	ldrh	r3, [r7, #18]
 800e428:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e42c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e430:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e438:	b29b      	uxth	r3, r3
 800e43a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e43c:	2300      	movs	r3, #0
}
 800e43e:	4618      	mov	r0, r3
 800e440:	371c      	adds	r7, #28
 800e442:	46bd      	mov	sp, r7
 800e444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e448:	4770      	bx	lr

0800e44a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e44a:	b480      	push	{r7}
 800e44c:	b083      	sub	sp, #12
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
 800e452:	460b      	mov	r3, r1
 800e454:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e456:	78fb      	ldrb	r3, [r7, #3]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d103      	bne.n	800e464 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2280      	movs	r2, #128	@ 0x80
 800e460:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e464:	2300      	movs	r3, #0
}
 800e466:	4618      	mov	r0, r3
 800e468:	370c      	adds	r7, #12
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr

0800e472 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e472:	b480      	push	{r7}
 800e474:	b083      	sub	sp, #12
 800e476:	af00      	add	r7, sp, #0
 800e478:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e480:	b29b      	uxth	r3, r3
 800e482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e48a:	b29a      	uxth	r2, r3
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e492:	2300      	movs	r3, #0
}
 800e494:	4618      	mov	r0, r3
 800e496:	370c      	adds	r7, #12
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr

0800e4a0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	b083      	sub	sp, #12
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e4b4:	b29a      	uxth	r2, r3
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e4bc:	2300      	movs	r3, #0
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	370c      	adds	r7, #12
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c8:	4770      	bx	lr

0800e4ca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e4ca:	b480      	push	{r7}
 800e4cc:	b085      	sub	sp, #20
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800e4d8:	b29b      	uxth	r3, r3
 800e4da:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3714      	adds	r7, #20
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e8:	4770      	bx	lr

0800e4ea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e4ea:	b480      	push	{r7}
 800e4ec:	b08b      	sub	sp, #44	@ 0x2c
 800e4ee:	af00      	add	r7, sp, #0
 800e4f0:	60f8      	str	r0, [r7, #12]
 800e4f2:	60b9      	str	r1, [r7, #8]
 800e4f4:	4611      	mov	r1, r2
 800e4f6:	461a      	mov	r2, r3
 800e4f8:	460b      	mov	r3, r1
 800e4fa:	80fb      	strh	r3, [r7, #6]
 800e4fc:	4613      	mov	r3, r2
 800e4fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e500:	88bb      	ldrh	r3, [r7, #4]
 800e502:	3301      	adds	r3, #1
 800e504:	085b      	lsrs	r3, r3, #1
 800e506:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e510:	88fa      	ldrh	r2, [r7, #6]
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	4413      	add	r3, r2
 800e516:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e51a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e51c:	69bb      	ldr	r3, [r7, #24]
 800e51e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e520:	e01b      	b.n	800e55a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e528:	69fb      	ldr	r3, [r7, #28]
 800e52a:	3301      	adds	r3, #1
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	021b      	lsls	r3, r3, #8
 800e530:	b21a      	sxth	r2, r3
 800e532:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e536:	4313      	orrs	r3, r2
 800e538:	b21b      	sxth	r3, r3
 800e53a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e53c:	6a3b      	ldr	r3, [r7, #32]
 800e53e:	8a7a      	ldrh	r2, [r7, #18]
 800e540:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e542:	6a3b      	ldr	r3, [r7, #32]
 800e544:	3302      	adds	r3, #2
 800e546:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	3301      	adds	r3, #1
 800e54c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e54e:	69fb      	ldr	r3, [r7, #28]
 800e550:	3301      	adds	r3, #1
 800e552:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e556:	3b01      	subs	r3, #1
 800e558:	627b      	str	r3, [r7, #36]	@ 0x24
 800e55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d1e0      	bne.n	800e522 <USB_WritePMA+0x38>
  }
}
 800e560:	bf00      	nop
 800e562:	bf00      	nop
 800e564:	372c      	adds	r7, #44	@ 0x2c
 800e566:	46bd      	mov	sp, r7
 800e568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56c:	4770      	bx	lr

0800e56e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e56e:	b480      	push	{r7}
 800e570:	b08b      	sub	sp, #44	@ 0x2c
 800e572:	af00      	add	r7, sp, #0
 800e574:	60f8      	str	r0, [r7, #12]
 800e576:	60b9      	str	r1, [r7, #8]
 800e578:	4611      	mov	r1, r2
 800e57a:	461a      	mov	r2, r3
 800e57c:	460b      	mov	r3, r1
 800e57e:	80fb      	strh	r3, [r7, #6]
 800e580:	4613      	mov	r3, r2
 800e582:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e584:	88bb      	ldrh	r3, [r7, #4]
 800e586:	085b      	lsrs	r3, r3, #1
 800e588:	b29b      	uxth	r3, r3
 800e58a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e594:	88fa      	ldrh	r2, [r7, #6]
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	4413      	add	r3, r2
 800e59a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e59e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e5a0:	69bb      	ldr	r3, [r7, #24]
 800e5a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5a4:	e018      	b.n	800e5d8 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e5a6:	6a3b      	ldr	r3, [r7, #32]
 800e5a8:	881b      	ldrh	r3, [r3, #0]
 800e5aa:	b29b      	uxth	r3, r3
 800e5ac:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e5ae:	6a3b      	ldr	r3, [r7, #32]
 800e5b0:	3302      	adds	r3, #2
 800e5b2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	b2da      	uxtb	r2, r3
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e5bc:	69fb      	ldr	r3, [r7, #28]
 800e5be:	3301      	adds	r3, #1
 800e5c0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	0a1b      	lsrs	r3, r3, #8
 800e5c6:	b2da      	uxtb	r2, r3
 800e5c8:	69fb      	ldr	r3, [r7, #28]
 800e5ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e5cc:	69fb      	ldr	r3, [r7, #28]
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5d4:	3b01      	subs	r3, #1
 800e5d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d1e3      	bne.n	800e5a6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e5de:	88bb      	ldrh	r3, [r7, #4]
 800e5e0:	f003 0301 	and.w	r3, r3, #1
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d007      	beq.n	800e5fa <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e5ea:	6a3b      	ldr	r3, [r7, #32]
 800e5ec:	881b      	ldrh	r3, [r3, #0]
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	b2da      	uxtb	r2, r3
 800e5f6:	69fb      	ldr	r3, [r7, #28]
 800e5f8:	701a      	strb	r2, [r3, #0]
  }
}
 800e5fa:	bf00      	nop
 800e5fc:	372c      	adds	r7, #44	@ 0x2c
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr
	...

0800e608 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800e608:	b480      	push	{r7}
 800e60a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800e60c:	f3bf 8f4f 	dsb	sy
}
 800e610:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800e612:	4b06      	ldr	r3, [pc, #24]	@ (800e62c <__NVIC_SystemReset+0x24>)
 800e614:	68db      	ldr	r3, [r3, #12]
 800e616:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800e61a:	4904      	ldr	r1, [pc, #16]	@ (800e62c <__NVIC_SystemReset+0x24>)
 800e61c:	4b04      	ldr	r3, [pc, #16]	@ (800e630 <__NVIC_SystemReset+0x28>)
 800e61e:	4313      	orrs	r3, r2
 800e620:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e622:	f3bf 8f4f 	dsb	sy
}
 800e626:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800e628:	bf00      	nop
 800e62a:	e7fd      	b.n	800e628 <__NVIC_SystemReset+0x20>
 800e62c:	e000ed00 	.word	0xe000ed00
 800e630:	05fa0004 	.word	0x05fa0004

0800e634 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	460b      	mov	r3, r1
 800e63e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 800e640:	f240 401c 	movw	r0, #1052	@ 0x41c
 800e644:	f002 fbfc 	bl	8010e40 <USBD_static_malloc>
 800e648:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d105      	bne.n	800e65c <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2200      	movs	r2, #0
 800e654:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800e658:	2302      	movs	r3, #2
 800e65a:	e03f      	b.n	800e6dc <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	68fa      	ldr	r2, [r7, #12]
 800e660:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2200      	movs	r2, #0
 800e668:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800e672:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	2200      	movs	r2, #0
 800e67a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	2200      	movs	r2, #0
 800e682:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	2200      	movs	r2, #0
 800e68a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2202      	movs	r2, #2
 800e692:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2200      	movs	r2, #0
 800e69a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	2202      	movs	r2, #2
 800e6ba:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e6cc:	685b      	ldr	r3, [r3, #4]
 800e6ce:	4798      	blx	r3
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d001      	beq.n	800e6da <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 800e6d6:	2303      	movs	r3, #3
 800e6d8:	e000      	b.n	800e6dc <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 800e6da:	2300      	movs	r3, #0
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3710      	adds	r7, #16
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	460b      	mov	r3, r1
 800e6ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d101      	bne.n	800e6fe <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 800e6fa:	2302      	movs	r3, #2
 800e6fc:	e027      	b.n	800e74e <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e704:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2200      	movs	r2, #0
 800e70a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2200      	movs	r2, #0
 800e712:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2202      	movs	r2, #2
 800e71a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2200      	movs	r2, #0
 800e722:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	2202      	movs	r2, #2
 800e72a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e734:	689b      	ldr	r3, [r3, #8]
 800e736:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e73e:	4618      	mov	r0, r3
 800e740:	f002 fb8c 	bl	8010e5c <USBD_static_free>
  pdev->pClassData = NULL;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2200      	movs	r2, #0
 800e748:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 800e74c:	2300      	movs	r3, #0
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3710      	adds	r7, #16
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
	...

0800e758 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b088      	sub	sp, #32
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e768:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800e76a:	2300      	movs	r3, #0
 800e76c:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 800e76e:	2300      	movs	r3, #0
 800e770:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 800e772:	2300      	movs	r3, #0
 800e774:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 800e776:	2300      	movs	r3, #0
 800e778:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d101      	bne.n	800e784 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800e780:	2303      	movs	r3, #3
 800e782:	e0d5      	b.n	800e930 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d03e      	beq.n	800e80e <USBD_DFU_Setup+0xb6>
 800e790:	2b20      	cmp	r3, #32
 800e792:	f040 80c5 	bne.w	800e920 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	785b      	ldrb	r3, [r3, #1]
 800e79a:	2b06      	cmp	r3, #6
 800e79c:	d82f      	bhi.n	800e7fe <USBD_DFU_Setup+0xa6>
 800e79e:	a201      	add	r2, pc, #4	@ (adr r2, 800e7a4 <USBD_DFU_Setup+0x4c>)
 800e7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a4:	0800e7f5 	.word	0x0800e7f5
 800e7a8:	0800e7c1 	.word	0x0800e7c1
 800e7ac:	0800e7cb 	.word	0x0800e7cb
 800e7b0:	0800e7d5 	.word	0x0800e7d5
 800e7b4:	0800e7dd 	.word	0x0800e7dd
 800e7b8:	0800e7e5 	.word	0x0800e7e5
 800e7bc:	0800e7ed 	.word	0x0800e7ed
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 800e7c0:	6839      	ldr	r1, [r7, #0]
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f000 fa6c 	bl	800eca0 <DFU_Download>
          break;
 800e7c8:	e020      	b.n	800e80c <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 800e7ca:	6839      	ldr	r1, [r7, #0]
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f000 fad3 	bl	800ed78 <DFU_Upload>
          break;
 800e7d2:	e01b      	b.n	800e80c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f000 fba9 	bl	800ef2c <DFU_GetStatus>
          break;
 800e7da:	e017      	b.n	800e80c <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f000 fc5b 	bl	800f098 <DFU_ClearStatus>
          break;
 800e7e2:	e013      	b.n	800e80c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f000 fcab 	bl	800f140 <DFU_GetState>
          break;
 800e7ea:	e00f      	b.n	800e80c <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f000 fcbf 	bl	800f170 <DFU_Abort>
          break;
 800e7f2:	e00b      	b.n	800e80c <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 800e7f4:	6839      	ldr	r1, [r7, #0]
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f000 f9ee 	bl	800ebd8 <DFU_Detach>
          break;
 800e7fc:	e006      	b.n	800e80c <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 800e7fe:	6839      	ldr	r1, [r7, #0]
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f001 fdb1 	bl	8010368 <USBD_CtlError>
          ret = USBD_FAIL;
 800e806:	2303      	movs	r3, #3
 800e808:	77fb      	strb	r3, [r7, #31]
          break;
 800e80a:	bf00      	nop
      }
      break;
 800e80c:	e08f      	b.n	800e92e <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	785b      	ldrb	r3, [r3, #1]
 800e812:	2b0b      	cmp	r3, #11
 800e814:	d87b      	bhi.n	800e90e <USBD_DFU_Setup+0x1b6>
 800e816:	a201      	add	r2, pc, #4	@ (adr r2, 800e81c <USBD_DFU_Setup+0xc4>)
 800e818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e81c:	0800e84d 	.word	0x0800e84d
 800e820:	0800e91d 	.word	0x0800e91d
 800e824:	0800e90f 	.word	0x0800e90f
 800e828:	0800e90f 	.word	0x0800e90f
 800e82c:	0800e90f 	.word	0x0800e90f
 800e830:	0800e90f 	.word	0x0800e90f
 800e834:	0800e877 	.word	0x0800e877
 800e838:	0800e90f 	.word	0x0800e90f
 800e83c:	0800e90f 	.word	0x0800e90f
 800e840:	0800e90f 	.word	0x0800e90f
 800e844:	0800e8a1 	.word	0x0800e8a1
 800e848:	0800e8cd 	.word	0x0800e8cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e852:	b2db      	uxtb	r3, r3
 800e854:	2b03      	cmp	r3, #3
 800e856:	d107      	bne.n	800e868 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e858:	f107 030e 	add.w	r3, r7, #14
 800e85c:	2202      	movs	r2, #2
 800e85e:	4619      	mov	r1, r3
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f001 fdf2 	bl	801044a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e866:	e05a      	b.n	800e91e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800e868:	6839      	ldr	r1, [r7, #0]
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f001 fd7c 	bl	8010368 <USBD_CtlError>
            ret = USBD_FAIL;
 800e870:	2303      	movs	r3, #3
 800e872:	77fb      	strb	r3, [r7, #31]
          break;
 800e874:	e053      	b.n	800e91e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	885b      	ldrh	r3, [r3, #2]
 800e87a:	0a1b      	lsrs	r3, r3, #8
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	2b21      	cmp	r3, #33	@ 0x21
 800e880:	d107      	bne.n	800e892 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 800e882:	4b2d      	ldr	r3, [pc, #180]	@ (800e938 <USBD_DFU_Setup+0x1e0>)
 800e884:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	88db      	ldrh	r3, [r3, #6]
 800e88a:	2b09      	cmp	r3, #9
 800e88c:	bf28      	it	cs
 800e88e:	2309      	movcs	r3, #9
 800e890:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800e892:	8afb      	ldrh	r3, [r7, #22]
 800e894:	461a      	mov	r2, r3
 800e896:	69b9      	ldr	r1, [r7, #24]
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f001 fdd6 	bl	801044a <USBD_CtlSendData>
          break;
 800e89e:	e03e      	b.n	800e91e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	2b03      	cmp	r3, #3
 800e8aa:	d108      	bne.n	800e8be <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800e8b2:	2201      	movs	r2, #1
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f001 fdc7 	bl	801044a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e8bc:	e02f      	b.n	800e91e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800e8be:	6839      	ldr	r1, [r7, #0]
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f001 fd51 	bl	8010368 <USBD_CtlError>
            ret = USBD_FAIL;
 800e8c6:	2303      	movs	r3, #3
 800e8c8:	77fb      	strb	r3, [r7, #31]
          break;
 800e8ca:	e028      	b.n	800e91e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	885b      	ldrh	r3, [r3, #2]
 800e8d0:	b2db      	uxtb	r3, r3
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d114      	bne.n	800e900 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8dc:	b2db      	uxtb	r3, r3
 800e8de:	2b03      	cmp	r3, #3
 800e8e0:	d107      	bne.n	800e8f2 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	885b      	ldrh	r3, [r3, #2]
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e8f0:	e015      	b.n	800e91e <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 800e8f2:	6839      	ldr	r1, [r7, #0]
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f001 fd37 	bl	8010368 <USBD_CtlError>
              ret = USBD_FAIL;
 800e8fa:	2303      	movs	r3, #3
 800e8fc:	77fb      	strb	r3, [r7, #31]
          break;
 800e8fe:	e00e      	b.n	800e91e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800e900:	6839      	ldr	r1, [r7, #0]
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f001 fd30 	bl	8010368 <USBD_CtlError>
            ret = USBD_FAIL;
 800e908:	2303      	movs	r3, #3
 800e90a:	77fb      	strb	r3, [r7, #31]
          break;
 800e90c:	e007      	b.n	800e91e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e90e:	6839      	ldr	r1, [r7, #0]
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f001 fd29 	bl	8010368 <USBD_CtlError>
          ret = USBD_FAIL;
 800e916:	2303      	movs	r3, #3
 800e918:	77fb      	strb	r3, [r7, #31]
          break;
 800e91a:	e000      	b.n	800e91e <USBD_DFU_Setup+0x1c6>
          break;
 800e91c:	bf00      	nop
      }
      break;
 800e91e:	e006      	b.n	800e92e <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 800e920:	6839      	ldr	r1, [r7, #0]
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f001 fd20 	bl	8010368 <USBD_CtlError>
      ret = USBD_FAIL;
 800e928:	2303      	movs	r3, #3
 800e92a:	77fb      	strb	r3, [r7, #31]
      break;
 800e92c:	bf00      	nop
  }

  return (uint8_t)ret;
 800e92e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e930:	4618      	mov	r0, r3
 800e932:	3720      	adds	r7, #32
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}
 800e938:	2000005a 	.word	0x2000005a

0800e93c <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 800e93c:	b480      	push	{r7}
 800e93e:	b083      	sub	sp, #12
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	221b      	movs	r2, #27
 800e948:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 800e94a:	4b03      	ldr	r3, [pc, #12]	@ (800e958 <USBD_DFU_GetCfgDesc+0x1c>)
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	370c      	adds	r7, #12
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr
 800e958:	20000048 	.word	0x20000048

0800e95c <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e95c:	b480      	push	{r7}
 800e95e:	b083      	sub	sp, #12
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800e964:	2300      	movs	r3, #0
}
 800e966:	4618      	mov	r0, r3
 800e968:	370c      	adds	r7, #12
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr

0800e972 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800e972:	b580      	push	{r7, lr}
 800e974:	b088      	sub	sp, #32
 800e976:	af00      	add	r7, sp, #0
 800e978:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e980:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e988:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 800e98a:	69fb      	ldr	r3, [r7, #28]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d101      	bne.n	800e994 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e990:	2303      	movs	r3, #3
 800e992:	e0ce      	b.n	800eb32 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800e99a:	2b04      	cmp	r3, #4
 800e99c:	f040 80bd 	bne.w	800eb1a <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 800e9a0:	69fb      	ldr	r3, [r7, #28]
 800e9a2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d17c      	bne.n	800eaa4 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 800e9aa:	69fb      	ldr	r3, [r7, #28]
 800e9ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800e9b0:	2b01      	cmp	r3, #1
 800e9b2:	f000 8093 	beq.w	800eadc <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 800e9b6:	69fb      	ldr	r3, [r7, #28]
 800e9b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800e9bc:	2b05      	cmp	r3, #5
 800e9be:	d15e      	bne.n	800ea7e <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 800e9c0:	69fb      	ldr	r3, [r7, #28]
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	2b21      	cmp	r3, #33	@ 0x21
 800e9c6:	d124      	bne.n	800ea12 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	785b      	ldrb	r3, [r3, #1]
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	69fb      	ldr	r3, [r7, #28]
 800e9d0:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800e9d4:	69fb      	ldr	r3, [r7, #28]
 800e9d6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800e9da:	69fb      	ldr	r3, [r7, #28]
 800e9dc:	789b      	ldrb	r3, [r3, #2]
 800e9de:	021b      	lsls	r3, r3, #8
 800e9e0:	441a      	add	r2, r3
 800e9e2:	69fb      	ldr	r3, [r7, #28]
 800e9e4:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800e9e8:	69fb      	ldr	r3, [r7, #28]
 800e9ea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800e9ee:	69fb      	ldr	r3, [r7, #28]
 800e9f0:	78db      	ldrb	r3, [r3, #3]
 800e9f2:	041b      	lsls	r3, r3, #16
 800e9f4:	441a      	add	r2, r3
 800e9f6:	69fb      	ldr	r3, [r7, #28]
 800e9f8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800e9fc:	69fb      	ldr	r3, [r7, #28]
 800e9fe:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800ea02:	69fb      	ldr	r3, [r7, #28]
 800ea04:	791b      	ldrb	r3, [r3, #4]
 800ea06:	061b      	lsls	r3, r3, #24
 800ea08:	441a      	add	r2, r3
 800ea0a:	69fb      	ldr	r3, [r7, #28]
 800ea0c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 800ea10:	e064      	b.n	800eadc <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 800ea12:	69fb      	ldr	r3, [r7, #28]
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	2b41      	cmp	r3, #65	@ 0x41
 800ea18:	d12f      	bne.n	800ea7a <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	785b      	ldrb	r3, [r3, #1]
 800ea1e:	461a      	mov	r2, r3
 800ea20:	69fb      	ldr	r3, [r7, #28]
 800ea22:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800ea26:	69fb      	ldr	r3, [r7, #28]
 800ea28:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	789b      	ldrb	r3, [r3, #2]
 800ea30:	021b      	lsls	r3, r3, #8
 800ea32:	441a      	add	r2, r3
 800ea34:	69fb      	ldr	r3, [r7, #28]
 800ea36:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800ea3a:	69fb      	ldr	r3, [r7, #28]
 800ea3c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800ea40:	69fb      	ldr	r3, [r7, #28]
 800ea42:	78db      	ldrb	r3, [r3, #3]
 800ea44:	041b      	lsls	r3, r3, #16
 800ea46:	441a      	add	r2, r3
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800ea4e:	69fb      	ldr	r3, [r7, #28]
 800ea50:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800ea54:	69fb      	ldr	r3, [r7, #28]
 800ea56:	791b      	ldrb	r3, [r3, #4]
 800ea58:	061b      	lsls	r3, r3, #24
 800ea5a:	441a      	add	r2, r3
 800ea5c:	69fb      	ldr	r3, [r7, #28]
 800ea5e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 800ea62:	69bb      	ldr	r3, [r7, #24]
 800ea64:	68db      	ldr	r3, [r3, #12]
 800ea66:	69fa      	ldr	r2, [r7, #28]
 800ea68:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 800ea6c:	4610      	mov	r0, r2
 800ea6e:	4798      	blx	r3
 800ea70:	4603      	mov	r3, r0
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d032      	beq.n	800eadc <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 800ea76:	2303      	movs	r3, #3
 800ea78:	e05b      	b.n	800eb32 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 800ea7a:	2303      	movs	r3, #3
 800ea7c:	e059      	b.n	800eb32 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800ea7e:	69fb      	ldr	r3, [r7, #28]
 800ea80:	2200      	movs	r2, #0
 800ea82:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 800ea86:	69fb      	ldr	r3, [r7, #28]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 800ea92:	2301      	movs	r3, #1
 800ea94:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 800ea96:	f107 030c 	add.w	r3, r7, #12
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f001 fc63 	bl	8010368 <USBD_CtlError>
 800eaa2:	e01b      	b.n	800eadc <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800eaa4:	69fb      	ldr	r3, [r7, #28]
 800eaa6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800eaaa:	2b01      	cmp	r3, #1
 800eaac:	d916      	bls.n	800eadc <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800eaae:	69fb      	ldr	r3, [r7, #28]
 800eab0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800eab4:	3b02      	subs	r3, #2
 800eab6:	029a      	lsls	r2, r3, #10
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800eabe:	4413      	add	r3, r2
 800eac0:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	691b      	ldr	r3, [r3, #16]
 800eac6:	69f8      	ldr	r0, [r7, #28]
 800eac8:	6979      	ldr	r1, [r7, #20]
 800eaca:	69fa      	ldr	r2, [r7, #28]
 800eacc:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 800ead0:	4798      	blx	r3
 800ead2:	4603      	mov	r3, r0
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d001      	beq.n	800eadc <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 800ead8:	2303      	movs	r3, #3
 800eada:	e02a      	b.n	800eb32 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800eadc:	69fb      	ldr	r3, [r7, #28]
 800eade:	2200      	movs	r2, #0
 800eae0:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 800eae4:	69fb      	ldr	r3, [r7, #28]
 800eae6:	2200      	movs	r2, #0
 800eae8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800eaec:	69fb      	ldr	r3, [r7, #28]
 800eaee:	2203      	movs	r2, #3
 800eaf0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800eaf4:	69fb      	ldr	r3, [r7, #28]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800eafc:	69fb      	ldr	r3, [r7, #28]
 800eafe:	2200      	movs	r2, #0
 800eb00:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	2200      	movs	r2, #0
 800eb08:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800eb0c:	69fb      	ldr	r3, [r7, #28]
 800eb0e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800eb12:	69fb      	ldr	r3, [r7, #28]
 800eb14:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800eb18:	e00a      	b.n	800eb30 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800eb1a:	69fb      	ldr	r3, [r7, #28]
 800eb1c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800eb20:	2b07      	cmp	r3, #7
 800eb22:	d103      	bne.n	800eb2c <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 fb75 	bl	800f214 <DFU_Leave>
 800eb2a:	e001      	b.n	800eb30 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 800eb2c:	2303      	movs	r3, #3
 800eb2e:	e000      	b.n	800eb32 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 800eb30:	2300      	movs	r3, #0
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3720      	adds	r7, #32
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800eb3a:	b480      	push	{r7}
 800eb3c:	b083      	sub	sp, #12
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800eb42:	2300      	movs	r3, #0
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	370c      	adds	r7, #12
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4e:	4770      	bx	lr

0800eb50 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800eb50:	b480      	push	{r7}
 800eb52:	b083      	sub	sp, #12
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	220a      	movs	r2, #10
 800eb5c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800eb5e:	4b03      	ldr	r3, [pc, #12]	@ (800eb6c <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	370c      	adds	r7, #12
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr
 800eb6c:	20000064 	.word	0x20000064

0800eb70 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b086      	sub	sp, #24
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	60f8      	str	r0, [r7, #12]
 800eb78:	460b      	mov	r3, r1
 800eb7a:	607a      	str	r2, [r7, #4]
 800eb7c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800eb84:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800eb86:	7afb      	ldrb	r3, [r7, #11]
 800eb88:	2b06      	cmp	r3, #6
 800eb8a:	d808      	bhi.n	800eb9e <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	687a      	ldr	r2, [r7, #4]
 800eb92:	4905      	ldr	r1, [pc, #20]	@ (800eba8 <USBD_DFU_GetUsrStringDesc+0x38>)
 800eb94:	4618      	mov	r0, r3
 800eb96:	f001 fbf8 	bl	801038a <USBD_GetString>
    return USBD_StrDesc;
 800eb9a:	4b03      	ldr	r3, [pc, #12]	@ (800eba8 <USBD_DFU_GetUsrStringDesc+0x38>)
 800eb9c:	e000      	b.n	800eba0 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800eb9e:	2300      	movs	r3, #0
  }
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3718      	adds	r7, #24
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}
 800eba8:	200008d8 	.word	0x200008d8

0800ebac <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d101      	bne.n	800ebc0 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ebbc:	2303      	movs	r3, #3
 800ebbe:	e004      	b.n	800ebca <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	683a      	ldr	r2, [r7, #0]
 800ebc4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800ebc8:	2300      	movs	r3, #0
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	370c      	adds	r7, #12
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
	...

0800ebd8 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ebe8:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d051      	beq.n	800ec94 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800ebf6:	2b02      	cmp	r3, #2
 800ebf8:	d013      	beq.n	800ec22 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800ec00:	2b03      	cmp	r3, #3
 800ec02:	d00e      	beq.n	800ec22 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800ec0a:	2b05      	cmp	r3, #5
 800ec0c:	d009      	beq.n	800ec22 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800ec14:	2b06      	cmp	r3, #6
 800ec16:	d004      	beq.n	800ec22 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800ec1e:	2b09      	cmp	r3, #9
 800ec20:	d125      	bne.n	800ec6e <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	2202      	movs	r2, #2
 800ec26:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2200      	movs	r2, #0
 800ec36:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2200      	movs	r2, #0
 800ec46:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	2200      	movs	r2, #0
 800ec62:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 800ec6e:	4b0b      	ldr	r3, [pc, #44]	@ (800ec9c <DFU_Detach+0xc4>)
 800ec70:	7d5b      	ldrb	r3, [r3, #21]
 800ec72:	f003 0310 	and.w	r3, r3, #16
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d006      	beq.n	800ec88 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f000 fb7b 	bl	800f376 <USBD_Stop>
    (void)USBD_Start(pdev);
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f000 fb6c 	bl	800f35e <USBD_Start>
 800ec86:	e006      	b.n	800ec96 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	885b      	ldrh	r3, [r3, #2]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7f5 f97f 	bl	8003f90 <HAL_Delay>
 800ec92:	e000      	b.n	800ec96 <DFU_Detach+0xbe>
    return;
 800ec94:	bf00      	nop
  }
}
 800ec96:	3710      	adds	r7, #16
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}
 800ec9c:	20000048 	.word	0x20000048

0800eca0 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ecb0:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d05b      	beq.n	800ed70 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	88db      	ldrh	r3, [r3, #6]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d02d      	beq.n	800ed1c <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800ecc6:	2b02      	cmp	r3, #2
 800ecc8:	d004      	beq.n	800ecd4 <DFU_Download+0x34>
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800ecd0:	2b05      	cmp	r3, #5
 800ecd2:	d11e      	bne.n	800ed12 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	885b      	ldrh	r3, [r3, #2]
 800ecd8:	461a      	mov	r2, r3
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	88db      	ldrh	r3, [r3, #6]
 800ece4:	461a      	mov	r2, r3
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2203      	movs	r2, #3
 800ecf0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 800ed00:	68f9      	ldr	r1, [r7, #12]
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800ed08:	461a      	mov	r2, r3
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f001 fbc9 	bl	80104a2 <USBD_CtlPrepareRx>
 800ed10:	e02f      	b.n	800ed72 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800ed12:	6839      	ldr	r1, [r7, #0]
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f001 fb27 	bl	8010368 <USBD_CtlError>
 800ed1a:	e02a      	b.n	800ed72 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800ed22:	2b05      	cmp	r3, #5
 800ed24:	d004      	beq.n	800ed30 <DFU_Download+0x90>
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800ed2c:	2b02      	cmp	r3, #2
 800ed2e:	d11a      	bne.n	800ed66 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	2201      	movs	r2, #1
 800ed34:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2206      	movs	r2, #6
 800ed3c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	2200      	movs	r2, #0
 800ed44:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	2200      	movs	r2, #0
 800ed54:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800ed64:	e005      	b.n	800ed72 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800ed66:	6839      	ldr	r1, [r7, #0]
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f001 fafd 	bl	8010368 <USBD_CtlError>
 800ed6e:	e000      	b.n	800ed72 <DFU_Download+0xd2>
    return;
 800ed70:	bf00      	nop
    }
  }
}
 800ed72:	3710      	adds	r7, #16
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}

0800ed78 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b086      	sub	sp, #24
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ed88:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ed90:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	f000 80c4 	beq.w	800ef22 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	88db      	ldrh	r3, [r3, #6]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	f000 80a8 	beq.w	800eef4 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800edaa:	2b02      	cmp	r3, #2
 800edac:	d005      	beq.n	800edba <DFU_Upload+0x42>
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800edb4:	2b09      	cmp	r3, #9
 800edb6:	f040 8090 	bne.w	800eeda <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	885b      	ldrh	r3, [r3, #2]
 800edbe:	461a      	mov	r2, r3
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	88db      	ldrh	r3, [r3, #6]
 800edca:	461a      	mov	r2, r3
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d12c      	bne.n	800ee36 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800ede2:	2b03      	cmp	r3, #3
 800ede4:	d901      	bls.n	800edea <DFU_Upload+0x72>
 800ede6:	2202      	movs	r2, #2
 800ede8:	e000      	b.n	800edec <DFU_Upload+0x74>
 800edea:	2209      	movs	r2, #9
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	2200      	movs	r2, #0
 800edf6:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	2200      	movs	r2, #0
 800edfe:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	2200      	movs	r2, #0
 800ee06:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	2221      	movs	r2, #33	@ 0x21
 800ee20:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	2241      	movs	r2, #65	@ 0x41
 800ee26:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	2203      	movs	r2, #3
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f001 fb0b 	bl	801044a <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800ee34:	e076      	b.n	800ef24 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800ee3c:	2b01      	cmp	r3, #1
 800ee3e:	d931      	bls.n	800eea4 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	2209      	movs	r2, #9
 800ee44:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	2200      	movs	r2, #0
 800ee54:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800ee72:	3b02      	subs	r3, #2
 800ee74:	029a      	lsls	r2, r3, #10
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800ee7c:	4413      	add	r3, r2
 800ee7e:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	695b      	ldr	r3, [r3, #20]
 800ee84:	68f8      	ldr	r0, [r7, #12]
 800ee86:	6979      	ldr	r1, [r7, #20]
 800ee88:	697a      	ldr	r2, [r7, #20]
 800ee8a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 800ee8e:	4798      	blx	r3
 800ee90:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800ee98:	461a      	mov	r2, r3
 800ee9a:	68b9      	ldr	r1, [r7, #8]
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f001 fad4 	bl	801044a <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800eea2:	e03f      	b.n	800ef24 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	220f      	movs	r2, #15
 800eea8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	2200      	movs	r2, #0
 800eec0:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 800eed0:	6839      	ldr	r1, [r7, #0]
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f001 fa48 	bl	8010368 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800eed8:	e024      	b.n	800ef24 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	2200      	movs	r2, #0
 800eede:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	2200      	movs	r2, #0
 800eee6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800eeea:	6839      	ldr	r1, [r7, #0]
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f001 fa3b 	bl	8010368 <USBD_CtlError>
 800eef2:	e017      	b.n	800ef24 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	2202      	movs	r2, #2
 800eef8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	2200      	movs	r2, #0
 800ef00:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	2200      	movs	r2, #0
 800ef08:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	2200      	movs	r2, #0
 800ef10:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800ef20:	e000      	b.n	800ef24 <DFU_Upload+0x1ac>
    return;
 800ef22:	bf00      	nop
  }
}
 800ef24:	3718      	adds	r7, #24
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
	...

0800ef2c <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef3a:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ef42:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	f000 80a0 	beq.w	800f08c <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800ef52:	2b03      	cmp	r3, #3
 800ef54:	d002      	beq.n	800ef5c <DFU_GetStatus+0x30>
 800ef56:	2b06      	cmp	r3, #6
 800ef58:	d051      	beq.n	800effe <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 800ef5a:	e08e      	b.n	800f07a <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d034      	beq.n	800efd0 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2204      	movs	r2, #4
 800ef6a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2200      	movs	r2, #0
 800ef72:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	2200      	movs	r2, #0
 800ef82:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d10e      	bne.n	800efba <DFU_GetStatus+0x8e>
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	2b41      	cmp	r3, #65	@ 0x41
 800efa2:	d10a      	bne.n	800efba <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	699b      	ldr	r3, [r3, #24]
 800efa8:	68fa      	ldr	r2, [r7, #12]
 800efaa:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 800efae:	68fa      	ldr	r2, [r7, #12]
 800efb0:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 800efb4:	2100      	movs	r1, #0
 800efb6:	4798      	blx	r3
      break;
 800efb8:	e05f      	b.n	800f07a <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	699b      	ldr	r3, [r3, #24]
 800efbe:	68fa      	ldr	r2, [r7, #12]
 800efc0:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 800efc4:	68fa      	ldr	r2, [r7, #12]
 800efc6:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 800efca:	2101      	movs	r1, #1
 800efcc:	4798      	blx	r3
      break;
 800efce:	e054      	b.n	800f07a <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2205      	movs	r2, #5
 800efd4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	2200      	movs	r2, #0
 800efdc:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	2200      	movs	r2, #0
 800efe4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	2200      	movs	r2, #0
 800efec:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800effc:	e03d      	b.n	800f07a <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800f004:	2b01      	cmp	r3, #1
 800f006:	d116      	bne.n	800f036 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	2207      	movs	r2, #7
 800f00c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2201      	movs	r2, #1
 800f014:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2200      	movs	r2, #0
 800f01c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2200      	movs	r2, #0
 800f024:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800f034:	e020      	b.n	800f078 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d11b      	bne.n	800f078 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 800f040:	4b14      	ldr	r3, [pc, #80]	@ (800f094 <DFU_GetStatus+0x168>)
 800f042:	7d1b      	ldrb	r3, [r3, #20]
 800f044:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d015      	beq.n	800f078 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	2202      	movs	r2, #2
 800f050:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	2200      	movs	r2, #0
 800f058:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2200      	movs	r2, #0
 800f060:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2200      	movs	r2, #0
 800f068:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800f078:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 800f080:	2206      	movs	r2, #6
 800f082:	4619      	mov	r1, r3
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f001 f9e0 	bl	801044a <USBD_CtlSendData>
 800f08a:	e000      	b.n	800f08e <DFU_GetStatus+0x162>
    return;
 800f08c:	bf00      	nop
}
 800f08e:	3710      	adds	r7, #16
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}
 800f094:	20000048 	.word	0x20000048

0800f098 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 800f098:	b480      	push	{r7}
 800f09a:	b085      	sub	sp, #20
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f0a6:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d042      	beq.n	800f134 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f0b4:	2b0a      	cmp	r3, #10
 800f0b6:	d11e      	bne.n	800f0f6 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	2202      	movs	r2, #2
 800f0bc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 800f0f4:	e01f      	b.n	800f136 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	220a      	movs	r2, #10
 800f0fa:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	220e      	movs	r2, #14
 800f102:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2200      	movs	r2, #0
 800f10a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	2200      	movs	r2, #0
 800f112:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2200      	movs	r2, #0
 800f11a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	2200      	movs	r2, #0
 800f12e:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 800f132:	e000      	b.n	800f136 <DFU_ClearStatus+0x9e>
    return;
 800f134:	bf00      	nop
  }
}
 800f136:	3714      	adds	r7, #20
 800f138:	46bd      	mov	sp, r7
 800f13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13e:	4770      	bx	lr

0800f140 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b084      	sub	sp, #16
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f14e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d008      	beq.n	800f168 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 800f15c:	2201      	movs	r2, #1
 800f15e:	4619      	mov	r1, r3
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f001 f972 	bl	801044a <USBD_CtlSendData>
 800f166:	e000      	b.n	800f16a <DFU_GetState+0x2a>
    return;
 800f168:	bf00      	nop
}
 800f16a:	3710      	adds	r7, #16
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 800f170:	b480      	push	{r7}
 800f172:	b085      	sub	sp, #20
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f17e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d03f      	beq.n	800f206 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f18c:	2b02      	cmp	r3, #2
 800f18e:	d013      	beq.n	800f1b8 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800f196:	2b03      	cmp	r3, #3
 800f198:	d00e      	beq.n	800f1b8 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800f1a0:	2b05      	cmp	r3, #5
 800f1a2:	d009      	beq.n	800f1b8 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800f1aa:	2b06      	cmp	r3, #6
 800f1ac:	d004      	beq.n	800f1b8 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800f1b4:	2b09      	cmp	r3, #9
 800f1b6:	d127      	bne.n	800f208 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2202      	movs	r2, #2
 800f1bc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	2200      	movs	r2, #0
 800f200:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800f204:	e000      	b.n	800f208 <DFU_Abort+0x98>
    return;
 800f206:	bf00      	nop
  }
}
 800f208:	3714      	adds	r7, #20
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr
	...

0800f214 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f222:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d03b      	beq.n	800f2a2 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	2200      	movs	r2, #0
 800f22e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 800f232:	4b1e      	ldr	r3, [pc, #120]	@ (800f2ac <DFU_Leave+0x98>)
 800f234:	7d1b      	ldrb	r3, [r3, #20]
 800f236:	f003 0304 	and.w	r3, r3, #4
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d016      	beq.n	800f26c <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	2206      	movs	r2, #6
 800f242:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	2200      	movs	r2, #0
 800f24a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	2200      	movs	r2, #0
 800f252:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	2200      	movs	r2, #0
 800f25a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 800f26a:	e01b      	b.n	800f2a4 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	2208      	movs	r2, #8
 800f270:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	2200      	movs	r2, #0
 800f278:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	2200      	movs	r2, #0
 800f280:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	2200      	movs	r2, #0
 800f288:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f000 f86c 	bl	800f376 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800f29e:	f7ff f9b3 	bl	800e608 <__NVIC_SystemReset>
    return;
 800f2a2:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 800f2a4:	3710      	adds	r7, #16
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop
 800f2ac:	20000048 	.word	0x20000048

0800f2b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b086      	sub	sp, #24
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	60f8      	str	r0, [r7, #12]
 800f2b8:	60b9      	str	r1, [r7, #8]
 800f2ba:	4613      	mov	r3, r2
 800f2bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d101      	bne.n	800f2c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f2c4:	2303      	movs	r3, #3
 800f2c6:	e01f      	b.n	800f308 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d003      	beq.n	800f2ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	68ba      	ldr	r2, [r7, #8]
 800f2ea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	79fa      	ldrb	r2, [r7, #7]
 800f2fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f2fc:	68f8      	ldr	r0, [r7, #12]
 800f2fe:	f001 fbd9 	bl	8010ab4 <USBD_LL_Init>
 800f302:	4603      	mov	r3, r0
 800f304:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f306:	7dfb      	ldrb	r3, [r7, #23]
}
 800f308:	4618      	mov	r0, r3
 800f30a:	3718      	adds	r7, #24
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}

0800f310 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b084      	sub	sp, #16
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f31a:	2300      	movs	r3, #0
 800f31c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d101      	bne.n	800f328 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f324:	2303      	movs	r3, #3
 800f326:	e016      	b.n	800f356 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	683a      	ldr	r2, [r7, #0]
 800f32c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d00b      	beq.n	800f354 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f344:	f107 020e 	add.w	r2, r7, #14
 800f348:	4610      	mov	r0, r2
 800f34a:	4798      	blx	r3
 800f34c:	4602      	mov	r2, r0
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f354:	2300      	movs	r3, #0
}
 800f356:	4618      	mov	r0, r3
 800f358:	3710      	adds	r7, #16
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b082      	sub	sp, #8
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f001 fbea 	bl	8010b40 <USBD_LL_Start>
 800f36c:	4603      	mov	r3, r0
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3708      	adds	r7, #8
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}

0800f376 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800f376:	b580      	push	{r7, lr}
 800f378:	b082      	sub	sp, #8
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f001 fbf9 	bl	8010b76 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d009      	beq.n	800f3a2 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	687a      	ldr	r2, [r7, #4]
 800f398:	6852      	ldr	r2, [r2, #4]
 800f39a:	b2d2      	uxtb	r2, r2
 800f39c:	4611      	mov	r1, r2
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	4798      	blx	r3
  }

  return USBD_OK;
 800f3a2:	2300      	movs	r3, #0
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3708      	adds	r7, #8
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f3b4:	2300      	movs	r3, #0
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	370c      	adds	r7, #12
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c0:	4770      	bx	lr

0800f3c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f3c2:	b580      	push	{r7, lr}
 800f3c4:	b084      	sub	sp, #16
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	6078      	str	r0, [r7, #4]
 800f3ca:	460b      	mov	r3, r1
 800f3cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f3ce:	2303      	movs	r3, #3
 800f3d0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d009      	beq.n	800f3f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	78fa      	ldrb	r2, [r7, #3]
 800f3e6:	4611      	mov	r1, r2
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	4798      	blx	r3
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3710      	adds	r7, #16
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}

0800f3fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f3fa:	b580      	push	{r7, lr}
 800f3fc:	b082      	sub	sp, #8
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	6078      	str	r0, [r7, #4]
 800f402:	460b      	mov	r3, r1
 800f404:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d007      	beq.n	800f420 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f416:	685b      	ldr	r3, [r3, #4]
 800f418:	78fa      	ldrb	r2, [r7, #3]
 800f41a:	4611      	mov	r1, r2
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	4798      	blx	r3
  }

  return USBD_OK;
 800f420:	2300      	movs	r3, #0
}
 800f422:	4618      	mov	r0, r3
 800f424:	3708      	adds	r7, #8
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}

0800f42a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f42a:	b580      	push	{r7, lr}
 800f42c:	b084      	sub	sp, #16
 800f42e:	af00      	add	r7, sp, #0
 800f430:	6078      	str	r0, [r7, #4]
 800f432:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f43a:	6839      	ldr	r1, [r7, #0]
 800f43c:	4618      	mov	r0, r3
 800f43e:	f000 ff59 	bl	80102f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2201      	movs	r2, #1
 800f446:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f450:	461a      	mov	r2, r3
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f45e:	f003 031f 	and.w	r3, r3, #31
 800f462:	2b02      	cmp	r3, #2
 800f464:	d01a      	beq.n	800f49c <USBD_LL_SetupStage+0x72>
 800f466:	2b02      	cmp	r3, #2
 800f468:	d822      	bhi.n	800f4b0 <USBD_LL_SetupStage+0x86>
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d002      	beq.n	800f474 <USBD_LL_SetupStage+0x4a>
 800f46e:	2b01      	cmp	r3, #1
 800f470:	d00a      	beq.n	800f488 <USBD_LL_SetupStage+0x5e>
 800f472:	e01d      	b.n	800f4b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f47a:	4619      	mov	r1, r3
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f000 f9ef 	bl	800f860 <USBD_StdDevReq>
 800f482:	4603      	mov	r3, r0
 800f484:	73fb      	strb	r3, [r7, #15]
      break;
 800f486:	e020      	b.n	800f4ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f48e:	4619      	mov	r1, r3
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f000 fa53 	bl	800f93c <USBD_StdItfReq>
 800f496:	4603      	mov	r3, r0
 800f498:	73fb      	strb	r3, [r7, #15]
      break;
 800f49a:	e016      	b.n	800f4ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f4a2:	4619      	mov	r1, r3
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f000 fa92 	bl	800f9ce <USBD_StdEPReq>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	73fb      	strb	r3, [r7, #15]
      break;
 800f4ae:	e00c      	b.n	800f4ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f4b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f4ba:	b2db      	uxtb	r3, r3
 800f4bc:	4619      	mov	r1, r3
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f001 fb9a 	bl	8010bf8 <USBD_LL_StallEP>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	73fb      	strb	r3, [r7, #15]
      break;
 800f4c8:	bf00      	nop
  }

  return ret;
 800f4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3710      	adds	r7, #16
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b086      	sub	sp, #24
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	60f8      	str	r0, [r7, #12]
 800f4dc:	460b      	mov	r3, r1
 800f4de:	607a      	str	r2, [r7, #4]
 800f4e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f4e2:	7afb      	ldrb	r3, [r7, #11]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d138      	bne.n	800f55a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f4ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f4f6:	2b03      	cmp	r3, #3
 800f4f8:	d14a      	bne.n	800f590 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f4fa:	693b      	ldr	r3, [r7, #16]
 800f4fc:	689a      	ldr	r2, [r3, #8]
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	68db      	ldr	r3, [r3, #12]
 800f502:	429a      	cmp	r2, r3
 800f504:	d913      	bls.n	800f52e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f506:	693b      	ldr	r3, [r7, #16]
 800f508:	689a      	ldr	r2, [r3, #8]
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	1ad2      	subs	r2, r2, r3
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f514:	693b      	ldr	r3, [r7, #16]
 800f516:	68da      	ldr	r2, [r3, #12]
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	689b      	ldr	r3, [r3, #8]
 800f51c:	4293      	cmp	r3, r2
 800f51e:	bf28      	it	cs
 800f520:	4613      	movcs	r3, r2
 800f522:	461a      	mov	r2, r3
 800f524:	6879      	ldr	r1, [r7, #4]
 800f526:	68f8      	ldr	r0, [r7, #12]
 800f528:	f000 ffd8 	bl	80104dc <USBD_CtlContinueRx>
 800f52c:	e030      	b.n	800f590 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f534:	b2db      	uxtb	r3, r3
 800f536:	2b03      	cmp	r3, #3
 800f538:	d10b      	bne.n	800f552 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f540:	691b      	ldr	r3, [r3, #16]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d005      	beq.n	800f552 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f54c:	691b      	ldr	r3, [r3, #16]
 800f54e:	68f8      	ldr	r0, [r7, #12]
 800f550:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f552:	68f8      	ldr	r0, [r7, #12]
 800f554:	f000 ffd3 	bl	80104fe <USBD_CtlSendStatus>
 800f558:	e01a      	b.n	800f590 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f560:	b2db      	uxtb	r3, r3
 800f562:	2b03      	cmp	r3, #3
 800f564:	d114      	bne.n	800f590 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f56c:	699b      	ldr	r3, [r3, #24]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d00e      	beq.n	800f590 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f578:	699b      	ldr	r3, [r3, #24]
 800f57a:	7afa      	ldrb	r2, [r7, #11]
 800f57c:	4611      	mov	r1, r2
 800f57e:	68f8      	ldr	r0, [r7, #12]
 800f580:	4798      	blx	r3
 800f582:	4603      	mov	r3, r0
 800f584:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f586:	7dfb      	ldrb	r3, [r7, #23]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d001      	beq.n	800f590 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f58c:	7dfb      	ldrb	r3, [r7, #23]
 800f58e:	e000      	b.n	800f592 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f590:	2300      	movs	r3, #0
}
 800f592:	4618      	mov	r0, r3
 800f594:	3718      	adds	r7, #24
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}

0800f59a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f59a:	b580      	push	{r7, lr}
 800f59c:	b086      	sub	sp, #24
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	60f8      	str	r0, [r7, #12]
 800f5a2:	460b      	mov	r3, r1
 800f5a4:	607a      	str	r2, [r7, #4]
 800f5a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f5a8:	7afb      	ldrb	r3, [r7, #11]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d16b      	bne.n	800f686 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	3314      	adds	r3, #20
 800f5b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f5ba:	2b02      	cmp	r3, #2
 800f5bc:	d156      	bne.n	800f66c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f5be:	693b      	ldr	r3, [r7, #16]
 800f5c0:	689a      	ldr	r2, [r3, #8]
 800f5c2:	693b      	ldr	r3, [r7, #16]
 800f5c4:	68db      	ldr	r3, [r3, #12]
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	d914      	bls.n	800f5f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	689a      	ldr	r2, [r3, #8]
 800f5ce:	693b      	ldr	r3, [r7, #16]
 800f5d0:	68db      	ldr	r3, [r3, #12]
 800f5d2:	1ad2      	subs	r2, r2, r3
 800f5d4:	693b      	ldr	r3, [r7, #16]
 800f5d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	689b      	ldr	r3, [r3, #8]
 800f5dc:	461a      	mov	r2, r3
 800f5de:	6879      	ldr	r1, [r7, #4]
 800f5e0:	68f8      	ldr	r0, [r7, #12]
 800f5e2:	f000 ff4d 	bl	8010480 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	2100      	movs	r1, #0
 800f5ec:	68f8      	ldr	r0, [r7, #12]
 800f5ee:	f001 fbad 	bl	8010d4c <USBD_LL_PrepareReceive>
 800f5f2:	e03b      	b.n	800f66c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	68da      	ldr	r2, [r3, #12]
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	689b      	ldr	r3, [r3, #8]
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d11c      	bne.n	800f63a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	685a      	ldr	r2, [r3, #4]
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f608:	429a      	cmp	r2, r3
 800f60a:	d316      	bcc.n	800f63a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f60c:	693b      	ldr	r3, [r7, #16]
 800f60e:	685a      	ldr	r2, [r3, #4]
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f616:	429a      	cmp	r2, r3
 800f618:	d20f      	bcs.n	800f63a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f61a:	2200      	movs	r2, #0
 800f61c:	2100      	movs	r1, #0
 800f61e:	68f8      	ldr	r0, [r7, #12]
 800f620:	f000 ff2e 	bl	8010480 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	2200      	movs	r2, #0
 800f628:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f62c:	2300      	movs	r3, #0
 800f62e:	2200      	movs	r2, #0
 800f630:	2100      	movs	r1, #0
 800f632:	68f8      	ldr	r0, [r7, #12]
 800f634:	f001 fb8a 	bl	8010d4c <USBD_LL_PrepareReceive>
 800f638:	e018      	b.n	800f66c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f640:	b2db      	uxtb	r3, r3
 800f642:	2b03      	cmp	r3, #3
 800f644:	d10b      	bne.n	800f65e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f64c:	68db      	ldr	r3, [r3, #12]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d005      	beq.n	800f65e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f658:	68db      	ldr	r3, [r3, #12]
 800f65a:	68f8      	ldr	r0, [r7, #12]
 800f65c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f65e:	2180      	movs	r1, #128	@ 0x80
 800f660:	68f8      	ldr	r0, [r7, #12]
 800f662:	f001 fac9 	bl	8010bf8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f666:	68f8      	ldr	r0, [r7, #12]
 800f668:	f000 ff5c 	bl	8010524 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f672:	2b01      	cmp	r3, #1
 800f674:	d122      	bne.n	800f6bc <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f676:	68f8      	ldr	r0, [r7, #12]
 800f678:	f7ff fe98 	bl	800f3ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	2200      	movs	r2, #0
 800f680:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f684:	e01a      	b.n	800f6bc <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f68c:	b2db      	uxtb	r3, r3
 800f68e:	2b03      	cmp	r3, #3
 800f690:	d114      	bne.n	800f6bc <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f698:	695b      	ldr	r3, [r3, #20]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d00e      	beq.n	800f6bc <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6a4:	695b      	ldr	r3, [r3, #20]
 800f6a6:	7afa      	ldrb	r2, [r7, #11]
 800f6a8:	4611      	mov	r1, r2
 800f6aa:	68f8      	ldr	r0, [r7, #12]
 800f6ac:	4798      	blx	r3
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f6b2:	7dfb      	ldrb	r3, [r7, #23]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d001      	beq.n	800f6bc <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f6b8:	7dfb      	ldrb	r3, [r7, #23]
 800f6ba:	e000      	b.n	800f6be <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f6bc:	2300      	movs	r3, #0
}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	3718      	adds	r7, #24
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}

0800f6c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f6c6:	b580      	push	{r7, lr}
 800f6c8:	b082      	sub	sp, #8
 800f6ca:	af00      	add	r7, sp, #0
 800f6cc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	2201      	movs	r2, #1
 800f6d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2200      	movs	r2, #0
 800f6da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d101      	bne.n	800f6fa <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f6f6:	2303      	movs	r3, #3
 800f6f8:	e02f      	b.n	800f75a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f700:	2b00      	cmp	r3, #0
 800f702:	d00f      	beq.n	800f724 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f70a:	685b      	ldr	r3, [r3, #4]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d009      	beq.n	800f724 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	687a      	ldr	r2, [r7, #4]
 800f71a:	6852      	ldr	r2, [r2, #4]
 800f71c:	b2d2      	uxtb	r2, r2
 800f71e:	4611      	mov	r1, r2
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f724:	2340      	movs	r3, #64	@ 0x40
 800f726:	2200      	movs	r2, #0
 800f728:	2100      	movs	r1, #0
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f001 fa3e 	bl	8010bac <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2201      	movs	r2, #1
 800f734:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2240      	movs	r2, #64	@ 0x40
 800f73c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f740:	2340      	movs	r3, #64	@ 0x40
 800f742:	2200      	movs	r2, #0
 800f744:	2180      	movs	r1, #128	@ 0x80
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f001 fa30 	bl	8010bac <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2201      	movs	r2, #1
 800f750:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2240      	movs	r2, #64	@ 0x40
 800f756:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f758:	2300      	movs	r3, #0
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	3708      	adds	r7, #8
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}

0800f762 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f762:	b480      	push	{r7}
 800f764:	b083      	sub	sp, #12
 800f766:	af00      	add	r7, sp, #0
 800f768:	6078      	str	r0, [r7, #4]
 800f76a:	460b      	mov	r3, r1
 800f76c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	78fa      	ldrb	r2, [r7, #3]
 800f772:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f774:	2300      	movs	r3, #0
}
 800f776:	4618      	mov	r0, r3
 800f778:	370c      	adds	r7, #12
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr

0800f782 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f782:	b480      	push	{r7}
 800f784:	b083      	sub	sp, #12
 800f786:	af00      	add	r7, sp, #0
 800f788:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f790:	b2da      	uxtb	r2, r3
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2204      	movs	r2, #4
 800f79c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f7a0:	2300      	movs	r3, #0
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	370c      	adds	r7, #12
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ac:	4770      	bx	lr

0800f7ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f7ae:	b480      	push	{r7}
 800f7b0:	b083      	sub	sp, #12
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7bc:	b2db      	uxtb	r3, r3
 800f7be:	2b04      	cmp	r3, #4
 800f7c0:	d106      	bne.n	800f7d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f7c8:	b2da      	uxtb	r2, r3
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f7d0:	2300      	movs	r3, #0
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	370c      	adds	r7, #12
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7dc:	4770      	bx	lr

0800f7de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f7de:	b580      	push	{r7, lr}
 800f7e0:	b082      	sub	sp, #8
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d101      	bne.n	800f7f4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f7f0:	2303      	movs	r3, #3
 800f7f2:	e012      	b.n	800f81a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7fa:	b2db      	uxtb	r3, r3
 800f7fc:	2b03      	cmp	r3, #3
 800f7fe:	d10b      	bne.n	800f818 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f806:	69db      	ldr	r3, [r3, #28]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d005      	beq.n	800f818 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f812:	69db      	ldr	r3, [r3, #28]
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f818:	2300      	movs	r3, #0
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3708      	adds	r7, #8
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}

0800f822 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f822:	b480      	push	{r7}
 800f824:	b087      	sub	sp, #28
 800f826:	af00      	add	r7, sp, #0
 800f828:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	781b      	ldrb	r3, [r3, #0]
 800f832:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	3301      	adds	r3, #1
 800f838:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f840:	8a3b      	ldrh	r3, [r7, #16]
 800f842:	021b      	lsls	r3, r3, #8
 800f844:	b21a      	sxth	r2, r3
 800f846:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f84a:	4313      	orrs	r3, r2
 800f84c:	b21b      	sxth	r3, r3
 800f84e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f850:	89fb      	ldrh	r3, [r7, #14]
}
 800f852:	4618      	mov	r0, r3
 800f854:	371c      	adds	r7, #28
 800f856:	46bd      	mov	sp, r7
 800f858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85c:	4770      	bx	lr
	...

0800f860 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b084      	sub	sp, #16
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
 800f868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f86a:	2300      	movs	r3, #0
 800f86c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f876:	2b40      	cmp	r3, #64	@ 0x40
 800f878:	d005      	beq.n	800f886 <USBD_StdDevReq+0x26>
 800f87a:	2b40      	cmp	r3, #64	@ 0x40
 800f87c:	d853      	bhi.n	800f926 <USBD_StdDevReq+0xc6>
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d00b      	beq.n	800f89a <USBD_StdDevReq+0x3a>
 800f882:	2b20      	cmp	r3, #32
 800f884:	d14f      	bne.n	800f926 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f88c:	689b      	ldr	r3, [r3, #8]
 800f88e:	6839      	ldr	r1, [r7, #0]
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	4798      	blx	r3
 800f894:	4603      	mov	r3, r0
 800f896:	73fb      	strb	r3, [r7, #15]
      break;
 800f898:	e04a      	b.n	800f930 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	785b      	ldrb	r3, [r3, #1]
 800f89e:	2b09      	cmp	r3, #9
 800f8a0:	d83b      	bhi.n	800f91a <USBD_StdDevReq+0xba>
 800f8a2:	a201      	add	r2, pc, #4	@ (adr r2, 800f8a8 <USBD_StdDevReq+0x48>)
 800f8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8a8:	0800f8fd 	.word	0x0800f8fd
 800f8ac:	0800f911 	.word	0x0800f911
 800f8b0:	0800f91b 	.word	0x0800f91b
 800f8b4:	0800f907 	.word	0x0800f907
 800f8b8:	0800f91b 	.word	0x0800f91b
 800f8bc:	0800f8db 	.word	0x0800f8db
 800f8c0:	0800f8d1 	.word	0x0800f8d1
 800f8c4:	0800f91b 	.word	0x0800f91b
 800f8c8:	0800f8f3 	.word	0x0800f8f3
 800f8cc:	0800f8e5 	.word	0x0800f8e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f8d0:	6839      	ldr	r1, [r7, #0]
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	f000 f9de 	bl	800fc94 <USBD_GetDescriptor>
          break;
 800f8d8:	e024      	b.n	800f924 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f8da:	6839      	ldr	r1, [r7, #0]
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f000 fb7f 	bl	800ffe0 <USBD_SetAddress>
          break;
 800f8e2:	e01f      	b.n	800f924 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f8e4:	6839      	ldr	r1, [r7, #0]
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f000 fbbe 	bl	8010068 <USBD_SetConfig>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	73fb      	strb	r3, [r7, #15]
          break;
 800f8f0:	e018      	b.n	800f924 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f8f2:	6839      	ldr	r1, [r7, #0]
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f000 fc5d 	bl	80101b4 <USBD_GetConfig>
          break;
 800f8fa:	e013      	b.n	800f924 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f8fc:	6839      	ldr	r1, [r7, #0]
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f000 fc8e 	bl	8010220 <USBD_GetStatus>
          break;
 800f904:	e00e      	b.n	800f924 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f906:	6839      	ldr	r1, [r7, #0]
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f000 fcbd 	bl	8010288 <USBD_SetFeature>
          break;
 800f90e:	e009      	b.n	800f924 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f910:	6839      	ldr	r1, [r7, #0]
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 fccc 	bl	80102b0 <USBD_ClrFeature>
          break;
 800f918:	e004      	b.n	800f924 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f91a:	6839      	ldr	r1, [r7, #0]
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f000 fd23 	bl	8010368 <USBD_CtlError>
          break;
 800f922:	bf00      	nop
      }
      break;
 800f924:	e004      	b.n	800f930 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f926:	6839      	ldr	r1, [r7, #0]
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f000 fd1d 	bl	8010368 <USBD_CtlError>
      break;
 800f92e:	bf00      	nop
  }

  return ret;
 800f930:	7bfb      	ldrb	r3, [r7, #15]
}
 800f932:	4618      	mov	r0, r3
 800f934:	3710      	adds	r7, #16
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop

0800f93c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b084      	sub	sp, #16
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f946:	2300      	movs	r3, #0
 800f948:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	781b      	ldrb	r3, [r3, #0]
 800f94e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f952:	2b40      	cmp	r3, #64	@ 0x40
 800f954:	d005      	beq.n	800f962 <USBD_StdItfReq+0x26>
 800f956:	2b40      	cmp	r3, #64	@ 0x40
 800f958:	d82f      	bhi.n	800f9ba <USBD_StdItfReq+0x7e>
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d001      	beq.n	800f962 <USBD_StdItfReq+0x26>
 800f95e:	2b20      	cmp	r3, #32
 800f960:	d12b      	bne.n	800f9ba <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f968:	b2db      	uxtb	r3, r3
 800f96a:	3b01      	subs	r3, #1
 800f96c:	2b02      	cmp	r3, #2
 800f96e:	d81d      	bhi.n	800f9ac <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	889b      	ldrh	r3, [r3, #4]
 800f974:	b2db      	uxtb	r3, r3
 800f976:	2b01      	cmp	r3, #1
 800f978:	d813      	bhi.n	800f9a2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f980:	689b      	ldr	r3, [r3, #8]
 800f982:	6839      	ldr	r1, [r7, #0]
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	4798      	blx	r3
 800f988:	4603      	mov	r3, r0
 800f98a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	88db      	ldrh	r3, [r3, #6]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d110      	bne.n	800f9b6 <USBD_StdItfReq+0x7a>
 800f994:	7bfb      	ldrb	r3, [r7, #15]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d10d      	bne.n	800f9b6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f000 fdaf 	bl	80104fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f9a0:	e009      	b.n	800f9b6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f9a2:	6839      	ldr	r1, [r7, #0]
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f000 fcdf 	bl	8010368 <USBD_CtlError>
          break;
 800f9aa:	e004      	b.n	800f9b6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f9ac:	6839      	ldr	r1, [r7, #0]
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f000 fcda 	bl	8010368 <USBD_CtlError>
          break;
 800f9b4:	e000      	b.n	800f9b8 <USBD_StdItfReq+0x7c>
          break;
 800f9b6:	bf00      	nop
      }
      break;
 800f9b8:	e004      	b.n	800f9c4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f9ba:	6839      	ldr	r1, [r7, #0]
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f000 fcd3 	bl	8010368 <USBD_CtlError>
      break;
 800f9c2:	bf00      	nop
  }

  return ret;
 800f9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	3710      	adds	r7, #16
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}

0800f9ce <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9ce:	b580      	push	{r7, lr}
 800f9d0:	b084      	sub	sp, #16
 800f9d2:	af00      	add	r7, sp, #0
 800f9d4:	6078      	str	r0, [r7, #4]
 800f9d6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f9d8:	2300      	movs	r3, #0
 800f9da:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	889b      	ldrh	r3, [r3, #4]
 800f9e0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	781b      	ldrb	r3, [r3, #0]
 800f9e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f9ea:	2b40      	cmp	r3, #64	@ 0x40
 800f9ec:	d007      	beq.n	800f9fe <USBD_StdEPReq+0x30>
 800f9ee:	2b40      	cmp	r3, #64	@ 0x40
 800f9f0:	f200 8145 	bhi.w	800fc7e <USBD_StdEPReq+0x2b0>
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d00c      	beq.n	800fa12 <USBD_StdEPReq+0x44>
 800f9f8:	2b20      	cmp	r3, #32
 800f9fa:	f040 8140 	bne.w	800fc7e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa04:	689b      	ldr	r3, [r3, #8]
 800fa06:	6839      	ldr	r1, [r7, #0]
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	4798      	blx	r3
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	73fb      	strb	r3, [r7, #15]
      break;
 800fa10:	e13a      	b.n	800fc88 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	785b      	ldrb	r3, [r3, #1]
 800fa16:	2b03      	cmp	r3, #3
 800fa18:	d007      	beq.n	800fa2a <USBD_StdEPReq+0x5c>
 800fa1a:	2b03      	cmp	r3, #3
 800fa1c:	f300 8129 	bgt.w	800fc72 <USBD_StdEPReq+0x2a4>
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d07f      	beq.n	800fb24 <USBD_StdEPReq+0x156>
 800fa24:	2b01      	cmp	r3, #1
 800fa26:	d03c      	beq.n	800faa2 <USBD_StdEPReq+0xd4>
 800fa28:	e123      	b.n	800fc72 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa30:	b2db      	uxtb	r3, r3
 800fa32:	2b02      	cmp	r3, #2
 800fa34:	d002      	beq.n	800fa3c <USBD_StdEPReq+0x6e>
 800fa36:	2b03      	cmp	r3, #3
 800fa38:	d016      	beq.n	800fa68 <USBD_StdEPReq+0x9a>
 800fa3a:	e02c      	b.n	800fa96 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fa3c:	7bbb      	ldrb	r3, [r7, #14]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d00d      	beq.n	800fa5e <USBD_StdEPReq+0x90>
 800fa42:	7bbb      	ldrb	r3, [r7, #14]
 800fa44:	2b80      	cmp	r3, #128	@ 0x80
 800fa46:	d00a      	beq.n	800fa5e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fa48:	7bbb      	ldrb	r3, [r7, #14]
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	f001 f8d3 	bl	8010bf8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa52:	2180      	movs	r1, #128	@ 0x80
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f001 f8cf 	bl	8010bf8 <USBD_LL_StallEP>
 800fa5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fa5c:	e020      	b.n	800faa0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800fa5e:	6839      	ldr	r1, [r7, #0]
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f000 fc81 	bl	8010368 <USBD_CtlError>
              break;
 800fa66:	e01b      	b.n	800faa0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	885b      	ldrh	r3, [r3, #2]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d10e      	bne.n	800fa8e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fa70:	7bbb      	ldrb	r3, [r7, #14]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d00b      	beq.n	800fa8e <USBD_StdEPReq+0xc0>
 800fa76:	7bbb      	ldrb	r3, [r7, #14]
 800fa78:	2b80      	cmp	r3, #128	@ 0x80
 800fa7a:	d008      	beq.n	800fa8e <USBD_StdEPReq+0xc0>
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	88db      	ldrh	r3, [r3, #6]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d104      	bne.n	800fa8e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fa84:	7bbb      	ldrb	r3, [r7, #14]
 800fa86:	4619      	mov	r1, r3
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f001 f8b5 	bl	8010bf8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f000 fd35 	bl	80104fe <USBD_CtlSendStatus>

              break;
 800fa94:	e004      	b.n	800faa0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800fa96:	6839      	ldr	r1, [r7, #0]
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f000 fc65 	bl	8010368 <USBD_CtlError>
              break;
 800fa9e:	bf00      	nop
          }
          break;
 800faa0:	e0ec      	b.n	800fc7c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800faa8:	b2db      	uxtb	r3, r3
 800faaa:	2b02      	cmp	r3, #2
 800faac:	d002      	beq.n	800fab4 <USBD_StdEPReq+0xe6>
 800faae:	2b03      	cmp	r3, #3
 800fab0:	d016      	beq.n	800fae0 <USBD_StdEPReq+0x112>
 800fab2:	e030      	b.n	800fb16 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fab4:	7bbb      	ldrb	r3, [r7, #14]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d00d      	beq.n	800fad6 <USBD_StdEPReq+0x108>
 800faba:	7bbb      	ldrb	r3, [r7, #14]
 800fabc:	2b80      	cmp	r3, #128	@ 0x80
 800fabe:	d00a      	beq.n	800fad6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fac0:	7bbb      	ldrb	r3, [r7, #14]
 800fac2:	4619      	mov	r1, r3
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f001 f897 	bl	8010bf8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800faca:	2180      	movs	r1, #128	@ 0x80
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f001 f893 	bl	8010bf8 <USBD_LL_StallEP>
 800fad2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fad4:	e025      	b.n	800fb22 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800fad6:	6839      	ldr	r1, [r7, #0]
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f000 fc45 	bl	8010368 <USBD_CtlError>
              break;
 800fade:	e020      	b.n	800fb22 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	885b      	ldrh	r3, [r3, #2]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d11b      	bne.n	800fb20 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fae8:	7bbb      	ldrb	r3, [r7, #14]
 800faea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d004      	beq.n	800fafc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800faf2:	7bbb      	ldrb	r3, [r7, #14]
 800faf4:	4619      	mov	r1, r3
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f001 f89d 	bl	8010c36 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f000 fcfe 	bl	80104fe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb08:	689b      	ldr	r3, [r3, #8]
 800fb0a:	6839      	ldr	r1, [r7, #0]
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	4798      	blx	r3
 800fb10:	4603      	mov	r3, r0
 800fb12:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800fb14:	e004      	b.n	800fb20 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800fb16:	6839      	ldr	r1, [r7, #0]
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f000 fc25 	bl	8010368 <USBD_CtlError>
              break;
 800fb1e:	e000      	b.n	800fb22 <USBD_StdEPReq+0x154>
              break;
 800fb20:	bf00      	nop
          }
          break;
 800fb22:	e0ab      	b.n	800fc7c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	2b02      	cmp	r3, #2
 800fb2e:	d002      	beq.n	800fb36 <USBD_StdEPReq+0x168>
 800fb30:	2b03      	cmp	r3, #3
 800fb32:	d032      	beq.n	800fb9a <USBD_StdEPReq+0x1cc>
 800fb34:	e097      	b.n	800fc66 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fb36:	7bbb      	ldrb	r3, [r7, #14]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d007      	beq.n	800fb4c <USBD_StdEPReq+0x17e>
 800fb3c:	7bbb      	ldrb	r3, [r7, #14]
 800fb3e:	2b80      	cmp	r3, #128	@ 0x80
 800fb40:	d004      	beq.n	800fb4c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800fb42:	6839      	ldr	r1, [r7, #0]
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f000 fc0f 	bl	8010368 <USBD_CtlError>
                break;
 800fb4a:	e091      	b.n	800fc70 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fb4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	da0b      	bge.n	800fb6c <USBD_StdEPReq+0x19e>
 800fb54:	7bbb      	ldrb	r3, [r7, #14]
 800fb56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fb5a:	4613      	mov	r3, r2
 800fb5c:	009b      	lsls	r3, r3, #2
 800fb5e:	4413      	add	r3, r2
 800fb60:	009b      	lsls	r3, r3, #2
 800fb62:	3310      	adds	r3, #16
 800fb64:	687a      	ldr	r2, [r7, #4]
 800fb66:	4413      	add	r3, r2
 800fb68:	3304      	adds	r3, #4
 800fb6a:	e00b      	b.n	800fb84 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fb6c:	7bbb      	ldrb	r3, [r7, #14]
 800fb6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fb72:	4613      	mov	r3, r2
 800fb74:	009b      	lsls	r3, r3, #2
 800fb76:	4413      	add	r3, r2
 800fb78:	009b      	lsls	r3, r3, #2
 800fb7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fb7e:	687a      	ldr	r2, [r7, #4]
 800fb80:	4413      	add	r3, r2
 800fb82:	3304      	adds	r3, #4
 800fb84:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	2202      	movs	r2, #2
 800fb90:	4619      	mov	r1, r3
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f000 fc59 	bl	801044a <USBD_CtlSendData>
              break;
 800fb98:	e06a      	b.n	800fc70 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fb9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	da11      	bge.n	800fbc6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fba2:	7bbb      	ldrb	r3, [r7, #14]
 800fba4:	f003 020f 	and.w	r2, r3, #15
 800fba8:	6879      	ldr	r1, [r7, #4]
 800fbaa:	4613      	mov	r3, r2
 800fbac:	009b      	lsls	r3, r3, #2
 800fbae:	4413      	add	r3, r2
 800fbb0:	009b      	lsls	r3, r3, #2
 800fbb2:	440b      	add	r3, r1
 800fbb4:	3324      	adds	r3, #36	@ 0x24
 800fbb6:	881b      	ldrh	r3, [r3, #0]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d117      	bne.n	800fbec <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fbbc:	6839      	ldr	r1, [r7, #0]
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f000 fbd2 	bl	8010368 <USBD_CtlError>
                  break;
 800fbc4:	e054      	b.n	800fc70 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fbc6:	7bbb      	ldrb	r3, [r7, #14]
 800fbc8:	f003 020f 	and.w	r2, r3, #15
 800fbcc:	6879      	ldr	r1, [r7, #4]
 800fbce:	4613      	mov	r3, r2
 800fbd0:	009b      	lsls	r3, r3, #2
 800fbd2:	4413      	add	r3, r2
 800fbd4:	009b      	lsls	r3, r3, #2
 800fbd6:	440b      	add	r3, r1
 800fbd8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fbdc:	881b      	ldrh	r3, [r3, #0]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d104      	bne.n	800fbec <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fbe2:	6839      	ldr	r1, [r7, #0]
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	f000 fbbf 	bl	8010368 <USBD_CtlError>
                  break;
 800fbea:	e041      	b.n	800fc70 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fbec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	da0b      	bge.n	800fc0c <USBD_StdEPReq+0x23e>
 800fbf4:	7bbb      	ldrb	r3, [r7, #14]
 800fbf6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fbfa:	4613      	mov	r3, r2
 800fbfc:	009b      	lsls	r3, r3, #2
 800fbfe:	4413      	add	r3, r2
 800fc00:	009b      	lsls	r3, r3, #2
 800fc02:	3310      	adds	r3, #16
 800fc04:	687a      	ldr	r2, [r7, #4]
 800fc06:	4413      	add	r3, r2
 800fc08:	3304      	adds	r3, #4
 800fc0a:	e00b      	b.n	800fc24 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fc0c:	7bbb      	ldrb	r3, [r7, #14]
 800fc0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fc12:	4613      	mov	r3, r2
 800fc14:	009b      	lsls	r3, r3, #2
 800fc16:	4413      	add	r3, r2
 800fc18:	009b      	lsls	r3, r3, #2
 800fc1a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fc1e:	687a      	ldr	r2, [r7, #4]
 800fc20:	4413      	add	r3, r2
 800fc22:	3304      	adds	r3, #4
 800fc24:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fc26:	7bbb      	ldrb	r3, [r7, #14]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d002      	beq.n	800fc32 <USBD_StdEPReq+0x264>
 800fc2c:	7bbb      	ldrb	r3, [r7, #14]
 800fc2e:	2b80      	cmp	r3, #128	@ 0x80
 800fc30:	d103      	bne.n	800fc3a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	2200      	movs	r2, #0
 800fc36:	601a      	str	r2, [r3, #0]
 800fc38:	e00e      	b.n	800fc58 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fc3a:	7bbb      	ldrb	r3, [r7, #14]
 800fc3c:	4619      	mov	r1, r3
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	f001 f818 	bl	8010c74 <USBD_LL_IsStallEP>
 800fc44:	4603      	mov	r3, r0
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d003      	beq.n	800fc52 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	2201      	movs	r2, #1
 800fc4e:	601a      	str	r2, [r3, #0]
 800fc50:	e002      	b.n	800fc58 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	2200      	movs	r2, #0
 800fc56:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	2202      	movs	r2, #2
 800fc5c:	4619      	mov	r1, r3
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f000 fbf3 	bl	801044a <USBD_CtlSendData>
              break;
 800fc64:	e004      	b.n	800fc70 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800fc66:	6839      	ldr	r1, [r7, #0]
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f000 fb7d 	bl	8010368 <USBD_CtlError>
              break;
 800fc6e:	bf00      	nop
          }
          break;
 800fc70:	e004      	b.n	800fc7c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800fc72:	6839      	ldr	r1, [r7, #0]
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f000 fb77 	bl	8010368 <USBD_CtlError>
          break;
 800fc7a:	bf00      	nop
      }
      break;
 800fc7c:	e004      	b.n	800fc88 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800fc7e:	6839      	ldr	r1, [r7, #0]
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f000 fb71 	bl	8010368 <USBD_CtlError>
      break;
 800fc86:	bf00      	nop
  }

  return ret;
 800fc88:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3710      	adds	r7, #16
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}
	...

0800fc94 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b084      	sub	sp, #16
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fca2:	2300      	movs	r3, #0
 800fca4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fca6:	2300      	movs	r3, #0
 800fca8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	885b      	ldrh	r3, [r3, #2]
 800fcae:	0a1b      	lsrs	r3, r3, #8
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	3b01      	subs	r3, #1
 800fcb4:	2b0e      	cmp	r3, #14
 800fcb6:	f200 8165 	bhi.w	800ff84 <USBD_GetDescriptor+0x2f0>
 800fcba:	a201      	add	r2, pc, #4	@ (adr r2, 800fcc0 <USBD_GetDescriptor+0x2c>)
 800fcbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcc0:	0800fd31 	.word	0x0800fd31
 800fcc4:	0800fd49 	.word	0x0800fd49
 800fcc8:	0800fd89 	.word	0x0800fd89
 800fccc:	0800ff85 	.word	0x0800ff85
 800fcd0:	0800ff85 	.word	0x0800ff85
 800fcd4:	0800ff25 	.word	0x0800ff25
 800fcd8:	0800ff51 	.word	0x0800ff51
 800fcdc:	0800ff85 	.word	0x0800ff85
 800fce0:	0800ff85 	.word	0x0800ff85
 800fce4:	0800ff85 	.word	0x0800ff85
 800fce8:	0800ff85 	.word	0x0800ff85
 800fcec:	0800ff85 	.word	0x0800ff85
 800fcf0:	0800ff85 	.word	0x0800ff85
 800fcf4:	0800ff85 	.word	0x0800ff85
 800fcf8:	0800fcfd 	.word	0x0800fcfd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd02:	69db      	ldr	r3, [r3, #28]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d00b      	beq.n	800fd20 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd0e:	69db      	ldr	r3, [r3, #28]
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	7c12      	ldrb	r2, [r2, #16]
 800fd14:	f107 0108 	add.w	r1, r7, #8
 800fd18:	4610      	mov	r0, r2
 800fd1a:	4798      	blx	r3
 800fd1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd1e:	e139      	b.n	800ff94 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 800fd20:	6839      	ldr	r1, [r7, #0]
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f000 fb20 	bl	8010368 <USBD_CtlError>
        err++;
 800fd28:	7afb      	ldrb	r3, [r7, #11]
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	72fb      	strb	r3, [r7, #11]
      break;
 800fd2e:	e131      	b.n	800ff94 <USBD_GetDescriptor+0x300>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	687a      	ldr	r2, [r7, #4]
 800fd3a:	7c12      	ldrb	r2, [r2, #16]
 800fd3c:	f107 0108 	add.w	r1, r7, #8
 800fd40:	4610      	mov	r0, r2
 800fd42:	4798      	blx	r3
 800fd44:	60f8      	str	r0, [r7, #12]
      break;
 800fd46:	e125      	b.n	800ff94 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	7c1b      	ldrb	r3, [r3, #16]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d10d      	bne.n	800fd6c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd58:	f107 0208 	add.w	r2, r7, #8
 800fd5c:	4610      	mov	r0, r2
 800fd5e:	4798      	blx	r3
 800fd60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	3301      	adds	r3, #1
 800fd66:	2202      	movs	r2, #2
 800fd68:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fd6a:	e113      	b.n	800ff94 <USBD_GetDescriptor+0x300>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd74:	f107 0208 	add.w	r2, r7, #8
 800fd78:	4610      	mov	r0, r2
 800fd7a:	4798      	blx	r3
 800fd7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	3301      	adds	r3, #1
 800fd82:	2202      	movs	r2, #2
 800fd84:	701a      	strb	r2, [r3, #0]
      break;
 800fd86:	e105      	b.n	800ff94 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	885b      	ldrh	r3, [r3, #2]
 800fd8c:	b2db      	uxtb	r3, r3
 800fd8e:	2b05      	cmp	r3, #5
 800fd90:	f200 80ac 	bhi.w	800feec <USBD_GetDescriptor+0x258>
 800fd94:	a201      	add	r2, pc, #4	@ (adr r2, 800fd9c <USBD_GetDescriptor+0x108>)
 800fd96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd9a:	bf00      	nop
 800fd9c:	0800fdb5 	.word	0x0800fdb5
 800fda0:	0800fde9 	.word	0x0800fde9
 800fda4:	0800fe1d 	.word	0x0800fe1d
 800fda8:	0800fe51 	.word	0x0800fe51
 800fdac:	0800fe85 	.word	0x0800fe85
 800fdb0:	0800feb9 	.word	0x0800feb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fdba:	685b      	ldr	r3, [r3, #4]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d00b      	beq.n	800fdd8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fdc6:	685b      	ldr	r3, [r3, #4]
 800fdc8:	687a      	ldr	r2, [r7, #4]
 800fdca:	7c12      	ldrb	r2, [r2, #16]
 800fdcc:	f107 0108 	add.w	r1, r7, #8
 800fdd0:	4610      	mov	r0, r2
 800fdd2:	4798      	blx	r3
 800fdd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fdd6:	e0a4      	b.n	800ff22 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800fdd8:	6839      	ldr	r1, [r7, #0]
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f000 fac4 	bl	8010368 <USBD_CtlError>
            err++;
 800fde0:	7afb      	ldrb	r3, [r7, #11]
 800fde2:	3301      	adds	r3, #1
 800fde4:	72fb      	strb	r3, [r7, #11]
          break;
 800fde6:	e09c      	b.n	800ff22 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fdee:	689b      	ldr	r3, [r3, #8]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d00b      	beq.n	800fe0c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fdfa:	689b      	ldr	r3, [r3, #8]
 800fdfc:	687a      	ldr	r2, [r7, #4]
 800fdfe:	7c12      	ldrb	r2, [r2, #16]
 800fe00:	f107 0108 	add.w	r1, r7, #8
 800fe04:	4610      	mov	r0, r2
 800fe06:	4798      	blx	r3
 800fe08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe0a:	e08a      	b.n	800ff22 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800fe0c:	6839      	ldr	r1, [r7, #0]
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f000 faaa 	bl	8010368 <USBD_CtlError>
            err++;
 800fe14:	7afb      	ldrb	r3, [r7, #11]
 800fe16:	3301      	adds	r3, #1
 800fe18:	72fb      	strb	r3, [r7, #11]
          break;
 800fe1a:	e082      	b.n	800ff22 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe22:	68db      	ldr	r3, [r3, #12]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d00b      	beq.n	800fe40 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe2e:	68db      	ldr	r3, [r3, #12]
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	7c12      	ldrb	r2, [r2, #16]
 800fe34:	f107 0108 	add.w	r1, r7, #8
 800fe38:	4610      	mov	r0, r2
 800fe3a:	4798      	blx	r3
 800fe3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe3e:	e070      	b.n	800ff22 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800fe40:	6839      	ldr	r1, [r7, #0]
 800fe42:	6878      	ldr	r0, [r7, #4]
 800fe44:	f000 fa90 	bl	8010368 <USBD_CtlError>
            err++;
 800fe48:	7afb      	ldrb	r3, [r7, #11]
 800fe4a:	3301      	adds	r3, #1
 800fe4c:	72fb      	strb	r3, [r7, #11]
          break;
 800fe4e:	e068      	b.n	800ff22 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe56:	691b      	ldr	r3, [r3, #16]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d00b      	beq.n	800fe74 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe62:	691b      	ldr	r3, [r3, #16]
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	7c12      	ldrb	r2, [r2, #16]
 800fe68:	f107 0108 	add.w	r1, r7, #8
 800fe6c:	4610      	mov	r0, r2
 800fe6e:	4798      	blx	r3
 800fe70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe72:	e056      	b.n	800ff22 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800fe74:	6839      	ldr	r1, [r7, #0]
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f000 fa76 	bl	8010368 <USBD_CtlError>
            err++;
 800fe7c:	7afb      	ldrb	r3, [r7, #11]
 800fe7e:	3301      	adds	r3, #1
 800fe80:	72fb      	strb	r3, [r7, #11]
          break;
 800fe82:	e04e      	b.n	800ff22 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe8a:	695b      	ldr	r3, [r3, #20]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d00b      	beq.n	800fea8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe96:	695b      	ldr	r3, [r3, #20]
 800fe98:	687a      	ldr	r2, [r7, #4]
 800fe9a:	7c12      	ldrb	r2, [r2, #16]
 800fe9c:	f107 0108 	add.w	r1, r7, #8
 800fea0:	4610      	mov	r0, r2
 800fea2:	4798      	blx	r3
 800fea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fea6:	e03c      	b.n	800ff22 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800fea8:	6839      	ldr	r1, [r7, #0]
 800feaa:	6878      	ldr	r0, [r7, #4]
 800feac:	f000 fa5c 	bl	8010368 <USBD_CtlError>
            err++;
 800feb0:	7afb      	ldrb	r3, [r7, #11]
 800feb2:	3301      	adds	r3, #1
 800feb4:	72fb      	strb	r3, [r7, #11]
          break;
 800feb6:	e034      	b.n	800ff22 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800febe:	699b      	ldr	r3, [r3, #24]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d00b      	beq.n	800fedc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800feca:	699b      	ldr	r3, [r3, #24]
 800fecc:	687a      	ldr	r2, [r7, #4]
 800fece:	7c12      	ldrb	r2, [r2, #16]
 800fed0:	f107 0108 	add.w	r1, r7, #8
 800fed4:	4610      	mov	r0, r2
 800fed6:	4798      	blx	r3
 800fed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800feda:	e022      	b.n	800ff22 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800fedc:	6839      	ldr	r1, [r7, #0]
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f000 fa42 	bl	8010368 <USBD_CtlError>
            err++;
 800fee4:	7afb      	ldrb	r3, [r7, #11]
 800fee6:	3301      	adds	r3, #1
 800fee8:	72fb      	strb	r3, [r7, #11]
          break;
 800feea:	e01a      	b.n	800ff22 <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d00c      	beq.n	800ff12 <USBD_GetDescriptor+0x27e>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fefe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff00:	683a      	ldr	r2, [r7, #0]
 800ff02:	8852      	ldrh	r2, [r2, #2]
 800ff04:	b2d1      	uxtb	r1, r2
 800ff06:	f107 0208 	add.w	r2, r7, #8
 800ff0a:	6878      	ldr	r0, [r7, #4]
 800ff0c:	4798      	blx	r3
 800ff0e:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800ff10:	e006      	b.n	800ff20 <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 800ff12:	6839      	ldr	r1, [r7, #0]
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f000 fa27 	bl	8010368 <USBD_CtlError>
            err++;
 800ff1a:	7afb      	ldrb	r3, [r7, #11]
 800ff1c:	3301      	adds	r3, #1
 800ff1e:	72fb      	strb	r3, [r7, #11]
          break;
 800ff20:	bf00      	nop
      }
      break;
 800ff22:	e037      	b.n	800ff94 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	7c1b      	ldrb	r3, [r3, #16]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d109      	bne.n	800ff40 <USBD_GetDescriptor+0x2ac>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff34:	f107 0208 	add.w	r2, r7, #8
 800ff38:	4610      	mov	r0, r2
 800ff3a:	4798      	blx	r3
 800ff3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff3e:	e029      	b.n	800ff94 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 800ff40:	6839      	ldr	r1, [r7, #0]
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f000 fa10 	bl	8010368 <USBD_CtlError>
        err++;
 800ff48:	7afb      	ldrb	r3, [r7, #11]
 800ff4a:	3301      	adds	r3, #1
 800ff4c:	72fb      	strb	r3, [r7, #11]
      break;
 800ff4e:	e021      	b.n	800ff94 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	7c1b      	ldrb	r3, [r3, #16]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d10d      	bne.n	800ff74 <USBD_GetDescriptor+0x2e0>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff60:	f107 0208 	add.w	r2, r7, #8
 800ff64:	4610      	mov	r0, r2
 800ff66:	4798      	blx	r3
 800ff68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	3301      	adds	r3, #1
 800ff6e:	2207      	movs	r2, #7
 800ff70:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff72:	e00f      	b.n	800ff94 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 800ff74:	6839      	ldr	r1, [r7, #0]
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f000 f9f6 	bl	8010368 <USBD_CtlError>
        err++;
 800ff7c:	7afb      	ldrb	r3, [r7, #11]
 800ff7e:	3301      	adds	r3, #1
 800ff80:	72fb      	strb	r3, [r7, #11]
      break;
 800ff82:	e007      	b.n	800ff94 <USBD_GetDescriptor+0x300>

    default:
      USBD_CtlError(pdev, req);
 800ff84:	6839      	ldr	r1, [r7, #0]
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f000 f9ee 	bl	8010368 <USBD_CtlError>
      err++;
 800ff8c:	7afb      	ldrb	r3, [r7, #11]
 800ff8e:	3301      	adds	r3, #1
 800ff90:	72fb      	strb	r3, [r7, #11]
      break;
 800ff92:	bf00      	nop
  }

  if (err != 0U)
 800ff94:	7afb      	ldrb	r3, [r7, #11]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d11e      	bne.n	800ffd8 <USBD_GetDescriptor+0x344>
  {
    return;
  }

  if (req->wLength != 0U)
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	88db      	ldrh	r3, [r3, #6]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d016      	beq.n	800ffd0 <USBD_GetDescriptor+0x33c>
  {
    if (len != 0U)
 800ffa2:	893b      	ldrh	r3, [r7, #8]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d00e      	beq.n	800ffc6 <USBD_GetDescriptor+0x332>
    {
      len = MIN(len, req->wLength);
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	88da      	ldrh	r2, [r3, #6]
 800ffac:	893b      	ldrh	r3, [r7, #8]
 800ffae:	4293      	cmp	r3, r2
 800ffb0:	bf28      	it	cs
 800ffb2:	4613      	movcs	r3, r2
 800ffb4:	b29b      	uxth	r3, r3
 800ffb6:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ffb8:	893b      	ldrh	r3, [r7, #8]
 800ffba:	461a      	mov	r2, r3
 800ffbc:	68f9      	ldr	r1, [r7, #12]
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f000 fa43 	bl	801044a <USBD_CtlSendData>
 800ffc4:	e009      	b.n	800ffda <USBD_GetDescriptor+0x346>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ffc6:	6839      	ldr	r1, [r7, #0]
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f000 f9cd 	bl	8010368 <USBD_CtlError>
 800ffce:	e004      	b.n	800ffda <USBD_GetDescriptor+0x346>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ffd0:	6878      	ldr	r0, [r7, #4]
 800ffd2:	f000 fa94 	bl	80104fe <USBD_CtlSendStatus>
 800ffd6:	e000      	b.n	800ffda <USBD_GetDescriptor+0x346>
    return;
 800ffd8:	bf00      	nop
  }
}
 800ffda:	3710      	adds	r7, #16
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b084      	sub	sp, #16
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	889b      	ldrh	r3, [r3, #4]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d131      	bne.n	8010056 <USBD_SetAddress+0x76>
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	88db      	ldrh	r3, [r3, #6]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d12d      	bne.n	8010056 <USBD_SetAddress+0x76>
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	885b      	ldrh	r3, [r3, #2]
 800fffe:	2b7f      	cmp	r3, #127	@ 0x7f
 8010000:	d829      	bhi.n	8010056 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	885b      	ldrh	r3, [r3, #2]
 8010006:	b2db      	uxtb	r3, r3
 8010008:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801000c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010014:	b2db      	uxtb	r3, r3
 8010016:	2b03      	cmp	r3, #3
 8010018:	d104      	bne.n	8010024 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801001a:	6839      	ldr	r1, [r7, #0]
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f000 f9a3 	bl	8010368 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010022:	e01d      	b.n	8010060 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	7bfa      	ldrb	r2, [r7, #15]
 8010028:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801002c:	7bfb      	ldrb	r3, [r7, #15]
 801002e:	4619      	mov	r1, r3
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f000 fe4b 	bl	8010ccc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f000 fa61 	bl	80104fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801003c:	7bfb      	ldrb	r3, [r7, #15]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d004      	beq.n	801004c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2202      	movs	r2, #2
 8010046:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801004a:	e009      	b.n	8010060 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2201      	movs	r2, #1
 8010050:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010054:	e004      	b.n	8010060 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010056:	6839      	ldr	r1, [r7, #0]
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f000 f985 	bl	8010368 <USBD_CtlError>
  }
}
 801005e:	bf00      	nop
 8010060:	bf00      	nop
 8010062:	3710      	adds	r7, #16
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}

08010068 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b084      	sub	sp, #16
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010072:	2300      	movs	r3, #0
 8010074:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	885b      	ldrh	r3, [r3, #2]
 801007a:	b2da      	uxtb	r2, r3
 801007c:	4b4c      	ldr	r3, [pc, #304]	@ (80101b0 <USBD_SetConfig+0x148>)
 801007e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010080:	4b4b      	ldr	r3, [pc, #300]	@ (80101b0 <USBD_SetConfig+0x148>)
 8010082:	781b      	ldrb	r3, [r3, #0]
 8010084:	2b01      	cmp	r3, #1
 8010086:	d905      	bls.n	8010094 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010088:	6839      	ldr	r1, [r7, #0]
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	f000 f96c 	bl	8010368 <USBD_CtlError>
    return USBD_FAIL;
 8010090:	2303      	movs	r3, #3
 8010092:	e088      	b.n	80101a6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801009a:	b2db      	uxtb	r3, r3
 801009c:	2b02      	cmp	r3, #2
 801009e:	d002      	beq.n	80100a6 <USBD_SetConfig+0x3e>
 80100a0:	2b03      	cmp	r3, #3
 80100a2:	d025      	beq.n	80100f0 <USBD_SetConfig+0x88>
 80100a4:	e071      	b.n	801018a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80100a6:	4b42      	ldr	r3, [pc, #264]	@ (80101b0 <USBD_SetConfig+0x148>)
 80100a8:	781b      	ldrb	r3, [r3, #0]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d01c      	beq.n	80100e8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80100ae:	4b40      	ldr	r3, [pc, #256]	@ (80101b0 <USBD_SetConfig+0x148>)
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	461a      	mov	r2, r3
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80100b8:	4b3d      	ldr	r3, [pc, #244]	@ (80101b0 <USBD_SetConfig+0x148>)
 80100ba:	781b      	ldrb	r3, [r3, #0]
 80100bc:	4619      	mov	r1, r3
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f7ff f97f 	bl	800f3c2 <USBD_SetClassConfig>
 80100c4:	4603      	mov	r3, r0
 80100c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80100c8:	7bfb      	ldrb	r3, [r7, #15]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d004      	beq.n	80100d8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80100ce:	6839      	ldr	r1, [r7, #0]
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	f000 f949 	bl	8010368 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80100d6:	e065      	b.n	80101a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f000 fa10 	bl	80104fe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2203      	movs	r2, #3
 80100e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80100e6:	e05d      	b.n	80101a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f000 fa08 	bl	80104fe <USBD_CtlSendStatus>
      break;
 80100ee:	e059      	b.n	80101a4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80100f0:	4b2f      	ldr	r3, [pc, #188]	@ (80101b0 <USBD_SetConfig+0x148>)
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d112      	bne.n	801011e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2202      	movs	r2, #2
 80100fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010100:	4b2b      	ldr	r3, [pc, #172]	@ (80101b0 <USBD_SetConfig+0x148>)
 8010102:	781b      	ldrb	r3, [r3, #0]
 8010104:	461a      	mov	r2, r3
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801010a:	4b29      	ldr	r3, [pc, #164]	@ (80101b0 <USBD_SetConfig+0x148>)
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	4619      	mov	r1, r3
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f7ff f972 	bl	800f3fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f000 f9f1 	bl	80104fe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801011c:	e042      	b.n	80101a4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801011e:	4b24      	ldr	r3, [pc, #144]	@ (80101b0 <USBD_SetConfig+0x148>)
 8010120:	781b      	ldrb	r3, [r3, #0]
 8010122:	461a      	mov	r2, r3
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	685b      	ldr	r3, [r3, #4]
 8010128:	429a      	cmp	r2, r3
 801012a:	d02a      	beq.n	8010182 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	b2db      	uxtb	r3, r3
 8010132:	4619      	mov	r1, r3
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f7ff f960 	bl	800f3fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801013a:	4b1d      	ldr	r3, [pc, #116]	@ (80101b0 <USBD_SetConfig+0x148>)
 801013c:	781b      	ldrb	r3, [r3, #0]
 801013e:	461a      	mov	r2, r3
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010144:	4b1a      	ldr	r3, [pc, #104]	@ (80101b0 <USBD_SetConfig+0x148>)
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	4619      	mov	r1, r3
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f7ff f939 	bl	800f3c2 <USBD_SetClassConfig>
 8010150:	4603      	mov	r3, r0
 8010152:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010154:	7bfb      	ldrb	r3, [r7, #15]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d00f      	beq.n	801017a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801015a:	6839      	ldr	r1, [r7, #0]
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f000 f903 	bl	8010368 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	685b      	ldr	r3, [r3, #4]
 8010166:	b2db      	uxtb	r3, r3
 8010168:	4619      	mov	r1, r3
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f7ff f945 	bl	800f3fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2202      	movs	r2, #2
 8010174:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010178:	e014      	b.n	80101a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801017a:	6878      	ldr	r0, [r7, #4]
 801017c:	f000 f9bf 	bl	80104fe <USBD_CtlSendStatus>
      break;
 8010180:	e010      	b.n	80101a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f000 f9bb 	bl	80104fe <USBD_CtlSendStatus>
      break;
 8010188:	e00c      	b.n	80101a4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801018a:	6839      	ldr	r1, [r7, #0]
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f000 f8eb 	bl	8010368 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010192:	4b07      	ldr	r3, [pc, #28]	@ (80101b0 <USBD_SetConfig+0x148>)
 8010194:	781b      	ldrb	r3, [r3, #0]
 8010196:	4619      	mov	r1, r3
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f7ff f92e 	bl	800f3fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801019e:	2303      	movs	r3, #3
 80101a0:	73fb      	strb	r3, [r7, #15]
      break;
 80101a2:	bf00      	nop
  }

  return ret;
 80101a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3710      	adds	r7, #16
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
 80101ae:	bf00      	nop
 80101b0:	200009d7 	.word	0x200009d7

080101b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b082      	sub	sp, #8
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	88db      	ldrh	r3, [r3, #6]
 80101c2:	2b01      	cmp	r3, #1
 80101c4:	d004      	beq.n	80101d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80101c6:	6839      	ldr	r1, [r7, #0]
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f000 f8cd 	bl	8010368 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80101ce:	e023      	b.n	8010218 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	2b02      	cmp	r3, #2
 80101da:	dc02      	bgt.n	80101e2 <USBD_GetConfig+0x2e>
 80101dc:	2b00      	cmp	r3, #0
 80101de:	dc03      	bgt.n	80101e8 <USBD_GetConfig+0x34>
 80101e0:	e015      	b.n	801020e <USBD_GetConfig+0x5a>
 80101e2:	2b03      	cmp	r3, #3
 80101e4:	d00b      	beq.n	80101fe <USBD_GetConfig+0x4a>
 80101e6:	e012      	b.n	801020e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2200      	movs	r2, #0
 80101ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	3308      	adds	r3, #8
 80101f2:	2201      	movs	r2, #1
 80101f4:	4619      	mov	r1, r3
 80101f6:	6878      	ldr	r0, [r7, #4]
 80101f8:	f000 f927 	bl	801044a <USBD_CtlSendData>
        break;
 80101fc:	e00c      	b.n	8010218 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	3304      	adds	r3, #4
 8010202:	2201      	movs	r2, #1
 8010204:	4619      	mov	r1, r3
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f000 f91f 	bl	801044a <USBD_CtlSendData>
        break;
 801020c:	e004      	b.n	8010218 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801020e:	6839      	ldr	r1, [r7, #0]
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f000 f8a9 	bl	8010368 <USBD_CtlError>
        break;
 8010216:	bf00      	nop
}
 8010218:	bf00      	nop
 801021a:	3708      	adds	r7, #8
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010230:	b2db      	uxtb	r3, r3
 8010232:	3b01      	subs	r3, #1
 8010234:	2b02      	cmp	r3, #2
 8010236:	d81e      	bhi.n	8010276 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	88db      	ldrh	r3, [r3, #6]
 801023c:	2b02      	cmp	r3, #2
 801023e:	d004      	beq.n	801024a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010240:	6839      	ldr	r1, [r7, #0]
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	f000 f890 	bl	8010368 <USBD_CtlError>
        break;
 8010248:	e01a      	b.n	8010280 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2201      	movs	r2, #1
 801024e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010256:	2b00      	cmp	r3, #0
 8010258:	d005      	beq.n	8010266 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	68db      	ldr	r3, [r3, #12]
 801025e:	f043 0202 	orr.w	r2, r3, #2
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	330c      	adds	r3, #12
 801026a:	2202      	movs	r2, #2
 801026c:	4619      	mov	r1, r3
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f000 f8eb 	bl	801044a <USBD_CtlSendData>
      break;
 8010274:	e004      	b.n	8010280 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010276:	6839      	ldr	r1, [r7, #0]
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f000 f875 	bl	8010368 <USBD_CtlError>
      break;
 801027e:	bf00      	nop
  }
}
 8010280:	bf00      	nop
 8010282:	3708      	adds	r7, #8
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}

08010288 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	885b      	ldrh	r3, [r3, #2]
 8010296:	2b01      	cmp	r3, #1
 8010298:	d106      	bne.n	80102a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2201      	movs	r2, #1
 801029e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f000 f92b 	bl	80104fe <USBD_CtlSendStatus>
  }
}
 80102a8:	bf00      	nop
 80102aa:	3708      	adds	r7, #8
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102c0:	b2db      	uxtb	r3, r3
 80102c2:	3b01      	subs	r3, #1
 80102c4:	2b02      	cmp	r3, #2
 80102c6:	d80b      	bhi.n	80102e0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	885b      	ldrh	r3, [r3, #2]
 80102cc:	2b01      	cmp	r3, #1
 80102ce:	d10c      	bne.n	80102ea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2200      	movs	r2, #0
 80102d4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80102d8:	6878      	ldr	r0, [r7, #4]
 80102da:	f000 f910 	bl	80104fe <USBD_CtlSendStatus>
      }
      break;
 80102de:	e004      	b.n	80102ea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80102e0:	6839      	ldr	r1, [r7, #0]
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f000 f840 	bl	8010368 <USBD_CtlError>
      break;
 80102e8:	e000      	b.n	80102ec <USBD_ClrFeature+0x3c>
      break;
 80102ea:	bf00      	nop
  }
}
 80102ec:	bf00      	nop
 80102ee:	3708      	adds	r7, #8
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	781a      	ldrb	r2, [r3, #0]
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	3301      	adds	r3, #1
 801030e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	781a      	ldrb	r2, [r3, #0]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	3301      	adds	r3, #1
 801031c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801031e:	68f8      	ldr	r0, [r7, #12]
 8010320:	f7ff fa7f 	bl	800f822 <SWAPBYTE>
 8010324:	4603      	mov	r3, r0
 8010326:	461a      	mov	r2, r3
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	3301      	adds	r3, #1
 8010330:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	3301      	adds	r3, #1
 8010336:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010338:	68f8      	ldr	r0, [r7, #12]
 801033a:	f7ff fa72 	bl	800f822 <SWAPBYTE>
 801033e:	4603      	mov	r3, r0
 8010340:	461a      	mov	r2, r3
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	3301      	adds	r3, #1
 801034a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	3301      	adds	r3, #1
 8010350:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010352:	68f8      	ldr	r0, [r7, #12]
 8010354:	f7ff fa65 	bl	800f822 <SWAPBYTE>
 8010358:	4603      	mov	r3, r0
 801035a:	461a      	mov	r2, r3
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	80da      	strh	r2, [r3, #6]
}
 8010360:	bf00      	nop
 8010362:	3710      	adds	r7, #16
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b082      	sub	sp, #8
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010372:	2180      	movs	r1, #128	@ 0x80
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f000 fc3f 	bl	8010bf8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801037a:	2100      	movs	r1, #0
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f000 fc3b 	bl	8010bf8 <USBD_LL_StallEP>
}
 8010382:	bf00      	nop
 8010384:	3708      	adds	r7, #8
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}

0801038a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801038a:	b580      	push	{r7, lr}
 801038c:	b086      	sub	sp, #24
 801038e:	af00      	add	r7, sp, #0
 8010390:	60f8      	str	r0, [r7, #12]
 8010392:	60b9      	str	r1, [r7, #8]
 8010394:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010396:	2300      	movs	r3, #0
 8010398:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d036      	beq.n	801040e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80103a4:	6938      	ldr	r0, [r7, #16]
 80103a6:	f000 f836 	bl	8010416 <USBD_GetLen>
 80103aa:	4603      	mov	r3, r0
 80103ac:	3301      	adds	r3, #1
 80103ae:	b29b      	uxth	r3, r3
 80103b0:	005b      	lsls	r3, r3, #1
 80103b2:	b29a      	uxth	r2, r3
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80103b8:	7dfb      	ldrb	r3, [r7, #23]
 80103ba:	68ba      	ldr	r2, [r7, #8]
 80103bc:	4413      	add	r3, r2
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	7812      	ldrb	r2, [r2, #0]
 80103c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80103c4:	7dfb      	ldrb	r3, [r7, #23]
 80103c6:	3301      	adds	r3, #1
 80103c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80103ca:	7dfb      	ldrb	r3, [r7, #23]
 80103cc:	68ba      	ldr	r2, [r7, #8]
 80103ce:	4413      	add	r3, r2
 80103d0:	2203      	movs	r2, #3
 80103d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80103d4:	7dfb      	ldrb	r3, [r7, #23]
 80103d6:	3301      	adds	r3, #1
 80103d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80103da:	e013      	b.n	8010404 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80103dc:	7dfb      	ldrb	r3, [r7, #23]
 80103de:	68ba      	ldr	r2, [r7, #8]
 80103e0:	4413      	add	r3, r2
 80103e2:	693a      	ldr	r2, [r7, #16]
 80103e4:	7812      	ldrb	r2, [r2, #0]
 80103e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80103e8:	693b      	ldr	r3, [r7, #16]
 80103ea:	3301      	adds	r3, #1
 80103ec:	613b      	str	r3, [r7, #16]
    idx++;
 80103ee:	7dfb      	ldrb	r3, [r7, #23]
 80103f0:	3301      	adds	r3, #1
 80103f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80103f4:	7dfb      	ldrb	r3, [r7, #23]
 80103f6:	68ba      	ldr	r2, [r7, #8]
 80103f8:	4413      	add	r3, r2
 80103fa:	2200      	movs	r2, #0
 80103fc:	701a      	strb	r2, [r3, #0]
    idx++;
 80103fe:	7dfb      	ldrb	r3, [r7, #23]
 8010400:	3301      	adds	r3, #1
 8010402:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	781b      	ldrb	r3, [r3, #0]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d1e7      	bne.n	80103dc <USBD_GetString+0x52>
 801040c:	e000      	b.n	8010410 <USBD_GetString+0x86>
    return;
 801040e:	bf00      	nop
  }
}
 8010410:	3718      	adds	r7, #24
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}

08010416 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010416:	b480      	push	{r7}
 8010418:	b085      	sub	sp, #20
 801041a:	af00      	add	r7, sp, #0
 801041c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801041e:	2300      	movs	r3, #0
 8010420:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010426:	e005      	b.n	8010434 <USBD_GetLen+0x1e>
  {
    len++;
 8010428:	7bfb      	ldrb	r3, [r7, #15]
 801042a:	3301      	adds	r3, #1
 801042c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	3301      	adds	r3, #1
 8010432:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d1f5      	bne.n	8010428 <USBD_GetLen+0x12>
  }

  return len;
 801043c:	7bfb      	ldrb	r3, [r7, #15]
}
 801043e:	4618      	mov	r0, r3
 8010440:	3714      	adds	r7, #20
 8010442:	46bd      	mov	sp, r7
 8010444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010448:	4770      	bx	lr

0801044a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801044a:	b580      	push	{r7, lr}
 801044c:	b084      	sub	sp, #16
 801044e:	af00      	add	r7, sp, #0
 8010450:	60f8      	str	r0, [r7, #12]
 8010452:	60b9      	str	r1, [r7, #8]
 8010454:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	2202      	movs	r2, #2
 801045a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	687a      	ldr	r2, [r7, #4]
 8010462:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	687a      	ldr	r2, [r7, #4]
 8010468:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	68ba      	ldr	r2, [r7, #8]
 801046e:	2100      	movs	r1, #0
 8010470:	68f8      	ldr	r0, [r7, #12]
 8010472:	f000 fc4a 	bl	8010d0a <USBD_LL_Transmit>

  return USBD_OK;
 8010476:	2300      	movs	r3, #0
}
 8010478:	4618      	mov	r0, r3
 801047a:	3710      	adds	r7, #16
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}

08010480 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b084      	sub	sp, #16
 8010484:	af00      	add	r7, sp, #0
 8010486:	60f8      	str	r0, [r7, #12]
 8010488:	60b9      	str	r1, [r7, #8]
 801048a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	68ba      	ldr	r2, [r7, #8]
 8010490:	2100      	movs	r1, #0
 8010492:	68f8      	ldr	r0, [r7, #12]
 8010494:	f000 fc39 	bl	8010d0a <USBD_LL_Transmit>

  return USBD_OK;
 8010498:	2300      	movs	r3, #0
}
 801049a:	4618      	mov	r0, r3
 801049c:	3710      	adds	r7, #16
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}

080104a2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80104a2:	b580      	push	{r7, lr}
 80104a4:	b084      	sub	sp, #16
 80104a6:	af00      	add	r7, sp, #0
 80104a8:	60f8      	str	r0, [r7, #12]
 80104aa:	60b9      	str	r1, [r7, #8]
 80104ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	2203      	movs	r2, #3
 80104b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	687a      	ldr	r2, [r7, #4]
 80104ba:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	687a      	ldr	r2, [r7, #4]
 80104c2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	68ba      	ldr	r2, [r7, #8]
 80104ca:	2100      	movs	r1, #0
 80104cc:	68f8      	ldr	r0, [r7, #12]
 80104ce:	f000 fc3d 	bl	8010d4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80104d2:	2300      	movs	r3, #0
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	3710      	adds	r7, #16
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}

080104dc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	60f8      	str	r0, [r7, #12]
 80104e4:	60b9      	str	r1, [r7, #8]
 80104e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	68ba      	ldr	r2, [r7, #8]
 80104ec:	2100      	movs	r1, #0
 80104ee:	68f8      	ldr	r0, [r7, #12]
 80104f0:	f000 fc2c 	bl	8010d4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80104f4:	2300      	movs	r3, #0
}
 80104f6:	4618      	mov	r0, r3
 80104f8:	3710      	adds	r7, #16
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}

080104fe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80104fe:	b580      	push	{r7, lr}
 8010500:	b082      	sub	sp, #8
 8010502:	af00      	add	r7, sp, #0
 8010504:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2204      	movs	r2, #4
 801050a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801050e:	2300      	movs	r3, #0
 8010510:	2200      	movs	r2, #0
 8010512:	2100      	movs	r1, #0
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f000 fbf8 	bl	8010d0a <USBD_LL_Transmit>

  return USBD_OK;
 801051a:	2300      	movs	r3, #0
}
 801051c:	4618      	mov	r0, r3
 801051e:	3708      	adds	r7, #8
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}

08010524 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b082      	sub	sp, #8
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2205      	movs	r2, #5
 8010530:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010534:	2300      	movs	r3, #0
 8010536:	2200      	movs	r2, #0
 8010538:	2100      	movs	r1, #0
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f000 fc06 	bl	8010d4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010540:	2300      	movs	r3, #0
}
 8010542:	4618      	mov	r0, r3
 8010544:	3708      	adds	r7, #8
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
	...

0801054c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &DFU_Desc, DEVICE_FS) != USBD_OK) {
 8010550:	2200      	movs	r2, #0
 8010552:	4912      	ldr	r1, [pc, #72]	@ (801059c <MX_USB_Device_Init+0x50>)
 8010554:	4812      	ldr	r0, [pc, #72]	@ (80105a0 <MX_USB_Device_Init+0x54>)
 8010556:	f7fe feab 	bl	800f2b0 <USBD_Init>
 801055a:	4603      	mov	r3, r0
 801055c:	2b00      	cmp	r3, #0
 801055e:	d001      	beq.n	8010564 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8010560:	f7f1 fe72 	bl	8002248 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 8010564:	490f      	ldr	r1, [pc, #60]	@ (80105a4 <MX_USB_Device_Init+0x58>)
 8010566:	480e      	ldr	r0, [pc, #56]	@ (80105a0 <MX_USB_Device_Init+0x54>)
 8010568:	f7fe fed2 	bl	800f310 <USBD_RegisterClass>
 801056c:	4603      	mov	r3, r0
 801056e:	2b00      	cmp	r3, #0
 8010570:	d001      	beq.n	8010576 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8010572:	f7f1 fe69 	bl	8002248 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_Flash_fops) != USBD_OK) {
 8010576:	490c      	ldr	r1, [pc, #48]	@ (80105a8 <MX_USB_Device_Init+0x5c>)
 8010578:	4809      	ldr	r0, [pc, #36]	@ (80105a0 <MX_USB_Device_Init+0x54>)
 801057a:	f7fe fb17 	bl	800ebac <USBD_DFU_RegisterMedia>
 801057e:	4603      	mov	r3, r0
 8010580:	2b00      	cmp	r3, #0
 8010582:	d001      	beq.n	8010588 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8010584:	f7f1 fe60 	bl	8002248 <Error_Handler>
  }
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  if (USBD_LL_BatterryCharging(&hUsbDeviceFS) != USBD_OK) {
 8010588:	4805      	ldr	r0, [pc, #20]	@ (80105a0 <MX_USB_Device_Init+0x54>)
 801058a:	f000 fc01 	bl	8010d90 <USBD_LL_BatterryCharging>
 801058e:	4603      	mov	r3, r0
 8010590:	2b00      	cmp	r3, #0
 8010592:	d001      	beq.n	8010598 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8010594:	f7f1 fe58 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8010598:	bf00      	nop
 801059a:	bd80      	pop	{r7, pc}
 801059c:	20000070 	.word	0x20000070
 80105a0:	200009d8 	.word	0x200009d8
 80105a4:	2000000c 	.word	0x2000000c
 80105a8:	200000c4 	.word	0x200000c4

080105ac <USBD_DFU_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105ac:	b480      	push	{r7}
 80105ae:	b083      	sub	sp, #12
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	4603      	mov	r3, r0
 80105b4:	6039      	str	r1, [r7, #0]
 80105b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DFU_DeviceDesc);
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	2212      	movs	r2, #18
 80105bc:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceDesc;
 80105be:	4b03      	ldr	r3, [pc, #12]	@ (80105cc <USBD_DFU_DeviceDescriptor+0x20>)
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	370c      	adds	r7, #12
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr
 80105cc:	20000090 	.word	0x20000090

080105d0 <USBD_DFU_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105d0:	b480      	push	{r7}
 80105d2:	b083      	sub	sp, #12
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	4603      	mov	r3, r0
 80105d8:	6039      	str	r1, [r7, #0]
 80105da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	2204      	movs	r2, #4
 80105e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80105e2:	4b03      	ldr	r3, [pc, #12]	@ (80105f0 <USBD_DFU_LangIDStrDescriptor+0x20>)
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	370c      	adds	r7, #12
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr
 80105f0:	200000a4 	.word	0x200000a4

080105f4 <USBD_DFU_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	4603      	mov	r3, r0
 80105fc:	6039      	str	r1, [r7, #0]
 80105fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010600:	79fb      	ldrb	r3, [r7, #7]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d105      	bne.n	8010612 <USBD_DFU_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010606:	683a      	ldr	r2, [r7, #0]
 8010608:	4907      	ldr	r1, [pc, #28]	@ (8010628 <USBD_DFU_ProductStrDescriptor+0x34>)
 801060a:	4808      	ldr	r0, [pc, #32]	@ (801062c <USBD_DFU_ProductStrDescriptor+0x38>)
 801060c:	f7ff febd 	bl	801038a <USBD_GetString>
 8010610:	e004      	b.n	801061c <USBD_DFU_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010612:	683a      	ldr	r2, [r7, #0]
 8010614:	4904      	ldr	r1, [pc, #16]	@ (8010628 <USBD_DFU_ProductStrDescriptor+0x34>)
 8010616:	4805      	ldr	r0, [pc, #20]	@ (801062c <USBD_DFU_ProductStrDescriptor+0x38>)
 8010618:	f7ff feb7 	bl	801038a <USBD_GetString>
  }
  return USBD_StrDesc;
 801061c:	4b02      	ldr	r3, [pc, #8]	@ (8010628 <USBD_DFU_ProductStrDescriptor+0x34>)
}
 801061e:	4618      	mov	r0, r3
 8010620:	3708      	adds	r7, #8
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}
 8010626:	bf00      	nop
 8010628:	20000ca8 	.word	0x20000ca8
 801062c:	08013cd4 	.word	0x08013cd4

08010630 <USBD_DFU_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
 8010636:	4603      	mov	r3, r0
 8010638:	6039      	str	r1, [r7, #0]
 801063a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801063c:	683a      	ldr	r2, [r7, #0]
 801063e:	4904      	ldr	r1, [pc, #16]	@ (8010650 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
 8010640:	4804      	ldr	r0, [pc, #16]	@ (8010654 <USBD_DFU_ManufacturerStrDescriptor+0x24>)
 8010642:	f7ff fea2 	bl	801038a <USBD_GetString>
  return USBD_StrDesc;
 8010646:	4b02      	ldr	r3, [pc, #8]	@ (8010650 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
}
 8010648:	4618      	mov	r0, r3
 801064a:	3708      	adds	r7, #8
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}
 8010650:	20000ca8 	.word	0x20000ca8
 8010654:	08013cf4 	.word	0x08013cf4

08010658 <USBD_DFU_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	4603      	mov	r3, r0
 8010660:	6039      	str	r1, [r7, #0]
 8010662:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	221a      	movs	r2, #26
 8010668:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801066a:	f000 f843 	bl	80106f4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_DFU_SerialStrDescriptor */

  /* USER CODE END USBD_DFU_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801066e:	4b02      	ldr	r3, [pc, #8]	@ (8010678 <USBD_DFU_SerialStrDescriptor+0x20>)
}
 8010670:	4618      	mov	r0, r3
 8010672:	3708      	adds	r7, #8
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}
 8010678:	200000a8 	.word	0x200000a8

0801067c <USBD_DFU_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b082      	sub	sp, #8
 8010680:	af00      	add	r7, sp, #0
 8010682:	4603      	mov	r3, r0
 8010684:	6039      	str	r1, [r7, #0]
 8010686:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010688:	79fb      	ldrb	r3, [r7, #7]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d105      	bne.n	801069a <USBD_DFU_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801068e:	683a      	ldr	r2, [r7, #0]
 8010690:	4907      	ldr	r1, [pc, #28]	@ (80106b0 <USBD_DFU_ConfigStrDescriptor+0x34>)
 8010692:	4808      	ldr	r0, [pc, #32]	@ (80106b4 <USBD_DFU_ConfigStrDescriptor+0x38>)
 8010694:	f7ff fe79 	bl	801038a <USBD_GetString>
 8010698:	e004      	b.n	80106a4 <USBD_DFU_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801069a:	683a      	ldr	r2, [r7, #0]
 801069c:	4904      	ldr	r1, [pc, #16]	@ (80106b0 <USBD_DFU_ConfigStrDescriptor+0x34>)
 801069e:	4805      	ldr	r0, [pc, #20]	@ (80106b4 <USBD_DFU_ConfigStrDescriptor+0x38>)
 80106a0:	f7ff fe73 	bl	801038a <USBD_GetString>
  }
  return USBD_StrDesc;
 80106a4:	4b02      	ldr	r3, [pc, #8]	@ (80106b0 <USBD_DFU_ConfigStrDescriptor+0x34>)
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	3708      	adds	r7, #8
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}
 80106ae:	bf00      	nop
 80106b0:	20000ca8 	.word	0x20000ca8
 80106b4:	08013d08 	.word	0x08013d08

080106b8 <USBD_DFU_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b082      	sub	sp, #8
 80106bc:	af00      	add	r7, sp, #0
 80106be:	4603      	mov	r3, r0
 80106c0:	6039      	str	r1, [r7, #0]
 80106c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80106c4:	79fb      	ldrb	r3, [r7, #7]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d105      	bne.n	80106d6 <USBD_DFU_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80106ca:	683a      	ldr	r2, [r7, #0]
 80106cc:	4907      	ldr	r1, [pc, #28]	@ (80106ec <USBD_DFU_InterfaceStrDescriptor+0x34>)
 80106ce:	4808      	ldr	r0, [pc, #32]	@ (80106f0 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 80106d0:	f7ff fe5b 	bl	801038a <USBD_GetString>
 80106d4:	e004      	b.n	80106e0 <USBD_DFU_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80106d6:	683a      	ldr	r2, [r7, #0]
 80106d8:	4904      	ldr	r1, [pc, #16]	@ (80106ec <USBD_DFU_InterfaceStrDescriptor+0x34>)
 80106da:	4805      	ldr	r0, [pc, #20]	@ (80106f0 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 80106dc:	f7ff fe55 	bl	801038a <USBD_GetString>
  }
  return USBD_StrDesc;
 80106e0:	4b02      	ldr	r3, [pc, #8]	@ (80106ec <USBD_DFU_InterfaceStrDescriptor+0x34>)
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3708      	adds	r7, #8
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}
 80106ea:	bf00      	nop
 80106ec:	20000ca8 	.word	0x20000ca8
 80106f0:	08013d14 	.word	0x08013d14

080106f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b084      	sub	sp, #16
 80106f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80106fa:	4b0f      	ldr	r3, [pc, #60]	@ (8010738 <Get_SerialNum+0x44>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010700:	4b0e      	ldr	r3, [pc, #56]	@ (801073c <Get_SerialNum+0x48>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010706:	4b0e      	ldr	r3, [pc, #56]	@ (8010740 <Get_SerialNum+0x4c>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801070c:	68fa      	ldr	r2, [r7, #12]
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	4413      	add	r3, r2
 8010712:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d009      	beq.n	801072e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801071a:	2208      	movs	r2, #8
 801071c:	4909      	ldr	r1, [pc, #36]	@ (8010744 <Get_SerialNum+0x50>)
 801071e:	68f8      	ldr	r0, [r7, #12]
 8010720:	f000 f814 	bl	801074c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010724:	2204      	movs	r2, #4
 8010726:	4908      	ldr	r1, [pc, #32]	@ (8010748 <Get_SerialNum+0x54>)
 8010728:	68b8      	ldr	r0, [r7, #8]
 801072a:	f000 f80f 	bl	801074c <IntToUnicode>
  }
}
 801072e:	bf00      	nop
 8010730:	3710      	adds	r7, #16
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}
 8010736:	bf00      	nop
 8010738:	1fff7590 	.word	0x1fff7590
 801073c:	1fff7594 	.word	0x1fff7594
 8010740:	1fff7598 	.word	0x1fff7598
 8010744:	200000aa 	.word	0x200000aa
 8010748:	200000ba 	.word	0x200000ba

0801074c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801074c:	b480      	push	{r7}
 801074e:	b087      	sub	sp, #28
 8010750:	af00      	add	r7, sp, #0
 8010752:	60f8      	str	r0, [r7, #12]
 8010754:	60b9      	str	r1, [r7, #8]
 8010756:	4613      	mov	r3, r2
 8010758:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801075a:	2300      	movs	r3, #0
 801075c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801075e:	2300      	movs	r3, #0
 8010760:	75fb      	strb	r3, [r7, #23]
 8010762:	e027      	b.n	80107b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	0f1b      	lsrs	r3, r3, #28
 8010768:	2b09      	cmp	r3, #9
 801076a:	d80b      	bhi.n	8010784 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	0f1b      	lsrs	r3, r3, #28
 8010770:	b2da      	uxtb	r2, r3
 8010772:	7dfb      	ldrb	r3, [r7, #23]
 8010774:	005b      	lsls	r3, r3, #1
 8010776:	4619      	mov	r1, r3
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	440b      	add	r3, r1
 801077c:	3230      	adds	r2, #48	@ 0x30
 801077e:	b2d2      	uxtb	r2, r2
 8010780:	701a      	strb	r2, [r3, #0]
 8010782:	e00a      	b.n	801079a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	0f1b      	lsrs	r3, r3, #28
 8010788:	b2da      	uxtb	r2, r3
 801078a:	7dfb      	ldrb	r3, [r7, #23]
 801078c:	005b      	lsls	r3, r3, #1
 801078e:	4619      	mov	r1, r3
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	440b      	add	r3, r1
 8010794:	3237      	adds	r2, #55	@ 0x37
 8010796:	b2d2      	uxtb	r2, r2
 8010798:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	011b      	lsls	r3, r3, #4
 801079e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80107a0:	7dfb      	ldrb	r3, [r7, #23]
 80107a2:	005b      	lsls	r3, r3, #1
 80107a4:	3301      	adds	r3, #1
 80107a6:	68ba      	ldr	r2, [r7, #8]
 80107a8:	4413      	add	r3, r2
 80107aa:	2200      	movs	r2, #0
 80107ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80107ae:	7dfb      	ldrb	r3, [r7, #23]
 80107b0:	3301      	adds	r3, #1
 80107b2:	75fb      	strb	r3, [r7, #23]
 80107b4:	7dfa      	ldrb	r2, [r7, #23]
 80107b6:	79fb      	ldrb	r3, [r7, #7]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d3d3      	bcc.n	8010764 <IntToUnicode+0x18>
  }
}
 80107bc:	bf00      	nop
 80107be:	bf00      	nop
 80107c0:	371c      	adds	r7, #28
 80107c2:	46bd      	mov	sp, r7
 80107c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c8:	4770      	bx	lr

080107ca <FLASH_If_Init>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Init(void)
{
 80107ca:	b480      	push	{r7}
 80107cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 80107ce:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 80107d0:	4618      	mov	r0, r3
 80107d2:	46bd      	mov	sp, r7
 80107d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d8:	4770      	bx	lr

080107da <FLASH_If_DeInit>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t FLASH_If_DeInit(void)
{
 80107da:	b480      	push	{r7}
 80107dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 80107de:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 80107e0:	4618      	mov	r0, r3
 80107e2:	46bd      	mov	sp, r7
 80107e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e8:	4770      	bx	lr

080107ea <FLASH_If_Erase>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Erase(uint32_t Add)
{
 80107ea:	b480      	push	{r7}
 80107ec:	b083      	sub	sp, #12
 80107ee:	af00      	add	r7, sp, #0
 80107f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 80107f2:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	370c      	adds	r7, #12
 80107f8:	46bd      	mov	sp, r7
 80107fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fe:	4770      	bx	lr

08010800 <FLASH_If_Write>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8010800:	b480      	push	{r7}
 8010802:	b085      	sub	sp, #20
 8010804:	af00      	add	r7, sp, #0
 8010806:	60f8      	str	r0, [r7, #12]
 8010808:	60b9      	str	r1, [r7, #8]
 801080a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 801080c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801080e:	4618      	mov	r0, r3
 8010810:	3714      	adds	r7, #20
 8010812:	46bd      	mov	sp, r7
 8010814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010818:	4770      	bx	lr

0801081a <FLASH_If_Read>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *FLASH_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 801081a:	b480      	push	{r7}
 801081c:	b085      	sub	sp, #20
 801081e:	af00      	add	r7, sp, #0
 8010820:	60f8      	str	r0, [r7, #12]
 8010822:	60b9      	str	r1, [r7, #8]
 8010824:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(FLASH_BASE);
 8010826:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  /* USER CODE END 4 */
}
 801082a:	4618      	mov	r0, r3
 801082c:	3714      	adds	r7, #20
 801082e:	46bd      	mov	sp, r7
 8010830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010834:	4770      	bx	lr

08010836 <FLASH_If_GetStatus>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t FLASH_If_GetStatus(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8010836:	b480      	push	{r7}
 8010838:	b085      	sub	sp, #20
 801083a:	af00      	add	r7, sp, #0
 801083c:	60f8      	str	r0, [r7, #12]
 801083e:	460b      	mov	r3, r1
 8010840:	607a      	str	r2, [r7, #4]
 8010842:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8010844:	7afb      	ldrb	r3, [r7, #11]
 8010846:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8010848:	bf00      	nop
  }
  return (USBD_OK);
 801084a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801084c:	4618      	mov	r0, r3
 801084e:	3714      	adds	r7, #20
 8010850:	46bd      	mov	sp, r7
 8010852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010856:	4770      	bx	lr

08010858 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b098      	sub	sp, #96	@ 0x60
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010860:	f107 0310 	add.w	r3, r7, #16
 8010864:	2250      	movs	r2, #80	@ 0x50
 8010866:	2100      	movs	r1, #0
 8010868:	4618      	mov	r0, r3
 801086a:	f001 f961 	bl	8011b30 <memset>
  if(pcdHandle->Instance==USB)
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	4a15      	ldr	r2, [pc, #84]	@ (80108c8 <HAL_PCD_MspInit+0x70>)
 8010874:	4293      	cmp	r3, r2
 8010876:	d122      	bne.n	80108be <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010878:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801087c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801087e:	2300      	movs	r3, #0
 8010880:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010882:	f107 0310 	add.w	r3, r7, #16
 8010886:	4618      	mov	r0, r3
 8010888:	f7f8 f82a 	bl	80088e0 <HAL_RCCEx_PeriphCLKConfig>
 801088c:	4603      	mov	r3, r0
 801088e:	2b00      	cmp	r3, #0
 8010890:	d001      	beq.n	8010896 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8010892:	f7f1 fcd9 	bl	8002248 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010896:	4b0d      	ldr	r3, [pc, #52]	@ (80108cc <HAL_PCD_MspInit+0x74>)
 8010898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801089a:	4a0c      	ldr	r2, [pc, #48]	@ (80108cc <HAL_PCD_MspInit+0x74>)
 801089c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80108a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80108a2:	4b0a      	ldr	r3, [pc, #40]	@ (80108cc <HAL_PCD_MspInit+0x74>)
 80108a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80108a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80108aa:	60fb      	str	r3, [r7, #12]
 80108ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80108ae:	2200      	movs	r2, #0
 80108b0:	2100      	movs	r1, #0
 80108b2:	2014      	movs	r0, #20
 80108b4:	f7f4 fd5a 	bl	800536c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80108b8:	2014      	movs	r0, #20
 80108ba:	f7f4 fd71 	bl	80053a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80108be:	bf00      	nop
 80108c0:	3760      	adds	r7, #96	@ 0x60
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	40005c00 	.word	0x40005c00
 80108cc:	40021000 	.word	0x40021000

080108d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b082      	sub	sp, #8
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80108e4:	4619      	mov	r1, r3
 80108e6:	4610      	mov	r0, r2
 80108e8:	f7fe fd9f 	bl	800f42a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80108ec:	bf00      	nop
 80108ee:	3708      	adds	r7, #8
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}

080108f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b082      	sub	sp, #8
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	460b      	mov	r3, r1
 80108fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010906:	78fa      	ldrb	r2, [r7, #3]
 8010908:	6879      	ldr	r1, [r7, #4]
 801090a:	4613      	mov	r3, r2
 801090c:	009b      	lsls	r3, r3, #2
 801090e:	4413      	add	r3, r2
 8010910:	00db      	lsls	r3, r3, #3
 8010912:	440b      	add	r3, r1
 8010914:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010918:	681a      	ldr	r2, [r3, #0]
 801091a:	78fb      	ldrb	r3, [r7, #3]
 801091c:	4619      	mov	r1, r3
 801091e:	f7fe fdd9 	bl	800f4d4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8010922:	bf00      	nop
 8010924:	3708      	adds	r7, #8
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}

0801092a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801092a:	b580      	push	{r7, lr}
 801092c:	b082      	sub	sp, #8
 801092e:	af00      	add	r7, sp, #0
 8010930:	6078      	str	r0, [r7, #4]
 8010932:	460b      	mov	r3, r1
 8010934:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 801093c:	78fa      	ldrb	r2, [r7, #3]
 801093e:	6879      	ldr	r1, [r7, #4]
 8010940:	4613      	mov	r3, r2
 8010942:	009b      	lsls	r3, r3, #2
 8010944:	4413      	add	r3, r2
 8010946:	00db      	lsls	r3, r3, #3
 8010948:	440b      	add	r3, r1
 801094a:	3324      	adds	r3, #36	@ 0x24
 801094c:	681a      	ldr	r2, [r3, #0]
 801094e:	78fb      	ldrb	r3, [r7, #3]
 8010950:	4619      	mov	r1, r3
 8010952:	f7fe fe22 	bl	800f59a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8010956:	bf00      	nop
 8010958:	3708      	adds	r7, #8
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}

0801095e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801095e:	b580      	push	{r7, lr}
 8010960:	b082      	sub	sp, #8
 8010962:	af00      	add	r7, sp, #0
 8010964:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801096c:	4618      	mov	r0, r3
 801096e:	f7fe ff36 	bl	800f7de <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8010972:	bf00      	nop
 8010974:	3708      	adds	r7, #8
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}

0801097a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801097a:	b580      	push	{r7, lr}
 801097c:	b084      	sub	sp, #16
 801097e:	af00      	add	r7, sp, #0
 8010980:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010982:	2301      	movs	r3, #1
 8010984:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	795b      	ldrb	r3, [r3, #5]
 801098a:	2b02      	cmp	r3, #2
 801098c:	d001      	beq.n	8010992 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801098e:	f7f1 fc5b 	bl	8002248 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010998:	7bfa      	ldrb	r2, [r7, #15]
 801099a:	4611      	mov	r1, r2
 801099c:	4618      	mov	r0, r3
 801099e:	f7fe fee0 	bl	800f762 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80109a8:	4618      	mov	r0, r3
 80109aa:	f7fe fe8c 	bl	800f6c6 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80109ae:	bf00      	nop
 80109b0:	3710      	adds	r7, #16
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd80      	pop	{r7, pc}
	...

080109b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b082      	sub	sp, #8
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80109c6:	4618      	mov	r0, r3
 80109c8:	f7fe fedb 	bl	800f782 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	7a5b      	ldrb	r3, [r3, #9]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d005      	beq.n	80109e0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80109d4:	4b04      	ldr	r3, [pc, #16]	@ (80109e8 <HAL_PCD_SuspendCallback+0x30>)
 80109d6:	691b      	ldr	r3, [r3, #16]
 80109d8:	4a03      	ldr	r2, [pc, #12]	@ (80109e8 <HAL_PCD_SuspendCallback+0x30>)
 80109da:	f043 0306 	orr.w	r3, r3, #6
 80109de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80109e0:	bf00      	nop
 80109e2:	3708      	adds	r7, #8
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}
 80109e8:	e000ed00 	.word	0xe000ed00

080109ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	7a5b      	ldrb	r3, [r3, #9]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d007      	beq.n	8010a0c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80109fc:	4b08      	ldr	r3, [pc, #32]	@ (8010a20 <HAL_PCD_ResumeCallback+0x34>)
 80109fe:	691b      	ldr	r3, [r3, #16]
 8010a00:	4a07      	ldr	r2, [pc, #28]	@ (8010a20 <HAL_PCD_ResumeCallback+0x34>)
 8010a02:	f023 0306 	bic.w	r3, r3, #6
 8010a06:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010a08:	f000 fa32 	bl	8010e70 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fe fecb 	bl	800f7ae <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8010a18:	bf00      	nop
 8010a1a:	3708      	adds	r7, #8
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}
 8010a20:	e000ed00 	.word	0xe000ed00

08010a24 <HAL_PCDEx_BCD_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_BCDCallback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
#else
void HAL_PCDEx_BCD_Callback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b082      	sub	sp, #8
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	460b      	mov	r3, r1
 8010a2e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCDEx_BCD_Callback_PreTreatment */

  /* USER CODE END HAL_PCDEx_BCD_Callback_PreTreatment */
  switch(msg)
 8010a30:	78fb      	ldrb	r3, [r7, #3]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d026      	beq.n	8010a84 <HAL_PCDEx_BCD_Callback+0x60>
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	db34      	blt.n	8010aa4 <HAL_PCDEx_BCD_Callback+0x80>
 8010a3a:	2bff      	cmp	r3, #255	@ 0xff
 8010a3c:	dc32      	bgt.n	8010aa4 <HAL_PCDEx_BCD_Callback+0x80>
 8010a3e:	2bfb      	cmp	r3, #251	@ 0xfb
 8010a40:	db30      	blt.n	8010aa4 <HAL_PCDEx_BCD_Callback+0x80>
 8010a42:	3bfb      	subs	r3, #251	@ 0xfb
 8010a44:	2b04      	cmp	r3, #4
 8010a46:	d82d      	bhi.n	8010aa4 <HAL_PCDEx_BCD_Callback+0x80>
 8010a48:	a201      	add	r2, pc, #4	@ (adr r2, 8010a50 <HAL_PCDEx_BCD_Callback+0x2c>)
 8010a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a4e:	bf00      	nop
 8010a50:	08010a7d 	.word	0x08010a7d
 8010a54:	08010a75 	.word	0x08010a75
 8010a58:	08010a6d 	.word	0x08010a6d
 8010a5c:	08010a65 	.word	0x08010a65
 8010a60:	08010a9f 	.word	0x08010a9f
  {
    case PCD_BCD_CONTACT_DETECTION:
      USBD_BCD_PortState = USB_BCD_CONTACT_DETECTION;
 8010a64:	4b12      	ldr	r3, [pc, #72]	@ (8010ab0 <HAL_PCDEx_BCD_Callback+0x8c>)
 8010a66:	22fe      	movs	r2, #254	@ 0xfe
 8010a68:	701a      	strb	r2, [r3, #0]
    break;
 8010a6a:	e01c      	b.n	8010aa6 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_STD_DOWNSTREAM_PORT:
      USBD_BCD_PortState = USB_BCD_STD_DOWNSTREAM_PORT;
 8010a6c:	4b10      	ldr	r3, [pc, #64]	@ (8010ab0 <HAL_PCDEx_BCD_Callback+0x8c>)
 8010a6e:	22fd      	movs	r2, #253	@ 0xfd
 8010a70:	701a      	strb	r2, [r3, #0]
    break;
 8010a72:	e018      	b.n	8010aa6 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_CHARGING_DOWNSTREAM_PORT:
      USBD_BCD_PortState = USB_BCD_CHARGING_DOWNSTREAM_PORT;
 8010a74:	4b0e      	ldr	r3, [pc, #56]	@ (8010ab0 <HAL_PCDEx_BCD_Callback+0x8c>)
 8010a76:	22fc      	movs	r2, #252	@ 0xfc
 8010a78:	701a      	strb	r2, [r3, #0]
    break;
 8010a7a:	e014      	b.n	8010aa6 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_DEDICATED_CHARGING_PORT:
      USBD_BCD_PortState = USB_BCD_DEDICATED_CHARGING_PORT;
 8010a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8010ab0 <HAL_PCDEx_BCD_Callback+0x8c>)
 8010a7e:	22fb      	movs	r2, #251	@ 0xfb
 8010a80:	701a      	strb	r2, [r3, #0]
    break;
 8010a82:	e010      	b.n	8010aa6 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_DISCOVERY_COMPLETED:
      HAL_Delay(20);
 8010a84:	2014      	movs	r0, #20
 8010a86:	f7f3 fa83 	bl	8003f90 <HAL_Delay>
      /* Start USB */
      USBD_Start(hpcd->pData);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010a90:	4618      	mov	r0, r3
 8010a92:	f7fe fc64 	bl	800f35e <USBD_Start>
      USBD_BCD_PortState = USB_BCD_DISCOVERY_COMPLETED;
 8010a96:	4b06      	ldr	r3, [pc, #24]	@ (8010ab0 <HAL_PCDEx_BCD_Callback+0x8c>)
 8010a98:	22fa      	movs	r2, #250	@ 0xfa
 8010a9a:	701a      	strb	r2, [r3, #0]
    break;
 8010a9c:	e003      	b.n	8010aa6 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_ERROR:
      Error_Handler();
 8010a9e:	f7f1 fbd3 	bl	8002248 <Error_Handler>
    break;
 8010aa2:	e000      	b.n	8010aa6 <HAL_PCDEx_BCD_Callback+0x82>

    default:
    break;
 8010aa4:	bf00      	nop
  }
  /* USER CODE BEGIN HAL_PCDEx_BCD_Callback_PostTreatment */

  /* USER CODE END HAL_PCDEx_BCD_Callback_PostTreatment */
}
 8010aa6:	bf00      	nop
 8010aa8:	3708      	adds	r7, #8
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	20000ea8 	.word	0x20000ea8

08010ab4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b082      	sub	sp, #8
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010abc:	4a1e      	ldr	r2, [pc, #120]	@ (8010b38 <USBD_LL_Init+0x84>)
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8010b38 <USBD_LL_Init+0x84>)
 8010ac8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8010acc:	4b1a      	ldr	r3, [pc, #104]	@ (8010b38 <USBD_LL_Init+0x84>)
 8010ace:	4a1b      	ldr	r2, [pc, #108]	@ (8010b3c <USBD_LL_Init+0x88>)
 8010ad0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010ad2:	4b19      	ldr	r3, [pc, #100]	@ (8010b38 <USBD_LL_Init+0x84>)
 8010ad4:	2208      	movs	r2, #8
 8010ad6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010ad8:	4b17      	ldr	r3, [pc, #92]	@ (8010b38 <USBD_LL_Init+0x84>)
 8010ada:	2202      	movs	r2, #2
 8010adc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010ade:	4b16      	ldr	r3, [pc, #88]	@ (8010b38 <USBD_LL_Init+0x84>)
 8010ae0:	2202      	movs	r2, #2
 8010ae2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010ae4:	4b14      	ldr	r3, [pc, #80]	@ (8010b38 <USBD_LL_Init+0x84>)
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010aea:	4b13      	ldr	r3, [pc, #76]	@ (8010b38 <USBD_LL_Init+0x84>)
 8010aec:	2200      	movs	r2, #0
 8010aee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010af0:	4b11      	ldr	r3, [pc, #68]	@ (8010b38 <USBD_LL_Init+0x84>)
 8010af2:	2200      	movs	r2, #0
 8010af4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = ENABLE;
 8010af6:	4b10      	ldr	r3, [pc, #64]	@ (8010b38 <USBD_LL_Init+0x84>)
 8010af8:	2201      	movs	r2, #1
 8010afa:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010afc:	480e      	ldr	r0, [pc, #56]	@ (8010b38 <USBD_LL_Init+0x84>)
 8010afe:	f7f5 fa67 	bl	8005fd0 <HAL_PCD_Init>
 8010b02:	4603      	mov	r3, r0
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d001      	beq.n	8010b0c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8010b08:	f7f1 fb9e 	bl	8002248 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010b12:	2318      	movs	r3, #24
 8010b14:	2200      	movs	r2, #0
 8010b16:	2100      	movs	r1, #0
 8010b18:	f7f6 feb0 	bl	800787c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010b22:	2358      	movs	r3, #88	@ 0x58
 8010b24:	2200      	movs	r2, #0
 8010b26:	2180      	movs	r1, #128	@ 0x80
 8010b28:	f7f6 fea8 	bl	800787c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 8010b2c:	2300      	movs	r3, #0
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3708      	adds	r7, #8
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}
 8010b36:	bf00      	nop
 8010b38:	20000eac 	.word	0x20000eac
 8010b3c:	40005c00 	.word	0x40005c00

08010b40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b084      	sub	sp, #16
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b48:	2300      	movs	r3, #0
 8010b4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010b56:	4618      	mov	r0, r3
 8010b58:	f7f5 fb08 	bl	800616c <HAL_PCD_Start>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b60:	7bfb      	ldrb	r3, [r7, #15]
 8010b62:	4618      	mov	r0, r3
 8010b64:	f000 f98a 	bl	8010e7c <USBD_Get_USB_Status>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3710      	adds	r7, #16
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}

08010b76 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8010b76:	b580      	push	{r7, lr}
 8010b78:	b084      	sub	sp, #16
 8010b7a:	af00      	add	r7, sp, #0
 8010b7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b82:	2300      	movs	r3, #0
 8010b84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f7f5 fb0f 	bl	80061b0 <HAL_PCD_Stop>
 8010b92:	4603      	mov	r3, r0
 8010b94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b96:	7bfb      	ldrb	r3, [r7, #15]
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f000 f96f 	bl	8010e7c <USBD_Get_USB_Status>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ba2:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3710      	adds	r7, #16
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}

08010bac <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b084      	sub	sp, #16
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
 8010bb4:	4608      	mov	r0, r1
 8010bb6:	4611      	mov	r1, r2
 8010bb8:	461a      	mov	r2, r3
 8010bba:	4603      	mov	r3, r0
 8010bbc:	70fb      	strb	r3, [r7, #3]
 8010bbe:	460b      	mov	r3, r1
 8010bc0:	70bb      	strb	r3, [r7, #2]
 8010bc2:	4613      	mov	r3, r2
 8010bc4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010bd4:	78bb      	ldrb	r3, [r7, #2]
 8010bd6:	883a      	ldrh	r2, [r7, #0]
 8010bd8:	78f9      	ldrb	r1, [r7, #3]
 8010bda:	f7f5 fc56 	bl	800648a <HAL_PCD_EP_Open>
 8010bde:	4603      	mov	r3, r0
 8010be0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010be2:	7bfb      	ldrb	r3, [r7, #15]
 8010be4:	4618      	mov	r0, r3
 8010be6:	f000 f949 	bl	8010e7c <USBD_Get_USB_Status>
 8010bea:	4603      	mov	r3, r0
 8010bec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bee:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	3710      	adds	r7, #16
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}

08010bf8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b084      	sub	sp, #16
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
 8010c00:	460b      	mov	r3, r1
 8010c02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c04:	2300      	movs	r3, #0
 8010c06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010c12:	78fa      	ldrb	r2, [r7, #3]
 8010c14:	4611      	mov	r1, r2
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7f5 fcfe 	bl	8006618 <HAL_PCD_EP_SetStall>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c20:	7bfb      	ldrb	r3, [r7, #15]
 8010c22:	4618      	mov	r0, r3
 8010c24:	f000 f92a 	bl	8010e7c <USBD_Get_USB_Status>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c2e:	4618      	mov	r0, r3
 8010c30:	3710      	adds	r7, #16
 8010c32:	46bd      	mov	sp, r7
 8010c34:	bd80      	pop	{r7, pc}

08010c36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c36:	b580      	push	{r7, lr}
 8010c38:	b084      	sub	sp, #16
 8010c3a:	af00      	add	r7, sp, #0
 8010c3c:	6078      	str	r0, [r7, #4]
 8010c3e:	460b      	mov	r3, r1
 8010c40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c42:	2300      	movs	r3, #0
 8010c44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c46:	2300      	movs	r3, #0
 8010c48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010c50:	78fa      	ldrb	r2, [r7, #3]
 8010c52:	4611      	mov	r1, r2
 8010c54:	4618      	mov	r0, r3
 8010c56:	f7f5 fd31 	bl	80066bc <HAL_PCD_EP_ClrStall>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c5e:	7bfb      	ldrb	r3, [r7, #15]
 8010c60:	4618      	mov	r0, r3
 8010c62:	f000 f90b 	bl	8010e7c <USBD_Get_USB_Status>
 8010c66:	4603      	mov	r3, r0
 8010c68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3710      	adds	r7, #16
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}

08010c74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c74:	b480      	push	{r7}
 8010c76:	b085      	sub	sp, #20
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
 8010c7c:	460b      	mov	r3, r1
 8010c7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010c86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010c88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	da0b      	bge.n	8010ca8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010c90:	78fb      	ldrb	r3, [r7, #3]
 8010c92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010c96:	68f9      	ldr	r1, [r7, #12]
 8010c98:	4613      	mov	r3, r2
 8010c9a:	009b      	lsls	r3, r3, #2
 8010c9c:	4413      	add	r3, r2
 8010c9e:	00db      	lsls	r3, r3, #3
 8010ca0:	440b      	add	r3, r1
 8010ca2:	3312      	adds	r3, #18
 8010ca4:	781b      	ldrb	r3, [r3, #0]
 8010ca6:	e00b      	b.n	8010cc0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010ca8:	78fb      	ldrb	r3, [r7, #3]
 8010caa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010cae:	68f9      	ldr	r1, [r7, #12]
 8010cb0:	4613      	mov	r3, r2
 8010cb2:	009b      	lsls	r3, r3, #2
 8010cb4:	4413      	add	r3, r2
 8010cb6:	00db      	lsls	r3, r3, #3
 8010cb8:	440b      	add	r3, r1
 8010cba:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8010cbe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3714      	adds	r7, #20
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cca:	4770      	bx	lr

08010ccc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b084      	sub	sp, #16
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
 8010cd4:	460b      	mov	r3, r1
 8010cd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010ce6:	78fa      	ldrb	r2, [r7, #3]
 8010ce8:	4611      	mov	r1, r2
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7f5 fba9 	bl	8006442 <HAL_PCD_SetAddress>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010cf4:	7bfb      	ldrb	r3, [r7, #15]
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f000 f8c0 	bl	8010e7c <USBD_Get_USB_Status>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d00:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3710      	adds	r7, #16
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}

08010d0a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010d0a:	b580      	push	{r7, lr}
 8010d0c:	b086      	sub	sp, #24
 8010d0e:	af00      	add	r7, sp, #0
 8010d10:	60f8      	str	r0, [r7, #12]
 8010d12:	607a      	str	r2, [r7, #4]
 8010d14:	603b      	str	r3, [r7, #0]
 8010d16:	460b      	mov	r3, r1
 8010d18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010d28:	7af9      	ldrb	r1, [r7, #11]
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	687a      	ldr	r2, [r7, #4]
 8010d2e:	f7f5 fc3c 	bl	80065aa <HAL_PCD_EP_Transmit>
 8010d32:	4603      	mov	r3, r0
 8010d34:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d36:	7dfb      	ldrb	r3, [r7, #23]
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f000 f89f 	bl	8010e7c <USBD_Get_USB_Status>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010d42:	7dbb      	ldrb	r3, [r7, #22]
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3718      	adds	r7, #24
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}

08010d4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b086      	sub	sp, #24
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	60f8      	str	r0, [r7, #12]
 8010d54:	607a      	str	r2, [r7, #4]
 8010d56:	603b      	str	r3, [r7, #0]
 8010d58:	460b      	mov	r3, r1
 8010d5a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d60:	2300      	movs	r3, #0
 8010d62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010d6a:	7af9      	ldrb	r1, [r7, #11]
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	687a      	ldr	r2, [r7, #4]
 8010d70:	f7f5 fbea 	bl	8006548 <HAL_PCD_EP_Receive>
 8010d74:	4603      	mov	r3, r0
 8010d76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d78:	7dfb      	ldrb	r3, [r7, #23]
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f000 f87e 	bl	8010e7c <USBD_Get_USB_Status>
 8010d80:	4603      	mov	r3, r0
 8010d82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010d84:	7dbb      	ldrb	r3, [r7, #22]
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3718      	adds	r7, #24
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}
	...

08010d90 <USBD_LL_BatterryCharging>:
  * @brief
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatterryCharging(USBD_HandleTypeDef *pdev)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b082      	sub	sp, #8
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1) == GPIO_PIN_SET)
 8010d98:	2102      	movs	r1, #2
 8010d9a:	480d      	ldr	r0, [pc, #52]	@ (8010dd0 <USBD_LL_BatterryCharging+0x40>)
 8010d9c:	f7f4 ffb6 	bl	8005d0c <HAL_GPIO_ReadPin>
 8010da0:	4603      	mov	r3, r0
 8010da2:	2b01      	cmp	r3, #1
 8010da4:	d10f      	bne.n	8010dc6 <USBD_LL_BatterryCharging+0x36>
  {
    /*wait for bus stabilization*/
    HAL_Delay(450);
 8010da6:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8010daa:	f7f3 f8f1 	bl	8003f90 <HAL_Delay>
    /*Start BCD Detect*/
    HAL_PCDEx_ActivateBCD (pdev->pData);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7f6 fda4 	bl	8007902 <HAL_PCDEx_ActivateBCD>
    HAL_PCDEx_BCD_VBUSDetect(pdev->pData);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f7f6 fdf4 	bl	80079ae <HAL_PCDEx_BCD_VBUSDetect>
  }
  return USBD_OK;
 8010dc6:	2300      	movs	r3, #0
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3708      	adds	r7, #8
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	48001400 	.word	0x48001400

08010dd4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b082      	sub	sp, #8
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	460b      	mov	r3, r1
 8010dde:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010de0:	78fb      	ldrb	r3, [r7, #3]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d002      	beq.n	8010dec <HAL_PCDEx_LPM_Callback+0x18>
 8010de6:	2b01      	cmp	r3, #1
 8010de8:	d013      	beq.n	8010e12 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010dea:	e023      	b.n	8010e34 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	7a5b      	ldrb	r3, [r3, #9]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d007      	beq.n	8010e04 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010df4:	f000 f83c 	bl	8010e70 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010df8:	4b10      	ldr	r3, [pc, #64]	@ (8010e3c <HAL_PCDEx_LPM_Callback+0x68>)
 8010dfa:	691b      	ldr	r3, [r3, #16]
 8010dfc:	4a0f      	ldr	r2, [pc, #60]	@ (8010e3c <HAL_PCDEx_LPM_Callback+0x68>)
 8010dfe:	f023 0306 	bic.w	r3, r3, #6
 8010e02:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f7fe fccf 	bl	800f7ae <USBD_LL_Resume>
    break;
 8010e10:	e010      	b.n	8010e34 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7fe fcb2 	bl	800f782 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	7a5b      	ldrb	r3, [r3, #9]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d005      	beq.n	8010e32 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010e26:	4b05      	ldr	r3, [pc, #20]	@ (8010e3c <HAL_PCDEx_LPM_Callback+0x68>)
 8010e28:	691b      	ldr	r3, [r3, #16]
 8010e2a:	4a04      	ldr	r2, [pc, #16]	@ (8010e3c <HAL_PCDEx_LPM_Callback+0x68>)
 8010e2c:	f043 0306 	orr.w	r3, r3, #6
 8010e30:	6113      	str	r3, [r2, #16]
    break;
 8010e32:	bf00      	nop
}
 8010e34:	bf00      	nop
 8010e36:	3708      	adds	r7, #8
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}
 8010e3c:	e000ed00 	.word	0xe000ed00

08010e40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010e40:	b480      	push	{r7}
 8010e42:	b083      	sub	sp, #12
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010e48:	4b03      	ldr	r3, [pc, #12]	@ (8010e58 <USBD_static_malloc+0x18>)
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	370c      	adds	r7, #12
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e54:	4770      	bx	lr
 8010e56:	bf00      	nop
 8010e58:	20001188 	.word	0x20001188

08010e5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010e5c:	b480      	push	{r7}
 8010e5e:	b083      	sub	sp, #12
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]

}
 8010e64:	bf00      	nop
 8010e66:	370c      	adds	r7, #12
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6e:	4770      	bx	lr

08010e70 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010e74:	f7f0 fb22 	bl	80014bc <SystemClock_Config>
}
 8010e78:	bf00      	nop
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010e7c:	b480      	push	{r7}
 8010e7e:	b085      	sub	sp, #20
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	4603      	mov	r3, r0
 8010e84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e86:	2300      	movs	r3, #0
 8010e88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010e8a:	79fb      	ldrb	r3, [r7, #7]
 8010e8c:	2b03      	cmp	r3, #3
 8010e8e:	d817      	bhi.n	8010ec0 <USBD_Get_USB_Status+0x44>
 8010e90:	a201      	add	r2, pc, #4	@ (adr r2, 8010e98 <USBD_Get_USB_Status+0x1c>)
 8010e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e96:	bf00      	nop
 8010e98:	08010ea9 	.word	0x08010ea9
 8010e9c:	08010eaf 	.word	0x08010eaf
 8010ea0:	08010eb5 	.word	0x08010eb5
 8010ea4:	08010ebb 	.word	0x08010ebb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	73fb      	strb	r3, [r7, #15]
    break;
 8010eac:	e00b      	b.n	8010ec6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010eae:	2303      	movs	r3, #3
 8010eb0:	73fb      	strb	r3, [r7, #15]
    break;
 8010eb2:	e008      	b.n	8010ec6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010eb4:	2301      	movs	r3, #1
 8010eb6:	73fb      	strb	r3, [r7, #15]
    break;
 8010eb8:	e005      	b.n	8010ec6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010eba:	2303      	movs	r3, #3
 8010ebc:	73fb      	strb	r3, [r7, #15]
    break;
 8010ebe:	e002      	b.n	8010ec6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010ec0:	2303      	movs	r3, #3
 8010ec2:	73fb      	strb	r3, [r7, #15]
    break;
 8010ec4:	bf00      	nop
  }
  return usb_status;
 8010ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ec8:	4618      	mov	r0, r3
 8010eca:	3714      	adds	r7, #20
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed2:	4770      	bx	lr

08010ed4 <__cvt>:
 8010ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ed8:	ec57 6b10 	vmov	r6, r7, d0
 8010edc:	2f00      	cmp	r7, #0
 8010ede:	460c      	mov	r4, r1
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	463b      	mov	r3, r7
 8010ee4:	bfbb      	ittet	lt
 8010ee6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010eea:	461f      	movlt	r7, r3
 8010eec:	2300      	movge	r3, #0
 8010eee:	232d      	movlt	r3, #45	@ 0x2d
 8010ef0:	700b      	strb	r3, [r1, #0]
 8010ef2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ef4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010ef8:	4691      	mov	r9, r2
 8010efa:	f023 0820 	bic.w	r8, r3, #32
 8010efe:	bfbc      	itt	lt
 8010f00:	4632      	movlt	r2, r6
 8010f02:	4616      	movlt	r6, r2
 8010f04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010f08:	d005      	beq.n	8010f16 <__cvt+0x42>
 8010f0a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010f0e:	d100      	bne.n	8010f12 <__cvt+0x3e>
 8010f10:	3401      	adds	r4, #1
 8010f12:	2102      	movs	r1, #2
 8010f14:	e000      	b.n	8010f18 <__cvt+0x44>
 8010f16:	2103      	movs	r1, #3
 8010f18:	ab03      	add	r3, sp, #12
 8010f1a:	9301      	str	r3, [sp, #4]
 8010f1c:	ab02      	add	r3, sp, #8
 8010f1e:	9300      	str	r3, [sp, #0]
 8010f20:	ec47 6b10 	vmov	d0, r6, r7
 8010f24:	4653      	mov	r3, sl
 8010f26:	4622      	mov	r2, r4
 8010f28:	f000 fefe 	bl	8011d28 <_dtoa_r>
 8010f2c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010f30:	4605      	mov	r5, r0
 8010f32:	d119      	bne.n	8010f68 <__cvt+0x94>
 8010f34:	f019 0f01 	tst.w	r9, #1
 8010f38:	d00e      	beq.n	8010f58 <__cvt+0x84>
 8010f3a:	eb00 0904 	add.w	r9, r0, r4
 8010f3e:	2200      	movs	r2, #0
 8010f40:	2300      	movs	r3, #0
 8010f42:	4630      	mov	r0, r6
 8010f44:	4639      	mov	r1, r7
 8010f46:	f7ef fde7 	bl	8000b18 <__aeabi_dcmpeq>
 8010f4a:	b108      	cbz	r0, 8010f50 <__cvt+0x7c>
 8010f4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010f50:	2230      	movs	r2, #48	@ 0x30
 8010f52:	9b03      	ldr	r3, [sp, #12]
 8010f54:	454b      	cmp	r3, r9
 8010f56:	d31e      	bcc.n	8010f96 <__cvt+0xc2>
 8010f58:	9b03      	ldr	r3, [sp, #12]
 8010f5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f5c:	1b5b      	subs	r3, r3, r5
 8010f5e:	4628      	mov	r0, r5
 8010f60:	6013      	str	r3, [r2, #0]
 8010f62:	b004      	add	sp, #16
 8010f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010f6c:	eb00 0904 	add.w	r9, r0, r4
 8010f70:	d1e5      	bne.n	8010f3e <__cvt+0x6a>
 8010f72:	7803      	ldrb	r3, [r0, #0]
 8010f74:	2b30      	cmp	r3, #48	@ 0x30
 8010f76:	d10a      	bne.n	8010f8e <__cvt+0xba>
 8010f78:	2200      	movs	r2, #0
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	4630      	mov	r0, r6
 8010f7e:	4639      	mov	r1, r7
 8010f80:	f7ef fdca 	bl	8000b18 <__aeabi_dcmpeq>
 8010f84:	b918      	cbnz	r0, 8010f8e <__cvt+0xba>
 8010f86:	f1c4 0401 	rsb	r4, r4, #1
 8010f8a:	f8ca 4000 	str.w	r4, [sl]
 8010f8e:	f8da 3000 	ldr.w	r3, [sl]
 8010f92:	4499      	add	r9, r3
 8010f94:	e7d3      	b.n	8010f3e <__cvt+0x6a>
 8010f96:	1c59      	adds	r1, r3, #1
 8010f98:	9103      	str	r1, [sp, #12]
 8010f9a:	701a      	strb	r2, [r3, #0]
 8010f9c:	e7d9      	b.n	8010f52 <__cvt+0x7e>

08010f9e <__exponent>:
 8010f9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010fa0:	2900      	cmp	r1, #0
 8010fa2:	bfba      	itte	lt
 8010fa4:	4249      	neglt	r1, r1
 8010fa6:	232d      	movlt	r3, #45	@ 0x2d
 8010fa8:	232b      	movge	r3, #43	@ 0x2b
 8010faa:	2909      	cmp	r1, #9
 8010fac:	7002      	strb	r2, [r0, #0]
 8010fae:	7043      	strb	r3, [r0, #1]
 8010fb0:	dd29      	ble.n	8011006 <__exponent+0x68>
 8010fb2:	f10d 0307 	add.w	r3, sp, #7
 8010fb6:	461d      	mov	r5, r3
 8010fb8:	270a      	movs	r7, #10
 8010fba:	461a      	mov	r2, r3
 8010fbc:	fbb1 f6f7 	udiv	r6, r1, r7
 8010fc0:	fb07 1416 	mls	r4, r7, r6, r1
 8010fc4:	3430      	adds	r4, #48	@ 0x30
 8010fc6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010fca:	460c      	mov	r4, r1
 8010fcc:	2c63      	cmp	r4, #99	@ 0x63
 8010fce:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8010fd2:	4631      	mov	r1, r6
 8010fd4:	dcf1      	bgt.n	8010fba <__exponent+0x1c>
 8010fd6:	3130      	adds	r1, #48	@ 0x30
 8010fd8:	1e94      	subs	r4, r2, #2
 8010fda:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010fde:	1c41      	adds	r1, r0, #1
 8010fe0:	4623      	mov	r3, r4
 8010fe2:	42ab      	cmp	r3, r5
 8010fe4:	d30a      	bcc.n	8010ffc <__exponent+0x5e>
 8010fe6:	f10d 0309 	add.w	r3, sp, #9
 8010fea:	1a9b      	subs	r3, r3, r2
 8010fec:	42ac      	cmp	r4, r5
 8010fee:	bf88      	it	hi
 8010ff0:	2300      	movhi	r3, #0
 8010ff2:	3302      	adds	r3, #2
 8010ff4:	4403      	add	r3, r0
 8010ff6:	1a18      	subs	r0, r3, r0
 8010ff8:	b003      	add	sp, #12
 8010ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ffc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011000:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011004:	e7ed      	b.n	8010fe2 <__exponent+0x44>
 8011006:	2330      	movs	r3, #48	@ 0x30
 8011008:	3130      	adds	r1, #48	@ 0x30
 801100a:	7083      	strb	r3, [r0, #2]
 801100c:	70c1      	strb	r1, [r0, #3]
 801100e:	1d03      	adds	r3, r0, #4
 8011010:	e7f1      	b.n	8010ff6 <__exponent+0x58>
	...

08011014 <_printf_float>:
 8011014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011018:	b08d      	sub	sp, #52	@ 0x34
 801101a:	460c      	mov	r4, r1
 801101c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011020:	4616      	mov	r6, r2
 8011022:	461f      	mov	r7, r3
 8011024:	4605      	mov	r5, r0
 8011026:	f000 fd8b 	bl	8011b40 <_localeconv_r>
 801102a:	6803      	ldr	r3, [r0, #0]
 801102c:	9304      	str	r3, [sp, #16]
 801102e:	4618      	mov	r0, r3
 8011030:	f7ef f946 	bl	80002c0 <strlen>
 8011034:	2300      	movs	r3, #0
 8011036:	930a      	str	r3, [sp, #40]	@ 0x28
 8011038:	f8d8 3000 	ldr.w	r3, [r8]
 801103c:	9005      	str	r0, [sp, #20]
 801103e:	3307      	adds	r3, #7
 8011040:	f023 0307 	bic.w	r3, r3, #7
 8011044:	f103 0208 	add.w	r2, r3, #8
 8011048:	f894 a018 	ldrb.w	sl, [r4, #24]
 801104c:	f8d4 b000 	ldr.w	fp, [r4]
 8011050:	f8c8 2000 	str.w	r2, [r8]
 8011054:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011058:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801105c:	9307      	str	r3, [sp, #28]
 801105e:	f8cd 8018 	str.w	r8, [sp, #24]
 8011062:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011066:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801106a:	4b9c      	ldr	r3, [pc, #624]	@ (80112dc <_printf_float+0x2c8>)
 801106c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011070:	f7ef fd84 	bl	8000b7c <__aeabi_dcmpun>
 8011074:	bb70      	cbnz	r0, 80110d4 <_printf_float+0xc0>
 8011076:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801107a:	4b98      	ldr	r3, [pc, #608]	@ (80112dc <_printf_float+0x2c8>)
 801107c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011080:	f7ef fd5e 	bl	8000b40 <__aeabi_dcmple>
 8011084:	bb30      	cbnz	r0, 80110d4 <_printf_float+0xc0>
 8011086:	2200      	movs	r2, #0
 8011088:	2300      	movs	r3, #0
 801108a:	4640      	mov	r0, r8
 801108c:	4649      	mov	r1, r9
 801108e:	f7ef fd4d 	bl	8000b2c <__aeabi_dcmplt>
 8011092:	b110      	cbz	r0, 801109a <_printf_float+0x86>
 8011094:	232d      	movs	r3, #45	@ 0x2d
 8011096:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801109a:	4a91      	ldr	r2, [pc, #580]	@ (80112e0 <_printf_float+0x2cc>)
 801109c:	4b91      	ldr	r3, [pc, #580]	@ (80112e4 <_printf_float+0x2d0>)
 801109e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80110a2:	bf94      	ite	ls
 80110a4:	4690      	movls	r8, r2
 80110a6:	4698      	movhi	r8, r3
 80110a8:	2303      	movs	r3, #3
 80110aa:	6123      	str	r3, [r4, #16]
 80110ac:	f02b 0304 	bic.w	r3, fp, #4
 80110b0:	6023      	str	r3, [r4, #0]
 80110b2:	f04f 0900 	mov.w	r9, #0
 80110b6:	9700      	str	r7, [sp, #0]
 80110b8:	4633      	mov	r3, r6
 80110ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80110bc:	4621      	mov	r1, r4
 80110be:	4628      	mov	r0, r5
 80110c0:	f000 fa7c 	bl	80115bc <_printf_common>
 80110c4:	3001      	adds	r0, #1
 80110c6:	f040 808d 	bne.w	80111e4 <_printf_float+0x1d0>
 80110ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80110ce:	b00d      	add	sp, #52	@ 0x34
 80110d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110d4:	4642      	mov	r2, r8
 80110d6:	464b      	mov	r3, r9
 80110d8:	4640      	mov	r0, r8
 80110da:	4649      	mov	r1, r9
 80110dc:	f7ef fd4e 	bl	8000b7c <__aeabi_dcmpun>
 80110e0:	b140      	cbz	r0, 80110f4 <_printf_float+0xe0>
 80110e2:	464b      	mov	r3, r9
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	bfbc      	itt	lt
 80110e8:	232d      	movlt	r3, #45	@ 0x2d
 80110ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80110ee:	4a7e      	ldr	r2, [pc, #504]	@ (80112e8 <_printf_float+0x2d4>)
 80110f0:	4b7e      	ldr	r3, [pc, #504]	@ (80112ec <_printf_float+0x2d8>)
 80110f2:	e7d4      	b.n	801109e <_printf_float+0x8a>
 80110f4:	6863      	ldr	r3, [r4, #4]
 80110f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80110fa:	9206      	str	r2, [sp, #24]
 80110fc:	1c5a      	adds	r2, r3, #1
 80110fe:	d13b      	bne.n	8011178 <_printf_float+0x164>
 8011100:	2306      	movs	r3, #6
 8011102:	6063      	str	r3, [r4, #4]
 8011104:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011108:	2300      	movs	r3, #0
 801110a:	6022      	str	r2, [r4, #0]
 801110c:	9303      	str	r3, [sp, #12]
 801110e:	ab0a      	add	r3, sp, #40	@ 0x28
 8011110:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011114:	ab09      	add	r3, sp, #36	@ 0x24
 8011116:	9300      	str	r3, [sp, #0]
 8011118:	6861      	ldr	r1, [r4, #4]
 801111a:	ec49 8b10 	vmov	d0, r8, r9
 801111e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011122:	4628      	mov	r0, r5
 8011124:	f7ff fed6 	bl	8010ed4 <__cvt>
 8011128:	9b06      	ldr	r3, [sp, #24]
 801112a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801112c:	2b47      	cmp	r3, #71	@ 0x47
 801112e:	4680      	mov	r8, r0
 8011130:	d129      	bne.n	8011186 <_printf_float+0x172>
 8011132:	1cc8      	adds	r0, r1, #3
 8011134:	db02      	blt.n	801113c <_printf_float+0x128>
 8011136:	6863      	ldr	r3, [r4, #4]
 8011138:	4299      	cmp	r1, r3
 801113a:	dd41      	ble.n	80111c0 <_printf_float+0x1ac>
 801113c:	f1aa 0a02 	sub.w	sl, sl, #2
 8011140:	fa5f fa8a 	uxtb.w	sl, sl
 8011144:	3901      	subs	r1, #1
 8011146:	4652      	mov	r2, sl
 8011148:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801114c:	9109      	str	r1, [sp, #36]	@ 0x24
 801114e:	f7ff ff26 	bl	8010f9e <__exponent>
 8011152:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011154:	1813      	adds	r3, r2, r0
 8011156:	2a01      	cmp	r2, #1
 8011158:	4681      	mov	r9, r0
 801115a:	6123      	str	r3, [r4, #16]
 801115c:	dc02      	bgt.n	8011164 <_printf_float+0x150>
 801115e:	6822      	ldr	r2, [r4, #0]
 8011160:	07d2      	lsls	r2, r2, #31
 8011162:	d501      	bpl.n	8011168 <_printf_float+0x154>
 8011164:	3301      	adds	r3, #1
 8011166:	6123      	str	r3, [r4, #16]
 8011168:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801116c:	2b00      	cmp	r3, #0
 801116e:	d0a2      	beq.n	80110b6 <_printf_float+0xa2>
 8011170:	232d      	movs	r3, #45	@ 0x2d
 8011172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011176:	e79e      	b.n	80110b6 <_printf_float+0xa2>
 8011178:	9a06      	ldr	r2, [sp, #24]
 801117a:	2a47      	cmp	r2, #71	@ 0x47
 801117c:	d1c2      	bne.n	8011104 <_printf_float+0xf0>
 801117e:	2b00      	cmp	r3, #0
 8011180:	d1c0      	bne.n	8011104 <_printf_float+0xf0>
 8011182:	2301      	movs	r3, #1
 8011184:	e7bd      	b.n	8011102 <_printf_float+0xee>
 8011186:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801118a:	d9db      	bls.n	8011144 <_printf_float+0x130>
 801118c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011190:	d118      	bne.n	80111c4 <_printf_float+0x1b0>
 8011192:	2900      	cmp	r1, #0
 8011194:	6863      	ldr	r3, [r4, #4]
 8011196:	dd0b      	ble.n	80111b0 <_printf_float+0x19c>
 8011198:	6121      	str	r1, [r4, #16]
 801119a:	b913      	cbnz	r3, 80111a2 <_printf_float+0x18e>
 801119c:	6822      	ldr	r2, [r4, #0]
 801119e:	07d0      	lsls	r0, r2, #31
 80111a0:	d502      	bpl.n	80111a8 <_printf_float+0x194>
 80111a2:	3301      	adds	r3, #1
 80111a4:	440b      	add	r3, r1
 80111a6:	6123      	str	r3, [r4, #16]
 80111a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80111aa:	f04f 0900 	mov.w	r9, #0
 80111ae:	e7db      	b.n	8011168 <_printf_float+0x154>
 80111b0:	b913      	cbnz	r3, 80111b8 <_printf_float+0x1a4>
 80111b2:	6822      	ldr	r2, [r4, #0]
 80111b4:	07d2      	lsls	r2, r2, #31
 80111b6:	d501      	bpl.n	80111bc <_printf_float+0x1a8>
 80111b8:	3302      	adds	r3, #2
 80111ba:	e7f4      	b.n	80111a6 <_printf_float+0x192>
 80111bc:	2301      	movs	r3, #1
 80111be:	e7f2      	b.n	80111a6 <_printf_float+0x192>
 80111c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80111c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111c6:	4299      	cmp	r1, r3
 80111c8:	db05      	blt.n	80111d6 <_printf_float+0x1c2>
 80111ca:	6823      	ldr	r3, [r4, #0]
 80111cc:	6121      	str	r1, [r4, #16]
 80111ce:	07d8      	lsls	r0, r3, #31
 80111d0:	d5ea      	bpl.n	80111a8 <_printf_float+0x194>
 80111d2:	1c4b      	adds	r3, r1, #1
 80111d4:	e7e7      	b.n	80111a6 <_printf_float+0x192>
 80111d6:	2900      	cmp	r1, #0
 80111d8:	bfd4      	ite	le
 80111da:	f1c1 0202 	rsble	r2, r1, #2
 80111de:	2201      	movgt	r2, #1
 80111e0:	4413      	add	r3, r2
 80111e2:	e7e0      	b.n	80111a6 <_printf_float+0x192>
 80111e4:	6823      	ldr	r3, [r4, #0]
 80111e6:	055a      	lsls	r2, r3, #21
 80111e8:	d407      	bmi.n	80111fa <_printf_float+0x1e6>
 80111ea:	6923      	ldr	r3, [r4, #16]
 80111ec:	4642      	mov	r2, r8
 80111ee:	4631      	mov	r1, r6
 80111f0:	4628      	mov	r0, r5
 80111f2:	47b8      	blx	r7
 80111f4:	3001      	adds	r0, #1
 80111f6:	d12b      	bne.n	8011250 <_printf_float+0x23c>
 80111f8:	e767      	b.n	80110ca <_printf_float+0xb6>
 80111fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80111fe:	f240 80dd 	bls.w	80113bc <_printf_float+0x3a8>
 8011202:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011206:	2200      	movs	r2, #0
 8011208:	2300      	movs	r3, #0
 801120a:	f7ef fc85 	bl	8000b18 <__aeabi_dcmpeq>
 801120e:	2800      	cmp	r0, #0
 8011210:	d033      	beq.n	801127a <_printf_float+0x266>
 8011212:	4a37      	ldr	r2, [pc, #220]	@ (80112f0 <_printf_float+0x2dc>)
 8011214:	2301      	movs	r3, #1
 8011216:	4631      	mov	r1, r6
 8011218:	4628      	mov	r0, r5
 801121a:	47b8      	blx	r7
 801121c:	3001      	adds	r0, #1
 801121e:	f43f af54 	beq.w	80110ca <_printf_float+0xb6>
 8011222:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011226:	4543      	cmp	r3, r8
 8011228:	db02      	blt.n	8011230 <_printf_float+0x21c>
 801122a:	6823      	ldr	r3, [r4, #0]
 801122c:	07d8      	lsls	r0, r3, #31
 801122e:	d50f      	bpl.n	8011250 <_printf_float+0x23c>
 8011230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011234:	4631      	mov	r1, r6
 8011236:	4628      	mov	r0, r5
 8011238:	47b8      	blx	r7
 801123a:	3001      	adds	r0, #1
 801123c:	f43f af45 	beq.w	80110ca <_printf_float+0xb6>
 8011240:	f04f 0900 	mov.w	r9, #0
 8011244:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011248:	f104 0a1a 	add.w	sl, r4, #26
 801124c:	45c8      	cmp	r8, r9
 801124e:	dc09      	bgt.n	8011264 <_printf_float+0x250>
 8011250:	6823      	ldr	r3, [r4, #0]
 8011252:	079b      	lsls	r3, r3, #30
 8011254:	f100 8103 	bmi.w	801145e <_printf_float+0x44a>
 8011258:	68e0      	ldr	r0, [r4, #12]
 801125a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801125c:	4298      	cmp	r0, r3
 801125e:	bfb8      	it	lt
 8011260:	4618      	movlt	r0, r3
 8011262:	e734      	b.n	80110ce <_printf_float+0xba>
 8011264:	2301      	movs	r3, #1
 8011266:	4652      	mov	r2, sl
 8011268:	4631      	mov	r1, r6
 801126a:	4628      	mov	r0, r5
 801126c:	47b8      	blx	r7
 801126e:	3001      	adds	r0, #1
 8011270:	f43f af2b 	beq.w	80110ca <_printf_float+0xb6>
 8011274:	f109 0901 	add.w	r9, r9, #1
 8011278:	e7e8      	b.n	801124c <_printf_float+0x238>
 801127a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801127c:	2b00      	cmp	r3, #0
 801127e:	dc39      	bgt.n	80112f4 <_printf_float+0x2e0>
 8011280:	4a1b      	ldr	r2, [pc, #108]	@ (80112f0 <_printf_float+0x2dc>)
 8011282:	2301      	movs	r3, #1
 8011284:	4631      	mov	r1, r6
 8011286:	4628      	mov	r0, r5
 8011288:	47b8      	blx	r7
 801128a:	3001      	adds	r0, #1
 801128c:	f43f af1d 	beq.w	80110ca <_printf_float+0xb6>
 8011290:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011294:	ea59 0303 	orrs.w	r3, r9, r3
 8011298:	d102      	bne.n	80112a0 <_printf_float+0x28c>
 801129a:	6823      	ldr	r3, [r4, #0]
 801129c:	07d9      	lsls	r1, r3, #31
 801129e:	d5d7      	bpl.n	8011250 <_printf_float+0x23c>
 80112a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112a4:	4631      	mov	r1, r6
 80112a6:	4628      	mov	r0, r5
 80112a8:	47b8      	blx	r7
 80112aa:	3001      	adds	r0, #1
 80112ac:	f43f af0d 	beq.w	80110ca <_printf_float+0xb6>
 80112b0:	f04f 0a00 	mov.w	sl, #0
 80112b4:	f104 0b1a 	add.w	fp, r4, #26
 80112b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112ba:	425b      	negs	r3, r3
 80112bc:	4553      	cmp	r3, sl
 80112be:	dc01      	bgt.n	80112c4 <_printf_float+0x2b0>
 80112c0:	464b      	mov	r3, r9
 80112c2:	e793      	b.n	80111ec <_printf_float+0x1d8>
 80112c4:	2301      	movs	r3, #1
 80112c6:	465a      	mov	r2, fp
 80112c8:	4631      	mov	r1, r6
 80112ca:	4628      	mov	r0, r5
 80112cc:	47b8      	blx	r7
 80112ce:	3001      	adds	r0, #1
 80112d0:	f43f aefb 	beq.w	80110ca <_printf_float+0xb6>
 80112d4:	f10a 0a01 	add.w	sl, sl, #1
 80112d8:	e7ee      	b.n	80112b8 <_printf_float+0x2a4>
 80112da:	bf00      	nop
 80112dc:	7fefffff 	.word	0x7fefffff
 80112e0:	08013dc4 	.word	0x08013dc4
 80112e4:	08013dc8 	.word	0x08013dc8
 80112e8:	08013dcc 	.word	0x08013dcc
 80112ec:	08013dd0 	.word	0x08013dd0
 80112f0:	08013dd4 	.word	0x08013dd4
 80112f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80112f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80112fa:	4553      	cmp	r3, sl
 80112fc:	bfa8      	it	ge
 80112fe:	4653      	movge	r3, sl
 8011300:	2b00      	cmp	r3, #0
 8011302:	4699      	mov	r9, r3
 8011304:	dc36      	bgt.n	8011374 <_printf_float+0x360>
 8011306:	f04f 0b00 	mov.w	fp, #0
 801130a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801130e:	f104 021a 	add.w	r2, r4, #26
 8011312:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011314:	9306      	str	r3, [sp, #24]
 8011316:	eba3 0309 	sub.w	r3, r3, r9
 801131a:	455b      	cmp	r3, fp
 801131c:	dc31      	bgt.n	8011382 <_printf_float+0x36e>
 801131e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011320:	459a      	cmp	sl, r3
 8011322:	dc3a      	bgt.n	801139a <_printf_float+0x386>
 8011324:	6823      	ldr	r3, [r4, #0]
 8011326:	07da      	lsls	r2, r3, #31
 8011328:	d437      	bmi.n	801139a <_printf_float+0x386>
 801132a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801132c:	ebaa 0903 	sub.w	r9, sl, r3
 8011330:	9b06      	ldr	r3, [sp, #24]
 8011332:	ebaa 0303 	sub.w	r3, sl, r3
 8011336:	4599      	cmp	r9, r3
 8011338:	bfa8      	it	ge
 801133a:	4699      	movge	r9, r3
 801133c:	f1b9 0f00 	cmp.w	r9, #0
 8011340:	dc33      	bgt.n	80113aa <_printf_float+0x396>
 8011342:	f04f 0800 	mov.w	r8, #0
 8011346:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801134a:	f104 0b1a 	add.w	fp, r4, #26
 801134e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011350:	ebaa 0303 	sub.w	r3, sl, r3
 8011354:	eba3 0309 	sub.w	r3, r3, r9
 8011358:	4543      	cmp	r3, r8
 801135a:	f77f af79 	ble.w	8011250 <_printf_float+0x23c>
 801135e:	2301      	movs	r3, #1
 8011360:	465a      	mov	r2, fp
 8011362:	4631      	mov	r1, r6
 8011364:	4628      	mov	r0, r5
 8011366:	47b8      	blx	r7
 8011368:	3001      	adds	r0, #1
 801136a:	f43f aeae 	beq.w	80110ca <_printf_float+0xb6>
 801136e:	f108 0801 	add.w	r8, r8, #1
 8011372:	e7ec      	b.n	801134e <_printf_float+0x33a>
 8011374:	4642      	mov	r2, r8
 8011376:	4631      	mov	r1, r6
 8011378:	4628      	mov	r0, r5
 801137a:	47b8      	blx	r7
 801137c:	3001      	adds	r0, #1
 801137e:	d1c2      	bne.n	8011306 <_printf_float+0x2f2>
 8011380:	e6a3      	b.n	80110ca <_printf_float+0xb6>
 8011382:	2301      	movs	r3, #1
 8011384:	4631      	mov	r1, r6
 8011386:	4628      	mov	r0, r5
 8011388:	9206      	str	r2, [sp, #24]
 801138a:	47b8      	blx	r7
 801138c:	3001      	adds	r0, #1
 801138e:	f43f ae9c 	beq.w	80110ca <_printf_float+0xb6>
 8011392:	9a06      	ldr	r2, [sp, #24]
 8011394:	f10b 0b01 	add.w	fp, fp, #1
 8011398:	e7bb      	b.n	8011312 <_printf_float+0x2fe>
 801139a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801139e:	4631      	mov	r1, r6
 80113a0:	4628      	mov	r0, r5
 80113a2:	47b8      	blx	r7
 80113a4:	3001      	adds	r0, #1
 80113a6:	d1c0      	bne.n	801132a <_printf_float+0x316>
 80113a8:	e68f      	b.n	80110ca <_printf_float+0xb6>
 80113aa:	9a06      	ldr	r2, [sp, #24]
 80113ac:	464b      	mov	r3, r9
 80113ae:	4442      	add	r2, r8
 80113b0:	4631      	mov	r1, r6
 80113b2:	4628      	mov	r0, r5
 80113b4:	47b8      	blx	r7
 80113b6:	3001      	adds	r0, #1
 80113b8:	d1c3      	bne.n	8011342 <_printf_float+0x32e>
 80113ba:	e686      	b.n	80110ca <_printf_float+0xb6>
 80113bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80113c0:	f1ba 0f01 	cmp.w	sl, #1
 80113c4:	dc01      	bgt.n	80113ca <_printf_float+0x3b6>
 80113c6:	07db      	lsls	r3, r3, #31
 80113c8:	d536      	bpl.n	8011438 <_printf_float+0x424>
 80113ca:	2301      	movs	r3, #1
 80113cc:	4642      	mov	r2, r8
 80113ce:	4631      	mov	r1, r6
 80113d0:	4628      	mov	r0, r5
 80113d2:	47b8      	blx	r7
 80113d4:	3001      	adds	r0, #1
 80113d6:	f43f ae78 	beq.w	80110ca <_printf_float+0xb6>
 80113da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80113de:	4631      	mov	r1, r6
 80113e0:	4628      	mov	r0, r5
 80113e2:	47b8      	blx	r7
 80113e4:	3001      	adds	r0, #1
 80113e6:	f43f ae70 	beq.w	80110ca <_printf_float+0xb6>
 80113ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80113ee:	2200      	movs	r2, #0
 80113f0:	2300      	movs	r3, #0
 80113f2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80113f6:	f7ef fb8f 	bl	8000b18 <__aeabi_dcmpeq>
 80113fa:	b9c0      	cbnz	r0, 801142e <_printf_float+0x41a>
 80113fc:	4653      	mov	r3, sl
 80113fe:	f108 0201 	add.w	r2, r8, #1
 8011402:	4631      	mov	r1, r6
 8011404:	4628      	mov	r0, r5
 8011406:	47b8      	blx	r7
 8011408:	3001      	adds	r0, #1
 801140a:	d10c      	bne.n	8011426 <_printf_float+0x412>
 801140c:	e65d      	b.n	80110ca <_printf_float+0xb6>
 801140e:	2301      	movs	r3, #1
 8011410:	465a      	mov	r2, fp
 8011412:	4631      	mov	r1, r6
 8011414:	4628      	mov	r0, r5
 8011416:	47b8      	blx	r7
 8011418:	3001      	adds	r0, #1
 801141a:	f43f ae56 	beq.w	80110ca <_printf_float+0xb6>
 801141e:	f108 0801 	add.w	r8, r8, #1
 8011422:	45d0      	cmp	r8, sl
 8011424:	dbf3      	blt.n	801140e <_printf_float+0x3fa>
 8011426:	464b      	mov	r3, r9
 8011428:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801142c:	e6df      	b.n	80111ee <_printf_float+0x1da>
 801142e:	f04f 0800 	mov.w	r8, #0
 8011432:	f104 0b1a 	add.w	fp, r4, #26
 8011436:	e7f4      	b.n	8011422 <_printf_float+0x40e>
 8011438:	2301      	movs	r3, #1
 801143a:	4642      	mov	r2, r8
 801143c:	e7e1      	b.n	8011402 <_printf_float+0x3ee>
 801143e:	2301      	movs	r3, #1
 8011440:	464a      	mov	r2, r9
 8011442:	4631      	mov	r1, r6
 8011444:	4628      	mov	r0, r5
 8011446:	47b8      	blx	r7
 8011448:	3001      	adds	r0, #1
 801144a:	f43f ae3e 	beq.w	80110ca <_printf_float+0xb6>
 801144e:	f108 0801 	add.w	r8, r8, #1
 8011452:	68e3      	ldr	r3, [r4, #12]
 8011454:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011456:	1a5b      	subs	r3, r3, r1
 8011458:	4543      	cmp	r3, r8
 801145a:	dcf0      	bgt.n	801143e <_printf_float+0x42a>
 801145c:	e6fc      	b.n	8011258 <_printf_float+0x244>
 801145e:	f04f 0800 	mov.w	r8, #0
 8011462:	f104 0919 	add.w	r9, r4, #25
 8011466:	e7f4      	b.n	8011452 <_printf_float+0x43e>

08011468 <malloc>:
 8011468:	4b02      	ldr	r3, [pc, #8]	@ (8011474 <malloc+0xc>)
 801146a:	4601      	mov	r1, r0
 801146c:	6818      	ldr	r0, [r3, #0]
 801146e:	f000 b825 	b.w	80114bc <_malloc_r>
 8011472:	bf00      	nop
 8011474:	200000ec 	.word	0x200000ec

08011478 <sbrk_aligned>:
 8011478:	b570      	push	{r4, r5, r6, lr}
 801147a:	4e0f      	ldr	r6, [pc, #60]	@ (80114b8 <sbrk_aligned+0x40>)
 801147c:	460c      	mov	r4, r1
 801147e:	6831      	ldr	r1, [r6, #0]
 8011480:	4605      	mov	r5, r0
 8011482:	b911      	cbnz	r1, 801148a <sbrk_aligned+0x12>
 8011484:	f000 fb60 	bl	8011b48 <_sbrk_r>
 8011488:	6030      	str	r0, [r6, #0]
 801148a:	4621      	mov	r1, r4
 801148c:	4628      	mov	r0, r5
 801148e:	f000 fb5b 	bl	8011b48 <_sbrk_r>
 8011492:	1c43      	adds	r3, r0, #1
 8011494:	d103      	bne.n	801149e <sbrk_aligned+0x26>
 8011496:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801149a:	4620      	mov	r0, r4
 801149c:	bd70      	pop	{r4, r5, r6, pc}
 801149e:	1cc4      	adds	r4, r0, #3
 80114a0:	f024 0403 	bic.w	r4, r4, #3
 80114a4:	42a0      	cmp	r0, r4
 80114a6:	d0f8      	beq.n	801149a <sbrk_aligned+0x22>
 80114a8:	1a21      	subs	r1, r4, r0
 80114aa:	4628      	mov	r0, r5
 80114ac:	f000 fb4c 	bl	8011b48 <_sbrk_r>
 80114b0:	3001      	adds	r0, #1
 80114b2:	d1f2      	bne.n	801149a <sbrk_aligned+0x22>
 80114b4:	e7ef      	b.n	8011496 <sbrk_aligned+0x1e>
 80114b6:	bf00      	nop
 80114b8:	200015a8 	.word	0x200015a8

080114bc <_malloc_r>:
 80114bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114c0:	1ccd      	adds	r5, r1, #3
 80114c2:	f025 0503 	bic.w	r5, r5, #3
 80114c6:	3508      	adds	r5, #8
 80114c8:	2d0c      	cmp	r5, #12
 80114ca:	bf38      	it	cc
 80114cc:	250c      	movcc	r5, #12
 80114ce:	2d00      	cmp	r5, #0
 80114d0:	4606      	mov	r6, r0
 80114d2:	db01      	blt.n	80114d8 <_malloc_r+0x1c>
 80114d4:	42a9      	cmp	r1, r5
 80114d6:	d904      	bls.n	80114e2 <_malloc_r+0x26>
 80114d8:	230c      	movs	r3, #12
 80114da:	6033      	str	r3, [r6, #0]
 80114dc:	2000      	movs	r0, #0
 80114de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80115b8 <_malloc_r+0xfc>
 80114e6:	f000 f9f7 	bl	80118d8 <__malloc_lock>
 80114ea:	f8d8 3000 	ldr.w	r3, [r8]
 80114ee:	461c      	mov	r4, r3
 80114f0:	bb44      	cbnz	r4, 8011544 <_malloc_r+0x88>
 80114f2:	4629      	mov	r1, r5
 80114f4:	4630      	mov	r0, r6
 80114f6:	f7ff ffbf 	bl	8011478 <sbrk_aligned>
 80114fa:	1c43      	adds	r3, r0, #1
 80114fc:	4604      	mov	r4, r0
 80114fe:	d158      	bne.n	80115b2 <_malloc_r+0xf6>
 8011500:	f8d8 4000 	ldr.w	r4, [r8]
 8011504:	4627      	mov	r7, r4
 8011506:	2f00      	cmp	r7, #0
 8011508:	d143      	bne.n	8011592 <_malloc_r+0xd6>
 801150a:	2c00      	cmp	r4, #0
 801150c:	d04b      	beq.n	80115a6 <_malloc_r+0xea>
 801150e:	6823      	ldr	r3, [r4, #0]
 8011510:	4639      	mov	r1, r7
 8011512:	4630      	mov	r0, r6
 8011514:	eb04 0903 	add.w	r9, r4, r3
 8011518:	f000 fb16 	bl	8011b48 <_sbrk_r>
 801151c:	4581      	cmp	r9, r0
 801151e:	d142      	bne.n	80115a6 <_malloc_r+0xea>
 8011520:	6821      	ldr	r1, [r4, #0]
 8011522:	1a6d      	subs	r5, r5, r1
 8011524:	4629      	mov	r1, r5
 8011526:	4630      	mov	r0, r6
 8011528:	f7ff ffa6 	bl	8011478 <sbrk_aligned>
 801152c:	3001      	adds	r0, #1
 801152e:	d03a      	beq.n	80115a6 <_malloc_r+0xea>
 8011530:	6823      	ldr	r3, [r4, #0]
 8011532:	442b      	add	r3, r5
 8011534:	6023      	str	r3, [r4, #0]
 8011536:	f8d8 3000 	ldr.w	r3, [r8]
 801153a:	685a      	ldr	r2, [r3, #4]
 801153c:	bb62      	cbnz	r2, 8011598 <_malloc_r+0xdc>
 801153e:	f8c8 7000 	str.w	r7, [r8]
 8011542:	e00f      	b.n	8011564 <_malloc_r+0xa8>
 8011544:	6822      	ldr	r2, [r4, #0]
 8011546:	1b52      	subs	r2, r2, r5
 8011548:	d420      	bmi.n	801158c <_malloc_r+0xd0>
 801154a:	2a0b      	cmp	r2, #11
 801154c:	d917      	bls.n	801157e <_malloc_r+0xc2>
 801154e:	1961      	adds	r1, r4, r5
 8011550:	42a3      	cmp	r3, r4
 8011552:	6025      	str	r5, [r4, #0]
 8011554:	bf18      	it	ne
 8011556:	6059      	strne	r1, [r3, #4]
 8011558:	6863      	ldr	r3, [r4, #4]
 801155a:	bf08      	it	eq
 801155c:	f8c8 1000 	streq.w	r1, [r8]
 8011560:	5162      	str	r2, [r4, r5]
 8011562:	604b      	str	r3, [r1, #4]
 8011564:	4630      	mov	r0, r6
 8011566:	f000 f9bd 	bl	80118e4 <__malloc_unlock>
 801156a:	f104 000b 	add.w	r0, r4, #11
 801156e:	1d23      	adds	r3, r4, #4
 8011570:	f020 0007 	bic.w	r0, r0, #7
 8011574:	1ac2      	subs	r2, r0, r3
 8011576:	bf1c      	itt	ne
 8011578:	1a1b      	subne	r3, r3, r0
 801157a:	50a3      	strne	r3, [r4, r2]
 801157c:	e7af      	b.n	80114de <_malloc_r+0x22>
 801157e:	6862      	ldr	r2, [r4, #4]
 8011580:	42a3      	cmp	r3, r4
 8011582:	bf0c      	ite	eq
 8011584:	f8c8 2000 	streq.w	r2, [r8]
 8011588:	605a      	strne	r2, [r3, #4]
 801158a:	e7eb      	b.n	8011564 <_malloc_r+0xa8>
 801158c:	4623      	mov	r3, r4
 801158e:	6864      	ldr	r4, [r4, #4]
 8011590:	e7ae      	b.n	80114f0 <_malloc_r+0x34>
 8011592:	463c      	mov	r4, r7
 8011594:	687f      	ldr	r7, [r7, #4]
 8011596:	e7b6      	b.n	8011506 <_malloc_r+0x4a>
 8011598:	461a      	mov	r2, r3
 801159a:	685b      	ldr	r3, [r3, #4]
 801159c:	42a3      	cmp	r3, r4
 801159e:	d1fb      	bne.n	8011598 <_malloc_r+0xdc>
 80115a0:	2300      	movs	r3, #0
 80115a2:	6053      	str	r3, [r2, #4]
 80115a4:	e7de      	b.n	8011564 <_malloc_r+0xa8>
 80115a6:	230c      	movs	r3, #12
 80115a8:	6033      	str	r3, [r6, #0]
 80115aa:	4630      	mov	r0, r6
 80115ac:	f000 f99a 	bl	80118e4 <__malloc_unlock>
 80115b0:	e794      	b.n	80114dc <_malloc_r+0x20>
 80115b2:	6005      	str	r5, [r0, #0]
 80115b4:	e7d6      	b.n	8011564 <_malloc_r+0xa8>
 80115b6:	bf00      	nop
 80115b8:	200015ac 	.word	0x200015ac

080115bc <_printf_common>:
 80115bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115c0:	4616      	mov	r6, r2
 80115c2:	4698      	mov	r8, r3
 80115c4:	688a      	ldr	r2, [r1, #8]
 80115c6:	690b      	ldr	r3, [r1, #16]
 80115c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80115cc:	4293      	cmp	r3, r2
 80115ce:	bfb8      	it	lt
 80115d0:	4613      	movlt	r3, r2
 80115d2:	6033      	str	r3, [r6, #0]
 80115d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80115d8:	4607      	mov	r7, r0
 80115da:	460c      	mov	r4, r1
 80115dc:	b10a      	cbz	r2, 80115e2 <_printf_common+0x26>
 80115de:	3301      	adds	r3, #1
 80115e0:	6033      	str	r3, [r6, #0]
 80115e2:	6823      	ldr	r3, [r4, #0]
 80115e4:	0699      	lsls	r1, r3, #26
 80115e6:	bf42      	ittt	mi
 80115e8:	6833      	ldrmi	r3, [r6, #0]
 80115ea:	3302      	addmi	r3, #2
 80115ec:	6033      	strmi	r3, [r6, #0]
 80115ee:	6825      	ldr	r5, [r4, #0]
 80115f0:	f015 0506 	ands.w	r5, r5, #6
 80115f4:	d106      	bne.n	8011604 <_printf_common+0x48>
 80115f6:	f104 0a19 	add.w	sl, r4, #25
 80115fa:	68e3      	ldr	r3, [r4, #12]
 80115fc:	6832      	ldr	r2, [r6, #0]
 80115fe:	1a9b      	subs	r3, r3, r2
 8011600:	42ab      	cmp	r3, r5
 8011602:	dc26      	bgt.n	8011652 <_printf_common+0x96>
 8011604:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011608:	6822      	ldr	r2, [r4, #0]
 801160a:	3b00      	subs	r3, #0
 801160c:	bf18      	it	ne
 801160e:	2301      	movne	r3, #1
 8011610:	0692      	lsls	r2, r2, #26
 8011612:	d42b      	bmi.n	801166c <_printf_common+0xb0>
 8011614:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011618:	4641      	mov	r1, r8
 801161a:	4638      	mov	r0, r7
 801161c:	47c8      	blx	r9
 801161e:	3001      	adds	r0, #1
 8011620:	d01e      	beq.n	8011660 <_printf_common+0xa4>
 8011622:	6823      	ldr	r3, [r4, #0]
 8011624:	6922      	ldr	r2, [r4, #16]
 8011626:	f003 0306 	and.w	r3, r3, #6
 801162a:	2b04      	cmp	r3, #4
 801162c:	bf02      	ittt	eq
 801162e:	68e5      	ldreq	r5, [r4, #12]
 8011630:	6833      	ldreq	r3, [r6, #0]
 8011632:	1aed      	subeq	r5, r5, r3
 8011634:	68a3      	ldr	r3, [r4, #8]
 8011636:	bf0c      	ite	eq
 8011638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801163c:	2500      	movne	r5, #0
 801163e:	4293      	cmp	r3, r2
 8011640:	bfc4      	itt	gt
 8011642:	1a9b      	subgt	r3, r3, r2
 8011644:	18ed      	addgt	r5, r5, r3
 8011646:	2600      	movs	r6, #0
 8011648:	341a      	adds	r4, #26
 801164a:	42b5      	cmp	r5, r6
 801164c:	d11a      	bne.n	8011684 <_printf_common+0xc8>
 801164e:	2000      	movs	r0, #0
 8011650:	e008      	b.n	8011664 <_printf_common+0xa8>
 8011652:	2301      	movs	r3, #1
 8011654:	4652      	mov	r2, sl
 8011656:	4641      	mov	r1, r8
 8011658:	4638      	mov	r0, r7
 801165a:	47c8      	blx	r9
 801165c:	3001      	adds	r0, #1
 801165e:	d103      	bne.n	8011668 <_printf_common+0xac>
 8011660:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011668:	3501      	adds	r5, #1
 801166a:	e7c6      	b.n	80115fa <_printf_common+0x3e>
 801166c:	18e1      	adds	r1, r4, r3
 801166e:	1c5a      	adds	r2, r3, #1
 8011670:	2030      	movs	r0, #48	@ 0x30
 8011672:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011676:	4422      	add	r2, r4
 8011678:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801167c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011680:	3302      	adds	r3, #2
 8011682:	e7c7      	b.n	8011614 <_printf_common+0x58>
 8011684:	2301      	movs	r3, #1
 8011686:	4622      	mov	r2, r4
 8011688:	4641      	mov	r1, r8
 801168a:	4638      	mov	r0, r7
 801168c:	47c8      	blx	r9
 801168e:	3001      	adds	r0, #1
 8011690:	d0e6      	beq.n	8011660 <_printf_common+0xa4>
 8011692:	3601      	adds	r6, #1
 8011694:	e7d9      	b.n	801164a <_printf_common+0x8e>
	...

08011698 <_printf_i>:
 8011698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801169c:	7e0f      	ldrb	r7, [r1, #24]
 801169e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80116a0:	2f78      	cmp	r7, #120	@ 0x78
 80116a2:	4691      	mov	r9, r2
 80116a4:	4680      	mov	r8, r0
 80116a6:	460c      	mov	r4, r1
 80116a8:	469a      	mov	sl, r3
 80116aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80116ae:	d807      	bhi.n	80116c0 <_printf_i+0x28>
 80116b0:	2f62      	cmp	r7, #98	@ 0x62
 80116b2:	d80a      	bhi.n	80116ca <_printf_i+0x32>
 80116b4:	2f00      	cmp	r7, #0
 80116b6:	f000 80d2 	beq.w	801185e <_printf_i+0x1c6>
 80116ba:	2f58      	cmp	r7, #88	@ 0x58
 80116bc:	f000 80b9 	beq.w	8011832 <_printf_i+0x19a>
 80116c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80116c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80116c8:	e03a      	b.n	8011740 <_printf_i+0xa8>
 80116ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80116ce:	2b15      	cmp	r3, #21
 80116d0:	d8f6      	bhi.n	80116c0 <_printf_i+0x28>
 80116d2:	a101      	add	r1, pc, #4	@ (adr r1, 80116d8 <_printf_i+0x40>)
 80116d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80116d8:	08011731 	.word	0x08011731
 80116dc:	08011745 	.word	0x08011745
 80116e0:	080116c1 	.word	0x080116c1
 80116e4:	080116c1 	.word	0x080116c1
 80116e8:	080116c1 	.word	0x080116c1
 80116ec:	080116c1 	.word	0x080116c1
 80116f0:	08011745 	.word	0x08011745
 80116f4:	080116c1 	.word	0x080116c1
 80116f8:	080116c1 	.word	0x080116c1
 80116fc:	080116c1 	.word	0x080116c1
 8011700:	080116c1 	.word	0x080116c1
 8011704:	08011845 	.word	0x08011845
 8011708:	0801176f 	.word	0x0801176f
 801170c:	080117ff 	.word	0x080117ff
 8011710:	080116c1 	.word	0x080116c1
 8011714:	080116c1 	.word	0x080116c1
 8011718:	08011867 	.word	0x08011867
 801171c:	080116c1 	.word	0x080116c1
 8011720:	0801176f 	.word	0x0801176f
 8011724:	080116c1 	.word	0x080116c1
 8011728:	080116c1 	.word	0x080116c1
 801172c:	08011807 	.word	0x08011807
 8011730:	6833      	ldr	r3, [r6, #0]
 8011732:	1d1a      	adds	r2, r3, #4
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	6032      	str	r2, [r6, #0]
 8011738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801173c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011740:	2301      	movs	r3, #1
 8011742:	e09d      	b.n	8011880 <_printf_i+0x1e8>
 8011744:	6833      	ldr	r3, [r6, #0]
 8011746:	6820      	ldr	r0, [r4, #0]
 8011748:	1d19      	adds	r1, r3, #4
 801174a:	6031      	str	r1, [r6, #0]
 801174c:	0606      	lsls	r6, r0, #24
 801174e:	d501      	bpl.n	8011754 <_printf_i+0xbc>
 8011750:	681d      	ldr	r5, [r3, #0]
 8011752:	e003      	b.n	801175c <_printf_i+0xc4>
 8011754:	0645      	lsls	r5, r0, #25
 8011756:	d5fb      	bpl.n	8011750 <_printf_i+0xb8>
 8011758:	f9b3 5000 	ldrsh.w	r5, [r3]
 801175c:	2d00      	cmp	r5, #0
 801175e:	da03      	bge.n	8011768 <_printf_i+0xd0>
 8011760:	232d      	movs	r3, #45	@ 0x2d
 8011762:	426d      	negs	r5, r5
 8011764:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011768:	4859      	ldr	r0, [pc, #356]	@ (80118d0 <_printf_i+0x238>)
 801176a:	230a      	movs	r3, #10
 801176c:	e011      	b.n	8011792 <_printf_i+0xfa>
 801176e:	6821      	ldr	r1, [r4, #0]
 8011770:	6833      	ldr	r3, [r6, #0]
 8011772:	0608      	lsls	r0, r1, #24
 8011774:	f853 5b04 	ldr.w	r5, [r3], #4
 8011778:	d402      	bmi.n	8011780 <_printf_i+0xe8>
 801177a:	0649      	lsls	r1, r1, #25
 801177c:	bf48      	it	mi
 801177e:	b2ad      	uxthmi	r5, r5
 8011780:	2f6f      	cmp	r7, #111	@ 0x6f
 8011782:	4853      	ldr	r0, [pc, #332]	@ (80118d0 <_printf_i+0x238>)
 8011784:	6033      	str	r3, [r6, #0]
 8011786:	bf14      	ite	ne
 8011788:	230a      	movne	r3, #10
 801178a:	2308      	moveq	r3, #8
 801178c:	2100      	movs	r1, #0
 801178e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011792:	6866      	ldr	r6, [r4, #4]
 8011794:	60a6      	str	r6, [r4, #8]
 8011796:	2e00      	cmp	r6, #0
 8011798:	bfa2      	ittt	ge
 801179a:	6821      	ldrge	r1, [r4, #0]
 801179c:	f021 0104 	bicge.w	r1, r1, #4
 80117a0:	6021      	strge	r1, [r4, #0]
 80117a2:	b90d      	cbnz	r5, 80117a8 <_printf_i+0x110>
 80117a4:	2e00      	cmp	r6, #0
 80117a6:	d04b      	beq.n	8011840 <_printf_i+0x1a8>
 80117a8:	4616      	mov	r6, r2
 80117aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80117ae:	fb03 5711 	mls	r7, r3, r1, r5
 80117b2:	5dc7      	ldrb	r7, [r0, r7]
 80117b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80117b8:	462f      	mov	r7, r5
 80117ba:	42bb      	cmp	r3, r7
 80117bc:	460d      	mov	r5, r1
 80117be:	d9f4      	bls.n	80117aa <_printf_i+0x112>
 80117c0:	2b08      	cmp	r3, #8
 80117c2:	d10b      	bne.n	80117dc <_printf_i+0x144>
 80117c4:	6823      	ldr	r3, [r4, #0]
 80117c6:	07df      	lsls	r7, r3, #31
 80117c8:	d508      	bpl.n	80117dc <_printf_i+0x144>
 80117ca:	6923      	ldr	r3, [r4, #16]
 80117cc:	6861      	ldr	r1, [r4, #4]
 80117ce:	4299      	cmp	r1, r3
 80117d0:	bfde      	ittt	le
 80117d2:	2330      	movle	r3, #48	@ 0x30
 80117d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80117d8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80117dc:	1b92      	subs	r2, r2, r6
 80117de:	6122      	str	r2, [r4, #16]
 80117e0:	f8cd a000 	str.w	sl, [sp]
 80117e4:	464b      	mov	r3, r9
 80117e6:	aa03      	add	r2, sp, #12
 80117e8:	4621      	mov	r1, r4
 80117ea:	4640      	mov	r0, r8
 80117ec:	f7ff fee6 	bl	80115bc <_printf_common>
 80117f0:	3001      	adds	r0, #1
 80117f2:	d14a      	bne.n	801188a <_printf_i+0x1f2>
 80117f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80117f8:	b004      	add	sp, #16
 80117fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117fe:	6823      	ldr	r3, [r4, #0]
 8011800:	f043 0320 	orr.w	r3, r3, #32
 8011804:	6023      	str	r3, [r4, #0]
 8011806:	4833      	ldr	r0, [pc, #204]	@ (80118d4 <_printf_i+0x23c>)
 8011808:	2778      	movs	r7, #120	@ 0x78
 801180a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801180e:	6823      	ldr	r3, [r4, #0]
 8011810:	6831      	ldr	r1, [r6, #0]
 8011812:	061f      	lsls	r7, r3, #24
 8011814:	f851 5b04 	ldr.w	r5, [r1], #4
 8011818:	d402      	bmi.n	8011820 <_printf_i+0x188>
 801181a:	065f      	lsls	r7, r3, #25
 801181c:	bf48      	it	mi
 801181e:	b2ad      	uxthmi	r5, r5
 8011820:	6031      	str	r1, [r6, #0]
 8011822:	07d9      	lsls	r1, r3, #31
 8011824:	bf44      	itt	mi
 8011826:	f043 0320 	orrmi.w	r3, r3, #32
 801182a:	6023      	strmi	r3, [r4, #0]
 801182c:	b11d      	cbz	r5, 8011836 <_printf_i+0x19e>
 801182e:	2310      	movs	r3, #16
 8011830:	e7ac      	b.n	801178c <_printf_i+0xf4>
 8011832:	4827      	ldr	r0, [pc, #156]	@ (80118d0 <_printf_i+0x238>)
 8011834:	e7e9      	b.n	801180a <_printf_i+0x172>
 8011836:	6823      	ldr	r3, [r4, #0]
 8011838:	f023 0320 	bic.w	r3, r3, #32
 801183c:	6023      	str	r3, [r4, #0]
 801183e:	e7f6      	b.n	801182e <_printf_i+0x196>
 8011840:	4616      	mov	r6, r2
 8011842:	e7bd      	b.n	80117c0 <_printf_i+0x128>
 8011844:	6833      	ldr	r3, [r6, #0]
 8011846:	6825      	ldr	r5, [r4, #0]
 8011848:	6961      	ldr	r1, [r4, #20]
 801184a:	1d18      	adds	r0, r3, #4
 801184c:	6030      	str	r0, [r6, #0]
 801184e:	062e      	lsls	r6, r5, #24
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	d501      	bpl.n	8011858 <_printf_i+0x1c0>
 8011854:	6019      	str	r1, [r3, #0]
 8011856:	e002      	b.n	801185e <_printf_i+0x1c6>
 8011858:	0668      	lsls	r0, r5, #25
 801185a:	d5fb      	bpl.n	8011854 <_printf_i+0x1bc>
 801185c:	8019      	strh	r1, [r3, #0]
 801185e:	2300      	movs	r3, #0
 8011860:	6123      	str	r3, [r4, #16]
 8011862:	4616      	mov	r6, r2
 8011864:	e7bc      	b.n	80117e0 <_printf_i+0x148>
 8011866:	6833      	ldr	r3, [r6, #0]
 8011868:	1d1a      	adds	r2, r3, #4
 801186a:	6032      	str	r2, [r6, #0]
 801186c:	681e      	ldr	r6, [r3, #0]
 801186e:	6862      	ldr	r2, [r4, #4]
 8011870:	2100      	movs	r1, #0
 8011872:	4630      	mov	r0, r6
 8011874:	f7ee fcd4 	bl	8000220 <memchr>
 8011878:	b108      	cbz	r0, 801187e <_printf_i+0x1e6>
 801187a:	1b80      	subs	r0, r0, r6
 801187c:	6060      	str	r0, [r4, #4]
 801187e:	6863      	ldr	r3, [r4, #4]
 8011880:	6123      	str	r3, [r4, #16]
 8011882:	2300      	movs	r3, #0
 8011884:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011888:	e7aa      	b.n	80117e0 <_printf_i+0x148>
 801188a:	6923      	ldr	r3, [r4, #16]
 801188c:	4632      	mov	r2, r6
 801188e:	4649      	mov	r1, r9
 8011890:	4640      	mov	r0, r8
 8011892:	47d0      	blx	sl
 8011894:	3001      	adds	r0, #1
 8011896:	d0ad      	beq.n	80117f4 <_printf_i+0x15c>
 8011898:	6823      	ldr	r3, [r4, #0]
 801189a:	079b      	lsls	r3, r3, #30
 801189c:	d413      	bmi.n	80118c6 <_printf_i+0x22e>
 801189e:	68e0      	ldr	r0, [r4, #12]
 80118a0:	9b03      	ldr	r3, [sp, #12]
 80118a2:	4298      	cmp	r0, r3
 80118a4:	bfb8      	it	lt
 80118a6:	4618      	movlt	r0, r3
 80118a8:	e7a6      	b.n	80117f8 <_printf_i+0x160>
 80118aa:	2301      	movs	r3, #1
 80118ac:	4632      	mov	r2, r6
 80118ae:	4649      	mov	r1, r9
 80118b0:	4640      	mov	r0, r8
 80118b2:	47d0      	blx	sl
 80118b4:	3001      	adds	r0, #1
 80118b6:	d09d      	beq.n	80117f4 <_printf_i+0x15c>
 80118b8:	3501      	adds	r5, #1
 80118ba:	68e3      	ldr	r3, [r4, #12]
 80118bc:	9903      	ldr	r1, [sp, #12]
 80118be:	1a5b      	subs	r3, r3, r1
 80118c0:	42ab      	cmp	r3, r5
 80118c2:	dcf2      	bgt.n	80118aa <_printf_i+0x212>
 80118c4:	e7eb      	b.n	801189e <_printf_i+0x206>
 80118c6:	2500      	movs	r5, #0
 80118c8:	f104 0619 	add.w	r6, r4, #25
 80118cc:	e7f5      	b.n	80118ba <_printf_i+0x222>
 80118ce:	bf00      	nop
 80118d0:	08013dd6 	.word	0x08013dd6
 80118d4:	08013de7 	.word	0x08013de7

080118d8 <__malloc_lock>:
 80118d8:	4801      	ldr	r0, [pc, #4]	@ (80118e0 <__malloc_lock+0x8>)
 80118da:	f7f1 bb64 	b.w	8002fa6 <__retarget_lock_acquire_recursive>
 80118de:	bf00      	nop
 80118e0:	20000894 	.word	0x20000894

080118e4 <__malloc_unlock>:
 80118e4:	4801      	ldr	r0, [pc, #4]	@ (80118ec <__malloc_unlock+0x8>)
 80118e6:	f7f1 bb73 	b.w	8002fd0 <__retarget_lock_release_recursive>
 80118ea:	bf00      	nop
 80118ec:	20000894 	.word	0x20000894

080118f0 <siprintf>:
 80118f0:	b40e      	push	{r1, r2, r3}
 80118f2:	b500      	push	{lr}
 80118f4:	b09c      	sub	sp, #112	@ 0x70
 80118f6:	ab1d      	add	r3, sp, #116	@ 0x74
 80118f8:	9002      	str	r0, [sp, #8]
 80118fa:	9006      	str	r0, [sp, #24]
 80118fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011900:	4809      	ldr	r0, [pc, #36]	@ (8011928 <siprintf+0x38>)
 8011902:	9107      	str	r1, [sp, #28]
 8011904:	9104      	str	r1, [sp, #16]
 8011906:	4909      	ldr	r1, [pc, #36]	@ (801192c <siprintf+0x3c>)
 8011908:	f853 2b04 	ldr.w	r2, [r3], #4
 801190c:	9105      	str	r1, [sp, #20]
 801190e:	6800      	ldr	r0, [r0, #0]
 8011910:	9301      	str	r3, [sp, #4]
 8011912:	a902      	add	r1, sp, #8
 8011914:	f001 f872 	bl	80129fc <_svfiprintf_r>
 8011918:	9b02      	ldr	r3, [sp, #8]
 801191a:	2200      	movs	r2, #0
 801191c:	701a      	strb	r2, [r3, #0]
 801191e:	b01c      	add	sp, #112	@ 0x70
 8011920:	f85d eb04 	ldr.w	lr, [sp], #4
 8011924:	b003      	add	sp, #12
 8011926:	4770      	bx	lr
 8011928:	200000ec 	.word	0x200000ec
 801192c:	ffff0208 	.word	0xffff0208

08011930 <rand>:
 8011930:	4b16      	ldr	r3, [pc, #88]	@ (801198c <rand+0x5c>)
 8011932:	b510      	push	{r4, lr}
 8011934:	681c      	ldr	r4, [r3, #0]
 8011936:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011938:	b9b3      	cbnz	r3, 8011968 <rand+0x38>
 801193a:	2018      	movs	r0, #24
 801193c:	f7ff fd94 	bl	8011468 <malloc>
 8011940:	4602      	mov	r2, r0
 8011942:	6320      	str	r0, [r4, #48]	@ 0x30
 8011944:	b920      	cbnz	r0, 8011950 <rand+0x20>
 8011946:	4b12      	ldr	r3, [pc, #72]	@ (8011990 <rand+0x60>)
 8011948:	4812      	ldr	r0, [pc, #72]	@ (8011994 <rand+0x64>)
 801194a:	2152      	movs	r1, #82	@ 0x52
 801194c:	f000 f944 	bl	8011bd8 <__assert_func>
 8011950:	4911      	ldr	r1, [pc, #68]	@ (8011998 <rand+0x68>)
 8011952:	4b12      	ldr	r3, [pc, #72]	@ (801199c <rand+0x6c>)
 8011954:	e9c0 1300 	strd	r1, r3, [r0]
 8011958:	4b11      	ldr	r3, [pc, #68]	@ (80119a0 <rand+0x70>)
 801195a:	6083      	str	r3, [r0, #8]
 801195c:	230b      	movs	r3, #11
 801195e:	8183      	strh	r3, [r0, #12]
 8011960:	2100      	movs	r1, #0
 8011962:	2001      	movs	r0, #1
 8011964:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011968:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801196a:	480e      	ldr	r0, [pc, #56]	@ (80119a4 <rand+0x74>)
 801196c:	690b      	ldr	r3, [r1, #16]
 801196e:	694c      	ldr	r4, [r1, #20]
 8011970:	4a0d      	ldr	r2, [pc, #52]	@ (80119a8 <rand+0x78>)
 8011972:	4358      	muls	r0, r3
 8011974:	fb02 0004 	mla	r0, r2, r4, r0
 8011978:	fba3 3202 	umull	r3, r2, r3, r2
 801197c:	3301      	adds	r3, #1
 801197e:	eb40 0002 	adc.w	r0, r0, r2
 8011982:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011986:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801198a:	bd10      	pop	{r4, pc}
 801198c:	200000ec 	.word	0x200000ec
 8011990:	08013df8 	.word	0x08013df8
 8011994:	08013e0f 	.word	0x08013e0f
 8011998:	abcd330e 	.word	0xabcd330e
 801199c:	e66d1234 	.word	0xe66d1234
 80119a0:	0005deec 	.word	0x0005deec
 80119a4:	5851f42d 	.word	0x5851f42d
 80119a8:	4c957f2d 	.word	0x4c957f2d

080119ac <std>:
 80119ac:	2300      	movs	r3, #0
 80119ae:	b510      	push	{r4, lr}
 80119b0:	4604      	mov	r4, r0
 80119b2:	e9c0 3300 	strd	r3, r3, [r0]
 80119b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80119ba:	6083      	str	r3, [r0, #8]
 80119bc:	8181      	strh	r1, [r0, #12]
 80119be:	6643      	str	r3, [r0, #100]	@ 0x64
 80119c0:	81c2      	strh	r2, [r0, #14]
 80119c2:	6183      	str	r3, [r0, #24]
 80119c4:	4619      	mov	r1, r3
 80119c6:	2208      	movs	r2, #8
 80119c8:	305c      	adds	r0, #92	@ 0x5c
 80119ca:	f000 f8b1 	bl	8011b30 <memset>
 80119ce:	4b0d      	ldr	r3, [pc, #52]	@ (8011a04 <std+0x58>)
 80119d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80119d2:	4b0d      	ldr	r3, [pc, #52]	@ (8011a08 <std+0x5c>)
 80119d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80119d6:	4b0d      	ldr	r3, [pc, #52]	@ (8011a0c <std+0x60>)
 80119d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80119da:	4b0d      	ldr	r3, [pc, #52]	@ (8011a10 <std+0x64>)
 80119dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80119de:	4b0d      	ldr	r3, [pc, #52]	@ (8011a14 <std+0x68>)
 80119e0:	6224      	str	r4, [r4, #32]
 80119e2:	429c      	cmp	r4, r3
 80119e4:	d006      	beq.n	80119f4 <std+0x48>
 80119e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80119ea:	4294      	cmp	r4, r2
 80119ec:	d002      	beq.n	80119f4 <std+0x48>
 80119ee:	33d0      	adds	r3, #208	@ 0xd0
 80119f0:	429c      	cmp	r4, r3
 80119f2:	d105      	bne.n	8011a00 <std+0x54>
 80119f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80119f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119fc:	f7f1 baac 	b.w	8002f58 <__retarget_lock_init_recursive>
 8011a00:	bd10      	pop	{r4, pc}
 8011a02:	bf00      	nop
 8011a04:	08013451 	.word	0x08013451
 8011a08:	08013473 	.word	0x08013473
 8011a0c:	080134ab 	.word	0x080134ab
 8011a10:	080134cf 	.word	0x080134cf
 8011a14:	200015b0 	.word	0x200015b0

08011a18 <stdio_exit_handler>:
 8011a18:	4a02      	ldr	r2, [pc, #8]	@ (8011a24 <stdio_exit_handler+0xc>)
 8011a1a:	4903      	ldr	r1, [pc, #12]	@ (8011a28 <stdio_exit_handler+0x10>)
 8011a1c:	4803      	ldr	r0, [pc, #12]	@ (8011a2c <stdio_exit_handler+0x14>)
 8011a1e:	f000 b869 	b.w	8011af4 <_fwalk_sglue>
 8011a22:	bf00      	nop
 8011a24:	200000e0 	.word	0x200000e0
 8011a28:	08012cfd 	.word	0x08012cfd
 8011a2c:	200000f0 	.word	0x200000f0

08011a30 <cleanup_stdio>:
 8011a30:	6841      	ldr	r1, [r0, #4]
 8011a32:	4b0c      	ldr	r3, [pc, #48]	@ (8011a64 <cleanup_stdio+0x34>)
 8011a34:	4299      	cmp	r1, r3
 8011a36:	b510      	push	{r4, lr}
 8011a38:	4604      	mov	r4, r0
 8011a3a:	d001      	beq.n	8011a40 <cleanup_stdio+0x10>
 8011a3c:	f001 f95e 	bl	8012cfc <_fflush_r>
 8011a40:	68a1      	ldr	r1, [r4, #8]
 8011a42:	4b09      	ldr	r3, [pc, #36]	@ (8011a68 <cleanup_stdio+0x38>)
 8011a44:	4299      	cmp	r1, r3
 8011a46:	d002      	beq.n	8011a4e <cleanup_stdio+0x1e>
 8011a48:	4620      	mov	r0, r4
 8011a4a:	f001 f957 	bl	8012cfc <_fflush_r>
 8011a4e:	68e1      	ldr	r1, [r4, #12]
 8011a50:	4b06      	ldr	r3, [pc, #24]	@ (8011a6c <cleanup_stdio+0x3c>)
 8011a52:	4299      	cmp	r1, r3
 8011a54:	d004      	beq.n	8011a60 <cleanup_stdio+0x30>
 8011a56:	4620      	mov	r0, r4
 8011a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a5c:	f001 b94e 	b.w	8012cfc <_fflush_r>
 8011a60:	bd10      	pop	{r4, pc}
 8011a62:	bf00      	nop
 8011a64:	200015b0 	.word	0x200015b0
 8011a68:	20001618 	.word	0x20001618
 8011a6c:	20001680 	.word	0x20001680

08011a70 <global_stdio_init.part.0>:
 8011a70:	b510      	push	{r4, lr}
 8011a72:	4b0b      	ldr	r3, [pc, #44]	@ (8011aa0 <global_stdio_init.part.0+0x30>)
 8011a74:	4c0b      	ldr	r4, [pc, #44]	@ (8011aa4 <global_stdio_init.part.0+0x34>)
 8011a76:	4a0c      	ldr	r2, [pc, #48]	@ (8011aa8 <global_stdio_init.part.0+0x38>)
 8011a78:	601a      	str	r2, [r3, #0]
 8011a7a:	4620      	mov	r0, r4
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	2104      	movs	r1, #4
 8011a80:	f7ff ff94 	bl	80119ac <std>
 8011a84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011a88:	2201      	movs	r2, #1
 8011a8a:	2109      	movs	r1, #9
 8011a8c:	f7ff ff8e 	bl	80119ac <std>
 8011a90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011a94:	2202      	movs	r2, #2
 8011a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a9a:	2112      	movs	r1, #18
 8011a9c:	f7ff bf86 	b.w	80119ac <std>
 8011aa0:	200016e8 	.word	0x200016e8
 8011aa4:	200015b0 	.word	0x200015b0
 8011aa8:	08011a19 	.word	0x08011a19

08011aac <__sfp_lock_acquire>:
 8011aac:	4801      	ldr	r0, [pc, #4]	@ (8011ab4 <__sfp_lock_acquire+0x8>)
 8011aae:	f7f1 ba7a 	b.w	8002fa6 <__retarget_lock_acquire_recursive>
 8011ab2:	bf00      	nop
 8011ab4:	20000890 	.word	0x20000890

08011ab8 <__sfp_lock_release>:
 8011ab8:	4801      	ldr	r0, [pc, #4]	@ (8011ac0 <__sfp_lock_release+0x8>)
 8011aba:	f7f1 ba89 	b.w	8002fd0 <__retarget_lock_release_recursive>
 8011abe:	bf00      	nop
 8011ac0:	20000890 	.word	0x20000890

08011ac4 <__sinit>:
 8011ac4:	b510      	push	{r4, lr}
 8011ac6:	4604      	mov	r4, r0
 8011ac8:	f7ff fff0 	bl	8011aac <__sfp_lock_acquire>
 8011acc:	6a23      	ldr	r3, [r4, #32]
 8011ace:	b11b      	cbz	r3, 8011ad8 <__sinit+0x14>
 8011ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ad4:	f7ff bff0 	b.w	8011ab8 <__sfp_lock_release>
 8011ad8:	4b04      	ldr	r3, [pc, #16]	@ (8011aec <__sinit+0x28>)
 8011ada:	6223      	str	r3, [r4, #32]
 8011adc:	4b04      	ldr	r3, [pc, #16]	@ (8011af0 <__sinit+0x2c>)
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d1f5      	bne.n	8011ad0 <__sinit+0xc>
 8011ae4:	f7ff ffc4 	bl	8011a70 <global_stdio_init.part.0>
 8011ae8:	e7f2      	b.n	8011ad0 <__sinit+0xc>
 8011aea:	bf00      	nop
 8011aec:	08011a31 	.word	0x08011a31
 8011af0:	200016e8 	.word	0x200016e8

08011af4 <_fwalk_sglue>:
 8011af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011af8:	4607      	mov	r7, r0
 8011afa:	4688      	mov	r8, r1
 8011afc:	4614      	mov	r4, r2
 8011afe:	2600      	movs	r6, #0
 8011b00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011b04:	f1b9 0901 	subs.w	r9, r9, #1
 8011b08:	d505      	bpl.n	8011b16 <_fwalk_sglue+0x22>
 8011b0a:	6824      	ldr	r4, [r4, #0]
 8011b0c:	2c00      	cmp	r4, #0
 8011b0e:	d1f7      	bne.n	8011b00 <_fwalk_sglue+0xc>
 8011b10:	4630      	mov	r0, r6
 8011b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b16:	89ab      	ldrh	r3, [r5, #12]
 8011b18:	2b01      	cmp	r3, #1
 8011b1a:	d907      	bls.n	8011b2c <_fwalk_sglue+0x38>
 8011b1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011b20:	3301      	adds	r3, #1
 8011b22:	d003      	beq.n	8011b2c <_fwalk_sglue+0x38>
 8011b24:	4629      	mov	r1, r5
 8011b26:	4638      	mov	r0, r7
 8011b28:	47c0      	blx	r8
 8011b2a:	4306      	orrs	r6, r0
 8011b2c:	3568      	adds	r5, #104	@ 0x68
 8011b2e:	e7e9      	b.n	8011b04 <_fwalk_sglue+0x10>

08011b30 <memset>:
 8011b30:	4402      	add	r2, r0
 8011b32:	4603      	mov	r3, r0
 8011b34:	4293      	cmp	r3, r2
 8011b36:	d100      	bne.n	8011b3a <memset+0xa>
 8011b38:	4770      	bx	lr
 8011b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8011b3e:	e7f9      	b.n	8011b34 <memset+0x4>

08011b40 <_localeconv_r>:
 8011b40:	4800      	ldr	r0, [pc, #0]	@ (8011b44 <_localeconv_r+0x4>)
 8011b42:	4770      	bx	lr
 8011b44:	2000022c 	.word	0x2000022c

08011b48 <_sbrk_r>:
 8011b48:	b538      	push	{r3, r4, r5, lr}
 8011b4a:	4d06      	ldr	r5, [pc, #24]	@ (8011b64 <_sbrk_r+0x1c>)
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	4604      	mov	r4, r0
 8011b50:	4608      	mov	r0, r1
 8011b52:	602b      	str	r3, [r5, #0]
 8011b54:	f7f1 f914 	bl	8002d80 <_sbrk>
 8011b58:	1c43      	adds	r3, r0, #1
 8011b5a:	d102      	bne.n	8011b62 <_sbrk_r+0x1a>
 8011b5c:	682b      	ldr	r3, [r5, #0]
 8011b5e:	b103      	cbz	r3, 8011b62 <_sbrk_r+0x1a>
 8011b60:	6023      	str	r3, [r4, #0]
 8011b62:	bd38      	pop	{r3, r4, r5, pc}
 8011b64:	200016ec 	.word	0x200016ec

08011b68 <__errno>:
 8011b68:	4b01      	ldr	r3, [pc, #4]	@ (8011b70 <__errno+0x8>)
 8011b6a:	6818      	ldr	r0, [r3, #0]
 8011b6c:	4770      	bx	lr
 8011b6e:	bf00      	nop
 8011b70:	200000ec 	.word	0x200000ec

08011b74 <__libc_init_array>:
 8011b74:	b570      	push	{r4, r5, r6, lr}
 8011b76:	4d0d      	ldr	r5, [pc, #52]	@ (8011bac <__libc_init_array+0x38>)
 8011b78:	4c0d      	ldr	r4, [pc, #52]	@ (8011bb0 <__libc_init_array+0x3c>)
 8011b7a:	1b64      	subs	r4, r4, r5
 8011b7c:	10a4      	asrs	r4, r4, #2
 8011b7e:	2600      	movs	r6, #0
 8011b80:	42a6      	cmp	r6, r4
 8011b82:	d109      	bne.n	8011b98 <__libc_init_array+0x24>
 8011b84:	4d0b      	ldr	r5, [pc, #44]	@ (8011bb4 <__libc_init_array+0x40>)
 8011b86:	4c0c      	ldr	r4, [pc, #48]	@ (8011bb8 <__libc_init_array+0x44>)
 8011b88:	f002 f826 	bl	8013bd8 <_init>
 8011b8c:	1b64      	subs	r4, r4, r5
 8011b8e:	10a4      	asrs	r4, r4, #2
 8011b90:	2600      	movs	r6, #0
 8011b92:	42a6      	cmp	r6, r4
 8011b94:	d105      	bne.n	8011ba2 <__libc_init_array+0x2e>
 8011b96:	bd70      	pop	{r4, r5, r6, pc}
 8011b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b9c:	4798      	blx	r3
 8011b9e:	3601      	adds	r6, #1
 8011ba0:	e7ee      	b.n	8011b80 <__libc_init_array+0xc>
 8011ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ba6:	4798      	blx	r3
 8011ba8:	3601      	adds	r6, #1
 8011baa:	e7f2      	b.n	8011b92 <__libc_init_array+0x1e>
 8011bac:	08014194 	.word	0x08014194
 8011bb0:	08014194 	.word	0x08014194
 8011bb4:	08014194 	.word	0x08014194
 8011bb8:	08014198 	.word	0x08014198

08011bbc <memcpy>:
 8011bbc:	440a      	add	r2, r1
 8011bbe:	4291      	cmp	r1, r2
 8011bc0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011bc4:	d100      	bne.n	8011bc8 <memcpy+0xc>
 8011bc6:	4770      	bx	lr
 8011bc8:	b510      	push	{r4, lr}
 8011bca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011bce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011bd2:	4291      	cmp	r1, r2
 8011bd4:	d1f9      	bne.n	8011bca <memcpy+0xe>
 8011bd6:	bd10      	pop	{r4, pc}

08011bd8 <__assert_func>:
 8011bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011bda:	4614      	mov	r4, r2
 8011bdc:	461a      	mov	r2, r3
 8011bde:	4b09      	ldr	r3, [pc, #36]	@ (8011c04 <__assert_func+0x2c>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	4605      	mov	r5, r0
 8011be4:	68d8      	ldr	r0, [r3, #12]
 8011be6:	b954      	cbnz	r4, 8011bfe <__assert_func+0x26>
 8011be8:	4b07      	ldr	r3, [pc, #28]	@ (8011c08 <__assert_func+0x30>)
 8011bea:	461c      	mov	r4, r3
 8011bec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011bf0:	9100      	str	r1, [sp, #0]
 8011bf2:	462b      	mov	r3, r5
 8011bf4:	4905      	ldr	r1, [pc, #20]	@ (8011c0c <__assert_func+0x34>)
 8011bf6:	f001 fc6f 	bl	80134d8 <fiprintf>
 8011bfa:	f001 fd0d 	bl	8013618 <abort>
 8011bfe:	4b04      	ldr	r3, [pc, #16]	@ (8011c10 <__assert_func+0x38>)
 8011c00:	e7f4      	b.n	8011bec <__assert_func+0x14>
 8011c02:	bf00      	nop
 8011c04:	200000ec 	.word	0x200000ec
 8011c08:	08013fa3 	.word	0x08013fa3
 8011c0c:	08013f75 	.word	0x08013f75
 8011c10:	08013f68 	.word	0x08013f68

08011c14 <quorem>:
 8011c14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c18:	6903      	ldr	r3, [r0, #16]
 8011c1a:	690c      	ldr	r4, [r1, #16]
 8011c1c:	42a3      	cmp	r3, r4
 8011c1e:	4607      	mov	r7, r0
 8011c20:	db7e      	blt.n	8011d20 <quorem+0x10c>
 8011c22:	3c01      	subs	r4, #1
 8011c24:	f101 0814 	add.w	r8, r1, #20
 8011c28:	00a3      	lsls	r3, r4, #2
 8011c2a:	f100 0514 	add.w	r5, r0, #20
 8011c2e:	9300      	str	r3, [sp, #0]
 8011c30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011c34:	9301      	str	r3, [sp, #4]
 8011c36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011c3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011c3e:	3301      	adds	r3, #1
 8011c40:	429a      	cmp	r2, r3
 8011c42:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011c46:	fbb2 f6f3 	udiv	r6, r2, r3
 8011c4a:	d32e      	bcc.n	8011caa <quorem+0x96>
 8011c4c:	f04f 0a00 	mov.w	sl, #0
 8011c50:	46c4      	mov	ip, r8
 8011c52:	46ae      	mov	lr, r5
 8011c54:	46d3      	mov	fp, sl
 8011c56:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011c5a:	b298      	uxth	r0, r3
 8011c5c:	fb06 a000 	mla	r0, r6, r0, sl
 8011c60:	0c02      	lsrs	r2, r0, #16
 8011c62:	0c1b      	lsrs	r3, r3, #16
 8011c64:	fb06 2303 	mla	r3, r6, r3, r2
 8011c68:	f8de 2000 	ldr.w	r2, [lr]
 8011c6c:	b280      	uxth	r0, r0
 8011c6e:	b292      	uxth	r2, r2
 8011c70:	1a12      	subs	r2, r2, r0
 8011c72:	445a      	add	r2, fp
 8011c74:	f8de 0000 	ldr.w	r0, [lr]
 8011c78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011c7c:	b29b      	uxth	r3, r3
 8011c7e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011c82:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011c86:	b292      	uxth	r2, r2
 8011c88:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011c8c:	45e1      	cmp	r9, ip
 8011c8e:	f84e 2b04 	str.w	r2, [lr], #4
 8011c92:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011c96:	d2de      	bcs.n	8011c56 <quorem+0x42>
 8011c98:	9b00      	ldr	r3, [sp, #0]
 8011c9a:	58eb      	ldr	r3, [r5, r3]
 8011c9c:	b92b      	cbnz	r3, 8011caa <quorem+0x96>
 8011c9e:	9b01      	ldr	r3, [sp, #4]
 8011ca0:	3b04      	subs	r3, #4
 8011ca2:	429d      	cmp	r5, r3
 8011ca4:	461a      	mov	r2, r3
 8011ca6:	d32f      	bcc.n	8011d08 <quorem+0xf4>
 8011ca8:	613c      	str	r4, [r7, #16]
 8011caa:	4638      	mov	r0, r7
 8011cac:	f001 fac8 	bl	8013240 <__mcmp>
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	db25      	blt.n	8011d00 <quorem+0xec>
 8011cb4:	4629      	mov	r1, r5
 8011cb6:	2000      	movs	r0, #0
 8011cb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8011cbc:	f8d1 c000 	ldr.w	ip, [r1]
 8011cc0:	fa1f fe82 	uxth.w	lr, r2
 8011cc4:	fa1f f38c 	uxth.w	r3, ip
 8011cc8:	eba3 030e 	sub.w	r3, r3, lr
 8011ccc:	4403      	add	r3, r0
 8011cce:	0c12      	lsrs	r2, r2, #16
 8011cd0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011cd4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011cde:	45c1      	cmp	r9, r8
 8011ce0:	f841 3b04 	str.w	r3, [r1], #4
 8011ce4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011ce8:	d2e6      	bcs.n	8011cb8 <quorem+0xa4>
 8011cea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011cee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011cf2:	b922      	cbnz	r2, 8011cfe <quorem+0xea>
 8011cf4:	3b04      	subs	r3, #4
 8011cf6:	429d      	cmp	r5, r3
 8011cf8:	461a      	mov	r2, r3
 8011cfa:	d30b      	bcc.n	8011d14 <quorem+0x100>
 8011cfc:	613c      	str	r4, [r7, #16]
 8011cfe:	3601      	adds	r6, #1
 8011d00:	4630      	mov	r0, r6
 8011d02:	b003      	add	sp, #12
 8011d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d08:	6812      	ldr	r2, [r2, #0]
 8011d0a:	3b04      	subs	r3, #4
 8011d0c:	2a00      	cmp	r2, #0
 8011d0e:	d1cb      	bne.n	8011ca8 <quorem+0x94>
 8011d10:	3c01      	subs	r4, #1
 8011d12:	e7c6      	b.n	8011ca2 <quorem+0x8e>
 8011d14:	6812      	ldr	r2, [r2, #0]
 8011d16:	3b04      	subs	r3, #4
 8011d18:	2a00      	cmp	r2, #0
 8011d1a:	d1ef      	bne.n	8011cfc <quorem+0xe8>
 8011d1c:	3c01      	subs	r4, #1
 8011d1e:	e7ea      	b.n	8011cf6 <quorem+0xe2>
 8011d20:	2000      	movs	r0, #0
 8011d22:	e7ee      	b.n	8011d02 <quorem+0xee>
 8011d24:	0000      	movs	r0, r0
	...

08011d28 <_dtoa_r>:
 8011d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d2c:	69c7      	ldr	r7, [r0, #28]
 8011d2e:	b099      	sub	sp, #100	@ 0x64
 8011d30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011d34:	ec55 4b10 	vmov	r4, r5, d0
 8011d38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011d3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8011d3c:	4683      	mov	fp, r0
 8011d3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8011d40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011d42:	b97f      	cbnz	r7, 8011d64 <_dtoa_r+0x3c>
 8011d44:	2010      	movs	r0, #16
 8011d46:	f7ff fb8f 	bl	8011468 <malloc>
 8011d4a:	4602      	mov	r2, r0
 8011d4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8011d50:	b920      	cbnz	r0, 8011d5c <_dtoa_r+0x34>
 8011d52:	4ba7      	ldr	r3, [pc, #668]	@ (8011ff0 <_dtoa_r+0x2c8>)
 8011d54:	21ef      	movs	r1, #239	@ 0xef
 8011d56:	48a7      	ldr	r0, [pc, #668]	@ (8011ff4 <_dtoa_r+0x2cc>)
 8011d58:	f7ff ff3e 	bl	8011bd8 <__assert_func>
 8011d5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011d60:	6007      	str	r7, [r0, #0]
 8011d62:	60c7      	str	r7, [r0, #12]
 8011d64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011d68:	6819      	ldr	r1, [r3, #0]
 8011d6a:	b159      	cbz	r1, 8011d84 <_dtoa_r+0x5c>
 8011d6c:	685a      	ldr	r2, [r3, #4]
 8011d6e:	604a      	str	r2, [r1, #4]
 8011d70:	2301      	movs	r3, #1
 8011d72:	4093      	lsls	r3, r2
 8011d74:	608b      	str	r3, [r1, #8]
 8011d76:	4658      	mov	r0, fp
 8011d78:	f001 f828 	bl	8012dcc <_Bfree>
 8011d7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011d80:	2200      	movs	r2, #0
 8011d82:	601a      	str	r2, [r3, #0]
 8011d84:	1e2b      	subs	r3, r5, #0
 8011d86:	bfb9      	ittee	lt
 8011d88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011d8c:	9303      	strlt	r3, [sp, #12]
 8011d8e:	2300      	movge	r3, #0
 8011d90:	6033      	strge	r3, [r6, #0]
 8011d92:	9f03      	ldr	r7, [sp, #12]
 8011d94:	4b98      	ldr	r3, [pc, #608]	@ (8011ff8 <_dtoa_r+0x2d0>)
 8011d96:	bfbc      	itt	lt
 8011d98:	2201      	movlt	r2, #1
 8011d9a:	6032      	strlt	r2, [r6, #0]
 8011d9c:	43bb      	bics	r3, r7
 8011d9e:	d112      	bne.n	8011dc6 <_dtoa_r+0x9e>
 8011da0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011da2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011da6:	6013      	str	r3, [r2, #0]
 8011da8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011dac:	4323      	orrs	r3, r4
 8011dae:	f000 854d 	beq.w	801284c <_dtoa_r+0xb24>
 8011db2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011db4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801200c <_dtoa_r+0x2e4>
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	f000 854f 	beq.w	801285c <_dtoa_r+0xb34>
 8011dbe:	f10a 0303 	add.w	r3, sl, #3
 8011dc2:	f000 bd49 	b.w	8012858 <_dtoa_r+0xb30>
 8011dc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011dca:	2200      	movs	r2, #0
 8011dcc:	ec51 0b17 	vmov	r0, r1, d7
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8011dd6:	f7ee fe9f 	bl	8000b18 <__aeabi_dcmpeq>
 8011dda:	4680      	mov	r8, r0
 8011ddc:	b158      	cbz	r0, 8011df6 <_dtoa_r+0xce>
 8011dde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011de0:	2301      	movs	r3, #1
 8011de2:	6013      	str	r3, [r2, #0]
 8011de4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011de6:	b113      	cbz	r3, 8011dee <_dtoa_r+0xc6>
 8011de8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011dea:	4b84      	ldr	r3, [pc, #528]	@ (8011ffc <_dtoa_r+0x2d4>)
 8011dec:	6013      	str	r3, [r2, #0]
 8011dee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012010 <_dtoa_r+0x2e8>
 8011df2:	f000 bd33 	b.w	801285c <_dtoa_r+0xb34>
 8011df6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011dfa:	aa16      	add	r2, sp, #88	@ 0x58
 8011dfc:	a917      	add	r1, sp, #92	@ 0x5c
 8011dfe:	4658      	mov	r0, fp
 8011e00:	f001 face 	bl	80133a0 <__d2b>
 8011e04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011e08:	4681      	mov	r9, r0
 8011e0a:	2e00      	cmp	r6, #0
 8011e0c:	d077      	beq.n	8011efe <_dtoa_r+0x1d6>
 8011e0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8011e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011e18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011e1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011e20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011e24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011e28:	4619      	mov	r1, r3
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	4b74      	ldr	r3, [pc, #464]	@ (8012000 <_dtoa_r+0x2d8>)
 8011e2e:	f7ee fa53 	bl	80002d8 <__aeabi_dsub>
 8011e32:	a369      	add	r3, pc, #420	@ (adr r3, 8011fd8 <_dtoa_r+0x2b0>)
 8011e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e38:	f7ee fc06 	bl	8000648 <__aeabi_dmul>
 8011e3c:	a368      	add	r3, pc, #416	@ (adr r3, 8011fe0 <_dtoa_r+0x2b8>)
 8011e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e42:	f7ee fa4b 	bl	80002dc <__adddf3>
 8011e46:	4604      	mov	r4, r0
 8011e48:	4630      	mov	r0, r6
 8011e4a:	460d      	mov	r5, r1
 8011e4c:	f7ee fb92 	bl	8000574 <__aeabi_i2d>
 8011e50:	a365      	add	r3, pc, #404	@ (adr r3, 8011fe8 <_dtoa_r+0x2c0>)
 8011e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e56:	f7ee fbf7 	bl	8000648 <__aeabi_dmul>
 8011e5a:	4602      	mov	r2, r0
 8011e5c:	460b      	mov	r3, r1
 8011e5e:	4620      	mov	r0, r4
 8011e60:	4629      	mov	r1, r5
 8011e62:	f7ee fa3b 	bl	80002dc <__adddf3>
 8011e66:	4604      	mov	r4, r0
 8011e68:	460d      	mov	r5, r1
 8011e6a:	f7ee fe9d 	bl	8000ba8 <__aeabi_d2iz>
 8011e6e:	2200      	movs	r2, #0
 8011e70:	4607      	mov	r7, r0
 8011e72:	2300      	movs	r3, #0
 8011e74:	4620      	mov	r0, r4
 8011e76:	4629      	mov	r1, r5
 8011e78:	f7ee fe58 	bl	8000b2c <__aeabi_dcmplt>
 8011e7c:	b140      	cbz	r0, 8011e90 <_dtoa_r+0x168>
 8011e7e:	4638      	mov	r0, r7
 8011e80:	f7ee fb78 	bl	8000574 <__aeabi_i2d>
 8011e84:	4622      	mov	r2, r4
 8011e86:	462b      	mov	r3, r5
 8011e88:	f7ee fe46 	bl	8000b18 <__aeabi_dcmpeq>
 8011e8c:	b900      	cbnz	r0, 8011e90 <_dtoa_r+0x168>
 8011e8e:	3f01      	subs	r7, #1
 8011e90:	2f16      	cmp	r7, #22
 8011e92:	d851      	bhi.n	8011f38 <_dtoa_r+0x210>
 8011e94:	4b5b      	ldr	r3, [pc, #364]	@ (8012004 <_dtoa_r+0x2dc>)
 8011e96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011ea2:	f7ee fe43 	bl	8000b2c <__aeabi_dcmplt>
 8011ea6:	2800      	cmp	r0, #0
 8011ea8:	d048      	beq.n	8011f3c <_dtoa_r+0x214>
 8011eaa:	3f01      	subs	r7, #1
 8011eac:	2300      	movs	r3, #0
 8011eae:	9312      	str	r3, [sp, #72]	@ 0x48
 8011eb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011eb2:	1b9b      	subs	r3, r3, r6
 8011eb4:	1e5a      	subs	r2, r3, #1
 8011eb6:	bf44      	itt	mi
 8011eb8:	f1c3 0801 	rsbmi	r8, r3, #1
 8011ebc:	2300      	movmi	r3, #0
 8011ebe:	9208      	str	r2, [sp, #32]
 8011ec0:	bf54      	ite	pl
 8011ec2:	f04f 0800 	movpl.w	r8, #0
 8011ec6:	9308      	strmi	r3, [sp, #32]
 8011ec8:	2f00      	cmp	r7, #0
 8011eca:	db39      	blt.n	8011f40 <_dtoa_r+0x218>
 8011ecc:	9b08      	ldr	r3, [sp, #32]
 8011ece:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011ed0:	443b      	add	r3, r7
 8011ed2:	9308      	str	r3, [sp, #32]
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	930a      	str	r3, [sp, #40]	@ 0x28
 8011ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011eda:	2b09      	cmp	r3, #9
 8011edc:	d864      	bhi.n	8011fa8 <_dtoa_r+0x280>
 8011ede:	2b05      	cmp	r3, #5
 8011ee0:	bfc4      	itt	gt
 8011ee2:	3b04      	subgt	r3, #4
 8011ee4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ee8:	f1a3 0302 	sub.w	r3, r3, #2
 8011eec:	bfcc      	ite	gt
 8011eee:	2400      	movgt	r4, #0
 8011ef0:	2401      	movle	r4, #1
 8011ef2:	2b03      	cmp	r3, #3
 8011ef4:	d863      	bhi.n	8011fbe <_dtoa_r+0x296>
 8011ef6:	e8df f003 	tbb	[pc, r3]
 8011efa:	372a      	.short	0x372a
 8011efc:	5535      	.short	0x5535
 8011efe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011f02:	441e      	add	r6, r3
 8011f04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011f08:	2b20      	cmp	r3, #32
 8011f0a:	bfc1      	itttt	gt
 8011f0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011f10:	409f      	lslgt	r7, r3
 8011f12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011f16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011f1a:	bfd6      	itet	le
 8011f1c:	f1c3 0320 	rsble	r3, r3, #32
 8011f20:	ea47 0003 	orrgt.w	r0, r7, r3
 8011f24:	fa04 f003 	lslle.w	r0, r4, r3
 8011f28:	f7ee fb14 	bl	8000554 <__aeabi_ui2d>
 8011f2c:	2201      	movs	r2, #1
 8011f2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011f32:	3e01      	subs	r6, #1
 8011f34:	9214      	str	r2, [sp, #80]	@ 0x50
 8011f36:	e777      	b.n	8011e28 <_dtoa_r+0x100>
 8011f38:	2301      	movs	r3, #1
 8011f3a:	e7b8      	b.n	8011eae <_dtoa_r+0x186>
 8011f3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8011f3e:	e7b7      	b.n	8011eb0 <_dtoa_r+0x188>
 8011f40:	427b      	negs	r3, r7
 8011f42:	930a      	str	r3, [sp, #40]	@ 0x28
 8011f44:	2300      	movs	r3, #0
 8011f46:	eba8 0807 	sub.w	r8, r8, r7
 8011f4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011f4c:	e7c4      	b.n	8011ed8 <_dtoa_r+0x1b0>
 8011f4e:	2300      	movs	r3, #0
 8011f50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011f52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	dc35      	bgt.n	8011fc4 <_dtoa_r+0x29c>
 8011f58:	2301      	movs	r3, #1
 8011f5a:	9300      	str	r3, [sp, #0]
 8011f5c:	9307      	str	r3, [sp, #28]
 8011f5e:	461a      	mov	r2, r3
 8011f60:	920e      	str	r2, [sp, #56]	@ 0x38
 8011f62:	e00b      	b.n	8011f7c <_dtoa_r+0x254>
 8011f64:	2301      	movs	r3, #1
 8011f66:	e7f3      	b.n	8011f50 <_dtoa_r+0x228>
 8011f68:	2300      	movs	r3, #0
 8011f6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011f6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f6e:	18fb      	adds	r3, r7, r3
 8011f70:	9300      	str	r3, [sp, #0]
 8011f72:	3301      	adds	r3, #1
 8011f74:	2b01      	cmp	r3, #1
 8011f76:	9307      	str	r3, [sp, #28]
 8011f78:	bfb8      	it	lt
 8011f7a:	2301      	movlt	r3, #1
 8011f7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011f80:	2100      	movs	r1, #0
 8011f82:	2204      	movs	r2, #4
 8011f84:	f102 0514 	add.w	r5, r2, #20
 8011f88:	429d      	cmp	r5, r3
 8011f8a:	d91f      	bls.n	8011fcc <_dtoa_r+0x2a4>
 8011f8c:	6041      	str	r1, [r0, #4]
 8011f8e:	4658      	mov	r0, fp
 8011f90:	f000 fedc 	bl	8012d4c <_Balloc>
 8011f94:	4682      	mov	sl, r0
 8011f96:	2800      	cmp	r0, #0
 8011f98:	d13c      	bne.n	8012014 <_dtoa_r+0x2ec>
 8011f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8012008 <_dtoa_r+0x2e0>)
 8011f9c:	4602      	mov	r2, r0
 8011f9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8011fa2:	e6d8      	b.n	8011d56 <_dtoa_r+0x2e>
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	e7e0      	b.n	8011f6a <_dtoa_r+0x242>
 8011fa8:	2401      	movs	r4, #1
 8011faa:	2300      	movs	r3, #0
 8011fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011fb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011fb4:	9300      	str	r3, [sp, #0]
 8011fb6:	9307      	str	r3, [sp, #28]
 8011fb8:	2200      	movs	r2, #0
 8011fba:	2312      	movs	r3, #18
 8011fbc:	e7d0      	b.n	8011f60 <_dtoa_r+0x238>
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011fc2:	e7f5      	b.n	8011fb0 <_dtoa_r+0x288>
 8011fc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011fc6:	9300      	str	r3, [sp, #0]
 8011fc8:	9307      	str	r3, [sp, #28]
 8011fca:	e7d7      	b.n	8011f7c <_dtoa_r+0x254>
 8011fcc:	3101      	adds	r1, #1
 8011fce:	0052      	lsls	r2, r2, #1
 8011fd0:	e7d8      	b.n	8011f84 <_dtoa_r+0x25c>
 8011fd2:	bf00      	nop
 8011fd4:	f3af 8000 	nop.w
 8011fd8:	636f4361 	.word	0x636f4361
 8011fdc:	3fd287a7 	.word	0x3fd287a7
 8011fe0:	8b60c8b3 	.word	0x8b60c8b3
 8011fe4:	3fc68a28 	.word	0x3fc68a28
 8011fe8:	509f79fb 	.word	0x509f79fb
 8011fec:	3fd34413 	.word	0x3fd34413
 8011ff0:	08013df8 	.word	0x08013df8
 8011ff4:	08013fb1 	.word	0x08013fb1
 8011ff8:	7ff00000 	.word	0x7ff00000
 8011ffc:	08013dd5 	.word	0x08013dd5
 8012000:	3ff80000 	.word	0x3ff80000
 8012004:	080140b8 	.word	0x080140b8
 8012008:	08014009 	.word	0x08014009
 801200c:	08013fad 	.word	0x08013fad
 8012010:	08013dd4 	.word	0x08013dd4
 8012014:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012018:	6018      	str	r0, [r3, #0]
 801201a:	9b07      	ldr	r3, [sp, #28]
 801201c:	2b0e      	cmp	r3, #14
 801201e:	f200 80a4 	bhi.w	801216a <_dtoa_r+0x442>
 8012022:	2c00      	cmp	r4, #0
 8012024:	f000 80a1 	beq.w	801216a <_dtoa_r+0x442>
 8012028:	2f00      	cmp	r7, #0
 801202a:	dd33      	ble.n	8012094 <_dtoa_r+0x36c>
 801202c:	4bad      	ldr	r3, [pc, #692]	@ (80122e4 <_dtoa_r+0x5bc>)
 801202e:	f007 020f 	and.w	r2, r7, #15
 8012032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012036:	ed93 7b00 	vldr	d7, [r3]
 801203a:	05f8      	lsls	r0, r7, #23
 801203c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012040:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012044:	d516      	bpl.n	8012074 <_dtoa_r+0x34c>
 8012046:	4ba8      	ldr	r3, [pc, #672]	@ (80122e8 <_dtoa_r+0x5c0>)
 8012048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801204c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012050:	f7ee fc24 	bl	800089c <__aeabi_ddiv>
 8012054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012058:	f004 040f 	and.w	r4, r4, #15
 801205c:	2603      	movs	r6, #3
 801205e:	4da2      	ldr	r5, [pc, #648]	@ (80122e8 <_dtoa_r+0x5c0>)
 8012060:	b954      	cbnz	r4, 8012078 <_dtoa_r+0x350>
 8012062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801206a:	f7ee fc17 	bl	800089c <__aeabi_ddiv>
 801206e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012072:	e028      	b.n	80120c6 <_dtoa_r+0x39e>
 8012074:	2602      	movs	r6, #2
 8012076:	e7f2      	b.n	801205e <_dtoa_r+0x336>
 8012078:	07e1      	lsls	r1, r4, #31
 801207a:	d508      	bpl.n	801208e <_dtoa_r+0x366>
 801207c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012080:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012084:	f7ee fae0 	bl	8000648 <__aeabi_dmul>
 8012088:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801208c:	3601      	adds	r6, #1
 801208e:	1064      	asrs	r4, r4, #1
 8012090:	3508      	adds	r5, #8
 8012092:	e7e5      	b.n	8012060 <_dtoa_r+0x338>
 8012094:	f000 80d2 	beq.w	801223c <_dtoa_r+0x514>
 8012098:	427c      	negs	r4, r7
 801209a:	4b92      	ldr	r3, [pc, #584]	@ (80122e4 <_dtoa_r+0x5bc>)
 801209c:	4d92      	ldr	r5, [pc, #584]	@ (80122e8 <_dtoa_r+0x5c0>)
 801209e:	f004 020f 	and.w	r2, r4, #15
 80120a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80120a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80120ae:	f7ee facb 	bl	8000648 <__aeabi_dmul>
 80120b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80120b6:	1124      	asrs	r4, r4, #4
 80120b8:	2300      	movs	r3, #0
 80120ba:	2602      	movs	r6, #2
 80120bc:	2c00      	cmp	r4, #0
 80120be:	f040 80b2 	bne.w	8012226 <_dtoa_r+0x4fe>
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d1d3      	bne.n	801206e <_dtoa_r+0x346>
 80120c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80120c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	f000 80b7 	beq.w	8012240 <_dtoa_r+0x518>
 80120d2:	4b86      	ldr	r3, [pc, #536]	@ (80122ec <_dtoa_r+0x5c4>)
 80120d4:	2200      	movs	r2, #0
 80120d6:	4620      	mov	r0, r4
 80120d8:	4629      	mov	r1, r5
 80120da:	f7ee fd27 	bl	8000b2c <__aeabi_dcmplt>
 80120de:	2800      	cmp	r0, #0
 80120e0:	f000 80ae 	beq.w	8012240 <_dtoa_r+0x518>
 80120e4:	9b07      	ldr	r3, [sp, #28]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	f000 80aa 	beq.w	8012240 <_dtoa_r+0x518>
 80120ec:	9b00      	ldr	r3, [sp, #0]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	dd37      	ble.n	8012162 <_dtoa_r+0x43a>
 80120f2:	1e7b      	subs	r3, r7, #1
 80120f4:	9304      	str	r3, [sp, #16]
 80120f6:	4620      	mov	r0, r4
 80120f8:	4b7d      	ldr	r3, [pc, #500]	@ (80122f0 <_dtoa_r+0x5c8>)
 80120fa:	2200      	movs	r2, #0
 80120fc:	4629      	mov	r1, r5
 80120fe:	f7ee faa3 	bl	8000648 <__aeabi_dmul>
 8012102:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012106:	9c00      	ldr	r4, [sp, #0]
 8012108:	3601      	adds	r6, #1
 801210a:	4630      	mov	r0, r6
 801210c:	f7ee fa32 	bl	8000574 <__aeabi_i2d>
 8012110:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012114:	f7ee fa98 	bl	8000648 <__aeabi_dmul>
 8012118:	4b76      	ldr	r3, [pc, #472]	@ (80122f4 <_dtoa_r+0x5cc>)
 801211a:	2200      	movs	r2, #0
 801211c:	f7ee f8de 	bl	80002dc <__adddf3>
 8012120:	4605      	mov	r5, r0
 8012122:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012126:	2c00      	cmp	r4, #0
 8012128:	f040 808d 	bne.w	8012246 <_dtoa_r+0x51e>
 801212c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012130:	4b71      	ldr	r3, [pc, #452]	@ (80122f8 <_dtoa_r+0x5d0>)
 8012132:	2200      	movs	r2, #0
 8012134:	f7ee f8d0 	bl	80002d8 <__aeabi_dsub>
 8012138:	4602      	mov	r2, r0
 801213a:	460b      	mov	r3, r1
 801213c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012140:	462a      	mov	r2, r5
 8012142:	4633      	mov	r3, r6
 8012144:	f7ee fd10 	bl	8000b68 <__aeabi_dcmpgt>
 8012148:	2800      	cmp	r0, #0
 801214a:	f040 828b 	bne.w	8012664 <_dtoa_r+0x93c>
 801214e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012152:	462a      	mov	r2, r5
 8012154:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012158:	f7ee fce8 	bl	8000b2c <__aeabi_dcmplt>
 801215c:	2800      	cmp	r0, #0
 801215e:	f040 8128 	bne.w	80123b2 <_dtoa_r+0x68a>
 8012162:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012166:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801216a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801216c:	2b00      	cmp	r3, #0
 801216e:	f2c0 815a 	blt.w	8012426 <_dtoa_r+0x6fe>
 8012172:	2f0e      	cmp	r7, #14
 8012174:	f300 8157 	bgt.w	8012426 <_dtoa_r+0x6fe>
 8012178:	4b5a      	ldr	r3, [pc, #360]	@ (80122e4 <_dtoa_r+0x5bc>)
 801217a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801217e:	ed93 7b00 	vldr	d7, [r3]
 8012182:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012184:	2b00      	cmp	r3, #0
 8012186:	ed8d 7b00 	vstr	d7, [sp]
 801218a:	da03      	bge.n	8012194 <_dtoa_r+0x46c>
 801218c:	9b07      	ldr	r3, [sp, #28]
 801218e:	2b00      	cmp	r3, #0
 8012190:	f340 8101 	ble.w	8012396 <_dtoa_r+0x66e>
 8012194:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012198:	4656      	mov	r6, sl
 801219a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801219e:	4620      	mov	r0, r4
 80121a0:	4629      	mov	r1, r5
 80121a2:	f7ee fb7b 	bl	800089c <__aeabi_ddiv>
 80121a6:	f7ee fcff 	bl	8000ba8 <__aeabi_d2iz>
 80121aa:	4680      	mov	r8, r0
 80121ac:	f7ee f9e2 	bl	8000574 <__aeabi_i2d>
 80121b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80121b4:	f7ee fa48 	bl	8000648 <__aeabi_dmul>
 80121b8:	4602      	mov	r2, r0
 80121ba:	460b      	mov	r3, r1
 80121bc:	4620      	mov	r0, r4
 80121be:	4629      	mov	r1, r5
 80121c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80121c4:	f7ee f888 	bl	80002d8 <__aeabi_dsub>
 80121c8:	f806 4b01 	strb.w	r4, [r6], #1
 80121cc:	9d07      	ldr	r5, [sp, #28]
 80121ce:	eba6 040a 	sub.w	r4, r6, sl
 80121d2:	42a5      	cmp	r5, r4
 80121d4:	4602      	mov	r2, r0
 80121d6:	460b      	mov	r3, r1
 80121d8:	f040 8117 	bne.w	801240a <_dtoa_r+0x6e2>
 80121dc:	f7ee f87e 	bl	80002dc <__adddf3>
 80121e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80121e4:	4604      	mov	r4, r0
 80121e6:	460d      	mov	r5, r1
 80121e8:	f7ee fcbe 	bl	8000b68 <__aeabi_dcmpgt>
 80121ec:	2800      	cmp	r0, #0
 80121ee:	f040 80f9 	bne.w	80123e4 <_dtoa_r+0x6bc>
 80121f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80121f6:	4620      	mov	r0, r4
 80121f8:	4629      	mov	r1, r5
 80121fa:	f7ee fc8d 	bl	8000b18 <__aeabi_dcmpeq>
 80121fe:	b118      	cbz	r0, 8012208 <_dtoa_r+0x4e0>
 8012200:	f018 0f01 	tst.w	r8, #1
 8012204:	f040 80ee 	bne.w	80123e4 <_dtoa_r+0x6bc>
 8012208:	4649      	mov	r1, r9
 801220a:	4658      	mov	r0, fp
 801220c:	f000 fdde 	bl	8012dcc <_Bfree>
 8012210:	2300      	movs	r3, #0
 8012212:	7033      	strb	r3, [r6, #0]
 8012214:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012216:	3701      	adds	r7, #1
 8012218:	601f      	str	r7, [r3, #0]
 801221a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801221c:	2b00      	cmp	r3, #0
 801221e:	f000 831d 	beq.w	801285c <_dtoa_r+0xb34>
 8012222:	601e      	str	r6, [r3, #0]
 8012224:	e31a      	b.n	801285c <_dtoa_r+0xb34>
 8012226:	07e2      	lsls	r2, r4, #31
 8012228:	d505      	bpl.n	8012236 <_dtoa_r+0x50e>
 801222a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801222e:	f7ee fa0b 	bl	8000648 <__aeabi_dmul>
 8012232:	3601      	adds	r6, #1
 8012234:	2301      	movs	r3, #1
 8012236:	1064      	asrs	r4, r4, #1
 8012238:	3508      	adds	r5, #8
 801223a:	e73f      	b.n	80120bc <_dtoa_r+0x394>
 801223c:	2602      	movs	r6, #2
 801223e:	e742      	b.n	80120c6 <_dtoa_r+0x39e>
 8012240:	9c07      	ldr	r4, [sp, #28]
 8012242:	9704      	str	r7, [sp, #16]
 8012244:	e761      	b.n	801210a <_dtoa_r+0x3e2>
 8012246:	4b27      	ldr	r3, [pc, #156]	@ (80122e4 <_dtoa_r+0x5bc>)
 8012248:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801224a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801224e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012252:	4454      	add	r4, sl
 8012254:	2900      	cmp	r1, #0
 8012256:	d053      	beq.n	8012300 <_dtoa_r+0x5d8>
 8012258:	4928      	ldr	r1, [pc, #160]	@ (80122fc <_dtoa_r+0x5d4>)
 801225a:	2000      	movs	r0, #0
 801225c:	f7ee fb1e 	bl	800089c <__aeabi_ddiv>
 8012260:	4633      	mov	r3, r6
 8012262:	462a      	mov	r2, r5
 8012264:	f7ee f838 	bl	80002d8 <__aeabi_dsub>
 8012268:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801226c:	4656      	mov	r6, sl
 801226e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012272:	f7ee fc99 	bl	8000ba8 <__aeabi_d2iz>
 8012276:	4605      	mov	r5, r0
 8012278:	f7ee f97c 	bl	8000574 <__aeabi_i2d>
 801227c:	4602      	mov	r2, r0
 801227e:	460b      	mov	r3, r1
 8012280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012284:	f7ee f828 	bl	80002d8 <__aeabi_dsub>
 8012288:	3530      	adds	r5, #48	@ 0x30
 801228a:	4602      	mov	r2, r0
 801228c:	460b      	mov	r3, r1
 801228e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012292:	f806 5b01 	strb.w	r5, [r6], #1
 8012296:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801229a:	f7ee fc47 	bl	8000b2c <__aeabi_dcmplt>
 801229e:	2800      	cmp	r0, #0
 80122a0:	d171      	bne.n	8012386 <_dtoa_r+0x65e>
 80122a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80122a6:	4911      	ldr	r1, [pc, #68]	@ (80122ec <_dtoa_r+0x5c4>)
 80122a8:	2000      	movs	r0, #0
 80122aa:	f7ee f815 	bl	80002d8 <__aeabi_dsub>
 80122ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80122b2:	f7ee fc3b 	bl	8000b2c <__aeabi_dcmplt>
 80122b6:	2800      	cmp	r0, #0
 80122b8:	f040 8095 	bne.w	80123e6 <_dtoa_r+0x6be>
 80122bc:	42a6      	cmp	r6, r4
 80122be:	f43f af50 	beq.w	8012162 <_dtoa_r+0x43a>
 80122c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80122c6:	4b0a      	ldr	r3, [pc, #40]	@ (80122f0 <_dtoa_r+0x5c8>)
 80122c8:	2200      	movs	r2, #0
 80122ca:	f7ee f9bd 	bl	8000648 <__aeabi_dmul>
 80122ce:	4b08      	ldr	r3, [pc, #32]	@ (80122f0 <_dtoa_r+0x5c8>)
 80122d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80122d4:	2200      	movs	r2, #0
 80122d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80122da:	f7ee f9b5 	bl	8000648 <__aeabi_dmul>
 80122de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122e2:	e7c4      	b.n	801226e <_dtoa_r+0x546>
 80122e4:	080140b8 	.word	0x080140b8
 80122e8:	08014090 	.word	0x08014090
 80122ec:	3ff00000 	.word	0x3ff00000
 80122f0:	40240000 	.word	0x40240000
 80122f4:	401c0000 	.word	0x401c0000
 80122f8:	40140000 	.word	0x40140000
 80122fc:	3fe00000 	.word	0x3fe00000
 8012300:	4631      	mov	r1, r6
 8012302:	4628      	mov	r0, r5
 8012304:	f7ee f9a0 	bl	8000648 <__aeabi_dmul>
 8012308:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801230c:	9415      	str	r4, [sp, #84]	@ 0x54
 801230e:	4656      	mov	r6, sl
 8012310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012314:	f7ee fc48 	bl	8000ba8 <__aeabi_d2iz>
 8012318:	4605      	mov	r5, r0
 801231a:	f7ee f92b 	bl	8000574 <__aeabi_i2d>
 801231e:	4602      	mov	r2, r0
 8012320:	460b      	mov	r3, r1
 8012322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012326:	f7ed ffd7 	bl	80002d8 <__aeabi_dsub>
 801232a:	3530      	adds	r5, #48	@ 0x30
 801232c:	f806 5b01 	strb.w	r5, [r6], #1
 8012330:	4602      	mov	r2, r0
 8012332:	460b      	mov	r3, r1
 8012334:	42a6      	cmp	r6, r4
 8012336:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801233a:	f04f 0200 	mov.w	r2, #0
 801233e:	d124      	bne.n	801238a <_dtoa_r+0x662>
 8012340:	4bac      	ldr	r3, [pc, #688]	@ (80125f4 <_dtoa_r+0x8cc>)
 8012342:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012346:	f7ed ffc9 	bl	80002dc <__adddf3>
 801234a:	4602      	mov	r2, r0
 801234c:	460b      	mov	r3, r1
 801234e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012352:	f7ee fc09 	bl	8000b68 <__aeabi_dcmpgt>
 8012356:	2800      	cmp	r0, #0
 8012358:	d145      	bne.n	80123e6 <_dtoa_r+0x6be>
 801235a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801235e:	49a5      	ldr	r1, [pc, #660]	@ (80125f4 <_dtoa_r+0x8cc>)
 8012360:	2000      	movs	r0, #0
 8012362:	f7ed ffb9 	bl	80002d8 <__aeabi_dsub>
 8012366:	4602      	mov	r2, r0
 8012368:	460b      	mov	r3, r1
 801236a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801236e:	f7ee fbdd 	bl	8000b2c <__aeabi_dcmplt>
 8012372:	2800      	cmp	r0, #0
 8012374:	f43f aef5 	beq.w	8012162 <_dtoa_r+0x43a>
 8012378:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801237a:	1e73      	subs	r3, r6, #1
 801237c:	9315      	str	r3, [sp, #84]	@ 0x54
 801237e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012382:	2b30      	cmp	r3, #48	@ 0x30
 8012384:	d0f8      	beq.n	8012378 <_dtoa_r+0x650>
 8012386:	9f04      	ldr	r7, [sp, #16]
 8012388:	e73e      	b.n	8012208 <_dtoa_r+0x4e0>
 801238a:	4b9b      	ldr	r3, [pc, #620]	@ (80125f8 <_dtoa_r+0x8d0>)
 801238c:	f7ee f95c 	bl	8000648 <__aeabi_dmul>
 8012390:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012394:	e7bc      	b.n	8012310 <_dtoa_r+0x5e8>
 8012396:	d10c      	bne.n	80123b2 <_dtoa_r+0x68a>
 8012398:	4b98      	ldr	r3, [pc, #608]	@ (80125fc <_dtoa_r+0x8d4>)
 801239a:	2200      	movs	r2, #0
 801239c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80123a0:	f7ee f952 	bl	8000648 <__aeabi_dmul>
 80123a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80123a8:	f7ee fbd4 	bl	8000b54 <__aeabi_dcmpge>
 80123ac:	2800      	cmp	r0, #0
 80123ae:	f000 8157 	beq.w	8012660 <_dtoa_r+0x938>
 80123b2:	2400      	movs	r4, #0
 80123b4:	4625      	mov	r5, r4
 80123b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123b8:	43db      	mvns	r3, r3
 80123ba:	9304      	str	r3, [sp, #16]
 80123bc:	4656      	mov	r6, sl
 80123be:	2700      	movs	r7, #0
 80123c0:	4621      	mov	r1, r4
 80123c2:	4658      	mov	r0, fp
 80123c4:	f000 fd02 	bl	8012dcc <_Bfree>
 80123c8:	2d00      	cmp	r5, #0
 80123ca:	d0dc      	beq.n	8012386 <_dtoa_r+0x65e>
 80123cc:	b12f      	cbz	r7, 80123da <_dtoa_r+0x6b2>
 80123ce:	42af      	cmp	r7, r5
 80123d0:	d003      	beq.n	80123da <_dtoa_r+0x6b2>
 80123d2:	4639      	mov	r1, r7
 80123d4:	4658      	mov	r0, fp
 80123d6:	f000 fcf9 	bl	8012dcc <_Bfree>
 80123da:	4629      	mov	r1, r5
 80123dc:	4658      	mov	r0, fp
 80123de:	f000 fcf5 	bl	8012dcc <_Bfree>
 80123e2:	e7d0      	b.n	8012386 <_dtoa_r+0x65e>
 80123e4:	9704      	str	r7, [sp, #16]
 80123e6:	4633      	mov	r3, r6
 80123e8:	461e      	mov	r6, r3
 80123ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80123ee:	2a39      	cmp	r2, #57	@ 0x39
 80123f0:	d107      	bne.n	8012402 <_dtoa_r+0x6da>
 80123f2:	459a      	cmp	sl, r3
 80123f4:	d1f8      	bne.n	80123e8 <_dtoa_r+0x6c0>
 80123f6:	9a04      	ldr	r2, [sp, #16]
 80123f8:	3201      	adds	r2, #1
 80123fa:	9204      	str	r2, [sp, #16]
 80123fc:	2230      	movs	r2, #48	@ 0x30
 80123fe:	f88a 2000 	strb.w	r2, [sl]
 8012402:	781a      	ldrb	r2, [r3, #0]
 8012404:	3201      	adds	r2, #1
 8012406:	701a      	strb	r2, [r3, #0]
 8012408:	e7bd      	b.n	8012386 <_dtoa_r+0x65e>
 801240a:	4b7b      	ldr	r3, [pc, #492]	@ (80125f8 <_dtoa_r+0x8d0>)
 801240c:	2200      	movs	r2, #0
 801240e:	f7ee f91b 	bl	8000648 <__aeabi_dmul>
 8012412:	2200      	movs	r2, #0
 8012414:	2300      	movs	r3, #0
 8012416:	4604      	mov	r4, r0
 8012418:	460d      	mov	r5, r1
 801241a:	f7ee fb7d 	bl	8000b18 <__aeabi_dcmpeq>
 801241e:	2800      	cmp	r0, #0
 8012420:	f43f aebb 	beq.w	801219a <_dtoa_r+0x472>
 8012424:	e6f0      	b.n	8012208 <_dtoa_r+0x4e0>
 8012426:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012428:	2a00      	cmp	r2, #0
 801242a:	f000 80db 	beq.w	80125e4 <_dtoa_r+0x8bc>
 801242e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012430:	2a01      	cmp	r2, #1
 8012432:	f300 80bf 	bgt.w	80125b4 <_dtoa_r+0x88c>
 8012436:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012438:	2a00      	cmp	r2, #0
 801243a:	f000 80b7 	beq.w	80125ac <_dtoa_r+0x884>
 801243e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012442:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012444:	4646      	mov	r6, r8
 8012446:	9a08      	ldr	r2, [sp, #32]
 8012448:	2101      	movs	r1, #1
 801244a:	441a      	add	r2, r3
 801244c:	4658      	mov	r0, fp
 801244e:	4498      	add	r8, r3
 8012450:	9208      	str	r2, [sp, #32]
 8012452:	f000 fd6f 	bl	8012f34 <__i2b>
 8012456:	4605      	mov	r5, r0
 8012458:	b15e      	cbz	r6, 8012472 <_dtoa_r+0x74a>
 801245a:	9b08      	ldr	r3, [sp, #32]
 801245c:	2b00      	cmp	r3, #0
 801245e:	dd08      	ble.n	8012472 <_dtoa_r+0x74a>
 8012460:	42b3      	cmp	r3, r6
 8012462:	9a08      	ldr	r2, [sp, #32]
 8012464:	bfa8      	it	ge
 8012466:	4633      	movge	r3, r6
 8012468:	eba8 0803 	sub.w	r8, r8, r3
 801246c:	1af6      	subs	r6, r6, r3
 801246e:	1ad3      	subs	r3, r2, r3
 8012470:	9308      	str	r3, [sp, #32]
 8012472:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012474:	b1f3      	cbz	r3, 80124b4 <_dtoa_r+0x78c>
 8012476:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012478:	2b00      	cmp	r3, #0
 801247a:	f000 80b7 	beq.w	80125ec <_dtoa_r+0x8c4>
 801247e:	b18c      	cbz	r4, 80124a4 <_dtoa_r+0x77c>
 8012480:	4629      	mov	r1, r5
 8012482:	4622      	mov	r2, r4
 8012484:	4658      	mov	r0, fp
 8012486:	f000 fe15 	bl	80130b4 <__pow5mult>
 801248a:	464a      	mov	r2, r9
 801248c:	4601      	mov	r1, r0
 801248e:	4605      	mov	r5, r0
 8012490:	4658      	mov	r0, fp
 8012492:	f000 fd65 	bl	8012f60 <__multiply>
 8012496:	4649      	mov	r1, r9
 8012498:	9004      	str	r0, [sp, #16]
 801249a:	4658      	mov	r0, fp
 801249c:	f000 fc96 	bl	8012dcc <_Bfree>
 80124a0:	9b04      	ldr	r3, [sp, #16]
 80124a2:	4699      	mov	r9, r3
 80124a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80124a6:	1b1a      	subs	r2, r3, r4
 80124a8:	d004      	beq.n	80124b4 <_dtoa_r+0x78c>
 80124aa:	4649      	mov	r1, r9
 80124ac:	4658      	mov	r0, fp
 80124ae:	f000 fe01 	bl	80130b4 <__pow5mult>
 80124b2:	4681      	mov	r9, r0
 80124b4:	2101      	movs	r1, #1
 80124b6:	4658      	mov	r0, fp
 80124b8:	f000 fd3c 	bl	8012f34 <__i2b>
 80124bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80124be:	4604      	mov	r4, r0
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	f000 81cf 	beq.w	8012864 <_dtoa_r+0xb3c>
 80124c6:	461a      	mov	r2, r3
 80124c8:	4601      	mov	r1, r0
 80124ca:	4658      	mov	r0, fp
 80124cc:	f000 fdf2 	bl	80130b4 <__pow5mult>
 80124d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124d2:	2b01      	cmp	r3, #1
 80124d4:	4604      	mov	r4, r0
 80124d6:	f300 8095 	bgt.w	8012604 <_dtoa_r+0x8dc>
 80124da:	9b02      	ldr	r3, [sp, #8]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	f040 8087 	bne.w	80125f0 <_dtoa_r+0x8c8>
 80124e2:	9b03      	ldr	r3, [sp, #12]
 80124e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	f040 8089 	bne.w	8012600 <_dtoa_r+0x8d8>
 80124ee:	9b03      	ldr	r3, [sp, #12]
 80124f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80124f4:	0d1b      	lsrs	r3, r3, #20
 80124f6:	051b      	lsls	r3, r3, #20
 80124f8:	b12b      	cbz	r3, 8012506 <_dtoa_r+0x7de>
 80124fa:	9b08      	ldr	r3, [sp, #32]
 80124fc:	3301      	adds	r3, #1
 80124fe:	9308      	str	r3, [sp, #32]
 8012500:	f108 0801 	add.w	r8, r8, #1
 8012504:	2301      	movs	r3, #1
 8012506:	930a      	str	r3, [sp, #40]	@ 0x28
 8012508:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801250a:	2b00      	cmp	r3, #0
 801250c:	f000 81b0 	beq.w	8012870 <_dtoa_r+0xb48>
 8012510:	6923      	ldr	r3, [r4, #16]
 8012512:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012516:	6918      	ldr	r0, [r3, #16]
 8012518:	f000 fcc0 	bl	8012e9c <__hi0bits>
 801251c:	f1c0 0020 	rsb	r0, r0, #32
 8012520:	9b08      	ldr	r3, [sp, #32]
 8012522:	4418      	add	r0, r3
 8012524:	f010 001f 	ands.w	r0, r0, #31
 8012528:	d077      	beq.n	801261a <_dtoa_r+0x8f2>
 801252a:	f1c0 0320 	rsb	r3, r0, #32
 801252e:	2b04      	cmp	r3, #4
 8012530:	dd6b      	ble.n	801260a <_dtoa_r+0x8e2>
 8012532:	9b08      	ldr	r3, [sp, #32]
 8012534:	f1c0 001c 	rsb	r0, r0, #28
 8012538:	4403      	add	r3, r0
 801253a:	4480      	add	r8, r0
 801253c:	4406      	add	r6, r0
 801253e:	9308      	str	r3, [sp, #32]
 8012540:	f1b8 0f00 	cmp.w	r8, #0
 8012544:	dd05      	ble.n	8012552 <_dtoa_r+0x82a>
 8012546:	4649      	mov	r1, r9
 8012548:	4642      	mov	r2, r8
 801254a:	4658      	mov	r0, fp
 801254c:	f000 fe0c 	bl	8013168 <__lshift>
 8012550:	4681      	mov	r9, r0
 8012552:	9b08      	ldr	r3, [sp, #32]
 8012554:	2b00      	cmp	r3, #0
 8012556:	dd05      	ble.n	8012564 <_dtoa_r+0x83c>
 8012558:	4621      	mov	r1, r4
 801255a:	461a      	mov	r2, r3
 801255c:	4658      	mov	r0, fp
 801255e:	f000 fe03 	bl	8013168 <__lshift>
 8012562:	4604      	mov	r4, r0
 8012564:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012566:	2b00      	cmp	r3, #0
 8012568:	d059      	beq.n	801261e <_dtoa_r+0x8f6>
 801256a:	4621      	mov	r1, r4
 801256c:	4648      	mov	r0, r9
 801256e:	f000 fe67 	bl	8013240 <__mcmp>
 8012572:	2800      	cmp	r0, #0
 8012574:	da53      	bge.n	801261e <_dtoa_r+0x8f6>
 8012576:	1e7b      	subs	r3, r7, #1
 8012578:	9304      	str	r3, [sp, #16]
 801257a:	4649      	mov	r1, r9
 801257c:	2300      	movs	r3, #0
 801257e:	220a      	movs	r2, #10
 8012580:	4658      	mov	r0, fp
 8012582:	f000 fc45 	bl	8012e10 <__multadd>
 8012586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012588:	4681      	mov	r9, r0
 801258a:	2b00      	cmp	r3, #0
 801258c:	f000 8172 	beq.w	8012874 <_dtoa_r+0xb4c>
 8012590:	2300      	movs	r3, #0
 8012592:	4629      	mov	r1, r5
 8012594:	220a      	movs	r2, #10
 8012596:	4658      	mov	r0, fp
 8012598:	f000 fc3a 	bl	8012e10 <__multadd>
 801259c:	9b00      	ldr	r3, [sp, #0]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	4605      	mov	r5, r0
 80125a2:	dc67      	bgt.n	8012674 <_dtoa_r+0x94c>
 80125a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125a6:	2b02      	cmp	r3, #2
 80125a8:	dc41      	bgt.n	801262e <_dtoa_r+0x906>
 80125aa:	e063      	b.n	8012674 <_dtoa_r+0x94c>
 80125ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80125ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80125b2:	e746      	b.n	8012442 <_dtoa_r+0x71a>
 80125b4:	9b07      	ldr	r3, [sp, #28]
 80125b6:	1e5c      	subs	r4, r3, #1
 80125b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80125ba:	42a3      	cmp	r3, r4
 80125bc:	bfbf      	itttt	lt
 80125be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80125c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80125c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80125c4:	1ae3      	sublt	r3, r4, r3
 80125c6:	bfb4      	ite	lt
 80125c8:	18d2      	addlt	r2, r2, r3
 80125ca:	1b1c      	subge	r4, r3, r4
 80125cc:	9b07      	ldr	r3, [sp, #28]
 80125ce:	bfbc      	itt	lt
 80125d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80125d2:	2400      	movlt	r4, #0
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	bfb5      	itete	lt
 80125d8:	eba8 0603 	sublt.w	r6, r8, r3
 80125dc:	9b07      	ldrge	r3, [sp, #28]
 80125de:	2300      	movlt	r3, #0
 80125e0:	4646      	movge	r6, r8
 80125e2:	e730      	b.n	8012446 <_dtoa_r+0x71e>
 80125e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80125e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80125e8:	4646      	mov	r6, r8
 80125ea:	e735      	b.n	8012458 <_dtoa_r+0x730>
 80125ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80125ee:	e75c      	b.n	80124aa <_dtoa_r+0x782>
 80125f0:	2300      	movs	r3, #0
 80125f2:	e788      	b.n	8012506 <_dtoa_r+0x7de>
 80125f4:	3fe00000 	.word	0x3fe00000
 80125f8:	40240000 	.word	0x40240000
 80125fc:	40140000 	.word	0x40140000
 8012600:	9b02      	ldr	r3, [sp, #8]
 8012602:	e780      	b.n	8012506 <_dtoa_r+0x7de>
 8012604:	2300      	movs	r3, #0
 8012606:	930a      	str	r3, [sp, #40]	@ 0x28
 8012608:	e782      	b.n	8012510 <_dtoa_r+0x7e8>
 801260a:	d099      	beq.n	8012540 <_dtoa_r+0x818>
 801260c:	9a08      	ldr	r2, [sp, #32]
 801260e:	331c      	adds	r3, #28
 8012610:	441a      	add	r2, r3
 8012612:	4498      	add	r8, r3
 8012614:	441e      	add	r6, r3
 8012616:	9208      	str	r2, [sp, #32]
 8012618:	e792      	b.n	8012540 <_dtoa_r+0x818>
 801261a:	4603      	mov	r3, r0
 801261c:	e7f6      	b.n	801260c <_dtoa_r+0x8e4>
 801261e:	9b07      	ldr	r3, [sp, #28]
 8012620:	9704      	str	r7, [sp, #16]
 8012622:	2b00      	cmp	r3, #0
 8012624:	dc20      	bgt.n	8012668 <_dtoa_r+0x940>
 8012626:	9300      	str	r3, [sp, #0]
 8012628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801262a:	2b02      	cmp	r3, #2
 801262c:	dd1e      	ble.n	801266c <_dtoa_r+0x944>
 801262e:	9b00      	ldr	r3, [sp, #0]
 8012630:	2b00      	cmp	r3, #0
 8012632:	f47f aec0 	bne.w	80123b6 <_dtoa_r+0x68e>
 8012636:	4621      	mov	r1, r4
 8012638:	2205      	movs	r2, #5
 801263a:	4658      	mov	r0, fp
 801263c:	f000 fbe8 	bl	8012e10 <__multadd>
 8012640:	4601      	mov	r1, r0
 8012642:	4604      	mov	r4, r0
 8012644:	4648      	mov	r0, r9
 8012646:	f000 fdfb 	bl	8013240 <__mcmp>
 801264a:	2800      	cmp	r0, #0
 801264c:	f77f aeb3 	ble.w	80123b6 <_dtoa_r+0x68e>
 8012650:	4656      	mov	r6, sl
 8012652:	2331      	movs	r3, #49	@ 0x31
 8012654:	f806 3b01 	strb.w	r3, [r6], #1
 8012658:	9b04      	ldr	r3, [sp, #16]
 801265a:	3301      	adds	r3, #1
 801265c:	9304      	str	r3, [sp, #16]
 801265e:	e6ae      	b.n	80123be <_dtoa_r+0x696>
 8012660:	9c07      	ldr	r4, [sp, #28]
 8012662:	9704      	str	r7, [sp, #16]
 8012664:	4625      	mov	r5, r4
 8012666:	e7f3      	b.n	8012650 <_dtoa_r+0x928>
 8012668:	9b07      	ldr	r3, [sp, #28]
 801266a:	9300      	str	r3, [sp, #0]
 801266c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801266e:	2b00      	cmp	r3, #0
 8012670:	f000 8104 	beq.w	801287c <_dtoa_r+0xb54>
 8012674:	2e00      	cmp	r6, #0
 8012676:	dd05      	ble.n	8012684 <_dtoa_r+0x95c>
 8012678:	4629      	mov	r1, r5
 801267a:	4632      	mov	r2, r6
 801267c:	4658      	mov	r0, fp
 801267e:	f000 fd73 	bl	8013168 <__lshift>
 8012682:	4605      	mov	r5, r0
 8012684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012686:	2b00      	cmp	r3, #0
 8012688:	d05a      	beq.n	8012740 <_dtoa_r+0xa18>
 801268a:	6869      	ldr	r1, [r5, #4]
 801268c:	4658      	mov	r0, fp
 801268e:	f000 fb5d 	bl	8012d4c <_Balloc>
 8012692:	4606      	mov	r6, r0
 8012694:	b928      	cbnz	r0, 80126a2 <_dtoa_r+0x97a>
 8012696:	4b84      	ldr	r3, [pc, #528]	@ (80128a8 <_dtoa_r+0xb80>)
 8012698:	4602      	mov	r2, r0
 801269a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801269e:	f7ff bb5a 	b.w	8011d56 <_dtoa_r+0x2e>
 80126a2:	692a      	ldr	r2, [r5, #16]
 80126a4:	3202      	adds	r2, #2
 80126a6:	0092      	lsls	r2, r2, #2
 80126a8:	f105 010c 	add.w	r1, r5, #12
 80126ac:	300c      	adds	r0, #12
 80126ae:	f7ff fa85 	bl	8011bbc <memcpy>
 80126b2:	2201      	movs	r2, #1
 80126b4:	4631      	mov	r1, r6
 80126b6:	4658      	mov	r0, fp
 80126b8:	f000 fd56 	bl	8013168 <__lshift>
 80126bc:	f10a 0301 	add.w	r3, sl, #1
 80126c0:	9307      	str	r3, [sp, #28]
 80126c2:	9b00      	ldr	r3, [sp, #0]
 80126c4:	4453      	add	r3, sl
 80126c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80126c8:	9b02      	ldr	r3, [sp, #8]
 80126ca:	f003 0301 	and.w	r3, r3, #1
 80126ce:	462f      	mov	r7, r5
 80126d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80126d2:	4605      	mov	r5, r0
 80126d4:	9b07      	ldr	r3, [sp, #28]
 80126d6:	4621      	mov	r1, r4
 80126d8:	3b01      	subs	r3, #1
 80126da:	4648      	mov	r0, r9
 80126dc:	9300      	str	r3, [sp, #0]
 80126de:	f7ff fa99 	bl	8011c14 <quorem>
 80126e2:	4639      	mov	r1, r7
 80126e4:	9002      	str	r0, [sp, #8]
 80126e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80126ea:	4648      	mov	r0, r9
 80126ec:	f000 fda8 	bl	8013240 <__mcmp>
 80126f0:	462a      	mov	r2, r5
 80126f2:	9008      	str	r0, [sp, #32]
 80126f4:	4621      	mov	r1, r4
 80126f6:	4658      	mov	r0, fp
 80126f8:	f000 fdbe 	bl	8013278 <__mdiff>
 80126fc:	68c2      	ldr	r2, [r0, #12]
 80126fe:	4606      	mov	r6, r0
 8012700:	bb02      	cbnz	r2, 8012744 <_dtoa_r+0xa1c>
 8012702:	4601      	mov	r1, r0
 8012704:	4648      	mov	r0, r9
 8012706:	f000 fd9b 	bl	8013240 <__mcmp>
 801270a:	4602      	mov	r2, r0
 801270c:	4631      	mov	r1, r6
 801270e:	4658      	mov	r0, fp
 8012710:	920e      	str	r2, [sp, #56]	@ 0x38
 8012712:	f000 fb5b 	bl	8012dcc <_Bfree>
 8012716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012718:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801271a:	9e07      	ldr	r6, [sp, #28]
 801271c:	ea43 0102 	orr.w	r1, r3, r2
 8012720:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012722:	4319      	orrs	r1, r3
 8012724:	d110      	bne.n	8012748 <_dtoa_r+0xa20>
 8012726:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801272a:	d029      	beq.n	8012780 <_dtoa_r+0xa58>
 801272c:	9b08      	ldr	r3, [sp, #32]
 801272e:	2b00      	cmp	r3, #0
 8012730:	dd02      	ble.n	8012738 <_dtoa_r+0xa10>
 8012732:	9b02      	ldr	r3, [sp, #8]
 8012734:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012738:	9b00      	ldr	r3, [sp, #0]
 801273a:	f883 8000 	strb.w	r8, [r3]
 801273e:	e63f      	b.n	80123c0 <_dtoa_r+0x698>
 8012740:	4628      	mov	r0, r5
 8012742:	e7bb      	b.n	80126bc <_dtoa_r+0x994>
 8012744:	2201      	movs	r2, #1
 8012746:	e7e1      	b.n	801270c <_dtoa_r+0x9e4>
 8012748:	9b08      	ldr	r3, [sp, #32]
 801274a:	2b00      	cmp	r3, #0
 801274c:	db04      	blt.n	8012758 <_dtoa_r+0xa30>
 801274e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012750:	430b      	orrs	r3, r1
 8012752:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012754:	430b      	orrs	r3, r1
 8012756:	d120      	bne.n	801279a <_dtoa_r+0xa72>
 8012758:	2a00      	cmp	r2, #0
 801275a:	dded      	ble.n	8012738 <_dtoa_r+0xa10>
 801275c:	4649      	mov	r1, r9
 801275e:	2201      	movs	r2, #1
 8012760:	4658      	mov	r0, fp
 8012762:	f000 fd01 	bl	8013168 <__lshift>
 8012766:	4621      	mov	r1, r4
 8012768:	4681      	mov	r9, r0
 801276a:	f000 fd69 	bl	8013240 <__mcmp>
 801276e:	2800      	cmp	r0, #0
 8012770:	dc03      	bgt.n	801277a <_dtoa_r+0xa52>
 8012772:	d1e1      	bne.n	8012738 <_dtoa_r+0xa10>
 8012774:	f018 0f01 	tst.w	r8, #1
 8012778:	d0de      	beq.n	8012738 <_dtoa_r+0xa10>
 801277a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801277e:	d1d8      	bne.n	8012732 <_dtoa_r+0xa0a>
 8012780:	9a00      	ldr	r2, [sp, #0]
 8012782:	2339      	movs	r3, #57	@ 0x39
 8012784:	7013      	strb	r3, [r2, #0]
 8012786:	4633      	mov	r3, r6
 8012788:	461e      	mov	r6, r3
 801278a:	3b01      	subs	r3, #1
 801278c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012790:	2a39      	cmp	r2, #57	@ 0x39
 8012792:	d052      	beq.n	801283a <_dtoa_r+0xb12>
 8012794:	3201      	adds	r2, #1
 8012796:	701a      	strb	r2, [r3, #0]
 8012798:	e612      	b.n	80123c0 <_dtoa_r+0x698>
 801279a:	2a00      	cmp	r2, #0
 801279c:	dd07      	ble.n	80127ae <_dtoa_r+0xa86>
 801279e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80127a2:	d0ed      	beq.n	8012780 <_dtoa_r+0xa58>
 80127a4:	9a00      	ldr	r2, [sp, #0]
 80127a6:	f108 0301 	add.w	r3, r8, #1
 80127aa:	7013      	strb	r3, [r2, #0]
 80127ac:	e608      	b.n	80123c0 <_dtoa_r+0x698>
 80127ae:	9b07      	ldr	r3, [sp, #28]
 80127b0:	9a07      	ldr	r2, [sp, #28]
 80127b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80127b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80127b8:	4293      	cmp	r3, r2
 80127ba:	d028      	beq.n	801280e <_dtoa_r+0xae6>
 80127bc:	4649      	mov	r1, r9
 80127be:	2300      	movs	r3, #0
 80127c0:	220a      	movs	r2, #10
 80127c2:	4658      	mov	r0, fp
 80127c4:	f000 fb24 	bl	8012e10 <__multadd>
 80127c8:	42af      	cmp	r7, r5
 80127ca:	4681      	mov	r9, r0
 80127cc:	f04f 0300 	mov.w	r3, #0
 80127d0:	f04f 020a 	mov.w	r2, #10
 80127d4:	4639      	mov	r1, r7
 80127d6:	4658      	mov	r0, fp
 80127d8:	d107      	bne.n	80127ea <_dtoa_r+0xac2>
 80127da:	f000 fb19 	bl	8012e10 <__multadd>
 80127de:	4607      	mov	r7, r0
 80127e0:	4605      	mov	r5, r0
 80127e2:	9b07      	ldr	r3, [sp, #28]
 80127e4:	3301      	adds	r3, #1
 80127e6:	9307      	str	r3, [sp, #28]
 80127e8:	e774      	b.n	80126d4 <_dtoa_r+0x9ac>
 80127ea:	f000 fb11 	bl	8012e10 <__multadd>
 80127ee:	4629      	mov	r1, r5
 80127f0:	4607      	mov	r7, r0
 80127f2:	2300      	movs	r3, #0
 80127f4:	220a      	movs	r2, #10
 80127f6:	4658      	mov	r0, fp
 80127f8:	f000 fb0a 	bl	8012e10 <__multadd>
 80127fc:	4605      	mov	r5, r0
 80127fe:	e7f0      	b.n	80127e2 <_dtoa_r+0xaba>
 8012800:	9b00      	ldr	r3, [sp, #0]
 8012802:	2b00      	cmp	r3, #0
 8012804:	bfcc      	ite	gt
 8012806:	461e      	movgt	r6, r3
 8012808:	2601      	movle	r6, #1
 801280a:	4456      	add	r6, sl
 801280c:	2700      	movs	r7, #0
 801280e:	4649      	mov	r1, r9
 8012810:	2201      	movs	r2, #1
 8012812:	4658      	mov	r0, fp
 8012814:	f000 fca8 	bl	8013168 <__lshift>
 8012818:	4621      	mov	r1, r4
 801281a:	4681      	mov	r9, r0
 801281c:	f000 fd10 	bl	8013240 <__mcmp>
 8012820:	2800      	cmp	r0, #0
 8012822:	dcb0      	bgt.n	8012786 <_dtoa_r+0xa5e>
 8012824:	d102      	bne.n	801282c <_dtoa_r+0xb04>
 8012826:	f018 0f01 	tst.w	r8, #1
 801282a:	d1ac      	bne.n	8012786 <_dtoa_r+0xa5e>
 801282c:	4633      	mov	r3, r6
 801282e:	461e      	mov	r6, r3
 8012830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012834:	2a30      	cmp	r2, #48	@ 0x30
 8012836:	d0fa      	beq.n	801282e <_dtoa_r+0xb06>
 8012838:	e5c2      	b.n	80123c0 <_dtoa_r+0x698>
 801283a:	459a      	cmp	sl, r3
 801283c:	d1a4      	bne.n	8012788 <_dtoa_r+0xa60>
 801283e:	9b04      	ldr	r3, [sp, #16]
 8012840:	3301      	adds	r3, #1
 8012842:	9304      	str	r3, [sp, #16]
 8012844:	2331      	movs	r3, #49	@ 0x31
 8012846:	f88a 3000 	strb.w	r3, [sl]
 801284a:	e5b9      	b.n	80123c0 <_dtoa_r+0x698>
 801284c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801284e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80128ac <_dtoa_r+0xb84>
 8012852:	b11b      	cbz	r3, 801285c <_dtoa_r+0xb34>
 8012854:	f10a 0308 	add.w	r3, sl, #8
 8012858:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801285a:	6013      	str	r3, [r2, #0]
 801285c:	4650      	mov	r0, sl
 801285e:	b019      	add	sp, #100	@ 0x64
 8012860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012866:	2b01      	cmp	r3, #1
 8012868:	f77f ae37 	ble.w	80124da <_dtoa_r+0x7b2>
 801286c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801286e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012870:	2001      	movs	r0, #1
 8012872:	e655      	b.n	8012520 <_dtoa_r+0x7f8>
 8012874:	9b00      	ldr	r3, [sp, #0]
 8012876:	2b00      	cmp	r3, #0
 8012878:	f77f aed6 	ble.w	8012628 <_dtoa_r+0x900>
 801287c:	4656      	mov	r6, sl
 801287e:	4621      	mov	r1, r4
 8012880:	4648      	mov	r0, r9
 8012882:	f7ff f9c7 	bl	8011c14 <quorem>
 8012886:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801288a:	f806 8b01 	strb.w	r8, [r6], #1
 801288e:	9b00      	ldr	r3, [sp, #0]
 8012890:	eba6 020a 	sub.w	r2, r6, sl
 8012894:	4293      	cmp	r3, r2
 8012896:	ddb3      	ble.n	8012800 <_dtoa_r+0xad8>
 8012898:	4649      	mov	r1, r9
 801289a:	2300      	movs	r3, #0
 801289c:	220a      	movs	r2, #10
 801289e:	4658      	mov	r0, fp
 80128a0:	f000 fab6 	bl	8012e10 <__multadd>
 80128a4:	4681      	mov	r9, r0
 80128a6:	e7ea      	b.n	801287e <_dtoa_r+0xb56>
 80128a8:	08014009 	.word	0x08014009
 80128ac:	08013fa4 	.word	0x08013fa4

080128b0 <_free_r>:
 80128b0:	b538      	push	{r3, r4, r5, lr}
 80128b2:	4605      	mov	r5, r0
 80128b4:	2900      	cmp	r1, #0
 80128b6:	d041      	beq.n	801293c <_free_r+0x8c>
 80128b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80128bc:	1f0c      	subs	r4, r1, #4
 80128be:	2b00      	cmp	r3, #0
 80128c0:	bfb8      	it	lt
 80128c2:	18e4      	addlt	r4, r4, r3
 80128c4:	f7ff f808 	bl	80118d8 <__malloc_lock>
 80128c8:	4a1d      	ldr	r2, [pc, #116]	@ (8012940 <_free_r+0x90>)
 80128ca:	6813      	ldr	r3, [r2, #0]
 80128cc:	b933      	cbnz	r3, 80128dc <_free_r+0x2c>
 80128ce:	6063      	str	r3, [r4, #4]
 80128d0:	6014      	str	r4, [r2, #0]
 80128d2:	4628      	mov	r0, r5
 80128d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128d8:	f7ff b804 	b.w	80118e4 <__malloc_unlock>
 80128dc:	42a3      	cmp	r3, r4
 80128de:	d908      	bls.n	80128f2 <_free_r+0x42>
 80128e0:	6820      	ldr	r0, [r4, #0]
 80128e2:	1821      	adds	r1, r4, r0
 80128e4:	428b      	cmp	r3, r1
 80128e6:	bf01      	itttt	eq
 80128e8:	6819      	ldreq	r1, [r3, #0]
 80128ea:	685b      	ldreq	r3, [r3, #4]
 80128ec:	1809      	addeq	r1, r1, r0
 80128ee:	6021      	streq	r1, [r4, #0]
 80128f0:	e7ed      	b.n	80128ce <_free_r+0x1e>
 80128f2:	461a      	mov	r2, r3
 80128f4:	685b      	ldr	r3, [r3, #4]
 80128f6:	b10b      	cbz	r3, 80128fc <_free_r+0x4c>
 80128f8:	42a3      	cmp	r3, r4
 80128fa:	d9fa      	bls.n	80128f2 <_free_r+0x42>
 80128fc:	6811      	ldr	r1, [r2, #0]
 80128fe:	1850      	adds	r0, r2, r1
 8012900:	42a0      	cmp	r0, r4
 8012902:	d10b      	bne.n	801291c <_free_r+0x6c>
 8012904:	6820      	ldr	r0, [r4, #0]
 8012906:	4401      	add	r1, r0
 8012908:	1850      	adds	r0, r2, r1
 801290a:	4283      	cmp	r3, r0
 801290c:	6011      	str	r1, [r2, #0]
 801290e:	d1e0      	bne.n	80128d2 <_free_r+0x22>
 8012910:	6818      	ldr	r0, [r3, #0]
 8012912:	685b      	ldr	r3, [r3, #4]
 8012914:	6053      	str	r3, [r2, #4]
 8012916:	4408      	add	r0, r1
 8012918:	6010      	str	r0, [r2, #0]
 801291a:	e7da      	b.n	80128d2 <_free_r+0x22>
 801291c:	d902      	bls.n	8012924 <_free_r+0x74>
 801291e:	230c      	movs	r3, #12
 8012920:	602b      	str	r3, [r5, #0]
 8012922:	e7d6      	b.n	80128d2 <_free_r+0x22>
 8012924:	6820      	ldr	r0, [r4, #0]
 8012926:	1821      	adds	r1, r4, r0
 8012928:	428b      	cmp	r3, r1
 801292a:	bf04      	itt	eq
 801292c:	6819      	ldreq	r1, [r3, #0]
 801292e:	685b      	ldreq	r3, [r3, #4]
 8012930:	6063      	str	r3, [r4, #4]
 8012932:	bf04      	itt	eq
 8012934:	1809      	addeq	r1, r1, r0
 8012936:	6021      	streq	r1, [r4, #0]
 8012938:	6054      	str	r4, [r2, #4]
 801293a:	e7ca      	b.n	80128d2 <_free_r+0x22>
 801293c:	bd38      	pop	{r3, r4, r5, pc}
 801293e:	bf00      	nop
 8012940:	200015ac 	.word	0x200015ac

08012944 <__ssputs_r>:
 8012944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012948:	688e      	ldr	r6, [r1, #8]
 801294a:	461f      	mov	r7, r3
 801294c:	42be      	cmp	r6, r7
 801294e:	680b      	ldr	r3, [r1, #0]
 8012950:	4682      	mov	sl, r0
 8012952:	460c      	mov	r4, r1
 8012954:	4690      	mov	r8, r2
 8012956:	d82d      	bhi.n	80129b4 <__ssputs_r+0x70>
 8012958:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801295c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012960:	d026      	beq.n	80129b0 <__ssputs_r+0x6c>
 8012962:	6965      	ldr	r5, [r4, #20]
 8012964:	6909      	ldr	r1, [r1, #16]
 8012966:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801296a:	eba3 0901 	sub.w	r9, r3, r1
 801296e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012972:	1c7b      	adds	r3, r7, #1
 8012974:	444b      	add	r3, r9
 8012976:	106d      	asrs	r5, r5, #1
 8012978:	429d      	cmp	r5, r3
 801297a:	bf38      	it	cc
 801297c:	461d      	movcc	r5, r3
 801297e:	0553      	lsls	r3, r2, #21
 8012980:	d527      	bpl.n	80129d2 <__ssputs_r+0x8e>
 8012982:	4629      	mov	r1, r5
 8012984:	f7fe fd9a 	bl	80114bc <_malloc_r>
 8012988:	4606      	mov	r6, r0
 801298a:	b360      	cbz	r0, 80129e6 <__ssputs_r+0xa2>
 801298c:	6921      	ldr	r1, [r4, #16]
 801298e:	464a      	mov	r2, r9
 8012990:	f7ff f914 	bl	8011bbc <memcpy>
 8012994:	89a3      	ldrh	r3, [r4, #12]
 8012996:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801299a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801299e:	81a3      	strh	r3, [r4, #12]
 80129a0:	6126      	str	r6, [r4, #16]
 80129a2:	6165      	str	r5, [r4, #20]
 80129a4:	444e      	add	r6, r9
 80129a6:	eba5 0509 	sub.w	r5, r5, r9
 80129aa:	6026      	str	r6, [r4, #0]
 80129ac:	60a5      	str	r5, [r4, #8]
 80129ae:	463e      	mov	r6, r7
 80129b0:	42be      	cmp	r6, r7
 80129b2:	d900      	bls.n	80129b6 <__ssputs_r+0x72>
 80129b4:	463e      	mov	r6, r7
 80129b6:	6820      	ldr	r0, [r4, #0]
 80129b8:	4632      	mov	r2, r6
 80129ba:	4641      	mov	r1, r8
 80129bc:	f000 fdcc 	bl	8013558 <memmove>
 80129c0:	68a3      	ldr	r3, [r4, #8]
 80129c2:	1b9b      	subs	r3, r3, r6
 80129c4:	60a3      	str	r3, [r4, #8]
 80129c6:	6823      	ldr	r3, [r4, #0]
 80129c8:	4433      	add	r3, r6
 80129ca:	6023      	str	r3, [r4, #0]
 80129cc:	2000      	movs	r0, #0
 80129ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129d2:	462a      	mov	r2, r5
 80129d4:	f000 fd92 	bl	80134fc <_realloc_r>
 80129d8:	4606      	mov	r6, r0
 80129da:	2800      	cmp	r0, #0
 80129dc:	d1e0      	bne.n	80129a0 <__ssputs_r+0x5c>
 80129de:	6921      	ldr	r1, [r4, #16]
 80129e0:	4650      	mov	r0, sl
 80129e2:	f7ff ff65 	bl	80128b0 <_free_r>
 80129e6:	230c      	movs	r3, #12
 80129e8:	f8ca 3000 	str.w	r3, [sl]
 80129ec:	89a3      	ldrh	r3, [r4, #12]
 80129ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129f2:	81a3      	strh	r3, [r4, #12]
 80129f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80129f8:	e7e9      	b.n	80129ce <__ssputs_r+0x8a>
	...

080129fc <_svfiprintf_r>:
 80129fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a00:	4698      	mov	r8, r3
 8012a02:	898b      	ldrh	r3, [r1, #12]
 8012a04:	061b      	lsls	r3, r3, #24
 8012a06:	b09d      	sub	sp, #116	@ 0x74
 8012a08:	4607      	mov	r7, r0
 8012a0a:	460d      	mov	r5, r1
 8012a0c:	4614      	mov	r4, r2
 8012a0e:	d510      	bpl.n	8012a32 <_svfiprintf_r+0x36>
 8012a10:	690b      	ldr	r3, [r1, #16]
 8012a12:	b973      	cbnz	r3, 8012a32 <_svfiprintf_r+0x36>
 8012a14:	2140      	movs	r1, #64	@ 0x40
 8012a16:	f7fe fd51 	bl	80114bc <_malloc_r>
 8012a1a:	6028      	str	r0, [r5, #0]
 8012a1c:	6128      	str	r0, [r5, #16]
 8012a1e:	b930      	cbnz	r0, 8012a2e <_svfiprintf_r+0x32>
 8012a20:	230c      	movs	r3, #12
 8012a22:	603b      	str	r3, [r7, #0]
 8012a24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012a28:	b01d      	add	sp, #116	@ 0x74
 8012a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a2e:	2340      	movs	r3, #64	@ 0x40
 8012a30:	616b      	str	r3, [r5, #20]
 8012a32:	2300      	movs	r3, #0
 8012a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8012a36:	2320      	movs	r3, #32
 8012a38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012a3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a40:	2330      	movs	r3, #48	@ 0x30
 8012a42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012be0 <_svfiprintf_r+0x1e4>
 8012a46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012a4a:	f04f 0901 	mov.w	r9, #1
 8012a4e:	4623      	mov	r3, r4
 8012a50:	469a      	mov	sl, r3
 8012a52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a56:	b10a      	cbz	r2, 8012a5c <_svfiprintf_r+0x60>
 8012a58:	2a25      	cmp	r2, #37	@ 0x25
 8012a5a:	d1f9      	bne.n	8012a50 <_svfiprintf_r+0x54>
 8012a5c:	ebba 0b04 	subs.w	fp, sl, r4
 8012a60:	d00b      	beq.n	8012a7a <_svfiprintf_r+0x7e>
 8012a62:	465b      	mov	r3, fp
 8012a64:	4622      	mov	r2, r4
 8012a66:	4629      	mov	r1, r5
 8012a68:	4638      	mov	r0, r7
 8012a6a:	f7ff ff6b 	bl	8012944 <__ssputs_r>
 8012a6e:	3001      	adds	r0, #1
 8012a70:	f000 80a7 	beq.w	8012bc2 <_svfiprintf_r+0x1c6>
 8012a74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a76:	445a      	add	r2, fp
 8012a78:	9209      	str	r2, [sp, #36]	@ 0x24
 8012a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	f000 809f 	beq.w	8012bc2 <_svfiprintf_r+0x1c6>
 8012a84:	2300      	movs	r3, #0
 8012a86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012a8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a8e:	f10a 0a01 	add.w	sl, sl, #1
 8012a92:	9304      	str	r3, [sp, #16]
 8012a94:	9307      	str	r3, [sp, #28]
 8012a96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012a9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8012a9c:	4654      	mov	r4, sl
 8012a9e:	2205      	movs	r2, #5
 8012aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012aa4:	484e      	ldr	r0, [pc, #312]	@ (8012be0 <_svfiprintf_r+0x1e4>)
 8012aa6:	f7ed fbbb 	bl	8000220 <memchr>
 8012aaa:	9a04      	ldr	r2, [sp, #16]
 8012aac:	b9d8      	cbnz	r0, 8012ae6 <_svfiprintf_r+0xea>
 8012aae:	06d0      	lsls	r0, r2, #27
 8012ab0:	bf44      	itt	mi
 8012ab2:	2320      	movmi	r3, #32
 8012ab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ab8:	0711      	lsls	r1, r2, #28
 8012aba:	bf44      	itt	mi
 8012abc:	232b      	movmi	r3, #43	@ 0x2b
 8012abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8012ac6:	2b2a      	cmp	r3, #42	@ 0x2a
 8012ac8:	d015      	beq.n	8012af6 <_svfiprintf_r+0xfa>
 8012aca:	9a07      	ldr	r2, [sp, #28]
 8012acc:	4654      	mov	r4, sl
 8012ace:	2000      	movs	r0, #0
 8012ad0:	f04f 0c0a 	mov.w	ip, #10
 8012ad4:	4621      	mov	r1, r4
 8012ad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ada:	3b30      	subs	r3, #48	@ 0x30
 8012adc:	2b09      	cmp	r3, #9
 8012ade:	d94b      	bls.n	8012b78 <_svfiprintf_r+0x17c>
 8012ae0:	b1b0      	cbz	r0, 8012b10 <_svfiprintf_r+0x114>
 8012ae2:	9207      	str	r2, [sp, #28]
 8012ae4:	e014      	b.n	8012b10 <_svfiprintf_r+0x114>
 8012ae6:	eba0 0308 	sub.w	r3, r0, r8
 8012aea:	fa09 f303 	lsl.w	r3, r9, r3
 8012aee:	4313      	orrs	r3, r2
 8012af0:	9304      	str	r3, [sp, #16]
 8012af2:	46a2      	mov	sl, r4
 8012af4:	e7d2      	b.n	8012a9c <_svfiprintf_r+0xa0>
 8012af6:	9b03      	ldr	r3, [sp, #12]
 8012af8:	1d19      	adds	r1, r3, #4
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	9103      	str	r1, [sp, #12]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	bfbb      	ittet	lt
 8012b02:	425b      	neglt	r3, r3
 8012b04:	f042 0202 	orrlt.w	r2, r2, #2
 8012b08:	9307      	strge	r3, [sp, #28]
 8012b0a:	9307      	strlt	r3, [sp, #28]
 8012b0c:	bfb8      	it	lt
 8012b0e:	9204      	strlt	r2, [sp, #16]
 8012b10:	7823      	ldrb	r3, [r4, #0]
 8012b12:	2b2e      	cmp	r3, #46	@ 0x2e
 8012b14:	d10a      	bne.n	8012b2c <_svfiprintf_r+0x130>
 8012b16:	7863      	ldrb	r3, [r4, #1]
 8012b18:	2b2a      	cmp	r3, #42	@ 0x2a
 8012b1a:	d132      	bne.n	8012b82 <_svfiprintf_r+0x186>
 8012b1c:	9b03      	ldr	r3, [sp, #12]
 8012b1e:	1d1a      	adds	r2, r3, #4
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	9203      	str	r2, [sp, #12]
 8012b24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012b28:	3402      	adds	r4, #2
 8012b2a:	9305      	str	r3, [sp, #20]
 8012b2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012bf0 <_svfiprintf_r+0x1f4>
 8012b30:	7821      	ldrb	r1, [r4, #0]
 8012b32:	2203      	movs	r2, #3
 8012b34:	4650      	mov	r0, sl
 8012b36:	f7ed fb73 	bl	8000220 <memchr>
 8012b3a:	b138      	cbz	r0, 8012b4c <_svfiprintf_r+0x150>
 8012b3c:	9b04      	ldr	r3, [sp, #16]
 8012b3e:	eba0 000a 	sub.w	r0, r0, sl
 8012b42:	2240      	movs	r2, #64	@ 0x40
 8012b44:	4082      	lsls	r2, r0
 8012b46:	4313      	orrs	r3, r2
 8012b48:	3401      	adds	r4, #1
 8012b4a:	9304      	str	r3, [sp, #16]
 8012b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b50:	4824      	ldr	r0, [pc, #144]	@ (8012be4 <_svfiprintf_r+0x1e8>)
 8012b52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012b56:	2206      	movs	r2, #6
 8012b58:	f7ed fb62 	bl	8000220 <memchr>
 8012b5c:	2800      	cmp	r0, #0
 8012b5e:	d036      	beq.n	8012bce <_svfiprintf_r+0x1d2>
 8012b60:	4b21      	ldr	r3, [pc, #132]	@ (8012be8 <_svfiprintf_r+0x1ec>)
 8012b62:	bb1b      	cbnz	r3, 8012bac <_svfiprintf_r+0x1b0>
 8012b64:	9b03      	ldr	r3, [sp, #12]
 8012b66:	3307      	adds	r3, #7
 8012b68:	f023 0307 	bic.w	r3, r3, #7
 8012b6c:	3308      	adds	r3, #8
 8012b6e:	9303      	str	r3, [sp, #12]
 8012b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b72:	4433      	add	r3, r6
 8012b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b76:	e76a      	b.n	8012a4e <_svfiprintf_r+0x52>
 8012b78:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b7c:	460c      	mov	r4, r1
 8012b7e:	2001      	movs	r0, #1
 8012b80:	e7a8      	b.n	8012ad4 <_svfiprintf_r+0xd8>
 8012b82:	2300      	movs	r3, #0
 8012b84:	3401      	adds	r4, #1
 8012b86:	9305      	str	r3, [sp, #20]
 8012b88:	4619      	mov	r1, r3
 8012b8a:	f04f 0c0a 	mov.w	ip, #10
 8012b8e:	4620      	mov	r0, r4
 8012b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b94:	3a30      	subs	r2, #48	@ 0x30
 8012b96:	2a09      	cmp	r2, #9
 8012b98:	d903      	bls.n	8012ba2 <_svfiprintf_r+0x1a6>
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d0c6      	beq.n	8012b2c <_svfiprintf_r+0x130>
 8012b9e:	9105      	str	r1, [sp, #20]
 8012ba0:	e7c4      	b.n	8012b2c <_svfiprintf_r+0x130>
 8012ba2:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ba6:	4604      	mov	r4, r0
 8012ba8:	2301      	movs	r3, #1
 8012baa:	e7f0      	b.n	8012b8e <_svfiprintf_r+0x192>
 8012bac:	ab03      	add	r3, sp, #12
 8012bae:	9300      	str	r3, [sp, #0]
 8012bb0:	462a      	mov	r2, r5
 8012bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8012bec <_svfiprintf_r+0x1f0>)
 8012bb4:	a904      	add	r1, sp, #16
 8012bb6:	4638      	mov	r0, r7
 8012bb8:	f7fe fa2c 	bl	8011014 <_printf_float>
 8012bbc:	1c42      	adds	r2, r0, #1
 8012bbe:	4606      	mov	r6, r0
 8012bc0:	d1d6      	bne.n	8012b70 <_svfiprintf_r+0x174>
 8012bc2:	89ab      	ldrh	r3, [r5, #12]
 8012bc4:	065b      	lsls	r3, r3, #25
 8012bc6:	f53f af2d 	bmi.w	8012a24 <_svfiprintf_r+0x28>
 8012bca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012bcc:	e72c      	b.n	8012a28 <_svfiprintf_r+0x2c>
 8012bce:	ab03      	add	r3, sp, #12
 8012bd0:	9300      	str	r3, [sp, #0]
 8012bd2:	462a      	mov	r2, r5
 8012bd4:	4b05      	ldr	r3, [pc, #20]	@ (8012bec <_svfiprintf_r+0x1f0>)
 8012bd6:	a904      	add	r1, sp, #16
 8012bd8:	4638      	mov	r0, r7
 8012bda:	f7fe fd5d 	bl	8011698 <_printf_i>
 8012bde:	e7ed      	b.n	8012bbc <_svfiprintf_r+0x1c0>
 8012be0:	0801401a 	.word	0x0801401a
 8012be4:	08014024 	.word	0x08014024
 8012be8:	08011015 	.word	0x08011015
 8012bec:	08012945 	.word	0x08012945
 8012bf0:	08014020 	.word	0x08014020

08012bf4 <__sflush_r>:
 8012bf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bfc:	0716      	lsls	r6, r2, #28
 8012bfe:	4605      	mov	r5, r0
 8012c00:	460c      	mov	r4, r1
 8012c02:	d454      	bmi.n	8012cae <__sflush_r+0xba>
 8012c04:	684b      	ldr	r3, [r1, #4]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	dc02      	bgt.n	8012c10 <__sflush_r+0x1c>
 8012c0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	dd48      	ble.n	8012ca2 <__sflush_r+0xae>
 8012c10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012c12:	2e00      	cmp	r6, #0
 8012c14:	d045      	beq.n	8012ca2 <__sflush_r+0xae>
 8012c16:	2300      	movs	r3, #0
 8012c18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012c1c:	682f      	ldr	r7, [r5, #0]
 8012c1e:	6a21      	ldr	r1, [r4, #32]
 8012c20:	602b      	str	r3, [r5, #0]
 8012c22:	d030      	beq.n	8012c86 <__sflush_r+0x92>
 8012c24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012c26:	89a3      	ldrh	r3, [r4, #12]
 8012c28:	0759      	lsls	r1, r3, #29
 8012c2a:	d505      	bpl.n	8012c38 <__sflush_r+0x44>
 8012c2c:	6863      	ldr	r3, [r4, #4]
 8012c2e:	1ad2      	subs	r2, r2, r3
 8012c30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012c32:	b10b      	cbz	r3, 8012c38 <__sflush_r+0x44>
 8012c34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012c36:	1ad2      	subs	r2, r2, r3
 8012c38:	2300      	movs	r3, #0
 8012c3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012c3c:	6a21      	ldr	r1, [r4, #32]
 8012c3e:	4628      	mov	r0, r5
 8012c40:	47b0      	blx	r6
 8012c42:	1c43      	adds	r3, r0, #1
 8012c44:	89a3      	ldrh	r3, [r4, #12]
 8012c46:	d106      	bne.n	8012c56 <__sflush_r+0x62>
 8012c48:	6829      	ldr	r1, [r5, #0]
 8012c4a:	291d      	cmp	r1, #29
 8012c4c:	d82b      	bhi.n	8012ca6 <__sflush_r+0xb2>
 8012c4e:	4a2a      	ldr	r2, [pc, #168]	@ (8012cf8 <__sflush_r+0x104>)
 8012c50:	410a      	asrs	r2, r1
 8012c52:	07d6      	lsls	r6, r2, #31
 8012c54:	d427      	bmi.n	8012ca6 <__sflush_r+0xb2>
 8012c56:	2200      	movs	r2, #0
 8012c58:	6062      	str	r2, [r4, #4]
 8012c5a:	04d9      	lsls	r1, r3, #19
 8012c5c:	6922      	ldr	r2, [r4, #16]
 8012c5e:	6022      	str	r2, [r4, #0]
 8012c60:	d504      	bpl.n	8012c6c <__sflush_r+0x78>
 8012c62:	1c42      	adds	r2, r0, #1
 8012c64:	d101      	bne.n	8012c6a <__sflush_r+0x76>
 8012c66:	682b      	ldr	r3, [r5, #0]
 8012c68:	b903      	cbnz	r3, 8012c6c <__sflush_r+0x78>
 8012c6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8012c6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012c6e:	602f      	str	r7, [r5, #0]
 8012c70:	b1b9      	cbz	r1, 8012ca2 <__sflush_r+0xae>
 8012c72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012c76:	4299      	cmp	r1, r3
 8012c78:	d002      	beq.n	8012c80 <__sflush_r+0x8c>
 8012c7a:	4628      	mov	r0, r5
 8012c7c:	f7ff fe18 	bl	80128b0 <_free_r>
 8012c80:	2300      	movs	r3, #0
 8012c82:	6363      	str	r3, [r4, #52]	@ 0x34
 8012c84:	e00d      	b.n	8012ca2 <__sflush_r+0xae>
 8012c86:	2301      	movs	r3, #1
 8012c88:	4628      	mov	r0, r5
 8012c8a:	47b0      	blx	r6
 8012c8c:	4602      	mov	r2, r0
 8012c8e:	1c50      	adds	r0, r2, #1
 8012c90:	d1c9      	bne.n	8012c26 <__sflush_r+0x32>
 8012c92:	682b      	ldr	r3, [r5, #0]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d0c6      	beq.n	8012c26 <__sflush_r+0x32>
 8012c98:	2b1d      	cmp	r3, #29
 8012c9a:	d001      	beq.n	8012ca0 <__sflush_r+0xac>
 8012c9c:	2b16      	cmp	r3, #22
 8012c9e:	d11e      	bne.n	8012cde <__sflush_r+0xea>
 8012ca0:	602f      	str	r7, [r5, #0]
 8012ca2:	2000      	movs	r0, #0
 8012ca4:	e022      	b.n	8012cec <__sflush_r+0xf8>
 8012ca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012caa:	b21b      	sxth	r3, r3
 8012cac:	e01b      	b.n	8012ce6 <__sflush_r+0xf2>
 8012cae:	690f      	ldr	r7, [r1, #16]
 8012cb0:	2f00      	cmp	r7, #0
 8012cb2:	d0f6      	beq.n	8012ca2 <__sflush_r+0xae>
 8012cb4:	0793      	lsls	r3, r2, #30
 8012cb6:	680e      	ldr	r6, [r1, #0]
 8012cb8:	bf08      	it	eq
 8012cba:	694b      	ldreq	r3, [r1, #20]
 8012cbc:	600f      	str	r7, [r1, #0]
 8012cbe:	bf18      	it	ne
 8012cc0:	2300      	movne	r3, #0
 8012cc2:	eba6 0807 	sub.w	r8, r6, r7
 8012cc6:	608b      	str	r3, [r1, #8]
 8012cc8:	f1b8 0f00 	cmp.w	r8, #0
 8012ccc:	dde9      	ble.n	8012ca2 <__sflush_r+0xae>
 8012cce:	6a21      	ldr	r1, [r4, #32]
 8012cd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012cd2:	4643      	mov	r3, r8
 8012cd4:	463a      	mov	r2, r7
 8012cd6:	4628      	mov	r0, r5
 8012cd8:	47b0      	blx	r6
 8012cda:	2800      	cmp	r0, #0
 8012cdc:	dc08      	bgt.n	8012cf0 <__sflush_r+0xfc>
 8012cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ce6:	81a3      	strh	r3, [r4, #12]
 8012ce8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cf0:	4407      	add	r7, r0
 8012cf2:	eba8 0800 	sub.w	r8, r8, r0
 8012cf6:	e7e7      	b.n	8012cc8 <__sflush_r+0xd4>
 8012cf8:	dfbffffe 	.word	0xdfbffffe

08012cfc <_fflush_r>:
 8012cfc:	b538      	push	{r3, r4, r5, lr}
 8012cfe:	690b      	ldr	r3, [r1, #16]
 8012d00:	4605      	mov	r5, r0
 8012d02:	460c      	mov	r4, r1
 8012d04:	b913      	cbnz	r3, 8012d0c <_fflush_r+0x10>
 8012d06:	2500      	movs	r5, #0
 8012d08:	4628      	mov	r0, r5
 8012d0a:	bd38      	pop	{r3, r4, r5, pc}
 8012d0c:	b118      	cbz	r0, 8012d16 <_fflush_r+0x1a>
 8012d0e:	6a03      	ldr	r3, [r0, #32]
 8012d10:	b90b      	cbnz	r3, 8012d16 <_fflush_r+0x1a>
 8012d12:	f7fe fed7 	bl	8011ac4 <__sinit>
 8012d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d0f3      	beq.n	8012d06 <_fflush_r+0xa>
 8012d1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012d20:	07d0      	lsls	r0, r2, #31
 8012d22:	d404      	bmi.n	8012d2e <_fflush_r+0x32>
 8012d24:	0599      	lsls	r1, r3, #22
 8012d26:	d402      	bmi.n	8012d2e <_fflush_r+0x32>
 8012d28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012d2a:	f7f0 f93c 	bl	8002fa6 <__retarget_lock_acquire_recursive>
 8012d2e:	4628      	mov	r0, r5
 8012d30:	4621      	mov	r1, r4
 8012d32:	f7ff ff5f 	bl	8012bf4 <__sflush_r>
 8012d36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012d38:	07da      	lsls	r2, r3, #31
 8012d3a:	4605      	mov	r5, r0
 8012d3c:	d4e4      	bmi.n	8012d08 <_fflush_r+0xc>
 8012d3e:	89a3      	ldrh	r3, [r4, #12]
 8012d40:	059b      	lsls	r3, r3, #22
 8012d42:	d4e1      	bmi.n	8012d08 <_fflush_r+0xc>
 8012d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012d46:	f7f0 f943 	bl	8002fd0 <__retarget_lock_release_recursive>
 8012d4a:	e7dd      	b.n	8012d08 <_fflush_r+0xc>

08012d4c <_Balloc>:
 8012d4c:	b570      	push	{r4, r5, r6, lr}
 8012d4e:	69c6      	ldr	r6, [r0, #28]
 8012d50:	4604      	mov	r4, r0
 8012d52:	460d      	mov	r5, r1
 8012d54:	b976      	cbnz	r6, 8012d74 <_Balloc+0x28>
 8012d56:	2010      	movs	r0, #16
 8012d58:	f7fe fb86 	bl	8011468 <malloc>
 8012d5c:	4602      	mov	r2, r0
 8012d5e:	61e0      	str	r0, [r4, #28]
 8012d60:	b920      	cbnz	r0, 8012d6c <_Balloc+0x20>
 8012d62:	4b18      	ldr	r3, [pc, #96]	@ (8012dc4 <_Balloc+0x78>)
 8012d64:	4818      	ldr	r0, [pc, #96]	@ (8012dc8 <_Balloc+0x7c>)
 8012d66:	216b      	movs	r1, #107	@ 0x6b
 8012d68:	f7fe ff36 	bl	8011bd8 <__assert_func>
 8012d6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d70:	6006      	str	r6, [r0, #0]
 8012d72:	60c6      	str	r6, [r0, #12]
 8012d74:	69e6      	ldr	r6, [r4, #28]
 8012d76:	68f3      	ldr	r3, [r6, #12]
 8012d78:	b183      	cbz	r3, 8012d9c <_Balloc+0x50>
 8012d7a:	69e3      	ldr	r3, [r4, #28]
 8012d7c:	68db      	ldr	r3, [r3, #12]
 8012d7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012d82:	b9b8      	cbnz	r0, 8012db4 <_Balloc+0x68>
 8012d84:	2101      	movs	r1, #1
 8012d86:	fa01 f605 	lsl.w	r6, r1, r5
 8012d8a:	1d72      	adds	r2, r6, #5
 8012d8c:	0092      	lsls	r2, r2, #2
 8012d8e:	4620      	mov	r0, r4
 8012d90:	f000 fc49 	bl	8013626 <_calloc_r>
 8012d94:	b160      	cbz	r0, 8012db0 <_Balloc+0x64>
 8012d96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012d9a:	e00e      	b.n	8012dba <_Balloc+0x6e>
 8012d9c:	2221      	movs	r2, #33	@ 0x21
 8012d9e:	2104      	movs	r1, #4
 8012da0:	4620      	mov	r0, r4
 8012da2:	f000 fc40 	bl	8013626 <_calloc_r>
 8012da6:	69e3      	ldr	r3, [r4, #28]
 8012da8:	60f0      	str	r0, [r6, #12]
 8012daa:	68db      	ldr	r3, [r3, #12]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d1e4      	bne.n	8012d7a <_Balloc+0x2e>
 8012db0:	2000      	movs	r0, #0
 8012db2:	bd70      	pop	{r4, r5, r6, pc}
 8012db4:	6802      	ldr	r2, [r0, #0]
 8012db6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012dba:	2300      	movs	r3, #0
 8012dbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012dc0:	e7f7      	b.n	8012db2 <_Balloc+0x66>
 8012dc2:	bf00      	nop
 8012dc4:	08013df8 	.word	0x08013df8
 8012dc8:	0801402b 	.word	0x0801402b

08012dcc <_Bfree>:
 8012dcc:	b570      	push	{r4, r5, r6, lr}
 8012dce:	69c6      	ldr	r6, [r0, #28]
 8012dd0:	4605      	mov	r5, r0
 8012dd2:	460c      	mov	r4, r1
 8012dd4:	b976      	cbnz	r6, 8012df4 <_Bfree+0x28>
 8012dd6:	2010      	movs	r0, #16
 8012dd8:	f7fe fb46 	bl	8011468 <malloc>
 8012ddc:	4602      	mov	r2, r0
 8012dde:	61e8      	str	r0, [r5, #28]
 8012de0:	b920      	cbnz	r0, 8012dec <_Bfree+0x20>
 8012de2:	4b09      	ldr	r3, [pc, #36]	@ (8012e08 <_Bfree+0x3c>)
 8012de4:	4809      	ldr	r0, [pc, #36]	@ (8012e0c <_Bfree+0x40>)
 8012de6:	218f      	movs	r1, #143	@ 0x8f
 8012de8:	f7fe fef6 	bl	8011bd8 <__assert_func>
 8012dec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012df0:	6006      	str	r6, [r0, #0]
 8012df2:	60c6      	str	r6, [r0, #12]
 8012df4:	b13c      	cbz	r4, 8012e06 <_Bfree+0x3a>
 8012df6:	69eb      	ldr	r3, [r5, #28]
 8012df8:	6862      	ldr	r2, [r4, #4]
 8012dfa:	68db      	ldr	r3, [r3, #12]
 8012dfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012e00:	6021      	str	r1, [r4, #0]
 8012e02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012e06:	bd70      	pop	{r4, r5, r6, pc}
 8012e08:	08013df8 	.word	0x08013df8
 8012e0c:	0801402b 	.word	0x0801402b

08012e10 <__multadd>:
 8012e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e14:	690d      	ldr	r5, [r1, #16]
 8012e16:	4607      	mov	r7, r0
 8012e18:	460c      	mov	r4, r1
 8012e1a:	461e      	mov	r6, r3
 8012e1c:	f101 0c14 	add.w	ip, r1, #20
 8012e20:	2000      	movs	r0, #0
 8012e22:	f8dc 3000 	ldr.w	r3, [ip]
 8012e26:	b299      	uxth	r1, r3
 8012e28:	fb02 6101 	mla	r1, r2, r1, r6
 8012e2c:	0c1e      	lsrs	r6, r3, #16
 8012e2e:	0c0b      	lsrs	r3, r1, #16
 8012e30:	fb02 3306 	mla	r3, r2, r6, r3
 8012e34:	b289      	uxth	r1, r1
 8012e36:	3001      	adds	r0, #1
 8012e38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012e3c:	4285      	cmp	r5, r0
 8012e3e:	f84c 1b04 	str.w	r1, [ip], #4
 8012e42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012e46:	dcec      	bgt.n	8012e22 <__multadd+0x12>
 8012e48:	b30e      	cbz	r6, 8012e8e <__multadd+0x7e>
 8012e4a:	68a3      	ldr	r3, [r4, #8]
 8012e4c:	42ab      	cmp	r3, r5
 8012e4e:	dc19      	bgt.n	8012e84 <__multadd+0x74>
 8012e50:	6861      	ldr	r1, [r4, #4]
 8012e52:	4638      	mov	r0, r7
 8012e54:	3101      	adds	r1, #1
 8012e56:	f7ff ff79 	bl	8012d4c <_Balloc>
 8012e5a:	4680      	mov	r8, r0
 8012e5c:	b928      	cbnz	r0, 8012e6a <__multadd+0x5a>
 8012e5e:	4602      	mov	r2, r0
 8012e60:	4b0c      	ldr	r3, [pc, #48]	@ (8012e94 <__multadd+0x84>)
 8012e62:	480d      	ldr	r0, [pc, #52]	@ (8012e98 <__multadd+0x88>)
 8012e64:	21ba      	movs	r1, #186	@ 0xba
 8012e66:	f7fe feb7 	bl	8011bd8 <__assert_func>
 8012e6a:	6922      	ldr	r2, [r4, #16]
 8012e6c:	3202      	adds	r2, #2
 8012e6e:	f104 010c 	add.w	r1, r4, #12
 8012e72:	0092      	lsls	r2, r2, #2
 8012e74:	300c      	adds	r0, #12
 8012e76:	f7fe fea1 	bl	8011bbc <memcpy>
 8012e7a:	4621      	mov	r1, r4
 8012e7c:	4638      	mov	r0, r7
 8012e7e:	f7ff ffa5 	bl	8012dcc <_Bfree>
 8012e82:	4644      	mov	r4, r8
 8012e84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012e88:	3501      	adds	r5, #1
 8012e8a:	615e      	str	r6, [r3, #20]
 8012e8c:	6125      	str	r5, [r4, #16]
 8012e8e:	4620      	mov	r0, r4
 8012e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e94:	08014009 	.word	0x08014009
 8012e98:	0801402b 	.word	0x0801402b

08012e9c <__hi0bits>:
 8012e9c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	bf36      	itet	cc
 8012ea4:	0403      	lslcc	r3, r0, #16
 8012ea6:	2000      	movcs	r0, #0
 8012ea8:	2010      	movcc	r0, #16
 8012eaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012eae:	bf3c      	itt	cc
 8012eb0:	021b      	lslcc	r3, r3, #8
 8012eb2:	3008      	addcc	r0, #8
 8012eb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012eb8:	bf3c      	itt	cc
 8012eba:	011b      	lslcc	r3, r3, #4
 8012ebc:	3004      	addcc	r0, #4
 8012ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012ec2:	bf3c      	itt	cc
 8012ec4:	009b      	lslcc	r3, r3, #2
 8012ec6:	3002      	addcc	r0, #2
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	db05      	blt.n	8012ed8 <__hi0bits+0x3c>
 8012ecc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012ed0:	f100 0001 	add.w	r0, r0, #1
 8012ed4:	bf08      	it	eq
 8012ed6:	2020      	moveq	r0, #32
 8012ed8:	4770      	bx	lr

08012eda <__lo0bits>:
 8012eda:	6803      	ldr	r3, [r0, #0]
 8012edc:	4602      	mov	r2, r0
 8012ede:	f013 0007 	ands.w	r0, r3, #7
 8012ee2:	d00b      	beq.n	8012efc <__lo0bits+0x22>
 8012ee4:	07d9      	lsls	r1, r3, #31
 8012ee6:	d421      	bmi.n	8012f2c <__lo0bits+0x52>
 8012ee8:	0798      	lsls	r0, r3, #30
 8012eea:	bf49      	itett	mi
 8012eec:	085b      	lsrmi	r3, r3, #1
 8012eee:	089b      	lsrpl	r3, r3, #2
 8012ef0:	2001      	movmi	r0, #1
 8012ef2:	6013      	strmi	r3, [r2, #0]
 8012ef4:	bf5c      	itt	pl
 8012ef6:	6013      	strpl	r3, [r2, #0]
 8012ef8:	2002      	movpl	r0, #2
 8012efa:	4770      	bx	lr
 8012efc:	b299      	uxth	r1, r3
 8012efe:	b909      	cbnz	r1, 8012f04 <__lo0bits+0x2a>
 8012f00:	0c1b      	lsrs	r3, r3, #16
 8012f02:	2010      	movs	r0, #16
 8012f04:	b2d9      	uxtb	r1, r3
 8012f06:	b909      	cbnz	r1, 8012f0c <__lo0bits+0x32>
 8012f08:	3008      	adds	r0, #8
 8012f0a:	0a1b      	lsrs	r3, r3, #8
 8012f0c:	0719      	lsls	r1, r3, #28
 8012f0e:	bf04      	itt	eq
 8012f10:	091b      	lsreq	r3, r3, #4
 8012f12:	3004      	addeq	r0, #4
 8012f14:	0799      	lsls	r1, r3, #30
 8012f16:	bf04      	itt	eq
 8012f18:	089b      	lsreq	r3, r3, #2
 8012f1a:	3002      	addeq	r0, #2
 8012f1c:	07d9      	lsls	r1, r3, #31
 8012f1e:	d403      	bmi.n	8012f28 <__lo0bits+0x4e>
 8012f20:	085b      	lsrs	r3, r3, #1
 8012f22:	f100 0001 	add.w	r0, r0, #1
 8012f26:	d003      	beq.n	8012f30 <__lo0bits+0x56>
 8012f28:	6013      	str	r3, [r2, #0]
 8012f2a:	4770      	bx	lr
 8012f2c:	2000      	movs	r0, #0
 8012f2e:	4770      	bx	lr
 8012f30:	2020      	movs	r0, #32
 8012f32:	4770      	bx	lr

08012f34 <__i2b>:
 8012f34:	b510      	push	{r4, lr}
 8012f36:	460c      	mov	r4, r1
 8012f38:	2101      	movs	r1, #1
 8012f3a:	f7ff ff07 	bl	8012d4c <_Balloc>
 8012f3e:	4602      	mov	r2, r0
 8012f40:	b928      	cbnz	r0, 8012f4e <__i2b+0x1a>
 8012f42:	4b05      	ldr	r3, [pc, #20]	@ (8012f58 <__i2b+0x24>)
 8012f44:	4805      	ldr	r0, [pc, #20]	@ (8012f5c <__i2b+0x28>)
 8012f46:	f240 1145 	movw	r1, #325	@ 0x145
 8012f4a:	f7fe fe45 	bl	8011bd8 <__assert_func>
 8012f4e:	2301      	movs	r3, #1
 8012f50:	6144      	str	r4, [r0, #20]
 8012f52:	6103      	str	r3, [r0, #16]
 8012f54:	bd10      	pop	{r4, pc}
 8012f56:	bf00      	nop
 8012f58:	08014009 	.word	0x08014009
 8012f5c:	0801402b 	.word	0x0801402b

08012f60 <__multiply>:
 8012f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f64:	4614      	mov	r4, r2
 8012f66:	690a      	ldr	r2, [r1, #16]
 8012f68:	6923      	ldr	r3, [r4, #16]
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	bfa8      	it	ge
 8012f6e:	4623      	movge	r3, r4
 8012f70:	460f      	mov	r7, r1
 8012f72:	bfa4      	itt	ge
 8012f74:	460c      	movge	r4, r1
 8012f76:	461f      	movge	r7, r3
 8012f78:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012f7c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012f80:	68a3      	ldr	r3, [r4, #8]
 8012f82:	6861      	ldr	r1, [r4, #4]
 8012f84:	eb0a 0609 	add.w	r6, sl, r9
 8012f88:	42b3      	cmp	r3, r6
 8012f8a:	b085      	sub	sp, #20
 8012f8c:	bfb8      	it	lt
 8012f8e:	3101      	addlt	r1, #1
 8012f90:	f7ff fedc 	bl	8012d4c <_Balloc>
 8012f94:	b930      	cbnz	r0, 8012fa4 <__multiply+0x44>
 8012f96:	4602      	mov	r2, r0
 8012f98:	4b44      	ldr	r3, [pc, #272]	@ (80130ac <__multiply+0x14c>)
 8012f9a:	4845      	ldr	r0, [pc, #276]	@ (80130b0 <__multiply+0x150>)
 8012f9c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012fa0:	f7fe fe1a 	bl	8011bd8 <__assert_func>
 8012fa4:	f100 0514 	add.w	r5, r0, #20
 8012fa8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012fac:	462b      	mov	r3, r5
 8012fae:	2200      	movs	r2, #0
 8012fb0:	4543      	cmp	r3, r8
 8012fb2:	d321      	bcc.n	8012ff8 <__multiply+0x98>
 8012fb4:	f107 0114 	add.w	r1, r7, #20
 8012fb8:	f104 0214 	add.w	r2, r4, #20
 8012fbc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012fc0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012fc4:	9302      	str	r3, [sp, #8]
 8012fc6:	1b13      	subs	r3, r2, r4
 8012fc8:	3b15      	subs	r3, #21
 8012fca:	f023 0303 	bic.w	r3, r3, #3
 8012fce:	3304      	adds	r3, #4
 8012fd0:	f104 0715 	add.w	r7, r4, #21
 8012fd4:	42ba      	cmp	r2, r7
 8012fd6:	bf38      	it	cc
 8012fd8:	2304      	movcc	r3, #4
 8012fda:	9301      	str	r3, [sp, #4]
 8012fdc:	9b02      	ldr	r3, [sp, #8]
 8012fde:	9103      	str	r1, [sp, #12]
 8012fe0:	428b      	cmp	r3, r1
 8012fe2:	d80c      	bhi.n	8012ffe <__multiply+0x9e>
 8012fe4:	2e00      	cmp	r6, #0
 8012fe6:	dd03      	ble.n	8012ff0 <__multiply+0x90>
 8012fe8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d05b      	beq.n	80130a8 <__multiply+0x148>
 8012ff0:	6106      	str	r6, [r0, #16]
 8012ff2:	b005      	add	sp, #20
 8012ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ff8:	f843 2b04 	str.w	r2, [r3], #4
 8012ffc:	e7d8      	b.n	8012fb0 <__multiply+0x50>
 8012ffe:	f8b1 a000 	ldrh.w	sl, [r1]
 8013002:	f1ba 0f00 	cmp.w	sl, #0
 8013006:	d024      	beq.n	8013052 <__multiply+0xf2>
 8013008:	f104 0e14 	add.w	lr, r4, #20
 801300c:	46a9      	mov	r9, r5
 801300e:	f04f 0c00 	mov.w	ip, #0
 8013012:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013016:	f8d9 3000 	ldr.w	r3, [r9]
 801301a:	fa1f fb87 	uxth.w	fp, r7
 801301e:	b29b      	uxth	r3, r3
 8013020:	fb0a 330b 	mla	r3, sl, fp, r3
 8013024:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013028:	f8d9 7000 	ldr.w	r7, [r9]
 801302c:	4463      	add	r3, ip
 801302e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013032:	fb0a c70b 	mla	r7, sl, fp, ip
 8013036:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801303a:	b29b      	uxth	r3, r3
 801303c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013040:	4572      	cmp	r2, lr
 8013042:	f849 3b04 	str.w	r3, [r9], #4
 8013046:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801304a:	d8e2      	bhi.n	8013012 <__multiply+0xb2>
 801304c:	9b01      	ldr	r3, [sp, #4]
 801304e:	f845 c003 	str.w	ip, [r5, r3]
 8013052:	9b03      	ldr	r3, [sp, #12]
 8013054:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013058:	3104      	adds	r1, #4
 801305a:	f1b9 0f00 	cmp.w	r9, #0
 801305e:	d021      	beq.n	80130a4 <__multiply+0x144>
 8013060:	682b      	ldr	r3, [r5, #0]
 8013062:	f104 0c14 	add.w	ip, r4, #20
 8013066:	46ae      	mov	lr, r5
 8013068:	f04f 0a00 	mov.w	sl, #0
 801306c:	f8bc b000 	ldrh.w	fp, [ip]
 8013070:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013074:	fb09 770b 	mla	r7, r9, fp, r7
 8013078:	4457      	add	r7, sl
 801307a:	b29b      	uxth	r3, r3
 801307c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013080:	f84e 3b04 	str.w	r3, [lr], #4
 8013084:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013088:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801308c:	f8be 3000 	ldrh.w	r3, [lr]
 8013090:	fb09 330a 	mla	r3, r9, sl, r3
 8013094:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013098:	4562      	cmp	r2, ip
 801309a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801309e:	d8e5      	bhi.n	801306c <__multiply+0x10c>
 80130a0:	9f01      	ldr	r7, [sp, #4]
 80130a2:	51eb      	str	r3, [r5, r7]
 80130a4:	3504      	adds	r5, #4
 80130a6:	e799      	b.n	8012fdc <__multiply+0x7c>
 80130a8:	3e01      	subs	r6, #1
 80130aa:	e79b      	b.n	8012fe4 <__multiply+0x84>
 80130ac:	08014009 	.word	0x08014009
 80130b0:	0801402b 	.word	0x0801402b

080130b4 <__pow5mult>:
 80130b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130b8:	4615      	mov	r5, r2
 80130ba:	f012 0203 	ands.w	r2, r2, #3
 80130be:	4607      	mov	r7, r0
 80130c0:	460e      	mov	r6, r1
 80130c2:	d007      	beq.n	80130d4 <__pow5mult+0x20>
 80130c4:	4c25      	ldr	r4, [pc, #148]	@ (801315c <__pow5mult+0xa8>)
 80130c6:	3a01      	subs	r2, #1
 80130c8:	2300      	movs	r3, #0
 80130ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80130ce:	f7ff fe9f 	bl	8012e10 <__multadd>
 80130d2:	4606      	mov	r6, r0
 80130d4:	10ad      	asrs	r5, r5, #2
 80130d6:	d03d      	beq.n	8013154 <__pow5mult+0xa0>
 80130d8:	69fc      	ldr	r4, [r7, #28]
 80130da:	b97c      	cbnz	r4, 80130fc <__pow5mult+0x48>
 80130dc:	2010      	movs	r0, #16
 80130de:	f7fe f9c3 	bl	8011468 <malloc>
 80130e2:	4602      	mov	r2, r0
 80130e4:	61f8      	str	r0, [r7, #28]
 80130e6:	b928      	cbnz	r0, 80130f4 <__pow5mult+0x40>
 80130e8:	4b1d      	ldr	r3, [pc, #116]	@ (8013160 <__pow5mult+0xac>)
 80130ea:	481e      	ldr	r0, [pc, #120]	@ (8013164 <__pow5mult+0xb0>)
 80130ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80130f0:	f7fe fd72 	bl	8011bd8 <__assert_func>
 80130f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80130f8:	6004      	str	r4, [r0, #0]
 80130fa:	60c4      	str	r4, [r0, #12]
 80130fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013100:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013104:	b94c      	cbnz	r4, 801311a <__pow5mult+0x66>
 8013106:	f240 2171 	movw	r1, #625	@ 0x271
 801310a:	4638      	mov	r0, r7
 801310c:	f7ff ff12 	bl	8012f34 <__i2b>
 8013110:	2300      	movs	r3, #0
 8013112:	f8c8 0008 	str.w	r0, [r8, #8]
 8013116:	4604      	mov	r4, r0
 8013118:	6003      	str	r3, [r0, #0]
 801311a:	f04f 0900 	mov.w	r9, #0
 801311e:	07eb      	lsls	r3, r5, #31
 8013120:	d50a      	bpl.n	8013138 <__pow5mult+0x84>
 8013122:	4631      	mov	r1, r6
 8013124:	4622      	mov	r2, r4
 8013126:	4638      	mov	r0, r7
 8013128:	f7ff ff1a 	bl	8012f60 <__multiply>
 801312c:	4631      	mov	r1, r6
 801312e:	4680      	mov	r8, r0
 8013130:	4638      	mov	r0, r7
 8013132:	f7ff fe4b 	bl	8012dcc <_Bfree>
 8013136:	4646      	mov	r6, r8
 8013138:	106d      	asrs	r5, r5, #1
 801313a:	d00b      	beq.n	8013154 <__pow5mult+0xa0>
 801313c:	6820      	ldr	r0, [r4, #0]
 801313e:	b938      	cbnz	r0, 8013150 <__pow5mult+0x9c>
 8013140:	4622      	mov	r2, r4
 8013142:	4621      	mov	r1, r4
 8013144:	4638      	mov	r0, r7
 8013146:	f7ff ff0b 	bl	8012f60 <__multiply>
 801314a:	6020      	str	r0, [r4, #0]
 801314c:	f8c0 9000 	str.w	r9, [r0]
 8013150:	4604      	mov	r4, r0
 8013152:	e7e4      	b.n	801311e <__pow5mult+0x6a>
 8013154:	4630      	mov	r0, r6
 8013156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801315a:	bf00      	nop
 801315c:	08014084 	.word	0x08014084
 8013160:	08013df8 	.word	0x08013df8
 8013164:	0801402b 	.word	0x0801402b

08013168 <__lshift>:
 8013168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801316c:	460c      	mov	r4, r1
 801316e:	6849      	ldr	r1, [r1, #4]
 8013170:	6923      	ldr	r3, [r4, #16]
 8013172:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013176:	68a3      	ldr	r3, [r4, #8]
 8013178:	4607      	mov	r7, r0
 801317a:	4691      	mov	r9, r2
 801317c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013180:	f108 0601 	add.w	r6, r8, #1
 8013184:	42b3      	cmp	r3, r6
 8013186:	db0b      	blt.n	80131a0 <__lshift+0x38>
 8013188:	4638      	mov	r0, r7
 801318a:	f7ff fddf 	bl	8012d4c <_Balloc>
 801318e:	4605      	mov	r5, r0
 8013190:	b948      	cbnz	r0, 80131a6 <__lshift+0x3e>
 8013192:	4602      	mov	r2, r0
 8013194:	4b28      	ldr	r3, [pc, #160]	@ (8013238 <__lshift+0xd0>)
 8013196:	4829      	ldr	r0, [pc, #164]	@ (801323c <__lshift+0xd4>)
 8013198:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801319c:	f7fe fd1c 	bl	8011bd8 <__assert_func>
 80131a0:	3101      	adds	r1, #1
 80131a2:	005b      	lsls	r3, r3, #1
 80131a4:	e7ee      	b.n	8013184 <__lshift+0x1c>
 80131a6:	2300      	movs	r3, #0
 80131a8:	f100 0114 	add.w	r1, r0, #20
 80131ac:	f100 0210 	add.w	r2, r0, #16
 80131b0:	4618      	mov	r0, r3
 80131b2:	4553      	cmp	r3, sl
 80131b4:	db33      	blt.n	801321e <__lshift+0xb6>
 80131b6:	6920      	ldr	r0, [r4, #16]
 80131b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80131bc:	f104 0314 	add.w	r3, r4, #20
 80131c0:	f019 091f 	ands.w	r9, r9, #31
 80131c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80131c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80131cc:	d02b      	beq.n	8013226 <__lshift+0xbe>
 80131ce:	f1c9 0e20 	rsb	lr, r9, #32
 80131d2:	468a      	mov	sl, r1
 80131d4:	2200      	movs	r2, #0
 80131d6:	6818      	ldr	r0, [r3, #0]
 80131d8:	fa00 f009 	lsl.w	r0, r0, r9
 80131dc:	4310      	orrs	r0, r2
 80131de:	f84a 0b04 	str.w	r0, [sl], #4
 80131e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80131e6:	459c      	cmp	ip, r3
 80131e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80131ec:	d8f3      	bhi.n	80131d6 <__lshift+0x6e>
 80131ee:	ebac 0304 	sub.w	r3, ip, r4
 80131f2:	3b15      	subs	r3, #21
 80131f4:	f023 0303 	bic.w	r3, r3, #3
 80131f8:	3304      	adds	r3, #4
 80131fa:	f104 0015 	add.w	r0, r4, #21
 80131fe:	4584      	cmp	ip, r0
 8013200:	bf38      	it	cc
 8013202:	2304      	movcc	r3, #4
 8013204:	50ca      	str	r2, [r1, r3]
 8013206:	b10a      	cbz	r2, 801320c <__lshift+0xa4>
 8013208:	f108 0602 	add.w	r6, r8, #2
 801320c:	3e01      	subs	r6, #1
 801320e:	4638      	mov	r0, r7
 8013210:	612e      	str	r6, [r5, #16]
 8013212:	4621      	mov	r1, r4
 8013214:	f7ff fdda 	bl	8012dcc <_Bfree>
 8013218:	4628      	mov	r0, r5
 801321a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801321e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013222:	3301      	adds	r3, #1
 8013224:	e7c5      	b.n	80131b2 <__lshift+0x4a>
 8013226:	3904      	subs	r1, #4
 8013228:	f853 2b04 	ldr.w	r2, [r3], #4
 801322c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013230:	459c      	cmp	ip, r3
 8013232:	d8f9      	bhi.n	8013228 <__lshift+0xc0>
 8013234:	e7ea      	b.n	801320c <__lshift+0xa4>
 8013236:	bf00      	nop
 8013238:	08014009 	.word	0x08014009
 801323c:	0801402b 	.word	0x0801402b

08013240 <__mcmp>:
 8013240:	690a      	ldr	r2, [r1, #16]
 8013242:	4603      	mov	r3, r0
 8013244:	6900      	ldr	r0, [r0, #16]
 8013246:	1a80      	subs	r0, r0, r2
 8013248:	b530      	push	{r4, r5, lr}
 801324a:	d10e      	bne.n	801326a <__mcmp+0x2a>
 801324c:	3314      	adds	r3, #20
 801324e:	3114      	adds	r1, #20
 8013250:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013254:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013258:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801325c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013260:	4295      	cmp	r5, r2
 8013262:	d003      	beq.n	801326c <__mcmp+0x2c>
 8013264:	d205      	bcs.n	8013272 <__mcmp+0x32>
 8013266:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801326a:	bd30      	pop	{r4, r5, pc}
 801326c:	42a3      	cmp	r3, r4
 801326e:	d3f3      	bcc.n	8013258 <__mcmp+0x18>
 8013270:	e7fb      	b.n	801326a <__mcmp+0x2a>
 8013272:	2001      	movs	r0, #1
 8013274:	e7f9      	b.n	801326a <__mcmp+0x2a>
	...

08013278 <__mdiff>:
 8013278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801327c:	4689      	mov	r9, r1
 801327e:	4606      	mov	r6, r0
 8013280:	4611      	mov	r1, r2
 8013282:	4648      	mov	r0, r9
 8013284:	4614      	mov	r4, r2
 8013286:	f7ff ffdb 	bl	8013240 <__mcmp>
 801328a:	1e05      	subs	r5, r0, #0
 801328c:	d112      	bne.n	80132b4 <__mdiff+0x3c>
 801328e:	4629      	mov	r1, r5
 8013290:	4630      	mov	r0, r6
 8013292:	f7ff fd5b 	bl	8012d4c <_Balloc>
 8013296:	4602      	mov	r2, r0
 8013298:	b928      	cbnz	r0, 80132a6 <__mdiff+0x2e>
 801329a:	4b3f      	ldr	r3, [pc, #252]	@ (8013398 <__mdiff+0x120>)
 801329c:	f240 2137 	movw	r1, #567	@ 0x237
 80132a0:	483e      	ldr	r0, [pc, #248]	@ (801339c <__mdiff+0x124>)
 80132a2:	f7fe fc99 	bl	8011bd8 <__assert_func>
 80132a6:	2301      	movs	r3, #1
 80132a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80132ac:	4610      	mov	r0, r2
 80132ae:	b003      	add	sp, #12
 80132b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132b4:	bfbc      	itt	lt
 80132b6:	464b      	movlt	r3, r9
 80132b8:	46a1      	movlt	r9, r4
 80132ba:	4630      	mov	r0, r6
 80132bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80132c0:	bfba      	itte	lt
 80132c2:	461c      	movlt	r4, r3
 80132c4:	2501      	movlt	r5, #1
 80132c6:	2500      	movge	r5, #0
 80132c8:	f7ff fd40 	bl	8012d4c <_Balloc>
 80132cc:	4602      	mov	r2, r0
 80132ce:	b918      	cbnz	r0, 80132d8 <__mdiff+0x60>
 80132d0:	4b31      	ldr	r3, [pc, #196]	@ (8013398 <__mdiff+0x120>)
 80132d2:	f240 2145 	movw	r1, #581	@ 0x245
 80132d6:	e7e3      	b.n	80132a0 <__mdiff+0x28>
 80132d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80132dc:	6926      	ldr	r6, [r4, #16]
 80132de:	60c5      	str	r5, [r0, #12]
 80132e0:	f109 0310 	add.w	r3, r9, #16
 80132e4:	f109 0514 	add.w	r5, r9, #20
 80132e8:	f104 0e14 	add.w	lr, r4, #20
 80132ec:	f100 0b14 	add.w	fp, r0, #20
 80132f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80132f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80132f8:	9301      	str	r3, [sp, #4]
 80132fa:	46d9      	mov	r9, fp
 80132fc:	f04f 0c00 	mov.w	ip, #0
 8013300:	9b01      	ldr	r3, [sp, #4]
 8013302:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013306:	f853 af04 	ldr.w	sl, [r3, #4]!
 801330a:	9301      	str	r3, [sp, #4]
 801330c:	fa1f f38a 	uxth.w	r3, sl
 8013310:	4619      	mov	r1, r3
 8013312:	b283      	uxth	r3, r0
 8013314:	1acb      	subs	r3, r1, r3
 8013316:	0c00      	lsrs	r0, r0, #16
 8013318:	4463      	add	r3, ip
 801331a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801331e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013322:	b29b      	uxth	r3, r3
 8013324:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013328:	4576      	cmp	r6, lr
 801332a:	f849 3b04 	str.w	r3, [r9], #4
 801332e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013332:	d8e5      	bhi.n	8013300 <__mdiff+0x88>
 8013334:	1b33      	subs	r3, r6, r4
 8013336:	3b15      	subs	r3, #21
 8013338:	f023 0303 	bic.w	r3, r3, #3
 801333c:	3415      	adds	r4, #21
 801333e:	3304      	adds	r3, #4
 8013340:	42a6      	cmp	r6, r4
 8013342:	bf38      	it	cc
 8013344:	2304      	movcc	r3, #4
 8013346:	441d      	add	r5, r3
 8013348:	445b      	add	r3, fp
 801334a:	461e      	mov	r6, r3
 801334c:	462c      	mov	r4, r5
 801334e:	4544      	cmp	r4, r8
 8013350:	d30e      	bcc.n	8013370 <__mdiff+0xf8>
 8013352:	f108 0103 	add.w	r1, r8, #3
 8013356:	1b49      	subs	r1, r1, r5
 8013358:	f021 0103 	bic.w	r1, r1, #3
 801335c:	3d03      	subs	r5, #3
 801335e:	45a8      	cmp	r8, r5
 8013360:	bf38      	it	cc
 8013362:	2100      	movcc	r1, #0
 8013364:	440b      	add	r3, r1
 8013366:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801336a:	b191      	cbz	r1, 8013392 <__mdiff+0x11a>
 801336c:	6117      	str	r7, [r2, #16]
 801336e:	e79d      	b.n	80132ac <__mdiff+0x34>
 8013370:	f854 1b04 	ldr.w	r1, [r4], #4
 8013374:	46e6      	mov	lr, ip
 8013376:	0c08      	lsrs	r0, r1, #16
 8013378:	fa1c fc81 	uxtah	ip, ip, r1
 801337c:	4471      	add	r1, lr
 801337e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013382:	b289      	uxth	r1, r1
 8013384:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013388:	f846 1b04 	str.w	r1, [r6], #4
 801338c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013390:	e7dd      	b.n	801334e <__mdiff+0xd6>
 8013392:	3f01      	subs	r7, #1
 8013394:	e7e7      	b.n	8013366 <__mdiff+0xee>
 8013396:	bf00      	nop
 8013398:	08014009 	.word	0x08014009
 801339c:	0801402b 	.word	0x0801402b

080133a0 <__d2b>:
 80133a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80133a4:	460f      	mov	r7, r1
 80133a6:	2101      	movs	r1, #1
 80133a8:	ec59 8b10 	vmov	r8, r9, d0
 80133ac:	4616      	mov	r6, r2
 80133ae:	f7ff fccd 	bl	8012d4c <_Balloc>
 80133b2:	4604      	mov	r4, r0
 80133b4:	b930      	cbnz	r0, 80133c4 <__d2b+0x24>
 80133b6:	4602      	mov	r2, r0
 80133b8:	4b23      	ldr	r3, [pc, #140]	@ (8013448 <__d2b+0xa8>)
 80133ba:	4824      	ldr	r0, [pc, #144]	@ (801344c <__d2b+0xac>)
 80133bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80133c0:	f7fe fc0a 	bl	8011bd8 <__assert_func>
 80133c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80133c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80133cc:	b10d      	cbz	r5, 80133d2 <__d2b+0x32>
 80133ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80133d2:	9301      	str	r3, [sp, #4]
 80133d4:	f1b8 0300 	subs.w	r3, r8, #0
 80133d8:	d023      	beq.n	8013422 <__d2b+0x82>
 80133da:	4668      	mov	r0, sp
 80133dc:	9300      	str	r3, [sp, #0]
 80133de:	f7ff fd7c 	bl	8012eda <__lo0bits>
 80133e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80133e6:	b1d0      	cbz	r0, 801341e <__d2b+0x7e>
 80133e8:	f1c0 0320 	rsb	r3, r0, #32
 80133ec:	fa02 f303 	lsl.w	r3, r2, r3
 80133f0:	430b      	orrs	r3, r1
 80133f2:	40c2      	lsrs	r2, r0
 80133f4:	6163      	str	r3, [r4, #20]
 80133f6:	9201      	str	r2, [sp, #4]
 80133f8:	9b01      	ldr	r3, [sp, #4]
 80133fa:	61a3      	str	r3, [r4, #24]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	bf0c      	ite	eq
 8013400:	2201      	moveq	r2, #1
 8013402:	2202      	movne	r2, #2
 8013404:	6122      	str	r2, [r4, #16]
 8013406:	b1a5      	cbz	r5, 8013432 <__d2b+0x92>
 8013408:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801340c:	4405      	add	r5, r0
 801340e:	603d      	str	r5, [r7, #0]
 8013410:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013414:	6030      	str	r0, [r6, #0]
 8013416:	4620      	mov	r0, r4
 8013418:	b003      	add	sp, #12
 801341a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801341e:	6161      	str	r1, [r4, #20]
 8013420:	e7ea      	b.n	80133f8 <__d2b+0x58>
 8013422:	a801      	add	r0, sp, #4
 8013424:	f7ff fd59 	bl	8012eda <__lo0bits>
 8013428:	9b01      	ldr	r3, [sp, #4]
 801342a:	6163      	str	r3, [r4, #20]
 801342c:	3020      	adds	r0, #32
 801342e:	2201      	movs	r2, #1
 8013430:	e7e8      	b.n	8013404 <__d2b+0x64>
 8013432:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013436:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801343a:	6038      	str	r0, [r7, #0]
 801343c:	6918      	ldr	r0, [r3, #16]
 801343e:	f7ff fd2d 	bl	8012e9c <__hi0bits>
 8013442:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013446:	e7e5      	b.n	8013414 <__d2b+0x74>
 8013448:	08014009 	.word	0x08014009
 801344c:	0801402b 	.word	0x0801402b

08013450 <__sread>:
 8013450:	b510      	push	{r4, lr}
 8013452:	460c      	mov	r4, r1
 8013454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013458:	f000 f8ba 	bl	80135d0 <_read_r>
 801345c:	2800      	cmp	r0, #0
 801345e:	bfab      	itete	ge
 8013460:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013462:	89a3      	ldrhlt	r3, [r4, #12]
 8013464:	181b      	addge	r3, r3, r0
 8013466:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801346a:	bfac      	ite	ge
 801346c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801346e:	81a3      	strhlt	r3, [r4, #12]
 8013470:	bd10      	pop	{r4, pc}

08013472 <__swrite>:
 8013472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013476:	461f      	mov	r7, r3
 8013478:	898b      	ldrh	r3, [r1, #12]
 801347a:	05db      	lsls	r3, r3, #23
 801347c:	4605      	mov	r5, r0
 801347e:	460c      	mov	r4, r1
 8013480:	4616      	mov	r6, r2
 8013482:	d505      	bpl.n	8013490 <__swrite+0x1e>
 8013484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013488:	2302      	movs	r3, #2
 801348a:	2200      	movs	r2, #0
 801348c:	f000 f88e 	bl	80135ac <_lseek_r>
 8013490:	89a3      	ldrh	r3, [r4, #12]
 8013492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013496:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801349a:	81a3      	strh	r3, [r4, #12]
 801349c:	4632      	mov	r2, r6
 801349e:	463b      	mov	r3, r7
 80134a0:	4628      	mov	r0, r5
 80134a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80134a6:	f000 b8a5 	b.w	80135f4 <_write_r>

080134aa <__sseek>:
 80134aa:	b510      	push	{r4, lr}
 80134ac:	460c      	mov	r4, r1
 80134ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134b2:	f000 f87b 	bl	80135ac <_lseek_r>
 80134b6:	1c43      	adds	r3, r0, #1
 80134b8:	89a3      	ldrh	r3, [r4, #12]
 80134ba:	bf15      	itete	ne
 80134bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80134be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80134c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80134c6:	81a3      	strheq	r3, [r4, #12]
 80134c8:	bf18      	it	ne
 80134ca:	81a3      	strhne	r3, [r4, #12]
 80134cc:	bd10      	pop	{r4, pc}

080134ce <__sclose>:
 80134ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134d2:	f000 b85b 	b.w	801358c <_close_r>
	...

080134d8 <fiprintf>:
 80134d8:	b40e      	push	{r1, r2, r3}
 80134da:	b503      	push	{r0, r1, lr}
 80134dc:	4601      	mov	r1, r0
 80134de:	ab03      	add	r3, sp, #12
 80134e0:	4805      	ldr	r0, [pc, #20]	@ (80134f8 <fiprintf+0x20>)
 80134e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80134e6:	6800      	ldr	r0, [r0, #0]
 80134e8:	9301      	str	r3, [sp, #4]
 80134ea:	f000 f8d9 	bl	80136a0 <_vfiprintf_r>
 80134ee:	b002      	add	sp, #8
 80134f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80134f4:	b003      	add	sp, #12
 80134f6:	4770      	bx	lr
 80134f8:	200000ec 	.word	0x200000ec

080134fc <_realloc_r>:
 80134fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013500:	4680      	mov	r8, r0
 8013502:	4615      	mov	r5, r2
 8013504:	460c      	mov	r4, r1
 8013506:	b921      	cbnz	r1, 8013512 <_realloc_r+0x16>
 8013508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801350c:	4611      	mov	r1, r2
 801350e:	f7fd bfd5 	b.w	80114bc <_malloc_r>
 8013512:	b92a      	cbnz	r2, 8013520 <_realloc_r+0x24>
 8013514:	f7ff f9cc 	bl	80128b0 <_free_r>
 8013518:	2400      	movs	r4, #0
 801351a:	4620      	mov	r0, r4
 801351c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013520:	f000 f9e8 	bl	80138f4 <_malloc_usable_size_r>
 8013524:	4285      	cmp	r5, r0
 8013526:	4606      	mov	r6, r0
 8013528:	d802      	bhi.n	8013530 <_realloc_r+0x34>
 801352a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801352e:	d8f4      	bhi.n	801351a <_realloc_r+0x1e>
 8013530:	4629      	mov	r1, r5
 8013532:	4640      	mov	r0, r8
 8013534:	f7fd ffc2 	bl	80114bc <_malloc_r>
 8013538:	4607      	mov	r7, r0
 801353a:	2800      	cmp	r0, #0
 801353c:	d0ec      	beq.n	8013518 <_realloc_r+0x1c>
 801353e:	42b5      	cmp	r5, r6
 8013540:	462a      	mov	r2, r5
 8013542:	4621      	mov	r1, r4
 8013544:	bf28      	it	cs
 8013546:	4632      	movcs	r2, r6
 8013548:	f7fe fb38 	bl	8011bbc <memcpy>
 801354c:	4621      	mov	r1, r4
 801354e:	4640      	mov	r0, r8
 8013550:	f7ff f9ae 	bl	80128b0 <_free_r>
 8013554:	463c      	mov	r4, r7
 8013556:	e7e0      	b.n	801351a <_realloc_r+0x1e>

08013558 <memmove>:
 8013558:	4288      	cmp	r0, r1
 801355a:	b510      	push	{r4, lr}
 801355c:	eb01 0402 	add.w	r4, r1, r2
 8013560:	d902      	bls.n	8013568 <memmove+0x10>
 8013562:	4284      	cmp	r4, r0
 8013564:	4623      	mov	r3, r4
 8013566:	d807      	bhi.n	8013578 <memmove+0x20>
 8013568:	1e43      	subs	r3, r0, #1
 801356a:	42a1      	cmp	r1, r4
 801356c:	d008      	beq.n	8013580 <memmove+0x28>
 801356e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013572:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013576:	e7f8      	b.n	801356a <memmove+0x12>
 8013578:	4402      	add	r2, r0
 801357a:	4601      	mov	r1, r0
 801357c:	428a      	cmp	r2, r1
 801357e:	d100      	bne.n	8013582 <memmove+0x2a>
 8013580:	bd10      	pop	{r4, pc}
 8013582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013586:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801358a:	e7f7      	b.n	801357c <memmove+0x24>

0801358c <_close_r>:
 801358c:	b538      	push	{r3, r4, r5, lr}
 801358e:	4d06      	ldr	r5, [pc, #24]	@ (80135a8 <_close_r+0x1c>)
 8013590:	2300      	movs	r3, #0
 8013592:	4604      	mov	r4, r0
 8013594:	4608      	mov	r0, r1
 8013596:	602b      	str	r3, [r5, #0]
 8013598:	f7ef fbbe 	bl	8002d18 <_close>
 801359c:	1c43      	adds	r3, r0, #1
 801359e:	d102      	bne.n	80135a6 <_close_r+0x1a>
 80135a0:	682b      	ldr	r3, [r5, #0]
 80135a2:	b103      	cbz	r3, 80135a6 <_close_r+0x1a>
 80135a4:	6023      	str	r3, [r4, #0]
 80135a6:	bd38      	pop	{r3, r4, r5, pc}
 80135a8:	200016ec 	.word	0x200016ec

080135ac <_lseek_r>:
 80135ac:	b538      	push	{r3, r4, r5, lr}
 80135ae:	4d07      	ldr	r5, [pc, #28]	@ (80135cc <_lseek_r+0x20>)
 80135b0:	4604      	mov	r4, r0
 80135b2:	4608      	mov	r0, r1
 80135b4:	4611      	mov	r1, r2
 80135b6:	2200      	movs	r2, #0
 80135b8:	602a      	str	r2, [r5, #0]
 80135ba:	461a      	mov	r2, r3
 80135bc:	f7ef fbd3 	bl	8002d66 <_lseek>
 80135c0:	1c43      	adds	r3, r0, #1
 80135c2:	d102      	bne.n	80135ca <_lseek_r+0x1e>
 80135c4:	682b      	ldr	r3, [r5, #0]
 80135c6:	b103      	cbz	r3, 80135ca <_lseek_r+0x1e>
 80135c8:	6023      	str	r3, [r4, #0]
 80135ca:	bd38      	pop	{r3, r4, r5, pc}
 80135cc:	200016ec 	.word	0x200016ec

080135d0 <_read_r>:
 80135d0:	b538      	push	{r3, r4, r5, lr}
 80135d2:	4d07      	ldr	r5, [pc, #28]	@ (80135f0 <_read_r+0x20>)
 80135d4:	4604      	mov	r4, r0
 80135d6:	4608      	mov	r0, r1
 80135d8:	4611      	mov	r1, r2
 80135da:	2200      	movs	r2, #0
 80135dc:	602a      	str	r2, [r5, #0]
 80135de:	461a      	mov	r2, r3
 80135e0:	f7ef fb7d 	bl	8002cde <_read>
 80135e4:	1c43      	adds	r3, r0, #1
 80135e6:	d102      	bne.n	80135ee <_read_r+0x1e>
 80135e8:	682b      	ldr	r3, [r5, #0]
 80135ea:	b103      	cbz	r3, 80135ee <_read_r+0x1e>
 80135ec:	6023      	str	r3, [r4, #0]
 80135ee:	bd38      	pop	{r3, r4, r5, pc}
 80135f0:	200016ec 	.word	0x200016ec

080135f4 <_write_r>:
 80135f4:	b538      	push	{r3, r4, r5, lr}
 80135f6:	4d07      	ldr	r5, [pc, #28]	@ (8013614 <_write_r+0x20>)
 80135f8:	4604      	mov	r4, r0
 80135fa:	4608      	mov	r0, r1
 80135fc:	4611      	mov	r1, r2
 80135fe:	2200      	movs	r2, #0
 8013600:	602a      	str	r2, [r5, #0]
 8013602:	461a      	mov	r2, r3
 8013604:	f7ed fd24 	bl	8001050 <_write>
 8013608:	1c43      	adds	r3, r0, #1
 801360a:	d102      	bne.n	8013612 <_write_r+0x1e>
 801360c:	682b      	ldr	r3, [r5, #0]
 801360e:	b103      	cbz	r3, 8013612 <_write_r+0x1e>
 8013610:	6023      	str	r3, [r4, #0]
 8013612:	bd38      	pop	{r3, r4, r5, pc}
 8013614:	200016ec 	.word	0x200016ec

08013618 <abort>:
 8013618:	b508      	push	{r3, lr}
 801361a:	2006      	movs	r0, #6
 801361c:	f000 fac0 	bl	8013ba0 <raise>
 8013620:	2001      	movs	r0, #1
 8013622:	f7ef fb51 	bl	8002cc8 <_exit>

08013626 <_calloc_r>:
 8013626:	b570      	push	{r4, r5, r6, lr}
 8013628:	fba1 5402 	umull	r5, r4, r1, r2
 801362c:	b93c      	cbnz	r4, 801363e <_calloc_r+0x18>
 801362e:	4629      	mov	r1, r5
 8013630:	f7fd ff44 	bl	80114bc <_malloc_r>
 8013634:	4606      	mov	r6, r0
 8013636:	b928      	cbnz	r0, 8013644 <_calloc_r+0x1e>
 8013638:	2600      	movs	r6, #0
 801363a:	4630      	mov	r0, r6
 801363c:	bd70      	pop	{r4, r5, r6, pc}
 801363e:	220c      	movs	r2, #12
 8013640:	6002      	str	r2, [r0, #0]
 8013642:	e7f9      	b.n	8013638 <_calloc_r+0x12>
 8013644:	462a      	mov	r2, r5
 8013646:	4621      	mov	r1, r4
 8013648:	f7fe fa72 	bl	8011b30 <memset>
 801364c:	e7f5      	b.n	801363a <_calloc_r+0x14>

0801364e <__sfputc_r>:
 801364e:	6893      	ldr	r3, [r2, #8]
 8013650:	3b01      	subs	r3, #1
 8013652:	2b00      	cmp	r3, #0
 8013654:	b410      	push	{r4}
 8013656:	6093      	str	r3, [r2, #8]
 8013658:	da08      	bge.n	801366c <__sfputc_r+0x1e>
 801365a:	6994      	ldr	r4, [r2, #24]
 801365c:	42a3      	cmp	r3, r4
 801365e:	db01      	blt.n	8013664 <__sfputc_r+0x16>
 8013660:	290a      	cmp	r1, #10
 8013662:	d103      	bne.n	801366c <__sfputc_r+0x1e>
 8013664:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013668:	f000 b94c 	b.w	8013904 <__swbuf_r>
 801366c:	6813      	ldr	r3, [r2, #0]
 801366e:	1c58      	adds	r0, r3, #1
 8013670:	6010      	str	r0, [r2, #0]
 8013672:	7019      	strb	r1, [r3, #0]
 8013674:	4608      	mov	r0, r1
 8013676:	f85d 4b04 	ldr.w	r4, [sp], #4
 801367a:	4770      	bx	lr

0801367c <__sfputs_r>:
 801367c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801367e:	4606      	mov	r6, r0
 8013680:	460f      	mov	r7, r1
 8013682:	4614      	mov	r4, r2
 8013684:	18d5      	adds	r5, r2, r3
 8013686:	42ac      	cmp	r4, r5
 8013688:	d101      	bne.n	801368e <__sfputs_r+0x12>
 801368a:	2000      	movs	r0, #0
 801368c:	e007      	b.n	801369e <__sfputs_r+0x22>
 801368e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013692:	463a      	mov	r2, r7
 8013694:	4630      	mov	r0, r6
 8013696:	f7ff ffda 	bl	801364e <__sfputc_r>
 801369a:	1c43      	adds	r3, r0, #1
 801369c:	d1f3      	bne.n	8013686 <__sfputs_r+0xa>
 801369e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080136a0 <_vfiprintf_r>:
 80136a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136a4:	460d      	mov	r5, r1
 80136a6:	b09d      	sub	sp, #116	@ 0x74
 80136a8:	4614      	mov	r4, r2
 80136aa:	4698      	mov	r8, r3
 80136ac:	4606      	mov	r6, r0
 80136ae:	b118      	cbz	r0, 80136b8 <_vfiprintf_r+0x18>
 80136b0:	6a03      	ldr	r3, [r0, #32]
 80136b2:	b90b      	cbnz	r3, 80136b8 <_vfiprintf_r+0x18>
 80136b4:	f7fe fa06 	bl	8011ac4 <__sinit>
 80136b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80136ba:	07d9      	lsls	r1, r3, #31
 80136bc:	d405      	bmi.n	80136ca <_vfiprintf_r+0x2a>
 80136be:	89ab      	ldrh	r3, [r5, #12]
 80136c0:	059a      	lsls	r2, r3, #22
 80136c2:	d402      	bmi.n	80136ca <_vfiprintf_r+0x2a>
 80136c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80136c6:	f7ef fc6e 	bl	8002fa6 <__retarget_lock_acquire_recursive>
 80136ca:	89ab      	ldrh	r3, [r5, #12]
 80136cc:	071b      	lsls	r3, r3, #28
 80136ce:	d501      	bpl.n	80136d4 <_vfiprintf_r+0x34>
 80136d0:	692b      	ldr	r3, [r5, #16]
 80136d2:	b99b      	cbnz	r3, 80136fc <_vfiprintf_r+0x5c>
 80136d4:	4629      	mov	r1, r5
 80136d6:	4630      	mov	r0, r6
 80136d8:	f000 f952 	bl	8013980 <__swsetup_r>
 80136dc:	b170      	cbz	r0, 80136fc <_vfiprintf_r+0x5c>
 80136de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80136e0:	07dc      	lsls	r4, r3, #31
 80136e2:	d504      	bpl.n	80136ee <_vfiprintf_r+0x4e>
 80136e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80136e8:	b01d      	add	sp, #116	@ 0x74
 80136ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ee:	89ab      	ldrh	r3, [r5, #12]
 80136f0:	0598      	lsls	r0, r3, #22
 80136f2:	d4f7      	bmi.n	80136e4 <_vfiprintf_r+0x44>
 80136f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80136f6:	f7ef fc6b 	bl	8002fd0 <__retarget_lock_release_recursive>
 80136fa:	e7f3      	b.n	80136e4 <_vfiprintf_r+0x44>
 80136fc:	2300      	movs	r3, #0
 80136fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8013700:	2320      	movs	r3, #32
 8013702:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013706:	f8cd 800c 	str.w	r8, [sp, #12]
 801370a:	2330      	movs	r3, #48	@ 0x30
 801370c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80138bc <_vfiprintf_r+0x21c>
 8013710:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013714:	f04f 0901 	mov.w	r9, #1
 8013718:	4623      	mov	r3, r4
 801371a:	469a      	mov	sl, r3
 801371c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013720:	b10a      	cbz	r2, 8013726 <_vfiprintf_r+0x86>
 8013722:	2a25      	cmp	r2, #37	@ 0x25
 8013724:	d1f9      	bne.n	801371a <_vfiprintf_r+0x7a>
 8013726:	ebba 0b04 	subs.w	fp, sl, r4
 801372a:	d00b      	beq.n	8013744 <_vfiprintf_r+0xa4>
 801372c:	465b      	mov	r3, fp
 801372e:	4622      	mov	r2, r4
 8013730:	4629      	mov	r1, r5
 8013732:	4630      	mov	r0, r6
 8013734:	f7ff ffa2 	bl	801367c <__sfputs_r>
 8013738:	3001      	adds	r0, #1
 801373a:	f000 80a7 	beq.w	801388c <_vfiprintf_r+0x1ec>
 801373e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013740:	445a      	add	r2, fp
 8013742:	9209      	str	r2, [sp, #36]	@ 0x24
 8013744:	f89a 3000 	ldrb.w	r3, [sl]
 8013748:	2b00      	cmp	r3, #0
 801374a:	f000 809f 	beq.w	801388c <_vfiprintf_r+0x1ec>
 801374e:	2300      	movs	r3, #0
 8013750:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013758:	f10a 0a01 	add.w	sl, sl, #1
 801375c:	9304      	str	r3, [sp, #16]
 801375e:	9307      	str	r3, [sp, #28]
 8013760:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013764:	931a      	str	r3, [sp, #104]	@ 0x68
 8013766:	4654      	mov	r4, sl
 8013768:	2205      	movs	r2, #5
 801376a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801376e:	4853      	ldr	r0, [pc, #332]	@ (80138bc <_vfiprintf_r+0x21c>)
 8013770:	f7ec fd56 	bl	8000220 <memchr>
 8013774:	9a04      	ldr	r2, [sp, #16]
 8013776:	b9d8      	cbnz	r0, 80137b0 <_vfiprintf_r+0x110>
 8013778:	06d1      	lsls	r1, r2, #27
 801377a:	bf44      	itt	mi
 801377c:	2320      	movmi	r3, #32
 801377e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013782:	0713      	lsls	r3, r2, #28
 8013784:	bf44      	itt	mi
 8013786:	232b      	movmi	r3, #43	@ 0x2b
 8013788:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801378c:	f89a 3000 	ldrb.w	r3, [sl]
 8013790:	2b2a      	cmp	r3, #42	@ 0x2a
 8013792:	d015      	beq.n	80137c0 <_vfiprintf_r+0x120>
 8013794:	9a07      	ldr	r2, [sp, #28]
 8013796:	4654      	mov	r4, sl
 8013798:	2000      	movs	r0, #0
 801379a:	f04f 0c0a 	mov.w	ip, #10
 801379e:	4621      	mov	r1, r4
 80137a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80137a4:	3b30      	subs	r3, #48	@ 0x30
 80137a6:	2b09      	cmp	r3, #9
 80137a8:	d94b      	bls.n	8013842 <_vfiprintf_r+0x1a2>
 80137aa:	b1b0      	cbz	r0, 80137da <_vfiprintf_r+0x13a>
 80137ac:	9207      	str	r2, [sp, #28]
 80137ae:	e014      	b.n	80137da <_vfiprintf_r+0x13a>
 80137b0:	eba0 0308 	sub.w	r3, r0, r8
 80137b4:	fa09 f303 	lsl.w	r3, r9, r3
 80137b8:	4313      	orrs	r3, r2
 80137ba:	9304      	str	r3, [sp, #16]
 80137bc:	46a2      	mov	sl, r4
 80137be:	e7d2      	b.n	8013766 <_vfiprintf_r+0xc6>
 80137c0:	9b03      	ldr	r3, [sp, #12]
 80137c2:	1d19      	adds	r1, r3, #4
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	9103      	str	r1, [sp, #12]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	bfbb      	ittet	lt
 80137cc:	425b      	neglt	r3, r3
 80137ce:	f042 0202 	orrlt.w	r2, r2, #2
 80137d2:	9307      	strge	r3, [sp, #28]
 80137d4:	9307      	strlt	r3, [sp, #28]
 80137d6:	bfb8      	it	lt
 80137d8:	9204      	strlt	r2, [sp, #16]
 80137da:	7823      	ldrb	r3, [r4, #0]
 80137dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80137de:	d10a      	bne.n	80137f6 <_vfiprintf_r+0x156>
 80137e0:	7863      	ldrb	r3, [r4, #1]
 80137e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80137e4:	d132      	bne.n	801384c <_vfiprintf_r+0x1ac>
 80137e6:	9b03      	ldr	r3, [sp, #12]
 80137e8:	1d1a      	adds	r2, r3, #4
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	9203      	str	r2, [sp, #12]
 80137ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80137f2:	3402      	adds	r4, #2
 80137f4:	9305      	str	r3, [sp, #20]
 80137f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80138cc <_vfiprintf_r+0x22c>
 80137fa:	7821      	ldrb	r1, [r4, #0]
 80137fc:	2203      	movs	r2, #3
 80137fe:	4650      	mov	r0, sl
 8013800:	f7ec fd0e 	bl	8000220 <memchr>
 8013804:	b138      	cbz	r0, 8013816 <_vfiprintf_r+0x176>
 8013806:	9b04      	ldr	r3, [sp, #16]
 8013808:	eba0 000a 	sub.w	r0, r0, sl
 801380c:	2240      	movs	r2, #64	@ 0x40
 801380e:	4082      	lsls	r2, r0
 8013810:	4313      	orrs	r3, r2
 8013812:	3401      	adds	r4, #1
 8013814:	9304      	str	r3, [sp, #16]
 8013816:	f814 1b01 	ldrb.w	r1, [r4], #1
 801381a:	4829      	ldr	r0, [pc, #164]	@ (80138c0 <_vfiprintf_r+0x220>)
 801381c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013820:	2206      	movs	r2, #6
 8013822:	f7ec fcfd 	bl	8000220 <memchr>
 8013826:	2800      	cmp	r0, #0
 8013828:	d03f      	beq.n	80138aa <_vfiprintf_r+0x20a>
 801382a:	4b26      	ldr	r3, [pc, #152]	@ (80138c4 <_vfiprintf_r+0x224>)
 801382c:	bb1b      	cbnz	r3, 8013876 <_vfiprintf_r+0x1d6>
 801382e:	9b03      	ldr	r3, [sp, #12]
 8013830:	3307      	adds	r3, #7
 8013832:	f023 0307 	bic.w	r3, r3, #7
 8013836:	3308      	adds	r3, #8
 8013838:	9303      	str	r3, [sp, #12]
 801383a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801383c:	443b      	add	r3, r7
 801383e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013840:	e76a      	b.n	8013718 <_vfiprintf_r+0x78>
 8013842:	fb0c 3202 	mla	r2, ip, r2, r3
 8013846:	460c      	mov	r4, r1
 8013848:	2001      	movs	r0, #1
 801384a:	e7a8      	b.n	801379e <_vfiprintf_r+0xfe>
 801384c:	2300      	movs	r3, #0
 801384e:	3401      	adds	r4, #1
 8013850:	9305      	str	r3, [sp, #20]
 8013852:	4619      	mov	r1, r3
 8013854:	f04f 0c0a 	mov.w	ip, #10
 8013858:	4620      	mov	r0, r4
 801385a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801385e:	3a30      	subs	r2, #48	@ 0x30
 8013860:	2a09      	cmp	r2, #9
 8013862:	d903      	bls.n	801386c <_vfiprintf_r+0x1cc>
 8013864:	2b00      	cmp	r3, #0
 8013866:	d0c6      	beq.n	80137f6 <_vfiprintf_r+0x156>
 8013868:	9105      	str	r1, [sp, #20]
 801386a:	e7c4      	b.n	80137f6 <_vfiprintf_r+0x156>
 801386c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013870:	4604      	mov	r4, r0
 8013872:	2301      	movs	r3, #1
 8013874:	e7f0      	b.n	8013858 <_vfiprintf_r+0x1b8>
 8013876:	ab03      	add	r3, sp, #12
 8013878:	9300      	str	r3, [sp, #0]
 801387a:	462a      	mov	r2, r5
 801387c:	4b12      	ldr	r3, [pc, #72]	@ (80138c8 <_vfiprintf_r+0x228>)
 801387e:	a904      	add	r1, sp, #16
 8013880:	4630      	mov	r0, r6
 8013882:	f7fd fbc7 	bl	8011014 <_printf_float>
 8013886:	4607      	mov	r7, r0
 8013888:	1c78      	adds	r0, r7, #1
 801388a:	d1d6      	bne.n	801383a <_vfiprintf_r+0x19a>
 801388c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801388e:	07d9      	lsls	r1, r3, #31
 8013890:	d405      	bmi.n	801389e <_vfiprintf_r+0x1fe>
 8013892:	89ab      	ldrh	r3, [r5, #12]
 8013894:	059a      	lsls	r2, r3, #22
 8013896:	d402      	bmi.n	801389e <_vfiprintf_r+0x1fe>
 8013898:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801389a:	f7ef fb99 	bl	8002fd0 <__retarget_lock_release_recursive>
 801389e:	89ab      	ldrh	r3, [r5, #12]
 80138a0:	065b      	lsls	r3, r3, #25
 80138a2:	f53f af1f 	bmi.w	80136e4 <_vfiprintf_r+0x44>
 80138a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80138a8:	e71e      	b.n	80136e8 <_vfiprintf_r+0x48>
 80138aa:	ab03      	add	r3, sp, #12
 80138ac:	9300      	str	r3, [sp, #0]
 80138ae:	462a      	mov	r2, r5
 80138b0:	4b05      	ldr	r3, [pc, #20]	@ (80138c8 <_vfiprintf_r+0x228>)
 80138b2:	a904      	add	r1, sp, #16
 80138b4:	4630      	mov	r0, r6
 80138b6:	f7fd feef 	bl	8011698 <_printf_i>
 80138ba:	e7e4      	b.n	8013886 <_vfiprintf_r+0x1e6>
 80138bc:	0801401a 	.word	0x0801401a
 80138c0:	08014024 	.word	0x08014024
 80138c4:	08011015 	.word	0x08011015
 80138c8:	0801367d 	.word	0x0801367d
 80138cc:	08014020 	.word	0x08014020

080138d0 <__ascii_mbtowc>:
 80138d0:	b082      	sub	sp, #8
 80138d2:	b901      	cbnz	r1, 80138d6 <__ascii_mbtowc+0x6>
 80138d4:	a901      	add	r1, sp, #4
 80138d6:	b142      	cbz	r2, 80138ea <__ascii_mbtowc+0x1a>
 80138d8:	b14b      	cbz	r3, 80138ee <__ascii_mbtowc+0x1e>
 80138da:	7813      	ldrb	r3, [r2, #0]
 80138dc:	600b      	str	r3, [r1, #0]
 80138de:	7812      	ldrb	r2, [r2, #0]
 80138e0:	1e10      	subs	r0, r2, #0
 80138e2:	bf18      	it	ne
 80138e4:	2001      	movne	r0, #1
 80138e6:	b002      	add	sp, #8
 80138e8:	4770      	bx	lr
 80138ea:	4610      	mov	r0, r2
 80138ec:	e7fb      	b.n	80138e6 <__ascii_mbtowc+0x16>
 80138ee:	f06f 0001 	mvn.w	r0, #1
 80138f2:	e7f8      	b.n	80138e6 <__ascii_mbtowc+0x16>

080138f4 <_malloc_usable_size_r>:
 80138f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80138f8:	1f18      	subs	r0, r3, #4
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	bfbc      	itt	lt
 80138fe:	580b      	ldrlt	r3, [r1, r0]
 8013900:	18c0      	addlt	r0, r0, r3
 8013902:	4770      	bx	lr

08013904 <__swbuf_r>:
 8013904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013906:	460e      	mov	r6, r1
 8013908:	4614      	mov	r4, r2
 801390a:	4605      	mov	r5, r0
 801390c:	b118      	cbz	r0, 8013916 <__swbuf_r+0x12>
 801390e:	6a03      	ldr	r3, [r0, #32]
 8013910:	b90b      	cbnz	r3, 8013916 <__swbuf_r+0x12>
 8013912:	f7fe f8d7 	bl	8011ac4 <__sinit>
 8013916:	69a3      	ldr	r3, [r4, #24]
 8013918:	60a3      	str	r3, [r4, #8]
 801391a:	89a3      	ldrh	r3, [r4, #12]
 801391c:	071a      	lsls	r2, r3, #28
 801391e:	d501      	bpl.n	8013924 <__swbuf_r+0x20>
 8013920:	6923      	ldr	r3, [r4, #16]
 8013922:	b943      	cbnz	r3, 8013936 <__swbuf_r+0x32>
 8013924:	4621      	mov	r1, r4
 8013926:	4628      	mov	r0, r5
 8013928:	f000 f82a 	bl	8013980 <__swsetup_r>
 801392c:	b118      	cbz	r0, 8013936 <__swbuf_r+0x32>
 801392e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013932:	4638      	mov	r0, r7
 8013934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013936:	6823      	ldr	r3, [r4, #0]
 8013938:	6922      	ldr	r2, [r4, #16]
 801393a:	1a98      	subs	r0, r3, r2
 801393c:	6963      	ldr	r3, [r4, #20]
 801393e:	b2f6      	uxtb	r6, r6
 8013940:	4283      	cmp	r3, r0
 8013942:	4637      	mov	r7, r6
 8013944:	dc05      	bgt.n	8013952 <__swbuf_r+0x4e>
 8013946:	4621      	mov	r1, r4
 8013948:	4628      	mov	r0, r5
 801394a:	f7ff f9d7 	bl	8012cfc <_fflush_r>
 801394e:	2800      	cmp	r0, #0
 8013950:	d1ed      	bne.n	801392e <__swbuf_r+0x2a>
 8013952:	68a3      	ldr	r3, [r4, #8]
 8013954:	3b01      	subs	r3, #1
 8013956:	60a3      	str	r3, [r4, #8]
 8013958:	6823      	ldr	r3, [r4, #0]
 801395a:	1c5a      	adds	r2, r3, #1
 801395c:	6022      	str	r2, [r4, #0]
 801395e:	701e      	strb	r6, [r3, #0]
 8013960:	6962      	ldr	r2, [r4, #20]
 8013962:	1c43      	adds	r3, r0, #1
 8013964:	429a      	cmp	r2, r3
 8013966:	d004      	beq.n	8013972 <__swbuf_r+0x6e>
 8013968:	89a3      	ldrh	r3, [r4, #12]
 801396a:	07db      	lsls	r3, r3, #31
 801396c:	d5e1      	bpl.n	8013932 <__swbuf_r+0x2e>
 801396e:	2e0a      	cmp	r6, #10
 8013970:	d1df      	bne.n	8013932 <__swbuf_r+0x2e>
 8013972:	4621      	mov	r1, r4
 8013974:	4628      	mov	r0, r5
 8013976:	f7ff f9c1 	bl	8012cfc <_fflush_r>
 801397a:	2800      	cmp	r0, #0
 801397c:	d0d9      	beq.n	8013932 <__swbuf_r+0x2e>
 801397e:	e7d6      	b.n	801392e <__swbuf_r+0x2a>

08013980 <__swsetup_r>:
 8013980:	b538      	push	{r3, r4, r5, lr}
 8013982:	4b29      	ldr	r3, [pc, #164]	@ (8013a28 <__swsetup_r+0xa8>)
 8013984:	4605      	mov	r5, r0
 8013986:	6818      	ldr	r0, [r3, #0]
 8013988:	460c      	mov	r4, r1
 801398a:	b118      	cbz	r0, 8013994 <__swsetup_r+0x14>
 801398c:	6a03      	ldr	r3, [r0, #32]
 801398e:	b90b      	cbnz	r3, 8013994 <__swsetup_r+0x14>
 8013990:	f7fe f898 	bl	8011ac4 <__sinit>
 8013994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013998:	0719      	lsls	r1, r3, #28
 801399a:	d422      	bmi.n	80139e2 <__swsetup_r+0x62>
 801399c:	06da      	lsls	r2, r3, #27
 801399e:	d407      	bmi.n	80139b0 <__swsetup_r+0x30>
 80139a0:	2209      	movs	r2, #9
 80139a2:	602a      	str	r2, [r5, #0]
 80139a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80139a8:	81a3      	strh	r3, [r4, #12]
 80139aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80139ae:	e033      	b.n	8013a18 <__swsetup_r+0x98>
 80139b0:	0758      	lsls	r0, r3, #29
 80139b2:	d512      	bpl.n	80139da <__swsetup_r+0x5a>
 80139b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80139b6:	b141      	cbz	r1, 80139ca <__swsetup_r+0x4a>
 80139b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80139bc:	4299      	cmp	r1, r3
 80139be:	d002      	beq.n	80139c6 <__swsetup_r+0x46>
 80139c0:	4628      	mov	r0, r5
 80139c2:	f7fe ff75 	bl	80128b0 <_free_r>
 80139c6:	2300      	movs	r3, #0
 80139c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80139ca:	89a3      	ldrh	r3, [r4, #12]
 80139cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80139d0:	81a3      	strh	r3, [r4, #12]
 80139d2:	2300      	movs	r3, #0
 80139d4:	6063      	str	r3, [r4, #4]
 80139d6:	6923      	ldr	r3, [r4, #16]
 80139d8:	6023      	str	r3, [r4, #0]
 80139da:	89a3      	ldrh	r3, [r4, #12]
 80139dc:	f043 0308 	orr.w	r3, r3, #8
 80139e0:	81a3      	strh	r3, [r4, #12]
 80139e2:	6923      	ldr	r3, [r4, #16]
 80139e4:	b94b      	cbnz	r3, 80139fa <__swsetup_r+0x7a>
 80139e6:	89a3      	ldrh	r3, [r4, #12]
 80139e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80139ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80139f0:	d003      	beq.n	80139fa <__swsetup_r+0x7a>
 80139f2:	4621      	mov	r1, r4
 80139f4:	4628      	mov	r0, r5
 80139f6:	f000 f84c 	bl	8013a92 <__smakebuf_r>
 80139fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80139fe:	f013 0201 	ands.w	r2, r3, #1
 8013a02:	d00a      	beq.n	8013a1a <__swsetup_r+0x9a>
 8013a04:	2200      	movs	r2, #0
 8013a06:	60a2      	str	r2, [r4, #8]
 8013a08:	6962      	ldr	r2, [r4, #20]
 8013a0a:	4252      	negs	r2, r2
 8013a0c:	61a2      	str	r2, [r4, #24]
 8013a0e:	6922      	ldr	r2, [r4, #16]
 8013a10:	b942      	cbnz	r2, 8013a24 <__swsetup_r+0xa4>
 8013a12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013a16:	d1c5      	bne.n	80139a4 <__swsetup_r+0x24>
 8013a18:	bd38      	pop	{r3, r4, r5, pc}
 8013a1a:	0799      	lsls	r1, r3, #30
 8013a1c:	bf58      	it	pl
 8013a1e:	6962      	ldrpl	r2, [r4, #20]
 8013a20:	60a2      	str	r2, [r4, #8]
 8013a22:	e7f4      	b.n	8013a0e <__swsetup_r+0x8e>
 8013a24:	2000      	movs	r0, #0
 8013a26:	e7f7      	b.n	8013a18 <__swsetup_r+0x98>
 8013a28:	200000ec 	.word	0x200000ec

08013a2c <__ascii_wctomb>:
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	4608      	mov	r0, r1
 8013a30:	b141      	cbz	r1, 8013a44 <__ascii_wctomb+0x18>
 8013a32:	2aff      	cmp	r2, #255	@ 0xff
 8013a34:	d904      	bls.n	8013a40 <__ascii_wctomb+0x14>
 8013a36:	228a      	movs	r2, #138	@ 0x8a
 8013a38:	601a      	str	r2, [r3, #0]
 8013a3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013a3e:	4770      	bx	lr
 8013a40:	700a      	strb	r2, [r1, #0]
 8013a42:	2001      	movs	r0, #1
 8013a44:	4770      	bx	lr

08013a46 <__swhatbuf_r>:
 8013a46:	b570      	push	{r4, r5, r6, lr}
 8013a48:	460c      	mov	r4, r1
 8013a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a4e:	2900      	cmp	r1, #0
 8013a50:	b096      	sub	sp, #88	@ 0x58
 8013a52:	4615      	mov	r5, r2
 8013a54:	461e      	mov	r6, r3
 8013a56:	da0d      	bge.n	8013a74 <__swhatbuf_r+0x2e>
 8013a58:	89a3      	ldrh	r3, [r4, #12]
 8013a5a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013a5e:	f04f 0100 	mov.w	r1, #0
 8013a62:	bf14      	ite	ne
 8013a64:	2340      	movne	r3, #64	@ 0x40
 8013a66:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013a6a:	2000      	movs	r0, #0
 8013a6c:	6031      	str	r1, [r6, #0]
 8013a6e:	602b      	str	r3, [r5, #0]
 8013a70:	b016      	add	sp, #88	@ 0x58
 8013a72:	bd70      	pop	{r4, r5, r6, pc}
 8013a74:	466a      	mov	r2, sp
 8013a76:	f000 f849 	bl	8013b0c <_fstat_r>
 8013a7a:	2800      	cmp	r0, #0
 8013a7c:	dbec      	blt.n	8013a58 <__swhatbuf_r+0x12>
 8013a7e:	9901      	ldr	r1, [sp, #4]
 8013a80:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013a84:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013a88:	4259      	negs	r1, r3
 8013a8a:	4159      	adcs	r1, r3
 8013a8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013a90:	e7eb      	b.n	8013a6a <__swhatbuf_r+0x24>

08013a92 <__smakebuf_r>:
 8013a92:	898b      	ldrh	r3, [r1, #12]
 8013a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a96:	079d      	lsls	r5, r3, #30
 8013a98:	4606      	mov	r6, r0
 8013a9a:	460c      	mov	r4, r1
 8013a9c:	d507      	bpl.n	8013aae <__smakebuf_r+0x1c>
 8013a9e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013aa2:	6023      	str	r3, [r4, #0]
 8013aa4:	6123      	str	r3, [r4, #16]
 8013aa6:	2301      	movs	r3, #1
 8013aa8:	6163      	str	r3, [r4, #20]
 8013aaa:	b003      	add	sp, #12
 8013aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013aae:	ab01      	add	r3, sp, #4
 8013ab0:	466a      	mov	r2, sp
 8013ab2:	f7ff ffc8 	bl	8013a46 <__swhatbuf_r>
 8013ab6:	9f00      	ldr	r7, [sp, #0]
 8013ab8:	4605      	mov	r5, r0
 8013aba:	4639      	mov	r1, r7
 8013abc:	4630      	mov	r0, r6
 8013abe:	f7fd fcfd 	bl	80114bc <_malloc_r>
 8013ac2:	b948      	cbnz	r0, 8013ad8 <__smakebuf_r+0x46>
 8013ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ac8:	059a      	lsls	r2, r3, #22
 8013aca:	d4ee      	bmi.n	8013aaa <__smakebuf_r+0x18>
 8013acc:	f023 0303 	bic.w	r3, r3, #3
 8013ad0:	f043 0302 	orr.w	r3, r3, #2
 8013ad4:	81a3      	strh	r3, [r4, #12]
 8013ad6:	e7e2      	b.n	8013a9e <__smakebuf_r+0xc>
 8013ad8:	89a3      	ldrh	r3, [r4, #12]
 8013ada:	6020      	str	r0, [r4, #0]
 8013adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013ae0:	81a3      	strh	r3, [r4, #12]
 8013ae2:	9b01      	ldr	r3, [sp, #4]
 8013ae4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013ae8:	b15b      	cbz	r3, 8013b02 <__smakebuf_r+0x70>
 8013aea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013aee:	4630      	mov	r0, r6
 8013af0:	f000 f81e 	bl	8013b30 <_isatty_r>
 8013af4:	b128      	cbz	r0, 8013b02 <__smakebuf_r+0x70>
 8013af6:	89a3      	ldrh	r3, [r4, #12]
 8013af8:	f023 0303 	bic.w	r3, r3, #3
 8013afc:	f043 0301 	orr.w	r3, r3, #1
 8013b00:	81a3      	strh	r3, [r4, #12]
 8013b02:	89a3      	ldrh	r3, [r4, #12]
 8013b04:	431d      	orrs	r5, r3
 8013b06:	81a5      	strh	r5, [r4, #12]
 8013b08:	e7cf      	b.n	8013aaa <__smakebuf_r+0x18>
	...

08013b0c <_fstat_r>:
 8013b0c:	b538      	push	{r3, r4, r5, lr}
 8013b0e:	4d07      	ldr	r5, [pc, #28]	@ (8013b2c <_fstat_r+0x20>)
 8013b10:	2300      	movs	r3, #0
 8013b12:	4604      	mov	r4, r0
 8013b14:	4608      	mov	r0, r1
 8013b16:	4611      	mov	r1, r2
 8013b18:	602b      	str	r3, [r5, #0]
 8013b1a:	f7ef f909 	bl	8002d30 <_fstat>
 8013b1e:	1c43      	adds	r3, r0, #1
 8013b20:	d102      	bne.n	8013b28 <_fstat_r+0x1c>
 8013b22:	682b      	ldr	r3, [r5, #0]
 8013b24:	b103      	cbz	r3, 8013b28 <_fstat_r+0x1c>
 8013b26:	6023      	str	r3, [r4, #0]
 8013b28:	bd38      	pop	{r3, r4, r5, pc}
 8013b2a:	bf00      	nop
 8013b2c:	200016ec 	.word	0x200016ec

08013b30 <_isatty_r>:
 8013b30:	b538      	push	{r3, r4, r5, lr}
 8013b32:	4d06      	ldr	r5, [pc, #24]	@ (8013b4c <_isatty_r+0x1c>)
 8013b34:	2300      	movs	r3, #0
 8013b36:	4604      	mov	r4, r0
 8013b38:	4608      	mov	r0, r1
 8013b3a:	602b      	str	r3, [r5, #0]
 8013b3c:	f7ef f908 	bl	8002d50 <_isatty>
 8013b40:	1c43      	adds	r3, r0, #1
 8013b42:	d102      	bne.n	8013b4a <_isatty_r+0x1a>
 8013b44:	682b      	ldr	r3, [r5, #0]
 8013b46:	b103      	cbz	r3, 8013b4a <_isatty_r+0x1a>
 8013b48:	6023      	str	r3, [r4, #0]
 8013b4a:	bd38      	pop	{r3, r4, r5, pc}
 8013b4c:	200016ec 	.word	0x200016ec

08013b50 <_raise_r>:
 8013b50:	291f      	cmp	r1, #31
 8013b52:	b538      	push	{r3, r4, r5, lr}
 8013b54:	4605      	mov	r5, r0
 8013b56:	460c      	mov	r4, r1
 8013b58:	d904      	bls.n	8013b64 <_raise_r+0x14>
 8013b5a:	2316      	movs	r3, #22
 8013b5c:	6003      	str	r3, [r0, #0]
 8013b5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013b62:	bd38      	pop	{r3, r4, r5, pc}
 8013b64:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013b66:	b112      	cbz	r2, 8013b6e <_raise_r+0x1e>
 8013b68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013b6c:	b94b      	cbnz	r3, 8013b82 <_raise_r+0x32>
 8013b6e:	4628      	mov	r0, r5
 8013b70:	f000 f830 	bl	8013bd4 <_getpid_r>
 8013b74:	4622      	mov	r2, r4
 8013b76:	4601      	mov	r1, r0
 8013b78:	4628      	mov	r0, r5
 8013b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b7e:	f000 b817 	b.w	8013bb0 <_kill_r>
 8013b82:	2b01      	cmp	r3, #1
 8013b84:	d00a      	beq.n	8013b9c <_raise_r+0x4c>
 8013b86:	1c59      	adds	r1, r3, #1
 8013b88:	d103      	bne.n	8013b92 <_raise_r+0x42>
 8013b8a:	2316      	movs	r3, #22
 8013b8c:	6003      	str	r3, [r0, #0]
 8013b8e:	2001      	movs	r0, #1
 8013b90:	e7e7      	b.n	8013b62 <_raise_r+0x12>
 8013b92:	2100      	movs	r1, #0
 8013b94:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013b98:	4620      	mov	r0, r4
 8013b9a:	4798      	blx	r3
 8013b9c:	2000      	movs	r0, #0
 8013b9e:	e7e0      	b.n	8013b62 <_raise_r+0x12>

08013ba0 <raise>:
 8013ba0:	4b02      	ldr	r3, [pc, #8]	@ (8013bac <raise+0xc>)
 8013ba2:	4601      	mov	r1, r0
 8013ba4:	6818      	ldr	r0, [r3, #0]
 8013ba6:	f7ff bfd3 	b.w	8013b50 <_raise_r>
 8013baa:	bf00      	nop
 8013bac:	200000ec 	.word	0x200000ec

08013bb0 <_kill_r>:
 8013bb0:	b538      	push	{r3, r4, r5, lr}
 8013bb2:	4d07      	ldr	r5, [pc, #28]	@ (8013bd0 <_kill_r+0x20>)
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	4604      	mov	r4, r0
 8013bb8:	4608      	mov	r0, r1
 8013bba:	4611      	mov	r1, r2
 8013bbc:	602b      	str	r3, [r5, #0]
 8013bbe:	f7ef f873 	bl	8002ca8 <_kill>
 8013bc2:	1c43      	adds	r3, r0, #1
 8013bc4:	d102      	bne.n	8013bcc <_kill_r+0x1c>
 8013bc6:	682b      	ldr	r3, [r5, #0]
 8013bc8:	b103      	cbz	r3, 8013bcc <_kill_r+0x1c>
 8013bca:	6023      	str	r3, [r4, #0]
 8013bcc:	bd38      	pop	{r3, r4, r5, pc}
 8013bce:	bf00      	nop
 8013bd0:	200016ec 	.word	0x200016ec

08013bd4 <_getpid_r>:
 8013bd4:	f7ef b860 	b.w	8002c98 <_getpid>

08013bd8 <_init>:
 8013bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bda:	bf00      	nop
 8013bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013bde:	bc08      	pop	{r3}
 8013be0:	469e      	mov	lr, r3
 8013be2:	4770      	bx	lr

08013be4 <_fini>:
 8013be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013be6:	bf00      	nop
 8013be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013bea:	bc08      	pop	{r3}
 8013bec:	469e      	mov	lr, r3
 8013bee:	4770      	bx	lr
