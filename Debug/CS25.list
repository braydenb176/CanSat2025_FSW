
CS25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000166c8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f0  080168a8  080168a8  000178a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016f98  08016f98  000182c0  2**0
                  CONTENTS
  4 .ARM          00000008  08016f98  08016f98  00017f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016fa0  08016fa0  000182c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016fa0  08016fa0  00017fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016fa4  08016fa4  00017fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c0  20000000  08016fa8  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001414  200002c0  08017268  000182c0  2**3
                  ALLOC
 10 ._user_heap_stack 00001504  200016d4  08017268  000186d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000182c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033f02  00000000  00000000  000182f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006db0  00000000  00000000  0004c1f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b20  00000000  00000000  00052fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002139  00000000  00000000  00055ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a848  00000000  00000000  00057c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036926  00000000  00000000  00062449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001004cb  00000000  00000000  00098d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019923a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cb60  00000000  00000000  00199280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001a5de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002c0 	.word	0x200002c0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08016890 	.word	0x08016890

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002c4 	.word	0x200002c4
 800021c:	08016890 	.word	0x08016890

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <init_mission_data>:
volatile double simulated_pressure = 0.0;

Mission_Data global_mission_data = {0};

void init_mission_data(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	memset(&global_mission_data, 0, sizeof(global_mission_data));
 8000f8c:	226c      	movs	r2, #108	@ 0x6c
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4829      	ldr	r0, [pc, #164]	@ (8001038 <init_mission_data+0xb0>)
 8000f92:	f012 fcc6 	bl	8013922 <memset>

	global_mission_data.TEAM_ID = 3174;
 8000f96:	4b28      	ldr	r3, [pc, #160]	@ (8001038 <init_mission_data+0xb0>)
 8000f98:	f640 4266 	movw	r2, #3174	@ 0xc66
 8000f9c:	801a      	strh	r2, [r3, #0]
	strcpy(global_mission_data.MISSION_TIME, "XX:XX:XX"); // TEMP
 8000f9e:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <init_mission_data+0xb0>)
 8000fa0:	4926      	ldr	r1, [pc, #152]	@ (800103c <init_mission_data+0xb4>)
 8000fa2:	1c9a      	adds	r2, r3, #2
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	cb03      	ldmia	r3!, {r0, r1}
 8000fa8:	6010      	str	r0, [r2, #0]
 8000faa:	6051      	str	r1, [r2, #4]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	7213      	strb	r3, [r2, #8]
	global_mission_data.PACKET_COUNT = 0;				  // TEMP
 8000fb0:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <init_mission_data+0xb0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
	global_mission_data.MODE = 'F';
 8000fb6:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <init_mission_data+0xb0>)
 8000fb8:	2246      	movs	r2, #70	@ 0x46
 8000fba:	741a      	strb	r2, [r3, #16]
	strcpy(global_mission_data.STATE, "LAUNCH_PAD");
 8000fbc:	4a20      	ldr	r2, [pc, #128]	@ (8001040 <init_mission_data+0xb8>)
 8000fbe:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <init_mission_data+0xbc>)
 8000fc0:	cb03      	ldmia	r3!, {r0, r1}
 8000fc2:	6010      	str	r0, [r2, #0]
 8000fc4:	6051      	str	r1, [r2, #4]
 8000fc6:	8819      	ldrh	r1, [r3, #0]
 8000fc8:	789b      	ldrb	r3, [r3, #2]
 8000fca:	8111      	strh	r1, [r2, #8]
 8000fcc:	7293      	strb	r3, [r2, #10]
	global_mission_data.ALTITUDE = 0.0;				  // temp
 8000fce:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <init_mission_data+0xb0>)
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
	global_mission_data.MAG_R = 0.0;				  // TEMP
 8000fd6:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <init_mission_data+0xb0>)
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	63da      	str	r2, [r3, #60]	@ 0x3c
	global_mission_data.MAG_P = 0.0;				  // TEMP
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <init_mission_data+0xb0>)
 8000fe0:	f04f 0200 	mov.w	r2, #0
 8000fe4:	641a      	str	r2, [r3, #64]	@ 0x40
	global_mission_data.MAG_Y = 0.0;				  // TEMP
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <init_mission_data+0xb0>)
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	645a      	str	r2, [r3, #68]	@ 0x44
	global_mission_data.AUTO_GYRO_ROTATION_RATE = 0;  // TEMP
 8000fee:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <init_mission_data+0xb0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	strcpy(global_mission_data.GPS_TIME, "XX:XX:XX"); // TEMP
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <init_mission_data+0xb0>)
 8000ff8:	4910      	ldr	r1, [pc, #64]	@ (800103c <init_mission_data+0xb4>)
 8000ffa:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 8000ffe:	460b      	mov	r3, r1
 8001000:	cb03      	ldmia	r3!, {r0, r1}
 8001002:	6010      	str	r0, [r2, #0]
 8001004:	6051      	str	r1, [r2, #4]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	7213      	strb	r3, [r2, #8]
	global_mission_data.GPS_ALTITUDE = 0.0;			  // TEMP
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <init_mission_data+0xb0>)
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	655a      	str	r2, [r3, #84]	@ 0x54
	global_mission_data.GPS_LATITUDE = 0.0;			  // TEMP
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <init_mission_data+0xb0>)
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	659a      	str	r2, [r3, #88]	@ 0x58
	global_mission_data.GPS_LONGITUDE = 0.0;		  // TEMP
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <init_mission_data+0xb0>)
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	65da      	str	r2, [r3, #92]	@ 0x5c
	global_mission_data.GPS_SATS = 0;				  // TEMP
 8001022:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <init_mission_data+0xb0>)
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
	strcpy(global_mission_data.CMD_ECHO, "CMD");	  // TEMP
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <init_mission_data+0xc0>)
 800102c:	4a07      	ldr	r2, [pc, #28]	@ (800104c <init_mission_data+0xc4>)
 800102e:	6810      	ldr	r0, [r2, #0]
 8001030:	6018      	str	r0, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200002e8 	.word	0x200002e8
 800103c:	080168a8 	.word	0x080168a8
 8001040:	200002f9 	.word	0x200002f9
 8001044:	080168b4 	.word	0x080168b4
 8001048:	20000349 	.word	0x20000349
 800104c:	080168c0 	.word	0x080168c0

08001050 <_write>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int fd, char *ptr, int len)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  // ignore fd, just send to UART3
  HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	b29a      	uxth	r2, r3
 8001060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	4804      	ldr	r0, [pc, #16]	@ (8001078 <_write+0x28>)
 8001068:	f00b facf 	bl	800c60a <HAL_UART_Transmit>
  return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000724 	.word	0x20000724

0800107c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800107c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001080:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 8001084:	af12      	add	r7, sp, #72	@ 0x48

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 8001086:	f003 fa3d 	bl	8004504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108a:	f000 fbf5 	bl	8001878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108e:	f001 f92f 	bl	80022f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001092:	f001 f903 	bl	800229c <MX_DMA_Init>
  MX_ADC1_Init();
 8001096:	f000 fc81 	bl	800199c <MX_ADC1_Init>
  MX_I2C3_Init();
 800109a:	f000 fd1f 	bl	8001adc <MX_I2C3_Init>
  MX_IRTIM_Init();
 800109e:	f000 fd5d 	bl	8001b5c <MX_IRTIM_Init>
  MX_RTC_Init();
 80010a2:	f000 fd79 	bl	8001b98 <MX_RTC_Init>
  MX_SPI2_Init();
 80010a6:	f000 fdab 	bl	8001c00 <MX_SPI2_Init>
  MX_TIM1_Init();
 80010aa:	f000 fde7 	bl	8001c7c <MX_TIM1_Init>
  MX_TIM3_Init();
 80010ae:	f000 fe5f 	bl	8001d70 <MX_TIM3_Init>
  MX_TIM8_Init();
 80010b2:	f000 fef5 	bl	8001ea0 <MX_TIM8_Init>
  //MX_TIM15_Init();
  MX_TIM16_Init();
 80010b6:	f000 ff6d 	bl	8001f94 <MX_TIM16_Init>
  MX_TIM17_Init();
 80010ba:	f000 ffe1 	bl	8002080 <MX_TIM17_Init>
  MX_UART5_Init();
 80010be:	f001 f855 	bl	800216c <MX_UART5_Init>
  MX_RNG_Init();
 80010c2:	f000 fd53 	bl	8001b6c <MX_RNG_Init>
  MX_USB_Device_Init();
 80010c6:	f011 f8cf 	bl	8012268 <MX_USB_Device_Init>
  MX_USART3_UART_Init();
 80010ca:	f001 f89b 	bl	8002204 <MX_USART3_UART_Init>
  MX_CORDIC_Init();
 80010ce:	f000 fcdd 	bl	8001a8c <MX_CORDIC_Init>
  MX_FMAC_Init();
 80010d2:	f000 fcef 	bl	8001ab4 <MX_FMAC_Init>
  /* USER CODE BEGIN 2 */
  // Feedback LED
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2180      	movs	r1, #128	@ 0x80
 80010da:	48cd      	ldr	r0, [pc, #820]	@ (8001410 <main+0x394>)
 80010dc:	f005 f91e 	bl	800631c <HAL_GPIO_WritePin>

  // Enable GPS and XBEE
  HAL_GPIO_WritePin(XBEE_RST_GPIO_Port, XBEE_RST_Pin, GPIO_PIN_SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ea:	f005 f917 	bl	800631c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	2120      	movs	r1, #32
 80010f2:	48c7      	ldr	r0, [pc, #796]	@ (8001410 <main+0x394>)
 80010f4:	f005 f912 	bl	800631c <HAL_GPIO_WritePin>
  HAL_Delay(3000); // wait for the Xbee to get brought back up again
 80010f8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80010fc:	f003 fa38 	bl	8004570 <HAL_Delay>

  // Disable ALL chip selects
  HAL_GPIO_WritePin(IMU_nCS_GPIO_Port, IMU_nCS_Pin, GPIO_PIN_SET);
 8001100:	2201      	movs	r2, #1
 8001102:	2104      	movs	r1, #4
 8001104:	48c2      	ldr	r0, [pc, #776]	@ (8001410 <main+0x394>)
 8001106:	f005 f909 	bl	800631c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BMP_nCS_GPIO_Port, BMP_nCS_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001110:	48bf      	ldr	r0, [pc, #764]	@ (8001410 <main+0x394>)
 8001112:	f005 f903 	bl	800631c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MAG_nCS_GPIO_Port, MAG_nCS_Pin, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800111c:	48bc      	ldr	r0, [pc, #752]	@ (8001410 <main+0x394>)
 800111e:	f005 f8fd 	bl	800631c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MAGEXT_nCS_GPIO_Port, MAGEXT_nCS_Pin, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001128:	48b9      	ldr	r0, [pc, #740]	@ (8001410 <main+0x394>)
 800112a:	f005 f8f7 	bl	800631c <HAL_GPIO_WritePin>

  // Initialize IMU
  ICM42688P_init(&hspi2, IMU_nCS_GPIO_Port, IMU_nCS_Pin);
 800112e:	2204      	movs	r2, #4
 8001130:	49b7      	ldr	r1, [pc, #732]	@ (8001410 <main+0x394>)
 8001132:	48b8      	ldr	r0, [pc, #736]	@ (8001414 <main+0x398>)
 8001134:	f002 fc00 	bl	8003938 <ICM42688P_init>

  // Initialize MS5607
  MS5607_Init(&hspi2, BMP_nCS_GPIO_Port, BMP_nCS_Pin);
 8001138:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800113c:	49b4      	ldr	r1, [pc, #720]	@ (8001410 <main+0x394>)
 800113e:	48b5      	ldr	r0, [pc, #724]	@ (8001414 <main+0x398>)
 8001140:	f002 fd22 	bl	8003b88 <MS5607_Init>

  // Initialize BMM150
  struct bmm150_dev bmm150 = BMM150_spi_init(&hspi2, MAG_nCS_GPIO_Port, MAG_nCS_Pin);
 8001144:	f507 7000 	add.w	r0, r7, #512	@ 0x200
 8001148:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800114c:	4ab0      	ldr	r2, [pc, #704]	@ (8001410 <main+0x394>)
 800114e:	49b1      	ldr	r1, [pc, #708]	@ (8001414 <main+0x398>)
 8001150:	f002 f982 	bl	8003458 <BMM150_spi_init>

  // Initialize LC76G
  LC76G_init();
 8001154:	f002 fcbe 	bl	8003ad4 <LC76G_init>

  // Initializing AMT10E2
  QENC_Init_Encoder0();
 8001158:	f002 f8a8 	bl	80032ac <QENC_Init_Encoder0>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
  int strlen = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  MS5607Readings bmp_data;
  ICM42688P_AccelData imu_data;
  BMM150_mag_data mag_data;
  LC76G_gps_data gps_data;

  uint8_t super_hot_resistor_cycle_limit = 30;
 8001168:	231e      	movs	r3, #30
 800116a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
  uint8_t super_hot_resistor_cycles = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
  char command[64] = {0};
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800117a:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800117e:	223c      	movs	r2, #60	@ 0x3c
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f012 fbcd 	bl	8013922 <memset>

  init_mission_data();
 8001188:	f7ff fefe 	bl	8000f88 <init_mission_data>

  while (1)
  {

    // enable interrupts
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800118c:	2027      	movs	r0, #39	@ 0x27
 800118e:	f004 fbf7 	bl	8005980 <HAL_NVIC_EnableIRQ>

    // receive command (15 bytes max?)
    uint8_t rx_buff[25];
    HAL_UART_Receive_IT(&huart3, rx_buff, 25);
 8001192:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001196:	2219      	movs	r2, #25
 8001198:	4619      	mov	r1, r3
 800119a:	489f      	ldr	r0, [pc, #636]	@ (8001418 <main+0x39c>)
 800119c:	f00b fb8c 	bl	800c8b8 <HAL_UART_Receive_IT>
    //HAL_UART_Transmit(&huart3, rx_buff, sizeof(rx_buff), HAL_MAX_DELAY);

    // step1: convert rx_buff array of "uint8_t"s into array of "chars"
    char *char_array = (char *)rx_buff;
 80011a0:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80011a4:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
    char rx_string[25];

    // step2: convert array of chars into string  (https://www.geeksforgeeks.org/convert-character-array-to-string-in-c/)
    strncpy(rx_string, char_array, 25);
 80011a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011ac:	2219      	movs	r2, #25
 80011ae:	f8d7 1234 	ldr.w	r1, [r7, #564]	@ 0x234
 80011b2:	4618      	mov	r0, r3
 80011b4:	f012 fba2 	bl	80138fc <strncpy>
    //strcpy(global_mission_data.CMD_ECHO, rx_string);

    rx_string[24] = '\0';
 80011b8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80011bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80011c0:	2200      	movs	r2, #0
 80011c2:	761a      	strb	r2, [r3, #24]
    // break;
    //}
    // elif (strncmp(&sub_cmd, "MEC", cmd_length) != 0) {
    // break;
    //}
    if (strncmp(rx_string, "CMD,3174,CX,ON", 14) == 0)
 80011c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011c8:	220e      	movs	r2, #14
 80011ca:	4994      	ldr	r1, [pc, #592]	@ (800141c <main+0x3a0>)
 80011cc:	4618      	mov	r0, r3
 80011ce:	f012 fb83 	bl	80138d8 <strncmp>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d113      	bne.n	8001200 <main+0x184>
    {
      telemetry_enable = 1;
 80011d8:	4b91      	ldr	r3, [pc, #580]	@ (8001420 <main+0x3a4>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
      char c_echo[] = "CXON";
 80011de:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80011e2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80011e6:	4a8f      	ldr	r2, [pc, #572]	@ (8001424 <main+0x3a8>)
 80011e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ec:	6018      	str	r0, [r3, #0]
 80011ee:	3304      	adds	r3, #4
 80011f0:	7019      	strb	r1, [r3, #0]
      strcpy(global_mission_data.CMD_ECHO, c_echo);
 80011f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80011f6:	4619      	mov	r1, r3
 80011f8:	488b      	ldr	r0, [pc, #556]	@ (8001428 <main+0x3ac>)
 80011fa:	f012 fbe7 	bl	80139cc <strcpy>
 80011fe:	e15f      	b.n	80014c0 <main+0x444>
    }
    else if (strncmp(rx_string, "CMD,3174,CX,OFF", 15) == 0)
 8001200:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001204:	220f      	movs	r2, #15
 8001206:	4989      	ldr	r1, [pc, #548]	@ (800142c <main+0x3b0>)
 8001208:	4618      	mov	r0, r3
 800120a:	f012 fb65 	bl	80138d8 <strncmp>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d113      	bne.n	800123c <main+0x1c0>
    {
      telemetry_enable = 0;
 8001214:	4b82      	ldr	r3, [pc, #520]	@ (8001420 <main+0x3a4>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
      char c_echo[] = "CXOFF";
 800121a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800121e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001222:	4a83      	ldr	r2, [pc, #524]	@ (8001430 <main+0x3b4>)
 8001224:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001228:	6018      	str	r0, [r3, #0]
 800122a:	3304      	adds	r3, #4
 800122c:	8019      	strh	r1, [r3, #0]
      strcpy(global_mission_data.CMD_ECHO, c_echo);
 800122e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001232:	4619      	mov	r1, r3
 8001234:	487c      	ldr	r0, [pc, #496]	@ (8001428 <main+0x3ac>)
 8001236:	f012 fbc9 	bl	80139cc <strcpy>
 800123a:	e141      	b.n	80014c0 <main+0x444>
    }
    else if (strncmp(rx_string, "CMD,3174,ST,GPS", 15) == 0)
 800123c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001240:	220f      	movs	r2, #15
 8001242:	497c      	ldr	r1, [pc, #496]	@ (8001434 <main+0x3b8>)
 8001244:	4618      	mov	r0, r3
 8001246:	f012 fb47 	bl	80138d8 <strncmp>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 8137 	beq.w	80014c0 <main+0x444>
    {
    }
    else if (strncmp(rx_string, "CMD,3174,SIM,ENABLE", 19) == 0)
 8001252:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001256:	2213      	movs	r2, #19
 8001258:	4977      	ldr	r1, [pc, #476]	@ (8001438 <main+0x3bc>)
 800125a:	4618      	mov	r0, r3
 800125c:	f012 fb3c 	bl	80138d8 <strncmp>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d111      	bne.n	800128a <main+0x20e>
    {
      simulation_pre = 1;
 8001266:	4b75      	ldr	r3, [pc, #468]	@ (800143c <main+0x3c0>)
 8001268:	2201      	movs	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]
      char c_echo[] = "SIMENABLE";
 800126c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001270:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001274:	4a72      	ldr	r2, [pc, #456]	@ (8001440 <main+0x3c4>)
 8001276:	ca07      	ldmia	r2, {r0, r1, r2}
 8001278:	c303      	stmia	r3!, {r0, r1}
 800127a:	801a      	strh	r2, [r3, #0]
      strcpy(global_mission_data.CMD_ECHO, c_echo);
 800127c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001280:	4619      	mov	r1, r3
 8001282:	4869      	ldr	r0, [pc, #420]	@ (8001428 <main+0x3ac>)
 8001284:	f012 fba2 	bl	80139cc <strcpy>
 8001288:	e11a      	b.n	80014c0 <main+0x444>
    }
    else if (strncmp(rx_string, "CMD,3174,SIM,ACTIVATE", 21) == 0)
 800128a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800128e:	2215      	movs	r2, #21
 8001290:	496c      	ldr	r1, [pc, #432]	@ (8001444 <main+0x3c8>)
 8001292:	4618      	mov	r0, r3
 8001294:	f012 fb20 	bl	80138d8 <strncmp>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d11c      	bne.n	80012d8 <main+0x25c>
    {
      if (simulation_pre == 1)
 800129e:	4b67      	ldr	r3, [pc, #412]	@ (800143c <main+0x3c0>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	f040 810b 	bne.w	80014c0 <main+0x444>
      {
        simulation_enable = 1;
 80012aa:	4b67      	ldr	r3, [pc, #412]	@ (8001448 <main+0x3cc>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	701a      	strb	r2, [r3, #0]
        char c_echo[] = "SIMACT";
 80012b0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80012b4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80012b8:	4a64      	ldr	r2, [pc, #400]	@ (800144c <main+0x3d0>)
 80012ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012be:	6018      	str	r0, [r3, #0]
 80012c0:	3304      	adds	r3, #4
 80012c2:	8019      	strh	r1, [r3, #0]
 80012c4:	3302      	adds	r3, #2
 80012c6:	0c0a      	lsrs	r2, r1, #16
 80012c8:	701a      	strb	r2, [r3, #0]
        strcpy(global_mission_data.CMD_ECHO, c_echo);
 80012ca:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80012ce:	4619      	mov	r1, r3
 80012d0:	4855      	ldr	r0, [pc, #340]	@ (8001428 <main+0x3ac>)
 80012d2:	f012 fb7b 	bl	80139cc <strcpy>
 80012d6:	e0f3      	b.n	80014c0 <main+0x444>
      }
    }

    else if (strncmp(rx_string, "CMD,3174,SIM,DISABLE", 20) == 0)
 80012d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012dc:	2214      	movs	r2, #20
 80012de:	495c      	ldr	r1, [pc, #368]	@ (8001450 <main+0x3d4>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f012 faf9 	bl	80138d8 <strncmp>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d116      	bne.n	800131a <main+0x29e>
    {
      simulation_enable = 0;
 80012ec:	4b56      	ldr	r3, [pc, #344]	@ (8001448 <main+0x3cc>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
      char c_echo[] = "SIMDIS";
 80012f2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80012f6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80012fa:	4a56      	ldr	r2, [pc, #344]	@ (8001454 <main+0x3d8>)
 80012fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001300:	6018      	str	r0, [r3, #0]
 8001302:	3304      	adds	r3, #4
 8001304:	8019      	strh	r1, [r3, #0]
 8001306:	3302      	adds	r3, #2
 8001308:	0c0a      	lsrs	r2, r1, #16
 800130a:	701a      	strb	r2, [r3, #0]
      strcpy(global_mission_data.CMD_ECHO, c_echo);
 800130c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001310:	4619      	mov	r1, r3
 8001312:	4845      	ldr	r0, [pc, #276]	@ (8001428 <main+0x3ac>)
 8001314:	f012 fb5a 	bl	80139cc <strcpy>
 8001318:	e0d2      	b.n	80014c0 <main+0x444>
    }
    // ADD SIMP
    else if (strncmp(rx_string, "CMD,3174,SIMP,", 14) == 0)
 800131a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800131e:	220e      	movs	r2, #14
 8001320:	494d      	ldr	r1, [pc, #308]	@ (8001458 <main+0x3dc>)
 8001322:	4618      	mov	r0, r3
 8001324:	f012 fad8 	bl	80138d8 <strncmp>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d130      	bne.n	8001390 <main+0x314>
    {
      char *pressure_str = rx_string + 14;
 800132e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001332:	330e      	adds	r3, #14
 8001334:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
      char *str_end;
      int pressure_pa = strtol(rx_string + 14, &str_end, 10);
 8001338:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800133c:	330e      	adds	r3, #14
 800133e:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8001342:	220a      	movs	r2, #10
 8001344:	4618      	mov	r0, r3
 8001346:	f012 fa9f 	bl	8013888 <strtol>
 800134a:	f8c7 022c 	str.w	r0, [r7, #556]	@ 0x22c
      // if (str_end == pressure_str || *str_end != '\0')
      // it wasn't a valid number
      simulated_pressure = pressure_pa / 1000;
 800134e:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8001352:	4a42      	ldr	r2, [pc, #264]	@ (800145c <main+0x3e0>)
 8001354:	fb82 1203 	smull	r1, r2, r2, r3
 8001358:	1192      	asrs	r2, r2, #6
 800135a:	17db      	asrs	r3, r3, #31
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f908 	bl	8000574 <__aeabi_i2d>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	493d      	ldr	r1, [pc, #244]	@ (8001460 <main+0x3e4>)
 800136a:	e9c1 2300 	strd	r2, r3, [r1]
      char c_echo[] = "SIMP";
 800136e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001372:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001376:	4a3b      	ldr	r2, [pc, #236]	@ (8001464 <main+0x3e8>)
 8001378:	e892 0003 	ldmia.w	r2, {r0, r1}
 800137c:	6018      	str	r0, [r3, #0]
 800137e:	3304      	adds	r3, #4
 8001380:	7019      	strb	r1, [r3, #0]
      strcpy(global_mission_data.CMD_ECHO, c_echo);
 8001382:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001386:	4619      	mov	r1, r3
 8001388:	4827      	ldr	r0, [pc, #156]	@ (8001428 <main+0x3ac>)
 800138a:	f012 fb1f 	bl	80139cc <strcpy>
 800138e:	e097      	b.n	80014c0 <main+0x444>
    }
    else if (strncmp(rx_string, "CMD,3174,CAL", 12) == 0)
 8001390:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001394:	220c      	movs	r2, #12
 8001396:	4934      	ldr	r1, [pc, #208]	@ (8001468 <main+0x3ec>)
 8001398:	4618      	mov	r0, r3
 800139a:	f012 fa9d 	bl	80138d8 <strncmp>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10f      	bne.n	80013c4 <main+0x348>
    {
      is_calibrated = 1;
 80013a4:	4b31      	ldr	r3, [pc, #196]	@ (800146c <main+0x3f0>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
      char c_echo[] = "CAL";
 80013aa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80013ae:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80013b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001470 <main+0x3f4>)
 80013b4:	601a      	str	r2, [r3, #0]
      strcpy(global_mission_data.CMD_ECHO, c_echo);
 80013b6:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80013ba:	4619      	mov	r1, r3
 80013bc:	481a      	ldr	r0, [pc, #104]	@ (8001428 <main+0x3ac>)
 80013be:	f012 fb05 	bl	80139cc <strcpy>
 80013c2:	e07d      	b.n	80014c0 <main+0x444>
    }
    else if (strncmp(rx_string, "CMD,3174,MEC,WIRE,ON", 20) == 0)
 80013c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013c8:	2214      	movs	r2, #20
 80013ca:	492a      	ldr	r1, [pc, #168]	@ (8001474 <main+0x3f8>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f012 fa83 	bl	80138d8 <strncmp>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d153      	bne.n	8001480 <main+0x404>
    {
      mec_wire_enable = 1;
 80013d8:	4b27      	ldr	r3, [pc, #156]	@ (8001478 <main+0x3fc>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
      char c_echo[] = "MECON";
 80013de:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80013e2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80013e6:	4a25      	ldr	r2, [pc, #148]	@ (800147c <main+0x400>)
 80013e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013ec:	6018      	str	r0, [r3, #0]
 80013ee:	3304      	adds	r3, #4
 80013f0:	8019      	strh	r1, [r3, #0]
      strcpy(global_mission_data.CMD_ECHO, c_echo);
 80013f2:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80013f6:	4619      	mov	r1, r3
 80013f8:	480b      	ldr	r0, [pc, #44]	@ (8001428 <main+0x3ac>)
 80013fa:	f012 fae7 	bl	80139cc <strcpy>
      HAL_UART_Transmit(&huart3, c_echo, sizeof(c_echo), HAL_MAX_DELAY);
 80013fe:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 8001402:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001406:	2206      	movs	r2, #6
 8001408:	4803      	ldr	r0, [pc, #12]	@ (8001418 <main+0x39c>)
 800140a:	f00b f8fe 	bl	800c60a <HAL_UART_Transmit>
 800140e:	e057      	b.n	80014c0 <main+0x444>
 8001410:	48000400 	.word	0x48000400
 8001414:	200004b0 	.word	0x200004b0
 8001418:	20000724 	.word	0x20000724
 800141c:	080168c4 	.word	0x080168c4
 8001420:	20000000 	.word	0x20000000
 8001424:	080169f8 	.word	0x080169f8
 8001428:	20000349 	.word	0x20000349
 800142c:	080168d4 	.word	0x080168d4
 8001430:	08016a00 	.word	0x08016a00
 8001434:	080168e4 	.word	0x080168e4
 8001438:	080168f4 	.word	0x080168f4
 800143c:	200002df 	.word	0x200002df
 8001440:	08016a08 	.word	0x08016a08
 8001444:	08016908 	.word	0x08016908
 8001448:	200002de 	.word	0x200002de
 800144c:	08016a14 	.word	0x08016a14
 8001450:	08016920 	.word	0x08016920
 8001454:	08016a1c 	.word	0x08016a1c
 8001458:	08016938 	.word	0x08016938
 800145c:	10624dd3 	.word	0x10624dd3
 8001460:	200002e0 	.word	0x200002e0
 8001464:	08016a24 	.word	0x08016a24
 8001468:	08016948 	.word	0x08016948
 800146c:	200002dc 	.word	0x200002dc
 8001470:	004c4143 	.word	0x004c4143
 8001474:	08016958 	.word	0x08016958
 8001478:	200002dd 	.word	0x200002dd
 800147c:	08016a2c 	.word	0x08016a2c
    }
    else if (strncmp(rx_string, "CMD,3174,MEC,WIRE,OFF", 21) == 0)
 8001480:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001484:	2215      	movs	r2, #21
 8001486:	4924      	ldr	r1, [pc, #144]	@ (8001518 <main+0x49c>)
 8001488:	4618      	mov	r0, r3
 800148a:	f012 fa25 	bl	80138d8 <strncmp>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d115      	bne.n	80014c0 <main+0x444>
    {
      mec_wire_enable = 0;
 8001494:	4b21      	ldr	r3, [pc, #132]	@ (800151c <main+0x4a0>)
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
      char c_echo[] = "MECOFF";
 800149a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800149e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80014a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001520 <main+0x4a4>)
 80014a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014a8:	6018      	str	r0, [r3, #0]
 80014aa:	3304      	adds	r3, #4
 80014ac:	8019      	strh	r1, [r3, #0]
 80014ae:	3302      	adds	r3, #2
 80014b0:	0c0a      	lsrs	r2, r1, #16
 80014b2:	701a      	strb	r2, [r3, #0]
      strcpy(global_mission_data.CMD_ECHO, c_echo);
 80014b4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80014b8:	4619      	mov	r1, r3
 80014ba:	481a      	ldr	r0, [pc, #104]	@ (8001524 <main+0x4a8>)
 80014bc:	f012 fa86 	bl	80139cc <strcpy>

    // Receive command from ground station
    //HAL_UART_Receive(&huart3, command, 64, 10);
    //process_command(command);

    bmp_data = MS5607ReadValues();
 80014c0:	f002 ff42 	bl	8004348 <MS5607ReadValues>
 80014c4:	eeb0 6a40 	vmov.f32	s12, s0
 80014c8:	eef0 6a60 	vmov.f32	s13, s1
 80014cc:	eeb0 7a41 	vmov.f32	s14, s2
 80014d0:	eef0 7a61 	vmov.f32	s15, s3
 80014d4:	ed87 6b7c 	vstr	d6, [r7, #496]	@ 0x1f0
 80014d8:	ed87 7b7e 	vstr	d7, [r7, #504]	@ 0x1f8
    imu_data = ICM42688P_read_data();
 80014dc:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 fa95 	bl	8003a10 <ICM42688P_read_data>
    // gps_data = LC76G_read_data();

    // update mission struct
    global_mission_data.TEMPERATURE = bmp_data.temperature_C;
 80014e6:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff fb83 	bl	8000bf8 <__aeabi_d2f>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001528 <main+0x4ac>)
 80014f6:	6253      	str	r3, [r2, #36]	@ 0x24

    // in simulation mode, update pressure to match what is parsed from command
    if (simulation_enable == 1)
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <main+0x4b0>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d118      	bne.n	8001534 <main+0x4b8>
    {
      global_mission_data.PRESSURE = simulated_pressure;
 8001502:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <main+0x4b4>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff fb74 	bl	8000bf8 <__aeabi_d2f>
 8001510:	4603      	mov	r3, r0
 8001512:	4a05      	ldr	r2, [pc, #20]	@ (8001528 <main+0x4ac>)
 8001514:	6293      	str	r3, [r2, #40]	@ 0x28
 8001516:	e016      	b.n	8001546 <main+0x4ca>
 8001518:	08016970 	.word	0x08016970
 800151c:	200002dd 	.word	0x200002dd
 8001520:	08016a34 	.word	0x08016a34
 8001524:	20000349 	.word	0x20000349
 8001528:	200002e8 	.word	0x200002e8
 800152c:	200002de 	.word	0x200002de
 8001530:	200002e0 	.word	0x200002e0
    }
    // otherwise, update pressure to match data read from sensor
    else
    {
      global_mission_data.PRESSURE = bmp_data.pressure_kPa;
 8001534:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f7ff fb5c 	bl	8000bf8 <__aeabi_d2f>
 8001540:	4603      	mov	r3, r0
 8001542:	4ab0      	ldr	r2, [pc, #704]	@ (8001804 <main+0x788>)
 8001544:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    // if the calibrating flag is true, calibrate the altitude
    global_mission_data.ALTITUDE = calculateAltitude(global_mission_data.PRESSURE, is_calibrated);
 8001546:	4baf      	ldr	r3, [pc, #700]	@ (8001804 <main+0x788>)
 8001548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f824 	bl	8000598 <__aeabi_f2d>
 8001550:	4604      	mov	r4, r0
 8001552:	460d      	mov	r5, r1
 8001554:	4bac      	ldr	r3, [pc, #688]	@ (8001808 <main+0x78c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	4618      	mov	r0, r3
 800155c:	ec45 4b10 	vmov	d0, r4, r5
 8001560:	f002 ff4e 	bl	8004400 <calculateAltitude>
 8001564:	eef0 7a40 	vmov.f32	s15, s0
 8001568:	4ba6      	ldr	r3, [pc, #664]	@ (8001804 <main+0x788>)
 800156a:	edc3 7a08 	vstr	s15, [r3, #32]
    is_calibrated = 0; // reset the flag
 800156e:	4ba6      	ldr	r3, [pc, #664]	@ (8001808 <main+0x78c>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]

    // update battery voltage
    uint16_t battery_mV = 0;
 8001574:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001578:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 800157c:	2200      	movs	r2, #0
 800157e:	801a      	strh	r2, [r3, #0]
    BQ28Z610_ReadVoltage(&hi2c3, &battery_mV);
 8001580:	f507 739b 	add.w	r3, r7, #310	@ 0x136
 8001584:	4619      	mov	r1, r3
 8001586:	48a1      	ldr	r0, [pc, #644]	@ (800180c <main+0x790>)
 8001588:	f002 f937 	bl	80037fa <BQ28Z610_ReadVoltage>
    global_mission_data.VOLTAGE = (float)(battery_mV) / 1000.0; // convert from mV to V
 800158c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001590:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800159e:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 8001810 <main+0x794>
 80015a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a6:	4b97      	ldr	r3, [pc, #604]	@ (8001804 <main+0x788>)
 80015a8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // gyro broken?
    global_mission_data.GYRO_R = imu_data.gyro_r;
 80015ac:	f9b7 21ec 	ldrsh.w	r2, [r7, #492]	@ 0x1ec
 80015b0:	4b94      	ldr	r3, [pc, #592]	@ (8001804 <main+0x788>)
 80015b2:	861a      	strh	r2, [r3, #48]	@ 0x30
    global_mission_data.GYRO_P = imu_data.gyro_p;
 80015b4:	f9b7 21e8 	ldrsh.w	r2, [r7, #488]	@ 0x1e8
 80015b8:	4b92      	ldr	r3, [pc, #584]	@ (8001804 <main+0x788>)
 80015ba:	865a      	strh	r2, [r3, #50]	@ 0x32
    global_mission_data.GYRO_Y = imu_data.gyro_y;
 80015bc:	f9b7 21ea 	ldrsh.w	r2, [r7, #490]	@ 0x1ea
 80015c0:	4b90      	ldr	r3, [pc, #576]	@ (8001804 <main+0x788>)
 80015c2:	869a      	strh	r2, [r3, #52]	@ 0x34
    global_mission_data.AUTO_GYRO_ROTATION_RATE = QENC_Get_Encoder0_Count(); // encoder broken?
 80015c4:	f001 feae 	bl	8003324 <QENC_Get_Encoder0_Count>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b8d      	ldr	r3, [pc, #564]	@ (8001804 <main+0x788>)
 80015ce:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

    // needs to be updated
    global_mission_data.ACCEL_R = imu_data.accel_r;
 80015d2:	f9b7 21e6 	ldrsh.w	r2, [r7, #486]	@ 0x1e6
 80015d6:	4b8b      	ldr	r3, [pc, #556]	@ (8001804 <main+0x788>)
 80015d8:	86da      	strh	r2, [r3, #54]	@ 0x36
    global_mission_data.ACCEL_P = imu_data.accel_p;
 80015da:	f9b7 21e2 	ldrsh.w	r2, [r7, #482]	@ 0x1e2
 80015de:	4b89      	ldr	r3, [pc, #548]	@ (8001804 <main+0x788>)
 80015e0:	871a      	strh	r2, [r3, #56]	@ 0x38
    global_mission_data.ACCEL_Y = imu_data.accel_y;
 80015e2:	f9b7 21e4 	ldrsh.w	r2, [r7, #484]	@ 0x1e4
 80015e6:	4b87      	ldr	r3, [pc, #540]	@ (8001804 <main+0x788>)
 80015e8:	875a      	strh	r2, [r3, #58]	@ 0x3a
                     gps_data.time_S);
    global_mission_data.GPS_ALTITUDE = gps_data.altitude;
    global_mission_data.GPS_LATITUDE = gps_data.lat;
    global_mission_data.GPS_LONGITUDE = gps_data.lon;
    global_mission_data.GPS_SATS = gps_data.num_sat_used;*/
    strcpy(global_mission_data.GPS_TIME, "XX:XX:XX");
 80015ea:	4b86      	ldr	r3, [pc, #536]	@ (8001804 <main+0x788>)
 80015ec:	4989      	ldr	r1, [pc, #548]	@ (8001814 <main+0x798>)
 80015ee:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 80015f2:	460b      	mov	r3, r1
 80015f4:	cb03      	ldmia	r3!, {r0, r1}
 80015f6:	6010      	str	r0, [r2, #0]
 80015f8:	6051      	str	r1, [r2, #4]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	7213      	strb	r3, [r2, #8]
    global_mission_data.GPS_ALTITUDE = 0.0;
 80015fe:	4b81      	ldr	r3, [pc, #516]	@ (8001804 <main+0x788>)
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	655a      	str	r2, [r3, #84]	@ 0x54
    global_mission_data.GPS_LATITUDE = 0.0;
 8001606:	4b7f      	ldr	r3, [pc, #508]	@ (8001804 <main+0x788>)
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	659a      	str	r2, [r3, #88]	@ 0x58
    global_mission_data.GPS_LONGITUDE = 0.0;
 800160e:	4b7d      	ldr	r3, [pc, #500]	@ (8001804 <main+0x788>)
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	65da      	str	r2, [r3, #92]	@ 0x5c
    global_mission_data.GPS_SATS = 0;
 8001616:	4b7b      	ldr	r3, [pc, #492]	@ (8001804 <main+0x788>)
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

    // send the packet if telemetry is enabled
    if (telemetry_enable)
 800161e:	4b7e      	ldr	r3, [pc, #504]	@ (8001818 <main+0x79c>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80ca 	beq.w	80017be <main+0x742>
    {
      char telemetry_string[200];
      strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
                       global_mission_data.TEAM_ID,      // team id
 800162a:	4b76      	ldr	r3, [pc, #472]	@ (8001804 <main+0x788>)
 800162c:	f9b3 3000 	ldrsh.w	r3, [r3]
      strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 8001630:	61fb      	str	r3, [r7, #28]
 8001632:	4b74      	ldr	r3, [pc, #464]	@ (8001804 <main+0x788>)
 8001634:	68de      	ldr	r6, [r3, #12]
                       global_mission_data.MISSION_TIME, // temp; mission time
                       global_mission_data.PACKET_COUNT, // temp; packet count
                       global_mission_data.MODE,         // mode
 8001636:	4b73      	ldr	r3, [pc, #460]	@ (8001804 <main+0x788>)
 8001638:	7c1b      	ldrb	r3, [r3, #16]
      strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 800163a:	61bb      	str	r3, [r7, #24]
                       global_mission_data.STATE,        // state
                       global_mission_data.ALTITUDE,     // temp; altitude
 800163c:	4b71      	ldr	r3, [pc, #452]	@ (8001804 <main+0x788>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
      strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ffa9 	bl	8000598 <__aeabi_f2d>
 8001646:	4604      	mov	r4, r0
 8001648:	460d      	mov	r5, r1
                       global_mission_data.TEMPERATURE,  // temperature
 800164a:	4b6e      	ldr	r3, [pc, #440]	@ (8001804 <main+0x788>)
 800164c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ffa2 	bl	8000598 <__aeabi_f2d>
 8001654:	4680      	mov	r8, r0
 8001656:	4689      	mov	r9, r1
                       global_mission_data.PRESSURE,     // pressure
 8001658:	4b6a      	ldr	r3, [pc, #424]	@ (8001804 <main+0x788>)
 800165a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff9b 	bl	8000598 <__aeabi_f2d>
 8001662:	4682      	mov	sl, r0
 8001664:	468b      	mov	fp, r1
                       global_mission_data.VOLTAGE,
 8001666:	4b67      	ldr	r3, [pc, #412]	@ (8001804 <main+0x788>)
 8001668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff94 	bl	8000598 <__aeabi_f2d>
 8001670:	460a      	mov	r2, r1
 8001672:	4601      	mov	r1, r0
                       global_mission_data.GYRO_R, // gyro_r
 8001674:	4b63      	ldr	r3, [pc, #396]	@ (8001804 <main+0x788>)
 8001676:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
      strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 800167a:	617b      	str	r3, [r7, #20]
                       global_mission_data.GYRO_P, // gyro_p
 800167c:	4b61      	ldr	r3, [pc, #388]	@ (8001804 <main+0x788>)
 800167e:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
      strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 8001682:	60bb      	str	r3, [r7, #8]
                       global_mission_data.GYRO_Y
 8001684:	4b5f      	ldr	r3, [pc, #380]	@ (8001804 <main+0x788>)
 8001686:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
      strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 800168a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800168e:	930e      	str	r3, [sp, #56]	@ 0x38
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	930d      	str	r3, [sp, #52]	@ 0x34
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	930c      	str	r3, [sp, #48]	@ 0x30
 8001698:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800169c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80016a0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80016a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80016a8:	4b5c      	ldr	r3, [pc, #368]	@ (800181c <main+0x7a0>)
 80016aa:	9302      	str	r3, [sp, #8]
 80016ac:	69b9      	ldr	r1, [r7, #24]
 80016ae:	9101      	str	r1, [sp, #4]
 80016b0:	9600      	str	r6, [sp, #0]
 80016b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001820 <main+0x7a4>)
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	495b      	ldr	r1, [pc, #364]	@ (8001824 <main+0x7a8>)
 80016b8:	f011 ffa8 	bl	801360c <siprintf>
 80016bc:	f8c7 023c 	str.w	r0, [r7, #572]	@ 0x23c
                       // gyro_y
      );
      // strlen = sizeof(telemetry_string);
      HAL_UART_Transmit(&huart3, telemetry_string, strlen, HAL_MAX_DELAY);
 80016c0:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016ce:	4856      	ldr	r0, [pc, #344]	@ (8001828 <main+0x7ac>)
 80016d0:	f00a ff9b 	bl	800c60a <HAL_UART_Transmit>
      memset(telemetry_string, 0, sizeof(telemetry_string)); // flush array
 80016d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016d8:	22c8      	movs	r2, #200	@ 0xc8
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f012 f920 	bl	8013922 <memset>
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
                       global_mission_data.ACCEL_R, // accel_r
 80016e2:	4b48      	ldr	r3, [pc, #288]	@ (8001804 <main+0x788>)
 80016e4:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80016e8:	61fb      	str	r3, [r7, #28]
                       global_mission_data.ACCEL_P, // accel_p
 80016ea:	4b46      	ldr	r3, [pc, #280]	@ (8001804 <main+0x788>)
 80016ec:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80016f0:	61bb      	str	r3, [r7, #24]
                       global_mission_data.ACCEL_Y,
 80016f2:	4b44      	ldr	r3, [pc, #272]	@ (8001804 <main+0x788>)
 80016f4:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	@ 0x3a
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80016f8:	617b      	str	r3, [r7, #20]
                       global_mission_data.MAG_R,                   // temp; mag_r
 80016fa:	4b42      	ldr	r3, [pc, #264]	@ (8001804 <main+0x788>)
 80016fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe ff4a 	bl	8000598 <__aeabi_f2d>
 8001704:	4605      	mov	r5, r0
 8001706:	460e      	mov	r6, r1
                       global_mission_data.MAG_P,                   // temp; mag_p
 8001708:	4b3e      	ldr	r3, [pc, #248]	@ (8001804 <main+0x788>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe ff43 	bl	8000598 <__aeabi_f2d>
 8001712:	e9c7 0102 	strd	r0, r1, [r7, #8]
                       global_mission_data.MAG_Y,                   // temp; mag_y
 8001716:	4b3b      	ldr	r3, [pc, #236]	@ (8001804 <main+0x788>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe ff3c 	bl	8000598 <__aeabi_f2d>
 8001720:	e9c7 0100 	strd	r0, r1, [r7]
                       global_mission_data.AUTO_GYRO_ROTATION_RATE, // temp; auto-gyro rotation rate
 8001724:	4b37      	ldr	r3, [pc, #220]	@ (8001804 <main+0x788>)
 8001726:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 800172a:	613b      	str	r3, [r7, #16]
                       global_mission_data.GPS_TIME,                // temp; gps time
                       global_mission_data.GPS_ALTITUDE,            // temp; gps altitude
 800172c:	4b35      	ldr	r3, [pc, #212]	@ (8001804 <main+0x788>)
 800172e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe ff31 	bl	8000598 <__aeabi_f2d>
 8001736:	4682      	mov	sl, r0
 8001738:	468b      	mov	fp, r1
                       global_mission_data.GPS_LATITUDE,            // temp; gps latitude
 800173a:	4b32      	ldr	r3, [pc, #200]	@ (8001804 <main+0x788>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe ff2a 	bl	8000598 <__aeabi_f2d>
 8001744:	4680      	mov	r8, r0
 8001746:	4689      	mov	r9, r1
                       global_mission_data.GPS_LONGITUDE,           // temp; gps longitude
 8001748:	4b2e      	ldr	r3, [pc, #184]	@ (8001804 <main+0x788>)
 800174a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ff23 	bl	8000598 <__aeabi_f2d>
                       global_mission_data.GPS_SATS,                // temp; # of gps satellites
 8001752:	4b2c      	ldr	r3, [pc, #176]	@ (8001804 <main+0x788>)
 8001754:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001758:	461a      	mov	r2, r3
 800175a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800175e:	4b33      	ldr	r3, [pc, #204]	@ (800182c <main+0x7b0>)
 8001760:	9311      	str	r3, [sp, #68]	@ 0x44
 8001762:	9210      	str	r2, [sp, #64]	@ 0x40
 8001764:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8001768:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 800176c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8001770:	4b2f      	ldr	r3, [pc, #188]	@ (8001830 <main+0x7b4>)
 8001772:	9309      	str	r3, [sp, #36]	@ 0x24
 8001774:	6939      	ldr	r1, [r7, #16]
 8001776:	9108      	str	r1, [sp, #32]
 8001778:	ed97 7b00 	vldr	d7, [r7]
 800177c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001780:	ed97 7b02 	vldr	d7, [r7, #8]
 8001784:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001788:	e9cd 5602 	strd	r5, r6, [sp, #8]
 800178c:	6979      	ldr	r1, [r7, #20]
 800178e:	9100      	str	r1, [sp, #0]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	4927      	ldr	r1, [pc, #156]	@ (8001834 <main+0x7b8>)
 8001796:	4620      	mov	r0, r4
 8001798:	f011 ff38 	bl	801360c <siprintf>
 800179c:	f8c7 023c 	str.w	r0, [r7, #572]	@ 0x23c
                       global_mission_data.CMD_ECHO);
      HAL_UART_Transmit(&huart3, telemetry_string, strlen, HAL_MAX_DELAY);
 80017a0:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017ae:	481e      	ldr	r0, [pc, #120]	@ (8001828 <main+0x7ac>)
 80017b0:	f00a ff2b 	bl	800c60a <HAL_UART_Transmit>

      /*char test_string[30];
      strlen = sprintf(test_string, "accel_z: %d", imu_data.accel_z);
      HAL_UART_Transmit(&huart3, test_string, strlen, HAL_MAX_DELAY);*/

      global_mission_data.PACKET_COUNT = global_mission_data.PACKET_COUNT + 1;
 80017b4:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <main+0x788>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	3301      	adds	r3, #1
 80017ba:	4a12      	ldr	r2, [pc, #72]	@ (8001804 <main+0x788>)
 80017bc:	60d3      	str	r3, [r2, #12]
    }

    // activate resistor
    if (mec_wire_enable == 1)
 80017be:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <main+0x7bc>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d139      	bne.n	800183c <main+0x7c0>
    {
      // actuate resistor
      HAL_GPIO_WritePin(DRV_PWM_GPIO_Port, DRV_PWM_Pin, GPIO_PIN_SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	2108      	movs	r1, #8
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d0:	f004 fda4 	bl	800631c <HAL_GPIO_WritePin>
      super_hot_resistor_cycles += 1;
 80017d4:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 80017d8:	3301      	adds	r3, #1
 80017da:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
      if (super_hot_resistor_cycles >= super_hot_resistor_cycle_limit)
 80017de:	f897 2247 	ldrb.w	r2, [r7, #583]	@ 0x247
 80017e2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d331      	bcc.n	800184e <main+0x7d2>
      {
        HAL_GPIO_WritePin(DRV_PWM_GPIO_Port, DRV_PWM_Pin, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2108      	movs	r1, #8
 80017ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017f2:	f004 fd93 	bl	800631c <HAL_GPIO_WritePin>
        super_hot_resistor_cycles = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
        mec_wire_enable = 0;
 80017fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <main+0x7bc>)
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
 8001802:	e024      	b.n	800184e <main+0x7d2>
 8001804:	200002e8 	.word	0x200002e8
 8001808:	200002dc 	.word	0x200002dc
 800180c:	20000420 	.word	0x20000420
 8001810:	447a0000 	.word	0x447a0000
 8001814:	08016988 	.word	0x08016988
 8001818:	20000000 	.word	0x20000000
 800181c:	200002f9 	.word	0x200002f9
 8001820:	200002ea 	.word	0x200002ea
 8001824:	08016994 	.word	0x08016994
 8001828:	20000724 	.word	0x20000724
 800182c:	20000349 	.word	0x20000349
 8001830:	20000332 	.word	0x20000332
 8001834:	080169c4 	.word	0x080169c4
 8001838:	200002dd 	.word	0x200002dd
      }
    }
    else
    {
      // turn resistor off
    	HAL_GPIO_WritePin(DRV_PWM_GPIO_Port, DRV_PWM_Pin, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	2108      	movs	r1, #8
 8001840:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001844:	f004 fd6a 	bl	800631c <HAL_GPIO_WritePin>
      super_hot_resistor_cycles = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    }

    HAL_Delay(1000);
 800184e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001852:	f002 fe8d 	bl	8004570 <HAL_Delay>

    HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	2180      	movs	r1, #128	@ 0x80
 800185a:	4806      	ldr	r0, [pc, #24]	@ (8001874 <main+0x7f8>)
 800185c:	f004 fd5e 	bl	800631c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001860:	2064      	movs	r0, #100	@ 0x64
 8001862:	f002 fe85 	bl	8004570 <HAL_Delay>
    HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_SET);
 8001866:	2201      	movs	r2, #1
 8001868:	2180      	movs	r1, #128	@ 0x80
 800186a:	4802      	ldr	r0, [pc, #8]	@ (8001874 <main+0x7f8>)
 800186c:	f004 fd56 	bl	800631c <HAL_GPIO_WritePin>
  {
 8001870:	e48c      	b.n	800118c <main+0x110>
 8001872:	bf00      	nop
 8001874:	48000400 	.word	0x48000400

08001878 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b09a      	sub	sp, #104	@ 0x68
 800187c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001882:	2238      	movs	r2, #56	@ 0x38
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f012 f84b 	bl	8013922 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  RCC_CRSInitTypeDef pInit = {0};
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]
 80018aa:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ac:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80018b0:	f007 f834 	bl	800891c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 80018b4:	f006 ffa2 	bl	80087fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018b8:	4b37      	ldr	r3, [pc, #220]	@ (8001998 <SystemClock_Config+0x120>)
 80018ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018be:	4a36      	ldr	r2, [pc, #216]	@ (8001998 <SystemClock_Config+0x120>)
 80018c0:	f023 0318 	bic.w	r3, r3, #24
 80018c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 80018c8:	232e      	movs	r3, #46	@ 0x2e
 80018ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018cc:	2301      	movs	r3, #1
 80018ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018d6:	2340      	movs	r3, #64	@ 0x40
 80018d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018da:	2301      	movs	r3, #1
 80018dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80018de:	2301      	movs	r3, #1
 80018e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e2:	2302      	movs	r3, #2
 80018e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018e6:	2302      	movs	r3, #2
 80018e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80018ea:	2301      	movs	r3, #1
 80018ec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 80018ee:	2308      	movs	r3, #8
 80018f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018f2:	2302      	movs	r3, #2
 80018f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018f6:	2302      	movs	r3, #2
 80018f8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018fa:	2302      	movs	r3, #2
 80018fc:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001902:	4618      	mov	r0, r3
 8001904:	f007 f8be 	bl	8008a84 <HAL_RCC_OscConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800190e:	f000 fdf3 	bl	80024f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001912:	230f      	movs	r3, #15
 8001914:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001916:	2303      	movs	r3, #3
 8001918:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800191e:	2300      	movs	r3, #0
 8001920:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001922:	2300      	movs	r3, #0
 8001924:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	2102      	movs	r1, #2
 800192c:	4618      	mov	r0, r3
 800192e:	f007 fbbb 	bl	80090a8 <HAL_RCC_ClockConfig>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001938:	f000 fdde 	bl	80024f8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800193c:	2200      	movs	r2, #0
 800193e:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 8001942:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001946:	f007 fceb 	bl	8009320 <HAL_RCC_MCOConfig>
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSE);
 800194a:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800194e:	f008 f87b 	bl	8009a48 <HAL_RCCEx_EnableLSCO>

  /** Enable the SYSCFG APB clock
   */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001952:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <SystemClock_Config+0x120>)
 8001954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001956:	4a10      	ldr	r2, [pc, #64]	@ (8001998 <SystemClock_Config+0x120>)
 8001958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800195c:	6593      	str	r3, [r2, #88]	@ 0x58
 800195e:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <SystemClock_Config+0x120>)
 8001960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	683b      	ldr	r3, [r7, #0]

  /** Configures CRS
   */
  pInit.Prescaler = RCC_CRS_SYNC_DIV1;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
  pInit.Source = RCC_CRS_SYNC_SOURCE_LSE;
 800196e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001972:	60bb      	str	r3, [r7, #8]
  pInit.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
  pInit.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 32768);
 8001978:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 800197c:	613b      	str	r3, [r7, #16]
  pInit.ErrorLimitValue = 34;
 800197e:	2322      	movs	r3, #34	@ 0x22
 8001980:	617b      	str	r3, [r7, #20]
  pInit.HSI48CalibrationValue = 32;
 8001982:	2320      	movs	r3, #32
 8001984:	61bb      	str	r3, [r7, #24]

  HAL_RCCEx_CRSConfig(&pInit);
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	4618      	mov	r0, r3
 800198a:	f008 f8c7 	bl	8009b1c <HAL_RCCEx_CRSConfig>
}
 800198e:	bf00      	nop
 8001990:	3768      	adds	r7, #104	@ 0x68
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000

0800199c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08c      	sub	sp, #48	@ 0x30
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80019a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	2220      	movs	r2, #32
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f011 ffb4 	bl	8013922 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 80019ba:	4b32      	ldr	r3, [pc, #200]	@ (8001a84 <MX_ADC1_Init+0xe8>)
 80019bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80019c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019c2:	4b30      	ldr	r3, [pc, #192]	@ (8001a84 <MX_ADC1_Init+0xe8>)
 80019c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001a84 <MX_ADC1_Init+0xe8>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a84 <MX_ADC1_Init+0xe8>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80019d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001a84 <MX_ADC1_Init+0xe8>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019dc:	4b29      	ldr	r3, [pc, #164]	@ (8001a84 <MX_ADC1_Init+0xe8>)
 80019de:	2200      	movs	r2, #0
 80019e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019e2:	4b28      	ldr	r3, [pc, #160]	@ (8001a84 <MX_ADC1_Init+0xe8>)
 80019e4:	2204      	movs	r2, #4
 80019e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80019e8:	4b26      	ldr	r3, [pc, #152]	@ (8001a84 <MX_ADC1_Init+0xe8>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019ee:	4b25      	ldr	r3, [pc, #148]	@ (8001a84 <MX_ADC1_Init+0xe8>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80019f4:	4b23      	ldr	r3, [pc, #140]	@ (8001a84 <MX_ADC1_Init+0xe8>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019fa:	4b22      	ldr	r3, [pc, #136]	@ (8001a84 <MX_ADC1_Init+0xe8>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a02:	4b20      	ldr	r3, [pc, #128]	@ (8001a84 <MX_ADC1_Init+0xe8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a08:	4b1e      	ldr	r3, [pc, #120]	@ (8001a84 <MX_ADC1_Init+0xe8>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a84 <MX_ADC1_Init+0xe8>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a16:	4b1b      	ldr	r3, [pc, #108]	@ (8001a84 <MX_ADC1_Init+0xe8>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001a1c:	4b19      	ldr	r3, [pc, #100]	@ (8001a84 <MX_ADC1_Init+0xe8>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a24:	4817      	ldr	r0, [pc, #92]	@ (8001a84 <MX_ADC1_Init+0xe8>)
 8001a26:	f002 ffbf 	bl	80049a8 <HAL_ADC_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001a30:	f000 fd62 	bl	80024f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
   */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a34:	2300      	movs	r3, #0
 8001a36:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4811      	ldr	r0, [pc, #68]	@ (8001a84 <MX_ADC1_Init+0xe8>)
 8001a40:	f003 fdb2 	bl	80055a8 <HAL_ADCEx_MultiModeConfigChannel>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001a4a:	f000 fd55 	bl	80024f8 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_9;
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a88 <MX_ADC1_Init+0xec>)
 8001a50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a52:	2306      	movs	r3, #6
 8001a54:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a5a:	237f      	movs	r3, #127	@ 0x7f
 8001a5c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a5e:	2304      	movs	r3, #4
 8001a60:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4806      	ldr	r0, [pc, #24]	@ (8001a84 <MX_ADC1_Init+0xe8>)
 8001a6c:	f003 f94a 	bl	8004d04 <HAL_ADC_ConfigChannel>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001a76:	f000 fd3f 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8001a7a:	bf00      	nop
 8001a7c:	3730      	adds	r7, #48	@ 0x30
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000354 	.word	0x20000354
 8001a88:	25b00200 	.word	0x25b00200

08001a8c <MX_CORDIC_Init>:
 * @brief CORDIC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CORDIC_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <MX_CORDIC_Init+0x20>)
 8001a92:	4a07      	ldr	r2, [pc, #28]	@ (8001ab0 <MX_CORDIC_Init+0x24>)
 8001a94:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001a96:	4805      	ldr	r0, [pc, #20]	@ (8001aac <MX_CORDIC_Init+0x20>)
 8001a98:	f003 fe6e 	bl	8005778 <HAL_CORDIC_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001aa2:	f000 fd29 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200003c0 	.word	0x200003c0
 8001ab0:	40020c00 	.word	0x40020c00

08001ab4 <MX_FMAC_Init>:
 * @brief FMAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_FMAC_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <MX_FMAC_Init+0x20>)
 8001aba:	4a07      	ldr	r2, [pc, #28]	@ (8001ad8 <MX_FMAC_Init+0x24>)
 8001abc:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8001abe:	4805      	ldr	r0, [pc, #20]	@ (8001ad4 <MX_FMAC_Init+0x20>)
 8001ac0:	f004 f9e6 	bl	8005e90 <HAL_FMAC_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8001aca:	f000 fd15 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200003e8 	.word	0x200003e8
 8001ad8:	40021400 	.word	0x40021400

08001adc <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b50 <MX_I2C3_Init+0x74>)
 8001ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8001b54 <MX_I2C3_Init+0x78>)
 8001ae4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10B17DB5;
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b50 <MX_I2C3_Init+0x74>)
 8001ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b58 <MX_I2C3_Init+0x7c>)
 8001aea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001aec:	4b18      	ldr	r3, [pc, #96]	@ (8001b50 <MX_I2C3_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001af2:	4b17      	ldr	r3, [pc, #92]	@ (8001b50 <MX_I2C3_Init+0x74>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af8:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <MX_I2C3_Init+0x74>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001afe:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <MX_I2C3_Init+0x74>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b04:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <MX_I2C3_Init+0x74>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b0a:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <MX_I2C3_Init+0x74>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b10:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <MX_I2C3_Init+0x74>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b16:	480e      	ldr	r0, [pc, #56]	@ (8001b50 <MX_I2C3_Init+0x74>)
 8001b18:	f004 fc18 	bl	800634c <HAL_I2C_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001b22:	f000 fce9 	bl	80024f8 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b26:	2100      	movs	r1, #0
 8001b28:	4809      	ldr	r0, [pc, #36]	@ (8001b50 <MX_I2C3_Init+0x74>)
 8001b2a:	f005 f833 	bl	8006b94 <HAL_I2CEx_ConfigAnalogFilter>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001b34:	f000 fce0 	bl	80024f8 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4805      	ldr	r0, [pc, #20]	@ (8001b50 <MX_I2C3_Init+0x74>)
 8001b3c:	f005 f875 	bl	8006c2a <HAL_I2CEx_ConfigDigitalFilter>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001b46:	f000 fcd7 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000420 	.word	0x20000420
 8001b54:	40007800 	.word	0x40007800
 8001b58:	10b17db5 	.word	0x10b17db5

08001b5c <MX_IRTIM_Init>:
 * @brief IRTIM Initialization Function
 * @param None
 * @retval None
 */
static void MX_IRTIM_Init(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* USER CODE END IRTIM_Init 1 */
  /* USER CODE BEGIN IRTIM_Init 2 */

  /* USER CODE END IRTIM_Init 2 */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <MX_RNG_Init>:
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001b70:	4b07      	ldr	r3, [pc, #28]	@ (8001b90 <MX_RNG_Init+0x24>)
 8001b72:	4a08      	ldr	r2, [pc, #32]	@ (8001b94 <MX_RNG_Init+0x28>)
 8001b74:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <MX_RNG_Init+0x24>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001b7c:	4804      	ldr	r0, [pc, #16]	@ (8001b90 <MX_RNG_Init+0x24>)
 8001b7e:	f008 f80f 	bl	8009ba0 <HAL_RNG_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001b88:	f000 fcb6 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000474 	.word	0x20000474
 8001b94:	50060800 	.word	0x50060800

08001b98 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 8001b9c:	4b16      	ldr	r3, [pc, #88]	@ (8001bf8 <MX_RTC_Init+0x60>)
 8001b9e:	4a17      	ldr	r2, [pc, #92]	@ (8001bfc <MX_RTC_Init+0x64>)
 8001ba0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ba2:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <MX_RTC_Init+0x60>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ba8:	4b13      	ldr	r3, [pc, #76]	@ (8001bf8 <MX_RTC_Init+0x60>)
 8001baa:	227f      	movs	r2, #127	@ 0x7f
 8001bac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001bae:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <MX_RTC_Init+0x60>)
 8001bb0:	22ff      	movs	r2, #255	@ 0xff
 8001bb2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bb4:	4b10      	ldr	r3, [pc, #64]	@ (8001bf8 <MX_RTC_Init+0x60>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bba:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf8 <MX_RTC_Init+0x60>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf8 <MX_RTC_Init+0x60>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <MX_RTC_Init+0x60>)
 8001bc8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bcc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001bce:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <MX_RTC_Init+0x60>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bd4:	4808      	ldr	r0, [pc, #32]	@ (8001bf8 <MX_RTC_Init+0x60>)
 8001bd6:	f008 f818 	bl	8009c0a <HAL_RTC_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8001be0:	f000 fc8a 	bl	80024f8 <Error_Handler>
  }

  /** Enable the reference Clock input
   */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8001be4:	4804      	ldr	r0, [pc, #16]	@ (8001bf8 <MX_RTC_Init+0x60>)
 8001be6:	f008 f92c 	bl	8009e42 <HAL_RTCEx_SetRefClock>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001bf0:	f000 fc82 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000488 	.word	0x20000488
 8001bfc:	40002800 	.word	0x40002800

08001c00 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c04:	4b1b      	ldr	r3, [pc, #108]	@ (8001c74 <MX_SPI2_Init+0x74>)
 8001c06:	4a1c      	ldr	r2, [pc, #112]	@ (8001c78 <MX_SPI2_Init+0x78>)
 8001c08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <MX_SPI2_Init+0x74>)
 8001c0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c12:	4b18      	ldr	r3, [pc, #96]	@ (8001c74 <MX_SPI2_Init+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c18:	4b16      	ldr	r3, [pc, #88]	@ (8001c74 <MX_SPI2_Init+0x74>)
 8001c1a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001c1e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c20:	4b14      	ldr	r3, [pc, #80]	@ (8001c74 <MX_SPI2_Init+0x74>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c26:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <MX_SPI2_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <MX_SPI2_Init+0x74>)
 8001c2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c32:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c34:	4b0f      	ldr	r3, [pc, #60]	@ (8001c74 <MX_SPI2_Init+0x74>)
 8001c36:	2210      	movs	r2, #16
 8001c38:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c74 <MX_SPI2_Init+0x74>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c40:	4b0c      	ldr	r3, [pc, #48]	@ (8001c74 <MX_SPI2_Init+0x74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c46:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <MX_SPI2_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001c4c:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <MX_SPI2_Init+0x74>)
 8001c4e:	2207      	movs	r2, #7
 8001c50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c52:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <MX_SPI2_Init+0x74>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <MX_SPI2_Init+0x74>)
 8001c5a:	2208      	movs	r2, #8
 8001c5c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c5e:	4805      	ldr	r0, [pc, #20]	@ (8001c74 <MX_SPI2_Init+0x74>)
 8001c60:	f008 f933 	bl	8009eca <HAL_SPI_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001c6a:	f000 fc45 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200004b0 	.word	0x200004b0
 8001c78:	40003800 	.word	0x40003800

08001c7c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b092      	sub	sp, #72	@ 0x48
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c86:	2224      	movs	r2, #36	@ 0x24
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f011 fe49 	bl	8013922 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c90:	f107 0318 	add.w	r3, r7, #24
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 8001c9c:	463b      	mov	r3, r7
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
 8001ca8:	611a      	str	r2, [r3, #16]
 8001caa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cac:	4b2e      	ldr	r3, [pc, #184]	@ (8001d68 <MX_TIM1_Init+0xec>)
 8001cae:	4a2f      	ldr	r2, [pc, #188]	@ (8001d6c <MX_TIM1_Init+0xf0>)
 8001cb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d68 <MX_TIM1_Init+0xec>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d68 <MX_TIM1_Init+0xec>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001d68 <MX_TIM1_Init+0xec>)
 8001cc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc6:	4b28      	ldr	r3, [pc, #160]	@ (8001d68 <MX_TIM1_Init+0xec>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ccc:	4b26      	ldr	r3, [pc, #152]	@ (8001d68 <MX_TIM1_Init+0xec>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd2:	4b25      	ldr	r3, [pc, #148]	@ (8001d68 <MX_TIM1_Init+0xec>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cec:	2300      	movs	r3, #0
 8001cee:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d00:	4619      	mov	r1, r3
 8001d02:	4819      	ldr	r0, [pc, #100]	@ (8001d68 <MX_TIM1_Init+0xec>)
 8001d04:	f009 f935 	bl	800af72 <HAL_TIM_Encoder_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d0e:	f000 fbf3 	bl	80024f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d1e:	f107 0318 	add.w	r3, r7, #24
 8001d22:	4619      	mov	r1, r3
 8001d24:	4810      	ldr	r0, [pc, #64]	@ (8001d68 <MX_TIM1_Init+0xec>)
 8001d26:	f00a fa7d 	bl	800c224 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001d30:	f000 fbe2 	bl	80024f8 <Error_Handler>
  }
  sEncoderIndexConfig.Polarity = TIM_ENCODERINDEX_POLARITY_NONINVERTED;
 8001d34:	2300      	movs	r3, #0
 8001d36:	603b      	str	r3, [r7, #0]
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	607b      	str	r3, [r7, #4]
  sEncoderIndexConfig.Filter = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60bb      	str	r3, [r7, #8]
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	733b      	strb	r3, [r7, #12]
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_00;
 8001d44:	2300      	movs	r3, #0
 8001d46:	613b      	str	r3, [r7, #16]
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_ConfigEncoderIndex(&htim1, &sEncoderIndexConfig) != HAL_OK)
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4805      	ldr	r0, [pc, #20]	@ (8001d68 <MX_TIM1_Init+0xec>)
 8001d52:	f00a fb89 	bl	800c468 <HAL_TIMEx_ConfigEncoderIndex>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8001d5c:	f000 fbcc 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
}
 8001d60:	bf00      	nop
 8001d62:	3748      	adds	r7, #72	@ 0x48
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000514 	.word	0x20000514
 8001d6c:	40012c00 	.word	0x40012c00

08001d70 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08e      	sub	sp, #56	@ 0x38
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d84:	f107 031c 	add.w	r3, r7, #28
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d90:	463b      	mov	r3, r7
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
 8001d9c:	611a      	str	r2, [r3, #16]
 8001d9e:	615a      	str	r2, [r3, #20]
 8001da0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001da2:	4b3d      	ldr	r3, [pc, #244]	@ (8001e98 <MX_TIM3_Init+0x128>)
 8001da4:	4a3d      	ldr	r2, [pc, #244]	@ (8001e9c <MX_TIM3_Init+0x12c>)
 8001da6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001da8:	4b3b      	ldr	r3, [pc, #236]	@ (8001e98 <MX_TIM3_Init+0x128>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dae:	4b3a      	ldr	r3, [pc, #232]	@ (8001e98 <MX_TIM3_Init+0x128>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001db4:	4b38      	ldr	r3, [pc, #224]	@ (8001e98 <MX_TIM3_Init+0x128>)
 8001db6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dbc:	4b36      	ldr	r3, [pc, #216]	@ (8001e98 <MX_TIM3_Init+0x128>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc2:	4b35      	ldr	r3, [pc, #212]	@ (8001e98 <MX_TIM3_Init+0x128>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dc8:	4833      	ldr	r0, [pc, #204]	@ (8001e98 <MX_TIM3_Init+0x128>)
 8001dca:	f008 ffb3 	bl	800ad34 <HAL_TIM_Base_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001dd4:	f000 fb90 	bl	80024f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001de2:	4619      	mov	r1, r3
 8001de4:	482c      	ldr	r0, [pc, #176]	@ (8001e98 <MX_TIM3_Init+0x128>)
 8001de6:	f009 fc5b 	bl	800b6a0 <HAL_TIM_ConfigClockSource>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001df0:	f000 fb82 	bl	80024f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001df4:	4828      	ldr	r0, [pc, #160]	@ (8001e98 <MX_TIM3_Init+0x128>)
 8001df6:	f009 f865 	bl	800aec4 <HAL_TIM_PWM_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001e00:	f000 fb7a 	bl	80024f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e0c:	f107 031c 	add.w	r3, r7, #28
 8001e10:	4619      	mov	r1, r3
 8001e12:	4821      	ldr	r0, [pc, #132]	@ (8001e98 <MX_TIM3_Init+0x128>)
 8001e14:	f00a fa06 	bl	800c224 <HAL_TIMEx_MasterConfigSynchronization>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001e1e:	f000 fb6b 	bl	80024f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e22:	2360      	movs	r3, #96	@ 0x60
 8001e24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e32:	463b      	mov	r3, r7
 8001e34:	2200      	movs	r2, #0
 8001e36:	4619      	mov	r1, r3
 8001e38:	4817      	ldr	r0, [pc, #92]	@ (8001e98 <MX_TIM3_Init+0x128>)
 8001e3a:	f009 fb1d 	bl	800b478 <HAL_TIM_PWM_ConfigChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001e44:	f000 fb58 	bl	80024f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e48:	463b      	mov	r3, r7
 8001e4a:	2204      	movs	r2, #4
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4812      	ldr	r0, [pc, #72]	@ (8001e98 <MX_TIM3_Init+0x128>)
 8001e50:	f009 fb12 	bl	800b478 <HAL_TIM_PWM_ConfigChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001e5a:	f000 fb4d 	bl	80024f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e5e:	463b      	mov	r3, r7
 8001e60:	2208      	movs	r2, #8
 8001e62:	4619      	mov	r1, r3
 8001e64:	480c      	ldr	r0, [pc, #48]	@ (8001e98 <MX_TIM3_Init+0x128>)
 8001e66:	f009 fb07 	bl	800b478 <HAL_TIM_PWM_ConfigChannel>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001e70:	f000 fb42 	bl	80024f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e74:	463b      	mov	r3, r7
 8001e76:	220c      	movs	r2, #12
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4807      	ldr	r0, [pc, #28]	@ (8001e98 <MX_TIM3_Init+0x128>)
 8001e7c:	f009 fafc 	bl	800b478 <HAL_TIM_PWM_ConfigChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001e86:	f000 fb37 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e8a:	4803      	ldr	r0, [pc, #12]	@ (8001e98 <MX_TIM3_Init+0x128>)
 8001e8c:	f000 fe32 	bl	8002af4 <HAL_TIM_MspPostInit>
}
 8001e90:	bf00      	nop
 8001e92:	3738      	adds	r7, #56	@ 0x38
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000560 	.word	0x20000560
 8001e9c:	40000400 	.word	0x40000400

08001ea0 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b092      	sub	sp, #72	@ 0x48
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eaa:	2224      	movs	r2, #36	@ 0x24
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f011 fd37 	bl	8013922 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb4:	f107 0318 	add.w	r3, r7, #24
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 8001ec0:	463b      	mov	r3, r7
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	60da      	str	r2, [r3, #12]
 8001ecc:	611a      	str	r2, [r3, #16]
 8001ece:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f8c <MX_TIM8_Init+0xec>)
 8001ed2:	4a2f      	ldr	r2, [pc, #188]	@ (8001f90 <MX_TIM8_Init+0xf0>)
 8001ed4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f8c <MX_TIM8_Init+0xec>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001edc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f8c <MX_TIM8_Init+0xec>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f8c <MX_TIM8_Init+0xec>)
 8001ee4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ee8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eea:	4b28      	ldr	r3, [pc, #160]	@ (8001f8c <MX_TIM8_Init+0xec>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ef0:	4b26      	ldr	r3, [pc, #152]	@ (8001f8c <MX_TIM8_Init+0xec>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef6:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <MX_TIM8_Init+0xec>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001efc:	2301      	movs	r3, #1
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f00:	2300      	movs	r3, #0
 8001f02:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f04:	2301      	movs	r3, #1
 8001f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f10:	2300      	movs	r3, #0
 8001f12:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f14:	2301      	movs	r3, #1
 8001f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001f20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f24:	4619      	mov	r1, r3
 8001f26:	4819      	ldr	r0, [pc, #100]	@ (8001f8c <MX_TIM8_Init+0xec>)
 8001f28:	f009 f823 	bl	800af72 <HAL_TIM_Encoder_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001f32:	f000 fae1 	bl	80024f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f42:	f107 0318 	add.w	r3, r7, #24
 8001f46:	4619      	mov	r1, r3
 8001f48:	4810      	ldr	r0, [pc, #64]	@ (8001f8c <MX_TIM8_Init+0xec>)
 8001f4a:	f00a f96b 	bl	800c224 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8001f54:	f000 fad0 	bl	80024f8 <Error_Handler>
  }
  sEncoderIndexConfig.Polarity = TIM_ENCODERINDEX_POLARITY_NONINVERTED;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	603b      	str	r3, [r7, #0]
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
  sEncoderIndexConfig.Filter = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	733b      	strb	r3, [r7, #12]
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_00;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	613b      	str	r3, [r7, #16]
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_ConfigEncoderIndex(&htim8, &sEncoderIndexConfig) != HAL_OK)
 8001f70:	463b      	mov	r3, r7
 8001f72:	4619      	mov	r1, r3
 8001f74:	4805      	ldr	r0, [pc, #20]	@ (8001f8c <MX_TIM8_Init+0xec>)
 8001f76:	f00a fa77 	bl	800c468 <HAL_TIMEx_ConfigEncoderIndex>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM8_Init+0xe4>
  {
    Error_Handler();
 8001f80:	f000 faba 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
}
 8001f84:	bf00      	nop
 8001f86:	3748      	adds	r7, #72	@ 0x48
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	200005ac 	.word	0x200005ac
 8001f90:	40013400 	.word	0x40013400

08001f94 <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b094      	sub	sp, #80	@ 0x50
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f9a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	60da      	str	r2, [r3, #12]
 8001fa8:	611a      	str	r2, [r3, #16]
 8001faa:	615a      	str	r2, [r3, #20]
 8001fac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fae:	463b      	mov	r3, r7
 8001fb0:	2234      	movs	r2, #52	@ 0x34
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f011 fcb4 	bl	8013922 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001fba:	4b2f      	ldr	r3, [pc, #188]	@ (8002078 <MX_TIM16_Init+0xe4>)
 8001fbc:	4a2f      	ldr	r2, [pc, #188]	@ (800207c <MX_TIM16_Init+0xe8>)
 8001fbe:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8002078 <MX_TIM16_Init+0xe4>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc6:	4b2c      	ldr	r3, [pc, #176]	@ (8002078 <MX_TIM16_Init+0xe4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8002078 <MX_TIM16_Init+0xe4>)
 8001fce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fd2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd4:	4b28      	ldr	r3, [pc, #160]	@ (8002078 <MX_TIM16_Init+0xe4>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001fda:	4b27      	ldr	r3, [pc, #156]	@ (8002078 <MX_TIM16_Init+0xe4>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe0:	4b25      	ldr	r3, [pc, #148]	@ (8002078 <MX_TIM16_Init+0xe4>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001fe6:	4824      	ldr	r0, [pc, #144]	@ (8002078 <MX_TIM16_Init+0xe4>)
 8001fe8:	f008 fea4 	bl	800ad34 <HAL_TIM_Base_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001ff2:	f000 fa81 	bl	80024f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001ff6:	4820      	ldr	r0, [pc, #128]	@ (8002078 <MX_TIM16_Init+0xe4>)
 8001ff8:	f008 ff64 	bl	800aec4 <HAL_TIM_PWM_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002002:	f000 fa79 	bl	80024f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002006:	2360      	movs	r3, #96	@ 0x60
 8002008:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800200e:	2300      	movs	r3, #0
 8002010:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002012:	2300      	movs	r3, #0
 8002014:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002022:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002026:	2200      	movs	r2, #0
 8002028:	4619      	mov	r1, r3
 800202a:	4813      	ldr	r0, [pc, #76]	@ (8002078 <MX_TIM16_Init+0xe4>)
 800202c:	f009 fa24 	bl	800b478 <HAL_TIM_PWM_ConfigChannel>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8002036:	f000 fa5f 	bl	80024f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800204e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002052:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800205c:	463b      	mov	r3, r7
 800205e:	4619      	mov	r1, r3
 8002060:	4805      	ldr	r0, [pc, #20]	@ (8002078 <MX_TIM16_Init+0xe4>)
 8002062:	f00a f96d 	bl	800c340 <HAL_TIMEx_ConfigBreakDeadTime>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 800206c:	f000 fa44 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 8002070:	bf00      	nop
 8002072:	3750      	adds	r7, #80	@ 0x50
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	200005f8 	.word	0x200005f8
 800207c:	40014400 	.word	0x40014400

08002080 <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b094      	sub	sp, #80	@ 0x50
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002086:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
 8002094:	611a      	str	r2, [r3, #16]
 8002096:	615a      	str	r2, [r3, #20]
 8002098:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800209a:	463b      	mov	r3, r7
 800209c:	2234      	movs	r2, #52	@ 0x34
 800209e:	2100      	movs	r1, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f011 fc3e 	bl	8013922 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80020a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002164 <MX_TIM17_Init+0xe4>)
 80020a8:	4a2f      	ldr	r2, [pc, #188]	@ (8002168 <MX_TIM17_Init+0xe8>)
 80020aa:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80020ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002164 <MX_TIM17_Init+0xe4>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002164 <MX_TIM17_Init+0xe4>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80020b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002164 <MX_TIM17_Init+0xe4>)
 80020ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020be:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c0:	4b28      	ldr	r3, [pc, #160]	@ (8002164 <MX_TIM17_Init+0xe4>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80020c6:	4b27      	ldr	r3, [pc, #156]	@ (8002164 <MX_TIM17_Init+0xe4>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020cc:	4b25      	ldr	r3, [pc, #148]	@ (8002164 <MX_TIM17_Init+0xe4>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80020d2:	4824      	ldr	r0, [pc, #144]	@ (8002164 <MX_TIM17_Init+0xe4>)
 80020d4:	f008 fe2e 	bl	800ad34 <HAL_TIM_Base_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80020de:	f000 fa0b 	bl	80024f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80020e2:	4820      	ldr	r0, [pc, #128]	@ (8002164 <MX_TIM17_Init+0xe4>)
 80020e4:	f008 feee 	bl	800aec4 <HAL_TIM_PWM_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80020ee:	f000 fa03 	bl	80024f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f2:	2360      	movs	r3, #96	@ 0x60
 80020f4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020fa:	2300      	movs	r3, #0
 80020fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020fe:	2300      	movs	r3, #0
 8002100:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002102:	2300      	movs	r3, #0
 8002104:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800210e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002112:	2200      	movs	r2, #0
 8002114:	4619      	mov	r1, r3
 8002116:	4813      	ldr	r0, [pc, #76]	@ (8002164 <MX_TIM17_Init+0xe4>)
 8002118:	f009 f9ae 	bl	800b478 <HAL_TIM_PWM_ConfigChannel>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8002122:	f000 f9e9 	bl	80024f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800213a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800213e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002148:	463b      	mov	r3, r7
 800214a:	4619      	mov	r1, r3
 800214c:	4805      	ldr	r0, [pc, #20]	@ (8002164 <MX_TIM17_Init+0xe4>)
 800214e:	f00a f8f7 	bl	800c340 <HAL_TIMEx_ConfigBreakDeadTime>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8002158:	f000 f9ce 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
}
 800215c:	bf00      	nop
 800215e:	3750      	adds	r7, #80	@ 0x50
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000644 	.word	0x20000644
 8002168:	40014800 	.word	0x40014800

0800216c <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002170:	4b22      	ldr	r3, [pc, #136]	@ (80021fc <MX_UART5_Init+0x90>)
 8002172:	4a23      	ldr	r2, [pc, #140]	@ (8002200 <MX_UART5_Init+0x94>)
 8002174:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002176:	4b21      	ldr	r3, [pc, #132]	@ (80021fc <MX_UART5_Init+0x90>)
 8002178:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800217c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800217e:	4b1f      	ldr	r3, [pc, #124]	@ (80021fc <MX_UART5_Init+0x90>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002184:	4b1d      	ldr	r3, [pc, #116]	@ (80021fc <MX_UART5_Init+0x90>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800218a:	4b1c      	ldr	r3, [pc, #112]	@ (80021fc <MX_UART5_Init+0x90>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002190:	4b1a      	ldr	r3, [pc, #104]	@ (80021fc <MX_UART5_Init+0x90>)
 8002192:	220c      	movs	r2, #12
 8002194:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002196:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <MX_UART5_Init+0x90>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800219c:	4b17      	ldr	r3, [pc, #92]	@ (80021fc <MX_UART5_Init+0x90>)
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021a2:	4b16      	ldr	r3, [pc, #88]	@ (80021fc <MX_UART5_Init+0x90>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021a8:	4b14      	ldr	r3, [pc, #80]	@ (80021fc <MX_UART5_Init+0x90>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021ae:	4b13      	ldr	r3, [pc, #76]	@ (80021fc <MX_UART5_Init+0x90>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80021b4:	4811      	ldr	r0, [pc, #68]	@ (80021fc <MX_UART5_Init+0x90>)
 80021b6:	f00a f9d8 	bl	800c56a <HAL_UART_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80021c0:	f000 f99a 	bl	80024f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021c4:	2100      	movs	r1, #0
 80021c6:	480d      	ldr	r0, [pc, #52]	@ (80021fc <MX_UART5_Init+0x90>)
 80021c8:	f00c fb21 	bl	800e80e <HAL_UARTEx_SetTxFifoThreshold>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80021d2:	f000 f991 	bl	80024f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021d6:	2100      	movs	r1, #0
 80021d8:	4808      	ldr	r0, [pc, #32]	@ (80021fc <MX_UART5_Init+0x90>)
 80021da:	f00c fb56 	bl	800e88a <HAL_UARTEx_SetRxFifoThreshold>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80021e4:	f000 f988 	bl	80024f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80021e8:	4804      	ldr	r0, [pc, #16]	@ (80021fc <MX_UART5_Init+0x90>)
 80021ea:	f00c fad7 	bl	800e79c <HAL_UARTEx_DisableFifoMode>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80021f4:	f000 f980 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000690 	.word	0x20000690
 8002200:	40005000 	.word	0x40005000

08002204 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002208:	4b22      	ldr	r3, [pc, #136]	@ (8002294 <MX_USART3_UART_Init+0x90>)
 800220a:	4a23      	ldr	r2, [pc, #140]	@ (8002298 <MX_USART3_UART_Init+0x94>)
 800220c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800220e:	4b21      	ldr	r3, [pc, #132]	@ (8002294 <MX_USART3_UART_Init+0x90>)
 8002210:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002214:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002216:	4b1f      	ldr	r3, [pc, #124]	@ (8002294 <MX_USART3_UART_Init+0x90>)
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800221c:	4b1d      	ldr	r3, [pc, #116]	@ (8002294 <MX_USART3_UART_Init+0x90>)
 800221e:	2200      	movs	r2, #0
 8002220:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002222:	4b1c      	ldr	r3, [pc, #112]	@ (8002294 <MX_USART3_UART_Init+0x90>)
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002228:	4b1a      	ldr	r3, [pc, #104]	@ (8002294 <MX_USART3_UART_Init+0x90>)
 800222a:	220c      	movs	r2, #12
 800222c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800222e:	4b19      	ldr	r3, [pc, #100]	@ (8002294 <MX_USART3_UART_Init+0x90>)
 8002230:	2200      	movs	r2, #0
 8002232:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002234:	4b17      	ldr	r3, [pc, #92]	@ (8002294 <MX_USART3_UART_Init+0x90>)
 8002236:	2200      	movs	r2, #0
 8002238:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800223a:	4b16      	ldr	r3, [pc, #88]	@ (8002294 <MX_USART3_UART_Init+0x90>)
 800223c:	2200      	movs	r2, #0
 800223e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002240:	4b14      	ldr	r3, [pc, #80]	@ (8002294 <MX_USART3_UART_Init+0x90>)
 8002242:	2200      	movs	r2, #0
 8002244:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002246:	4b13      	ldr	r3, [pc, #76]	@ (8002294 <MX_USART3_UART_Init+0x90>)
 8002248:	2200      	movs	r2, #0
 800224a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800224c:	4811      	ldr	r0, [pc, #68]	@ (8002294 <MX_USART3_UART_Init+0x90>)
 800224e:	f00a f98c 	bl	800c56a <HAL_UART_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002258:	f000 f94e 	bl	80024f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800225c:	2100      	movs	r1, #0
 800225e:	480d      	ldr	r0, [pc, #52]	@ (8002294 <MX_USART3_UART_Init+0x90>)
 8002260:	f00c fad5 	bl	800e80e <HAL_UARTEx_SetTxFifoThreshold>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800226a:	f000 f945 	bl	80024f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800226e:	2100      	movs	r1, #0
 8002270:	4808      	ldr	r0, [pc, #32]	@ (8002294 <MX_USART3_UART_Init+0x90>)
 8002272:	f00c fb0a 	bl	800e88a <HAL_UARTEx_SetRxFifoThreshold>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800227c:	f000 f93c 	bl	80024f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002280:	4804      	ldr	r0, [pc, #16]	@ (8002294 <MX_USART3_UART_Init+0x90>)
 8002282:	f00c fa8b 	bl	800e79c <HAL_UARTEx_DisableFifoMode>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800228c:	f000 f934 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000724 	.word	0x20000724
 8002298:	40004800 	.word	0x40004800

0800229c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80022a2:	4b12      	ldr	r3, [pc, #72]	@ (80022ec <MX_DMA_Init+0x50>)
 80022a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a6:	4a11      	ldr	r2, [pc, #68]	@ (80022ec <MX_DMA_Init+0x50>)
 80022a8:	f043 0304 	orr.w	r3, r3, #4
 80022ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80022ae:	4b0f      	ldr	r3, [pc, #60]	@ (80022ec <MX_DMA_Init+0x50>)
 80022b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022ba:	4b0c      	ldr	r3, [pc, #48]	@ (80022ec <MX_DMA_Init+0x50>)
 80022bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022be:	4a0b      	ldr	r2, [pc, #44]	@ (80022ec <MX_DMA_Init+0x50>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6493      	str	r3, [r2, #72]	@ 0x48
 80022c6:	4b09      	ldr	r3, [pc, #36]	@ (80022ec <MX_DMA_Init+0x50>)
 80022c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80022d2:	2200      	movs	r2, #0
 80022d4:	2100      	movs	r1, #0
 80022d6:	200d      	movs	r0, #13
 80022d8:	f003 fb38 	bl	800594c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80022dc:	200d      	movs	r0, #13
 80022de:	f003 fb4f 	bl	8005980 <HAL_NVIC_EnableIRQ>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000

080022f0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	@ 0x28
 80022f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	60da      	str	r2, [r3, #12]
 8002304:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002306:	4b6e      	ldr	r3, [pc, #440]	@ (80024c0 <MX_GPIO_Init+0x1d0>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230a:	4a6d      	ldr	r2, [pc, #436]	@ (80024c0 <MX_GPIO_Init+0x1d0>)
 800230c:	f043 0304 	orr.w	r3, r3, #4
 8002310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002312:	4b6b      	ldr	r3, [pc, #428]	@ (80024c0 <MX_GPIO_Init+0x1d0>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800231e:	4b68      	ldr	r3, [pc, #416]	@ (80024c0 <MX_GPIO_Init+0x1d0>)
 8002320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002322:	4a67      	ldr	r2, [pc, #412]	@ (80024c0 <MX_GPIO_Init+0x1d0>)
 8002324:	f043 0320 	orr.w	r3, r3, #32
 8002328:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800232a:	4b65      	ldr	r3, [pc, #404]	@ (80024c0 <MX_GPIO_Init+0x1d0>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232e:	f003 0320 	and.w	r3, r3, #32
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	4b62      	ldr	r3, [pc, #392]	@ (80024c0 <MX_GPIO_Init+0x1d0>)
 8002338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233a:	4a61      	ldr	r2, [pc, #388]	@ (80024c0 <MX_GPIO_Init+0x1d0>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002342:	4b5f      	ldr	r3, [pc, #380]	@ (80024c0 <MX_GPIO_Init+0x1d0>)
 8002344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800234e:	4b5c      	ldr	r3, [pc, #368]	@ (80024c0 <MX_GPIO_Init+0x1d0>)
 8002350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002352:	4a5b      	ldr	r2, [pc, #364]	@ (80024c0 <MX_GPIO_Init+0x1d0>)
 8002354:	f043 0302 	orr.w	r3, r3, #2
 8002358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800235a:	4b59      	ldr	r3, [pc, #356]	@ (80024c0 <MX_GPIO_Init+0x1d0>)
 800235c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002366:	4b56      	ldr	r3, [pc, #344]	@ (80024c0 <MX_GPIO_Init+0x1d0>)
 8002368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236a:	4a55      	ldr	r2, [pc, #340]	@ (80024c0 <MX_GPIO_Init+0x1d0>)
 800236c:	f043 0308 	orr.w	r3, r3, #8
 8002370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002372:	4b53      	ldr	r3, [pc, #332]	@ (80024c0 <MX_GPIO_Init+0x1d0>)
 8002374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STAT_BKUP_Pin | EN_5V_Pin | CAM1_CTRL_Pin, GPIO_PIN_RESET);
 800237e:	2200      	movs	r2, #0
 8002380:	f242 0124 	movw	r1, #8228	@ 0x2024
 8002384:	484f      	ldr	r0, [pc, #316]	@ (80024c4 <MX_GPIO_Init+0x1d4>)
 8002386:	f003 ffc9 	bl	800631c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRV_PWM_Pin | DRV_DIR_Pin | CAM0_CTRL_Pin | XBEE_RST_Pin, GPIO_PIN_RESET);
 800238a:	2200      	movs	r2, #0
 800238c:	f248 0138 	movw	r1, #32824	@ 0x8038
 8002390:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002394:	f003 ffc2 	bl	800631c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_nCS_Pin | MAGEXT_nCS_Pin | MAG_nCS_Pin | BMP_nCS_Pin | GPS_RST_Pin | USR_LED_Pin, GPIO_PIN_RESET);
 8002398:	2200      	movs	r2, #0
 800239a:	f641 41a4 	movw	r1, #7332	@ 0x1ca4
 800239e:	484a      	ldr	r0, [pc, #296]	@ (80024c8 <MX_GPIO_Init+0x1d8>)
 80023a0:	f003 ffbc 	bl	800631c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STAT_BKUP_Pin EN_5V_Pin CAM1_CTRL_Pin */
  GPIO_InitStruct.Pin = STAT_BKUP_Pin | EN_5V_Pin | CAM1_CTRL_Pin;
 80023a4:	f242 0324 	movw	r3, #8228	@ 0x2024
 80023a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023aa:	2301      	movs	r3, #1
 80023ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	4841      	ldr	r0, [pc, #260]	@ (80024c4 <MX_GPIO_Init+0x1d4>)
 80023be:	f003 fe13 	bl	8005fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_STAT2_Pin CHG_STAT1_Pin */
  GPIO_InitStruct.Pin = CHG_STAT2_Pin | CHG_STAT1_Pin;
 80023c2:	2303      	movs	r3, #3
 80023c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023ce:	f107 0314 	add.w	r3, r7, #20
 80023d2:	4619      	mov	r1, r3
 80023d4:	483d      	ldr	r0, [pc, #244]	@ (80024cc <MX_GPIO_Init+0x1dc>)
 80023d6:	f003 fe07 	bl	8005fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_32K_Pin */
  GPIO_InitStruct.Pin = CLK_32K_Pin;
 80023da:	2304      	movs	r3, #4
 80023dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023de:	2303      	movs	r3, #3
 80023e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CLK_32K_GPIO_Port, &GPIO_InitStruct);
 80023e6:	f107 0314 	add.w	r3, r7, #20
 80023ea:	4619      	mov	r1, r3
 80023ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023f0:	f003 fdfa 	bl	8005fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRV_DIR_Pin CAM0_CTRL_Pin XBEE_RST_Pin */
  GPIO_InitStruct.Pin = DRV_DIR_Pin | DRV_PWM_Pin | CAM0_CTRL_Pin | XBEE_RST_Pin;
 80023f4:	f248 0338 	movw	r3, #32824	@ 0x8038
 80023f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023fa:	2301      	movs	r3, #1
 80023fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002402:	2300      	movs	r3, #0
 8002404:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	4619      	mov	r1, r3
 800240c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002410:	f003 fdea 	bl	8005fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_nCS_Pin MAGEXT_nCS_Pin MAG_nCS_Pin BMP_nCS_Pin
                           USR_LED_Pin */
  GPIO_InitStruct.Pin = IMU_nCS_Pin | MAGEXT_nCS_Pin | MAG_nCS_Pin | BMP_nCS_Pin | USR_LED_Pin;
 8002414:	f641 4384 	movw	r3, #7300	@ 0x1c84
 8002418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241a:	2301      	movs	r3, #1
 800241c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2300      	movs	r3, #0
 8002424:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	4619      	mov	r1, r3
 800242c:	4826      	ldr	r0, [pc, #152]	@ (80024c8 <MX_GPIO_Init+0x1d8>)
 800242e:	f003 fddb 	bl	8005fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002432:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002438:	2302      	movs	r3, #2
 800243a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002440:	2300      	movs	r3, #0
 8002442:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002444:	2300      	movs	r3, #0
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	4619      	mov	r1, r3
 800244e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002452:	f003 fdc9 	bl	8005fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
 8002456:	2350      	movs	r3, #80	@ 0x50
 8002458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800245a:	2303      	movs	r3, #3
 800245c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002462:	f107 0314 	add.w	r3, r7, #20
 8002466:	4619      	mov	r1, r3
 8002468:	4817      	ldr	r0, [pc, #92]	@ (80024c8 <MX_GPIO_Init+0x1d8>)
 800246a:	f003 fdbd 	bl	8005fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 800246e:	2320      	movs	r3, #32
 8002470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002472:	2311      	movs	r3, #17
 8002474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 800247e:	f107 0314 	add.w	r3, r7, #20
 8002482:	4619      	mov	r1, r3
 8002484:	4810      	ldr	r0, [pc, #64]	@ (80024c8 <MX_GPIO_Init+0x1d8>)
 8002486:	f003 fdaf 	bl	8005fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 800248a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800248e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_IR;
 800249c:	2306      	movs	r3, #6
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	4619      	mov	r1, r3
 80024a6:	4808      	ldr	r0, [pc, #32]	@ (80024c8 <MX_GPIO_Init+0x1d8>)
 80024a8:	f003 fd9e 	bl	8005fe8 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 80024ac:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <MX_GPIO_Init+0x1e0>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	4a07      	ldr	r2, [pc, #28]	@ (80024d0 <MX_GPIO_Init+0x1e0>)
 80024b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80024b6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80024b8:	bf00      	nop
 80024ba:	3728      	adds	r7, #40	@ 0x28
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40021000 	.word	0x40021000
 80024c4:	48000800 	.word	0x48000800
 80024c8:	48000400 	.word	0x48000400
 80024cc:	48001400 	.word	0x48001400
 80024d0:	40010000 	.word	0x40010000

080024d4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a04      	ldr	r2, [pc, #16]	@ (80024f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d101      	bne.n	80024ea <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80024e6:	f002 f825 	bl	8004534 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40001000 	.word	0x40001000

080024f8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024fc:	b672      	cpsid	i
}
 80024fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <Error_Handler+0x8>

08002504 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 800250a:	f107 0308 	add.w	r3, r7, #8
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002514:	4b16      	ldr	r3, [pc, #88]	@ (8002570 <HAL_MspInit+0x6c>)
 8002516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002518:	4a15      	ldr	r2, [pc, #84]	@ (8002570 <HAL_MspInit+0x6c>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002520:	4b13      	ldr	r3, [pc, #76]	@ (8002570 <HAL_MspInit+0x6c>)
 8002522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800252c:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <HAL_MspInit+0x6c>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002530:	4a0f      	ldr	r2, [pc, #60]	@ (8002570 <HAL_MspInit+0x6c>)
 8002532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002536:	6593      	str	r3, [r2, #88]	@ 0x58
 8002538:	4b0d      	ldr	r3, [pc, #52]	@ (8002570 <HAL_MspInit+0x6c>)
 800253a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8002544:	2300      	movs	r3, #0
 8002546:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 800254c:	f107 0308 	add.w	r3, r7, #8
 8002550:	4618      	mov	r0, r3
 8002552:	f006 f973 	bl	800883c <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8002556:	f006 f9d1 	bl	80088fc <HAL_PWR_EnablePVD>

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800255a:	f002 f83f 	bl	80045dc <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800255e:	2002      	movs	r0, #2
 8002560:	f002 f828 	bl	80045b4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002564:	f006 fa7e 	bl	8008a64 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002568:	bf00      	nop
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000

08002574 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b09e      	sub	sp, #120	@ 0x78
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	2250      	movs	r2, #80	@ 0x50
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f011 f9c4 	bl	8013922 <memset>
  if(hadc->Instance==ADC1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025a2:	d133      	bne.n	800260c <HAL_ADC_MspInit+0x98>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80025a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025a8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80025aa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80025ae:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	4618      	mov	r0, r3
 80025b6:	f007 f80b 	bl	80095d0 <HAL_RCCEx_PeriphCLKConfig>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80025c0:	f7ff ff9a 	bl	80024f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80025c4:	4b13      	ldr	r3, [pc, #76]	@ (8002614 <HAL_ADC_MspInit+0xa0>)
 80025c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c8:	4a12      	ldr	r2, [pc, #72]	@ (8002614 <HAL_ADC_MspInit+0xa0>)
 80025ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025d0:	4b10      	ldr	r3, [pc, #64]	@ (8002614 <HAL_ADC_MspInit+0xa0>)
 80025d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002614 <HAL_ADC_MspInit+0xa0>)
 80025de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002614 <HAL_ADC_MspInit+0xa0>)
 80025e2:	f043 0304 	orr.w	r3, r3, #4
 80025e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002614 <HAL_ADC_MspInit+0xa0>)
 80025ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VUSB_Pin;
 80025f4:	2308      	movs	r3, #8
 80025f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025f8:	2303      	movs	r3, #3
 80025fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(VUSB_GPIO_Port, &GPIO_InitStruct);
 8002600:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002604:	4619      	mov	r1, r3
 8002606:	4804      	ldr	r0, [pc, #16]	@ (8002618 <HAL_ADC_MspInit+0xa4>)
 8002608:	f003 fcee 	bl	8005fe8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800260c:	bf00      	nop
 800260e:	3778      	adds	r7, #120	@ 0x78
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000
 8002618:	48000800 	.word	0x48000800

0800261c <HAL_CORDIC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcordic: CORDIC handle pointer
  * @retval None
  */
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0a      	ldr	r2, [pc, #40]	@ (8002654 <HAL_CORDIC_MspInit+0x38>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d10b      	bne.n	8002646 <HAL_CORDIC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CORDIC_MspInit 0 */

    /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800262e:	4b0a      	ldr	r3, [pc, #40]	@ (8002658 <HAL_CORDIC_MspInit+0x3c>)
 8002630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002632:	4a09      	ldr	r2, [pc, #36]	@ (8002658 <HAL_CORDIC_MspInit+0x3c>)
 8002634:	f043 0308 	orr.w	r3, r3, #8
 8002638:	6493      	str	r3, [r2, #72]	@ 0x48
 800263a:	4b07      	ldr	r3, [pc, #28]	@ (8002658 <HAL_CORDIC_MspInit+0x3c>)
 800263c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40020c00 	.word	0x40020c00
 8002658:	40021000 	.word	0x40021000

0800265c <HAL_FMAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfmac: FMAC handle pointer
  * @retval None
  */
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0a      	ldr	r2, [pc, #40]	@ (8002694 <HAL_FMAC_MspInit+0x38>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d10b      	bne.n	8002686 <HAL_FMAC_MspInit+0x2a>
  {
    /* USER CODE BEGIN FMAC_MspInit 0 */

    /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 800266e:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <HAL_FMAC_MspInit+0x3c>)
 8002670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002672:	4a09      	ldr	r2, [pc, #36]	@ (8002698 <HAL_FMAC_MspInit+0x3c>)
 8002674:	f043 0310 	orr.w	r3, r3, #16
 8002678:	6493      	str	r3, [r2, #72]	@ 0x48
 800267a:	4b07      	ldr	r3, [pc, #28]	@ (8002698 <HAL_FMAC_MspInit+0x3c>)
 800267c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END FMAC_MspInit 1 */

  }

}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40021400 	.word	0x40021400
 8002698:	40021000 	.word	0x40021000

0800269c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b09e      	sub	sp, #120	@ 0x78
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	2250      	movs	r2, #80	@ 0x50
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f011 f930 	bl	8013922 <memset>
  if(hi2c->Instance==I2C3)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002744 <HAL_I2C_MspInit+0xa8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d137      	bne.n	800273c <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80026cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80026d2:	2300      	movs	r3, #0
 80026d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	4618      	mov	r0, r3
 80026dc:	f006 ff78 	bl	80095d0 <HAL_RCCEx_PeriphCLKConfig>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80026e6:	f7ff ff07 	bl	80024f8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ea:	4b17      	ldr	r3, [pc, #92]	@ (8002748 <HAL_I2C_MspInit+0xac>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ee:	4a16      	ldr	r2, [pc, #88]	@ (8002748 <HAL_I2C_MspInit+0xac>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026f6:	4b14      	ldr	r3, [pc, #80]	@ (8002748 <HAL_I2C_MspInit+0xac>)
 80026f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002702:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002706:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002708:	2312      	movs	r3, #18
 800270a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002710:	2300      	movs	r3, #0
 8002712:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002714:	2308      	movs	r3, #8
 8002716:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002718:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800271c:	4619      	mov	r1, r3
 800271e:	480b      	ldr	r0, [pc, #44]	@ (800274c <HAL_I2C_MspInit+0xb0>)
 8002720:	f003 fc62 	bl	8005fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002724:	4b08      	ldr	r3, [pc, #32]	@ (8002748 <HAL_I2C_MspInit+0xac>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002728:	4a07      	ldr	r2, [pc, #28]	@ (8002748 <HAL_I2C_MspInit+0xac>)
 800272a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800272e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002730:	4b05      	ldr	r3, [pc, #20]	@ (8002748 <HAL_I2C_MspInit+0xac>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002734:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 800273c:	bf00      	nop
 800273e:	3778      	adds	r7, #120	@ 0x78
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40007800 	.word	0x40007800
 8002748:	40021000 	.word	0x40021000
 800274c:	48000800 	.word	0x48000800

08002750 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b098      	sub	sp, #96	@ 0x60
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002758:	f107 0310 	add.w	r3, r7, #16
 800275c:	2250      	movs	r2, #80	@ 0x50
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f011 f8de 	bl	8013922 <memset>
  if(hrng->Instance==RNG)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a11      	ldr	r2, [pc, #68]	@ (80027b0 <HAL_RNG_MspInit+0x60>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d11a      	bne.n	80027a6 <HAL_RNG_MspInit+0x56>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002770:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002774:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002776:	2300      	movs	r3, #0
 8002778:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800277a:	f107 0310 	add.w	r3, r7, #16
 800277e:	4618      	mov	r0, r3
 8002780:	f006 ff26 	bl	80095d0 <HAL_RCCEx_PeriphCLKConfig>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_RNG_MspInit+0x3e>
    {
      Error_Handler();
 800278a:	f7ff feb5 	bl	80024f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800278e:	4b09      	ldr	r3, [pc, #36]	@ (80027b4 <HAL_RNG_MspInit+0x64>)
 8002790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002792:	4a08      	ldr	r2, [pc, #32]	@ (80027b4 <HAL_RNG_MspInit+0x64>)
 8002794:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800279a:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <HAL_RNG_MspInit+0x64>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 80027a6:	bf00      	nop
 80027a8:	3760      	adds	r7, #96	@ 0x60
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	50060800 	.word	0x50060800
 80027b4:	40021000 	.word	0x40021000

080027b8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b09e      	sub	sp, #120	@ 0x78
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	2250      	movs	r2, #80	@ 0x50
 80027d6:	2100      	movs	r1, #0
 80027d8:	4618      	mov	r0, r3
 80027da:	f011 f8a2 	bl	8013922 <memset>
  if(hrtc->Instance==RTC)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a24      	ldr	r2, [pc, #144]	@ (8002874 <HAL_RTC_MspInit+0xbc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d140      	bne.n	800286a <HAL_RTC_MspInit+0xb2>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80027ec:	617b      	str	r3, [r7, #20]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80027ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027f2:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	4618      	mov	r0, r3
 80027fa:	f006 fee9 	bl	80095d0 <HAL_RCCEx_PeriphCLKConfig>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8002804:	f7ff fe78 	bl	80024f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002808:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <HAL_RTC_MspInit+0xc0>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800280e:	4a1a      	ldr	r2, [pc, #104]	@ (8002878 <HAL_RTC_MspInit+0xc0>)
 8002810:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002818:	4b17      	ldr	r3, [pc, #92]	@ (8002878 <HAL_RTC_MspInit+0xc0>)
 800281a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281c:	4a16      	ldr	r2, [pc, #88]	@ (8002878 <HAL_RTC_MspInit+0xc0>)
 800281e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002822:	6593      	str	r3, [r2, #88]	@ 0x58
 8002824:	4b14      	ldr	r3, [pc, #80]	@ (8002878 <HAL_RTC_MspInit+0xc0>)
 8002826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002830:	4b11      	ldr	r3, [pc, #68]	@ (8002878 <HAL_RTC_MspInit+0xc0>)
 8002832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002834:	4a10      	ldr	r2, [pc, #64]	@ (8002878 <HAL_RTC_MspInit+0xc0>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800283c:	4b0e      	ldr	r3, [pc, #56]	@ (8002878 <HAL_RTC_MspInit+0xc0>)
 800283e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PA1     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 8002848:	2302      	movs	r3, #2
 800284a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002854:	2300      	movs	r3, #0
 8002856:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 8002858:	2300      	movs	r3, #0
 800285a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 800285c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002860:	4619      	mov	r1, r3
 8002862:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002866:	f003 fbbf 	bl	8005fe8 <HAL_GPIO_Init>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800286a:	bf00      	nop
 800286c:	3778      	adds	r7, #120	@ 0x78
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40002800 	.word	0x40002800
 8002878:	40021000 	.word	0x40021000

0800287c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	@ 0x28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a17      	ldr	r2, [pc, #92]	@ (80028f8 <HAL_SPI_MspInit+0x7c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d128      	bne.n	80028f0 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800289e:	4b17      	ldr	r3, [pc, #92]	@ (80028fc <HAL_SPI_MspInit+0x80>)
 80028a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a2:	4a16      	ldr	r2, [pc, #88]	@ (80028fc <HAL_SPI_MspInit+0x80>)
 80028a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80028aa:	4b14      	ldr	r3, [pc, #80]	@ (80028fc <HAL_SPI_MspInit+0x80>)
 80028ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b6:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <HAL_SPI_MspInit+0x80>)
 80028b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ba:	4a10      	ldr	r2, [pc, #64]	@ (80028fc <HAL_SPI_MspInit+0x80>)
 80028bc:	f043 0302 	orr.w	r3, r3, #2
 80028c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028c2:	4b0e      	ldr	r3, [pc, #56]	@ (80028fc <HAL_SPI_MspInit+0x80>)
 80028c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80028ce:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80028d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d4:	2302      	movs	r3, #2
 80028d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028dc:	2300      	movs	r3, #0
 80028de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028e0:	2305      	movs	r3, #5
 80028e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	4619      	mov	r1, r3
 80028ea:	4805      	ldr	r0, [pc, #20]	@ (8002900 <HAL_SPI_MspInit+0x84>)
 80028ec:	f003 fb7c 	bl	8005fe8 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80028f0:	bf00      	nop
 80028f2:	3728      	adds	r7, #40	@ 0x28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40003800 	.word	0x40003800
 80028fc:	40021000 	.word	0x40021000
 8002900:	48000400 	.word	0x48000400

08002904 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08c      	sub	sp, #48	@ 0x30
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	f107 031c 	add.w	r3, r7, #28
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a3c      	ldr	r2, [pc, #240]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x110>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d128      	bne.n	8002978 <HAL_TIM_Encoder_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002926:	4b3c      	ldr	r3, [pc, #240]	@ (8002a18 <HAL_TIM_Encoder_MspInit+0x114>)
 8002928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292a:	4a3b      	ldr	r2, [pc, #236]	@ (8002a18 <HAL_TIM_Encoder_MspInit+0x114>)
 800292c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002930:	6613      	str	r3, [r2, #96]	@ 0x60
 8002932:	4b39      	ldr	r3, [pc, #228]	@ (8002a18 <HAL_TIM_Encoder_MspInit+0x114>)
 8002934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002936:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800293a:	61bb      	str	r3, [r7, #24]
 800293c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800293e:	4b36      	ldr	r3, [pc, #216]	@ (8002a18 <HAL_TIM_Encoder_MspInit+0x114>)
 8002940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002942:	4a35      	ldr	r2, [pc, #212]	@ (8002a18 <HAL_TIM_Encoder_MspInit+0x114>)
 8002944:	f043 0304 	orr.w	r3, r3, #4
 8002948:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800294a:	4b33      	ldr	r3, [pc, #204]	@ (8002a18 <HAL_TIM_Encoder_MspInit+0x114>)
 800294c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC4     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = ENC0_A_Pin|ENC0_B_Pin|ENC0_Z_Pin;
 8002956:	2313      	movs	r3, #19
 8002958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295a:	2302      	movs	r3, #2
 800295c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002962:	2300      	movs	r3, #0
 8002964:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002966:	2302      	movs	r3, #2
 8002968:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800296a:	f107 031c 	add.w	r3, r7, #28
 800296e:	4619      	mov	r1, r3
 8002970:	482a      	ldr	r0, [pc, #168]	@ (8002a1c <HAL_TIM_Encoder_MspInit+0x118>)
 8002972:	f003 fb39 	bl	8005fe8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002976:	e049      	b.n	8002a0c <HAL_TIM_Encoder_MspInit+0x108>
  else if(htim_encoder->Instance==TIM8)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a28      	ldr	r2, [pc, #160]	@ (8002a20 <HAL_TIM_Encoder_MspInit+0x11c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d144      	bne.n	8002a0c <HAL_TIM_Encoder_MspInit+0x108>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002982:	4b25      	ldr	r3, [pc, #148]	@ (8002a18 <HAL_TIM_Encoder_MspInit+0x114>)
 8002984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002986:	4a24      	ldr	r2, [pc, #144]	@ (8002a18 <HAL_TIM_Encoder_MspInit+0x114>)
 8002988:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800298c:	6613      	str	r3, [r2, #96]	@ 0x60
 800298e:	4b22      	ldr	r3, [pc, #136]	@ (8002a18 <HAL_TIM_Encoder_MspInit+0x114>)
 8002990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002992:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299a:	4b1f      	ldr	r3, [pc, #124]	@ (8002a18 <HAL_TIM_Encoder_MspInit+0x114>)
 800299c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800299e:	4a1e      	ldr	r2, [pc, #120]	@ (8002a18 <HAL_TIM_Encoder_MspInit+0x114>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a18 <HAL_TIM_Encoder_MspInit+0x114>)
 80029a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b2:	4b19      	ldr	r3, [pc, #100]	@ (8002a18 <HAL_TIM_Encoder_MspInit+0x114>)
 80029b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b6:	4a18      	ldr	r2, [pc, #96]	@ (8002a18 <HAL_TIM_Encoder_MspInit+0x114>)
 80029b8:	f043 0304 	orr.w	r3, r3, #4
 80029bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029be:	4b16      	ldr	r3, [pc, #88]	@ (8002a18 <HAL_TIM_Encoder_MspInit+0x114>)
 80029c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC1_Z_Pin;
 80029ca:	2301      	movs	r3, #1
 80029cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	2302      	movs	r3, #2
 80029d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d6:	2300      	movs	r3, #0
 80029d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80029da:	230a      	movs	r3, #10
 80029dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ENC1_Z_GPIO_Port, &GPIO_InitStruct);
 80029de:	f107 031c 	add.w	r3, r7, #28
 80029e2:	4619      	mov	r1, r3
 80029e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029e8:	f003 fafe 	bl	8005fe8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 80029ec:	23c0      	movs	r3, #192	@ 0xc0
 80029ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2302      	movs	r3, #2
 80029f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f8:	2300      	movs	r3, #0
 80029fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80029fc:	2304      	movs	r3, #4
 80029fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a00:	f107 031c 	add.w	r3, r7, #28
 8002a04:	4619      	mov	r1, r3
 8002a06:	4805      	ldr	r0, [pc, #20]	@ (8002a1c <HAL_TIM_Encoder_MspInit+0x118>)
 8002a08:	f003 faee 	bl	8005fe8 <HAL_GPIO_Init>
}
 8002a0c:	bf00      	nop
 8002a0e:	3730      	adds	r7, #48	@ 0x30
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40012c00 	.word	0x40012c00
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	48000800 	.word	0x48000800
 8002a20:	40013400 	.word	0x40013400

08002a24 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1c      	ldr	r2, [pc, #112]	@ (8002aa4 <HAL_TIM_Base_MspInit+0x80>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d10c      	bne.n	8002a50 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a36:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa8 <HAL_TIM_Base_MspInit+0x84>)
 8002a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8002aa8 <HAL_TIM_Base_MspInit+0x84>)
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a42:	4b19      	ldr	r3, [pc, #100]	@ (8002aa8 <HAL_TIM_Base_MspInit+0x84>)
 8002a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002a4e:	e022      	b.n	8002a96 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a15      	ldr	r2, [pc, #84]	@ (8002aac <HAL_TIM_Base_MspInit+0x88>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d10c      	bne.n	8002a74 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002a5a:	4b13      	ldr	r3, [pc, #76]	@ (8002aa8 <HAL_TIM_Base_MspInit+0x84>)
 8002a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a5e:	4a12      	ldr	r2, [pc, #72]	@ (8002aa8 <HAL_TIM_Base_MspInit+0x84>)
 8002a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a64:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a66:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <HAL_TIM_Base_MspInit+0x84>)
 8002a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	693b      	ldr	r3, [r7, #16]
}
 8002a72:	e010      	b.n	8002a96 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM17)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab0 <HAL_TIM_Base_MspInit+0x8c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d10b      	bne.n	8002a96 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa8 <HAL_TIM_Base_MspInit+0x84>)
 8002a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a82:	4a09      	ldr	r2, [pc, #36]	@ (8002aa8 <HAL_TIM_Base_MspInit+0x84>)
 8002a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a88:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a8a:	4b07      	ldr	r3, [pc, #28]	@ (8002aa8 <HAL_TIM_Base_MspInit+0x84>)
 8002a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
}
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40014400 	.word	0x40014400
 8002ab0:	40014800 	.word	0x40014800

08002ab4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8002aec <HAL_TIM_PWM_MspInit+0x38>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d10b      	bne.n	8002ade <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM15_MspInit 0 */

    /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8002af0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aca:	4a09      	ldr	r2, [pc, #36]	@ (8002af0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ad2:	4b07      	ldr	r3, [pc, #28]	@ (8002af0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM15_MspInit 1 */

  }

}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40014000 	.word	0x40014000
 8002af0:	40021000 	.word	0x40021000

08002af4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	@ 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a31      	ldr	r2, [pc, #196]	@ (8002bd8 <HAL_TIM_MspPostInit+0xe4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d139      	bne.n	8002b8a <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b16:	4b31      	ldr	r3, [pc, #196]	@ (8002bdc <HAL_TIM_MspPostInit+0xe8>)
 8002b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1a:	4a30      	ldr	r2, [pc, #192]	@ (8002bdc <HAL_TIM_MspPostInit+0xe8>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b22:	4b2e      	ldr	r3, [pc, #184]	@ (8002bdc <HAL_TIM_MspPostInit+0xe8>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002bdc <HAL_TIM_MspPostInit+0xe8>)
 8002b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b32:	4a2a      	ldr	r2, [pc, #168]	@ (8002bdc <HAL_TIM_MspPostInit+0xe8>)
 8002b34:	f043 0302 	orr.w	r3, r3, #2
 8002b38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b3a:	4b28      	ldr	r3, [pc, #160]	@ (8002bdc <HAL_TIM_MspPostInit+0xe8>)
 8002b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = SERVO_PWM0_Pin|SERVO_PWM1_Pin;
 8002b46:	23c0      	movs	r3, #192	@ 0xc0
 8002b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b52:	2300      	movs	r3, #0
 8002b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b56:	2302      	movs	r3, #2
 8002b58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5a:	f107 0314 	add.w	r3, r7, #20
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b64:	f003 fa40 	bl	8005fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SERVO_PWM2_Pin|SERVO_PWM3_Pin;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b74:	2300      	movs	r3, #0
 8002b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7c:	f107 0314 	add.w	r3, r7, #20
 8002b80:	4619      	mov	r1, r3
 8002b82:	4817      	ldr	r0, [pc, #92]	@ (8002be0 <HAL_TIM_MspPostInit+0xec>)
 8002b84:	f003 fa30 	bl	8005fe8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002b88:	e021      	b.n	8002bce <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM15)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a15      	ldr	r2, [pc, #84]	@ (8002be4 <HAL_TIM_MspPostInit+0xf0>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d11c      	bne.n	8002bce <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b94:	4b11      	ldr	r3, [pc, #68]	@ (8002bdc <HAL_TIM_MspPostInit+0xe8>)
 8002b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b98:	4a10      	ldr	r2, [pc, #64]	@ (8002bdc <HAL_TIM_MspPostInit+0xe8>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8002bdc <HAL_TIM_MspPostInit+0xe8>)
 8002ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DRV_PWM_Pin;
 8002bac:	2308      	movs	r3, #8
 8002bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002bbc:	2309      	movs	r3, #9
 8002bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DRV_PWM_GPIO_Port, &GPIO_InitStruct);
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bca:	f003 fa0d 	bl	8005fe8 <HAL_GPIO_Init>
}
 8002bce:	bf00      	nop
 8002bd0:	3728      	adds	r7, #40	@ 0x28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40000400 	.word	0x40000400
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	48000400 	.word	0x48000400
 8002be4:	40014000 	.word	0x40014000

08002be8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b0a0      	sub	sp, #128	@ 0x80
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c00:	f107 031c 	add.w	r3, r7, #28
 8002c04:	2250      	movs	r2, #80	@ 0x50
 8002c06:	2100      	movs	r1, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f010 fe8a 	bl	8013922 <memset>
  if(huart->Instance==UART5)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a64      	ldr	r2, [pc, #400]	@ (8002da4 <HAL_UART_MspInit+0x1bc>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d153      	bne.n	8002cc0 <HAL_UART_MspInit+0xd8>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002c18:	2310      	movs	r3, #16
 8002c1a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c20:	f107 031c 	add.w	r3, r7, #28
 8002c24:	4618      	mov	r0, r3
 8002c26:	f006 fcd3 	bl	80095d0 <HAL_RCCEx_PeriphCLKConfig>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c30:	f7ff fc62 	bl	80024f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002c34:	4b5c      	ldr	r3, [pc, #368]	@ (8002da8 <HAL_UART_MspInit+0x1c0>)
 8002c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c38:	4a5b      	ldr	r2, [pc, #364]	@ (8002da8 <HAL_UART_MspInit+0x1c0>)
 8002c3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c40:	4b59      	ldr	r3, [pc, #356]	@ (8002da8 <HAL_UART_MspInit+0x1c0>)
 8002c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c4c:	4b56      	ldr	r3, [pc, #344]	@ (8002da8 <HAL_UART_MspInit+0x1c0>)
 8002c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c50:	4a55      	ldr	r2, [pc, #340]	@ (8002da8 <HAL_UART_MspInit+0x1c0>)
 8002c52:	f043 0304 	orr.w	r3, r3, #4
 8002c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c58:	4b53      	ldr	r3, [pc, #332]	@ (8002da8 <HAL_UART_MspInit+0x1c0>)
 8002c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c64:	4b50      	ldr	r3, [pc, #320]	@ (8002da8 <HAL_UART_MspInit+0x1c0>)
 8002c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c68:	4a4f      	ldr	r2, [pc, #316]	@ (8002da8 <HAL_UART_MspInit+0x1c0>)
 8002c6a:	f043 0308 	orr.w	r3, r3, #8
 8002c6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c70:	4b4d      	ldr	r3, [pc, #308]	@ (8002da8 <HAL_UART_MspInit+0x1c0>)
 8002c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 8002c7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c80:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c82:	2302      	movs	r3, #2
 8002c84:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002c8e:	2305      	movs	r3, #5
 8002c90:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 8002c92:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002c96:	4619      	mov	r1, r3
 8002c98:	4844      	ldr	r0, [pc, #272]	@ (8002dac <HAL_UART_MspInit+0x1c4>)
 8002c9a:	f003 f9a5 	bl	8005fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_TX_Pin;
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002caa:	2300      	movs	r3, #0
 8002cac:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002cae:	2305      	movs	r3, #5
 8002cb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 8002cb2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	483d      	ldr	r0, [pc, #244]	@ (8002db0 <HAL_UART_MspInit+0x1c8>)
 8002cba:	f003 f995 	bl	8005fe8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002cbe:	e06c      	b.n	8002d9a <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a3b      	ldr	r2, [pc, #236]	@ (8002db4 <HAL_UART_MspInit+0x1cc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d167      	bne.n	8002d9a <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002cca:	2304      	movs	r3, #4
 8002ccc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cd2:	f107 031c 	add.w	r3, r7, #28
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f006 fc7a 	bl	80095d0 <HAL_RCCEx_PeriphCLKConfig>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8002ce2:	f7ff fc09 	bl	80024f8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ce6:	4b30      	ldr	r3, [pc, #192]	@ (8002da8 <HAL_UART_MspInit+0x1c0>)
 8002ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cea:	4a2f      	ldr	r2, [pc, #188]	@ (8002da8 <HAL_UART_MspInit+0x1c0>)
 8002cec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8002da8 <HAL_UART_MspInit+0x1c0>)
 8002cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8002da8 <HAL_UART_MspInit+0x1c0>)
 8002d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d02:	4a29      	ldr	r2, [pc, #164]	@ (8002da8 <HAL_UART_MspInit+0x1c0>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d0a:	4b27      	ldr	r3, [pc, #156]	@ (8002da8 <HAL_UART_MspInit+0x1c0>)
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d16:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002d1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d24:	2300      	movs	r3, #0
 8002d26:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d28:	2307      	movs	r3, #7
 8002d2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d2c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002d30:	4619      	mov	r1, r3
 8002d32:	481e      	ldr	r0, [pc, #120]	@ (8002dac <HAL_UART_MspInit+0x1c4>)
 8002d34:	f003 f958 	bl	8005fe8 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel3;
 8002d38:	4b1f      	ldr	r3, [pc, #124]	@ (8002db8 <HAL_UART_MspInit+0x1d0>)
 8002d3a:	4a20      	ldr	r2, [pc, #128]	@ (8002dbc <HAL_UART_MspInit+0x1d4>)
 8002d3c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002db8 <HAL_UART_MspInit+0x1d0>)
 8002d40:	221d      	movs	r2, #29
 8002d42:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d44:	4b1c      	ldr	r3, [pc, #112]	@ (8002db8 <HAL_UART_MspInit+0x1d0>)
 8002d46:	2210      	movs	r2, #16
 8002d48:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002db8 <HAL_UART_MspInit+0x1d0>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d50:	4b19      	ldr	r3, [pc, #100]	@ (8002db8 <HAL_UART_MspInit+0x1d0>)
 8002d52:	2280      	movs	r2, #128	@ 0x80
 8002d54:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d56:	4b18      	ldr	r3, [pc, #96]	@ (8002db8 <HAL_UART_MspInit+0x1d0>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d5c:	4b16      	ldr	r3, [pc, #88]	@ (8002db8 <HAL_UART_MspInit+0x1d0>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002d62:	4b15      	ldr	r3, [pc, #84]	@ (8002db8 <HAL_UART_MspInit+0x1d0>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d68:	4b13      	ldr	r3, [pc, #76]	@ (8002db8 <HAL_UART_MspInit+0x1d0>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002d6e:	4812      	ldr	r0, [pc, #72]	@ (8002db8 <HAL_UART_MspInit+0x1d0>)
 8002d70:	f002 fe14 	bl	800599c <HAL_DMA_Init>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_UART_MspInit+0x196>
      Error_Handler();
 8002d7a:	f7ff fbbd 	bl	80024f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a0d      	ldr	r2, [pc, #52]	@ (8002db8 <HAL_UART_MspInit+0x1d0>)
 8002d82:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002d84:	4a0c      	ldr	r2, [pc, #48]	@ (8002db8 <HAL_UART_MspInit+0x1d0>)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 14, 0);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	210e      	movs	r1, #14
 8002d8e:	2027      	movs	r0, #39	@ 0x27
 8002d90:	f002 fddc 	bl	800594c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d94:	2027      	movs	r0, #39	@ 0x27
 8002d96:	f002 fdf3 	bl	8005980 <HAL_NVIC_EnableIRQ>
}
 8002d9a:	bf00      	nop
 8002d9c:	3780      	adds	r7, #128	@ 0x80
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40005000 	.word	0x40005000
 8002da8:	40021000 	.word	0x40021000
 8002dac:	48000800 	.word	0x48000800
 8002db0:	48000c00 	.word	0x48000c00
 8002db4:	40004800 	.word	0x40004800
 8002db8:	200007b8 	.word	0x200007b8
 8002dbc:	40020030 	.word	0x40020030

08002dc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08c      	sub	sp, #48	@ 0x30
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002dd0:	4b2c      	ldr	r3, [pc, #176]	@ (8002e84 <HAL_InitTick+0xc4>)
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8002e84 <HAL_InitTick+0xc4>)
 8002dd6:	f043 0310 	orr.w	r3, r3, #16
 8002dda:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ddc:	4b29      	ldr	r3, [pc, #164]	@ (8002e84 <HAL_InitTick+0xc4>)
 8002dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002de8:	f107 020c 	add.w	r2, r7, #12
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f006 fb74 	bl	80094e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002df8:	f006 fb46 	bl	8009488 <HAL_RCC_GetPCLK1Freq>
 8002dfc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e00:	4a21      	ldr	r2, [pc, #132]	@ (8002e88 <HAL_InitTick+0xc8>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	0c9b      	lsrs	r3, r3, #18
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002e8c <HAL_InitTick+0xcc>)
 8002e0e:	4a20      	ldr	r2, [pc, #128]	@ (8002e90 <HAL_InitTick+0xd0>)
 8002e10:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e12:	4b1e      	ldr	r3, [pc, #120]	@ (8002e8c <HAL_InitTick+0xcc>)
 8002e14:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002e18:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8002e8c <HAL_InitTick+0xcc>)
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e20:	4b1a      	ldr	r3, [pc, #104]	@ (8002e8c <HAL_InitTick+0xcc>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e26:	4b19      	ldr	r3, [pc, #100]	@ (8002e8c <HAL_InitTick+0xcc>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002e2c:	4817      	ldr	r0, [pc, #92]	@ (8002e8c <HAL_InitTick+0xcc>)
 8002e2e:	f007 ff81 	bl	800ad34 <HAL_TIM_Base_Init>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002e38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d11b      	bne.n	8002e78 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002e40:	4812      	ldr	r0, [pc, #72]	@ (8002e8c <HAL_InitTick+0xcc>)
 8002e42:	f007 ffcf 	bl	800ade4 <HAL_TIM_Base_Start_IT>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002e4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d111      	bne.n	8002e78 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e54:	2036      	movs	r0, #54	@ 0x36
 8002e56:	f002 fd93 	bl	8005980 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b0f      	cmp	r3, #15
 8002e5e:	d808      	bhi.n	8002e72 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002e60:	2200      	movs	r2, #0
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	2036      	movs	r0, #54	@ 0x36
 8002e66:	f002 fd71 	bl	800594c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e94 <HAL_InitTick+0xd4>)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	e002      	b.n	8002e78 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002e78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3730      	adds	r7, #48	@ 0x30
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40021000 	.word	0x40021000
 8002e88:	431bde83 	.word	0x431bde83
 8002e8c:	20000818 	.word	0x20000818
 8002e90:	40001000 	.word	0x40001000
 8002e94:	20000008 	.word	0x20000008

08002e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e9c:	bf00      	nop
 8002e9e:	e7fd      	b.n	8002e9c <NMI_Handler+0x4>

08002ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ea4:	bf00      	nop
 8002ea6:	e7fd      	b.n	8002ea4 <HardFault_Handler+0x4>

08002ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eac:	bf00      	nop
 8002eae:	e7fd      	b.n	8002eac <MemManage_Handler+0x4>

08002eb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eb4:	bf00      	nop
 8002eb6:	e7fd      	b.n	8002eb4 <BusFault_Handler+0x4>

08002eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <UsageFault_Handler+0x4>

08002ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002efc:	4802      	ldr	r0, [pc, #8]	@ (8002f08 <DMA1_Channel3_IRQHandler+0x10>)
 8002efe:	f002 feb5 	bl	8005c6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	200007b8 	.word	0x200007b8

08002f0c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002f10:	4802      	ldr	r0, [pc, #8]	@ (8002f1c <USB_LP_IRQHandler+0x10>)
 8002f12:	f003 ffe8 	bl	8006ee6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000e90 	.word	0x20000e90

08002f20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002f24:	4802      	ldr	r0, [pc, #8]	@ (8002f30 <USART3_IRQHandler+0x10>)
 8002f26:	f009 fd13 	bl	800c950 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000724 	.word	0x20000724

08002f34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f38:	4802      	ldr	r0, [pc, #8]	@ (8002f44 <TIM6_DAC_IRQHandler+0x10>)
 8002f3a:	f008 f94e 	bl	800b1da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000818 	.word	0x20000818

08002f48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return 1;
 8002f4c:	2301      	movs	r3, #1
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <_kill>:

int _kill(int pid, int sig)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f62:	f010 fcfb 	bl	801395c <__errno>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2216      	movs	r2, #22
 8002f6a:	601a      	str	r2, [r3, #0]
  return -1;
 8002f6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <_exit>:

void _exit (int status)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff ffe7 	bl	8002f58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f8a:	bf00      	nop
 8002f8c:	e7fd      	b.n	8002f8a <_exit+0x12>

08002f8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b086      	sub	sp, #24
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e00a      	b.n	8002fb6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fa0:	f3af 8000 	nop.w
 8002fa4:	4601      	mov	r1, r0
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	60ba      	str	r2, [r7, #8]
 8002fac:	b2ca      	uxtb	r2, r1
 8002fae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	dbf0      	blt.n	8002fa0 <_read+0x12>
  }

  return len;
 8002fbe:	687b      	ldr	r3, [r7, #4]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ff0:	605a      	str	r2, [r3, #4]
  return 0;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <_isatty>:

int _isatty(int file)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003008:	2301      	movs	r3, #1
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003016:	b480      	push	{r7}
 8003018:	b085      	sub	sp, #20
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003038:	4a14      	ldr	r2, [pc, #80]	@ (800308c <_sbrk+0x5c>)
 800303a:	4b15      	ldr	r3, [pc, #84]	@ (8003090 <_sbrk+0x60>)
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003044:	4b13      	ldr	r3, [pc, #76]	@ (8003094 <_sbrk+0x64>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d102      	bne.n	8003052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800304c:	4b11      	ldr	r3, [pc, #68]	@ (8003094 <_sbrk+0x64>)
 800304e:	4a12      	ldr	r2, [pc, #72]	@ (8003098 <_sbrk+0x68>)
 8003050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003052:	4b10      	ldr	r3, [pc, #64]	@ (8003094 <_sbrk+0x64>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	429a      	cmp	r2, r3
 800305e:	d207      	bcs.n	8003070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003060:	f010 fc7c 	bl	801395c <__errno>
 8003064:	4603      	mov	r3, r0
 8003066:	220c      	movs	r2, #12
 8003068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800306a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800306e:	e009      	b.n	8003084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003070:	4b08      	ldr	r3, [pc, #32]	@ (8003094 <_sbrk+0x64>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003076:	4b07      	ldr	r3, [pc, #28]	@ (8003094 <_sbrk+0x64>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	4a05      	ldr	r2, [pc, #20]	@ (8003094 <_sbrk+0x64>)
 8003080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003082:	68fb      	ldr	r3, [r7, #12]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	2001c000 	.word	0x2001c000
 8003090:	00000600 	.word	0x00000600
 8003094:	20000864 	.word	0x20000864
 8003098:	200016d8 	.word	0x200016d8

0800309c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80030a0:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <SystemInit+0x20>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a6:	4a05      	ldr	r2, [pc, #20]	@ (80030bc <SystemInit+0x20>)
 80030a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030b0:	bf00      	nop
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030c0:	480d      	ldr	r0, [pc, #52]	@ (80030f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030c2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80030c4:	f7ff ffea 	bl	800309c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030c8:	480c      	ldr	r0, [pc, #48]	@ (80030fc <LoopForever+0x6>)
  ldr r1, =_edata
 80030ca:	490d      	ldr	r1, [pc, #52]	@ (8003100 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003104 <LoopForever+0xe>)
  movs r3, #0
 80030ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80030d0:	e002      	b.n	80030d8 <LoopCopyDataInit>

080030d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030d6:	3304      	adds	r3, #4

080030d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030dc:	d3f9      	bcc.n	80030d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030de:	4a0a      	ldr	r2, [pc, #40]	@ (8003108 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030e0:	4c0a      	ldr	r4, [pc, #40]	@ (800310c <LoopForever+0x16>)
  movs r3, #0
 80030e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030e4:	e001      	b.n	80030ea <LoopFillZerobss>

080030e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030e8:	3204      	adds	r2, #4

080030ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030ec:	d3fb      	bcc.n	80030e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030ee:	f010 fc3b 	bl	8013968 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030f2:	f7fd ffc3 	bl	800107c <main>

080030f6 <LoopForever>:

LoopForever:
    b LoopForever
 80030f6:	e7fe      	b.n	80030f6 <LoopForever>
  ldr   r0, =_estack
 80030f8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80030fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003100:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 8003104:	08016fa8 	.word	0x08016fa8
  ldr r2, =_sbss
 8003108:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 800310c:	200016d4 	.word	0x200016d4

08003110 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003110:	e7fe      	b.n	8003110 <ADC1_2_IRQHandler>

08003112 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d105      	bne.n	800312c <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003120:	b672      	cpsid	i
}
 8003122:	bf00      	nop
 8003124:	f7ff f9e8 	bl	80024f8 <Error_Handler>
 8003128:	bf00      	nop
 800312a:	e7fd      	b.n	8003128 <stm32_lock_init+0x16>
  lock->flag = 0;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	705a      	strb	r2, [r3, #1]
}
 8003138:	bf00      	nop
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003148:	f3ef 8310 	mrs	r3, PRIMASK
 800314c:	60bb      	str	r3, [r7, #8]
  return(result);
 800314e:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 8003150:	b2db      	uxtb	r3, r3
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8003158:	b672      	cpsid	i
}
 800315a:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800315c:	f3bf 8f4f 	dsb	sy
}
 8003160:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003162:	f3bf 8f6f 	isb	sy
}
 8003166:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d105      	bne.n	800317a <stm32_lock_acquire+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 800316e:	b672      	cpsid	i
}
 8003170:	bf00      	nop
 8003172:	f7ff f9c1 	bl	80024f8 <Error_Handler>
 8003176:	bf00      	nop
 8003178:	e7fd      	b.n	8003176 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	785b      	ldrb	r3, [r3, #1]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d103      	bne.n	800318a <stm32_lock_acquire+0x4a>
  {
    lock->flag = flag;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	7bfa      	ldrb	r2, [r7, #15]
 8003186:	701a      	strb	r2, [r3, #0]
 8003188:	e009      	b.n	800319e <stm32_lock_acquire+0x5e>
  }
  else if (lock->counter == UINT8_MAX)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	785b      	ldrb	r3, [r3, #1]
 800318e:	2bff      	cmp	r3, #255	@ 0xff
 8003190:	d105      	bne.n	800319e <stm32_lock_acquire+0x5e>
  __ASM volatile ("cpsid i" : : : "memory");
 8003192:	b672      	cpsid	i
}
 8003194:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8003196:	f7ff f9af 	bl	80024f8 <Error_Handler>
 800319a:	bf00      	nop
 800319c:	e7fd      	b.n	800319a <stm32_lock_acquire+0x5a>
  }
  lock->counter++;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	785b      	ldrb	r3, [r3, #1]
 80031a2:	3301      	adds	r3, #1
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	705a      	strb	r2, [r3, #1]
}
 80031aa:	bf00      	nop
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80031c0:	b672      	cpsid	i
}
 80031c2:	bf00      	nop
 80031c4:	f7ff f998 	bl	80024f8 <Error_Handler>
 80031c8:	bf00      	nop
 80031ca:	e7fd      	b.n	80031c8 <stm32_lock_release+0x16>
  if (lock->counter == 0)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	785b      	ldrb	r3, [r3, #1]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d105      	bne.n	80031e0 <stm32_lock_release+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 80031d4:	b672      	cpsid	i
}
 80031d6:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 80031d8:	f7ff f98e 	bl	80024f8 <Error_Handler>
 80031dc:	bf00      	nop
 80031de:	e7fd      	b.n	80031dc <stm32_lock_release+0x2a>
  }
  lock->counter--;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	785b      	ldrb	r3, [r3, #1]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	785b      	ldrb	r3, [r3, #1]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <stm32_lock_release+0x4e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <stm32_lock_release+0x4e>
  __ASM volatile ("cpsie i" : : : "memory");
 80031fc:	b662      	cpsie	i
}
 80031fe:	bf00      	nop
  {
    __enable_irq();
  }
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d105      	bne.n	8003222 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8003216:	f010 fba1 	bl	801395c <__errno>
 800321a:	4603      	mov	r3, r0
 800321c:	2216      	movs	r2, #22
 800321e:	601a      	str	r2, [r3, #0]
    return;
 8003220:	e016      	b.n	8003250 <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8003222:	2002      	movs	r0, #2
 8003224:	f00f ffae 	bl	8013184 <malloc>
 8003228:	4603      	mov	r3, r0
 800322a:	461a      	mov	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff ff68 	bl	8003112 <stm32_lock_init>
    return;
 8003242:	e005      	b.n	8003250 <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8003244:	b672      	cpsid	i
}
 8003246:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8003248:	f7ff f956 	bl	80024f8 <Error_Handler>
 800324c:	bf00      	nop
 800324e:	e7fd      	b.n	800324c <__retarget_lock_init_recursive+0x44>
}
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d105      	bne.n	8003270 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003264:	b672      	cpsid	i
}
 8003266:	bf00      	nop
 8003268:	f7ff f946 	bl	80024f8 <Error_Handler>
 800326c:	bf00      	nop
 800326e:	e7fd      	b.n	800326c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff ff64 	bl	8003140 <stm32_lock_acquire>
}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d105      	bne.n	800329a <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 800328e:	b672      	cpsid	i
}
 8003290:	bf00      	nop
 8003292:	f7ff f931 	bl	80024f8 <Error_Handler>
 8003296:	bf00      	nop
 8003298:	e7fd      	b.n	8003296 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ff88 	bl	80031b2 <stm32_lock_release>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <QENC_Init_Encoder0>:
#include "AMT10E2.h"

// Initialize encoder interface on TIM1
void QENC_Init_Encoder0(void) {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08a      	sub	sp, #40	@ 0x28
 80032b0:	af00      	add	r7, sp, #0
    TIM_Encoder_InitTypeDef encoderConfig = {0};
 80032b2:	1d3b      	adds	r3, r7, #4
 80032b4:	2224      	movs	r2, #36	@ 0x24
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f010 fb32 	bl	8013922 <memset>

    encoderConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80032be:	2303      	movs	r3, #3
 80032c0:	607b      	str	r3, [r7, #4]
    encoderConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60bb      	str	r3, [r7, #8]
    encoderConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80032c6:	2301      	movs	r3, #1
 80032c8:	60fb      	str	r3, [r7, #12]
    encoderConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
    encoderConfig.IC1Filter = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]

    encoderConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61bb      	str	r3, [r7, #24]
    encoderConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80032d6:	2301      	movs	r3, #1
 80032d8:	61fb      	str	r3, [r7, #28]
    encoderConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032da:	2300      	movs	r3, #0
 80032dc:	623b      	str	r3, [r7, #32]
    encoderConfig.IC2Filter = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24

    htim1.Instance = TIM1;
 80032e2:	4b0e      	ldr	r3, [pc, #56]	@ (800331c <QENC_Init_Encoder0+0x70>)
 80032e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003320 <QENC_Init_Encoder0+0x74>)
 80032e6:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 0;
 80032e8:	4b0c      	ldr	r3, [pc, #48]	@ (800331c <QENC_Init_Encoder0+0x70>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ee:	4b0b      	ldr	r3, [pc, #44]	@ (800331c <QENC_Init_Encoder0+0x70>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 0xFFFF;
 80032f4:	4b09      	ldr	r3, [pc, #36]	@ (800331c <QENC_Init_Encoder0+0x70>)
 80032f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032fa:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032fc:	4b07      	ldr	r3, [pc, #28]	@ (800331c <QENC_Init_Encoder0+0x70>)
 80032fe:	2200      	movs	r2, #0
 8003300:	611a      	str	r2, [r3, #16]

    HAL_TIM_Encoder_Init(&htim1, &encoderConfig);
 8003302:	1d3b      	adds	r3, r7, #4
 8003304:	4619      	mov	r1, r3
 8003306:	4805      	ldr	r0, [pc, #20]	@ (800331c <QENC_Init_Encoder0+0x70>)
 8003308:	f007 fe33 	bl	800af72 <HAL_TIM_Encoder_Init>
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800330c:	213c      	movs	r1, #60	@ 0x3c
 800330e:	4803      	ldr	r0, [pc, #12]	@ (800331c <QENC_Init_Encoder0+0x70>)
 8003310:	f007 fed5 	bl	800b0be <HAL_TIM_Encoder_Start>
}
 8003314:	bf00      	nop
 8003316:	3728      	adds	r7, #40	@ 0x28
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20000514 	.word	0x20000514
 8003320:	40012c00 	.word	0x40012c00

08003324 <QENC_Get_Encoder0_Count>:
    HAL_TIM_Encoder_Init(&htim8, &encoderConfig);
    HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
}

// Get signed count from Encoder 0
int16_t QENC_Get_Encoder0_Count(void) {
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
    return (int16_t)__HAL_TIM_GET_COUNTER(&htim1);
 8003328:	4b04      	ldr	r3, [pc, #16]	@ (800333c <QENC_Get_Encoder0_Count+0x18>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	b21b      	sxth	r3, r3
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	20000514 	.word	0x20000514

08003340 <BMM150_enable_chip_select>:
	GPIO_TypeDef* chip_select_port;
	uint16_t chip_select_pin;
};

void BMM150_enable_chip_select(GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(cs_port, cs_gpio_pin, GPIO_PIN_RESET);
 800334c:	887b      	ldrh	r3, [r7, #2]
 800334e:	2200      	movs	r2, #0
 8003350:	4619      	mov	r1, r3
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f002 ffe2 	bl	800631c <HAL_GPIO_WritePin>
}
 8003358:	bf00      	nop
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <BMM150_disable_chip_select>:

void BMM150_disable_chip_select(GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(cs_port, cs_gpio_pin, GPIO_PIN_SET);
 800336c:	887b      	ldrh	r3, [r7, #2]
 800336e:	2201      	movs	r2, #1
 8003370:	4619      	mov	r1, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f002 ffd2 	bl	800631c <HAL_GPIO_WritePin>
}
 8003378:	bf00      	nop
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <BMM150_SPI_read>:
	osDelay(period_in_micro_s / tick_amount);
}
*/

BMM150_INTF_RET_TYPE BMM150_SPI_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	4603      	mov	r3, r0
 800338e:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	75fb      	strb	r3, [r7, #23]
	struct spi_interface *spi = (struct spi_interface *)intf_ptr;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	613b      	str	r3, [r7, #16]

	BMM150_enable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	891b      	ldrh	r3, [r3, #8]
 80033a0:	4619      	mov	r1, r3
 80033a2:	4610      	mov	r0, r2
 80033a4:	f7ff ffcc 	bl	8003340 <BMM150_enable_chip_select>

	status = HAL_SPI_Transmit(spi->spi_handle, reg_addr, sizeof(reg_addr), BMM150_TIMEOUT_DURATION);
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	4619      	mov	r1, r3
 80033b0:	230a      	movs	r3, #10
 80033b2:	2201      	movs	r2, #1
 80033b4:	f006 fe34 	bl	800a020 <HAL_SPI_Transmit>
 80033b8:	4603      	mov	r3, r0
 80033ba:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(spi->spi_handle, reg_data, length, BMM150_TIMEOUT_DURATION);
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	230a      	movs	r3, #10
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	f006 ffa0 	bl	800a30c <HAL_SPI_Receive>
 80033cc:	4603      	mov	r3, r0
 80033ce:	75fb      	strb	r3, [r7, #23]

	BMM150_disable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	891b      	ldrh	r3, [r3, #8]
 80033d8:	4619      	mov	r1, r3
 80033da:	4610      	mov	r0, r2
 80033dc:	f7ff ffc0 	bl	8003360 <BMM150_disable_chip_select>


	return (BMM150_INTF_RET_TYPE)status;
 80033e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <BMM150_SPI_write>:

BMM150_INTF_RET_TYPE BMM150_SPI_write(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	4603      	mov	r3, r0
 80033fa:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	75fb      	strb	r3, [r7, #23]
	struct spi_interface *spi = (struct spi_interface *)intf_ptr;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	613b      	str	r3, [r7, #16]

	BMM150_enable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	891b      	ldrh	r3, [r3, #8]
 800340c:	4619      	mov	r1, r3
 800340e:	4610      	mov	r0, r2
 8003410:	f7ff ff96 	bl	8003340 <BMM150_enable_chip_select>

	status = HAL_SPI_Transmit(spi->spi_handle, reg_addr, sizeof(reg_addr), BMM150_TIMEOUT_DURATION);
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	4619      	mov	r1, r3
 800341c:	230a      	movs	r3, #10
 800341e:	2201      	movs	r2, #1
 8003420:	f006 fdfe 	bl	800a020 <HAL_SPI_Transmit>
 8003424:	4603      	mov	r3, r0
 8003426:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Transmit(spi->spi_handle, reg_data, length, BMM150_TIMEOUT_DURATION);
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	b29a      	uxth	r2, r3
 8003430:	230a      	movs	r3, #10
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	f006 fdf4 	bl	800a020 <HAL_SPI_Transmit>
 8003438:	4603      	mov	r3, r0
 800343a:	75fb      	strb	r3, [r7, #23]

	BMM150_disable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	891b      	ldrh	r3, [r3, #8]
 8003444:	4619      	mov	r1, r3
 8003446:	4610      	mov	r0, r2
 8003448:	f7ff ff8a 	bl	8003360 <BMM150_disable_chip_select>

	return (BMM150_INTF_RET_TYPE)status;
 800344c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <BMM150_spi_init>:

struct bmm150_dev BMM150_spi_init(SPI_HandleTypeDef *spi_handle, GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 8003458:	b5b0      	push	{r4, r5, r7, lr}
 800345a:	b09e      	sub	sp, #120	@ 0x78
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	807b      	strh	r3, [r7, #2]
	struct bmm150_dev bmm150 = (struct bmm150_dev){ 0 };
 8003466:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800346a:	222c      	movs	r2, #44	@ 0x2c
 800346c:	2100      	movs	r1, #0
 800346e:	4618      	mov	r0, r3
 8003470:	f010 fa57 	bl	8013922 <memset>

	if (spi_handle == NULL)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10f      	bne.n	800349a <BMM150_spi_init+0x42>
	{
		bmm150.intf_rslt = BMM150_E_NULL_PTR;
 800347a:	23ff      	movs	r3, #255	@ 0xff
 800347c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
		return bmm150;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	461d      	mov	r5, r3
 8003484:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8003488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800348a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800348c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800348e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003490:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003494:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003498:	e026      	b.n	80034e8 <BMM150_spi_init+0x90>
	}

	struct spi_interface my_spi = {
 800349a:	f107 0308 	add.w	r3, r7, #8
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	1d3b      	adds	r3, r7, #4
 80034a2:	61bb      	str	r3, [r7, #24]
 80034a4:	887b      	ldrh	r3, [r7, #2]
 80034a6:	83bb      	strh	r3, [r7, #28]
		.spi_handle = &spi_handle,
		.chip_select_port = &cs_port,
		.chip_select_pin = cs_gpio_pin
	};

	bmm150.intf = BMM150_SPI_INTF;
 80034a8:	2300      	movs	r3, #0
 80034aa:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	bmm150.read = BMM150_SPI_read;
 80034ae:	4b10      	ldr	r3, [pc, #64]	@ (80034f0 <BMM150_spi_init+0x98>)
 80034b0:	65bb      	str	r3, [r7, #88]	@ 0x58
	bmm150.write = BMM150_SPI_write;
 80034b2:	4b10      	ldr	r3, [pc, #64]	@ (80034f4 <BMM150_spi_init+0x9c>)
 80034b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
	bmm150.delay_us = HAL_Delay;
 80034b6:	4b10      	ldr	r3, [pc, #64]	@ (80034f8 <BMM150_spi_init+0xa0>)
 80034b8:	663b      	str	r3, [r7, #96]	@ 0x60
	bmm150.intf_ptr = &my_spi;
 80034ba:	f107 0314 	add.w	r3, r7, #20
 80034be:	653b      	str	r3, [r7, #80]	@ 0x50

	//NOTE: Potential error: is chip id initialized properly?
	bmm150.intf_rslt = bmm150_init(&bmm150);
 80034c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 f819 	bl	80034fc <bmm150_init>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	return bmm150;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	461d      	mov	r5, r3
 80034d4:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 80034d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80034e4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	3778      	adds	r7, #120	@ 0x78
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bdb0      	pop	{r4, r5, r7, pc}
 80034f0:	08003381 	.word	0x08003381
 80034f4:	080033ed 	.word	0x080033ed
 80034f8:	08004571 	.word	0x08004571

080034fc <bmm150_init>:
 *  @brief This API is the entry point, Call this API before using other APIs.
 *  This API reads the chip-id of the sensor which is the first step to
 *  verify the sensor and updates the trim parameters of the sensor.
 */
int8_t bmm150_init(struct bmm150_dev *dev)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	73bb      	strb	r3, [r7, #14]

    /* Power up the sensor from suspend to sleep mode */
    rslt = set_power_control_bit(BMM150_POWER_CNTRL_ENABLE, dev);
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	2001      	movs	r0, #1
 800350c:	f000 f8ac 	bl	8003668 <set_power_control_bit>
 8003510:	4603      	mov	r3, r0
 8003512:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 8003514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d11e      	bne.n	800355a <bmm150_init+0x5e>
    {
        /* Start-up time delay of 3ms */
        dev->delay_us(BMM150_START_UP_TIME, dev->intf_ptr);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6852      	ldr	r2, [r2, #4]
 8003524:	4611      	mov	r1, r2
 8003526:	2003      	movs	r0, #3
 8003528:	4798      	blx	r3

        /* Chip ID of the sensor is read */
        rslt = bmm150_get_regs(BMM150_REG_CHIP_ID, &chip_id, 1, dev);
 800352a:	f107 010e 	add.w	r1, r7, #14
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	2040      	movs	r0, #64	@ 0x40
 8003534:	f000 f843 	bl	80035be <bmm150_get_regs>
 8003538:	4603      	mov	r3, r0
 800353a:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMM150_OK)
 800353c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <bmm150_init+0x5e>
        {
            /* Check for chip id validity */
            if (chip_id == BMM150_CHIP_ID)
 8003544:	7bbb      	ldrb	r3, [r7, #14]
 8003546:	2b32      	cmp	r3, #50	@ 0x32
 8003548:	d107      	bne.n	800355a <bmm150_init+0x5e>
            {
                dev->chip_id = chip_id;
 800354a:	7bba      	ldrb	r2, [r7, #14]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	701a      	strb	r2, [r3, #0]

                /* Function to update trim values */
                rslt = read_trim_registers(dev);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f8c3 	bl	80036dc <read_trim_registers>
 8003556:	4603      	mov	r3, r0
 8003558:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800355a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <bmm150_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmm150_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 8003566:	b590      	push	{r4, r7, lr}
 8003568:	b087      	sub	sp, #28
 800356a:	af00      	add	r7, sp, #0
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	4603      	mov	r3, r0
 8003574:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8003576:	6838      	ldr	r0, [r7, #0]
 8003578:	f000 f852 	bl	8003620 <null_ptr_check>
 800357c:	4603      	mov	r3, r0
 800357e:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL) && (len != 0))
 8003580:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d112      	bne.n	80035ae <bmm150_set_regs+0x48>
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00f      	beq.n	80035ae <bmm150_set_regs+0x48>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00c      	beq.n	80035ae <bmm150_set_regs+0x48>
        /* Write the data to the reg_addr */

        /* SPI write requires to set The MSB of reg_addr as 0
         * but in default the MSB is always 0
         */
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	691c      	ldr	r4, [r3, #16]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	7bf8      	ldrb	r0, [r7, #15]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	47a0      	blx	r4
 80035a4:	4603      	mov	r3, r0
 80035a6:	461a      	mov	r2, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	721a      	strb	r2, [r3, #8]
 80035ac:	e001      	b.n	80035b2 <bmm150_set_regs+0x4c>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 80035ae:	23ff      	movs	r3, #255	@ 0xff
 80035b0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80035b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd90      	pop	{r4, r7, pc}

080035be <bmm150_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmm150_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 80035be:	b590      	push	{r4, r7, lr}
 80035c0:	b087      	sub	sp, #28
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	603b      	str	r3, [r7, #0]
 80035ca:	4603      	mov	r3, r0
 80035cc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80035ce:	6838      	ldr	r0, [r7, #0]
 80035d0:	f000 f826 	bl	8003620 <null_ptr_check>
 80035d4:	4603      	mov	r3, r0
 80035d6:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL))
 80035d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d117      	bne.n	8003610 <bmm150_get_regs+0x52>
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d014      	beq.n	8003610 <bmm150_get_regs+0x52>
    {
        if (dev->intf != BMM150_I2C_INTF)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	785b      	ldrb	r3, [r3, #1]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d003      	beq.n	80035f6 <bmm150_get_regs+0x38>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | 0x80;
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80035f4:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68dc      	ldr	r4, [r3, #12]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	7bf8      	ldrb	r0, [r7, #15]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	47a0      	blx	r4
 8003606:	4603      	mov	r3, r0
 8003608:	461a      	mov	r2, r3
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	721a      	strb	r2, [r3, #8]
 800360e:	e001      	b.n	8003614 <bmm150_get_regs+0x56>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 8003610:	23ff      	movs	r3, #255	@ 0xff
 8003612:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003614:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003618:	4618      	mov	r0, r3
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	bd90      	pop	{r4, r7, pc}

08003620 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmm150_dev *dev)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00f      	beq.n	800364e <null_ptr_check+0x2e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00b      	beq.n	800364e <null_ptr_check+0x2e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d007      	beq.n	800364e <null_ptr_check+0x2e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800364a:	2b00      	cmp	r3, #0
 800364c:	d102      	bne.n	8003654 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMM150_E_NULL_PTR;
 800364e:	23ff      	movs	r3, #255	@ 0xff
 8003650:	73fb      	strb	r3, [r7, #15]
 8003652:	e001      	b.n	8003658 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMM150_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003658:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <set_power_control_bit>:

/*!
 * @brief This internal API sets/resets the power control bit of 0x4B register.
 */
static int8_t set_power_control_bit(uint8_t pwrcntrl_bit, struct bmm150_dev *dev)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	6039      	str	r1, [r7, #0]
 8003672:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	73bb      	strb	r3, [r7, #14]

    /* Power control register 0x4B is read */
    rslt = bmm150_get_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 8003678:	f107 010e 	add.w	r1, r7, #14
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2201      	movs	r2, #1
 8003680:	204b      	movs	r0, #75	@ 0x4b
 8003682:	f7ff ff9c 	bl	80035be <bmm150_get_regs>
 8003686:	4603      	mov	r3, r0
 8003688:	73fb      	strb	r3, [r7, #15]

    /* Proceed if everything is fine until now */
    if (rslt == BMM150_OK)
 800368a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d11e      	bne.n	80036d0 <set_power_control_bit+0x68>
    {
        /* Sets the value of power control bit */
        reg_data = BMM150_SET_BITS_POS_0(reg_data, BMM150_PWR_CNTRL, pwrcntrl_bit);
 8003692:	7bbb      	ldrb	r3, [r7, #14]
 8003694:	b25b      	sxtb	r3, r3
 8003696:	f023 0301 	bic.w	r3, r3, #1
 800369a:	b25a      	sxtb	r2, r3
 800369c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	b25b      	sxtb	r3, r3
 80036a6:	4313      	orrs	r3, r2
 80036a8:	b25b      	sxtb	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 80036ae:	f107 010e 	add.w	r1, r7, #14
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2201      	movs	r2, #1
 80036b6:	204b      	movs	r0, #75	@ 0x4b
 80036b8:	f7ff ff55 	bl	8003566 <bmm150_set_regs>
 80036bc:	4603      	mov	r3, r0
 80036be:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMM150_OK)
 80036c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d103      	bne.n	80036d0 <set_power_control_bit+0x68>
        {
            /* Store the power control bit
             * value in dev structure
             */
            dev->pwr_cntrl_bit = pwrcntrl_bit;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	79fa      	ldrb	r2, [r7, #7]
 80036cc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        }
    }

    return rslt;
 80036d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <read_trim_registers>:
/*!
 * @brief This internal API reads the trim registers of the sensor and stores
 * the trim values in the "trim_data" of device structure.
 */
static int8_t read_trim_registers(struct bmm150_dev *dev)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t trim_x1y1[2] = { 0 };
 80036e4:	2300      	movs	r3, #0
 80036e6:	833b      	strh	r3, [r7, #24]
    uint8_t trim_xyz_data[4] = { 0 };
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
    uint8_t trim_xy1xy2[10] = { 0 };
 80036ec:	2300      	movs	r3, #0
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	f107 030c 	add.w	r3, r7, #12
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	809a      	strh	r2, [r3, #4]
    uint16_t temp_msb = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	83bb      	strh	r3, [r7, #28]

    /* Trim register value is read */
    rslt = bmm150_get_regs(BMM150_DIG_X1, trim_x1y1, 2, dev);
 80036fe:	f107 0118 	add.w	r1, r7, #24
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2202      	movs	r2, #2
 8003706:	205d      	movs	r0, #93	@ 0x5d
 8003708:	f7ff ff59 	bl	80035be <bmm150_get_regs>
 800370c:	4603      	mov	r3, r0
 800370e:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 8003710:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d16a      	bne.n	80037ee <read_trim_registers+0x112>
    {
        rslt = bmm150_get_regs(BMM150_DIG_Z4_LSB, trim_xyz_data, 4, dev);
 8003718:	f107 0114 	add.w	r1, r7, #20
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2204      	movs	r2, #4
 8003720:	2062      	movs	r0, #98	@ 0x62
 8003722:	f7ff ff4c 	bl	80035be <bmm150_get_regs>
 8003726:	4603      	mov	r3, r0
 8003728:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMM150_OK)
 800372a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d15d      	bne.n	80037ee <read_trim_registers+0x112>
        {
            rslt = bmm150_get_regs(BMM150_DIG_Z2_LSB, trim_xy1xy2, 10, dev);
 8003732:	f107 0108 	add.w	r1, r7, #8
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	220a      	movs	r2, #10
 800373a:	2068      	movs	r0, #104	@ 0x68
 800373c:	f7ff ff3f 	bl	80035be <bmm150_get_regs>
 8003740:	4603      	mov	r3, r0
 8003742:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMM150_OK)
 8003744:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d150      	bne.n	80037ee <read_trim_registers+0x112>
            {
                /* Trim data which is read is updated
                 * in the device structure
                 */
                dev->trim_data.dig_x1 = (int8_t)trim_x1y1[0];
 800374c:	7e3b      	ldrb	r3, [r7, #24]
 800374e:	b25a      	sxtb	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	761a      	strb	r2, [r3, #24]
                dev->trim_data.dig_y1 = (int8_t)trim_x1y1[1];
 8003754:	7e7b      	ldrb	r3, [r7, #25]
 8003756:	b25a      	sxtb	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	765a      	strb	r2, [r3, #25]
                dev->trim_data.dig_x2 = (int8_t)trim_xyz_data[2];
 800375c:	7dbb      	ldrb	r3, [r7, #22]
 800375e:	b25a      	sxtb	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	769a      	strb	r2, [r3, #26]
                dev->trim_data.dig_y2 = (int8_t)trim_xyz_data[3];
 8003764:	7dfb      	ldrb	r3, [r7, #23]
 8003766:	b25a      	sxtb	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	76da      	strb	r2, [r3, #27]
                temp_msb = ((uint16_t)trim_xy1xy2[3]) << 8;
 800376c:	7afb      	ldrb	r3, [r7, #11]
 800376e:	021b      	lsls	r3, r3, #8
 8003770:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z1 = (uint16_t)(temp_msb | trim_xy1xy2[2]);
 8003772:	7abb      	ldrb	r3, [r7, #10]
 8003774:	461a      	mov	r2, r3
 8003776:	8bbb      	ldrh	r3, [r7, #28]
 8003778:	4313      	orrs	r3, r2
 800377a:	b29a      	uxth	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	839a      	strh	r2, [r3, #28]
                temp_msb = ((uint16_t)trim_xy1xy2[1]) << 8;
 8003780:	7a7b      	ldrb	r3, [r7, #9]
 8003782:	021b      	lsls	r3, r3, #8
 8003784:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z2 = (int16_t)(temp_msb | trim_xy1xy2[0]);
 8003786:	7a3b      	ldrb	r3, [r7, #8]
 8003788:	461a      	mov	r2, r3
 800378a:	8bbb      	ldrh	r3, [r7, #28]
 800378c:	4313      	orrs	r3, r2
 800378e:	b29b      	uxth	r3, r3
 8003790:	b21a      	sxth	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	83da      	strh	r2, [r3, #30]
                temp_msb = ((uint16_t)trim_xy1xy2[7]) << 8;
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	021b      	lsls	r3, r3, #8
 800379a:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z3 = (int16_t)(temp_msb | trim_xy1xy2[6]);
 800379c:	7bbb      	ldrb	r3, [r7, #14]
 800379e:	461a      	mov	r2, r3
 80037a0:	8bbb      	ldrh	r3, [r7, #28]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	b21a      	sxth	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	841a      	strh	r2, [r3, #32]
                temp_msb = ((uint16_t)trim_xyz_data[1]) << 8;
 80037ac:	7d7b      	ldrb	r3, [r7, #21]
 80037ae:	021b      	lsls	r3, r3, #8
 80037b0:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z4 = (int16_t)(temp_msb | trim_xyz_data[0]);
 80037b2:	7d3b      	ldrb	r3, [r7, #20]
 80037b4:	461a      	mov	r2, r3
 80037b6:	8bbb      	ldrh	r3, [r7, #28]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	b21a      	sxth	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	845a      	strh	r2, [r3, #34]	@ 0x22
                dev->trim_data.dig_xy1 = trim_xy1xy2[9];
 80037c2:	7c7a      	ldrb	r2, [r7, #17]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                dev->trim_data.dig_xy2 = (int8_t)trim_xy1xy2[8];
 80037ca:	7c3b      	ldrb	r3, [r7, #16]
 80037cc:	b25a      	sxtb	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
 80037d4:	7b7b      	ldrb	r3, [r7, #13]
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 80037de:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
 80037e0:	7b3b      	ldrb	r3, [r7, #12]
 80037e2:	461a      	mov	r2, r3
 80037e4:	8bbb      	ldrh	r3, [r7, #28]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	84da      	strh	r2, [r3, #38]	@ 0x26
            }
        }
    }

    return rslt;
 80037ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3720      	adds	r7, #32
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <BQ28Z610_ReadVoltage>:

#define CMD_VOLTAGE 0x08
#define BQ28Z610_I2C_ADDR (0x55 << 1)

HAL_StatusTypeDef BQ28Z610_ReadVoltage(I2C_HandleTypeDef *hi2c, uint16_t *voltage)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b088      	sub	sp, #32
 80037fe:	af04      	add	r7, sp, #16
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]
	uint8_t rx[2];
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, BQ28Z610_I2C_ADDR, CMD_VOLTAGE, I2C_MEMADD_SIZE_8BIT, rx, 2, HAL_MAX_DELAY);
 8003804:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003808:	9302      	str	r3, [sp, #8]
 800380a:	2302      	movs	r3, #2
 800380c:	9301      	str	r3, [sp, #4]
 800380e:	f107 0308 	add.w	r3, r7, #8
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	2301      	movs	r3, #1
 8003816:	2208      	movs	r2, #8
 8003818:	21aa      	movs	r1, #170	@ 0xaa
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f002 fe32 	bl	8006484 <HAL_I2C_Mem_Read>
 8003820:	4603      	mov	r3, r0
 8003822:	73fb      	strb	r3, [r7, #15]

	if (status == HAL_OK)
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <BQ28Z610_ReadVoltage+0x46>
	{
		uint16_t shifted = rx[1] << 8;
 800382a:	7a7b      	ldrb	r3, [r7, #9]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	81bb      	strh	r3, [r7, #12]
		uint16_t lower = rx[0];
 8003830:	7a3b      	ldrb	r3, [r7, #8]
 8003832:	817b      	strh	r3, [r7, #10]
		*voltage = shifted | lower;
 8003834:	89ba      	ldrh	r2, [r7, #12]
 8003836:	897b      	ldrh	r3, [r7, #10]
 8003838:	4313      	orrs	r3, r2
 800383a:	b29a      	uxth	r2, r3
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	801a      	strh	r2, [r3, #0]
	}
	return status;
 8003840:	7bfb      	ldrb	r3, [r7, #15]
};
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <ICM42688P_disable_chip_select>:
volatile static int16_t gyro_old_y = 0;
volatile static int16_t gyro_old_p = 0;
volatile static uint32_t old_time = 0;

static void ICM42688P_disable_chip_select()
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_RESET);
 8003850:	4b04      	ldr	r3, [pc, #16]	@ (8003864 <ICM42688P_disable_chip_select+0x18>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a04      	ldr	r2, [pc, #16]	@ (8003868 <ICM42688P_disable_chip_select+0x1c>)
 8003856:	8811      	ldrh	r1, [r2, #0]
 8003858:	2200      	movs	r2, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f002 fd5e 	bl	800631c <HAL_GPIO_WritePin>
}
 8003860:	bf00      	nop
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20000874 	.word	0x20000874
 8003868:	20000878 	.word	0x20000878

0800386c <ICM42688P_enable_chip_select>:

static void ICM42688P_enable_chip_select()
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_SET);
 8003870:	4b04      	ldr	r3, [pc, #16]	@ (8003884 <ICM42688P_enable_chip_select+0x18>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a04      	ldr	r2, [pc, #16]	@ (8003888 <ICM42688P_enable_chip_select+0x1c>)
 8003876:	8811      	ldrh	r1, [r2, #0]
 8003878:	2201      	movs	r2, #1
 800387a:	4618      	mov	r0, r3
 800387c:	f002 fd4e 	bl	800631c <HAL_GPIO_WritePin>
}
 8003880:	bf00      	nop
 8003882:	bd80      	pop	{r7, pc}
 8003884:	20000874 	.word	0x20000874
 8003888:	20000878 	.word	0x20000878

0800388c <ICM42688P_write_reg>:

static HAL_StatusTypeDef ICM42688P_write_reg(uint8_t reg, uint8_t data)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	460a      	mov	r2, r1
 8003896:	71fb      	strb	r3, [r7, #7]
 8003898:	4613      	mov	r3, r2
 800389a:	71bb      	strb	r3, [r7, #6]
    uint8_t tx[2] = {reg, data};
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	733b      	strb	r3, [r7, #12]
 80038a0:	79bb      	ldrb	r3, [r7, #6]
 80038a2:	737b      	strb	r3, [r7, #13]
    ICM42688P_disable_chip_select();
 80038a4:	f7ff ffd2 	bl	800384c <ICM42688P_disable_chip_select>
    HAL_SPI_Transmit(hspi, tx, 2, HAL_MAX_DELAY);
 80038a8:	4b07      	ldr	r3, [pc, #28]	@ (80038c8 <ICM42688P_write_reg+0x3c>)
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	f107 010c 	add.w	r1, r7, #12
 80038b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038b4:	2202      	movs	r2, #2
 80038b6:	f006 fbb3 	bl	800a020 <HAL_SPI_Transmit>
    ICM42688P_enable_chip_select();
 80038ba:	f7ff ffd7 	bl	800386c <ICM42688P_enable_chip_select>
    return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20000870 	.word	0x20000870

080038cc <ICM42688P_read_reg>:

int16_t ICM42688P_read_reg(uint8_t reg)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = reg | (1 << 7);
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	747b      	strb	r3, [r7, #17]
    int8_t rx[2] = {0};
 80038e0:	2300      	movs	r3, #0
 80038e2:	81bb      	strh	r3, [r7, #12]
    ICM42688P_disable_chip_select();
 80038e4:	f7ff ffb2 	bl	800384c <ICM42688P_disable_chip_select>
    HAL_SPI_Transmit(hspi, &tx, 1, HAL_MAX_DELAY);
 80038e8:	4b12      	ldr	r3, [pc, #72]	@ (8003934 <ICM42688P_read_reg+0x68>)
 80038ea:	6818      	ldr	r0, [r3, #0]
 80038ec:	f107 0111 	add.w	r1, r7, #17
 80038f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038f4:	2201      	movs	r2, #1
 80038f6:	f006 fb93 	bl	800a020 <HAL_SPI_Transmit>

    HAL_SPI_Receive(hspi, &rx, 1, HAL_MAX_DELAY);
 80038fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003934 <ICM42688P_read_reg+0x68>)
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	f107 010c 	add.w	r1, r7, #12
 8003902:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003906:	2201      	movs	r2, #1
 8003908:	f006 fd00 	bl	800a30c <HAL_SPI_Receive>
    ICM42688P_enable_chip_select();
 800390c:	f7ff ffae 	bl	800386c <ICM42688P_enable_chip_select>

    int16_t shifted = rx[0] << 8;
 8003910:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003914:	021b      	lsls	r3, r3, #8
 8003916:	82fb      	strh	r3, [r7, #22]
    int16_t lower = rx[1];
 8003918:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800391c:	82bb      	strh	r3, [r7, #20]
    int16_t value = shifted | lower;
 800391e:	8afa      	ldrh	r2, [r7, #22]
 8003920:	8abb      	ldrh	r3, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	827b      	strh	r3, [r7, #18]
    return value;
 8003926:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000870 	.word	0x20000870

08003938 <ICM42688P_init>:

uint8_t ICM42688P_init(SPI_TypeDef *spi_handle, GPIO_TypeDef *chip_select_port, uint16_t chip_select_gpio_pin)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
    hspi = spi_handle;
 8003946:	4a0e      	ldr	r2, [pc, #56]	@ (8003980 <ICM42688P_init+0x48>)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6013      	str	r3, [r2, #0]
    ChipSelect_GPIO_Port = chip_select_port;
 800394c:	4a0d      	ldr	r2, [pc, #52]	@ (8003984 <ICM42688P_init+0x4c>)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	6013      	str	r3, [r2, #0]
    ChipSelect_Pin = chip_select_gpio_pin;
 8003952:	4a0d      	ldr	r2, [pc, #52]	@ (8003988 <ICM42688P_init+0x50>)
 8003954:	88fb      	ldrh	r3, [r7, #6]
 8003956:	8013      	strh	r3, [r2, #0]
    HAL_Delay(100);
    ICM42688P_write_reg(0x11, 0x00);  // Power management
    ICM42688P_write_reg(0x10, 0x0F);  // Gyro and accel config
    */

    ICM42688P_write_reg(0x11, 0x01); // Reset Device
 8003958:	2101      	movs	r1, #1
 800395a:	2011      	movs	r0, #17
 800395c:	f7ff ff96 	bl	800388c <ICM42688P_write_reg>
    HAL_Delay(100);
 8003960:	2064      	movs	r0, #100	@ 0x64
 8003962:	f000 fe05 	bl	8004570 <HAL_Delay>
    ICM42688P_write_reg(0x4E, (0b11 << 2) | (0b11 << 0)); // Enable gyro & accelerometer
 8003966:	210f      	movs	r1, #15
 8003968:	204e      	movs	r0, #78	@ 0x4e
 800396a:	f7ff ff8f 	bl	800388c <ICM42688P_write_reg>
    ICM42688P_write_reg(0x7B, (0b10 << 1));               // Enable CLKIN
 800396e:	2104      	movs	r1, #4
 8003970:	207b      	movs	r0, #123	@ 0x7b
 8003972:	f7ff ff8b 	bl	800388c <ICM42688P_write_reg>

    return 0;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	20000870 	.word	0x20000870
 8003984:	20000874 	.word	0x20000874
 8003988:	20000878 	.word	0x20000878

0800398c <Get_Accel_P>:

int16_t Get_Accel_P(int16_t gyro_p, uint32_t time)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	6039      	str	r1, [r7, #0]
 8003996:	80fb      	strh	r3, [r7, #6]
    return (gyro_old_p - gyro_p); // add timer later / (old_time - time);
 8003998:	4b06      	ldr	r3, [pc, #24]	@ (80039b4 <Get_Accel_P+0x28>)
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	b21b      	sxth	r3, r3
 800399e:	b29a      	uxth	r2, r3
 80039a0:	88fb      	ldrh	r3, [r7, #6]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	b21b      	sxth	r3, r3
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	2000087e 	.word	0x2000087e

080039b8 <Get_Accel_Y>:

int16_t Get_Accel_Y(int16_t gyro_y, uint32_t time)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	6039      	str	r1, [r7, #0]
 80039c2:	80fb      	strh	r3, [r7, #6]
    return (gyro_old_y - gyro_y); // add timer later / (old_time - time);
 80039c4:	4b06      	ldr	r3, [pc, #24]	@ (80039e0 <Get_Accel_Y+0x28>)
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	b21b      	sxth	r3, r3
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	b21b      	sxth	r3, r3
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	2000087c 	.word	0x2000087c

080039e4 <Get_Accel_R>:

int16_t Get_Accel_R(int16_t gyro_r, uint32_t time)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	6039      	str	r1, [r7, #0]
 80039ee:	80fb      	strh	r3, [r7, #6]
    return (gyro_old_r - gyro_r); // add timer later / (old_time - time);
 80039f0:	4b06      	ldr	r3, [pc, #24]	@ (8003a0c <Get_Accel_R+0x28>)
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	b21b      	sxth	r3, r3
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	b21b      	sxth	r3, r3
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	2000087a 	.word	0x2000087a

08003a10 <ICM42688P_read_data>:

ICM42688P_AccelData ICM42688P_read_data()
{
 8003a10:	b590      	push	{r4, r7, lr}
 8003a12:	b089      	sub	sp, #36	@ 0x24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
	ICM42688P_AccelData data = {0};
 8003a18:	f107 030c 	add.w	r3, r7, #12
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	819a      	strh	r2, [r3, #12]
    data.accel_z = ICM42688P_read_reg(0x23);
 8003a26:	2023      	movs	r0, #35	@ 0x23
 8003a28:	f7ff ff50 	bl	80038cc <ICM42688P_read_reg>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	81bb      	strh	r3, [r7, #12]

    data.gyro_p = ICM42688P_read_reg(0x25);
 8003a30:	2025      	movs	r0, #37	@ 0x25
 8003a32:	f7ff ff4b 	bl	80038cc <ICM42688P_read_reg>
 8003a36:	4603      	mov	r3, r0
 8003a38:	82bb      	strh	r3, [r7, #20]
    data.gyro_y = ICM42688P_read_reg(0x27);
 8003a3a:	2027      	movs	r0, #39	@ 0x27
 8003a3c:	f7ff ff46 	bl	80038cc <ICM42688P_read_reg>
 8003a40:	4603      	mov	r3, r0
 8003a42:	82fb      	strh	r3, [r7, #22]
    data.gyro_r = ICM42688P_read_reg(0x29);
 8003a44:	2029      	movs	r0, #41	@ 0x29
 8003a46:	f7ff ff41 	bl	80038cc <ICM42688P_read_reg>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	833b      	strh	r3, [r7, #24]

    uint32_t time = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]

    data.accel_p = Get_Accel_P(data.gyro_p, time);
 8003a52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a56:	69f9      	ldr	r1, [r7, #28]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff ff97 	bl	800398c <Get_Accel_P>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	81fb      	strh	r3, [r7, #14]
    data.accel_y = Get_Accel_Y(data.gyro_y, time);
 8003a62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003a66:	69f9      	ldr	r1, [r7, #28]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff ffa5 	bl	80039b8 <Get_Accel_Y>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	823b      	strh	r3, [r7, #16]
    data.accel_r = -Get_Accel_R(data.gyro_r, time);
 8003a72:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003a76:	69f9      	ldr	r1, [r7, #28]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ffb3 	bl	80039e4 <Get_Accel_R>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	425b      	negs	r3, r3
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	b21b      	sxth	r3, r3
 8003a88:	827b      	strh	r3, [r7, #18]

    gyro_old_p = data.gyro_p;
 8003a8a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac4 <ICM42688P_read_data+0xb4>)
 8003a90:	801a      	strh	r2, [r3, #0]
    gyro_old_y = data.gyro_y;
 8003a92:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003a96:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac8 <ICM42688P_read_data+0xb8>)
 8003a98:	801a      	strh	r2, [r3, #0]
    gyro_old_r = data.gyro_r;
 8003a9a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <ICM42688P_read_data+0xbc>)
 8003aa0:	801a      	strh	r2, [r3, #0]
    old_time = time;
 8003aa2:	4a0b      	ldr	r2, [pc, #44]	@ (8003ad0 <ICM42688P_read_data+0xc0>)
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	6013      	str	r3, [r2, #0]

    return data;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	461c      	mov	r4, r3
 8003aac:	f107 030c 	add.w	r3, r7, #12
 8003ab0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003ab2:	6020      	str	r0, [r4, #0]
 8003ab4:	6061      	str	r1, [r4, #4]
 8003ab6:	60a2      	str	r2, [r4, #8]
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	81a3      	strh	r3, [r4, #12]
}
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	3724      	adds	r7, #36	@ 0x24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd90      	pop	{r4, r7, pc}
 8003ac4:	2000087e 	.word	0x2000087e
 8003ac8:	2000087c 	.word	0x2000087c
 8003acc:	2000087a 	.word	0x2000087a
 8003ad0:	20000880 	.word	0x20000880

08003ad4 <LC76G_init>:
#include "LC76G.h"
#include <string.h>
#include <math.h>

void LC76G_init()
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
    // Disable all other types of NEMA sentences
    HAL_UART_Transmit(&huart5, LC76_DISABLE_GGL, strlen(LC76_DISABLE_GGL), TIMEOUT);
 8003ad8:	2305      	movs	r3, #5
 8003ada:	220f      	movs	r2, #15
 8003adc:	4923      	ldr	r1, [pc, #140]	@ (8003b6c <LC76G_init+0x98>)
 8003ade:	4824      	ldr	r0, [pc, #144]	@ (8003b70 <LC76G_init+0x9c>)
 8003ae0:	f008 fd93 	bl	800c60a <HAL_UART_Transmit>
    HAL_UART_Receive(&huart5, NULL, 32, TIMEOUT);
 8003ae4:	2305      	movs	r3, #5
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4821      	ldr	r0, [pc, #132]	@ (8003b70 <LC76G_init+0x9c>)
 8003aec:	f008 fe1b 	bl	800c726 <HAL_UART_Receive>

    HAL_UART_Transmit(&huart5, LC76_DISABLE_GSA, strlen(LC76_DISABLE_GSA), TIMEOUT);
 8003af0:	2305      	movs	r3, #5
 8003af2:	220f      	movs	r2, #15
 8003af4:	491f      	ldr	r1, [pc, #124]	@ (8003b74 <LC76G_init+0xa0>)
 8003af6:	481e      	ldr	r0, [pc, #120]	@ (8003b70 <LC76G_init+0x9c>)
 8003af8:	f008 fd87 	bl	800c60a <HAL_UART_Transmit>
    HAL_UART_Receive(&huart5, NULL, 32, TIMEOUT);
 8003afc:	2305      	movs	r3, #5
 8003afe:	2220      	movs	r2, #32
 8003b00:	2100      	movs	r1, #0
 8003b02:	481b      	ldr	r0, [pc, #108]	@ (8003b70 <LC76G_init+0x9c>)
 8003b04:	f008 fe0f 	bl	800c726 <HAL_UART_Receive>

    HAL_UART_Transmit(&huart5, LC76_DISABLE_GSV, strlen(LC76_DISABLE_GSV), TIMEOUT);
 8003b08:	2305      	movs	r3, #5
 8003b0a:	220f      	movs	r2, #15
 8003b0c:	491a      	ldr	r1, [pc, #104]	@ (8003b78 <LC76G_init+0xa4>)
 8003b0e:	4818      	ldr	r0, [pc, #96]	@ (8003b70 <LC76G_init+0x9c>)
 8003b10:	f008 fd7b 	bl	800c60a <HAL_UART_Transmit>
    HAL_UART_Receive(&huart5, NULL, 32, TIMEOUT);
 8003b14:	2305      	movs	r3, #5
 8003b16:	2220      	movs	r2, #32
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4815      	ldr	r0, [pc, #84]	@ (8003b70 <LC76G_init+0x9c>)
 8003b1c:	f008 fe03 	bl	800c726 <HAL_UART_Receive>

    HAL_UART_Transmit(&huart5, LC76_DISABLE_RMC, strlen(LC76_DISABLE_RMC), TIMEOUT);
 8003b20:	2305      	movs	r3, #5
 8003b22:	220f      	movs	r2, #15
 8003b24:	4915      	ldr	r1, [pc, #84]	@ (8003b7c <LC76G_init+0xa8>)
 8003b26:	4812      	ldr	r0, [pc, #72]	@ (8003b70 <LC76G_init+0x9c>)
 8003b28:	f008 fd6f 	bl	800c60a <HAL_UART_Transmit>
    HAL_UART_Receive(&huart5, NULL, 32, TIMEOUT);
 8003b2c:	2305      	movs	r3, #5
 8003b2e:	2220      	movs	r2, #32
 8003b30:	2100      	movs	r1, #0
 8003b32:	480f      	ldr	r0, [pc, #60]	@ (8003b70 <LC76G_init+0x9c>)
 8003b34:	f008 fdf7 	bl	800c726 <HAL_UART_Receive>

    HAL_UART_Transmit(&huart5, LC76_DISABLE_VTG8, strlen(LC76_DISABLE_VTG8), TIMEOUT);
 8003b38:	2305      	movs	r3, #5
 8003b3a:	220f      	movs	r2, #15
 8003b3c:	4910      	ldr	r1, [pc, #64]	@ (8003b80 <LC76G_init+0xac>)
 8003b3e:	480c      	ldr	r0, [pc, #48]	@ (8003b70 <LC76G_init+0x9c>)
 8003b40:	f008 fd63 	bl	800c60a <HAL_UART_Transmit>
    HAL_UART_Receive(&huart5, NULL, 32, TIMEOUT);
 8003b44:	2305      	movs	r3, #5
 8003b46:	2220      	movs	r2, #32
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4809      	ldr	r0, [pc, #36]	@ (8003b70 <LC76G_init+0x9c>)
 8003b4c:	f008 fdeb 	bl	800c726 <HAL_UART_Receive>

    // Enable GGA sentences
    HAL_UART_Transmit(&huart5, LC76_ENABLE_GGA, strlen(LC76_ENABLE_GGA), TIMEOUT);
 8003b50:	2305      	movs	r3, #5
 8003b52:	220f      	movs	r2, #15
 8003b54:	490b      	ldr	r1, [pc, #44]	@ (8003b84 <LC76G_init+0xb0>)
 8003b56:	4806      	ldr	r0, [pc, #24]	@ (8003b70 <LC76G_init+0x9c>)
 8003b58:	f008 fd57 	bl	800c60a <HAL_UART_Transmit>
    HAL_UART_Receive(&huart5, NULL, 32, TIMEOUT);
 8003b5c:	2305      	movs	r3, #5
 8003b5e:	2220      	movs	r2, #32
 8003b60:	2100      	movs	r1, #0
 8003b62:	4803      	ldr	r0, [pc, #12]	@ (8003b70 <LC76G_init+0x9c>)
 8003b64:	f008 fddf 	bl	800c726 <HAL_UART_Receive>
}
 8003b68:	bf00      	nop
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	08016b78 	.word	0x08016b78
 8003b70:	20000690 	.word	0x20000690
 8003b74:	08016b88 	.word	0x08016b88
 8003b78:	08016b98 	.word	0x08016b98
 8003b7c:	08016ba8 	.word	0x08016ba8
 8003b80:	08016bb8 	.word	0x08016bb8
 8003b84:	08016b68 	.word	0x08016b68

08003b88 <MS5607_Init>:
/** Reset and prepare for general usage.
 * This will reset the device and perform the PROM reading to find the conversion values and if
 * the communication is working.
 */
MS5607StateTypeDef MS5607_Init(SPI_HandleTypeDef *spi_handle, GPIO_TypeDef *chip_select_port, uint16_t chip_select_gpio_pin)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	4613      	mov	r3, r2
 8003b94:	80fb      	strh	r3, [r7, #6]
  hspi = spi_handle;
 8003b96:	4a16      	ldr	r2, [pc, #88]	@ (8003bf0 <MS5607_Init+0x68>)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6013      	str	r3, [r2, #0]
  ChipSelect_GPIO_Port = chip_select_port;
 8003b9c:	4a15      	ldr	r2, [pc, #84]	@ (8003bf4 <MS5607_Init+0x6c>)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	6013      	str	r3, [r2, #0]
  ChipSelect_Pin = chip_select_gpio_pin;
 8003ba2:	4a15      	ldr	r2, [pc, #84]	@ (8003bf8 <MS5607_Init+0x70>)
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	8013      	strh	r3, [r2, #0]

  enableCSB();
 8003ba8:	f000 fc0a 	bl	80043c0 <enableCSB>
  SPITransmitData = RESET_COMMAND;
 8003bac:	4b13      	ldr	r3, [pc, #76]	@ (8003bfc <MS5607_Init+0x74>)
 8003bae:	221e      	movs	r2, #30
 8003bb0:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf0 <MS5607_Init+0x68>)
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	230a      	movs	r3, #10
 8003bb8:	2201      	movs	r2, #1
 8003bba:	4910      	ldr	r1, [pc, #64]	@ (8003bfc <MS5607_Init+0x74>)
 8003bbc:	f006 fa30 	bl	800a020 <HAL_SPI_Transmit>
  HAL_Delay(3);
 8003bc0:	2003      	movs	r0, #3
 8003bc2:	f000 fcd5 	bl	8004570 <HAL_Delay>
  disableCSB();
 8003bc6:	f000 fc0b 	bl	80043e0 <disableCSB>

  MS5607PromRead(&promData);
 8003bca:	480d      	ldr	r0, [pc, #52]	@ (8003c00 <MS5607_Init+0x78>)
 8003bcc:	f000 f81a 	bl	8003c04 <MS5607PromRead>

  if (promData.reserved == 0x00 || promData.reserved == 0xff)
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c00 <MS5607_Init+0x78>)
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <MS5607_Init+0x58>
 8003bd8:	4b09      	ldr	r3, [pc, #36]	@ (8003c00 <MS5607_Init+0x78>)
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	2bff      	cmp	r3, #255	@ 0xff
 8003bde:	d101      	bne.n	8003be4 <MS5607_Init+0x5c>
    return MS5607_STATE_FAILED;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e000      	b.n	8003be6 <MS5607_Init+0x5e>
  else
    return MS5607_STATE_READY;
 8003be4:	2301      	movs	r3, #1
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000884 	.word	0x20000884
 8003bf4:	20000888 	.word	0x20000888
 8003bf8:	2000088c 	.word	0x2000088c
 8003bfc:	2000088e 	.word	0x2000088e
 8003c00:	20000894 	.word	0x20000894

08003c04 <MS5607PromRead>:

/* Performs a reading on the devices PROM. */
void MS5607PromRead(struct promData *prom)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint8_t address;
  uint16_t *structPointer;

  /* As the PROM is made of 8 16bit addresses I used a pointer for accessing the data structure */
  structPointer = (uint16_t *)prom;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	613b      	str	r3, [r7, #16]

  for (address = 0; address < 8; address++)
 8003c10:	2300      	movs	r3, #0
 8003c12:	75fb      	strb	r3, [r7, #23]
 8003c14:	e020      	b.n	8003c58 <MS5607PromRead+0x54>
  {
    SPITransmitData = PROM_READ(address);
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	b25b      	sxtb	r3, r3
 8003c1c:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8003c20:	b25b      	sxtb	r3, r3
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	4b1e      	ldr	r3, [pc, #120]	@ (8003ca0 <MS5607PromRead+0x9c>)
 8003c26:	701a      	strb	r2, [r3, #0]
    enableCSB();
 8003c28:	f000 fbca 	bl	80043c0 <enableCSB>
    HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca4 <MS5607PromRead+0xa0>)
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	230a      	movs	r3, #10
 8003c32:	2201      	movs	r2, #1
 8003c34:	491a      	ldr	r1, [pc, #104]	@ (8003ca0 <MS5607PromRead+0x9c>)
 8003c36:	f006 f9f3 	bl	800a020 <HAL_SPI_Transmit>
    /* Receive two bytes at once and stores it directly at the structure */
    HAL_SPI_Receive(hspi, structPointer, 2, 10);
 8003c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca4 <MS5607PromRead+0xa0>)
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	230a      	movs	r3, #10
 8003c40:	2202      	movs	r2, #2
 8003c42:	6939      	ldr	r1, [r7, #16]
 8003c44:	f006 fb62 	bl	800a30c <HAL_SPI_Receive>
    disableCSB();
 8003c48:	f000 fbca 	bl	80043e0 <disableCSB>
    structPointer++;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	3302      	adds	r3, #2
 8003c50:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 8003c52:	7dfb      	ldrb	r3, [r7, #23]
 8003c54:	3301      	adds	r3, #1
 8003c56:	75fb      	strb	r3, [r7, #23]
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	2b07      	cmp	r3, #7
 8003c5c:	d9db      	bls.n	8003c16 <MS5607PromRead+0x12>
  }

  /* Byte swap on 16bit integers*/
  structPointer = (uint16_t *)prom;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 8003c62:	2300      	movs	r3, #0
 8003c64:	75fb      	strb	r3, [r7, #23]
 8003c66:	e012      	b.n	8003c8e <MS5607PromRead+0x8a>
  {
    uint8_t *toSwap = (uint8_t *)structPointer;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	60fb      	str	r3, [r7, #12]
    uint8_t secondByte = toSwap[0];
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	72fb      	strb	r3, [r7, #11]
    toSwap[0] = toSwap[1];
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	785a      	ldrb	r2, [r3, #1]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	701a      	strb	r2, [r3, #0]
    toSwap[1] = secondByte;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	7afa      	ldrb	r2, [r7, #11]
 8003c80:	701a      	strb	r2, [r3, #0]
    structPointer++;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	3302      	adds	r3, #2
 8003c86:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	75fb      	strb	r3, [r7, #23]
 8003c8e:	7dfb      	ldrb	r3, [r7, #23]
 8003c90:	2b07      	cmp	r3, #7
 8003c92:	d9e9      	bls.n	8003c68 <MS5607PromRead+0x64>
  }
}
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	2000088e 	.word	0x2000088e
 8003ca4:	20000884 	.word	0x20000884

08003ca8 <MS5607UncompensatedRead>:

/* Performs a reading on the devices PROM. */
void MS5607UncompensatedRead(struct MS5607UncompensatedValues *uncompValues)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]

  /*Sensor reply data buffer*/
  uint8_t reply[3];

  enableCSB();
 8003cb0:	f000 fb86 	bl	80043c0 <enableCSB>
  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D1_COMMAND | Pressure_OSR;
 8003cb4:	4b54      	ldr	r3, [pc, #336]	@ (8003e08 <MS5607UncompensatedRead+0x160>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	4b53      	ldr	r3, [pc, #332]	@ (8003e0c <MS5607UncompensatedRead+0x164>)
 8003cc0:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003cc2:	4b53      	ldr	r3, [pc, #332]	@ (8003e10 <MS5607UncompensatedRead+0x168>)
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	230a      	movs	r3, #10
 8003cc8:	2201      	movs	r2, #1
 8003cca:	4950      	ldr	r1, [pc, #320]	@ (8003e0c <MS5607UncompensatedRead+0x164>)
 8003ccc:	f006 f9a8 	bl	800a020 <HAL_SPI_Transmit>

  if (Pressure_OSR == 0x00)
 8003cd0:	4b4d      	ldr	r3, [pc, #308]	@ (8003e08 <MS5607UncompensatedRead+0x160>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d103      	bne.n	8003ce0 <MS5607UncompensatedRead+0x38>
    HAL_Delay(1);
 8003cd8:	2001      	movs	r0, #1
 8003cda:	f000 fc49 	bl	8004570 <HAL_Delay>
 8003cde:	e01a      	b.n	8003d16 <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x02)
 8003ce0:	4b49      	ldr	r3, [pc, #292]	@ (8003e08 <MS5607UncompensatedRead+0x160>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d103      	bne.n	8003cf0 <MS5607UncompensatedRead+0x48>
    HAL_Delay(2);
 8003ce8:	2002      	movs	r0, #2
 8003cea:	f000 fc41 	bl	8004570 <HAL_Delay>
 8003cee:	e012      	b.n	8003d16 <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x04)
 8003cf0:	4b45      	ldr	r3, [pc, #276]	@ (8003e08 <MS5607UncompensatedRead+0x160>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d103      	bne.n	8003d00 <MS5607UncompensatedRead+0x58>
    HAL_Delay(3);
 8003cf8:	2003      	movs	r0, #3
 8003cfa:	f000 fc39 	bl	8004570 <HAL_Delay>
 8003cfe:	e00a      	b.n	8003d16 <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x06)
 8003d00:	4b41      	ldr	r3, [pc, #260]	@ (8003e08 <MS5607UncompensatedRead+0x160>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b06      	cmp	r3, #6
 8003d06:	d103      	bne.n	8003d10 <MS5607UncompensatedRead+0x68>
    HAL_Delay(5);
 8003d08:	2005      	movs	r0, #5
 8003d0a:	f000 fc31 	bl	8004570 <HAL_Delay>
 8003d0e:	e002      	b.n	8003d16 <MS5607UncompensatedRead+0x6e>
  else
    HAL_Delay(10);
 8003d10:	200a      	movs	r0, #10
 8003d12:	f000 fc2d 	bl	8004570 <HAL_Delay>

  disableCSB();
 8003d16:	f000 fb63 	bl	80043e0 <disableCSB>

  /* Performs the reading of the 24 bits from the ADC */

  enableCSB();
 8003d1a:	f000 fb51 	bl	80043c0 <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 8003d1e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e0c <MS5607UncompensatedRead+0x164>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003d24:	4b3a      	ldr	r3, [pc, #232]	@ (8003e10 <MS5607UncompensatedRead+0x168>)
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	230a      	movs	r3, #10
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	4937      	ldr	r1, [pc, #220]	@ (8003e0c <MS5607UncompensatedRead+0x164>)
 8003d2e:	f006 f977 	bl	800a020 <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, reply, 3, 10);
 8003d32:	4b37      	ldr	r3, [pc, #220]	@ (8003e10 <MS5607UncompensatedRead+0x168>)
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	f107 010c 	add.w	r1, r7, #12
 8003d3a:	230a      	movs	r3, #10
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	f006 fae5 	bl	800a30c <HAL_SPI_Receive>

  disableCSB();
 8003d42:	f000 fb4d 	bl	80043e0 <disableCSB>

  /* Tranfer the 24bits read into a 32bit int */
  uncompValues->pressure = ((uint32_t)reply[0] << 16) | ((uint32_t)reply[1] << 8) | (uint32_t)reply[2];
 8003d46:	7b3b      	ldrb	r3, [r7, #12]
 8003d48:	041a      	lsls	r2, r3, #16
 8003d4a:	7b7b      	ldrb	r3, [r7, #13]
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	7bba      	ldrb	r2, [r7, #14]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	601a      	str	r2, [r3, #0]

  enableCSB();
 8003d58:	f000 fb32 	bl	80043c0 <enableCSB>

  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D2_COMMAND | Temperature_OSR;
 8003d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8003e14 <MS5607UncompensatedRead+0x16c>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	4b29      	ldr	r3, [pc, #164]	@ (8003e0c <MS5607UncompensatedRead+0x164>)
 8003d68:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003d6a:	4b29      	ldr	r3, [pc, #164]	@ (8003e10 <MS5607UncompensatedRead+0x168>)
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	230a      	movs	r3, #10
 8003d70:	2201      	movs	r2, #1
 8003d72:	4926      	ldr	r1, [pc, #152]	@ (8003e0c <MS5607UncompensatedRead+0x164>)
 8003d74:	f006 f954 	bl	800a020 <HAL_SPI_Transmit>

  if (Temperature_OSR == 0x00)
 8003d78:	4b26      	ldr	r3, [pc, #152]	@ (8003e14 <MS5607UncompensatedRead+0x16c>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d103      	bne.n	8003d88 <MS5607UncompensatedRead+0xe0>
    HAL_Delay(1);
 8003d80:	2001      	movs	r0, #1
 8003d82:	f000 fbf5 	bl	8004570 <HAL_Delay>
 8003d86:	e01a      	b.n	8003dbe <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x02)
 8003d88:	4b22      	ldr	r3, [pc, #136]	@ (8003e14 <MS5607UncompensatedRead+0x16c>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d103      	bne.n	8003d98 <MS5607UncompensatedRead+0xf0>
    HAL_Delay(2);
 8003d90:	2002      	movs	r0, #2
 8003d92:	f000 fbed 	bl	8004570 <HAL_Delay>
 8003d96:	e012      	b.n	8003dbe <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x04)
 8003d98:	4b1e      	ldr	r3, [pc, #120]	@ (8003e14 <MS5607UncompensatedRead+0x16c>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d103      	bne.n	8003da8 <MS5607UncompensatedRead+0x100>
    HAL_Delay(3);
 8003da0:	2003      	movs	r0, #3
 8003da2:	f000 fbe5 	bl	8004570 <HAL_Delay>
 8003da6:	e00a      	b.n	8003dbe <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x06)
 8003da8:	4b1a      	ldr	r3, [pc, #104]	@ (8003e14 <MS5607UncompensatedRead+0x16c>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b06      	cmp	r3, #6
 8003dae:	d103      	bne.n	8003db8 <MS5607UncompensatedRead+0x110>
    HAL_Delay(5);
 8003db0:	2005      	movs	r0, #5
 8003db2:	f000 fbdd 	bl	8004570 <HAL_Delay>
 8003db6:	e002      	b.n	8003dbe <MS5607UncompensatedRead+0x116>
  else
    HAL_Delay(10);
 8003db8:	200a      	movs	r0, #10
 8003dba:	f000 fbd9 	bl	8004570 <HAL_Delay>

  disableCSB();
 8003dbe:	f000 fb0f 	bl	80043e0 <disableCSB>

  enableCSB();
 8003dc2:	f000 fafd 	bl	80043c0 <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 8003dc6:	4b11      	ldr	r3, [pc, #68]	@ (8003e0c <MS5607UncompensatedRead+0x164>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003dcc:	4b10      	ldr	r3, [pc, #64]	@ (8003e10 <MS5607UncompensatedRead+0x168>)
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	230a      	movs	r3, #10
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	490d      	ldr	r1, [pc, #52]	@ (8003e0c <MS5607UncompensatedRead+0x164>)
 8003dd6:	f006 f923 	bl	800a020 <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, reply, 3, 10);
 8003dda:	4b0d      	ldr	r3, [pc, #52]	@ (8003e10 <MS5607UncompensatedRead+0x168>)
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	f107 010c 	add.w	r1, r7, #12
 8003de2:	230a      	movs	r3, #10
 8003de4:	2203      	movs	r2, #3
 8003de6:	f006 fa91 	bl	800a30c <HAL_SPI_Receive>

  disableCSB();
 8003dea:	f000 faf9 	bl	80043e0 <disableCSB>

  /* Assemble the conversion command based on previously set OSR */
  uncompValues->temperature = ((uint32_t)reply[0] << 16) | ((uint32_t)reply[1] << 8) | (uint32_t)reply[2];
 8003dee:	7b3b      	ldrb	r3, [r7, #12]
 8003df0:	041a      	lsls	r2, r3, #16
 8003df2:	7b7b      	ldrb	r3, [r7, #13]
 8003df4:	021b      	lsls	r3, r3, #8
 8003df6:	4313      	orrs	r3, r2
 8003df8:	7bba      	ldrb	r2, [r7, #14]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	605a      	str	r2, [r3, #4]
}
 8003e00:	bf00      	nop
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	2000088f 	.word	0x2000088f
 8003e0c:	2000088e 	.word	0x2000088e
 8003e10:	20000884 	.word	0x20000884
 8003e14:	20000890 	.word	0x20000890

08003e18 <MS5607Convert>:

/* Performs the data conversion according to the MS5607 datasheet */
void MS5607Convert(struct MS5607UncompensatedValues *sample, struct MS5607IntReadings *value)
{
 8003e18:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003e1c:	b0d7      	sub	sp, #348	@ 0x15c
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8003e24:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
  int32_t dT;
  int32_t TEMP;
  int64_t OFF;
  int64_t SENS;

  dT = sample->temperature - ((int32_t)(promData.tref << 8));
 8003e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	4bda      	ldr	r3, [pc, #872]	@ (8004198 <MS5607Convert+0x380>)
 8003e30:	895b      	ldrh	r3, [r3, #10]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

  TEMP = 2000 + (((int64_t)dT * promData.tempsens) >> 23);
 8003e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003e3e:	17da      	asrs	r2, r3, #31
 8003e40:	469a      	mov	sl, r3
 8003e42:	4693      	mov	fp, r2
 8003e44:	4bd4      	ldr	r3, [pc, #848]	@ (8004198 <MS5607Convert+0x380>)
 8003e46:	899b      	ldrh	r3, [r3, #12]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	4698      	mov	r8, r3
 8003e4e:	4691      	mov	r9, r2
 8003e50:	fb08 f20b 	mul.w	r2, r8, fp
 8003e54:	fb0a f309 	mul.w	r3, sl, r9
 8003e58:	4413      	add	r3, r2
 8003e5a:	fbaa 4508 	umull	r4, r5, sl, r8
 8003e5e:	442b      	add	r3, r5
 8003e60:	461d      	mov	r5, r3
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	0de2      	lsrs	r2, r4, #23
 8003e6c:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 8003e70:	15eb      	asrs	r3, r5, #23
 8003e72:	4613      	mov	r3, r2
 8003e74:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003e78:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

  OFF = ((int64_t)promData.off << 17) + (((int64_t)promData.tco * dT) >> 6);
 8003e7c:	4bc6      	ldr	r3, [pc, #792]	@ (8004198 <MS5607Convert+0x380>)
 8003e7e:	889b      	ldrh	r3, [r3, #4]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e88:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e8c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e90:	460b      	mov	r3, r1
 8003e92:	0bdb      	lsrs	r3, r3, #15
 8003e94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003e98:	460b      	mov	r3, r1
 8003e9a:	045b      	lsls	r3, r3, #17
 8003e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ea0:	4bbd      	ldr	r3, [pc, #756]	@ (8004198 <MS5607Convert+0x380>)
 8003ea2:	891b      	ldrh	r3, [r3, #8]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003eac:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8003eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003eb4:	17da      	asrs	r2, r3, #31
 8003eb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003eba:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ebe:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8003ec2:	462b      	mov	r3, r5
 8003ec4:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8003ec8:	4642      	mov	r2, r8
 8003eca:	fb02 f203 	mul.w	r2, r2, r3
 8003ece:	464b      	mov	r3, r9
 8003ed0:	4621      	mov	r1, r4
 8003ed2:	fb01 f303 	mul.w	r3, r1, r3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	4622      	mov	r2, r4
 8003eda:	4641      	mov	r1, r8
 8003edc:	fba2 1201 	umull	r1, r2, r2, r1
 8003ee0:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8003ee4:	460a      	mov	r2, r1
 8003ee6:	f8c7 2108 	str.w	r2, [r7, #264]	@ 0x108
 8003eea:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8003eee:	4413      	add	r3, r2
 8003ef0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8003f00:	4621      	mov	r1, r4
 8003f02:	098a      	lsrs	r2, r1, #6
 8003f04:	4629      	mov	r1, r5
 8003f06:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8003f0a:	4629      	mov	r1, r5
 8003f0c:	118b      	asrs	r3, r1, #6
 8003f0e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8003f12:	4621      	mov	r1, r4
 8003f14:	1889      	adds	r1, r1, r2
 8003f16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f18:	4629      	mov	r1, r5
 8003f1a:	eb43 0101 	adc.w	r1, r3, r1
 8003f1e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8003f20:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8003f24:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
  SENS = ((int64_t)promData.sens << 16) + (((int64_t)promData.tcs * dT) >> 7);
 8003f28:	4b9b      	ldr	r3, [pc, #620]	@ (8004198 <MS5607Convert+0x380>)
 8003f2a:	885b      	ldrh	r3, [r3, #2]
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f38:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	0c1b      	lsrs	r3, r3, #16
 8003f40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f44:	460b      	mov	r3, r1
 8003f46:	041b      	lsls	r3, r3, #16
 8003f48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f4c:	4b92      	ldr	r3, [pc, #584]	@ (8004198 <MS5607Convert+0x380>)
 8003f4e:	88db      	ldrh	r3, [r3, #6]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003f60:	17da      	asrs	r2, r3, #31
 8003f62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f6a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8003f6e:	462b      	mov	r3, r5
 8003f70:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f74:	4642      	mov	r2, r8
 8003f76:	fb02 f203 	mul.w	r2, r2, r3
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	fb01 f303 	mul.w	r3, r1, r3
 8003f82:	4413      	add	r3, r2
 8003f84:	4622      	mov	r2, r4
 8003f86:	4641      	mov	r1, r8
 8003f88:	fba2 1201 	umull	r1, r2, r2, r1
 8003f8c:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8003f90:	460a      	mov	r2, r1
 8003f92:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8003f96:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8003fac:	4621      	mov	r1, r4
 8003fae:	09ca      	lsrs	r2, r1, #7
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8003fb6:	4629      	mov	r1, r5
 8003fb8:	11cb      	asrs	r3, r1, #7
 8003fba:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	1889      	adds	r1, r1, r2
 8003fc2:	6339      	str	r1, [r7, #48]	@ 0x30
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	eb43 0101 	adc.w	r1, r3, r1
 8003fca:	6379      	str	r1, [r7, #52]	@ 0x34
 8003fcc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003fd0:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140

  /**/
  if (TEMP < 2000)
 8003fd4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003fd8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003fdc:	f280 8152 	bge.w	8004284 <MS5607Convert+0x46c>
  {
    int32_t T2 = ((int64_t)dT * (int64_t)dT) >> 31;
 8003fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003fe4:	17da      	asrs	r2, r3, #31
 8003fe6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fea:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003ff2:	17da      	asrs	r2, r3, #31
 8003ff4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ff8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ffc:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8004000:	462b      	mov	r3, r5
 8004002:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8004006:	4642      	mov	r2, r8
 8004008:	fb02 f203 	mul.w	r2, r2, r3
 800400c:	464b      	mov	r3, r9
 800400e:	4621      	mov	r1, r4
 8004010:	fb01 f303 	mul.w	r3, r1, r3
 8004014:	4413      	add	r3, r2
 8004016:	4622      	mov	r2, r4
 8004018:	4641      	mov	r1, r8
 800401a:	fba2 1201 	umull	r1, r2, r2, r1
 800401e:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8004022:	460a      	mov	r2, r1
 8004024:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8004028:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800402c:	4413      	add	r3, r2
 800402e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800403e:	4621      	mov	r1, r4
 8004040:	0fca      	lsrs	r2, r1, #31
 8004042:	4629      	mov	r1, r5
 8004044:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004048:	4629      	mov	r1, r5
 800404a:	17cb      	asrs	r3, r1, #31
 800404c:	4613      	mov	r3, r2
 800404e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    int32_t TEMPM = TEMP - 2000;
 8004052:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004056:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800405a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    int64_t OFF2 = (61 * (int64_t)TEMPM * (int64_t)TEMPM) >> 4;
 800405e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004062:	17da      	asrs	r2, r3, #31
 8004064:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004068:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800406c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004070:	17da      	asrs	r2, r3, #31
 8004072:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004076:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800407a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800407e:	462b      	mov	r3, r5
 8004080:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8004084:	4642      	mov	r2, r8
 8004086:	fb02 f203 	mul.w	r2, r2, r3
 800408a:	464b      	mov	r3, r9
 800408c:	4621      	mov	r1, r4
 800408e:	fb01 f303 	mul.w	r3, r1, r3
 8004092:	4413      	add	r3, r2
 8004094:	4622      	mov	r2, r4
 8004096:	4641      	mov	r1, r8
 8004098:	fba2 1201 	umull	r1, r2, r2, r1
 800409c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80040a0:	460a      	mov	r2, r1
 80040a2:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80040a6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80040aa:	4413      	add	r3, r2
 80040ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80040b0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80040b4:	4622      	mov	r2, r4
 80040b6:	462b      	mov	r3, r5
 80040b8:	f04f 0000 	mov.w	r0, #0
 80040bc:	f04f 0100 	mov.w	r1, #0
 80040c0:	0119      	lsls	r1, r3, #4
 80040c2:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80040c6:	0110      	lsls	r0, r2, #4
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4621      	mov	r1, r4
 80040ce:	1a51      	subs	r1, r2, r1
 80040d0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80040d2:	4629      	mov	r1, r5
 80040d4:	eb63 0301 	sbc.w	r3, r3, r1
 80040d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80040e6:	4649      	mov	r1, r9
 80040e8:	008b      	lsls	r3, r1, #2
 80040ea:	4641      	mov	r1, r8
 80040ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040f0:	4641      	mov	r1, r8
 80040f2:	008a      	lsls	r2, r1, #2
 80040f4:	4610      	mov	r0, r2
 80040f6:	4619      	mov	r1, r3
 80040f8:	4603      	mov	r3, r0
 80040fa:	4622      	mov	r2, r4
 80040fc:	189b      	adds	r3, r3, r2
 80040fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004100:	462b      	mov	r3, r5
 8004102:	460a      	mov	r2, r1
 8004104:	eb42 0303 	adc.w	r3, r2, r3
 8004108:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800410a:	f04f 0200 	mov.w	r2, #0
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004116:	4621      	mov	r1, r4
 8004118:	090a      	lsrs	r2, r1, #4
 800411a:	4629      	mov	r1, r5
 800411c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8004120:	4629      	mov	r1, r5
 8004122:	110b      	asrs	r3, r1, #4
 8004124:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    int64_t SENS2 = 2 * (int64_t)TEMPM * (int64_t)TEMPM;
 8004128:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800412c:	17da      	asrs	r2, r3, #31
 800412e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004130:	677a      	str	r2, [r7, #116]	@ 0x74
 8004132:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004136:	17da      	asrs	r2, r3, #31
 8004138:	66bb      	str	r3, [r7, #104]	@ 0x68
 800413a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800413c:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8004140:	462b      	mov	r3, r5
 8004142:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8004146:	4642      	mov	r2, r8
 8004148:	fb02 f203 	mul.w	r2, r2, r3
 800414c:	464b      	mov	r3, r9
 800414e:	4621      	mov	r1, r4
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	4413      	add	r3, r2
 8004156:	4622      	mov	r2, r4
 8004158:	4641      	mov	r1, r8
 800415a:	fba2 1201 	umull	r1, r2, r2, r1
 800415e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004162:	460a      	mov	r2, r1
 8004164:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8004168:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800416c:	4413      	add	r3, r2
 800416e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004172:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004176:	460b      	mov	r3, r1
 8004178:	18db      	adds	r3, r3, r3
 800417a:	623b      	str	r3, [r7, #32]
 800417c:	4613      	mov	r3, r2
 800417e:	eb42 0303 	adc.w	r3, r2, r3
 8004182:	627b      	str	r3, [r7, #36]	@ 0x24
 8004184:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004188:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    if (TEMP < -1500)
 800418c:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8004190:	4b02      	ldr	r3, [pc, #8]	@ (800419c <MS5607Convert+0x384>)
 8004192:	429a      	cmp	r2, r3
 8004194:	da55      	bge.n	8004242 <MS5607Convert+0x42a>
 8004196:	e003      	b.n	80041a0 <MS5607Convert+0x388>
 8004198:	20000894 	.word	0x20000894
 800419c:	fffffa24 	.word	0xfffffa24
    {
      int32_t TEMPP = TEMP + 1500;
 80041a0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80041a4:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80041a8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      int32_t TEMPP2 = TEMPP * TEMPP;
 80041ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80041b0:	fb03 f303 	mul.w	r3, r3, r3
 80041b4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
      OFF2 = OFF2 + (int64_t)15 * TEMPP2;
 80041b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041bc:	17da      	asrs	r2, r3, #31
 80041be:	663b      	str	r3, [r7, #96]	@ 0x60
 80041c0:	667a      	str	r2, [r7, #100]	@ 0x64
 80041c2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80041c6:	4622      	mov	r2, r4
 80041c8:	462b      	mov	r3, r5
 80041ca:	f04f 0000 	mov.w	r0, #0
 80041ce:	f04f 0100 	mov.w	r1, #0
 80041d2:	0119      	lsls	r1, r3, #4
 80041d4:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80041d8:	0110      	lsls	r0, r2, #4
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4621      	mov	r1, r4
 80041e0:	1a51      	subs	r1, r2, r1
 80041e2:	65b9      	str	r1, [r7, #88]	@ 0x58
 80041e4:	4629      	mov	r1, r5
 80041e6:	eb63 0301 	sbc.w	r3, r3, r1
 80041ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041ec:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80041f0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80041f4:	4621      	mov	r1, r4
 80041f6:	1851      	adds	r1, r2, r1
 80041f8:	61b9      	str	r1, [r7, #24]
 80041fa:	4629      	mov	r1, r5
 80041fc:	eb43 0101 	adc.w	r1, r3, r1
 8004200:	61f9      	str	r1, [r7, #28]
 8004202:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004206:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
      SENS2 = SENS2 + (int64_t)8 * TEMPP2;
 800420a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800420e:	17da      	asrs	r2, r3, #31
 8004210:	653b      	str	r3, [r7, #80]	@ 0x50
 8004212:	657a      	str	r2, [r7, #84]	@ 0x54
 8004214:	f04f 0000 	mov.w	r0, #0
 8004218:	f04f 0100 	mov.w	r1, #0
 800421c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8004220:	462b      	mov	r3, r5
 8004222:	00d9      	lsls	r1, r3, #3
 8004224:	4623      	mov	r3, r4
 8004226:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800422a:	4623      	mov	r3, r4
 800422c:	00d8      	lsls	r0, r3, #3
 800422e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8004232:	1814      	adds	r4, r2, r0
 8004234:	613c      	str	r4, [r7, #16]
 8004236:	414b      	adcs	r3, r1
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800423e:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    }
    TEMP -= T2;
 8004242:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8004246:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    OFF -= OFF2;
 8004250:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8004254:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8004258:	1a84      	subs	r4, r0, r2
 800425a:	60bc      	str	r4, [r7, #8]
 800425c:	eb61 0303 	sbc.w	r3, r1, r3
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004266:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
    SENS -= SENS2;
 800426a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 800426e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8004272:	1a84      	subs	r4, r0, r2
 8004274:	603c      	str	r4, [r7, #0]
 8004276:	eb61 0303 	sbc.w	r3, r1, r3
 800427a:	607b      	str	r3, [r7, #4]
 800427c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004280:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
  }

  value->pressure = ((((int64_t)sample->pressure * SENS) >> 21) - OFF) >> 15;
 8004284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2200      	movs	r2, #0
 800428c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800428e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004290:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004294:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004298:	462a      	mov	r2, r5
 800429a:	fb02 f203 	mul.w	r2, r2, r3
 800429e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80042a2:	4621      	mov	r1, r4
 80042a4:	fb01 f303 	mul.w	r3, r1, r3
 80042a8:	4413      	add	r3, r2
 80042aa:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80042ae:	4621      	mov	r1, r4
 80042b0:	fba2 1201 	umull	r1, r2, r2, r1
 80042b4:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80042b8:	460a      	mov	r2, r1
 80042ba:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80042be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80042c2:	4413      	add	r3, r2
 80042c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80042d4:	4621      	mov	r1, r4
 80042d6:	0d4a      	lsrs	r2, r1, #21
 80042d8:	4629      	mov	r1, r5
 80042da:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 80042de:	4629      	mov	r1, r5
 80042e0:	154b      	asrs	r3, r1, #21
 80042e2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80042e6:	1a14      	subs	r4, r2, r0
 80042e8:	643c      	str	r4, [r7, #64]	@ 0x40
 80042ea:	eb63 0301 	sbc.w	r3, r3, r1
 80042ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80042fc:	4621      	mov	r1, r4
 80042fe:	0bca      	lsrs	r2, r1, #15
 8004300:	4629      	mov	r1, r5
 8004302:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8004306:	4629      	mov	r1, r5
 8004308:	13cb      	asrs	r3, r1, #15
 800430a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800430e:	601a      	str	r2, [r3, #0]
  value->temperature = TEMP;
 8004310:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004314:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8004318:	605a      	str	r2, [r3, #4]
}
 800431a:	bf00      	nop
 800431c:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 8004320:	46bd      	mov	sp, r7
 8004322:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004326:	4770      	bx	lr

08004328 <MS5607Update>:

/* Performs the sensor reading updating the data structures */
void MS5607Update(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  MS5607UncompensatedRead(&uncompValues);
 800432c:	4804      	ldr	r0, [pc, #16]	@ (8004340 <MS5607Update+0x18>)
 800432e:	f7ff fcbb 	bl	8003ca8 <MS5607UncompensatedRead>
  MS5607Convert(&uncompValues, &readings);
 8004332:	4904      	ldr	r1, [pc, #16]	@ (8004344 <MS5607Update+0x1c>)
 8004334:	4802      	ldr	r0, [pc, #8]	@ (8004340 <MS5607Update+0x18>)
 8004336:	f7ff fd6f 	bl	8003e18 <MS5607Convert>
}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	200008a4 	.word	0x200008a4
 8004344:	200008ac 	.word	0x200008ac

08004348 <MS5607ReadValues>:

MS5607Readings MS5607ReadValues(void)
{
 8004348:	b5b0      	push	{r4, r5, r7, lr}
 800434a:	b08c      	sub	sp, #48	@ 0x30
 800434c:	af00      	add	r7, sp, #0
  MS5607Update();
 800434e:	f7ff ffeb 	bl	8004328 <MS5607Update>
  return (MS5607Readings){.pressure_kPa = readings.pressure / 1000.0, .temperature_C = readings.temperature / 100.0};
 8004352:	4b18      	ldr	r3, [pc, #96]	@ (80043b4 <MS5607ReadValues+0x6c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f7fc f90c 	bl	8000574 <__aeabi_i2d>
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	4b15      	ldr	r3, [pc, #84]	@ (80043b8 <MS5607ReadValues+0x70>)
 8004362:	f7fc fa9b 	bl	800089c <__aeabi_ddiv>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	4614      	mov	r4, r2
 800436c:	461d      	mov	r5, r3
 800436e:	4b11      	ldr	r3, [pc, #68]	@ (80043b4 <MS5607ReadValues+0x6c>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4618      	mov	r0, r3
 8004374:	f7fc f8fe 	bl	8000574 <__aeabi_i2d>
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	4b0f      	ldr	r3, [pc, #60]	@ (80043bc <MS5607ReadValues+0x74>)
 800437e:	f7fc fa8d 	bl	800089c <__aeabi_ddiv>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	e9c7 4508 	strd	r4, r5, [r7, #32]
 800438a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800438e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004392:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004396:	ec41 0b16 	vmov	d6, r0, r1
 800439a:	ec43 2b17 	vmov	d7, r2, r3
}
 800439e:	eeb0 0a46 	vmov.f32	s0, s12
 80043a2:	eef0 0a66 	vmov.f32	s1, s13
 80043a6:	eeb0 1a47 	vmov.f32	s2, s14
 80043aa:	eef0 1a67 	vmov.f32	s3, s15
 80043ae:	3730      	adds	r7, #48	@ 0x30
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bdb0      	pop	{r4, r5, r7, pc}
 80043b4:	200008ac 	.word	0x200008ac
 80043b8:	408f4000 	.word	0x408f4000
 80043bc:	40590000 	.word	0x40590000

080043c0 <enableCSB>:
  return readings.pressure / 1000.0;
}

/* Sets the CS pin */
void enableCSB(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_RESET);
 80043c4:	4b04      	ldr	r3, [pc, #16]	@ (80043d8 <enableCSB+0x18>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a04      	ldr	r2, [pc, #16]	@ (80043dc <enableCSB+0x1c>)
 80043ca:	8811      	ldrh	r1, [r2, #0]
 80043cc:	2200      	movs	r2, #0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 ffa4 	bl	800631c <HAL_GPIO_WritePin>
}
 80043d4:	bf00      	nop
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20000888 	.word	0x20000888
 80043dc:	2000088c 	.word	0x2000088c

080043e0 <disableCSB>:

/* Sets the CS pin */
void disableCSB(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_SET);
 80043e4:	4b04      	ldr	r3, [pc, #16]	@ (80043f8 <disableCSB+0x18>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a04      	ldr	r2, [pc, #16]	@ (80043fc <disableCSB+0x1c>)
 80043ea:	8811      	ldrh	r1, [r2, #0]
 80043ec:	2201      	movs	r2, #1
 80043ee:	4618      	mov	r0, r3
 80043f0:	f001 ff94 	bl	800631c <HAL_GPIO_WritePin>
}
 80043f4:	bf00      	nop
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20000888 	.word	0x20000888
 80043fc:	2000088c 	.word	0x2000088c

08004400 <calculateAltitude>:
float const alt_offset_height = 20.00;
float const accel_tolerance = 0.1;

float calibrated_altitude = 0.00;

float calculateAltitude(double pressure, int calibrating) {
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0
 8004406:	ed87 0b02 	vstr	d0, [r7, #8]
 800440a:	6078      	str	r0, [r7, #4]
	double pressure_mb = 33.8639 * (0.2953 * pressure);
 800440c:	a337      	add	r3, pc, #220	@ (adr r3, 80044ec <calculateAltitude+0xec>)
 800440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004412:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004416:	f7fc f917 	bl	8000648 <__aeabi_dmul>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4610      	mov	r0, r2
 8004420:	4619      	mov	r1, r3
 8004422:	a334      	add	r3, pc, #208	@ (adr r3, 80044f4 <calculateAltitude+0xf4>)
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	f7fc f90e 	bl	8000648 <__aeabi_dmul>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	e9c7 2306 	strd	r2, r3, [r7, #24]
	float h_meter = 0.3048 * (1 - pow((pressure_mb / 1013.25), 0.190284)) * 145366.54;
 8004434:	a331      	add	r3, pc, #196	@ (adr r3, 80044fc <calculateAltitude+0xfc>)
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800443e:	f7fc fa2d 	bl	800089c <__aeabi_ddiv>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	ec43 2b17 	vmov	d7, r2, r3
 800444a:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 80044c8 <calculateAltitude+0xc8>
 800444e:	eeb0 0a47 	vmov.f32	s0, s14
 8004452:	eef0 0a67 	vmov.f32	s1, s15
 8004456:	f011 fabf 	bl	80159d8 <pow>
 800445a:	ec53 2b10 	vmov	r2, r3, d0
 800445e:	f04f 0000 	mov.w	r0, #0
 8004462:	491f      	ldr	r1, [pc, #124]	@ (80044e0 <calculateAltitude+0xe0>)
 8004464:	f7fb ff38 	bl	80002d8 <__aeabi_dsub>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4610      	mov	r0, r2
 800446e:	4619      	mov	r1, r3
 8004470:	a317      	add	r3, pc, #92	@ (adr r3, 80044d0 <calculateAltitude+0xd0>)
 8004472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004476:	f7fc f8e7 	bl	8000648 <__aeabi_dmul>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4610      	mov	r0, r2
 8004480:	4619      	mov	r1, r3
 8004482:	a315      	add	r3, pc, #84	@ (adr r3, 80044d8 <calculateAltitude+0xd8>)
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f7fc f8de 	bl	8000648 <__aeabi_dmul>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4610      	mov	r0, r2
 8004492:	4619      	mov	r1, r3
 8004494:	f7fc fbb0 	bl	8000bf8 <__aeabi_d2f>
 8004498:	4603      	mov	r3, r0
 800449a:	617b      	str	r3, [r7, #20]
	if (calibrating == 1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d105      	bne.n	80044ae <calculateAltitude+0xae>
	{
		// Absolute Altitude of the ground station
	    calibrated_altitude = h_meter;
 80044a2:	4a10      	ldr	r2, [pc, #64]	@ (80044e4 <calculateAltitude+0xe4>)
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	6013      	str	r3, [r2, #0]
	    // Relative Altitude of GCS
	    return 0;
 80044a8:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80044e8 <calculateAltitude+0xe8>
 80044ac:	e006      	b.n	80044bc <calculateAltitude+0xbc>
	}
	else
	{
	      // Relative Altitude of CanSat
	   return h_meter - calibrated_altitude;
 80044ae:	4b0d      	ldr	r3, [pc, #52]	@ (80044e4 <calculateAltitude+0xe4>)
 80044b0:	edd3 7a00 	vldr	s15, [r3]
 80044b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80044b8:	ee77 7a67 	vsub.f32	s15, s14, s15
	}
	//return 100.0;
}
 80044bc:	eeb0 0a67 	vmov.f32	s0, s15
 80044c0:	3720      	adds	r7, #32
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	e279dd3c 	.word	0xe279dd3c
 80044cc:	3fc85b39 	.word	0x3fc85b39
 80044d0:	dbf487fd 	.word	0xdbf487fd
 80044d4:	3fd381d7 	.word	0x3fd381d7
 80044d8:	51eb851f 	.word	0x51eb851f
 80044dc:	4101beb4 	.word	0x4101beb4
 80044e0:	3ff00000 	.word	0x3ff00000
 80044e4:	200008b4 	.word	0x200008b4
 80044e8:	00000000 	.word	0x00000000
 80044ec:	f8a0902e 	.word	0xf8a0902e
 80044f0:	3fd2e631 	.word	0x3fd2e631
 80044f4:	467381d8 	.word	0x467381d8
 80044f8:	4040ee94 	.word	0x4040ee94
 80044fc:	00000000 	.word	0x00000000
 8004500:	408faa00 	.word	0x408faa00

08004504 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800450e:	2003      	movs	r0, #3
 8004510:	f001 fa11 	bl	8005936 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004514:	200f      	movs	r0, #15
 8004516:	f7fe fc53 	bl	8002dc0 <HAL_InitTick>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	71fb      	strb	r3, [r7, #7]
 8004524:	e001      	b.n	800452a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004526:	f7fd ffed 	bl	8002504 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800452a:	79fb      	ldrb	r3, [r7, #7]

}
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004538:	4b05      	ldr	r3, [pc, #20]	@ (8004550 <HAL_IncTick+0x1c>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4b05      	ldr	r3, [pc, #20]	@ (8004554 <HAL_IncTick+0x20>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4413      	add	r3, r2
 8004542:	4a03      	ldr	r2, [pc, #12]	@ (8004550 <HAL_IncTick+0x1c>)
 8004544:	6013      	str	r3, [r2, #0]
}
 8004546:	bf00      	nop
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	200008b8 	.word	0x200008b8
 8004554:	2000000c 	.word	0x2000000c

08004558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  return uwTick;
 800455c:	4b03      	ldr	r3, [pc, #12]	@ (800456c <HAL_GetTick+0x14>)
 800455e:	681b      	ldr	r3, [r3, #0]
}
 8004560:	4618      	mov	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	200008b8 	.word	0x200008b8

08004570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004578:	f7ff ffee 	bl	8004558 <HAL_GetTick>
 800457c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004588:	d004      	beq.n	8004594 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800458a:	4b09      	ldr	r3, [pc, #36]	@ (80045b0 <HAL_Delay+0x40>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4413      	add	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004594:	bf00      	nop
 8004596:	f7ff ffdf 	bl	8004558 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d8f7      	bhi.n	8004596 <HAL_Delay+0x26>
  {
  }
}
 80045a6:	bf00      	nop
 80045a8:	bf00      	nop
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	2000000c 	.word	0x2000000c

080045b4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80045bc:	4b06      	ldr	r3, [pc, #24]	@ (80045d8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f023 0202 	bic.w	r2, r3, #2
 80045c4:	4904      	ldr	r1, [pc, #16]	@ (80045d8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	600b      	str	r3, [r1, #0]
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	40010030 	.word	0x40010030

080045dc <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80045e0:	4b05      	ldr	r3, [pc, #20]	@ (80045f8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a04      	ldr	r2, [pc, #16]	@ (80045f8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80045e6:	f023 0301 	bic.w	r3, r3, #1
 80045ea:	6013      	str	r3, [r2, #0]
}
 80045ec:	bf00      	nop
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40010030 	.word	0x40010030

080045fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	609a      	str	r2, [r3, #8]
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	609a      	str	r2, [r3, #8]
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004658:	4618      	mov	r0, r3
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	3360      	adds	r3, #96	@ 0x60
 8004676:	461a      	mov	r2, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	4b08      	ldr	r3, [pc, #32]	@ (80046a8 <LL_ADC_SetOffset+0x44>)
 8004686:	4013      	ands	r3, r2
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	4313      	orrs	r3, r2
 8004694:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800469c:	bf00      	nop
 800469e:	371c      	adds	r7, #28
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	03fff000 	.word	0x03fff000

080046ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3360      	adds	r3, #96	@ 0x60
 80046ba:	461a      	mov	r2, r3
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3360      	adds	r3, #96	@ 0x60
 80046e8:	461a      	mov	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	431a      	orrs	r2, r3
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004702:	bf00      	nop
 8004704:	371c      	adds	r7, #28
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800470e:	b480      	push	{r7}
 8004710:	b087      	sub	sp, #28
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3360      	adds	r3, #96	@ 0x60
 800471e:	461a      	mov	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	431a      	orrs	r2, r3
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004738:	bf00      	nop
 800473a:	371c      	adds	r7, #28
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3360      	adds	r3, #96	@ 0x60
 8004754:	461a      	mov	r2, r3
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	431a      	orrs	r2, r3
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	615a      	str	r2, [r3, #20]
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3330      	adds	r3, #48	@ 0x30
 80047b0:	461a      	mov	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	0a1b      	lsrs	r3, r3, #8
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	f003 030c 	and.w	r3, r3, #12
 80047bc:	4413      	add	r3, r2
 80047be:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f003 031f 	and.w	r3, r3, #31
 80047ca:	211f      	movs	r1, #31
 80047cc:	fa01 f303 	lsl.w	r3, r1, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	401a      	ands	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	0e9b      	lsrs	r3, r3, #26
 80047d8:	f003 011f 	and.w	r1, r3, #31
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f003 031f 	and.w	r3, r3, #31
 80047e2:	fa01 f303 	lsl.w	r3, r1, r3
 80047e6:	431a      	orrs	r2, r3
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80047ec:	bf00      	nop
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3314      	adds	r3, #20
 8004808:	461a      	mov	r2, r3
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	0e5b      	lsrs	r3, r3, #25
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	4413      	add	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	0d1b      	lsrs	r3, r3, #20
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	2107      	movs	r1, #7
 8004826:	fa01 f303 	lsl.w	r3, r1, r3
 800482a:	43db      	mvns	r3, r3
 800482c:	401a      	ands	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	0d1b      	lsrs	r3, r3, #20
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	fa01 f303 	lsl.w	r3, r1, r3
 800483c:	431a      	orrs	r2, r3
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004842:	bf00      	nop
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004868:	43db      	mvns	r3, r3
 800486a:	401a      	ands	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f003 0318 	and.w	r3, r3, #24
 8004872:	4908      	ldr	r1, [pc, #32]	@ (8004894 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004874:	40d9      	lsrs	r1, r3
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	400b      	ands	r3, r1
 800487a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800487e:	431a      	orrs	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004886:	bf00      	nop
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	0007ffff 	.word	0x0007ffff

08004898 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80048a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6093      	str	r3, [r2, #8]
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048d0:	d101      	bne.n	80048d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80048f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80048f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800491c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004920:	d101      	bne.n	8004926 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <LL_ADC_IsEnabled+0x18>
 8004948:	2301      	movs	r3, #1
 800494a:	e000      	b.n	800494e <LL_ADC_IsEnabled+0x1a>
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b04      	cmp	r3, #4
 800496c:	d101      	bne.n	8004972 <LL_ADC_REG_IsConversionOngoing+0x18>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0308 	and.w	r3, r3, #8
 8004990:	2b08      	cmp	r3, #8
 8004992:	d101      	bne.n	8004998 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
	...

080049a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80049a8:	b590      	push	{r4, r7, lr}
 80049aa:	b089      	sub	sp, #36	@ 0x24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80049b4:	2300      	movs	r3, #0
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e19b      	b.n	8004cfa <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d109      	bne.n	80049e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7fd fdcf 	bl	8002574 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff ff67 	bl	80048bc <LL_ADC_IsDeepPowerDownEnabled>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d004      	beq.n	80049fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff ff4d 	bl	8004898 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff ff82 	bl	800490c <LL_ADC_IsInternalRegulatorEnabled>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d115      	bne.n	8004a3a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff ff66 	bl	80048e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a18:	4b97      	ldr	r3, [pc, #604]	@ (8004c78 <HAL_ADC_Init+0x2d0>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	099b      	lsrs	r3, r3, #6
 8004a1e:	4a97      	ldr	r2, [pc, #604]	@ (8004c7c <HAL_ADC_Init+0x2d4>)
 8004a20:	fba2 2303 	umull	r2, r3, r2, r3
 8004a24:	099b      	lsrs	r3, r3, #6
 8004a26:	3301      	adds	r3, #1
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004a2c:	e002      	b.n	8004a34 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3b01      	subs	r3, #1
 8004a32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f9      	bne.n	8004a2e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff ff64 	bl	800490c <LL_ADC_IsInternalRegulatorEnabled>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10d      	bne.n	8004a66 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4e:	f043 0210 	orr.w	r2, r3, #16
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a5a:	f043 0201 	orr.w	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff ff75 	bl	800495a <LL_ADC_REG_IsConversionOngoing>
 8004a70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a76:	f003 0310 	and.w	r3, r3, #16
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f040 8134 	bne.w	8004ce8 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f040 8130 	bne.w	8004ce8 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a8c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004a90:	f043 0202 	orr.w	r2, r3, #2
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff ff49 	bl	8004934 <LL_ADC_IsEnabled>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d137      	bne.n	8004b18 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ab0:	d004      	beq.n	8004abc <HAL_ADC_Init+0x114>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a72      	ldr	r2, [pc, #456]	@ (8004c80 <HAL_ADC_Init+0x2d8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d10f      	bne.n	8004adc <HAL_ADC_Init+0x134>
 8004abc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004ac0:	f7ff ff38 	bl	8004934 <LL_ADC_IsEnabled>
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	486e      	ldr	r0, [pc, #440]	@ (8004c80 <HAL_ADC_Init+0x2d8>)
 8004ac8:	f7ff ff34 	bl	8004934 <LL_ADC_IsEnabled>
 8004acc:	4603      	mov	r3, r0
 8004ace:	4323      	orrs	r3, r4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	bf0c      	ite	eq
 8004ad4:	2301      	moveq	r3, #1
 8004ad6:	2300      	movne	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	e008      	b.n	8004aee <HAL_ADC_Init+0x146>
 8004adc:	4869      	ldr	r0, [pc, #420]	@ (8004c84 <HAL_ADC_Init+0x2dc>)
 8004ade:	f7ff ff29 	bl	8004934 <LL_ADC_IsEnabled>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf0c      	ite	eq
 8004ae8:	2301      	moveq	r3, #1
 8004aea:	2300      	movne	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d012      	beq.n	8004b18 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004afa:	d004      	beq.n	8004b06 <HAL_ADC_Init+0x15e>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a5f      	ldr	r2, [pc, #380]	@ (8004c80 <HAL_ADC_Init+0x2d8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d101      	bne.n	8004b0a <HAL_ADC_Init+0x162>
 8004b06:	4a60      	ldr	r2, [pc, #384]	@ (8004c88 <HAL_ADC_Init+0x2e0>)
 8004b08:	e000      	b.n	8004b0c <HAL_ADC_Init+0x164>
 8004b0a:	4a60      	ldr	r2, [pc, #384]	@ (8004c8c <HAL_ADC_Init+0x2e4>)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	4619      	mov	r1, r3
 8004b12:	4610      	mov	r0, r2
 8004b14:	f7ff fd72 	bl	80045fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	7f5b      	ldrb	r3, [r3, #29]
 8004b1c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b22:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004b28:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004b2e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b36:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d106      	bne.n	8004b54 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	045b      	lsls	r3, r3, #17
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d009      	beq.n	8004b70 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b60:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b68:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	4b46      	ldr	r3, [pc, #280]	@ (8004c90 <HAL_ADC_Init+0x2e8>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	69b9      	ldr	r1, [r7, #24]
 8004b80:	430b      	orrs	r3, r1
 8004b82:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff feee 	bl	8004980 <LL_ADC_INJ_IsConversionOngoing>
 8004ba4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d17b      	bne.n	8004ca4 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d178      	bne.n	8004ca4 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004bb6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004bbe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bce:	f023 0302 	bic.w	r3, r3, #2
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6812      	ldr	r2, [r2, #0]
 8004bd6:	69b9      	ldr	r1, [r7, #24]
 8004bd8:	430b      	orrs	r3, r1
 8004bda:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d017      	beq.n	8004c14 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691a      	ldr	r2, [r3, #16]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004bf2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004bfc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004c00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6911      	ldr	r1, [r2, #16]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004c12:	e013      	b.n	8004c3c <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	691a      	ldr	r2, [r3, #16]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004c22:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6812      	ldr	r2, [r2, #0]
 8004c30:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004c34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c38:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d126      	bne.n	8004c94 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004c50:	f023 0304 	bic.w	r3, r3, #4
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004c5c:	4311      	orrs	r1, r2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004c62:	4311      	orrs	r1, r2
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f042 0201 	orr.w	r2, r2, #1
 8004c74:	611a      	str	r2, [r3, #16]
 8004c76:	e015      	b.n	8004ca4 <HAL_ADC_Init+0x2fc>
 8004c78:	20000004 	.word	0x20000004
 8004c7c:	053e2d63 	.word	0x053e2d63
 8004c80:	50000100 	.word	0x50000100
 8004c84:	50000400 	.word	0x50000400
 8004c88:	50000300 	.word	0x50000300
 8004c8c:	50000700 	.word	0x50000700
 8004c90:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691a      	ldr	r2, [r3, #16]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0201 	bic.w	r2, r2, #1
 8004ca2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d10c      	bne.n	8004cc6 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb2:	f023 010f 	bic.w	r1, r3, #15
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	1e5a      	subs	r2, r3, #1
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004cc4:	e007      	b.n	8004cd6 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 020f 	bic.w	r2, r2, #15
 8004cd4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cda:	f023 0303 	bic.w	r3, r3, #3
 8004cde:	f043 0201 	orr.w	r2, r3, #1
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ce6:	e007      	b.n	8004cf8 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cec:	f043 0210 	orr.w	r2, r3, #16
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004cf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3724      	adds	r7, #36	@ 0x24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd90      	pop	{r4, r7, pc}
 8004d02:	bf00      	nop

08004d04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b0b6      	sub	sp, #216	@ 0xd8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d102      	bne.n	8004d28 <HAL_ADC_ConfigChannel+0x24>
 8004d22:	2302      	movs	r3, #2
 8004d24:	f000 bc04 	b.w	8005530 <HAL_ADC_ConfigChannel+0x82c>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff fe10 	bl	800495a <LL_ADC_REG_IsConversionOngoing>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f040 83e8 	bne.w	8005512 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6818      	ldr	r0, [r3, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	6859      	ldr	r1, [r3, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f7ff fd26 	bl	80047a0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff fdfe 	bl	800495a <LL_ADC_REG_IsConversionOngoing>
 8004d5e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fe0a 	bl	8004980 <LL_ADC_INJ_IsConversionOngoing>
 8004d6c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f040 81d9 	bne.w	800512c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f040 81d4 	bne.w	800512c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d8c:	d10f      	bne.n	8004dae <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2200      	movs	r2, #0
 8004d98:	4619      	mov	r1, r3
 8004d9a:	f7ff fd2d 	bl	80047f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff fce7 	bl	800477a <LL_ADC_SetSamplingTimeCommonConfig>
 8004dac:	e00e      	b.n	8004dcc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6818      	ldr	r0, [r3, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	6819      	ldr	r1, [r3, #0]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f7ff fd1c 	bl	80047f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff fcd7 	bl	800477a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	695a      	ldr	r2, [r3, #20]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	08db      	lsrs	r3, r3, #3
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d022      	beq.n	8004e34 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	6919      	ldr	r1, [r3, #16]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004dfe:	f7ff fc31 	bl	8004664 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6919      	ldr	r1, [r3, #16]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f7ff fc7d 	bl	800470e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d102      	bne.n	8004e2a <HAL_ADC_ConfigChannel+0x126>
 8004e24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e28:	e000      	b.n	8004e2c <HAL_ADC_ConfigChannel+0x128>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	f7ff fc89 	bl	8004744 <LL_ADC_SetOffsetSaturation>
 8004e32:	e17b      	b.n	800512c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2100      	movs	r1, #0
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff fc36 	bl	80046ac <LL_ADC_GetOffsetChannel>
 8004e40:	4603      	mov	r3, r0
 8004e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10a      	bne.n	8004e60 <HAL_ADC_ConfigChannel+0x15c>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2100      	movs	r1, #0
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7ff fc2b 	bl	80046ac <LL_ADC_GetOffsetChannel>
 8004e56:	4603      	mov	r3, r0
 8004e58:	0e9b      	lsrs	r3, r3, #26
 8004e5a:	f003 021f 	and.w	r2, r3, #31
 8004e5e:	e01e      	b.n	8004e9e <HAL_ADC_ConfigChannel+0x19a>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2100      	movs	r1, #0
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff fc20 	bl	80046ac <LL_ADC_GetOffsetChannel>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004e76:	fa93 f3a3 	rbit	r3, r3
 8004e7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004e82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004e86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004e8e:	2320      	movs	r3, #32
 8004e90:	e004      	b.n	8004e9c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004e92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e96:	fab3 f383 	clz	r3, r3
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d105      	bne.n	8004eb6 <HAL_ADC_ConfigChannel+0x1b2>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	0e9b      	lsrs	r3, r3, #26
 8004eb0:	f003 031f 	and.w	r3, r3, #31
 8004eb4:	e018      	b.n	8004ee8 <HAL_ADC_ConfigChannel+0x1e4>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ebe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004ec2:	fa93 f3a3 	rbit	r3, r3
 8004ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ece:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004ed2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004eda:	2320      	movs	r3, #32
 8004edc:	e004      	b.n	8004ee8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004ede:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004ee2:	fab3 f383 	clz	r3, r3
 8004ee6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d106      	bne.n	8004efa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff fbef 	bl	80046d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2101      	movs	r1, #1
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff fbd3 	bl	80046ac <LL_ADC_GetOffsetChannel>
 8004f06:	4603      	mov	r3, r0
 8004f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10a      	bne.n	8004f26 <HAL_ADC_ConfigChannel+0x222>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2101      	movs	r1, #1
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff fbc8 	bl	80046ac <LL_ADC_GetOffsetChannel>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	0e9b      	lsrs	r3, r3, #26
 8004f20:	f003 021f 	and.w	r2, r3, #31
 8004f24:	e01e      	b.n	8004f64 <HAL_ADC_ConfigChannel+0x260>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff fbbd 	bl	80046ac <LL_ADC_GetOffsetChannel>
 8004f32:	4603      	mov	r3, r0
 8004f34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f3c:	fa93 f3a3 	rbit	r3, r3
 8004f40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004f44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004f4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004f54:	2320      	movs	r3, #32
 8004f56:	e004      	b.n	8004f62 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004f58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004f5c:	fab3 f383 	clz	r3, r3
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d105      	bne.n	8004f7c <HAL_ADC_ConfigChannel+0x278>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	0e9b      	lsrs	r3, r3, #26
 8004f76:	f003 031f 	and.w	r3, r3, #31
 8004f7a:	e018      	b.n	8004fae <HAL_ADC_ConfigChannel+0x2aa>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f88:	fa93 f3a3 	rbit	r3, r3
 8004f8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004f90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004fa0:	2320      	movs	r3, #32
 8004fa2:	e004      	b.n	8004fae <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004fa8:	fab3 f383 	clz	r3, r3
 8004fac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d106      	bne.n	8004fc0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	2101      	movs	r1, #1
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7ff fb8c 	bl	80046d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2102      	movs	r1, #2
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff fb70 	bl	80046ac <LL_ADC_GetOffsetChannel>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10a      	bne.n	8004fec <HAL_ADC_ConfigChannel+0x2e8>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2102      	movs	r1, #2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff fb65 	bl	80046ac <LL_ADC_GetOffsetChannel>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	0e9b      	lsrs	r3, r3, #26
 8004fe6:	f003 021f 	and.w	r2, r3, #31
 8004fea:	e01e      	b.n	800502a <HAL_ADC_ConfigChannel+0x326>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2102      	movs	r1, #2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff fb5a 	bl	80046ac <LL_ADC_GetOffsetChannel>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005002:	fa93 f3a3 	rbit	r3, r3
 8005006:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800500a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800500e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005012:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800501a:	2320      	movs	r3, #32
 800501c:	e004      	b.n	8005028 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800501e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005022:	fab3 f383 	clz	r3, r3
 8005026:	b2db      	uxtb	r3, r3
 8005028:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005032:	2b00      	cmp	r3, #0
 8005034:	d105      	bne.n	8005042 <HAL_ADC_ConfigChannel+0x33e>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	0e9b      	lsrs	r3, r3, #26
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	e016      	b.n	8005070 <HAL_ADC_ConfigChannel+0x36c>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800504e:	fa93 f3a3 	rbit	r3, r3
 8005052:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005054:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005056:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800505a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005062:	2320      	movs	r3, #32
 8005064:	e004      	b.n	8005070 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005066:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800506a:	fab3 f383 	clz	r3, r3
 800506e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005070:	429a      	cmp	r2, r3
 8005072:	d106      	bne.n	8005082 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2200      	movs	r2, #0
 800507a:	2102      	movs	r1, #2
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff fb2b 	bl	80046d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2103      	movs	r1, #3
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff fb0f 	bl	80046ac <LL_ADC_GetOffsetChannel>
 800508e:	4603      	mov	r3, r0
 8005090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10a      	bne.n	80050ae <HAL_ADC_ConfigChannel+0x3aa>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2103      	movs	r1, #3
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff fb04 	bl	80046ac <LL_ADC_GetOffsetChannel>
 80050a4:	4603      	mov	r3, r0
 80050a6:	0e9b      	lsrs	r3, r3, #26
 80050a8:	f003 021f 	and.w	r2, r3, #31
 80050ac:	e017      	b.n	80050de <HAL_ADC_ConfigChannel+0x3da>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2103      	movs	r1, #3
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff faf9 	bl	80046ac <LL_ADC_GetOffsetChannel>
 80050ba:	4603      	mov	r3, r0
 80050bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050c0:	fa93 f3a3 	rbit	r3, r3
 80050c4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80050c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80050ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80050d0:	2320      	movs	r3, #32
 80050d2:	e003      	b.n	80050dc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80050d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050d6:	fab3 f383 	clz	r3, r3
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d105      	bne.n	80050f6 <HAL_ADC_ConfigChannel+0x3f2>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	0e9b      	lsrs	r3, r3, #26
 80050f0:	f003 031f 	and.w	r3, r3, #31
 80050f4:	e011      	b.n	800511a <HAL_ADC_ConfigChannel+0x416>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050fe:	fa93 f3a3 	rbit	r3, r3
 8005102:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005104:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005106:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005108:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800510e:	2320      	movs	r3, #32
 8005110:	e003      	b.n	800511a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005114:	fab3 f383 	clz	r3, r3
 8005118:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800511a:	429a      	cmp	r2, r3
 800511c:	d106      	bne.n	800512c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2200      	movs	r2, #0
 8005124:	2103      	movs	r1, #3
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff fad6 	bl	80046d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff fbff 	bl	8004934 <LL_ADC_IsEnabled>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	f040 813d 	bne.w	80053b8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	6819      	ldr	r1, [r3, #0]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	461a      	mov	r2, r3
 800514c:	f7ff fb80 	bl	8004850 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4aa2      	ldr	r2, [pc, #648]	@ (80053e0 <HAL_ADC_ConfigChannel+0x6dc>)
 8005156:	4293      	cmp	r3, r2
 8005158:	f040 812e 	bne.w	80053b8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10b      	bne.n	8005184 <HAL_ADC_ConfigChannel+0x480>
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	0e9b      	lsrs	r3, r3, #26
 8005172:	3301      	adds	r3, #1
 8005174:	f003 031f 	and.w	r3, r3, #31
 8005178:	2b09      	cmp	r3, #9
 800517a:	bf94      	ite	ls
 800517c:	2301      	movls	r3, #1
 800517e:	2300      	movhi	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	e019      	b.n	80051b8 <HAL_ADC_ConfigChannel+0x4b4>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800518c:	fa93 f3a3 	rbit	r3, r3
 8005190:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005192:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005194:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005196:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800519c:	2320      	movs	r3, #32
 800519e:	e003      	b.n	80051a8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80051a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051a2:	fab3 f383 	clz	r3, r3
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	3301      	adds	r3, #1
 80051aa:	f003 031f 	and.w	r3, r3, #31
 80051ae:	2b09      	cmp	r3, #9
 80051b0:	bf94      	ite	ls
 80051b2:	2301      	movls	r3, #1
 80051b4:	2300      	movhi	r3, #0
 80051b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d079      	beq.n	80052b0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d107      	bne.n	80051d8 <HAL_ADC_ConfigChannel+0x4d4>
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	0e9b      	lsrs	r3, r3, #26
 80051ce:	3301      	adds	r3, #1
 80051d0:	069b      	lsls	r3, r3, #26
 80051d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051d6:	e015      	b.n	8005204 <HAL_ADC_ConfigChannel+0x500>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051e0:	fa93 f3a3 	rbit	r3, r3
 80051e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80051e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051e8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80051ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80051f0:	2320      	movs	r3, #32
 80051f2:	e003      	b.n	80051fc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80051f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051f6:	fab3 f383 	clz	r3, r3
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	3301      	adds	r3, #1
 80051fe:	069b      	lsls	r3, r3, #26
 8005200:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800520c:	2b00      	cmp	r3, #0
 800520e:	d109      	bne.n	8005224 <HAL_ADC_ConfigChannel+0x520>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	0e9b      	lsrs	r3, r3, #26
 8005216:	3301      	adds	r3, #1
 8005218:	f003 031f 	and.w	r3, r3, #31
 800521c:	2101      	movs	r1, #1
 800521e:	fa01 f303 	lsl.w	r3, r1, r3
 8005222:	e017      	b.n	8005254 <HAL_ADC_ConfigChannel+0x550>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800522c:	fa93 f3a3 	rbit	r3, r3
 8005230:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005232:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005234:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800523c:	2320      	movs	r3, #32
 800523e:	e003      	b.n	8005248 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005242:	fab3 f383 	clz	r3, r3
 8005246:	b2db      	uxtb	r3, r3
 8005248:	3301      	adds	r3, #1
 800524a:	f003 031f 	and.w	r3, r3, #31
 800524e:	2101      	movs	r1, #1
 8005250:	fa01 f303 	lsl.w	r3, r1, r3
 8005254:	ea42 0103 	orr.w	r1, r2, r3
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <HAL_ADC_ConfigChannel+0x576>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	0e9b      	lsrs	r3, r3, #26
 800526a:	3301      	adds	r3, #1
 800526c:	f003 021f 	and.w	r2, r3, #31
 8005270:	4613      	mov	r3, r2
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	4413      	add	r3, r2
 8005276:	051b      	lsls	r3, r3, #20
 8005278:	e018      	b.n	80052ac <HAL_ADC_ConfigChannel+0x5a8>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005282:	fa93 f3a3 	rbit	r3, r3
 8005286:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800528a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800528c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005292:	2320      	movs	r3, #32
 8005294:	e003      	b.n	800529e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005298:	fab3 f383 	clz	r3, r3
 800529c:	b2db      	uxtb	r3, r3
 800529e:	3301      	adds	r3, #1
 80052a0:	f003 021f 	and.w	r2, r3, #31
 80052a4:	4613      	mov	r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	4413      	add	r3, r2
 80052aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052ac:	430b      	orrs	r3, r1
 80052ae:	e07e      	b.n	80053ae <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d107      	bne.n	80052cc <HAL_ADC_ConfigChannel+0x5c8>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	0e9b      	lsrs	r3, r3, #26
 80052c2:	3301      	adds	r3, #1
 80052c4:	069b      	lsls	r3, r3, #26
 80052c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80052ca:	e015      	b.n	80052f8 <HAL_ADC_ConfigChannel+0x5f4>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d4:	fa93 f3a3 	rbit	r3, r3
 80052d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80052da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052dc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80052de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80052e4:	2320      	movs	r3, #32
 80052e6:	e003      	b.n	80052f0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80052e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ea:	fab3 f383 	clz	r3, r3
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	3301      	adds	r3, #1
 80052f2:	069b      	lsls	r3, r3, #26
 80052f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005300:	2b00      	cmp	r3, #0
 8005302:	d109      	bne.n	8005318 <HAL_ADC_ConfigChannel+0x614>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	0e9b      	lsrs	r3, r3, #26
 800530a:	3301      	adds	r3, #1
 800530c:	f003 031f 	and.w	r3, r3, #31
 8005310:	2101      	movs	r1, #1
 8005312:	fa01 f303 	lsl.w	r3, r1, r3
 8005316:	e017      	b.n	8005348 <HAL_ADC_ConfigChannel+0x644>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	fa93 f3a3 	rbit	r3, r3
 8005324:	61fb      	str	r3, [r7, #28]
  return result;
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005330:	2320      	movs	r3, #32
 8005332:	e003      	b.n	800533c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005336:	fab3 f383 	clz	r3, r3
 800533a:	b2db      	uxtb	r3, r3
 800533c:	3301      	adds	r3, #1
 800533e:	f003 031f 	and.w	r3, r3, #31
 8005342:	2101      	movs	r1, #1
 8005344:	fa01 f303 	lsl.w	r3, r1, r3
 8005348:	ea42 0103 	orr.w	r1, r2, r3
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10d      	bne.n	8005374 <HAL_ADC_ConfigChannel+0x670>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	0e9b      	lsrs	r3, r3, #26
 800535e:	3301      	adds	r3, #1
 8005360:	f003 021f 	and.w	r2, r3, #31
 8005364:	4613      	mov	r3, r2
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	4413      	add	r3, r2
 800536a:	3b1e      	subs	r3, #30
 800536c:	051b      	lsls	r3, r3, #20
 800536e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005372:	e01b      	b.n	80053ac <HAL_ADC_ConfigChannel+0x6a8>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	fa93 f3a3 	rbit	r3, r3
 8005380:	613b      	str	r3, [r7, #16]
  return result;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800538c:	2320      	movs	r3, #32
 800538e:	e003      	b.n	8005398 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	fab3 f383 	clz	r3, r3
 8005396:	b2db      	uxtb	r3, r3
 8005398:	3301      	adds	r3, #1
 800539a:	f003 021f 	and.w	r2, r3, #31
 800539e:	4613      	mov	r3, r2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	4413      	add	r3, r2
 80053a4:	3b1e      	subs	r3, #30
 80053a6:	051b      	lsls	r3, r3, #20
 80053a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053b2:	4619      	mov	r1, r3
 80053b4:	f7ff fa20 	bl	80047f8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	4b09      	ldr	r3, [pc, #36]	@ (80053e4 <HAL_ADC_ConfigChannel+0x6e0>)
 80053be:	4013      	ands	r3, r2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 80af 	beq.w	8005524 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053ce:	d004      	beq.n	80053da <HAL_ADC_ConfigChannel+0x6d6>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a04      	ldr	r2, [pc, #16]	@ (80053e8 <HAL_ADC_ConfigChannel+0x6e4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d10a      	bne.n	80053f0 <HAL_ADC_ConfigChannel+0x6ec>
 80053da:	4b04      	ldr	r3, [pc, #16]	@ (80053ec <HAL_ADC_ConfigChannel+0x6e8>)
 80053dc:	e009      	b.n	80053f2 <HAL_ADC_ConfigChannel+0x6ee>
 80053de:	bf00      	nop
 80053e0:	407f0000 	.word	0x407f0000
 80053e4:	80080000 	.word	0x80080000
 80053e8:	50000100 	.word	0x50000100
 80053ec:	50000300 	.word	0x50000300
 80053f0:	4b51      	ldr	r3, [pc, #324]	@ (8005538 <HAL_ADC_ConfigChannel+0x834>)
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7ff f928 	bl	8004648 <LL_ADC_GetCommonPathInternalCh>
 80053f8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a4e      	ldr	r2, [pc, #312]	@ (800553c <HAL_ADC_ConfigChannel+0x838>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d004      	beq.n	8005410 <HAL_ADC_ConfigChannel+0x70c>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a4d      	ldr	r2, [pc, #308]	@ (8005540 <HAL_ADC_ConfigChannel+0x83c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d134      	bne.n	800547a <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005410:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005414:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d12e      	bne.n	800547a <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005424:	d17e      	bne.n	8005524 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800542e:	d004      	beq.n	800543a <HAL_ADC_ConfigChannel+0x736>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a43      	ldr	r2, [pc, #268]	@ (8005544 <HAL_ADC_ConfigChannel+0x840>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d101      	bne.n	800543e <HAL_ADC_ConfigChannel+0x73a>
 800543a:	4a43      	ldr	r2, [pc, #268]	@ (8005548 <HAL_ADC_ConfigChannel+0x844>)
 800543c:	e000      	b.n	8005440 <HAL_ADC_ConfigChannel+0x73c>
 800543e:	4a3e      	ldr	r2, [pc, #248]	@ (8005538 <HAL_ADC_ConfigChannel+0x834>)
 8005440:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005444:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005448:	4619      	mov	r1, r3
 800544a:	4610      	mov	r0, r2
 800544c:	f7ff f8e9 	bl	8004622 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005450:	4b3e      	ldr	r3, [pc, #248]	@ (800554c <HAL_ADC_ConfigChannel+0x848>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	099b      	lsrs	r3, r3, #6
 8005456:	4a3e      	ldr	r2, [pc, #248]	@ (8005550 <HAL_ADC_ConfigChannel+0x84c>)
 8005458:	fba2 2303 	umull	r2, r3, r2, r3
 800545c:	099b      	lsrs	r3, r3, #6
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	4613      	mov	r3, r2
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800546a:	e002      	b.n	8005472 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	3b01      	subs	r3, #1
 8005470:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1f9      	bne.n	800546c <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005478:	e054      	b.n	8005524 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a35      	ldr	r2, [pc, #212]	@ (8005554 <HAL_ADC_ConfigChannel+0x850>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d120      	bne.n	80054c6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005484:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005488:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d11a      	bne.n	80054c6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005498:	d144      	bne.n	8005524 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054a2:	d004      	beq.n	80054ae <HAL_ADC_ConfigChannel+0x7aa>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a26      	ldr	r2, [pc, #152]	@ (8005544 <HAL_ADC_ConfigChannel+0x840>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d101      	bne.n	80054b2 <HAL_ADC_ConfigChannel+0x7ae>
 80054ae:	4a26      	ldr	r2, [pc, #152]	@ (8005548 <HAL_ADC_ConfigChannel+0x844>)
 80054b0:	e000      	b.n	80054b4 <HAL_ADC_ConfigChannel+0x7b0>
 80054b2:	4a21      	ldr	r2, [pc, #132]	@ (8005538 <HAL_ADC_ConfigChannel+0x834>)
 80054b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054bc:	4619      	mov	r1, r3
 80054be:	4610      	mov	r0, r2
 80054c0:	f7ff f8af 	bl	8004622 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80054c4:	e02e      	b.n	8005524 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a23      	ldr	r2, [pc, #140]	@ (8005558 <HAL_ADC_ConfigChannel+0x854>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d129      	bne.n	8005524 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80054d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d123      	bne.n	8005524 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a18      	ldr	r2, [pc, #96]	@ (8005544 <HAL_ADC_ConfigChannel+0x840>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d01e      	beq.n	8005524 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054ee:	d004      	beq.n	80054fa <HAL_ADC_ConfigChannel+0x7f6>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a13      	ldr	r2, [pc, #76]	@ (8005544 <HAL_ADC_ConfigChannel+0x840>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d101      	bne.n	80054fe <HAL_ADC_ConfigChannel+0x7fa>
 80054fa:	4a13      	ldr	r2, [pc, #76]	@ (8005548 <HAL_ADC_ConfigChannel+0x844>)
 80054fc:	e000      	b.n	8005500 <HAL_ADC_ConfigChannel+0x7fc>
 80054fe:	4a0e      	ldr	r2, [pc, #56]	@ (8005538 <HAL_ADC_ConfigChannel+0x834>)
 8005500:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005504:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005508:	4619      	mov	r1, r3
 800550a:	4610      	mov	r0, r2
 800550c:	f7ff f889 	bl	8004622 <LL_ADC_SetCommonPathInternalCh>
 8005510:	e008      	b.n	8005524 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005516:	f043 0220 	orr.w	r2, r3, #32
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800552c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005530:	4618      	mov	r0, r3
 8005532:	37d8      	adds	r7, #216	@ 0xd8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	50000700 	.word	0x50000700
 800553c:	c3210000 	.word	0xc3210000
 8005540:	90c00010 	.word	0x90c00010
 8005544:	50000100 	.word	0x50000100
 8005548:	50000300 	.word	0x50000300
 800554c:	20000004 	.word	0x20000004
 8005550:	053e2d63 	.word	0x053e2d63
 8005554:	c7520000 	.word	0xc7520000
 8005558:	cb840000 	.word	0xcb840000

0800555c <LL_ADC_IsEnabled>:
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <LL_ADC_IsEnabled+0x18>
 8005570:	2301      	movs	r3, #1
 8005572:	e000      	b.n	8005576 <LL_ADC_IsEnabled+0x1a>
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <LL_ADC_REG_IsConversionOngoing>:
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 0304 	and.w	r3, r3, #4
 8005592:	2b04      	cmp	r3, #4
 8005594:	d101      	bne.n	800559a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80055a8:	b590      	push	{r4, r7, lr}
 80055aa:	b0a1      	sub	sp, #132	@ 0x84
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80055c2:	2302      	movs	r3, #2
 80055c4:	e0cb      	b.n	800575e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80055ce:	2300      	movs	r3, #0
 80055d0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80055d2:	2300      	movs	r3, #0
 80055d4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055de:	d102      	bne.n	80055e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80055e0:	4b61      	ldr	r3, [pc, #388]	@ (8005768 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80055e2:	60bb      	str	r3, [r7, #8]
 80055e4:	e001      	b.n	80055ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80055e6:	2300      	movs	r3, #0
 80055e8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10b      	bne.n	8005608 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f4:	f043 0220 	orr.w	r2, r3, #32
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e0aa      	b.n	800575e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff ffb9 	bl	8005582 <LL_ADC_REG_IsConversionOngoing>
 8005610:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff ffb3 	bl	8005582 <LL_ADC_REG_IsConversionOngoing>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	f040 808c 	bne.w	800573c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005624:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005626:	2b00      	cmp	r3, #0
 8005628:	f040 8088 	bne.w	800573c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005634:	d004      	beq.n	8005640 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a4b      	ldr	r2, [pc, #300]	@ (8005768 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d101      	bne.n	8005644 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8005640:	4b4a      	ldr	r3, [pc, #296]	@ (800576c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8005642:	e000      	b.n	8005646 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005644:	4b4a      	ldr	r3, [pc, #296]	@ (8005770 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8005646:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d041      	beq.n	80056d4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005650:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	6859      	ldr	r1, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005662:	035b      	lsls	r3, r3, #13
 8005664:	430b      	orrs	r3, r1
 8005666:	431a      	orrs	r2, r3
 8005668:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800566a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005674:	d004      	beq.n	8005680 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a3b      	ldr	r2, [pc, #236]	@ (8005768 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d10f      	bne.n	80056a0 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8005680:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005684:	f7ff ff6a 	bl	800555c <LL_ADC_IsEnabled>
 8005688:	4604      	mov	r4, r0
 800568a:	4837      	ldr	r0, [pc, #220]	@ (8005768 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800568c:	f7ff ff66 	bl	800555c <LL_ADC_IsEnabled>
 8005690:	4603      	mov	r3, r0
 8005692:	4323      	orrs	r3, r4
 8005694:	2b00      	cmp	r3, #0
 8005696:	bf0c      	ite	eq
 8005698:	2301      	moveq	r3, #1
 800569a:	2300      	movne	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	e008      	b.n	80056b2 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 80056a0:	4834      	ldr	r0, [pc, #208]	@ (8005774 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80056a2:	f7ff ff5b 	bl	800555c <LL_ADC_IsEnabled>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	bf0c      	ite	eq
 80056ac:	2301      	moveq	r3, #1
 80056ae:	2300      	movne	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d04c      	beq.n	8005750 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80056b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80056be:	f023 030f 	bic.w	r3, r3, #15
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	6811      	ldr	r1, [r2, #0]
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	6892      	ldr	r2, [r2, #8]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	431a      	orrs	r2, r3
 80056ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056d0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80056d2:	e03d      	b.n	8005750 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80056d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056de:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056e8:	d004      	beq.n	80056f4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005768 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d10f      	bne.n	8005714 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80056f4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80056f8:	f7ff ff30 	bl	800555c <LL_ADC_IsEnabled>
 80056fc:	4604      	mov	r4, r0
 80056fe:	481a      	ldr	r0, [pc, #104]	@ (8005768 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005700:	f7ff ff2c 	bl	800555c <LL_ADC_IsEnabled>
 8005704:	4603      	mov	r3, r0
 8005706:	4323      	orrs	r3, r4
 8005708:	2b00      	cmp	r3, #0
 800570a:	bf0c      	ite	eq
 800570c:	2301      	moveq	r3, #1
 800570e:	2300      	movne	r3, #0
 8005710:	b2db      	uxtb	r3, r3
 8005712:	e008      	b.n	8005726 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8005714:	4817      	ldr	r0, [pc, #92]	@ (8005774 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8005716:	f7ff ff21 	bl	800555c <LL_ADC_IsEnabled>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	bf0c      	ite	eq
 8005720:	2301      	moveq	r3, #1
 8005722:	2300      	movne	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d012      	beq.n	8005750 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800572a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005732:	f023 030f 	bic.w	r3, r3, #15
 8005736:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005738:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800573a:	e009      	b.n	8005750 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005740:	f043 0220 	orr.w	r2, r3, #32
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800574e:	e000      	b.n	8005752 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005750:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800575a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800575e:	4618      	mov	r0, r3
 8005760:	3784      	adds	r7, #132	@ 0x84
 8005762:	46bd      	mov	sp, r7
 8005764:	bd90      	pop	{r4, r7, pc}
 8005766:	bf00      	nop
 8005768:	50000100 	.word	0x50000100
 800576c:	50000300 	.word	0x50000300
 8005770:	50000700 	.word	0x50000700
 8005774:	50000400 	.word	0x50000400

08005778 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e023      	b.n	80057d2 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fc ff3c 	bl	800261c <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005820 <__NVIC_SetPriorityGrouping+0x44>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80057f8:	4013      	ands	r3, r2
 80057fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800580c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800580e:	4a04      	ldr	r2, [pc, #16]	@ (8005820 <__NVIC_SetPriorityGrouping+0x44>)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	60d3      	str	r3, [r2, #12]
}
 8005814:	bf00      	nop
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	e000ed00 	.word	0xe000ed00

08005824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005828:	4b04      	ldr	r3, [pc, #16]	@ (800583c <__NVIC_GetPriorityGrouping+0x18>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	0a1b      	lsrs	r3, r3, #8
 800582e:	f003 0307 	and.w	r3, r3, #7
}
 8005832:	4618      	mov	r0, r3
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	e000ed00 	.word	0xe000ed00

08005840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800584a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800584e:	2b00      	cmp	r3, #0
 8005850:	db0b      	blt.n	800586a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	f003 021f 	and.w	r2, r3, #31
 8005858:	4907      	ldr	r1, [pc, #28]	@ (8005878 <__NVIC_EnableIRQ+0x38>)
 800585a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800585e:	095b      	lsrs	r3, r3, #5
 8005860:	2001      	movs	r0, #1
 8005862:	fa00 f202 	lsl.w	r2, r0, r2
 8005866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	e000e100 	.word	0xe000e100

0800587c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	4603      	mov	r3, r0
 8005884:	6039      	str	r1, [r7, #0]
 8005886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800588c:	2b00      	cmp	r3, #0
 800588e:	db0a      	blt.n	80058a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	b2da      	uxtb	r2, r3
 8005894:	490c      	ldr	r1, [pc, #48]	@ (80058c8 <__NVIC_SetPriority+0x4c>)
 8005896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589a:	0112      	lsls	r2, r2, #4
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	440b      	add	r3, r1
 80058a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058a4:	e00a      	b.n	80058bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	4908      	ldr	r1, [pc, #32]	@ (80058cc <__NVIC_SetPriority+0x50>)
 80058ac:	79fb      	ldrb	r3, [r7, #7]
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	3b04      	subs	r3, #4
 80058b4:	0112      	lsls	r2, r2, #4
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	440b      	add	r3, r1
 80058ba:	761a      	strb	r2, [r3, #24]
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	e000e100 	.word	0xe000e100
 80058cc:	e000ed00 	.word	0xe000ed00

080058d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b089      	sub	sp, #36	@ 0x24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	f1c3 0307 	rsb	r3, r3, #7
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	bf28      	it	cs
 80058ee:	2304      	movcs	r3, #4
 80058f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	3304      	adds	r3, #4
 80058f6:	2b06      	cmp	r3, #6
 80058f8:	d902      	bls.n	8005900 <NVIC_EncodePriority+0x30>
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	3b03      	subs	r3, #3
 80058fe:	e000      	b.n	8005902 <NVIC_EncodePriority+0x32>
 8005900:	2300      	movs	r3, #0
 8005902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005904:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	fa02 f303 	lsl.w	r3, r2, r3
 800590e:	43da      	mvns	r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	401a      	ands	r2, r3
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005918:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	fa01 f303 	lsl.w	r3, r1, r3
 8005922:	43d9      	mvns	r1, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005928:	4313      	orrs	r3, r2
         );
}
 800592a:	4618      	mov	r0, r3
 800592c:	3724      	adds	r7, #36	@ 0x24
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff ff4c 	bl	80057dc <__NVIC_SetPriorityGrouping>
}
 8005944:	bf00      	nop
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
 8005958:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800595a:	f7ff ff63 	bl	8005824 <__NVIC_GetPriorityGrouping>
 800595e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	68b9      	ldr	r1, [r7, #8]
 8005964:	6978      	ldr	r0, [r7, #20]
 8005966:	f7ff ffb3 	bl	80058d0 <NVIC_EncodePriority>
 800596a:	4602      	mov	r2, r0
 800596c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005970:	4611      	mov	r1, r2
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff ff82 	bl	800587c <__NVIC_SetPriority>
}
 8005978:	bf00      	nop
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	4603      	mov	r3, r0
 8005988:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800598a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff ff56 	bl	8005840 <__NVIC_EnableIRQ>
}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e08d      	b.n	8005aca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	4b47      	ldr	r3, [pc, #284]	@ (8005ad4 <HAL_DMA_Init+0x138>)
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d80f      	bhi.n	80059da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	461a      	mov	r2, r3
 80059c0:	4b45      	ldr	r3, [pc, #276]	@ (8005ad8 <HAL_DMA_Init+0x13c>)
 80059c2:	4413      	add	r3, r2
 80059c4:	4a45      	ldr	r2, [pc, #276]	@ (8005adc <HAL_DMA_Init+0x140>)
 80059c6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ca:	091b      	lsrs	r3, r3, #4
 80059cc:	009a      	lsls	r2, r3, #2
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a42      	ldr	r2, [pc, #264]	@ (8005ae0 <HAL_DMA_Init+0x144>)
 80059d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80059d8:	e00e      	b.n	80059f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	461a      	mov	r2, r3
 80059e0:	4b40      	ldr	r3, [pc, #256]	@ (8005ae4 <HAL_DMA_Init+0x148>)
 80059e2:	4413      	add	r3, r2
 80059e4:	4a3d      	ldr	r2, [pc, #244]	@ (8005adc <HAL_DMA_Init+0x140>)
 80059e6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ea:	091b      	lsrs	r3, r3, #4
 80059ec:	009a      	lsls	r2, r3, #2
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ae8 <HAL_DMA_Init+0x14c>)
 80059f6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f9be 	bl	8005dcc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a58:	d102      	bne.n	8005a60 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a68:	b2d2      	uxtb	r2, r2
 8005a6a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a74:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d010      	beq.n	8005aa0 <HAL_DMA_Init+0x104>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d80c      	bhi.n	8005aa0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f9de 	bl	8005e48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005a9c:	605a      	str	r2, [r3, #4]
 8005a9e:	e008      	b.n	8005ab2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40020407 	.word	0x40020407
 8005ad8:	bffdfff8 	.word	0xbffdfff8
 8005adc:	cccccccd 	.word	0xcccccccd
 8005ae0:	40020000 	.word	0x40020000
 8005ae4:	bffdfbf8 	.word	0xbffdfbf8
 8005ae8:	40020400 	.word	0x40020400

08005aec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d005      	beq.n	8005b10 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2204      	movs	r2, #4
 8005b08:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	73fb      	strb	r3, [r7, #15]
 8005b0e:	e037      	b.n	8005b80 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 020e 	bic.w	r2, r2, #14
 8005b1e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b2e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0201 	bic.w	r2, r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b44:	f003 021f 	and.w	r2, r3, #31
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8005b52:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005b5c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00c      	beq.n	8005b80 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b74:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005b7e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d00d      	beq.n	8005bd2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2204      	movs	r2, #4
 8005bba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	73fb      	strb	r3, [r7, #15]
 8005bd0:	e047      	b.n	8005c62 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 020e 	bic.w	r2, r2, #14
 8005be0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0201 	bic.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c06:	f003 021f 	and.w	r2, r3, #31
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0e:	2101      	movs	r1, #1
 8005c10:	fa01 f202 	lsl.w	r2, r1, r2
 8005c14:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c1e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00c      	beq.n	8005c42 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005c40:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	4798      	blx	r3
    }
  }
  return status;
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c88:	f003 031f 	and.w	r3, r3, #31
 8005c8c:	2204      	movs	r2, #4
 8005c8e:	409a      	lsls	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4013      	ands	r3, r2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d026      	beq.n	8005ce6 <HAL_DMA_IRQHandler+0x7a>
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f003 0304 	and.w	r3, r3, #4
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d021      	beq.n	8005ce6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0320 	and.w	r3, r3, #32
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d107      	bne.n	8005cc0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0204 	bic.w	r2, r2, #4
 8005cbe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc4:	f003 021f 	and.w	r2, r3, #31
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ccc:	2104      	movs	r1, #4
 8005cce:	fa01 f202 	lsl.w	r2, r1, r2
 8005cd2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d071      	beq.n	8005dc0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005ce4:	e06c      	b.n	8005dc0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	2202      	movs	r2, #2
 8005cf0:	409a      	lsls	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d02e      	beq.n	8005d58 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d029      	beq.n	8005d58 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0320 	and.w	r3, r3, #32
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10b      	bne.n	8005d2a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 020a 	bic.w	r2, r2, #10
 8005d20:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d2e:	f003 021f 	and.w	r2, r3, #31
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d36:	2102      	movs	r1, #2
 8005d38:	fa01 f202 	lsl.w	r2, r1, r2
 8005d3c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d038      	beq.n	8005dc0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005d56:	e033      	b.n	8005dc0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d5c:	f003 031f 	and.w	r3, r3, #31
 8005d60:	2208      	movs	r2, #8
 8005d62:	409a      	lsls	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4013      	ands	r3, r2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d02a      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f003 0308 	and.w	r3, r3, #8
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d025      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 020e 	bic.w	r2, r2, #14
 8005d84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d8a:	f003 021f 	and.w	r2, r3, #31
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d92:	2101      	movs	r1, #1
 8005d94:	fa01 f202 	lsl.w	r2, r1, r2
 8005d98:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d004      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005dc0:	bf00      	nop
 8005dc2:	bf00      	nop
}
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4b16      	ldr	r3, [pc, #88]	@ (8005e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d802      	bhi.n	8005de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005de0:	4b15      	ldr	r3, [pc, #84]	@ (8005e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	e001      	b.n	8005dea <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005de6:	4b15      	ldr	r3, [pc, #84]	@ (8005e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005de8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	3b08      	subs	r3, #8
 8005df6:	4a12      	ldr	r2, [pc, #72]	@ (8005e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005df8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfc:	091b      	lsrs	r3, r3, #4
 8005dfe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e04:	089b      	lsrs	r3, r3, #2
 8005e06:	009a      	lsls	r2, r3, #2
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a0b      	ldr	r2, [pc, #44]	@ (8005e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005e16:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	2201      	movs	r2, #1
 8005e20:	409a      	lsls	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005e26:	bf00      	nop
 8005e28:	371c      	adds	r7, #28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40020407 	.word	0x40020407
 8005e38:	40020800 	.word	0x40020800
 8005e3c:	40020820 	.word	0x40020820
 8005e40:	cccccccd 	.word	0xcccccccd
 8005e44:	40020880 	.word	0x40020880

08005e48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005e5c:	4413      	add	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	461a      	mov	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a08      	ldr	r2, [pc, #32]	@ (8005e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005e6a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	f003 031f 	and.w	r3, r3, #31
 8005e74:	2201      	movs	r2, #1
 8005e76:	409a      	lsls	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005e7c:	bf00      	nop
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	1000823f 	.word	0x1000823f
 8005e8c:	40020940 	.word	0x40020940

08005e90 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e033      	b.n	8005f0a <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d106      	bne.n	8005ebc <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7fc fbd0 	bl	800265c <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f854 	bl	8005f70 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f822 	bl	8005f12 <FMAC_Reset>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d10c      	bne.n	8005eee <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ed8:	f043 0210 	orr.w	r2, r3, #16
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	22a0      	movs	r2, #160	@ 0xa0
 8005ee4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	73fb      	strb	r3, [r7, #15]
 8005eec:	e008      	b.n	8005f00 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 8005efc:	2300      	movs	r3, #0
 8005efe:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f1a:	f7fe fb1d 	bl	8004558 <HAL_GetTick>
 8005f1e:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691a      	ldr	r2, [r3, #16]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005f2e:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8005f30:	e00f      	b.n	8005f52 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8005f32:	f7fe fb11 	bl	8004558 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005f40:	d907      	bls.n	8005f52 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f46:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e00a      	b.n	8005f68 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e8      	bne.n	8005f32 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f807 	bl	8005f8c <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f81b 	bl	8005fba <FMAC_ResetOutputStateAndDataPointers>
}
 8005f84:	bf00      	nop
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ff6:	e15a      	b.n	80062ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	fa01 f303 	lsl.w	r3, r1, r3
 8006004:	4013      	ands	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 814c 	beq.w	80062a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f003 0303 	and.w	r3, r3, #3
 8006018:	2b01      	cmp	r3, #1
 800601a:	d005      	beq.n	8006028 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006024:	2b02      	cmp	r3, #2
 8006026:	d130      	bne.n	800608a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	2203      	movs	r2, #3
 8006034:	fa02 f303 	lsl.w	r3, r2, r3
 8006038:	43db      	mvns	r3, r3
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	4013      	ands	r3, r2
 800603e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	fa02 f303 	lsl.w	r3, r2, r3
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800605e:	2201      	movs	r2, #1
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	fa02 f303 	lsl.w	r3, r2, r3
 8006066:	43db      	mvns	r3, r3
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4013      	ands	r3, r2
 800606c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	091b      	lsrs	r3, r3, #4
 8006074:	f003 0201 	and.w	r2, r3, #1
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	fa02 f303 	lsl.w	r3, r2, r3
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	2b03      	cmp	r3, #3
 8006094:	d017      	beq.n	80060c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	2203      	movs	r2, #3
 80060a2:	fa02 f303 	lsl.w	r3, r2, r3
 80060a6:	43db      	mvns	r3, r3
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4013      	ands	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	4313      	orrs	r3, r2
 80060be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d123      	bne.n	800611a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	08da      	lsrs	r2, r3, #3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	3208      	adds	r2, #8
 80060da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	220f      	movs	r2, #15
 80060ea:	fa02 f303 	lsl.w	r3, r2, r3
 80060ee:	43db      	mvns	r3, r3
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4013      	ands	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	691a      	ldr	r2, [r3, #16]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	fa02 f303 	lsl.w	r3, r2, r3
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	08da      	lsrs	r2, r3, #3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	3208      	adds	r2, #8
 8006114:	6939      	ldr	r1, [r7, #16]
 8006116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	2203      	movs	r2, #3
 8006126:	fa02 f303 	lsl.w	r3, r2, r3
 800612a:	43db      	mvns	r3, r3
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4013      	ands	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f003 0203 	and.w	r2, r3, #3
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	fa02 f303 	lsl.w	r3, r2, r3
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	4313      	orrs	r3, r2
 8006146:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 80a6 	beq.w	80062a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800615c:	4b5b      	ldr	r3, [pc, #364]	@ (80062cc <HAL_GPIO_Init+0x2e4>)
 800615e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006160:	4a5a      	ldr	r2, [pc, #360]	@ (80062cc <HAL_GPIO_Init+0x2e4>)
 8006162:	f043 0301 	orr.w	r3, r3, #1
 8006166:	6613      	str	r3, [r2, #96]	@ 0x60
 8006168:	4b58      	ldr	r3, [pc, #352]	@ (80062cc <HAL_GPIO_Init+0x2e4>)
 800616a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	60bb      	str	r3, [r7, #8]
 8006172:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006174:	4a56      	ldr	r2, [pc, #344]	@ (80062d0 <HAL_GPIO_Init+0x2e8>)
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	089b      	lsrs	r3, r3, #2
 800617a:	3302      	adds	r3, #2
 800617c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006180:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f003 0303 	and.w	r3, r3, #3
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	220f      	movs	r2, #15
 800618c:	fa02 f303 	lsl.w	r3, r2, r3
 8006190:	43db      	mvns	r3, r3
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4013      	ands	r3, r2
 8006196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800619e:	d01f      	beq.n	80061e0 <HAL_GPIO_Init+0x1f8>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a4c      	ldr	r2, [pc, #304]	@ (80062d4 <HAL_GPIO_Init+0x2ec>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d019      	beq.n	80061dc <HAL_GPIO_Init+0x1f4>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a4b      	ldr	r2, [pc, #300]	@ (80062d8 <HAL_GPIO_Init+0x2f0>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d013      	beq.n	80061d8 <HAL_GPIO_Init+0x1f0>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a4a      	ldr	r2, [pc, #296]	@ (80062dc <HAL_GPIO_Init+0x2f4>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d00d      	beq.n	80061d4 <HAL_GPIO_Init+0x1ec>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a49      	ldr	r2, [pc, #292]	@ (80062e0 <HAL_GPIO_Init+0x2f8>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d007      	beq.n	80061d0 <HAL_GPIO_Init+0x1e8>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a48      	ldr	r2, [pc, #288]	@ (80062e4 <HAL_GPIO_Init+0x2fc>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d101      	bne.n	80061cc <HAL_GPIO_Init+0x1e4>
 80061c8:	2305      	movs	r3, #5
 80061ca:	e00a      	b.n	80061e2 <HAL_GPIO_Init+0x1fa>
 80061cc:	2306      	movs	r3, #6
 80061ce:	e008      	b.n	80061e2 <HAL_GPIO_Init+0x1fa>
 80061d0:	2304      	movs	r3, #4
 80061d2:	e006      	b.n	80061e2 <HAL_GPIO_Init+0x1fa>
 80061d4:	2303      	movs	r3, #3
 80061d6:	e004      	b.n	80061e2 <HAL_GPIO_Init+0x1fa>
 80061d8:	2302      	movs	r3, #2
 80061da:	e002      	b.n	80061e2 <HAL_GPIO_Init+0x1fa>
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <HAL_GPIO_Init+0x1fa>
 80061e0:	2300      	movs	r3, #0
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	f002 0203 	and.w	r2, r2, #3
 80061e8:	0092      	lsls	r2, r2, #2
 80061ea:	4093      	lsls	r3, r2
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061f2:	4937      	ldr	r1, [pc, #220]	@ (80062d0 <HAL_GPIO_Init+0x2e8>)
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	089b      	lsrs	r3, r3, #2
 80061f8:	3302      	adds	r3, #2
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006200:	4b39      	ldr	r3, [pc, #228]	@ (80062e8 <HAL_GPIO_Init+0x300>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	43db      	mvns	r3, r3
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	4013      	ands	r3, r2
 800620e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006224:	4a30      	ldr	r2, [pc, #192]	@ (80062e8 <HAL_GPIO_Init+0x300>)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800622a:	4b2f      	ldr	r3, [pc, #188]	@ (80062e8 <HAL_GPIO_Init+0x300>)
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	43db      	mvns	r3, r3
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4013      	ands	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4313      	orrs	r3, r2
 800624c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800624e:	4a26      	ldr	r2, [pc, #152]	@ (80062e8 <HAL_GPIO_Init+0x300>)
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006254:	4b24      	ldr	r3, [pc, #144]	@ (80062e8 <HAL_GPIO_Init+0x300>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	43db      	mvns	r3, r3
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	4013      	ands	r3, r2
 8006262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d003      	beq.n	8006278 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006278:	4a1b      	ldr	r2, [pc, #108]	@ (80062e8 <HAL_GPIO_Init+0x300>)
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800627e:	4b1a      	ldr	r3, [pc, #104]	@ (80062e8 <HAL_GPIO_Init+0x300>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	43db      	mvns	r3, r3
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4013      	ands	r3, r2
 800628c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80062a2:	4a11      	ldr	r2, [pc, #68]	@ (80062e8 <HAL_GPIO_Init+0x300>)
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	3301      	adds	r3, #1
 80062ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	fa22 f303 	lsr.w	r3, r2, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f47f ae9d 	bne.w	8005ff8 <HAL_GPIO_Init+0x10>
  }
}
 80062be:	bf00      	nop
 80062c0:	bf00      	nop
 80062c2:	371c      	adds	r7, #28
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	40021000 	.word	0x40021000
 80062d0:	40010000 	.word	0x40010000
 80062d4:	48000400 	.word	0x48000400
 80062d8:	48000800 	.word	0x48000800
 80062dc:	48000c00 	.word	0x48000c00
 80062e0:	48001000 	.word	0x48001000
 80062e4:	48001400 	.word	0x48001400
 80062e8:	40010400 	.word	0x40010400

080062ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	460b      	mov	r3, r1
 80062f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	887b      	ldrh	r3, [r7, #2]
 80062fe:	4013      	ands	r3, r2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006304:	2301      	movs	r3, #1
 8006306:	73fb      	strb	r3, [r7, #15]
 8006308:	e001      	b.n	800630e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800630a:	2300      	movs	r3, #0
 800630c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800630e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	807b      	strh	r3, [r7, #2]
 8006328:	4613      	mov	r3, r2
 800632a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800632c:	787b      	ldrb	r3, [r7, #1]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006332:	887a      	ldrh	r2, [r7, #2]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006338:	e002      	b.n	8006340 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800633a:	887a      	ldrh	r2, [r7, #2]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e08d      	b.n	800647a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d106      	bne.n	8006378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7fc f992 	bl	800269c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2224      	movs	r2, #36	@ 0x24
 800637c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0201 	bic.w	r2, r2, #1
 800638e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800639c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689a      	ldr	r2, [r3, #8]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80063ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d107      	bne.n	80063c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689a      	ldr	r2, [r3, #8]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063c2:	609a      	str	r2, [r3, #8]
 80063c4:	e006      	b.n	80063d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689a      	ldr	r2, [r3, #8]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80063d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d108      	bne.n	80063ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063ea:	605a      	str	r2, [r3, #4]
 80063ec:	e007      	b.n	80063fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6812      	ldr	r2, [r2, #0]
 8006408:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800640c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006410:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68da      	ldr	r2, [r3, #12]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006420:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691a      	ldr	r2, [r3, #16]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	69d9      	ldr	r1, [r3, #28]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1a      	ldr	r2, [r3, #32]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0201 	orr.w	r2, r2, #1
 800645a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2220      	movs	r2, #32
 8006466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af02      	add	r7, sp, #8
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	4608      	mov	r0, r1
 800648e:	4611      	mov	r1, r2
 8006490:	461a      	mov	r2, r3
 8006492:	4603      	mov	r3, r0
 8006494:	817b      	strh	r3, [r7, #10]
 8006496:	460b      	mov	r3, r1
 8006498:	813b      	strh	r3, [r7, #8]
 800649a:	4613      	mov	r3, r2
 800649c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b20      	cmp	r3, #32
 80064a8:	f040 80fd 	bne.w	80066a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <HAL_I2C_Mem_Read+0x34>
 80064b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d105      	bne.n	80064c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064be:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e0f1      	b.n	80066a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d101      	bne.n	80064d2 <HAL_I2C_Mem_Read+0x4e>
 80064ce:	2302      	movs	r3, #2
 80064d0:	e0ea      	b.n	80066a8 <HAL_I2C_Mem_Read+0x224>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064da:	f7fe f83d 	bl	8004558 <HAL_GetTick>
 80064de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	2319      	movs	r3, #25
 80064e6:	2201      	movs	r2, #1
 80064e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 f95b 	bl	80067a8 <I2C_WaitOnFlagUntilTimeout>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e0d5      	b.n	80066a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2222      	movs	r2, #34	@ 0x22
 8006500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2240      	movs	r2, #64	@ 0x40
 8006508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a3a      	ldr	r2, [r7, #32]
 8006516:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800651c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006524:	88f8      	ldrh	r0, [r7, #6]
 8006526:	893a      	ldrh	r2, [r7, #8]
 8006528:	8979      	ldrh	r1, [r7, #10]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	4603      	mov	r3, r0
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 f8bf 	bl	80066b8 <I2C_RequestMemoryRead>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d005      	beq.n	800654c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e0ad      	b.n	80066a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006550:	b29b      	uxth	r3, r3
 8006552:	2bff      	cmp	r3, #255	@ 0xff
 8006554:	d90e      	bls.n	8006574 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	22ff      	movs	r2, #255	@ 0xff
 800655a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006560:	b2da      	uxtb	r2, r3
 8006562:	8979      	ldrh	r1, [r7, #10]
 8006564:	4b52      	ldr	r3, [pc, #328]	@ (80066b0 <HAL_I2C_Mem_Read+0x22c>)
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 fadf 	bl	8006b30 <I2C_TransferConfig>
 8006572:	e00f      	b.n	8006594 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006582:	b2da      	uxtb	r2, r3
 8006584:	8979      	ldrh	r1, [r7, #10]
 8006586:	4b4a      	ldr	r3, [pc, #296]	@ (80066b0 <HAL_I2C_Mem_Read+0x22c>)
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f000 face 	bl	8006b30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659a:	2200      	movs	r2, #0
 800659c:	2104      	movs	r1, #4
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 f902 	bl	80067a8 <I2C_WaitOnFlagUntilTimeout>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e07c      	b.n	80066a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b8:	b2d2      	uxtb	r2, r2
 80065ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	3b01      	subs	r3, #1
 80065da:	b29a      	uxth	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d034      	beq.n	8006654 <HAL_I2C_Mem_Read+0x1d0>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d130      	bne.n	8006654 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f8:	2200      	movs	r2, #0
 80065fa:	2180      	movs	r1, #128	@ 0x80
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 f8d3 	bl	80067a8 <I2C_WaitOnFlagUntilTimeout>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e04d      	b.n	80066a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006610:	b29b      	uxth	r3, r3
 8006612:	2bff      	cmp	r3, #255	@ 0xff
 8006614:	d90e      	bls.n	8006634 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	22ff      	movs	r2, #255	@ 0xff
 800661a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006620:	b2da      	uxtb	r2, r3
 8006622:	8979      	ldrh	r1, [r7, #10]
 8006624:	2300      	movs	r3, #0
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 fa7f 	bl	8006b30 <I2C_TransferConfig>
 8006632:	e00f      	b.n	8006654 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006642:	b2da      	uxtb	r2, r3
 8006644:	8979      	ldrh	r1, [r7, #10]
 8006646:	2300      	movs	r3, #0
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 fa6e 	bl	8006b30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006658:	b29b      	uxth	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d19a      	bne.n	8006594 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 f940 	bl	80068e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e01a      	b.n	80066a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2220      	movs	r2, #32
 8006678:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6859      	ldr	r1, [r3, #4]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	4b0b      	ldr	r3, [pc, #44]	@ (80066b4 <HAL_I2C_Mem_Read+0x230>)
 8006686:	400b      	ands	r3, r1
 8006688:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2220      	movs	r2, #32
 800668e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	e000      	b.n	80066a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80066a6:	2302      	movs	r3, #2
  }
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	80002400 	.word	0x80002400
 80066b4:	fe00e800 	.word	0xfe00e800

080066b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af02      	add	r7, sp, #8
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	4608      	mov	r0, r1
 80066c2:	4611      	mov	r1, r2
 80066c4:	461a      	mov	r2, r3
 80066c6:	4603      	mov	r3, r0
 80066c8:	817b      	strh	r3, [r7, #10]
 80066ca:	460b      	mov	r3, r1
 80066cc:	813b      	strh	r3, [r7, #8]
 80066ce:	4613      	mov	r3, r2
 80066d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80066d2:	88fb      	ldrh	r3, [r7, #6]
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	8979      	ldrh	r1, [r7, #10]
 80066d8:	4b20      	ldr	r3, [pc, #128]	@ (800675c <I2C_RequestMemoryRead+0xa4>)
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	2300      	movs	r3, #0
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f000 fa26 	bl	8006b30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066e4:	69fa      	ldr	r2, [r7, #28]
 80066e6:	69b9      	ldr	r1, [r7, #24]
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 f8b6 	bl	800685a <I2C_WaitOnTXISFlagUntilTimeout>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e02c      	b.n	8006752 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066f8:	88fb      	ldrh	r3, [r7, #6]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d105      	bne.n	800670a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066fe:	893b      	ldrh	r3, [r7, #8]
 8006700:	b2da      	uxtb	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	629a      	str	r2, [r3, #40]	@ 0x28
 8006708:	e015      	b.n	8006736 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800670a:	893b      	ldrh	r3, [r7, #8]
 800670c:	0a1b      	lsrs	r3, r3, #8
 800670e:	b29b      	uxth	r3, r3
 8006710:	b2da      	uxtb	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006718:	69fa      	ldr	r2, [r7, #28]
 800671a:	69b9      	ldr	r1, [r7, #24]
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 f89c 	bl	800685a <I2C_WaitOnTXISFlagUntilTimeout>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e012      	b.n	8006752 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800672c:	893b      	ldrh	r3, [r7, #8]
 800672e:	b2da      	uxtb	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	2200      	movs	r2, #0
 800673e:	2140      	movs	r1, #64	@ 0x40
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f000 f831 	bl	80067a8 <I2C_WaitOnFlagUntilTimeout>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e000      	b.n	8006752 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	80002000 	.word	0x80002000

08006760 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b02      	cmp	r3, #2
 8006774:	d103      	bne.n	800677e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2200      	movs	r2, #0
 800677c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b01      	cmp	r3, #1
 800678a:	d007      	beq.n	800679c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	699a      	ldr	r2, [r3, #24]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0201 	orr.w	r2, r2, #1
 800679a:	619a      	str	r2, [r3, #24]
  }
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	4613      	mov	r3, r2
 80067b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067b8:	e03b      	b.n	8006832 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 f8d6 	bl	8006970 <I2C_IsErrorOccurred>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e041      	b.n	8006852 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067d4:	d02d      	beq.n	8006832 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067d6:	f7fd febf 	bl	8004558 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d302      	bcc.n	80067ec <I2C_WaitOnFlagUntilTimeout+0x44>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d122      	bne.n	8006832 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699a      	ldr	r2, [r3, #24]
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	4013      	ands	r3, r2
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	bf0c      	ite	eq
 80067fc:	2301      	moveq	r3, #1
 80067fe:	2300      	movne	r3, #0
 8006800:	b2db      	uxtb	r3, r3
 8006802:	461a      	mov	r2, r3
 8006804:	79fb      	ldrb	r3, [r7, #7]
 8006806:	429a      	cmp	r2, r3
 8006808:	d113      	bne.n	8006832 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800680e:	f043 0220 	orr.w	r2, r3, #32
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2220      	movs	r2, #32
 800681a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e00f      	b.n	8006852 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	699a      	ldr	r2, [r3, #24]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	4013      	ands	r3, r2
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	429a      	cmp	r2, r3
 8006840:	bf0c      	ite	eq
 8006842:	2301      	moveq	r3, #1
 8006844:	2300      	movne	r3, #0
 8006846:	b2db      	uxtb	r3, r3
 8006848:	461a      	mov	r2, r3
 800684a:	79fb      	ldrb	r3, [r7, #7]
 800684c:	429a      	cmp	r2, r3
 800684e:	d0b4      	beq.n	80067ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006866:	e033      	b.n	80068d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	68b9      	ldr	r1, [r7, #8]
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 f87f 	bl	8006970 <I2C_IsErrorOccurred>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e031      	b.n	80068e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006882:	d025      	beq.n	80068d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006884:	f7fd fe68 	bl	8004558 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	429a      	cmp	r2, r3
 8006892:	d302      	bcc.n	800689a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d11a      	bne.n	80068d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d013      	beq.n	80068d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ac:	f043 0220 	orr.w	r2, r3, #32
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2220      	movs	r2, #32
 80068b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e007      	b.n	80068e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d1c4      	bne.n	8006868 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068f4:	e02f      	b.n	8006956 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	68b9      	ldr	r1, [r7, #8]
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 f838 	bl	8006970 <I2C_IsErrorOccurred>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e02d      	b.n	8006966 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800690a:	f7fd fe25 	bl	8004558 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	429a      	cmp	r2, r3
 8006918:	d302      	bcc.n	8006920 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d11a      	bne.n	8006956 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b20      	cmp	r3, #32
 800692c:	d013      	beq.n	8006956 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006932:	f043 0220 	orr.w	r2, r3, #32
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e007      	b.n	8006966 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	f003 0320 	and.w	r3, r3, #32
 8006960:	2b20      	cmp	r3, #32
 8006962:	d1c8      	bne.n	80068f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
	...

08006970 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08a      	sub	sp, #40	@ 0x28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800698a:	2300      	movs	r3, #0
 800698c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	f003 0310 	and.w	r3, r3, #16
 8006998:	2b00      	cmp	r3, #0
 800699a:	d068      	beq.n	8006a6e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2210      	movs	r2, #16
 80069a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069a4:	e049      	b.n	8006a3a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069ac:	d045      	beq.n	8006a3a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069ae:	f7fd fdd3 	bl	8004558 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d302      	bcc.n	80069c4 <I2C_IsErrorOccurred+0x54>
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d13a      	bne.n	8006a3a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069e6:	d121      	bne.n	8006a2c <I2C_IsErrorOccurred+0xbc>
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069ee:	d01d      	beq.n	8006a2c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80069f0:	7cfb      	ldrb	r3, [r7, #19]
 80069f2:	2b20      	cmp	r3, #32
 80069f4:	d01a      	beq.n	8006a2c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006a06:	f7fd fda7 	bl	8004558 <HAL_GetTick>
 8006a0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a0c:	e00e      	b.n	8006a2c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006a0e:	f7fd fda3 	bl	8004558 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b19      	cmp	r3, #25
 8006a1a:	d907      	bls.n	8006a2c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	f043 0320 	orr.w	r3, r3, #32
 8006a22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006a2a:	e006      	b.n	8006a3a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	f003 0320 	and.w	r3, r3, #32
 8006a36:	2b20      	cmp	r3, #32
 8006a38:	d1e9      	bne.n	8006a0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	f003 0320 	and.w	r3, r3, #32
 8006a44:	2b20      	cmp	r3, #32
 8006a46:	d003      	beq.n	8006a50 <I2C_IsErrorOccurred+0xe0>
 8006a48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0aa      	beq.n	80069a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d103      	bne.n	8006a60 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	f043 0304 	orr.w	r3, r3, #4
 8006a66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00b      	beq.n	8006a98 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	f043 0301 	orr.w	r3, r3, #1
 8006a86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00b      	beq.n	8006aba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	f043 0308 	orr.w	r3, r3, #8
 8006aa8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006ab2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00b      	beq.n	8006adc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	f043 0302 	orr.w	r3, r3, #2
 8006aca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ad4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006adc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d01c      	beq.n	8006b1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7ff fe3b 	bl	8006760 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6859      	ldr	r1, [r3, #4]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	4b0d      	ldr	r3, [pc, #52]	@ (8006b2c <I2C_IsErrorOccurred+0x1bc>)
 8006af6:	400b      	ands	r3, r1
 8006af8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	431a      	orrs	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2220      	movs	r2, #32
 8006b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3728      	adds	r7, #40	@ 0x28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	fe00e800 	.word	0xfe00e800

08006b30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	607b      	str	r3, [r7, #4]
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	817b      	strh	r3, [r7, #10]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b42:	897b      	ldrh	r3, [r7, #10]
 8006b44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b48:	7a7b      	ldrb	r3, [r7, #9]
 8006b4a:	041b      	lsls	r3, r3, #16
 8006b4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	0d5b      	lsrs	r3, r3, #21
 8006b6a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006b6e:	4b08      	ldr	r3, [pc, #32]	@ (8006b90 <I2C_TransferConfig+0x60>)
 8006b70:	430b      	orrs	r3, r1
 8006b72:	43db      	mvns	r3, r3
 8006b74:	ea02 0103 	and.w	r1, r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b82:	bf00      	nop
 8006b84:	371c      	adds	r7, #28
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	03ff63ff 	.word	0x03ff63ff

08006b94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b20      	cmp	r3, #32
 8006ba8:	d138      	bne.n	8006c1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	e032      	b.n	8006c1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2224      	movs	r2, #36	@ 0x24
 8006bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 0201 	bic.w	r2, r2, #1
 8006bd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006be6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6819      	ldr	r1, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f042 0201 	orr.w	r2, r2, #1
 8006c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	e000      	b.n	8006c1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c1c:	2302      	movs	r3, #2
  }
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b085      	sub	sp, #20
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b20      	cmp	r3, #32
 8006c3e:	d139      	bne.n	8006cb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d101      	bne.n	8006c4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	e033      	b.n	8006cb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2224      	movs	r2, #36	@ 0x24
 8006c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 0201 	bic.w	r2, r2, #1
 8006c6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	021b      	lsls	r3, r3, #8
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0201 	orr.w	r2, r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	e000      	b.n	8006cb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006cb4:	2302      	movs	r3, #2
  }
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e0c0      	b.n	8006e56 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d106      	bne.n	8006cee <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f00b fc43 	bl	8012574 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2203      	movs	r2, #3
 8006cf2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f007 fe69 	bl	800e9d2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d00:	2300      	movs	r3, #0
 8006d02:	73fb      	strb	r3, [r7, #15]
 8006d04:	e03e      	b.n	8006d84 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006d06:	7bfa      	ldrb	r2, [r7, #15]
 8006d08:	6879      	ldr	r1, [r7, #4]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	00db      	lsls	r3, r3, #3
 8006d12:	440b      	add	r3, r1
 8006d14:	3311      	adds	r3, #17
 8006d16:	2201      	movs	r2, #1
 8006d18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006d1a:	7bfa      	ldrb	r2, [r7, #15]
 8006d1c:	6879      	ldr	r1, [r7, #4]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	440b      	add	r3, r1
 8006d28:	3310      	adds	r3, #16
 8006d2a:	7bfa      	ldrb	r2, [r7, #15]
 8006d2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006d2e:	7bfa      	ldrb	r2, [r7, #15]
 8006d30:	6879      	ldr	r1, [r7, #4]
 8006d32:	4613      	mov	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	440b      	add	r3, r1
 8006d3c:	3313      	adds	r3, #19
 8006d3e:	2200      	movs	r2, #0
 8006d40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006d42:	7bfa      	ldrb	r2, [r7, #15]
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	4613      	mov	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	440b      	add	r3, r1
 8006d50:	3320      	adds	r3, #32
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006d56:	7bfa      	ldrb	r2, [r7, #15]
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	440b      	add	r3, r1
 8006d64:	3324      	adds	r3, #36	@ 0x24
 8006d66:	2200      	movs	r2, #0
 8006d68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	1c5a      	adds	r2, r3, #1
 8006d70:	4613      	mov	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	00db      	lsls	r3, r3, #3
 8006d78:	440b      	add	r3, r1
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	3301      	adds	r3, #1
 8006d82:	73fb      	strb	r3, [r7, #15]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	791b      	ldrb	r3, [r3, #4]
 8006d88:	7bfa      	ldrb	r2, [r7, #15]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d3bb      	bcc.n	8006d06 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d8e:	2300      	movs	r3, #0
 8006d90:	73fb      	strb	r3, [r7, #15]
 8006d92:	e044      	b.n	8006e1e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006d94:	7bfa      	ldrb	r2, [r7, #15]
 8006d96:	6879      	ldr	r1, [r7, #4]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	00db      	lsls	r3, r3, #3
 8006da0:	440b      	add	r3, r1
 8006da2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006da6:	2200      	movs	r2, #0
 8006da8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006daa:	7bfa      	ldrb	r2, [r7, #15]
 8006dac:	6879      	ldr	r1, [r7, #4]
 8006dae:	4613      	mov	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	00db      	lsls	r3, r3, #3
 8006db6:	440b      	add	r3, r1
 8006db8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006dbc:	7bfa      	ldrb	r2, [r7, #15]
 8006dbe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006dc0:	7bfa      	ldrb	r2, [r7, #15]
 8006dc2:	6879      	ldr	r1, [r7, #4]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	440b      	add	r3, r1
 8006dce:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006dd6:	7bfa      	ldrb	r2, [r7, #15]
 8006dd8:	6879      	ldr	r1, [r7, #4]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	440b      	add	r3, r1
 8006de4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006dec:	7bfa      	ldrb	r2, [r7, #15]
 8006dee:	6879      	ldr	r1, [r7, #4]
 8006df0:	4613      	mov	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	00db      	lsls	r3, r3, #3
 8006df8:	440b      	add	r3, r1
 8006dfa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006dfe:	2200      	movs	r2, #0
 8006e00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006e02:	7bfa      	ldrb	r2, [r7, #15]
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	440b      	add	r3, r1
 8006e10:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006e14:	2200      	movs	r2, #0
 8006e16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	73fb      	strb	r3, [r7, #15]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	791b      	ldrb	r3, [r3, #4]
 8006e22:	7bfa      	ldrb	r2, [r7, #15]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d3b5      	bcc.n	8006d94 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6818      	ldr	r0, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	3304      	adds	r3, #4
 8006e30:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006e34:	f007 fde8 	bl	800ea08 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	7a9b      	ldrb	r3, [r3, #10]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d102      	bne.n	8006e54 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 fcaa 	bl	80087a8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d101      	bne.n	8006e74 <HAL_PCD_Start+0x16>
 8006e70:	2302      	movs	r3, #2
 8006e72:	e012      	b.n	8006e9a <HAL_PCD_Start+0x3c>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f007 fd8f 	bl	800e9a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f009 f97f 	bl	801018e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b082      	sub	sp, #8
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d101      	bne.n	8006eb8 <HAL_PCD_Stop+0x16>
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	e012      	b.n	8006ede <HAL_PCD_Stop+0x3c>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f007 fd84 	bl	800e9d2 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f009 f974 	bl	80101bc <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b084      	sub	sp, #16
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f009 f977 	bl	80101e6 <USB_ReadInterrupts>
 8006ef8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 faa6 	bl	8007456 <PCD_EP_ISR_Handler>

    return;
 8006f0a:	e110      	b.n	800712e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d013      	beq.n	8006f3e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f28:	b292      	uxth	r2, r2
 8006f2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f00b fbb1 	bl	8012696 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006f34:	2100      	movs	r1, #0
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f8fc 	bl	8007134 <HAL_PCD_SetAddress>

    return;
 8006f3c:	e0f7      	b.n	800712e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00c      	beq.n	8006f62 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006f5a:	b292      	uxth	r2, r2
 8006f5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006f60:	e0e5      	b.n	800712e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00c      	beq.n	8006f86 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f7e:	b292      	uxth	r2, r2
 8006f80:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006f84:	e0d3      	b.n	800712e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d034      	beq.n	8006ffa <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0204 	bic.w	r2, r2, #4
 8006fa2:	b292      	uxth	r2, r2
 8006fa4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 0208 	bic.w	r2, r2, #8
 8006fba:	b292      	uxth	r2, r2
 8006fbc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d107      	bne.n	8006fda <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f00b fd8b 	bl	8012af0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f00b fb94 	bl	8012708 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006ff2:	b292      	uxth	r2, r2
 8006ff4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006ff8:	e099      	b.n	800712e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007000:	2b00      	cmp	r3, #0
 8007002:	d027      	beq.n	8007054 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800700c:	b29a      	uxth	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0208 	orr.w	r2, r2, #8
 8007016:	b292      	uxth	r2, r2
 8007018:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007024:	b29a      	uxth	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800702e:	b292      	uxth	r2, r2
 8007030:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800703c:	b29a      	uxth	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0204 	orr.w	r2, r2, #4
 8007046:	b292      	uxth	r2, r2
 8007048:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f00b fb41 	bl	80126d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007052:	e06c      	b.n	800712e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800705a:	2b00      	cmp	r3, #0
 800705c:	d040      	beq.n	80070e0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007066:	b29a      	uxth	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007070:	b292      	uxth	r2, r2
 8007072:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800707c:	2b00      	cmp	r3, #0
 800707e:	d12b      	bne.n	80070d8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007088:	b29a      	uxth	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f042 0204 	orr.w	r2, r2, #4
 8007092:	b292      	uxth	r2, r2
 8007094:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f042 0208 	orr.w	r2, r2, #8
 80070aa:	b292      	uxth	r2, r2
 80070ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	089b      	lsrs	r3, r3, #2
 80070c4:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80070ce:	2101      	movs	r1, #1
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f00b fd0d 	bl	8012af0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80070d6:	e02a      	b.n	800712e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f00b fafb 	bl	80126d4 <HAL_PCD_SuspendCallback>
    return;
 80070de:	e026      	b.n	800712e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00f      	beq.n	800710a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80070fc:	b292      	uxth	r2, r2
 80070fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f00b fab9 	bl	801267a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007108:	e011      	b.n	800712e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00c      	beq.n	800712e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800711c:	b29a      	uxth	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007126:	b292      	uxth	r2, r2
 8007128:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800712c:	bf00      	nop
  }
}
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007146:	2b01      	cmp	r3, #1
 8007148:	d101      	bne.n	800714e <HAL_PCD_SetAddress+0x1a>
 800714a:	2302      	movs	r3, #2
 800714c:	e012      	b.n	8007174 <HAL_PCD_SetAddress+0x40>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	78fa      	ldrb	r2, [r7, #3]
 800715a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	78fa      	ldrb	r2, [r7, #3]
 8007162:	4611      	mov	r1, r2
 8007164:	4618      	mov	r0, r3
 8007166:	f008 fffe 	bl	8010166 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	4608      	mov	r0, r1
 8007186:	4611      	mov	r1, r2
 8007188:	461a      	mov	r2, r3
 800718a:	4603      	mov	r3, r0
 800718c:	70fb      	strb	r3, [r7, #3]
 800718e:	460b      	mov	r3, r1
 8007190:	803b      	strh	r3, [r7, #0]
 8007192:	4613      	mov	r3, r2
 8007194:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007196:	2300      	movs	r3, #0
 8007198:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800719a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	da0e      	bge.n	80071c0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071a2:	78fb      	ldrb	r3, [r7, #3]
 80071a4:	f003 0207 	and.w	r2, r3, #7
 80071a8:	4613      	mov	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	00db      	lsls	r3, r3, #3
 80071b0:	3310      	adds	r3, #16
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	4413      	add	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2201      	movs	r2, #1
 80071bc:	705a      	strb	r2, [r3, #1]
 80071be:	e00e      	b.n	80071de <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	f003 0207 	and.w	r2, r3, #7
 80071c6:	4613      	mov	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	00db      	lsls	r3, r3, #3
 80071ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	4413      	add	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80071de:	78fb      	ldrb	r3, [r7, #3]
 80071e0:	f003 0307 	and.w	r3, r3, #7
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80071ea:	883b      	ldrh	r3, [r7, #0]
 80071ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	78ba      	ldrb	r2, [r7, #2]
 80071f8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80071fa:	78bb      	ldrb	r3, [r7, #2]
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d102      	bne.n	8007206 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800720c:	2b01      	cmp	r3, #1
 800720e:	d101      	bne.n	8007214 <HAL_PCD_EP_Open+0x98>
 8007210:	2302      	movs	r3, #2
 8007212:	e00e      	b.n	8007232 <HAL_PCD_EP_Open+0xb6>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68f9      	ldr	r1, [r7, #12]
 8007222:	4618      	mov	r0, r3
 8007224:	f007 fc0e 	bl	800ea44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8007230:	7afb      	ldrb	r3, [r7, #11]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b086      	sub	sp, #24
 800723e:	af00      	add	r7, sp, #0
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	607a      	str	r2, [r7, #4]
 8007244:	603b      	str	r3, [r7, #0]
 8007246:	460b      	mov	r3, r1
 8007248:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800724a:	7afb      	ldrb	r3, [r7, #11]
 800724c:	f003 0207 	and.w	r2, r3, #7
 8007250:	4613      	mov	r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4413      	add	r3, r2
 8007256:	00db      	lsls	r3, r3, #3
 8007258:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	4413      	add	r3, r2
 8007260:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2200      	movs	r2, #0
 8007272:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	2200      	movs	r2, #0
 8007278:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800727a:	7afb      	ldrb	r3, [r7, #11]
 800727c:	f003 0307 	and.w	r3, r3, #7
 8007280:	b2da      	uxtb	r2, r3
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6979      	ldr	r1, [r7, #20]
 800728c:	4618      	mov	r0, r3
 800728e:	f008 f8c1 	bl	800f414 <USB_EPStartXfer>

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	607a      	str	r2, [r7, #4]
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	460b      	mov	r3, r1
 80072aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072ac:	7afb      	ldrb	r3, [r7, #11]
 80072ae:	f003 0207 	and.w	r2, r3, #7
 80072b2:	4613      	mov	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	00db      	lsls	r3, r3, #3
 80072ba:	3310      	adds	r3, #16
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	4413      	add	r3, r2
 80072c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	2200      	movs	r2, #0
 80072e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2201      	movs	r2, #1
 80072e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072e8:	7afb      	ldrb	r3, [r7, #11]
 80072ea:	f003 0307 	and.w	r3, r3, #7
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6979      	ldr	r1, [r7, #20]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f008 f88a 	bl	800f414 <USB_EPStartXfer>

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b084      	sub	sp, #16
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	460b      	mov	r3, r1
 8007314:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007316:	78fb      	ldrb	r3, [r7, #3]
 8007318:	f003 0307 	and.w	r3, r3, #7
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	7912      	ldrb	r2, [r2, #4]
 8007320:	4293      	cmp	r3, r2
 8007322:	d901      	bls.n	8007328 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e03e      	b.n	80073a6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800732c:	2b00      	cmp	r3, #0
 800732e:	da0e      	bge.n	800734e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007330:	78fb      	ldrb	r3, [r7, #3]
 8007332:	f003 0207 	and.w	r2, r3, #7
 8007336:	4613      	mov	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4413      	add	r3, r2
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	3310      	adds	r3, #16
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	4413      	add	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2201      	movs	r2, #1
 800734a:	705a      	strb	r2, [r3, #1]
 800734c:	e00c      	b.n	8007368 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800734e:	78fa      	ldrb	r2, [r7, #3]
 8007350:	4613      	mov	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	4413      	add	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2201      	movs	r2, #1
 800736c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800736e:	78fb      	ldrb	r3, [r7, #3]
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	b2da      	uxtb	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007380:	2b01      	cmp	r3, #1
 8007382:	d101      	bne.n	8007388 <HAL_PCD_EP_SetStall+0x7e>
 8007384:	2302      	movs	r3, #2
 8007386:	e00e      	b.n	80073a6 <HAL_PCD_EP_SetStall+0x9c>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68f9      	ldr	r1, [r7, #12]
 8007396:	4618      	mov	r0, r3
 8007398:	f008 fdeb 	bl	800ff72 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	460b      	mov	r3, r1
 80073b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80073ba:	78fb      	ldrb	r3, [r7, #3]
 80073bc:	f003 030f 	and.w	r3, r3, #15
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	7912      	ldrb	r2, [r2, #4]
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d901      	bls.n	80073cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e040      	b.n	800744e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80073cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	da0e      	bge.n	80073f2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073d4:	78fb      	ldrb	r3, [r7, #3]
 80073d6:	f003 0207 	and.w	r2, r3, #7
 80073da:	4613      	mov	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	3310      	adds	r3, #16
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	4413      	add	r3, r2
 80073e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2201      	movs	r2, #1
 80073ee:	705a      	strb	r2, [r3, #1]
 80073f0:	e00e      	b.n	8007410 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80073f2:	78fb      	ldrb	r3, [r7, #3]
 80073f4:	f003 0207 	and.w	r2, r3, #7
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	4413      	add	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007416:	78fb      	ldrb	r3, [r7, #3]
 8007418:	f003 0307 	and.w	r3, r3, #7
 800741c:	b2da      	uxtb	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007428:	2b01      	cmp	r3, #1
 800742a:	d101      	bne.n	8007430 <HAL_PCD_EP_ClrStall+0x82>
 800742c:	2302      	movs	r3, #2
 800742e:	e00e      	b.n	800744e <HAL_PCD_EP_ClrStall+0xa0>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68f9      	ldr	r1, [r7, #12]
 800743e:	4618      	mov	r0, r3
 8007440:	f008 fde8 	bl	8010014 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b092      	sub	sp, #72	@ 0x48
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800745e:	e333      	b.n	8007ac8 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007468:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800746a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800746c:	b2db      	uxtb	r3, r3
 800746e:	f003 030f 	and.w	r3, r3, #15
 8007472:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8007476:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800747a:	2b00      	cmp	r3, #0
 800747c:	f040 8108 	bne.w	8007690 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007480:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007482:	f003 0310 	and.w	r3, r3, #16
 8007486:	2b00      	cmp	r3, #0
 8007488:	d14c      	bne.n	8007524 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	b29b      	uxth	r3, r3
 8007492:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800749a:	813b      	strh	r3, [r7, #8]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	893b      	ldrh	r3, [r7, #8]
 80074a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	3310      	adds	r3, #16
 80074b2:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074bc:	b29b      	uxth	r3, r3
 80074be:	461a      	mov	r2, r3
 80074c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	4413      	add	r3, r2
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	6812      	ldr	r2, [r2, #0]
 80074cc:	4413      	add	r3, r2
 80074ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80074d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80074dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074de:	695a      	ldr	r2, [r3, #20]
 80074e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074e2:	69db      	ldr	r3, [r3, #28]
 80074e4:	441a      	add	r2, r3
 80074e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074e8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80074ea:	2100      	movs	r1, #0
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f00b f8aa 	bl	8012646 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	7b1b      	ldrb	r3, [r3, #12]
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 82e5 	beq.w	8007ac8 <PCD_EP_ISR_Handler+0x672>
 80074fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	2b00      	cmp	r3, #0
 8007504:	f040 82e0 	bne.w	8007ac8 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	7b1b      	ldrb	r3, [r3, #12]
 800750c:	b2db      	uxtb	r3, r3
 800750e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007512:	b2da      	uxtb	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	731a      	strb	r2, [r3, #12]
 8007522:	e2d1      	b.n	8007ac8 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800752a:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007534:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007536:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800753a:	2b00      	cmp	r3, #0
 800753c:	d032      	beq.n	80075a4 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007546:	b29b      	uxth	r3, r3
 8007548:	461a      	mov	r2, r3
 800754a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	4413      	add	r3, r2
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	6812      	ldr	r2, [r2, #0]
 8007556:	4413      	add	r3, r2
 8007558:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007564:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6818      	ldr	r0, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007572:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007576:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007578:	b29b      	uxth	r3, r3
 800757a:	f008 fe86 	bl	801028a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	b29a      	uxth	r2, r3
 8007586:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800758a:	4013      	ands	r3, r2
 800758c:	817b      	strh	r3, [r7, #10]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	897a      	ldrh	r2, [r7, #10]
 8007594:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007598:	b292      	uxth	r2, r2
 800759a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f00b f825 	bl	80125ec <HAL_PCD_SetupStageCallback>
 80075a2:	e291      	b.n	8007ac8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80075a4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f280 828d 	bge.w	8007ac8 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80075ba:	4013      	ands	r3, r2
 80075bc:	81fb      	strh	r3, [r7, #14]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	89fa      	ldrh	r2, [r7, #14]
 80075c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80075c8:	b292      	uxth	r2, r2
 80075ca:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	461a      	mov	r2, r3
 80075d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	00db      	lsls	r3, r3, #3
 80075de:	4413      	add	r3, r2
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6812      	ldr	r2, [r2, #0]
 80075e4:	4413      	add	r3, r2
 80075e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80075f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075f2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80075f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075f6:	69db      	ldr	r3, [r3, #28]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d019      	beq.n	8007630 <PCD_EP_ISR_Handler+0x1da>
 80075fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d015      	beq.n	8007630 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6818      	ldr	r0, [r3, #0]
 8007608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800760a:	6959      	ldr	r1, [r3, #20]
 800760c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800760e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007612:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007614:	b29b      	uxth	r3, r3
 8007616:	f008 fe38 	bl	801028a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800761a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800761c:	695a      	ldr	r2, [r3, #20]
 800761e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007620:	69db      	ldr	r3, [r3, #28]
 8007622:	441a      	add	r2, r3
 8007624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007626:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007628:	2100      	movs	r1, #0
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f00a fff0 	bl	8012610 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007638:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800763a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800763e:	2b00      	cmp	r3, #0
 8007640:	f040 8242 	bne.w	8007ac8 <PCD_EP_ISR_Handler+0x672>
 8007644:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007646:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800764a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800764e:	f000 823b 	beq.w	8007ac8 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	b29b      	uxth	r3, r3
 800765a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800765e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007662:	81bb      	strh	r3, [r7, #12]
 8007664:	89bb      	ldrh	r3, [r7, #12]
 8007666:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800766a:	81bb      	strh	r3, [r7, #12]
 800766c:	89bb      	ldrh	r3, [r7, #12]
 800766e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007672:	81bb      	strh	r3, [r7, #12]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	89bb      	ldrh	r3, [r7, #12]
 800767a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800767e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800768a:	b29b      	uxth	r3, r3
 800768c:	8013      	strh	r3, [r2, #0]
 800768e:	e21b      	b.n	8007ac8 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	461a      	mov	r2, r3
 8007696:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4413      	add	r3, r2
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80076a2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f280 80f1 	bge.w	800788e <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	461a      	mov	r2, r3
 80076b2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4413      	add	r3, r2
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	b29a      	uxth	r2, r3
 80076be:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80076c2:	4013      	ands	r3, r2
 80076c4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	461a      	mov	r2, r3
 80076cc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80076d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80076da:	b292      	uxth	r2, r2
 80076dc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80076de:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80076e2:	4613      	mov	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	00db      	lsls	r3, r3, #3
 80076ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	4413      	add	r3, r2
 80076f2:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80076f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076f6:	7b1b      	ldrb	r3, [r3, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d123      	bne.n	8007744 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007704:	b29b      	uxth	r3, r3
 8007706:	461a      	mov	r2, r3
 8007708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	00db      	lsls	r3, r3, #3
 800770e:	4413      	add	r3, r2
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	6812      	ldr	r2, [r2, #0]
 8007714:	4413      	add	r3, r2
 8007716:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800771a:	881b      	ldrh	r3, [r3, #0]
 800771c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007720:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8007724:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 808b 	beq.w	8007844 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6818      	ldr	r0, [r3, #0]
 8007732:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007734:	6959      	ldr	r1, [r3, #20]
 8007736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007738:	88da      	ldrh	r2, [r3, #6]
 800773a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800773e:	f008 fda4 	bl	801028a <USB_ReadPMA>
 8007742:	e07f      	b.n	8007844 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007746:	78db      	ldrb	r3, [r3, #3]
 8007748:	2b02      	cmp	r3, #2
 800774a:	d109      	bne.n	8007760 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800774c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800774e:	461a      	mov	r2, r3
 8007750:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f9c6 	bl	8007ae4 <HAL_PCD_EP_DB_Receive>
 8007758:	4603      	mov	r3, r0
 800775a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800775e:	e071      	b.n	8007844 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	b29b      	uxth	r3, r3
 8007772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800777a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	461a      	mov	r2, r3
 8007782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	441a      	add	r2, r3
 800778a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800778c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007790:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007794:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007798:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800779c:	b29b      	uxth	r3, r3
 800779e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	461a      	mov	r2, r3
 80077a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d022      	beq.n	8007800 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	461a      	mov	r2, r3
 80077c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	4413      	add	r3, r2
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	6812      	ldr	r2, [r2, #0]
 80077d2:	4413      	add	r3, r2
 80077d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80077e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d02c      	beq.n	8007844 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6818      	ldr	r0, [r3, #0]
 80077ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077f0:	6959      	ldr	r1, [r3, #20]
 80077f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077f4:	891a      	ldrh	r2, [r3, #8]
 80077f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80077fa:	f008 fd46 	bl	801028a <USB_ReadPMA>
 80077fe:	e021      	b.n	8007844 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007808:	b29b      	uxth	r3, r3
 800780a:	461a      	mov	r2, r3
 800780c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	00db      	lsls	r3, r3, #3
 8007812:	4413      	add	r3, r2
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	6812      	ldr	r2, [r2, #0]
 8007818:	4413      	add	r3, r2
 800781a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007824:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8007828:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800782c:	2b00      	cmp	r3, #0
 800782e:	d009      	beq.n	8007844 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6818      	ldr	r0, [r3, #0]
 8007834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007836:	6959      	ldr	r1, [r3, #20]
 8007838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800783a:	895a      	ldrh	r2, [r3, #10]
 800783c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007840:	f008 fd23 	bl	801028a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007844:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007846:	69da      	ldr	r2, [r3, #28]
 8007848:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800784c:	441a      	add	r2, r3
 800784e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007850:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007854:	695a      	ldr	r2, [r3, #20]
 8007856:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800785a:	441a      	add	r2, r3
 800785c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800785e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d005      	beq.n	8007874 <PCD_EP_ISR_Handler+0x41e>
 8007868:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800786c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	429a      	cmp	r2, r3
 8007872:	d206      	bcs.n	8007882 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f00a fec8 	bl	8012610 <HAL_PCD_DataOutStageCallback>
 8007880:	e005      	b.n	800788e <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007888:	4618      	mov	r0, r3
 800788a:	f007 fdc3 	bl	800f414 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800788e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 8117 	beq.w	8007ac8 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800789a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800789e:	4613      	mov	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	00db      	lsls	r3, r3, #3
 80078a6:	3310      	adds	r3, #16
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	4413      	add	r3, r2
 80078ac:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80078c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078c8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	441a      	add	r2, r3
 80078d8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80078da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80078e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e8:	78db      	ldrb	r3, [r3, #3]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	f040 80a1 	bne.w	8007a32 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80078f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078f2:	2200      	movs	r2, #0
 80078f4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80078f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078f8:	7b1b      	ldrb	r3, [r3, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 8092 	beq.w	8007a24 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007900:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007906:	2b00      	cmp	r3, #0
 8007908:	d046      	beq.n	8007998 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800790a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800790c:	785b      	ldrb	r3, [r3, #1]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d126      	bne.n	8007960 <PCD_EP_ISR_Handler+0x50a>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	617b      	str	r3, [r7, #20]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007920:	b29b      	uxth	r3, r3
 8007922:	461a      	mov	r2, r3
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	4413      	add	r3, r2
 8007928:	617b      	str	r3, [r7, #20]
 800792a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	00da      	lsls	r2, r3, #3
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	4413      	add	r3, r2
 8007934:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007938:	613b      	str	r3, [r7, #16]
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	881b      	ldrh	r3, [r3, #0]
 800793e:	b29b      	uxth	r3, r3
 8007940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007944:	b29a      	uxth	r2, r3
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	801a      	strh	r2, [r3, #0]
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	881b      	ldrh	r3, [r3, #0]
 800794e:	b29b      	uxth	r3, r3
 8007950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007958:	b29a      	uxth	r2, r3
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	801a      	strh	r2, [r3, #0]
 800795e:	e061      	b.n	8007a24 <PCD_EP_ISR_Handler+0x5ce>
 8007960:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007962:	785b      	ldrb	r3, [r3, #1]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d15d      	bne.n	8007a24 <PCD_EP_ISR_Handler+0x5ce>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	61fb      	str	r3, [r7, #28]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007976:	b29b      	uxth	r3, r3
 8007978:	461a      	mov	r2, r3
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	4413      	add	r3, r2
 800797e:	61fb      	str	r3, [r7, #28]
 8007980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	00da      	lsls	r2, r3, #3
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	4413      	add	r3, r2
 800798a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800798e:	61bb      	str	r3, [r7, #24]
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	2200      	movs	r2, #0
 8007994:	801a      	strh	r2, [r3, #0]
 8007996:	e045      	b.n	8007a24 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800799e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079a0:	785b      	ldrb	r3, [r3, #1]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d126      	bne.n	80079f4 <PCD_EP_ISR_Handler+0x59e>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	461a      	mov	r2, r3
 80079b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ba:	4413      	add	r3, r2
 80079bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80079be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	00da      	lsls	r2, r3, #3
 80079c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c6:	4413      	add	r3, r2
 80079c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80079cc:	623b      	str	r3, [r7, #32]
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079d8:	b29a      	uxth	r2, r3
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	801a      	strh	r2, [r3, #0]
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	801a      	strh	r2, [r3, #0]
 80079f2:	e017      	b.n	8007a24 <PCD_EP_ISR_Handler+0x5ce>
 80079f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079f6:	785b      	ldrb	r3, [r3, #1]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d113      	bne.n	8007a24 <PCD_EP_ISR_Handler+0x5ce>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	461a      	mov	r2, r3
 8007a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a0a:	4413      	add	r3, r2
 8007a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	00da      	lsls	r2, r3, #3
 8007a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a16:	4413      	add	r3, r2
 8007a18:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a20:	2200      	movs	r2, #0
 8007a22:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007a24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f00a fe0b 	bl	8012646 <HAL_PCD_DataInStageCallback>
 8007a30:	e04a      	b.n	8007ac8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007a32:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d13f      	bne.n	8007abc <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	461a      	mov	r2, r3
 8007a48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	00db      	lsls	r3, r3, #3
 8007a4e:	4413      	add	r3, r2
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6812      	ldr	r2, [r2, #0]
 8007a54:	4413      	add	r3, r2
 8007a56:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a60:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8007a62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a64:	699a      	ldr	r2, [r3, #24]
 8007a66:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d906      	bls.n	8007a7a <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8007a6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a6e:	699a      	ldr	r2, [r3, #24]
 8007a70:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007a72:	1ad2      	subs	r2, r2, r3
 8007a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a76:	619a      	str	r2, [r3, #24]
 8007a78:	e002      	b.n	8007a80 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8007a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007a80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d106      	bne.n	8007a96 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007a88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f00a fdd9 	bl	8012646 <HAL_PCD_DataInStageCallback>
 8007a94:	e018      	b.n	8007ac8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a98:	695a      	ldr	r2, [r3, #20]
 8007a9a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007a9c:	441a      	add	r2, r3
 8007a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007aa0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007aa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007aa4:	69da      	ldr	r2, [r3, #28]
 8007aa6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007aa8:	441a      	add	r2, r3
 8007aaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007aac:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f007 fcad 	bl	800f414 <USB_EPStartXfer>
 8007aba:	e005      	b.n	8007ac8 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007abc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007abe:	461a      	mov	r2, r3
 8007ac0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f917 	bl	8007cf6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	b21b      	sxth	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f6ff acc3 	blt.w	8007460 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3748      	adds	r7, #72	@ 0x48
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	4613      	mov	r3, r2
 8007af0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007af2:	88fb      	ldrh	r3, [r7, #6]
 8007af4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d07c      	beq.n	8007bf6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	461a      	mov	r2, r3
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	00db      	lsls	r3, r3, #3
 8007b0e:	4413      	add	r3, r2
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	6812      	ldr	r2, [r2, #0]
 8007b14:	4413      	add	r3, r2
 8007b16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b20:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	699a      	ldr	r2, [r3, #24]
 8007b26:	8b7b      	ldrh	r3, [r7, #26]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d306      	bcc.n	8007b3a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	699a      	ldr	r2, [r3, #24]
 8007b30:	8b7b      	ldrh	r3, [r7, #26]
 8007b32:	1ad2      	subs	r2, r2, r3
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	619a      	str	r2, [r3, #24]
 8007b38:	e002      	b.n	8007b40 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d123      	bne.n	8007b90 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b62:	833b      	strh	r3, [r7, #24]
 8007b64:	8b3b      	ldrh	r3, [r7, #24]
 8007b66:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007b6a:	833b      	strh	r3, [r7, #24]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	461a      	mov	r2, r3
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	441a      	add	r2, r3
 8007b7a:	8b3b      	ldrh	r3, [r7, #24]
 8007b7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007b90:	88fb      	ldrh	r3, [r7, #6]
 8007b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d01f      	beq.n	8007bda <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bb4:	82fb      	strh	r3, [r7, #22]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	441a      	add	r2, r3
 8007bc4:	8afb      	ldrh	r3, [r7, #22]
 8007bc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bd2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007bda:	8b7b      	ldrh	r3, [r7, #26]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 8085 	beq.w	8007cec <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6818      	ldr	r0, [r3, #0]
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	6959      	ldr	r1, [r3, #20]
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	891a      	ldrh	r2, [r3, #8]
 8007bee:	8b7b      	ldrh	r3, [r7, #26]
 8007bf0:	f008 fb4b 	bl	801028a <USB_ReadPMA>
 8007bf4:	e07a      	b.n	8007cec <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	4413      	add	r3, r2
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	6812      	ldr	r2, [r2, #0]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c1a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	699a      	ldr	r2, [r3, #24]
 8007c20:	8b7b      	ldrh	r3, [r7, #26]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d306      	bcc.n	8007c34 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	699a      	ldr	r2, [r3, #24]
 8007c2a:	8b7b      	ldrh	r3, [r7, #26]
 8007c2c:	1ad2      	subs	r2, r2, r3
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	619a      	str	r2, [r3, #24]
 8007c32:	e002      	b.n	8007c3a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2200      	movs	r2, #0
 8007c38:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d123      	bne.n	8007c8a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	461a      	mov	r2, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c5c:	83fb      	strh	r3, [r7, #30]
 8007c5e:	8bfb      	ldrh	r3, [r7, #30]
 8007c60:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c64:	83fb      	strh	r3, [r7, #30]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	441a      	add	r2, r3
 8007c74:	8bfb      	ldrh	r3, [r7, #30]
 8007c76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007c8a:	88fb      	ldrh	r3, [r7, #6]
 8007c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d11f      	bne.n	8007cd4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cae:	83bb      	strh	r3, [r7, #28]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	441a      	add	r2, r3
 8007cbe:	8bbb      	ldrh	r3, [r7, #28]
 8007cc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ccc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007cd4:	8b7b      	ldrh	r3, [r7, #26]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d008      	beq.n	8007cec <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6818      	ldr	r0, [r3, #0]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	6959      	ldr	r1, [r3, #20]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	895a      	ldrh	r2, [r3, #10]
 8007ce6:	8b7b      	ldrh	r3, [r7, #26]
 8007ce8:	f008 facf 	bl	801028a <USB_ReadPMA>
    }
  }

  return count;
 8007cec:	8b7b      	ldrh	r3, [r7, #26]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3720      	adds	r7, #32
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b0a6      	sub	sp, #152	@ 0x98
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	60f8      	str	r0, [r7, #12]
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	4613      	mov	r3, r2
 8007d02:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007d04:	88fb      	ldrh	r3, [r7, #6]
 8007d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f000 81f7 	beq.w	80080fe <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	00db      	lsls	r3, r3, #3
 8007d22:	4413      	add	r3, r2
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	6812      	ldr	r2, [r2, #0]
 8007d28:	4413      	add	r3, r2
 8007d2a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d2e:	881b      	ldrh	r3, [r3, #0]
 8007d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d34:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	699a      	ldr	r2, [r3, #24]
 8007d3c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d907      	bls.n	8007d54 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	699a      	ldr	r2, [r3, #24]
 8007d48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007d4c:	1ad2      	subs	r2, r2, r3
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	619a      	str	r2, [r3, #24]
 8007d52:	e002      	b.n	8007d5a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2200      	movs	r2, #0
 8007d58:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f040 80e1 	bne.w	8007f26 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	785b      	ldrb	r3, [r3, #1]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d126      	bne.n	8007dba <HAL_PCD_EP_DB_Transmit+0xc4>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d80:	4413      	add	r3, r2
 8007d82:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	00da      	lsls	r2, r3, #3
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d96:	881b      	ldrh	r3, [r3, #0]
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da2:	801a      	strh	r2, [r3, #0]
 8007da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da6:	881b      	ldrh	r3, [r3, #0]
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db6:	801a      	strh	r2, [r3, #0]
 8007db8:	e01a      	b.n	8007df0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	785b      	ldrb	r3, [r3, #1]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d116      	bne.n	8007df0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd6:	4413      	add	r3, r2
 8007dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	00da      	lsls	r2, r3, #3
 8007de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de2:	4413      	add	r3, r2
 8007de4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dec:	2200      	movs	r2, #0
 8007dee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	785b      	ldrb	r3, [r3, #1]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d126      	bne.n	8007e4c <HAL_PCD_EP_DB_Transmit+0x156>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	623b      	str	r3, [r7, #32]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	461a      	mov	r2, r3
 8007e10:	6a3b      	ldr	r3, [r7, #32]
 8007e12:	4413      	add	r3, r2
 8007e14:	623b      	str	r3, [r7, #32]
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	00da      	lsls	r2, r3, #3
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	4413      	add	r3, r2
 8007e20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e24:	61fb      	str	r3, [r7, #28]
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	801a      	strh	r2, [r3, #0]
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	881b      	ldrh	r3, [r3, #0]
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	801a      	strh	r2, [r3, #0]
 8007e4a:	e017      	b.n	8007e7c <HAL_PCD_EP_DB_Transmit+0x186>
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	785b      	ldrb	r3, [r3, #1]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d113      	bne.n	8007e7c <HAL_PCD_EP_DB_Transmit+0x186>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	461a      	mov	r2, r3
 8007e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e62:	4413      	add	r3, r2
 8007e64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	00da      	lsls	r2, r3, #3
 8007e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6e:	4413      	add	r3, r2
 8007e70:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e78:	2200      	movs	r2, #0
 8007e7a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	78db      	ldrb	r3, [r3, #3]
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d123      	bne.n	8007ecc <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	881b      	ldrh	r3, [r3, #0]
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e9e:	837b      	strh	r3, [r7, #26]
 8007ea0:	8b7b      	ldrh	r3, [r7, #26]
 8007ea2:	f083 0320 	eor.w	r3, r3, #32
 8007ea6:	837b      	strh	r3, [r7, #26]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	461a      	mov	r2, r3
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	441a      	add	r2, r3
 8007eb6:	8b7b      	ldrh	r3, [r7, #26]
 8007eb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ebc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ec0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f00a fbb7 	bl	8012646 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007ed8:	88fb      	ldrh	r3, [r7, #6]
 8007eda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d01f      	beq.n	8007f22 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ef8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007efc:	833b      	strh	r3, [r7, #24]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	461a      	mov	r2, r3
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	441a      	add	r2, r3
 8007f0c:	8b3b      	ldrh	r3, [r7, #24]
 8007f0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	e31f      	b.n	8008566 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007f26:	88fb      	ldrh	r3, [r7, #6]
 8007f28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d021      	beq.n	8007f74 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	461a      	mov	r2, r3
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f4a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	441a      	add	r2, r3
 8007f5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007f60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	f040 82ca 	bne.w	8008514 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	695a      	ldr	r2, [r3, #20]
 8007f84:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007f88:	441a      	add	r2, r3
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	69da      	ldr	r2, [r3, #28]
 8007f92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007f96:	441a      	add	r2, r3
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	6a1a      	ldr	r2, [r3, #32]
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d309      	bcc.n	8007fbc <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	6a1a      	ldr	r2, [r3, #32]
 8007fb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007fb4:	1ad2      	subs	r2, r2, r3
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	621a      	str	r2, [r3, #32]
 8007fba:	e015      	b.n	8007fe8 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	6a1b      	ldr	r3, [r3, #32]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d107      	bne.n	8007fd4 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8007fc4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007fc8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007fd2:	e009      	b.n	8007fe8 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	785b      	ldrb	r3, [r3, #1]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d15f      	bne.n	80080b0 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	461a      	mov	r2, r3
 8008002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008004:	4413      	add	r3, r2
 8008006:	643b      	str	r3, [r7, #64]	@ 0x40
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	00da      	lsls	r2, r3, #3
 800800e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008010:	4413      	add	r3, r2
 8008012:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	b29b      	uxth	r3, r3
 800801e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008022:	b29a      	uxth	r2, r3
 8008024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008026:	801a      	strh	r2, [r3, #0]
 8008028:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10a      	bne.n	8008044 <HAL_PCD_EP_DB_Transmit+0x34e>
 800802e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	b29b      	uxth	r3, r3
 8008034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800803c:	b29a      	uxth	r2, r3
 800803e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008040:	801a      	strh	r2, [r3, #0]
 8008042:	e051      	b.n	80080e8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008044:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008046:	2b3e      	cmp	r3, #62	@ 0x3e
 8008048:	d816      	bhi.n	8008078 <HAL_PCD_EP_DB_Transmit+0x382>
 800804a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800804c:	085b      	lsrs	r3, r3, #1
 800804e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008050:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	2b00      	cmp	r3, #0
 8008058:	d002      	beq.n	8008060 <HAL_PCD_EP_DB_Transmit+0x36a>
 800805a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800805c:	3301      	adds	r3, #1
 800805e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008062:	881b      	ldrh	r3, [r3, #0]
 8008064:	b29a      	uxth	r2, r3
 8008066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008068:	b29b      	uxth	r3, r3
 800806a:	029b      	lsls	r3, r3, #10
 800806c:	b29b      	uxth	r3, r3
 800806e:	4313      	orrs	r3, r2
 8008070:	b29a      	uxth	r2, r3
 8008072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008074:	801a      	strh	r2, [r3, #0]
 8008076:	e037      	b.n	80080e8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008078:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800807a:	095b      	lsrs	r3, r3, #5
 800807c:	653b      	str	r3, [r7, #80]	@ 0x50
 800807e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008080:	f003 031f 	and.w	r3, r3, #31
 8008084:	2b00      	cmp	r3, #0
 8008086:	d102      	bne.n	800808e <HAL_PCD_EP_DB_Transmit+0x398>
 8008088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800808a:	3b01      	subs	r3, #1
 800808c:	653b      	str	r3, [r7, #80]	@ 0x50
 800808e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	b29a      	uxth	r2, r3
 8008094:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008096:	b29b      	uxth	r3, r3
 8008098:	029b      	lsls	r3, r3, #10
 800809a:	b29b      	uxth	r3, r3
 800809c:	4313      	orrs	r3, r2
 800809e:	b29b      	uxth	r3, r3
 80080a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ac:	801a      	strh	r2, [r3, #0]
 80080ae:	e01b      	b.n	80080e8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	785b      	ldrb	r3, [r3, #1]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d117      	bne.n	80080e8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	461a      	mov	r2, r3
 80080ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080cc:	4413      	add	r3, r2
 80080ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	00da      	lsls	r2, r3, #3
 80080d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080d8:	4413      	add	r3, r2
 80080da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80080de:	647b      	str	r3, [r7, #68]	@ 0x44
 80080e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080e6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6818      	ldr	r0, [r3, #0]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	6959      	ldr	r1, [r3, #20]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	891a      	ldrh	r2, [r3, #8]
 80080f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	f008 f885 	bl	8010206 <USB_WritePMA>
 80080fc:	e20a      	b.n	8008514 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008106:	b29b      	uxth	r3, r3
 8008108:	461a      	mov	r2, r3
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	00db      	lsls	r3, r3, #3
 8008110:	4413      	add	r3, r2
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	6812      	ldr	r2, [r2, #0]
 8008116:	4413      	add	r3, r2
 8008118:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008122:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	699a      	ldr	r2, [r3, #24]
 800812a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800812e:	429a      	cmp	r2, r3
 8008130:	d307      	bcc.n	8008142 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	699a      	ldr	r2, [r3, #24]
 8008136:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800813a:	1ad2      	subs	r2, r2, r3
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	619a      	str	r2, [r3, #24]
 8008140:	e002      	b.n	8008148 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	2200      	movs	r2, #0
 8008146:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	2b00      	cmp	r3, #0
 800814e:	f040 80f6 	bne.w	800833e <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	785b      	ldrb	r3, [r3, #1]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d126      	bne.n	80081a8 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008168:	b29b      	uxth	r3, r3
 800816a:	461a      	mov	r2, r3
 800816c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800816e:	4413      	add	r3, r2
 8008170:	677b      	str	r3, [r7, #116]	@ 0x74
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	00da      	lsls	r2, r3, #3
 8008178:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800817a:	4413      	add	r3, r2
 800817c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008180:	673b      	str	r3, [r7, #112]	@ 0x70
 8008182:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008184:	881b      	ldrh	r3, [r3, #0]
 8008186:	b29b      	uxth	r3, r3
 8008188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800818c:	b29a      	uxth	r2, r3
 800818e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008190:	801a      	strh	r2, [r3, #0]
 8008192:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008194:	881b      	ldrh	r3, [r3, #0]
 8008196:	b29b      	uxth	r3, r3
 8008198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800819c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081a4:	801a      	strh	r2, [r3, #0]
 80081a6:	e01a      	b.n	80081de <HAL_PCD_EP_DB_Transmit+0x4e8>
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	785b      	ldrb	r3, [r3, #1]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d116      	bne.n	80081de <HAL_PCD_EP_DB_Transmit+0x4e8>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081be:	b29b      	uxth	r3, r3
 80081c0:	461a      	mov	r2, r3
 80081c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081c4:	4413      	add	r3, r2
 80081c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	00da      	lsls	r2, r3, #3
 80081ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081d0:	4413      	add	r3, r2
 80081d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80081d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80081d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081da:	2200      	movs	r2, #0
 80081dc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	785b      	ldrb	r3, [r3, #1]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d12f      	bne.n	800824e <HAL_PCD_EP_DB_Transmit+0x558>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081fe:	b29b      	uxth	r3, r3
 8008200:	461a      	mov	r2, r3
 8008202:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008206:	4413      	add	r3, r2
 8008208:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	00da      	lsls	r2, r3, #3
 8008212:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008216:	4413      	add	r3, r2
 8008218:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800821c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008220:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	b29b      	uxth	r3, r3
 8008228:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800822c:	b29a      	uxth	r2, r3
 800822e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008232:	801a      	strh	r2, [r3, #0]
 8008234:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	b29b      	uxth	r3, r3
 800823c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008244:	b29a      	uxth	r2, r3
 8008246:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800824a:	801a      	strh	r2, [r3, #0]
 800824c:	e01c      	b.n	8008288 <HAL_PCD_EP_DB_Transmit+0x592>
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	785b      	ldrb	r3, [r3, #1]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d118      	bne.n	8008288 <HAL_PCD_EP_DB_Transmit+0x592>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800825e:	b29b      	uxth	r3, r3
 8008260:	461a      	mov	r2, r3
 8008262:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008266:	4413      	add	r3, r2
 8008268:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	00da      	lsls	r2, r3, #3
 8008272:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008276:	4413      	add	r3, r2
 8008278:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800827c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008280:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008284:	2200      	movs	r2, #0
 8008286:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	78db      	ldrb	r3, [r3, #3]
 800828c:	2b02      	cmp	r3, #2
 800828e:	d127      	bne.n	80082e0 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	461a      	mov	r2, r3
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	881b      	ldrh	r3, [r3, #0]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082aa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80082ae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80082b2:	f083 0320 	eor.w	r3, r3, #32
 80082b6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	461a      	mov	r2, r3
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	441a      	add	r2, r3
 80082c8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80082cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082dc:	b29b      	uxth	r3, r3
 80082de:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	4619      	mov	r1, r3
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f00a f9ad 	bl	8012646 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80082ec:	88fb      	ldrh	r3, [r7, #6]
 80082ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d121      	bne.n	800833a <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	b29b      	uxth	r3, r3
 8008308:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800830c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008310:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	461a      	mov	r2, r3
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	441a      	add	r2, r3
 8008322:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008326:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800832a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800832e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008336:	b29b      	uxth	r3, r3
 8008338:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800833a:	2300      	movs	r3, #0
 800833c:	e113      	b.n	8008566 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800833e:	88fb      	ldrh	r3, [r7, #6]
 8008340:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d121      	bne.n	800838c <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	461a      	mov	r2, r3
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	b29b      	uxth	r3, r3
 800835a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800835e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008362:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	461a      	mov	r2, r3
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	441a      	add	r2, r3
 8008374:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008378:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800837c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008380:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008388:	b29b      	uxth	r3, r3
 800838a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008392:	2b01      	cmp	r3, #1
 8008394:	f040 80be 	bne.w	8008514 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	695a      	ldr	r2, [r3, #20]
 800839c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083a0:	441a      	add	r2, r3
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	69da      	ldr	r2, [r3, #28]
 80083aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083ae:	441a      	add	r2, r3
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	6a1a      	ldr	r2, [r3, #32]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d309      	bcc.n	80083d4 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	6a1a      	ldr	r2, [r3, #32]
 80083ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083cc:	1ad2      	subs	r2, r2, r3
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	621a      	str	r2, [r3, #32]
 80083d2:	e015      	b.n	8008400 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	6a1b      	ldr	r3, [r3, #32]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d107      	bne.n	80083ec <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80083dc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083e0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80083ea:	e009      	b.n	8008400 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	2200      	movs	r2, #0
 80083f6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	785b      	ldrb	r3, [r3, #1]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d15f      	bne.n	80084ce <HAL_PCD_EP_DB_Transmit+0x7d8>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800841c:	b29b      	uxth	r3, r3
 800841e:	461a      	mov	r2, r3
 8008420:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008422:	4413      	add	r3, r2
 8008424:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	00da      	lsls	r2, r3, #3
 800842c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800842e:	4413      	add	r3, r2
 8008430:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008434:	667b      	str	r3, [r7, #100]	@ 0x64
 8008436:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008438:	881b      	ldrh	r3, [r3, #0]
 800843a:	b29b      	uxth	r3, r3
 800843c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008440:	b29a      	uxth	r2, r3
 8008442:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008444:	801a      	strh	r2, [r3, #0]
 8008446:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10a      	bne.n	8008462 <HAL_PCD_EP_DB_Transmit+0x76c>
 800844c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800844e:	881b      	ldrh	r3, [r3, #0]
 8008450:	b29b      	uxth	r3, r3
 8008452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800845a:	b29a      	uxth	r2, r3
 800845c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800845e:	801a      	strh	r2, [r3, #0]
 8008460:	e04e      	b.n	8008500 <HAL_PCD_EP_DB_Transmit+0x80a>
 8008462:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008464:	2b3e      	cmp	r3, #62	@ 0x3e
 8008466:	d816      	bhi.n	8008496 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8008468:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800846a:	085b      	lsrs	r3, r3, #1
 800846c:	663b      	str	r3, [r7, #96]	@ 0x60
 800846e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008470:	f003 0301 	and.w	r3, r3, #1
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <HAL_PCD_EP_DB_Transmit+0x788>
 8008478:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800847a:	3301      	adds	r3, #1
 800847c:	663b      	str	r3, [r7, #96]	@ 0x60
 800847e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008480:	881b      	ldrh	r3, [r3, #0]
 8008482:	b29a      	uxth	r2, r3
 8008484:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008486:	b29b      	uxth	r3, r3
 8008488:	029b      	lsls	r3, r3, #10
 800848a:	b29b      	uxth	r3, r3
 800848c:	4313      	orrs	r3, r2
 800848e:	b29a      	uxth	r2, r3
 8008490:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008492:	801a      	strh	r2, [r3, #0]
 8008494:	e034      	b.n	8008500 <HAL_PCD_EP_DB_Transmit+0x80a>
 8008496:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008498:	095b      	lsrs	r3, r3, #5
 800849a:	663b      	str	r3, [r7, #96]	@ 0x60
 800849c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800849e:	f003 031f 	and.w	r3, r3, #31
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d102      	bne.n	80084ac <HAL_PCD_EP_DB_Transmit+0x7b6>
 80084a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084a8:	3b01      	subs	r3, #1
 80084aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80084ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	029b      	lsls	r3, r3, #10
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	4313      	orrs	r3, r2
 80084bc:	b29b      	uxth	r3, r3
 80084be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084ca:	801a      	strh	r2, [r3, #0]
 80084cc:	e018      	b.n	8008500 <HAL_PCD_EP_DB_Transmit+0x80a>
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	785b      	ldrb	r3, [r3, #1]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d114      	bne.n	8008500 <HAL_PCD_EP_DB_Transmit+0x80a>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084de:	b29b      	uxth	r3, r3
 80084e0:	461a      	mov	r2, r3
 80084e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084e4:	4413      	add	r3, r2
 80084e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	00da      	lsls	r2, r3, #3
 80084ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084f0:	4413      	add	r3, r2
 80084f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80084f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80084f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084fe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6818      	ldr	r0, [r3, #0]
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	6959      	ldr	r1, [r3, #20]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	895a      	ldrh	r2, [r3, #10]
 800850c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800850e:	b29b      	uxth	r3, r3
 8008510:	f007 fe79 	bl	8010206 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	461a      	mov	r2, r3
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	b29b      	uxth	r3, r3
 8008526:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800852a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800852e:	82fb      	strh	r3, [r7, #22]
 8008530:	8afb      	ldrh	r3, [r7, #22]
 8008532:	f083 0310 	eor.w	r3, r3, #16
 8008536:	82fb      	strh	r3, [r7, #22]
 8008538:	8afb      	ldrh	r3, [r7, #22]
 800853a:	f083 0320 	eor.w	r3, r3, #32
 800853e:	82fb      	strh	r3, [r7, #22]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	441a      	add	r2, r3
 800854e:	8afb      	ldrh	r3, [r7, #22]
 8008550:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008554:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008558:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800855c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008560:	b29b      	uxth	r3, r3
 8008562:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3798      	adds	r7, #152	@ 0x98
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800856e:	b480      	push	{r7}
 8008570:	b087      	sub	sp, #28
 8008572:	af00      	add	r7, sp, #0
 8008574:	60f8      	str	r0, [r7, #12]
 8008576:	607b      	str	r3, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	817b      	strh	r3, [r7, #10]
 800857c:	4613      	mov	r3, r2
 800857e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008580:	897b      	ldrh	r3, [r7, #10]
 8008582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008586:	b29b      	uxth	r3, r3
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00b      	beq.n	80085a4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800858c:	897b      	ldrh	r3, [r7, #10]
 800858e:	f003 0207 	and.w	r2, r3, #7
 8008592:	4613      	mov	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	00db      	lsls	r3, r3, #3
 800859a:	3310      	adds	r3, #16
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	4413      	add	r3, r2
 80085a0:	617b      	str	r3, [r7, #20]
 80085a2:	e009      	b.n	80085b8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80085a4:	897a      	ldrh	r2, [r7, #10]
 80085a6:	4613      	mov	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	00db      	lsls	r3, r3, #3
 80085ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	4413      	add	r3, r2
 80085b6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80085b8:	893b      	ldrh	r3, [r7, #8]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d107      	bne.n	80085ce <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2200      	movs	r2, #0
 80085c2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	80da      	strh	r2, [r3, #6]
 80085cc:	e00b      	b.n	80085e6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2201      	movs	r2, #1
 80085d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	0c1b      	lsrs	r3, r3, #16
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	371c      	adds	r7, #28
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4

  /* Enable BCD feature */
  USBx->BCDR |= USB_BCDR_BCDEN;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008610:	b29b      	uxth	r3, r3
 8008612:	f043 0301 	orr.w	r3, r3, #1
 8008616:	b29a      	uxth	r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  /* Enable DCD : Data Contact Detect */
  USBx->BCDR &= ~(USB_BCDR_PDEN);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008624:	b29b      	uxth	r3, r3
 8008626:	f023 0304 	bic.w	r3, r3, #4
 800862a:	b29a      	uxth	r2, r3
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  USBx->BCDR &= ~(USB_BCDR_SDEN);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008638:	b29b      	uxth	r3, r3
 800863a:	f023 0308 	bic.w	r3, r3, #8
 800863e:	b29a      	uxth	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  USBx->BCDR |= USB_BCDR_DCDEN;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800864c:	b29b      	uxth	r3, r3
 800864e:	f043 0302 	orr.w	r3, r3, #2
 8008652:	b29a      	uxth	r2, r3
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_PCDEx_DeActivateBCD>:
  * @brief  Deactivate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_DeActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 0U;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4

  /* Disable BCD feature */
  USBx->BCDR &= ~(USB_BCDR_BCDEN);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008684:	b29b      	uxth	r3, r3
 8008686:	f023 0301 	bic.w	r3, r3, #1
 800868a:	b29a      	uxth	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <HAL_PCDEx_BCD_VBUSDetect>:
  * @brief  Handle BatteryCharging Process.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCDEx_BCD_VBUSDetect(PCD_HandleTypeDef *hpcd)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = HAL_GetTick();
 80086ae:	f7fb ff53 	bl	8004558 <HAL_GetTick>
 80086b2:	60b8      	str	r0, [r7, #8]

  /* Wait for Min DCD Timeout */
  HAL_Delay(300U);
 80086b4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80086b8:	f7fb ff5a 	bl	8004570 <HAL_Delay>

  /* Data Pin Contact ? Check Detect flag */
  if ((USBx->BCDR & USB_BCDR_DCDET) == USB_BCDR_DCDET)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	f003 0310 	and.w	r3, r3, #16
 80086c8:	2b10      	cmp	r3, #16
 80086ca:	d103      	bne.n	80086d4 <HAL_PCDEx_BCD_VBUSDetect+0x34>
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_CONTACT_DETECTION);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CONTACT_DETECTION);
 80086cc:	21fe      	movs	r1, #254	@ 0xfe
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f00a f836 	bl	8012740 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }
  /* Primary detection: checks if connected to Standard Downstream Port
  (without charging capability) */
  USBx->BCDR &= ~(USB_BCDR_DCDEN);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80086da:	b29b      	uxth	r3, r3
 80086dc:	f023 0302 	bic.w	r3, r3, #2
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  HAL_Delay(50U);
 80086e8:	2032      	movs	r0, #50	@ 0x32
 80086ea:	f7fb ff41 	bl	8004570 <HAL_Delay>
  USBx->BCDR |= (USB_BCDR_PDEN);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	f043 0304 	orr.w	r3, r3, #4
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  HAL_Delay(50U);
 8008702:	2032      	movs	r0, #50	@ 0x32
 8008704:	f7fb ff34 	bl	8004570 <HAL_Delay>

  /* If Charger detect ? */
  if ((USBx->BCDR & USB_BCDR_PDET) == USB_BCDR_PDET)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800870e:	b29b      	uxth	r3, r3
 8008710:	f003 0320 	and.w	r3, r3, #32
 8008714:	2b20      	cmp	r3, #32
 8008716:	d12b      	bne.n	8008770 <HAL_PCDEx_BCD_VBUSDetect+0xd0>
  {
    /* Start secondary detection to check connection to Charging Downstream
    Port or Dedicated Charging Port */
    USBx->BCDR &= ~(USB_BCDR_PDEN);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800871e:	b29b      	uxth	r3, r3
 8008720:	f023 0304 	bic.w	r3, r3, #4
 8008724:	b29a      	uxth	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    HAL_Delay(50U);
 800872c:	2032      	movs	r0, #50	@ 0x32
 800872e:	f7fb ff1f 	bl	8004570 <HAL_Delay>
    USBx->BCDR |= (USB_BCDR_SDEN);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008738:	b29b      	uxth	r3, r3
 800873a:	f043 0308 	orr.w	r3, r3, #8
 800873e:	b29a      	uxth	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    HAL_Delay(50U);
 8008746:	2032      	movs	r0, #50	@ 0x32
 8008748:	f7fb ff12 	bl	8004570 <HAL_Delay>

    /* If CDP ? */
    if ((USBx->BCDR & USB_BCDR_SDET) == USB_BCDR_SDET)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008752:	b29b      	uxth	r3, r3
 8008754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008758:	2b40      	cmp	r3, #64	@ 0x40
 800875a:	d104      	bne.n	8008766 <HAL_PCDEx_BCD_VBUSDetect+0xc6>
    {
      /* Dedicated Downstream Port DCP */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->BCDCallback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
#else
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
 800875c:	21fb      	movs	r1, #251	@ 0xfb
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f009 ffee 	bl	8012740 <HAL_PCDEx_BCD_Callback>
 8008764:	e008      	b.n	8008778 <HAL_PCDEx_BCD_VBUSDetect+0xd8>
    {
      /* Charging Downstream Port CDP */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->BCDCallback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
#else
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
 8008766:	21fc      	movs	r1, #252	@ 0xfc
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f009 ffe9 	bl	8012740 <HAL_PCDEx_BCD_Callback>
 800876e:	e003      	b.n	8008778 <HAL_PCDEx_BCD_VBUSDetect+0xd8>
  {
    /* Standard Downstream Port */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
 8008770:	21fd      	movs	r1, #253	@ 0xfd
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f009 ffe4 	bl	8012740 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Battery Charging capability discovery finished Start Enumeration */
  (void)HAL_PCDEx_DeActivateBCD(hpcd);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7ff ff75 	bl	8008668 <HAL_PCDEx_DeActivateBCD>

  /* Check for the Timeout, else start USB Device */
  if ((HAL_GetTick() - tickstart) > 1000U)
 800877e:	f7fb feeb 	bl	8004558 <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800878c:	d904      	bls.n	8008798 <HAL_PCDEx_BCD_VBUSDetect+0xf8>
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_ERROR);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_ERROR);
 800878e:	21ff      	movs	r1, #255	@ 0xff
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f009 ffd5 	bl	8012740 <HAL_PCDEx_BCD_Callback>
    hpcd->BCDCallback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }
}
 8008796:	e003      	b.n	80087a0 <HAL_PCDEx_BCD_VBUSDetect+0x100>
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
 8008798:	2100      	movs	r1, #0
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f009 ffd0 	bl	8012740 <HAL_PCDEx_BCD_Callback>
}
 80087a0:	bf00      	nop
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	f043 0301 	orr.w	r3, r3, #1
 80087d2:	b29a      	uxth	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	f043 0302 	orr.w	r3, r3, #2
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80087fc:	b480      	push	{r7}
 80087fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008800:	4b05      	ldr	r3, [pc, #20]	@ (8008818 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a04      	ldr	r2, [pc, #16]	@ (8008818 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800880a:	6013      	str	r3, [r2, #0]
}
 800880c:	bf00      	nop
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	40007000 	.word	0x40007000

0800881c <HAL_PWR_DisableBkUpAccess>:
  * @brief Disable access to the backup domain
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 800881c:	b480      	push	{r7}
 800881e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8008820:	4b05      	ldr	r3, [pc, #20]	@ (8008838 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a04      	ldr	r2, [pc, #16]	@ (8008838 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8008826:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800882a:	6013      	str	r3, [r2, #0]
}
 800882c:	bf00      	nop
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	40007000 	.word	0x40007000

0800883c <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8008844:	4b2b      	ldr	r3, [pc, #172]	@ (80088f4 <HAL_PWR_ConfigPVD+0xb8>)
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	f023 020e 	bic.w	r2, r3, #14
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4928      	ldr	r1, [pc, #160]	@ (80088f4 <HAL_PWR_ConfigPVD+0xb8>)
 8008852:	4313      	orrs	r3, r2
 8008854:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8008856:	4b28      	ldr	r3, [pc, #160]	@ (80088f8 <HAL_PWR_ConfigPVD+0xbc>)
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	4a27      	ldr	r2, [pc, #156]	@ (80088f8 <HAL_PWR_ConfigPVD+0xbc>)
 800885c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008860:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8008862:	4b25      	ldr	r3, [pc, #148]	@ (80088f8 <HAL_PWR_ConfigPVD+0xbc>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a24      	ldr	r2, [pc, #144]	@ (80088f8 <HAL_PWR_ConfigPVD+0xbc>)
 8008868:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800886c:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800886e:	4b22      	ldr	r3, [pc, #136]	@ (80088f8 <HAL_PWR_ConfigPVD+0xbc>)
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	4a21      	ldr	r2, [pc, #132]	@ (80088f8 <HAL_PWR_ConfigPVD+0xbc>)
 8008874:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008878:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800887a:	4b1f      	ldr	r3, [pc, #124]	@ (80088f8 <HAL_PWR_ConfigPVD+0xbc>)
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	4a1e      	ldr	r2, [pc, #120]	@ (80088f8 <HAL_PWR_ConfigPVD+0xbc>)
 8008880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008884:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d005      	beq.n	800889e <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8008892:	4b19      	ldr	r3, [pc, #100]	@ (80088f8 <HAL_PWR_ConfigPVD+0xbc>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a18      	ldr	r2, [pc, #96]	@ (80088f8 <HAL_PWR_ConfigPVD+0xbc>)
 8008898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800889c:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d005      	beq.n	80088b6 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80088aa:	4b13      	ldr	r3, [pc, #76]	@ (80088f8 <HAL_PWR_ConfigPVD+0xbc>)
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	4a12      	ldr	r2, [pc, #72]	@ (80088f8 <HAL_PWR_ConfigPVD+0xbc>)
 80088b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088b4:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d005      	beq.n	80088ce <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80088c2:	4b0d      	ldr	r3, [pc, #52]	@ (80088f8 <HAL_PWR_ConfigPVD+0xbc>)
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	4a0c      	ldr	r2, [pc, #48]	@ (80088f8 <HAL_PWR_ConfigPVD+0xbc>)
 80088c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088cc:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	f003 0302 	and.w	r3, r3, #2
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d005      	beq.n	80088e6 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80088da:	4b07      	ldr	r3, [pc, #28]	@ (80088f8 <HAL_PWR_ConfigPVD+0xbc>)
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	4a06      	ldr	r2, [pc, #24]	@ (80088f8 <HAL_PWR_ConfigPVD+0xbc>)
 80088e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088e4:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr
 80088f4:	40007000 	.word	0x40007000
 80088f8:	40010400 	.word	0x40010400

080088fc <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80088fc:	b480      	push	{r7}
 80088fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8008900:	4b05      	ldr	r3, [pc, #20]	@ (8008918 <HAL_PWR_EnablePVD+0x1c>)
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	4a04      	ldr	r2, [pc, #16]	@ (8008918 <HAL_PWR_EnablePVD+0x1c>)
 8008906:	f043 0301 	orr.w	r3, r3, #1
 800890a:	6053      	str	r3, [r2, #4]
}
 800890c:	bf00      	nop
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	40007000 	.word	0x40007000

0800891c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d141      	bne.n	80089ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800892a:	4b4b      	ldr	r3, [pc, #300]	@ (8008a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008936:	d131      	bne.n	800899c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008938:	4b47      	ldr	r3, [pc, #284]	@ (8008a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800893a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800893e:	4a46      	ldr	r2, [pc, #280]	@ (8008a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008944:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008948:	4b43      	ldr	r3, [pc, #268]	@ (8008a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008950:	4a41      	ldr	r2, [pc, #260]	@ (8008a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008952:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008956:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008958:	4b40      	ldr	r3, [pc, #256]	@ (8008a5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2232      	movs	r2, #50	@ 0x32
 800895e:	fb02 f303 	mul.w	r3, r2, r3
 8008962:	4a3f      	ldr	r2, [pc, #252]	@ (8008a60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008964:	fba2 2303 	umull	r2, r3, r2, r3
 8008968:	0c9b      	lsrs	r3, r3, #18
 800896a:	3301      	adds	r3, #1
 800896c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800896e:	e002      	b.n	8008976 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	3b01      	subs	r3, #1
 8008974:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008976:	4b38      	ldr	r3, [pc, #224]	@ (8008a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800897e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008982:	d102      	bne.n	800898a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1f2      	bne.n	8008970 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800898a:	4b33      	ldr	r3, [pc, #204]	@ (8008a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008996:	d158      	bne.n	8008a4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008998:	2303      	movs	r3, #3
 800899a:	e057      	b.n	8008a4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800899c:	4b2e      	ldr	r3, [pc, #184]	@ (8008a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800899e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089a2:	4a2d      	ldr	r2, [pc, #180]	@ (8008a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80089ac:	e04d      	b.n	8008a4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089b4:	d141      	bne.n	8008a3a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80089b6:	4b28      	ldr	r3, [pc, #160]	@ (8008a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80089be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089c2:	d131      	bne.n	8008a28 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80089c4:	4b24      	ldr	r3, [pc, #144]	@ (8008a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ca:	4a23      	ldr	r2, [pc, #140]	@ (8008a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80089d4:	4b20      	ldr	r3, [pc, #128]	@ (8008a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80089dc:	4a1e      	ldr	r2, [pc, #120]	@ (8008a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80089e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80089e4:	4b1d      	ldr	r3, [pc, #116]	@ (8008a5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2232      	movs	r2, #50	@ 0x32
 80089ea:	fb02 f303 	mul.w	r3, r2, r3
 80089ee:	4a1c      	ldr	r2, [pc, #112]	@ (8008a60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80089f0:	fba2 2303 	umull	r2, r3, r2, r3
 80089f4:	0c9b      	lsrs	r3, r3, #18
 80089f6:	3301      	adds	r3, #1
 80089f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80089fa:	e002      	b.n	8008a02 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	3b01      	subs	r3, #1
 8008a00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a02:	4b15      	ldr	r3, [pc, #84]	@ (8008a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a0e:	d102      	bne.n	8008a16 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1f2      	bne.n	80089fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008a16:	4b10      	ldr	r3, [pc, #64]	@ (8008a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a22:	d112      	bne.n	8008a4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e011      	b.n	8008a4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a28:	4b0b      	ldr	r3, [pc, #44]	@ (8008a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8008a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008a38:	e007      	b.n	8008a4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008a3a:	4b07      	ldr	r3, [pc, #28]	@ (8008a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008a42:	4a05      	ldr	r2, [pc, #20]	@ (8008a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008a48:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	40007000 	.word	0x40007000
 8008a5c:	20000004 	.word	0x20000004
 8008a60:	431bde83 	.word	0x431bde83

08008a64 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008a64:	b480      	push	{r7}
 8008a66:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008a68:	4b05      	ldr	r3, [pc, #20]	@ (8008a80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	4a04      	ldr	r2, [pc, #16]	@ (8008a80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008a6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008a72:	6093      	str	r3, [r2, #8]
}
 8008a74:	bf00      	nop
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	40007000 	.word	0x40007000

08008a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e2fe      	b.n	8009094 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 0301 	and.w	r3, r3, #1
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d075      	beq.n	8008b8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008aa2:	4b97      	ldr	r3, [pc, #604]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f003 030c 	and.w	r3, r3, #12
 8008aaa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008aac:	4b94      	ldr	r3, [pc, #592]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	f003 0303 	and.w	r3, r3, #3
 8008ab4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	2b0c      	cmp	r3, #12
 8008aba:	d102      	bne.n	8008ac2 <HAL_RCC_OscConfig+0x3e>
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d002      	beq.n	8008ac8 <HAL_RCC_OscConfig+0x44>
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	2b08      	cmp	r3, #8
 8008ac6:	d10b      	bne.n	8008ae0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ac8:	4b8d      	ldr	r3, [pc, #564]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d05b      	beq.n	8008b8c <HAL_RCC_OscConfig+0x108>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d157      	bne.n	8008b8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e2d9      	b.n	8009094 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ae8:	d106      	bne.n	8008af8 <HAL_RCC_OscConfig+0x74>
 8008aea:	4b85      	ldr	r3, [pc, #532]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a84      	ldr	r2, [pc, #528]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008af4:	6013      	str	r3, [r2, #0]
 8008af6:	e01d      	b.n	8008b34 <HAL_RCC_OscConfig+0xb0>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b00:	d10c      	bne.n	8008b1c <HAL_RCC_OscConfig+0x98>
 8008b02:	4b7f      	ldr	r3, [pc, #508]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a7e      	ldr	r2, [pc, #504]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b0c:	6013      	str	r3, [r2, #0]
 8008b0e:	4b7c      	ldr	r3, [pc, #496]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a7b      	ldr	r2, [pc, #492]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b18:	6013      	str	r3, [r2, #0]
 8008b1a:	e00b      	b.n	8008b34 <HAL_RCC_OscConfig+0xb0>
 8008b1c:	4b78      	ldr	r3, [pc, #480]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a77      	ldr	r2, [pc, #476]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b26:	6013      	str	r3, [r2, #0]
 8008b28:	4b75      	ldr	r3, [pc, #468]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a74      	ldr	r2, [pc, #464]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008b2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d013      	beq.n	8008b64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b3c:	f7fb fd0c 	bl	8004558 <HAL_GetTick>
 8008b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b42:	e008      	b.n	8008b56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b44:	f7fb fd08 	bl	8004558 <HAL_GetTick>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	2b64      	cmp	r3, #100	@ 0x64
 8008b50:	d901      	bls.n	8008b56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e29e      	b.n	8009094 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b56:	4b6a      	ldr	r3, [pc, #424]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d0f0      	beq.n	8008b44 <HAL_RCC_OscConfig+0xc0>
 8008b62:	e014      	b.n	8008b8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b64:	f7fb fcf8 	bl	8004558 <HAL_GetTick>
 8008b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b6a:	e008      	b.n	8008b7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b6c:	f7fb fcf4 	bl	8004558 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	2b64      	cmp	r3, #100	@ 0x64
 8008b78:	d901      	bls.n	8008b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e28a      	b.n	8009094 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b7e:	4b60      	ldr	r3, [pc, #384]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1f0      	bne.n	8008b6c <HAL_RCC_OscConfig+0xe8>
 8008b8a:	e000      	b.n	8008b8e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 0302 	and.w	r3, r3, #2
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d075      	beq.n	8008c86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b9a:	4b59      	ldr	r3, [pc, #356]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f003 030c 	and.w	r3, r3, #12
 8008ba2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ba4:	4b56      	ldr	r3, [pc, #344]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	f003 0303 	and.w	r3, r3, #3
 8008bac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	2b0c      	cmp	r3, #12
 8008bb2:	d102      	bne.n	8008bba <HAL_RCC_OscConfig+0x136>
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d002      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x13c>
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	2b04      	cmp	r3, #4
 8008bbe:	d11f      	bne.n	8008c00 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008bc0:	4b4f      	ldr	r3, [pc, #316]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d005      	beq.n	8008bd8 <HAL_RCC_OscConfig+0x154>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d101      	bne.n	8008bd8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e25d      	b.n	8009094 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bd8:	4b49      	ldr	r3, [pc, #292]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	061b      	lsls	r3, r3, #24
 8008be6:	4946      	ldr	r1, [pc, #280]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008be8:	4313      	orrs	r3, r2
 8008bea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008bec:	4b45      	ldr	r3, [pc, #276]	@ (8008d04 <HAL_RCC_OscConfig+0x280>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7fa f8e5 	bl	8002dc0 <HAL_InitTick>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d043      	beq.n	8008c84 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e249      	b.n	8009094 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d023      	beq.n	8008c50 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c08:	4b3d      	ldr	r3, [pc, #244]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a3c      	ldr	r2, [pc, #240]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c14:	f7fb fca0 	bl	8004558 <HAL_GetTick>
 8008c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c1a:	e008      	b.n	8008c2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c1c:	f7fb fc9c 	bl	8004558 <HAL_GetTick>
 8008c20:	4602      	mov	r2, r0
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	d901      	bls.n	8008c2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e232      	b.n	8009094 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c2e:	4b34      	ldr	r3, [pc, #208]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d0f0      	beq.n	8008c1c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c3a:	4b31      	ldr	r3, [pc, #196]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	061b      	lsls	r3, r3, #24
 8008c48:	492d      	ldr	r1, [pc, #180]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	604b      	str	r3, [r1, #4]
 8008c4e:	e01a      	b.n	8008c86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c50:	4b2b      	ldr	r3, [pc, #172]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a2a      	ldr	r2, [pc, #168]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008c56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c5c:	f7fb fc7c 	bl	8004558 <HAL_GetTick>
 8008c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c62:	e008      	b.n	8008c76 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c64:	f7fb fc78 	bl	8004558 <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d901      	bls.n	8008c76 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e20e      	b.n	8009094 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c76:	4b22      	ldr	r3, [pc, #136]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1f0      	bne.n	8008c64 <HAL_RCC_OscConfig+0x1e0>
 8008c82:	e000      	b.n	8008c86 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f003 0308 	and.w	r3, r3, #8
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d041      	beq.n	8008d16 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d01c      	beq.n	8008cd4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c9a:	4b19      	ldr	r3, [pc, #100]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ca0:	4a17      	ldr	r2, [pc, #92]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008ca2:	f043 0301 	orr.w	r3, r3, #1
 8008ca6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008caa:	f7fb fc55 	bl	8004558 <HAL_GetTick>
 8008cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008cb0:	e008      	b.n	8008cc4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cb2:	f7fb fc51 	bl	8004558 <HAL_GetTick>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d901      	bls.n	8008cc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e1e7      	b.n	8009094 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cca:	f003 0302 	and.w	r3, r3, #2
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d0ef      	beq.n	8008cb2 <HAL_RCC_OscConfig+0x22e>
 8008cd2:	e020      	b.n	8008d16 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cda:	4a09      	ldr	r2, [pc, #36]	@ (8008d00 <HAL_RCC_OscConfig+0x27c>)
 8008cdc:	f023 0301 	bic.w	r3, r3, #1
 8008ce0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ce4:	f7fb fc38 	bl	8004558 <HAL_GetTick>
 8008ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008cea:	e00d      	b.n	8008d08 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cec:	f7fb fc34 	bl	8004558 <HAL_GetTick>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d906      	bls.n	8008d08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e1ca      	b.n	8009094 <HAL_RCC_OscConfig+0x610>
 8008cfe:	bf00      	nop
 8008d00:	40021000 	.word	0x40021000
 8008d04:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008d08:	4b8c      	ldr	r3, [pc, #560]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d0e:	f003 0302 	and.w	r3, r3, #2
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1ea      	bne.n	8008cec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 0304 	and.w	r3, r3, #4
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 80a6 	beq.w	8008e70 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d24:	2300      	movs	r3, #0
 8008d26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008d28:	4b84      	ldr	r3, [pc, #528]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d101      	bne.n	8008d38 <HAL_RCC_OscConfig+0x2b4>
 8008d34:	2301      	movs	r3, #1
 8008d36:	e000      	b.n	8008d3a <HAL_RCC_OscConfig+0x2b6>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00d      	beq.n	8008d5a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d3e:	4b7f      	ldr	r3, [pc, #508]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d42:	4a7e      	ldr	r2, [pc, #504]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d48:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d4a:	4b7c      	ldr	r3, [pc, #496]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d52:	60fb      	str	r3, [r7, #12]
 8008d54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008d56:	2301      	movs	r3, #1
 8008d58:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d5a:	4b79      	ldr	r3, [pc, #484]	@ (8008f40 <HAL_RCC_OscConfig+0x4bc>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d118      	bne.n	8008d98 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d66:	4b76      	ldr	r3, [pc, #472]	@ (8008f40 <HAL_RCC_OscConfig+0x4bc>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a75      	ldr	r2, [pc, #468]	@ (8008f40 <HAL_RCC_OscConfig+0x4bc>)
 8008d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d72:	f7fb fbf1 	bl	8004558 <HAL_GetTick>
 8008d76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d78:	e008      	b.n	8008d8c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d7a:	f7fb fbed 	bl	8004558 <HAL_GetTick>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d901      	bls.n	8008d8c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e183      	b.n	8009094 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d8c:	4b6c      	ldr	r3, [pc, #432]	@ (8008f40 <HAL_RCC_OscConfig+0x4bc>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d0f0      	beq.n	8008d7a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d108      	bne.n	8008db2 <HAL_RCC_OscConfig+0x32e>
 8008da0:	4b66      	ldr	r3, [pc, #408]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008da6:	4a65      	ldr	r2, [pc, #404]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008da8:	f043 0301 	orr.w	r3, r3, #1
 8008dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008db0:	e024      	b.n	8008dfc <HAL_RCC_OscConfig+0x378>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	2b05      	cmp	r3, #5
 8008db8:	d110      	bne.n	8008ddc <HAL_RCC_OscConfig+0x358>
 8008dba:	4b60      	ldr	r3, [pc, #384]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dc0:	4a5e      	ldr	r2, [pc, #376]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008dc2:	f043 0304 	orr.w	r3, r3, #4
 8008dc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008dca:	4b5c      	ldr	r3, [pc, #368]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dd0:	4a5a      	ldr	r2, [pc, #360]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008dd2:	f043 0301 	orr.w	r3, r3, #1
 8008dd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008dda:	e00f      	b.n	8008dfc <HAL_RCC_OscConfig+0x378>
 8008ddc:	4b57      	ldr	r3, [pc, #348]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008de2:	4a56      	ldr	r2, [pc, #344]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008de4:	f023 0301 	bic.w	r3, r3, #1
 8008de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008dec:	4b53      	ldr	r3, [pc, #332]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008df2:	4a52      	ldr	r2, [pc, #328]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008df4:	f023 0304 	bic.w	r3, r3, #4
 8008df8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d016      	beq.n	8008e32 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e04:	f7fb fba8 	bl	8004558 <HAL_GetTick>
 8008e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e0a:	e00a      	b.n	8008e22 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e0c:	f7fb fba4 	bl	8004558 <HAL_GetTick>
 8008e10:	4602      	mov	r2, r0
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d901      	bls.n	8008e22 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e138      	b.n	8009094 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e22:	4b46      	ldr	r3, [pc, #280]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e28:	f003 0302 	and.w	r3, r3, #2
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d0ed      	beq.n	8008e0c <HAL_RCC_OscConfig+0x388>
 8008e30:	e015      	b.n	8008e5e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e32:	f7fb fb91 	bl	8004558 <HAL_GetTick>
 8008e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e38:	e00a      	b.n	8008e50 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e3a:	f7fb fb8d 	bl	8004558 <HAL_GetTick>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d901      	bls.n	8008e50 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e121      	b.n	8009094 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e50:	4b3a      	ldr	r3, [pc, #232]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e56:	f003 0302 	and.w	r3, r3, #2
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d1ed      	bne.n	8008e3a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008e5e:	7ffb      	ldrb	r3, [r7, #31]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d105      	bne.n	8008e70 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e64:	4b35      	ldr	r3, [pc, #212]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e68:	4a34      	ldr	r2, [pc, #208]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008e6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e6e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0320 	and.w	r3, r3, #32
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d03c      	beq.n	8008ef6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d01c      	beq.n	8008ebe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e84:	4b2d      	ldr	r3, [pc, #180]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008e86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e8a:	4a2c      	ldr	r2, [pc, #176]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008e8c:	f043 0301 	orr.w	r3, r3, #1
 8008e90:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e94:	f7fb fb60 	bl	8004558 <HAL_GetTick>
 8008e98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e9a:	e008      	b.n	8008eae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e9c:	f7fb fb5c 	bl	8004558 <HAL_GetTick>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d901      	bls.n	8008eae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e0f2      	b.n	8009094 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008eae:	4b23      	ldr	r3, [pc, #140]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008eb4:	f003 0302 	and.w	r3, r3, #2
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0ef      	beq.n	8008e9c <HAL_RCC_OscConfig+0x418>
 8008ebc:	e01b      	b.n	8008ef6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008ec0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008ec6:	f023 0301 	bic.w	r3, r3, #1
 8008eca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ece:	f7fb fb43 	bl	8004558 <HAL_GetTick>
 8008ed2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008ed4:	e008      	b.n	8008ee8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ed6:	f7fb fb3f 	bl	8004558 <HAL_GetTick>
 8008eda:	4602      	mov	r2, r0
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	1ad3      	subs	r3, r2, r3
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d901      	bls.n	8008ee8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e0d5      	b.n	8009094 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008ee8:	4b14      	ldr	r3, [pc, #80]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008eee:	f003 0302 	and.w	r3, r3, #2
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1ef      	bne.n	8008ed6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 80c9 	beq.w	8009092 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f00:	4b0e      	ldr	r3, [pc, #56]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f003 030c 	and.w	r3, r3, #12
 8008f08:	2b0c      	cmp	r3, #12
 8008f0a:	f000 8083 	beq.w	8009014 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	69db      	ldr	r3, [r3, #28]
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d15e      	bne.n	8008fd4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f16:	4b09      	ldr	r3, [pc, #36]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a08      	ldr	r2, [pc, #32]	@ (8008f3c <HAL_RCC_OscConfig+0x4b8>)
 8008f1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f22:	f7fb fb19 	bl	8004558 <HAL_GetTick>
 8008f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f28:	e00c      	b.n	8008f44 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f2a:	f7fb fb15 	bl	8004558 <HAL_GetTick>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	d905      	bls.n	8008f44 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	e0ab      	b.n	8009094 <HAL_RCC_OscConfig+0x610>
 8008f3c:	40021000 	.word	0x40021000
 8008f40:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f44:	4b55      	ldr	r3, [pc, #340]	@ (800909c <HAL_RCC_OscConfig+0x618>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1ec      	bne.n	8008f2a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f50:	4b52      	ldr	r3, [pc, #328]	@ (800909c <HAL_RCC_OscConfig+0x618>)
 8008f52:	68da      	ldr	r2, [r3, #12]
 8008f54:	4b52      	ldr	r3, [pc, #328]	@ (80090a0 <HAL_RCC_OscConfig+0x61c>)
 8008f56:	4013      	ands	r3, r2
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	6a11      	ldr	r1, [r2, #32]
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008f60:	3a01      	subs	r2, #1
 8008f62:	0112      	lsls	r2, r2, #4
 8008f64:	4311      	orrs	r1, r2
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008f6a:	0212      	lsls	r2, r2, #8
 8008f6c:	4311      	orrs	r1, r2
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008f72:	0852      	lsrs	r2, r2, #1
 8008f74:	3a01      	subs	r2, #1
 8008f76:	0552      	lsls	r2, r2, #21
 8008f78:	4311      	orrs	r1, r2
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008f7e:	0852      	lsrs	r2, r2, #1
 8008f80:	3a01      	subs	r2, #1
 8008f82:	0652      	lsls	r2, r2, #25
 8008f84:	4311      	orrs	r1, r2
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008f8a:	06d2      	lsls	r2, r2, #27
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	4943      	ldr	r1, [pc, #268]	@ (800909c <HAL_RCC_OscConfig+0x618>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f94:	4b41      	ldr	r3, [pc, #260]	@ (800909c <HAL_RCC_OscConfig+0x618>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a40      	ldr	r2, [pc, #256]	@ (800909c <HAL_RCC_OscConfig+0x618>)
 8008f9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f9e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008fa0:	4b3e      	ldr	r3, [pc, #248]	@ (800909c <HAL_RCC_OscConfig+0x618>)
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	4a3d      	ldr	r2, [pc, #244]	@ (800909c <HAL_RCC_OscConfig+0x618>)
 8008fa6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008faa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fac:	f7fb fad4 	bl	8004558 <HAL_GetTick>
 8008fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008fb2:	e008      	b.n	8008fc6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fb4:	f7fb fad0 	bl	8004558 <HAL_GetTick>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d901      	bls.n	8008fc6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e066      	b.n	8009094 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008fc6:	4b35      	ldr	r3, [pc, #212]	@ (800909c <HAL_RCC_OscConfig+0x618>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d0f0      	beq.n	8008fb4 <HAL_RCC_OscConfig+0x530>
 8008fd2:	e05e      	b.n	8009092 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fd4:	4b31      	ldr	r3, [pc, #196]	@ (800909c <HAL_RCC_OscConfig+0x618>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a30      	ldr	r2, [pc, #192]	@ (800909c <HAL_RCC_OscConfig+0x618>)
 8008fda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fe0:	f7fb faba 	bl	8004558 <HAL_GetTick>
 8008fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008fe6:	e008      	b.n	8008ffa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fe8:	f7fb fab6 	bl	8004558 <HAL_GetTick>
 8008fec:	4602      	mov	r2, r0
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d901      	bls.n	8008ffa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e04c      	b.n	8009094 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ffa:	4b28      	ldr	r3, [pc, #160]	@ (800909c <HAL_RCC_OscConfig+0x618>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1f0      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009006:	4b25      	ldr	r3, [pc, #148]	@ (800909c <HAL_RCC_OscConfig+0x618>)
 8009008:	68da      	ldr	r2, [r3, #12]
 800900a:	4924      	ldr	r1, [pc, #144]	@ (800909c <HAL_RCC_OscConfig+0x618>)
 800900c:	4b25      	ldr	r3, [pc, #148]	@ (80090a4 <HAL_RCC_OscConfig+0x620>)
 800900e:	4013      	ands	r3, r2
 8009010:	60cb      	str	r3, [r1, #12]
 8009012:	e03e      	b.n	8009092 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	69db      	ldr	r3, [r3, #28]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d101      	bne.n	8009020 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	e039      	b.n	8009094 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009020:	4b1e      	ldr	r3, [pc, #120]	@ (800909c <HAL_RCC_OscConfig+0x618>)
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f003 0203 	and.w	r2, r3, #3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a1b      	ldr	r3, [r3, #32]
 8009030:	429a      	cmp	r2, r3
 8009032:	d12c      	bne.n	800908e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800903e:	3b01      	subs	r3, #1
 8009040:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009042:	429a      	cmp	r2, r3
 8009044:	d123      	bne.n	800908e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009050:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009052:	429a      	cmp	r2, r3
 8009054:	d11b      	bne.n	800908e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009060:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009062:	429a      	cmp	r2, r3
 8009064:	d113      	bne.n	800908e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009070:	085b      	lsrs	r3, r3, #1
 8009072:	3b01      	subs	r3, #1
 8009074:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009076:	429a      	cmp	r2, r3
 8009078:	d109      	bne.n	800908e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009084:	085b      	lsrs	r3, r3, #1
 8009086:	3b01      	subs	r3, #1
 8009088:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800908a:	429a      	cmp	r2, r3
 800908c:	d001      	beq.n	8009092 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e000      	b.n	8009094 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3720      	adds	r7, #32
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	40021000 	.word	0x40021000
 80090a0:	019f800c 	.word	0x019f800c
 80090a4:	feeefffc 	.word	0xfeeefffc

080090a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80090b2:	2300      	movs	r3, #0
 80090b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d101      	bne.n	80090c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e11e      	b.n	80092fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090c0:	4b91      	ldr	r3, [pc, #580]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 030f 	and.w	r3, r3, #15
 80090c8:	683a      	ldr	r2, [r7, #0]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d910      	bls.n	80090f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090ce:	4b8e      	ldr	r3, [pc, #568]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f023 020f 	bic.w	r2, r3, #15
 80090d6:	498c      	ldr	r1, [pc, #560]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	4313      	orrs	r3, r2
 80090dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090de:	4b8a      	ldr	r3, [pc, #552]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 030f 	and.w	r3, r3, #15
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d001      	beq.n	80090f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e106      	b.n	80092fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0301 	and.w	r3, r3, #1
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d073      	beq.n	80091e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	2b03      	cmp	r3, #3
 8009102:	d129      	bne.n	8009158 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009104:	4b81      	ldr	r3, [pc, #516]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d101      	bne.n	8009114 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	e0f4      	b.n	80092fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009114:	f000 fa16 	bl	8009544 <RCC_GetSysClockFreqFromPLLSource>
 8009118:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	4a7c      	ldr	r2, [pc, #496]	@ (8009310 <HAL_RCC_ClockConfig+0x268>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d93f      	bls.n	80091a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009122:	4b7a      	ldr	r3, [pc, #488]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d009      	beq.n	8009142 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009136:	2b00      	cmp	r3, #0
 8009138:	d033      	beq.n	80091a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800913e:	2b00      	cmp	r3, #0
 8009140:	d12f      	bne.n	80091a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009142:	4b72      	ldr	r3, [pc, #456]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800914a:	4a70      	ldr	r2, [pc, #448]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 800914c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009150:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009152:	2380      	movs	r3, #128	@ 0x80
 8009154:	617b      	str	r3, [r7, #20]
 8009156:	e024      	b.n	80091a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	2b02      	cmp	r3, #2
 800915e:	d107      	bne.n	8009170 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009160:	4b6a      	ldr	r3, [pc, #424]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d109      	bne.n	8009180 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	e0c6      	b.n	80092fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009170:	4b66      	ldr	r3, [pc, #408]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009178:	2b00      	cmp	r3, #0
 800917a:	d101      	bne.n	8009180 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	e0be      	b.n	80092fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009180:	f000 f914 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 8009184:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	4a61      	ldr	r2, [pc, #388]	@ (8009310 <HAL_RCC_ClockConfig+0x268>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d909      	bls.n	80091a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800918e:	4b5f      	ldr	r3, [pc, #380]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009196:	4a5d      	ldr	r2, [pc, #372]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 8009198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800919c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800919e:	2380      	movs	r3, #128	@ 0x80
 80091a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80091a2:	4b5a      	ldr	r3, [pc, #360]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f023 0203 	bic.w	r2, r3, #3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	4957      	ldr	r1, [pc, #348]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 80091b0:	4313      	orrs	r3, r2
 80091b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091b4:	f7fb f9d0 	bl	8004558 <HAL_GetTick>
 80091b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091ba:	e00a      	b.n	80091d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091bc:	f7fb f9cc 	bl	8004558 <HAL_GetTick>
 80091c0:	4602      	mov	r2, r0
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d901      	bls.n	80091d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80091ce:	2303      	movs	r3, #3
 80091d0:	e095      	b.n	80092fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091d2:	4b4e      	ldr	r3, [pc, #312]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f003 020c 	and.w	r2, r3, #12
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d1eb      	bne.n	80091bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 0302 	and.w	r3, r3, #2
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d023      	beq.n	8009238 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 0304 	and.w	r3, r3, #4
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d005      	beq.n	8009208 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091fc:	4b43      	ldr	r3, [pc, #268]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	4a42      	ldr	r2, [pc, #264]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 8009202:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009206:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 0308 	and.w	r3, r3, #8
 8009210:	2b00      	cmp	r3, #0
 8009212:	d007      	beq.n	8009224 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009214:	4b3d      	ldr	r3, [pc, #244]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800921c:	4a3b      	ldr	r2, [pc, #236]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 800921e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009222:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009224:	4b39      	ldr	r3, [pc, #228]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	4936      	ldr	r1, [pc, #216]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 8009232:	4313      	orrs	r3, r2
 8009234:	608b      	str	r3, [r1, #8]
 8009236:	e008      	b.n	800924a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	2b80      	cmp	r3, #128	@ 0x80
 800923c:	d105      	bne.n	800924a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800923e:	4b33      	ldr	r3, [pc, #204]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	4a32      	ldr	r2, [pc, #200]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 8009244:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009248:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800924a:	4b2f      	ldr	r3, [pc, #188]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f003 030f 	and.w	r3, r3, #15
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	429a      	cmp	r2, r3
 8009256:	d21d      	bcs.n	8009294 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009258:	4b2b      	ldr	r3, [pc, #172]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f023 020f 	bic.w	r2, r3, #15
 8009260:	4929      	ldr	r1, [pc, #164]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	4313      	orrs	r3, r2
 8009266:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009268:	f7fb f976 	bl	8004558 <HAL_GetTick>
 800926c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800926e:	e00a      	b.n	8009286 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009270:	f7fb f972 	bl	8004558 <HAL_GetTick>
 8009274:	4602      	mov	r2, r0
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	1ad3      	subs	r3, r2, r3
 800927a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800927e:	4293      	cmp	r3, r2
 8009280:	d901      	bls.n	8009286 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009282:	2303      	movs	r3, #3
 8009284:	e03b      	b.n	80092fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009286:	4b20      	ldr	r3, [pc, #128]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 030f 	and.w	r3, r3, #15
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	429a      	cmp	r2, r3
 8009292:	d1ed      	bne.n	8009270 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 0304 	and.w	r3, r3, #4
 800929c:	2b00      	cmp	r3, #0
 800929e:	d008      	beq.n	80092b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092a0:	4b1a      	ldr	r3, [pc, #104]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	4917      	ldr	r1, [pc, #92]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 80092ae:	4313      	orrs	r3, r2
 80092b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 0308 	and.w	r3, r3, #8
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d009      	beq.n	80092d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80092be:	4b13      	ldr	r3, [pc, #76]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	00db      	lsls	r3, r3, #3
 80092cc:	490f      	ldr	r1, [pc, #60]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 80092ce:	4313      	orrs	r3, r2
 80092d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80092d2:	f000 f86b 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 80092d6:	4602      	mov	r2, r0
 80092d8:	4b0c      	ldr	r3, [pc, #48]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	091b      	lsrs	r3, r3, #4
 80092de:	f003 030f 	and.w	r3, r3, #15
 80092e2:	490c      	ldr	r1, [pc, #48]	@ (8009314 <HAL_RCC_ClockConfig+0x26c>)
 80092e4:	5ccb      	ldrb	r3, [r1, r3]
 80092e6:	f003 031f 	and.w	r3, r3, #31
 80092ea:	fa22 f303 	lsr.w	r3, r2, r3
 80092ee:	4a0a      	ldr	r2, [pc, #40]	@ (8009318 <HAL_RCC_ClockConfig+0x270>)
 80092f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80092f2:	4b0a      	ldr	r3, [pc, #40]	@ (800931c <HAL_RCC_ClockConfig+0x274>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7f9 fd62 	bl	8002dc0 <HAL_InitTick>
 80092fc:	4603      	mov	r3, r0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3718      	adds	r7, #24
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	40022000 	.word	0x40022000
 800930c:	40021000 	.word	0x40021000
 8009310:	04c4b400 	.word	0x04c4b400
 8009314:	08016b50 	.word	0x08016b50
 8009318:	20000004 	.word	0x20000004
 800931c:	20000008 	.word	0x20000008

08009320 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b08c      	sub	sp, #48	@ 0x30
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 800932c:	2302      	movs	r3, #2
 800932e:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8009330:	2303      	movs	r3, #3
 8009332:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8009334:	2300      	movs	r3, #0
 8009336:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800933e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	0c1b      	lsrs	r3, r3, #16
 8009344:	f003 030f 	and.w	r3, r3, #15
 8009348:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 800934c:	029b      	lsls	r3, r3, #10
 800934e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	0c1b      	lsrs	r3, r3, #16
 8009354:	f003 030f 	and.w	r3, r3, #15
 8009358:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 800935a:	4b13      	ldr	r3, [pc, #76]	@ (80093a8 <HAL_RCC_MCOConfig+0x88>)
 800935c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800935e:	2101      	movs	r1, #1
 8009360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009362:	fa01 f303 	lsl.w	r3, r1, r3
 8009366:	4910      	ldr	r1, [pc, #64]	@ (80093a8 <HAL_RCC_MCOConfig+0x88>)
 8009368:	4313      	orrs	r3, r2
 800936a:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	b29b      	uxth	r3, r3
 8009370:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	0d1b      	lsrs	r3, r3, #20
 8009376:	b2db      	uxtb	r3, r3
 8009378:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 800937a:	f107 0310 	add.w	r3, r7, #16
 800937e:	4619      	mov	r1, r3
 8009380:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009382:	f7fc fe31 	bl	8005fe8 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8009386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009388:	2b00      	cmp	r3, #0
 800938a:	d109      	bne.n	80093a0 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 800938c:	4b06      	ldr	r3, [pc, #24]	@ (80093a8 <HAL_RCC_MCOConfig+0x88>)
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009394:	68b9      	ldr	r1, [r7, #8]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	430b      	orrs	r3, r1
 800939a:	4903      	ldr	r1, [pc, #12]	@ (80093a8 <HAL_RCC_MCOConfig+0x88>)
 800939c:	4313      	orrs	r3, r2
 800939e:	608b      	str	r3, [r1, #8]
  }
}
 80093a0:	bf00      	nop
 80093a2:	3730      	adds	r7, #48	@ 0x30
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	40021000 	.word	0x40021000

080093ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b087      	sub	sp, #28
 80093b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80093b2:	4b2c      	ldr	r3, [pc, #176]	@ (8009464 <HAL_RCC_GetSysClockFreq+0xb8>)
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	f003 030c 	and.w	r3, r3, #12
 80093ba:	2b04      	cmp	r3, #4
 80093bc:	d102      	bne.n	80093c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80093be:	4b2a      	ldr	r3, [pc, #168]	@ (8009468 <HAL_RCC_GetSysClockFreq+0xbc>)
 80093c0:	613b      	str	r3, [r7, #16]
 80093c2:	e047      	b.n	8009454 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80093c4:	4b27      	ldr	r3, [pc, #156]	@ (8009464 <HAL_RCC_GetSysClockFreq+0xb8>)
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	f003 030c 	and.w	r3, r3, #12
 80093cc:	2b08      	cmp	r3, #8
 80093ce:	d102      	bne.n	80093d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80093d0:	4b26      	ldr	r3, [pc, #152]	@ (800946c <HAL_RCC_GetSysClockFreq+0xc0>)
 80093d2:	613b      	str	r3, [r7, #16]
 80093d4:	e03e      	b.n	8009454 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80093d6:	4b23      	ldr	r3, [pc, #140]	@ (8009464 <HAL_RCC_GetSysClockFreq+0xb8>)
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	f003 030c 	and.w	r3, r3, #12
 80093de:	2b0c      	cmp	r3, #12
 80093e0:	d136      	bne.n	8009450 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80093e2:	4b20      	ldr	r3, [pc, #128]	@ (8009464 <HAL_RCC_GetSysClockFreq+0xb8>)
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80093ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009464 <HAL_RCC_GetSysClockFreq+0xb8>)
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	091b      	lsrs	r3, r3, #4
 80093f2:	f003 030f 	and.w	r3, r3, #15
 80093f6:	3301      	adds	r3, #1
 80093f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2b03      	cmp	r3, #3
 80093fe:	d10c      	bne.n	800941a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009400:	4a1a      	ldr	r2, [pc, #104]	@ (800946c <HAL_RCC_GetSysClockFreq+0xc0>)
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	fbb2 f3f3 	udiv	r3, r2, r3
 8009408:	4a16      	ldr	r2, [pc, #88]	@ (8009464 <HAL_RCC_GetSysClockFreq+0xb8>)
 800940a:	68d2      	ldr	r2, [r2, #12]
 800940c:	0a12      	lsrs	r2, r2, #8
 800940e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009412:	fb02 f303 	mul.w	r3, r2, r3
 8009416:	617b      	str	r3, [r7, #20]
      break;
 8009418:	e00c      	b.n	8009434 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800941a:	4a13      	ldr	r2, [pc, #76]	@ (8009468 <HAL_RCC_GetSysClockFreq+0xbc>)
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009422:	4a10      	ldr	r2, [pc, #64]	@ (8009464 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009424:	68d2      	ldr	r2, [r2, #12]
 8009426:	0a12      	lsrs	r2, r2, #8
 8009428:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800942c:	fb02 f303 	mul.w	r3, r2, r3
 8009430:	617b      	str	r3, [r7, #20]
      break;
 8009432:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009434:	4b0b      	ldr	r3, [pc, #44]	@ (8009464 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	0e5b      	lsrs	r3, r3, #25
 800943a:	f003 0303 	and.w	r3, r3, #3
 800943e:	3301      	adds	r3, #1
 8009440:	005b      	lsls	r3, r3, #1
 8009442:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009444:	697a      	ldr	r2, [r7, #20]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	fbb2 f3f3 	udiv	r3, r2, r3
 800944c:	613b      	str	r3, [r7, #16]
 800944e:	e001      	b.n	8009454 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009450:	2300      	movs	r3, #0
 8009452:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009454:	693b      	ldr	r3, [r7, #16]
}
 8009456:	4618      	mov	r0, r3
 8009458:	371c      	adds	r7, #28
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	40021000 	.word	0x40021000
 8009468:	00f42400 	.word	0x00f42400
 800946c:	007a1200 	.word	0x007a1200

08009470 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009470:	b480      	push	{r7}
 8009472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009474:	4b03      	ldr	r3, [pc, #12]	@ (8009484 <HAL_RCC_GetHCLKFreq+0x14>)
 8009476:	681b      	ldr	r3, [r3, #0]
}
 8009478:	4618      	mov	r0, r3
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	20000004 	.word	0x20000004

08009488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800948c:	f7ff fff0 	bl	8009470 <HAL_RCC_GetHCLKFreq>
 8009490:	4602      	mov	r2, r0
 8009492:	4b06      	ldr	r3, [pc, #24]	@ (80094ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	0a1b      	lsrs	r3, r3, #8
 8009498:	f003 0307 	and.w	r3, r3, #7
 800949c:	4904      	ldr	r1, [pc, #16]	@ (80094b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800949e:	5ccb      	ldrb	r3, [r1, r3]
 80094a0:	f003 031f 	and.w	r3, r3, #31
 80094a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	40021000 	.word	0x40021000
 80094b0:	08016b60 	.word	0x08016b60

080094b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80094b8:	f7ff ffda 	bl	8009470 <HAL_RCC_GetHCLKFreq>
 80094bc:	4602      	mov	r2, r0
 80094be:	4b06      	ldr	r3, [pc, #24]	@ (80094d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	0adb      	lsrs	r3, r3, #11
 80094c4:	f003 0307 	and.w	r3, r3, #7
 80094c8:	4904      	ldr	r1, [pc, #16]	@ (80094dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80094ca:	5ccb      	ldrb	r3, [r1, r3]
 80094cc:	f003 031f 	and.w	r3, r3, #31
 80094d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	40021000 	.word	0x40021000
 80094dc:	08016b60 	.word	0x08016b60

080094e0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	220f      	movs	r2, #15
 80094ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80094f0:	4b12      	ldr	r3, [pc, #72]	@ (800953c <HAL_RCC_GetClockConfig+0x5c>)
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	f003 0203 	and.w	r2, r3, #3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80094fc:	4b0f      	ldr	r3, [pc, #60]	@ (800953c <HAL_RCC_GetClockConfig+0x5c>)
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009508:	4b0c      	ldr	r3, [pc, #48]	@ (800953c <HAL_RCC_GetClockConfig+0x5c>)
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8009514:	4b09      	ldr	r3, [pc, #36]	@ (800953c <HAL_RCC_GetClockConfig+0x5c>)
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	08db      	lsrs	r3, r3, #3
 800951a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009522:	4b07      	ldr	r3, [pc, #28]	@ (8009540 <HAL_RCC_GetClockConfig+0x60>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 020f 	and.w	r2, r3, #15
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	601a      	str	r2, [r3, #0]
}
 800952e:	bf00      	nop
 8009530:	370c      	adds	r7, #12
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	40021000 	.word	0x40021000
 8009540:	40022000 	.word	0x40022000

08009544 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009544:	b480      	push	{r7}
 8009546:	b087      	sub	sp, #28
 8009548:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800954a:	4b1e      	ldr	r3, [pc, #120]	@ (80095c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	f003 0303 	and.w	r3, r3, #3
 8009552:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009554:	4b1b      	ldr	r3, [pc, #108]	@ (80095c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	091b      	lsrs	r3, r3, #4
 800955a:	f003 030f 	and.w	r3, r3, #15
 800955e:	3301      	adds	r3, #1
 8009560:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	2b03      	cmp	r3, #3
 8009566:	d10c      	bne.n	8009582 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009568:	4a17      	ldr	r2, [pc, #92]	@ (80095c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009570:	4a14      	ldr	r2, [pc, #80]	@ (80095c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009572:	68d2      	ldr	r2, [r2, #12]
 8009574:	0a12      	lsrs	r2, r2, #8
 8009576:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800957a:	fb02 f303 	mul.w	r3, r2, r3
 800957e:	617b      	str	r3, [r7, #20]
    break;
 8009580:	e00c      	b.n	800959c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009582:	4a12      	ldr	r2, [pc, #72]	@ (80095cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	fbb2 f3f3 	udiv	r3, r2, r3
 800958a:	4a0e      	ldr	r2, [pc, #56]	@ (80095c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800958c:	68d2      	ldr	r2, [r2, #12]
 800958e:	0a12      	lsrs	r2, r2, #8
 8009590:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009594:	fb02 f303 	mul.w	r3, r2, r3
 8009598:	617b      	str	r3, [r7, #20]
    break;
 800959a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800959c:	4b09      	ldr	r3, [pc, #36]	@ (80095c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	0e5b      	lsrs	r3, r3, #25
 80095a2:	f003 0303 	and.w	r3, r3, #3
 80095a6:	3301      	adds	r3, #1
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80095ac:	697a      	ldr	r2, [r7, #20]
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80095b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80095b6:	687b      	ldr	r3, [r7, #4]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	371c      	adds	r7, #28
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	40021000 	.word	0x40021000
 80095c8:	007a1200 	.word	0x007a1200
 80095cc:	00f42400 	.word	0x00f42400

080095d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80095d8:	2300      	movs	r3, #0
 80095da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80095dc:	2300      	movs	r3, #0
 80095de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f000 8098 	beq.w	800971e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80095ee:	2300      	movs	r3, #0
 80095f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80095f2:	4b43      	ldr	r3, [pc, #268]	@ (8009700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d10d      	bne.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095fe:	4b40      	ldr	r3, [pc, #256]	@ (8009700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009602:	4a3f      	ldr	r2, [pc, #252]	@ (8009700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009608:	6593      	str	r3, [r2, #88]	@ 0x58
 800960a:	4b3d      	ldr	r3, [pc, #244]	@ (8009700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800960c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800960e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009612:	60bb      	str	r3, [r7, #8]
 8009614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009616:	2301      	movs	r3, #1
 8009618:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800961a:	4b3a      	ldr	r3, [pc, #232]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a39      	ldr	r2, [pc, #228]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009624:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009626:	f7fa ff97 	bl	8004558 <HAL_GetTick>
 800962a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800962c:	e009      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800962e:	f7fa ff93 	bl	8004558 <HAL_GetTick>
 8009632:	4602      	mov	r2, r0
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	2b02      	cmp	r3, #2
 800963a:	d902      	bls.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800963c:	2303      	movs	r3, #3
 800963e:	74fb      	strb	r3, [r7, #19]
        break;
 8009640:	e005      	b.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009642:	4b30      	ldr	r3, [pc, #192]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800964a:	2b00      	cmp	r3, #0
 800964c:	d0ef      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800964e:	7cfb      	ldrb	r3, [r7, #19]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d159      	bne.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009654:	4b2a      	ldr	r3, [pc, #168]	@ (8009700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800965a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800965e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d01e      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	429a      	cmp	r2, r3
 800966e:	d019      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009670:	4b23      	ldr	r3, [pc, #140]	@ (8009700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009676:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800967a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800967c:	4b20      	ldr	r3, [pc, #128]	@ (8009700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800967e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009682:	4a1f      	ldr	r2, [pc, #124]	@ (8009700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800968c:	4b1c      	ldr	r3, [pc, #112]	@ (8009700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800968e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009692:	4a1b      	ldr	r2, [pc, #108]	@ (8009700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009698:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800969c:	4a18      	ldr	r2, [pc, #96]	@ (8009700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d016      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096ae:	f7fa ff53 	bl	8004558 <HAL_GetTick>
 80096b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80096b4:	e00b      	b.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096b6:	f7fa ff4f 	bl	8004558 <HAL_GetTick>
 80096ba:	4602      	mov	r2, r0
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d902      	bls.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80096c8:	2303      	movs	r3, #3
 80096ca:	74fb      	strb	r3, [r7, #19]
            break;
 80096cc:	e006      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80096ce:	4b0c      	ldr	r3, [pc, #48]	@ (8009700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096d4:	f003 0302 	and.w	r3, r3, #2
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d0ec      	beq.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80096dc:	7cfb      	ldrb	r3, [r7, #19]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10b      	bne.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80096e2:	4b07      	ldr	r3, [pc, #28]	@ (8009700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096f0:	4903      	ldr	r1, [pc, #12]	@ (8009700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096f2:	4313      	orrs	r3, r2
 80096f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80096f8:	e008      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80096fa:	7cfb      	ldrb	r3, [r7, #19]
 80096fc:	74bb      	strb	r3, [r7, #18]
 80096fe:	e005      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009700:	40021000 	.word	0x40021000
 8009704:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009708:	7cfb      	ldrb	r3, [r7, #19]
 800970a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800970c:	7c7b      	ldrb	r3, [r7, #17]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d105      	bne.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009712:	4ba7      	ldr	r3, [pc, #668]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009716:	4aa6      	ldr	r2, [pc, #664]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009718:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800971c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00a      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800972a:	4ba1      	ldr	r3, [pc, #644]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800972c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009730:	f023 0203 	bic.w	r2, r3, #3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	499d      	ldr	r1, [pc, #628]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800973a:	4313      	orrs	r3, r2
 800973c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f003 0302 	and.w	r3, r3, #2
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00a      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800974c:	4b98      	ldr	r3, [pc, #608]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800974e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009752:	f023 020c 	bic.w	r2, r3, #12
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	4995      	ldr	r1, [pc, #596]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800975c:	4313      	orrs	r3, r2
 800975e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 0304 	and.w	r3, r3, #4
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00a      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800976e:	4b90      	ldr	r3, [pc, #576]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009774:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	498c      	ldr	r1, [pc, #560]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800977e:	4313      	orrs	r3, r2
 8009780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0308 	and.w	r3, r3, #8
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00a      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009790:	4b87      	ldr	r3, [pc, #540]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009796:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	4984      	ldr	r1, [pc, #528]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097a0:	4313      	orrs	r3, r2
 80097a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f003 0310 	and.w	r3, r3, #16
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00a      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80097b2:	4b7f      	ldr	r3, [pc, #508]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	497b      	ldr	r1, [pc, #492]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097c2:	4313      	orrs	r3, r2
 80097c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 0320 	and.w	r3, r3, #32
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00a      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80097d4:	4b76      	ldr	r3, [pc, #472]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	4973      	ldr	r1, [pc, #460]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097e4:	4313      	orrs	r3, r2
 80097e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00a      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80097f6:	4b6e      	ldr	r3, [pc, #440]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	69db      	ldr	r3, [r3, #28]
 8009804:	496a      	ldr	r1, [pc, #424]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009806:	4313      	orrs	r3, r2
 8009808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00a      	beq.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009818:	4b65      	ldr	r3, [pc, #404]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800981a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800981e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	4962      	ldr	r1, [pc, #392]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009828:	4313      	orrs	r3, r2
 800982a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00a      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800983a:	4b5d      	ldr	r3, [pc, #372]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800983c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009840:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009848:	4959      	ldr	r1, [pc, #356]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800984a:	4313      	orrs	r3, r2
 800984c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009858:	2b00      	cmp	r3, #0
 800985a:	d00a      	beq.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800985c:	4b54      	ldr	r3, [pc, #336]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800985e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009862:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800986a:	4951      	ldr	r1, [pc, #324]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800986c:	4313      	orrs	r3, r2
 800986e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800987a:	2b00      	cmp	r3, #0
 800987c:	d015      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800987e:	4b4c      	ldr	r3, [pc, #304]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009884:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800988c:	4948      	ldr	r1, [pc, #288]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800988e:	4313      	orrs	r3, r2
 8009890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009898:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800989c:	d105      	bne.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800989e:	4b44      	ldr	r3, [pc, #272]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	4a43      	ldr	r2, [pc, #268]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098a8:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d015      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80098b6:	4b3e      	ldr	r3, [pc, #248]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098c4:	493a      	ldr	r1, [pc, #232]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80098d4:	d105      	bne.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80098d6:	4b36      	ldr	r3, [pc, #216]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	4a35      	ldr	r2, [pc, #212]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098e0:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d015      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80098ee:	4b30      	ldr	r3, [pc, #192]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098f4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098fc:	492c      	ldr	r1, [pc, #176]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098fe:	4313      	orrs	r3, r2
 8009900:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009908:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800990c:	d105      	bne.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800990e:	4b28      	ldr	r3, [pc, #160]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	4a27      	ldr	r2, [pc, #156]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009914:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009918:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d015      	beq.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009926:	4b22      	ldr	r3, [pc, #136]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800992c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009934:	491e      	ldr	r1, [pc, #120]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009936:	4313      	orrs	r3, r2
 8009938:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009940:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009944:	d105      	bne.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009946:	4b1a      	ldr	r3, [pc, #104]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	4a19      	ldr	r2, [pc, #100]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800994c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009950:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800995a:	2b00      	cmp	r3, #0
 800995c:	d015      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800995e:	4b14      	ldr	r3, [pc, #80]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009964:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800996c:	4910      	ldr	r1, [pc, #64]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800996e:	4313      	orrs	r3, r2
 8009970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009978:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800997c:	d105      	bne.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800997e:	4b0c      	ldr	r3, [pc, #48]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	4a0b      	ldr	r2, [pc, #44]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009984:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009988:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009992:	2b00      	cmp	r3, #0
 8009994:	d018      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009996:	4b06      	ldr	r3, [pc, #24]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800999c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099a4:	4902      	ldr	r1, [pc, #8]	@ (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099a6:	4313      	orrs	r3, r2
 80099a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	e001      	b.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80099b0:	40021000 	.word	0x40021000
 80099b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099ba:	d105      	bne.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80099bc:	4b21      	ldr	r3, [pc, #132]	@ (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	4a20      	ldr	r2, [pc, #128]	@ (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80099c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80099c6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d015      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80099d4:	4b1b      	ldr	r3, [pc, #108]	@ (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80099d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099da:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099e2:	4918      	ldr	r1, [pc, #96]	@ (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80099e4:	4313      	orrs	r3, r2
 80099e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099f2:	d105      	bne.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80099f4:	4b13      	ldr	r3, [pc, #76]	@ (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	4a12      	ldr	r2, [pc, #72]	@ (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80099fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80099fe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d015      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a1a:	490a      	ldr	r1, [pc, #40]	@ (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a2a:	d105      	bne.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a2c:	4b05      	ldr	r3, [pc, #20]	@ (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	4a04      	ldr	r2, [pc, #16]	@ (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009a32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a36:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009a38:	7cbb      	ldrb	r3, [r7, #18]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3718      	adds	r7, #24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	40021000 	.word	0x40021000

08009a48 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08a      	sub	sp, #40	@ 0x28
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8009a50:	2300      	movs	r3, #0
 8009a52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  FlagStatus       backupchanged = RESET;
 8009a56:	2300      	movs	r3, #0
 8009a58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  __LSCO_CLK_ENABLE();
 8009a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8009b14 <HAL_RCCEx_EnableLSCO+0xcc>)
 8009a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a60:	4a2c      	ldr	r2, [pc, #176]	@ (8009b14 <HAL_RCCEx_EnableLSCO+0xcc>)
 8009a62:	f043 0301 	orr.w	r3, r3, #1
 8009a66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009a68:	4b2a      	ldr	r3, [pc, #168]	@ (8009b14 <HAL_RCCEx_EnableLSCO+0xcc>)
 8009a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a6c:	f003 0301 	and.w	r3, r3, #1
 8009a70:	60fb      	str	r3, [r7, #12]
 8009a72:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 8009a74:	2304      	movs	r3, #4
 8009a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a80:	2300      	movs	r3, #0
 8009a82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 8009a84:	f107 0310 	add.w	r3, r7, #16
 8009a88:	4619      	mov	r1, r3
 8009a8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009a8e:	f7fc faab 	bl	8005fe8 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a92:	4b20      	ldr	r3, [pc, #128]	@ (8009b14 <HAL_RCCEx_EnableLSCO+0xcc>)
 8009a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d10e      	bne.n	8009abc <HAL_RCCEx_EnableLSCO+0x74>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8009b14 <HAL_RCCEx_EnableLSCO+0xcc>)
 8009aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8009b14 <HAL_RCCEx_EnableLSCO+0xcc>)
 8009aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009aa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8009aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8009b14 <HAL_RCCEx_EnableLSCO+0xcc>)
 8009aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ab2:	60bb      	str	r3, [r7, #8]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009abc:	4b16      	ldr	r3, [pc, #88]	@ (8009b18 <HAL_RCCEx_EnableLSCO+0xd0>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d104      	bne.n	8009ad2 <HAL_RCCEx_EnableLSCO+0x8a>
  {
    HAL_PWR_EnableBkUpAccess();
 8009ac8:	f7fe fe98 	bl	80087fc <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 8009acc:	2301      	movs	r3, #1
 8009ace:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8009ad2:	4b10      	ldr	r3, [pc, #64]	@ (8009b14 <HAL_RCCEx_EnableLSCO+0xcc>)
 8009ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ad8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	4a0c      	ldr	r2, [pc, #48]	@ (8009b14 <HAL_RCCEx_EnableLSCO+0xcc>)
 8009ae2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009ae6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  if(backupchanged == SET)
 8009aea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d101      	bne.n	8009af6 <HAL_RCCEx_EnableLSCO+0xae>
  {
    HAL_PWR_DisableBkUpAccess();
 8009af2:	f7fe fe93 	bl	800881c <HAL_PWR_DisableBkUpAccess>
  }
  if(pwrclkchanged == SET)
 8009af6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d105      	bne.n	8009b0a <HAL_RCCEx_EnableLSCO+0xc2>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8009afe:	4b05      	ldr	r3, [pc, #20]	@ (8009b14 <HAL_RCCEx_EnableLSCO+0xcc>)
 8009b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b02:	4a04      	ldr	r2, [pc, #16]	@ (8009b14 <HAL_RCCEx_EnableLSCO+0xcc>)
 8009b04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b08:	6593      	str	r3, [r2, #88]	@ 0x58
  }
}
 8009b0a:	bf00      	nop
 8009b0c:	3728      	adds	r7, #40	@ 0x28
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	40021000 	.word	0x40021000
 8009b18:	40007000 	.word	0x40007000

08009b1c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b085      	sub	sp, #20
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8009b24:	4b1c      	ldr	r3, [pc, #112]	@ (8009b98 <HAL_RCCEx_CRSConfig+0x7c>)
 8009b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b28:	4a1b      	ldr	r2, [pc, #108]	@ (8009b98 <HAL_RCCEx_CRSConfig+0x7c>)
 8009b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b2e:	6393      	str	r3, [r2, #56]	@ 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 8009b30:	4b19      	ldr	r3, [pc, #100]	@ (8009b98 <HAL_RCCEx_CRSConfig+0x7c>)
 8009b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b34:	4a18      	ldr	r2, [pc, #96]	@ (8009b98 <HAL_RCCEx_CRSConfig+0x7c>)
 8009b36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b3a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	431a      	orrs	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	041b      	lsls	r3, r3, #16
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8009b64:	4a0d      	ldr	r2, [pc, #52]	@ (8009b9c <HAL_RCCEx_CRSConfig+0x80>)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8009b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8009b9c <HAL_RCCEx_CRSConfig+0x80>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	695b      	ldr	r3, [r3, #20]
 8009b76:	021b      	lsls	r3, r3, #8
 8009b78:	4908      	ldr	r1, [pc, #32]	@ (8009b9c <HAL_RCCEx_CRSConfig+0x80>)
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8009b7e:	4b07      	ldr	r3, [pc, #28]	@ (8009b9c <HAL_RCCEx_CRSConfig+0x80>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a06      	ldr	r2, [pc, #24]	@ (8009b9c <HAL_RCCEx_CRSConfig+0x80>)
 8009b84:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009b88:	6013      	str	r3, [r2, #0]
}
 8009b8a:	bf00      	nop
 8009b8c:	3714      	adds	r7, #20
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	40021000 	.word	0x40021000
 8009b9c:	40002000 	.word	0x40002000

08009ba0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d101      	bne.n	8009bb2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e027      	b.n	8009c02 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	7a5b      	ldrb	r3, [r3, #9]
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d105      	bne.n	8009bc8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7f8 fdc4 	bl	8002750 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2202      	movs	r2, #2
 8009bcc:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f023 0108 	bic.w	r1, r3, #8
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	430a      	orrs	r2, r1
 8009be2:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f042 0204 	orr.w	r2, r2, #4
 8009bf2:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b084      	sub	sp, #16
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d070      	beq.n	8009cfe <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d106      	bne.n	8009c36 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f7f8 fdc1 	bl	80027b8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2202      	movs	r2, #2
 8009c3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	f003 0310 	and.w	r3, r3, #16
 8009c48:	2b10      	cmp	r3, #16
 8009c4a:	d04f      	beq.n	8009cec <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	22ca      	movs	r2, #202	@ 0xca
 8009c52:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2253      	movs	r2, #83	@ 0x53
 8009c5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f877 	bl	8009d50 <RTC_EnterInitMode>
 8009c62:	4603      	mov	r3, r0
 8009c64:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009c66:	7bfb      	ldrb	r3, [r7, #15]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d126      	bne.n	8009cba <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	699b      	ldr	r3, [r3, #24]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	6812      	ldr	r2, [r2, #0]
 8009c76:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8009c7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c7e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	6999      	ldr	r1, [r3, #24]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	685a      	ldr	r2, [r3, #4]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	431a      	orrs	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	699b      	ldr	r3, [r3, #24]
 8009c94:	431a      	orrs	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	430a      	orrs	r2, r1
 8009c9c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	68d9      	ldr	r1, [r3, #12]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	041a      	lsls	r2, r3, #16
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	430a      	orrs	r2, r1
 8009cae:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 f883 	bl	8009dbc <RTC_ExitInitMode>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d110      	bne.n	8009ce2 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a1a      	ldr	r2, [r3, #32]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	431a      	orrs	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	695b      	ldr	r3, [r3, #20]
 8009cd8:	431a      	orrs	r2, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	430a      	orrs	r2, r1
 8009ce0:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	22ff      	movs	r2, #255	@ 0xff
 8009ce8:	625a      	str	r2, [r3, #36]	@ 0x24
 8009cea:	e001      	b.n	8009cf0 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009cf0:	7bfb      	ldrb	r3, [r7, #15]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d103      	bne.n	8009cfe <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a0d      	ldr	r2, [pc, #52]	@ (8009d4c <HAL_RTC_WaitForSynchro+0x44>)
 8009d16:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009d18:	f7fa fc1e 	bl	8004558 <HAL_GetTick>
 8009d1c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8009d1e:	e009      	b.n	8009d34 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009d20:	f7fa fc1a 	bl	8004558 <HAL_GetTick>
 8009d24:	4602      	mov	r2, r0
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009d2e:	d901      	bls.n	8009d34 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8009d30:	2303      	movs	r3, #3
 8009d32:	e007      	b.n	8009d44 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	f003 0320 	and.w	r3, r3, #32
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d0ee      	beq.n	8009d20 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	0001005f 	.word	0x0001005f

08009d50 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d123      	bne.n	8009db2 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68da      	ldr	r2, [r3, #12]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009d78:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009d7a:	f7fa fbed 	bl	8004558 <HAL_GetTick>
 8009d7e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009d80:	e00d      	b.n	8009d9e <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009d82:	f7fa fbe9 	bl	8004558 <HAL_GetTick>
 8009d86:	4602      	mov	r2, r0
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009d90:	d905      	bls.n	8009d9e <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8009d92:	2303      	movs	r3, #3
 8009d94:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2203      	movs	r2, #3
 8009d9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d102      	bne.n	8009db2 <RTC_EnterInitMode+0x62>
 8009dac:	7bfb      	ldrb	r3, [r7, #15]
 8009dae:	2b03      	cmp	r3, #3
 8009db0:	d1e7      	bne.n	8009d82 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68da      	ldr	r2, [r3, #12]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009dd6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	f003 0320 	and.w	r3, r3, #32
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10c      	bne.n	8009e00 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f7ff ff8e 	bl	8009d08 <HAL_RTC_WaitForSynchro>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d022      	beq.n	8009e38 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2203      	movs	r2, #3
 8009df6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	73fb      	strb	r3, [r7, #15]
 8009dfe:	e01b      	b.n	8009e38 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	699a      	ldr	r2, [r3, #24]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f022 0220 	bic.w	r2, r2, #32
 8009e0e:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f7ff ff79 	bl	8009d08 <HAL_RTC_WaitForSynchro>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d005      	beq.n	8009e28 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2203      	movs	r2, #3
 8009e20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8009e24:	2303      	movs	r3, #3
 8009e26:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	699a      	ldr	r2, [r3, #24]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f042 0220 	orr.w	r2, r2, #32
 8009e36:	619a      	str	r2, [r3, #24]
  }

  return status;
 8009e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b084      	sub	sp, #16
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d101      	bne.n	8009e58 <HAL_RTCEx_SetRefClock+0x16>
 8009e54:	2302      	movs	r3, #2
 8009e56:	e034      	b.n	8009ec2 <HAL_RTCEx_SetRefClock+0x80>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2202      	movs	r2, #2
 8009e64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	22ca      	movs	r2, #202	@ 0xca
 8009e6e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2253      	movs	r2, #83	@ 0x53
 8009e76:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f7ff ff69 	bl	8009d50 <RTC_EnterInitMode>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 8009e82:	7bfb      	ldrb	r3, [r7, #15]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10c      	bne.n	8009ea2 <HAL_RTCEx_SetRefClock+0x60>
  {
    /* Enable clockref detection */
    SET_BIT(hrtc->Instance->CR, RTC_CR_REFCKON);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	699a      	ldr	r2, [r3, #24]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f042 0210 	orr.w	r2, r2, #16
 8009e96:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f7ff ff8f 	bl	8009dbc <RTC_ExitInitMode>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	22ff      	movs	r2, #255	@ 0xff
 8009ea8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009eaa:	7bfb      	ldrb	r3, [r7, #15]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d103      	bne.n	8009eb8 <HAL_RTCEx_SetRefClock+0x76>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8009ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b084      	sub	sp, #16
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d101      	bne.n	8009edc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e09d      	b.n	800a018 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d108      	bne.n	8009ef6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009eec:	d009      	beq.n	8009f02 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	61da      	str	r2, [r3, #28]
 8009ef4:	e005      	b.n	8009f02 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d106      	bne.n	8009f22 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7f8 fcad 	bl	800287c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2202      	movs	r2, #2
 8009f26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f38:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009f42:	d902      	bls.n	8009f4a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009f44:	2300      	movs	r3, #0
 8009f46:	60fb      	str	r3, [r7, #12]
 8009f48:	e002      	b.n	8009f50 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009f4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f4e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009f58:	d007      	beq.n	8009f6a <HAL_SPI_Init+0xa0>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009f62:	d002      	beq.n	8009f6a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009f7a:	431a      	orrs	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	f003 0302 	and.w	r3, r3, #2
 8009f84:	431a      	orrs	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	695b      	ldr	r3, [r3, #20]
 8009f8a:	f003 0301 	and.w	r3, r3, #1
 8009f8e:	431a      	orrs	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f98:	431a      	orrs	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	69db      	ldr	r3, [r3, #28]
 8009f9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009fa2:	431a      	orrs	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a1b      	ldr	r3, [r3, #32]
 8009fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fac:	ea42 0103 	orr.w	r1, r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fb4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	430a      	orrs	r2, r1
 8009fbe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	0c1b      	lsrs	r3, r3, #16
 8009fc6:	f003 0204 	and.w	r2, r3, #4
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fce:	f003 0310 	and.w	r3, r3, #16
 8009fd2:	431a      	orrs	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fd8:	f003 0308 	and.w	r3, r3, #8
 8009fdc:	431a      	orrs	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009fe6:	ea42 0103 	orr.w	r1, r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	430a      	orrs	r2, r1
 8009ff6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	69da      	ldr	r2, [r3, #28]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a006:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2201      	movs	r2, #1
 800a012:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b088      	sub	sp, #32
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	603b      	str	r3, [r7, #0]
 800a02c:	4613      	mov	r3, r2
 800a02e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a030:	f7fa fa92 	bl	8004558 <HAL_GetTick>
 800a034:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800a036:	88fb      	ldrh	r3, [r7, #6]
 800a038:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a040:	b2db      	uxtb	r3, r3
 800a042:	2b01      	cmp	r3, #1
 800a044:	d001      	beq.n	800a04a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800a046:	2302      	movs	r3, #2
 800a048:	e15c      	b.n	800a304 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d002      	beq.n	800a056 <HAL_SPI_Transmit+0x36>
 800a050:	88fb      	ldrh	r3, [r7, #6]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d101      	bne.n	800a05a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	e154      	b.n	800a304 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a060:	2b01      	cmp	r3, #1
 800a062:	d101      	bne.n	800a068 <HAL_SPI_Transmit+0x48>
 800a064:	2302      	movs	r3, #2
 800a066:	e14d      	b.n	800a304 <HAL_SPI_Transmit+0x2e4>
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2203      	movs	r2, #3
 800a074:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	68ba      	ldr	r2, [r7, #8]
 800a082:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	88fa      	ldrh	r2, [r7, #6]
 800a088:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	88fa      	ldrh	r2, [r7, #6]
 800a08e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0ba:	d10f      	bne.n	800a0dc <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a0da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0e6:	2b40      	cmp	r3, #64	@ 0x40
 800a0e8:	d007      	beq.n	800a0fa <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a102:	d952      	bls.n	800a1aa <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d002      	beq.n	800a112 <HAL_SPI_Transmit+0xf2>
 800a10c:	8b7b      	ldrh	r3, [r7, #26]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d145      	bne.n	800a19e <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a116:	881a      	ldrh	r2, [r3, #0]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a122:	1c9a      	adds	r2, r3, #2
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	3b01      	subs	r3, #1
 800a130:	b29a      	uxth	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a136:	e032      	b.n	800a19e <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	f003 0302 	and.w	r3, r3, #2
 800a142:	2b02      	cmp	r3, #2
 800a144:	d112      	bne.n	800a16c <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a14a:	881a      	ldrh	r2, [r3, #0]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a156:	1c9a      	adds	r2, r3, #2
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a160:	b29b      	uxth	r3, r3
 800a162:	3b01      	subs	r3, #1
 800a164:	b29a      	uxth	r2, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a16a:	e018      	b.n	800a19e <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a16c:	f7fa f9f4 	bl	8004558 <HAL_GetTick>
 800a170:	4602      	mov	r2, r0
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	683a      	ldr	r2, [r7, #0]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d803      	bhi.n	800a184 <HAL_SPI_Transmit+0x164>
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a182:	d102      	bne.n	800a18a <HAL_SPI_Transmit+0x16a>
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d109      	bne.n	800a19e <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e0b2      	b.n	800a304 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1c7      	bne.n	800a138 <HAL_SPI_Transmit+0x118>
 800a1a8:	e083      	b.n	800a2b2 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d002      	beq.n	800a1b8 <HAL_SPI_Transmit+0x198>
 800a1b2:	8b7b      	ldrh	r3, [r7, #26]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d177      	bne.n	800a2a8 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d912      	bls.n	800a1e8 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1c6:	881a      	ldrh	r2, [r3, #0]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1d2:	1c9a      	adds	r2, r3, #2
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	3b02      	subs	r3, #2
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a1e6:	e05f      	b.n	800a2a8 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	330c      	adds	r3, #12
 800a1f2:	7812      	ldrb	r2, [r2, #0]
 800a1f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1fa:	1c5a      	adds	r2, r3, #1
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a204:	b29b      	uxth	r3, r3
 800a206:	3b01      	subs	r3, #1
 800a208:	b29a      	uxth	r2, r3
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a20e:	e04b      	b.n	800a2a8 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	f003 0302 	and.w	r3, r3, #2
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d12b      	bne.n	800a276 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a222:	b29b      	uxth	r3, r3
 800a224:	2b01      	cmp	r3, #1
 800a226:	d912      	bls.n	800a24e <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a22c:	881a      	ldrh	r2, [r3, #0]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a238:	1c9a      	adds	r2, r3, #2
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a242:	b29b      	uxth	r3, r3
 800a244:	3b02      	subs	r3, #2
 800a246:	b29a      	uxth	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a24c:	e02c      	b.n	800a2a8 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	330c      	adds	r3, #12
 800a258:	7812      	ldrb	r2, [r2, #0]
 800a25a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a260:	1c5a      	adds	r2, r3, #1
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	3b01      	subs	r3, #1
 800a26e:	b29a      	uxth	r2, r3
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a274:	e018      	b.n	800a2a8 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a276:	f7fa f96f 	bl	8004558 <HAL_GetTick>
 800a27a:	4602      	mov	r2, r0
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	683a      	ldr	r2, [r7, #0]
 800a282:	429a      	cmp	r2, r3
 800a284:	d803      	bhi.n	800a28e <HAL_SPI_Transmit+0x26e>
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a28c:	d102      	bne.n	800a294 <HAL_SPI_Transmit+0x274>
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d109      	bne.n	800a2a8 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2201      	movs	r2, #1
 800a298:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e02d      	b.n	800a304 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1ae      	bne.n	800a210 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a2b2:	69fa      	ldr	r2, [r7, #28]
 800a2b4:	6839      	ldr	r1, [r7, #0]
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f000 fcf6 	bl	800aca8 <SPI_EndRxTxTransaction>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d002      	beq.n	800a2c8 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2220      	movs	r2, #32
 800a2c6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10a      	bne.n	800a2e6 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	617b      	str	r3, [r7, #20]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	617b      	str	r3, [r7, #20]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	617b      	str	r3, [r7, #20]
 800a2e4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e000      	b.n	800a304 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800a302:	2300      	movs	r3, #0
  }
}
 800a304:	4618      	mov	r0, r3
 800a306:	3720      	adds	r7, #32
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b088      	sub	sp, #32
 800a310:	af02      	add	r7, sp, #8
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	603b      	str	r3, [r7, #0]
 800a318:	4613      	mov	r3, r2
 800a31a:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a322:	b2db      	uxtb	r3, r3
 800a324:	2b01      	cmp	r3, #1
 800a326:	d001      	beq.n	800a32c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800a328:	2302      	movs	r3, #2
 800a32a:	e123      	b.n	800a574 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d002      	beq.n	800a338 <HAL_SPI_Receive+0x2c>
 800a332:	88fb      	ldrh	r3, [r7, #6]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d101      	bne.n	800a33c <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	e11b      	b.n	800a574 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a344:	d112      	bne.n	800a36c <HAL_SPI_Receive+0x60>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d10e      	bne.n	800a36c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2204      	movs	r2, #4
 800a352:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a356:	88fa      	ldrh	r2, [r7, #6]
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	4613      	mov	r3, r2
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	68b9      	ldr	r1, [r7, #8]
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f000 f90a 	bl	800a57c <HAL_SPI_TransmitReceive>
 800a368:	4603      	mov	r3, r0
 800a36a:	e103      	b.n	800a574 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a36c:	f7fa f8f4 	bl	8004558 <HAL_GetTick>
 800a370:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d101      	bne.n	800a380 <HAL_SPI_Receive+0x74>
 800a37c:	2302      	movs	r3, #2
 800a37e:	e0f9      	b.n	800a574 <HAL_SPI_Receive+0x268>
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2204      	movs	r2, #4
 800a38c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2200      	movs	r2, #0
 800a394:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	68ba      	ldr	r2, [r7, #8]
 800a39a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	88fa      	ldrh	r2, [r7, #6]
 800a3a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	88fa      	ldrh	r2, [r7, #6]
 800a3a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a3d2:	d908      	bls.n	800a3e6 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	685a      	ldr	r2, [r3, #4]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a3e2:	605a      	str	r2, [r3, #4]
 800a3e4:	e007      	b.n	800a3f6 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	685a      	ldr	r2, [r3, #4]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a3f4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3fe:	d10f      	bne.n	800a420 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a40e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a41e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a42a:	2b40      	cmp	r3, #64	@ 0x40
 800a42c:	d007      	beq.n	800a43e <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a43c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a446:	d875      	bhi.n	800a534 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a448:	e037      	b.n	800a4ba <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	f003 0301 	and.w	r3, r3, #1
 800a454:	2b01      	cmp	r3, #1
 800a456:	d117      	bne.n	800a488 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f103 020c 	add.w	r2, r3, #12
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a464:	7812      	ldrb	r2, [r2, #0]
 800a466:	b2d2      	uxtb	r2, r2
 800a468:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a46e:	1c5a      	adds	r2, r3, #1
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	3b01      	subs	r3, #1
 800a47e:	b29a      	uxth	r2, r3
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800a486:	e018      	b.n	800a4ba <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a488:	f7fa f866 	bl	8004558 <HAL_GetTick>
 800a48c:	4602      	mov	r2, r0
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	683a      	ldr	r2, [r7, #0]
 800a494:	429a      	cmp	r2, r3
 800a496:	d803      	bhi.n	800a4a0 <HAL_SPI_Receive+0x194>
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a49e:	d102      	bne.n	800a4a6 <HAL_SPI_Receive+0x19a>
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d109      	bne.n	800a4ba <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e05c      	b.n	800a574 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1c1      	bne.n	800a44a <HAL_SPI_Receive+0x13e>
 800a4c6:	e03b      	b.n	800a540 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	f003 0301 	and.w	r3, r3, #1
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d115      	bne.n	800a502 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	68da      	ldr	r2, [r3, #12]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4e0:	b292      	uxth	r2, r2
 800a4e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4e8:	1c9a      	adds	r2, r3, #2
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800a500:	e018      	b.n	800a534 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a502:	f7fa f829 	bl	8004558 <HAL_GetTick>
 800a506:	4602      	mov	r2, r0
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	1ad3      	subs	r3, r2, r3
 800a50c:	683a      	ldr	r2, [r7, #0]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d803      	bhi.n	800a51a <HAL_SPI_Receive+0x20e>
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a518:	d102      	bne.n	800a520 <HAL_SPI_Receive+0x214>
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d109      	bne.n	800a534 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2201      	movs	r2, #1
 800a524:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a530:	2303      	movs	r3, #3
 800a532:	e01f      	b.n	800a574 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1c3      	bne.n	800a4c8 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a540:	697a      	ldr	r2, [r7, #20]
 800a542:	6839      	ldr	r1, [r7, #0]
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f000 fb57 	bl	800abf8 <SPI_EndRxTransaction>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d002      	beq.n	800a556 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2220      	movs	r2, #32
 800a554:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2201      	movs	r2, #1
 800a55a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d001      	beq.n	800a572 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e000      	b.n	800a574 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800a572:	2300      	movs	r3, #0
  }
}
 800a574:	4618      	mov	r0, r3
 800a576:	3718      	adds	r7, #24
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b08a      	sub	sp, #40	@ 0x28
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
 800a588:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a58a:	2301      	movs	r3, #1
 800a58c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a58e:	f7f9 ffe3 	bl	8004558 <HAL_GetTick>
 800a592:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a59a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a5a2:	887b      	ldrh	r3, [r7, #2]
 800a5a4:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800a5a6:	887b      	ldrh	r3, [r7, #2]
 800a5a8:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a5aa:	7ffb      	ldrb	r3, [r7, #31]
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d00c      	beq.n	800a5ca <HAL_SPI_TransmitReceive+0x4e>
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a5b6:	d106      	bne.n	800a5c6 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d102      	bne.n	800a5c6 <HAL_SPI_TransmitReceive+0x4a>
 800a5c0:	7ffb      	ldrb	r3, [r7, #31]
 800a5c2:	2b04      	cmp	r3, #4
 800a5c4:	d001      	beq.n	800a5ca <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800a5c6:	2302      	movs	r3, #2
 800a5c8:	e1f3      	b.n	800a9b2 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d005      	beq.n	800a5dc <HAL_SPI_TransmitReceive+0x60>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d002      	beq.n	800a5dc <HAL_SPI_TransmitReceive+0x60>
 800a5d6:	887b      	ldrh	r3, [r7, #2]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d101      	bne.n	800a5e0 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e1e8      	b.n	800a9b2 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d101      	bne.n	800a5ee <HAL_SPI_TransmitReceive+0x72>
 800a5ea:	2302      	movs	r3, #2
 800a5ec:	e1e1      	b.n	800a9b2 <HAL_SPI_TransmitReceive+0x436>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	2b04      	cmp	r3, #4
 800a600:	d003      	beq.n	800a60a <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2205      	movs	r2, #5
 800a606:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	887a      	ldrh	r2, [r7, #2]
 800a61a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	887a      	ldrh	r2, [r7, #2]
 800a622:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	68ba      	ldr	r2, [r7, #8]
 800a62a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	887a      	ldrh	r2, [r7, #2]
 800a630:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	887a      	ldrh	r2, [r7, #2]
 800a636:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2200      	movs	r2, #0
 800a642:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a64c:	d802      	bhi.n	800a654 <HAL_SPI_TransmitReceive+0xd8>
 800a64e:	8abb      	ldrh	r3, [r7, #20]
 800a650:	2b01      	cmp	r3, #1
 800a652:	d908      	bls.n	800a666 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	685a      	ldr	r2, [r3, #4]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a662:	605a      	str	r2, [r3, #4]
 800a664:	e007      	b.n	800a676 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	685a      	ldr	r2, [r3, #4]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a674:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a680:	2b40      	cmp	r3, #64	@ 0x40
 800a682:	d007      	beq.n	800a694 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a692:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a69c:	f240 8083 	bls.w	800a7a6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d002      	beq.n	800a6ae <HAL_SPI_TransmitReceive+0x132>
 800a6a8:	8afb      	ldrh	r3, [r7, #22]
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d16f      	bne.n	800a78e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b2:	881a      	ldrh	r2, [r3, #0]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6be:	1c9a      	adds	r2, r3, #2
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	b29a      	uxth	r2, r3
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a6d2:	e05c      	b.n	800a78e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	f003 0302 	and.w	r3, r3, #2
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	d11b      	bne.n	800a71a <HAL_SPI_TransmitReceive+0x19e>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d016      	beq.n	800a71a <HAL_SPI_TransmitReceive+0x19e>
 800a6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d113      	bne.n	800a71a <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6f6:	881a      	ldrh	r2, [r3, #0]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a702:	1c9a      	adds	r2, r3, #2
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	3b01      	subs	r3, #1
 800a710:	b29a      	uxth	r2, r3
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a716:	2300      	movs	r3, #0
 800a718:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	f003 0301 	and.w	r3, r3, #1
 800a724:	2b01      	cmp	r3, #1
 800a726:	d11c      	bne.n	800a762 <HAL_SPI_TransmitReceive+0x1e6>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a72e:	b29b      	uxth	r3, r3
 800a730:	2b00      	cmp	r3, #0
 800a732:	d016      	beq.n	800a762 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	68da      	ldr	r2, [r3, #12]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a73e:	b292      	uxth	r2, r2
 800a740:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a746:	1c9a      	adds	r2, r3, #2
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a752:	b29b      	uxth	r3, r3
 800a754:	3b01      	subs	r3, #1
 800a756:	b29a      	uxth	r2, r3
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a75e:	2301      	movs	r3, #1
 800a760:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a762:	f7f9 fef9 	bl	8004558 <HAL_GetTick>
 800a766:	4602      	mov	r2, r0
 800a768:	6a3b      	ldr	r3, [r7, #32]
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a76e:	429a      	cmp	r2, r3
 800a770:	d80d      	bhi.n	800a78e <HAL_SPI_TransmitReceive+0x212>
 800a772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a774:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a778:	d009      	beq.n	800a78e <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2201      	movs	r2, #1
 800a77e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a78a:	2303      	movs	r3, #3
 800a78c:	e111      	b.n	800a9b2 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a792:	b29b      	uxth	r3, r3
 800a794:	2b00      	cmp	r3, #0
 800a796:	d19d      	bne.n	800a6d4 <HAL_SPI_TransmitReceive+0x158>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d197      	bne.n	800a6d4 <HAL_SPI_TransmitReceive+0x158>
 800a7a4:	e0e5      	b.n	800a972 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d003      	beq.n	800a7b6 <HAL_SPI_TransmitReceive+0x23a>
 800a7ae:	8afb      	ldrh	r3, [r7, #22]
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	f040 80d1 	bne.w	800a958 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d912      	bls.n	800a7e6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7c4:	881a      	ldrh	r2, [r3, #0]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7d0:	1c9a      	adds	r2, r3, #2
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	3b02      	subs	r3, #2
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a7e4:	e0b8      	b.n	800a958 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	330c      	adds	r3, #12
 800a7f0:	7812      	ldrb	r2, [r2, #0]
 800a7f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7f8:	1c5a      	adds	r2, r3, #1
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a802:	b29b      	uxth	r3, r3
 800a804:	3b01      	subs	r3, #1
 800a806:	b29a      	uxth	r2, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a80c:	e0a4      	b.n	800a958 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	f003 0302 	and.w	r3, r3, #2
 800a818:	2b02      	cmp	r3, #2
 800a81a:	d134      	bne.n	800a886 <HAL_SPI_TransmitReceive+0x30a>
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a820:	b29b      	uxth	r3, r3
 800a822:	2b00      	cmp	r3, #0
 800a824:	d02f      	beq.n	800a886 <HAL_SPI_TransmitReceive+0x30a>
 800a826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d12c      	bne.n	800a886 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a830:	b29b      	uxth	r3, r3
 800a832:	2b01      	cmp	r3, #1
 800a834:	d912      	bls.n	800a85c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a83a:	881a      	ldrh	r2, [r3, #0]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a846:	1c9a      	adds	r2, r3, #2
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a850:	b29b      	uxth	r3, r3
 800a852:	3b02      	subs	r3, #2
 800a854:	b29a      	uxth	r2, r3
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a85a:	e012      	b.n	800a882 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	330c      	adds	r3, #12
 800a866:	7812      	ldrb	r2, [r2, #0]
 800a868:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a86e:	1c5a      	adds	r2, r3, #1
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a878:	b29b      	uxth	r3, r3
 800a87a:	3b01      	subs	r3, #1
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a882:	2300      	movs	r3, #0
 800a884:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	f003 0301 	and.w	r3, r3, #1
 800a890:	2b01      	cmp	r3, #1
 800a892:	d148      	bne.n	800a926 <HAL_SPI_TransmitReceive+0x3aa>
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d042      	beq.n	800a926 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d923      	bls.n	800a8f4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68da      	ldr	r2, [r3, #12]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8b6:	b292      	uxth	r2, r2
 800a8b8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8be:	1c9a      	adds	r2, r3, #2
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	3b02      	subs	r3, #2
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d81f      	bhi.n	800a922 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	685a      	ldr	r2, [r3, #4]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a8f0:	605a      	str	r2, [r3, #4]
 800a8f2:	e016      	b.n	800a922 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f103 020c 	add.w	r2, r3, #12
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a900:	7812      	ldrb	r2, [r2, #0]
 800a902:	b2d2      	uxtb	r2, r2
 800a904:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a90a:	1c5a      	adds	r2, r3, #1
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a916:	b29b      	uxth	r3, r3
 800a918:	3b01      	subs	r3, #1
 800a91a:	b29a      	uxth	r2, r3
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a922:	2301      	movs	r3, #1
 800a924:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a926:	f7f9 fe17 	bl	8004558 <HAL_GetTick>
 800a92a:	4602      	mov	r2, r0
 800a92c:	6a3b      	ldr	r3, [r7, #32]
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a932:	429a      	cmp	r2, r3
 800a934:	d803      	bhi.n	800a93e <HAL_SPI_TransmitReceive+0x3c2>
 800a936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a938:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a93c:	d102      	bne.n	800a944 <HAL_SPI_TransmitReceive+0x3c8>
 800a93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a940:	2b00      	cmp	r3, #0
 800a942:	d109      	bne.n	800a958 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2201      	movs	r2, #1
 800a948:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2200      	movs	r2, #0
 800a950:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a954:	2303      	movs	r3, #3
 800a956:	e02c      	b.n	800a9b2 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f47f af55 	bne.w	800a80e <HAL_SPI_TransmitReceive+0x292>
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f47f af4e 	bne.w	800a80e <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a972:	6a3a      	ldr	r2, [r7, #32]
 800a974:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f000 f996 	bl	800aca8 <SPI_EndRxTxTransaction>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d008      	beq.n	800a994 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2220      	movs	r2, #32
 800a986:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	e00e      	b.n	800a9b2 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e000      	b.n	800a9b2 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
  }
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3728      	adds	r7, #40	@ 0x28
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
	...

0800a9bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b088      	sub	sp, #32
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	603b      	str	r3, [r7, #0]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a9cc:	f7f9 fdc4 	bl	8004558 <HAL_GetTick>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d4:	1a9b      	subs	r3, r3, r2
 800a9d6:	683a      	ldr	r2, [r7, #0]
 800a9d8:	4413      	add	r3, r2
 800a9da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a9dc:	f7f9 fdbc 	bl	8004558 <HAL_GetTick>
 800a9e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a9e2:	4b39      	ldr	r3, [pc, #228]	@ (800aac8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	015b      	lsls	r3, r3, #5
 800a9e8:	0d1b      	lsrs	r3, r3, #20
 800a9ea:	69fa      	ldr	r2, [r7, #28]
 800a9ec:	fb02 f303 	mul.w	r3, r2, r3
 800a9f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a9f2:	e054      	b.n	800aa9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9fa:	d050      	beq.n	800aa9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a9fc:	f7f9 fdac 	bl	8004558 <HAL_GetTick>
 800aa00:	4602      	mov	r2, r0
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	69fa      	ldr	r2, [r7, #28]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d902      	bls.n	800aa12 <SPI_WaitFlagStateUntilTimeout+0x56>
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d13d      	bne.n	800aa8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	685a      	ldr	r2, [r3, #4]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800aa20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aa2a:	d111      	bne.n	800aa50 <SPI_WaitFlagStateUntilTimeout+0x94>
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa34:	d004      	beq.n	800aa40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa3e:	d107      	bne.n	800aa50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa58:	d10f      	bne.n	800aa7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800aa68:	601a      	str	r2, [r3, #0]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aa78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2200      	movs	r2, #0
 800aa86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800aa8a:	2303      	movs	r3, #3
 800aa8c:	e017      	b.n	800aabe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d101      	bne.n	800aa98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800aa94:	2300      	movs	r3, #0
 800aa96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	689a      	ldr	r2, [r3, #8]
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	68ba      	ldr	r2, [r7, #8]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	bf0c      	ite	eq
 800aaae:	2301      	moveq	r3, #1
 800aab0:	2300      	movne	r3, #0
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	461a      	mov	r2, r3
 800aab6:	79fb      	ldrb	r3, [r7, #7]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d19b      	bne.n	800a9f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3720      	adds	r7, #32
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	20000004 	.word	0x20000004

0800aacc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b08a      	sub	sp, #40	@ 0x28
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
 800aad8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800aada:	2300      	movs	r3, #0
 800aadc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800aade:	f7f9 fd3b 	bl	8004558 <HAL_GetTick>
 800aae2:	4602      	mov	r2, r0
 800aae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae6:	1a9b      	subs	r3, r3, r2
 800aae8:	683a      	ldr	r2, [r7, #0]
 800aaea:	4413      	add	r3, r2
 800aaec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800aaee:	f7f9 fd33 	bl	8004558 <HAL_GetTick>
 800aaf2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	330c      	adds	r3, #12
 800aafa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800aafc:	4b3d      	ldr	r3, [pc, #244]	@ (800abf4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	4613      	mov	r3, r2
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4413      	add	r3, r2
 800ab06:	00da      	lsls	r2, r3, #3
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	0d1b      	lsrs	r3, r3, #20
 800ab0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab0e:	fb02 f303 	mul.w	r3, r2, r3
 800ab12:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ab14:	e060      	b.n	800abd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ab1c:	d107      	bne.n	800ab2e <SPI_WaitFifoStateUntilTimeout+0x62>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d104      	bne.n	800ab2e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ab2c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab34:	d050      	beq.n	800abd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ab36:	f7f9 fd0f 	bl	8004558 <HAL_GetTick>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	6a3b      	ldr	r3, [r7, #32]
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d902      	bls.n	800ab4c <SPI_WaitFifoStateUntilTimeout+0x80>
 800ab46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d13d      	bne.n	800abc8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	685a      	ldr	r2, [r3, #4]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ab5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ab64:	d111      	bne.n	800ab8a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab6e:	d004      	beq.n	800ab7a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	689b      	ldr	r3, [r3, #8]
 800ab74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab78:	d107      	bne.n	800ab8a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ab88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab92:	d10f      	bne.n	800abb4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800aba2:	601a      	str	r2, [r3, #0]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800abb2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e010      	b.n	800abea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d101      	bne.n	800abd2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800abce:	2300      	movs	r3, #0
 800abd0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	3b01      	subs	r3, #1
 800abd6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	689a      	ldr	r2, [r3, #8]
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	4013      	ands	r3, r2
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d196      	bne.n	800ab16 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3728      	adds	r7, #40	@ 0x28
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	20000004 	.word	0x20000004

0800abf8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b086      	sub	sp, #24
 800abfc:	af02      	add	r7, sp, #8
 800abfe:	60f8      	str	r0, [r7, #12]
 800ac00:	60b9      	str	r1, [r7, #8]
 800ac02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ac0c:	d111      	bne.n	800ac32 <SPI_EndRxTransaction+0x3a>
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac16:	d004      	beq.n	800ac22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac20:	d107      	bne.n	800ac32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ac30:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	9300      	str	r3, [sp, #0]
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	2180      	movs	r1, #128	@ 0x80
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	f7ff febd 	bl	800a9bc <SPI_WaitFlagStateUntilTimeout>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d007      	beq.n	800ac58 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac4c:	f043 0220 	orr.w	r2, r3, #32
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ac54:	2303      	movs	r3, #3
 800ac56:	e023      	b.n	800aca0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ac60:	d11d      	bne.n	800ac9e <SPI_EndRxTransaction+0xa6>
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac6a:	d004      	beq.n	800ac76 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac74:	d113      	bne.n	800ac9e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	9300      	str	r3, [sp, #0]
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	f7ff ff22 	bl	800aacc <SPI_WaitFifoStateUntilTimeout>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d007      	beq.n	800ac9e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac92:	f043 0220 	orr.w	r2, r3, #32
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800ac9a:	2303      	movs	r3, #3
 800ac9c:	e000      	b.n	800aca0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ac9e:	2300      	movs	r3, #0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3710      	adds	r7, #16
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b086      	sub	sp, #24
 800acac:	af02      	add	r7, sp, #8
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	9300      	str	r3, [sp, #0]
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	2200      	movs	r2, #0
 800acbc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f7ff ff03 	bl	800aacc <SPI_WaitFifoStateUntilTimeout>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d007      	beq.n	800acdc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acd0:	f043 0220 	orr.w	r2, r3, #32
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800acd8:	2303      	movs	r3, #3
 800acda:	e027      	b.n	800ad2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	2200      	movs	r2, #0
 800ace4:	2180      	movs	r1, #128	@ 0x80
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f7ff fe68 	bl	800a9bc <SPI_WaitFlagStateUntilTimeout>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d007      	beq.n	800ad02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acf6:	f043 0220 	orr.w	r2, r3, #32
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e014      	b.n	800ad2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	9300      	str	r3, [sp, #0]
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f7ff fedc 	bl	800aacc <SPI_WaitFifoStateUntilTimeout>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d007      	beq.n	800ad2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad1e:	f043 0220 	orr.w	r2, r3, #32
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ad26:	2303      	movs	r3, #3
 800ad28:	e000      	b.n	800ad2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d101      	bne.n	800ad46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	e049      	b.n	800adda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d106      	bne.n	800ad60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f7f7 fe62 	bl	8002a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2202      	movs	r2, #2
 800ad64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	3304      	adds	r3, #4
 800ad70:	4619      	mov	r1, r3
 800ad72:	4610      	mov	r0, r2
 800ad74:	f000 fdc0 	bl	800b8f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2201      	movs	r2, #1
 800adb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2201      	movs	r2, #1
 800adcc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2201      	movs	r2, #1
 800add4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3708      	adds	r7, #8
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
	...

0800ade4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d001      	beq.n	800adfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	e04f      	b.n	800ae9c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2202      	movs	r2, #2
 800ae00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	68da      	ldr	r2, [r3, #12]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f042 0201 	orr.w	r2, r2, #1
 800ae12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a23      	ldr	r2, [pc, #140]	@ (800aea8 <HAL_TIM_Base_Start_IT+0xc4>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d01d      	beq.n	800ae5a <HAL_TIM_Base_Start_IT+0x76>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae26:	d018      	beq.n	800ae5a <HAL_TIM_Base_Start_IT+0x76>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a1f      	ldr	r2, [pc, #124]	@ (800aeac <HAL_TIM_Base_Start_IT+0xc8>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d013      	beq.n	800ae5a <HAL_TIM_Base_Start_IT+0x76>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a1e      	ldr	r2, [pc, #120]	@ (800aeb0 <HAL_TIM_Base_Start_IT+0xcc>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d00e      	beq.n	800ae5a <HAL_TIM_Base_Start_IT+0x76>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a1c      	ldr	r2, [pc, #112]	@ (800aeb4 <HAL_TIM_Base_Start_IT+0xd0>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d009      	beq.n	800ae5a <HAL_TIM_Base_Start_IT+0x76>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a1b      	ldr	r2, [pc, #108]	@ (800aeb8 <HAL_TIM_Base_Start_IT+0xd4>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d004      	beq.n	800ae5a <HAL_TIM_Base_Start_IT+0x76>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a19      	ldr	r2, [pc, #100]	@ (800aebc <HAL_TIM_Base_Start_IT+0xd8>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d115      	bne.n	800ae86 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	689a      	ldr	r2, [r3, #8]
 800ae60:	4b17      	ldr	r3, [pc, #92]	@ (800aec0 <HAL_TIM_Base_Start_IT+0xdc>)
 800ae62:	4013      	ands	r3, r2
 800ae64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2b06      	cmp	r3, #6
 800ae6a:	d015      	beq.n	800ae98 <HAL_TIM_Base_Start_IT+0xb4>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae72:	d011      	beq.n	800ae98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f042 0201 	orr.w	r2, r2, #1
 800ae82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae84:	e008      	b.n	800ae98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f042 0201 	orr.w	r2, r2, #1
 800ae94:	601a      	str	r2, [r3, #0]
 800ae96:	e000      	b.n	800ae9a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3714      	adds	r7, #20
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr
 800aea8:	40012c00 	.word	0x40012c00
 800aeac:	40000400 	.word	0x40000400
 800aeb0:	40000800 	.word	0x40000800
 800aeb4:	40013400 	.word	0x40013400
 800aeb8:	40014000 	.word	0x40014000
 800aebc:	40015000 	.word	0x40015000
 800aec0:	00010007 	.word	0x00010007

0800aec4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d101      	bne.n	800aed6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aed2:	2301      	movs	r3, #1
 800aed4:	e049      	b.n	800af6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d106      	bne.n	800aef0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f7f7 fde2 	bl	8002ab4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2202      	movs	r2, #2
 800aef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	3304      	adds	r3, #4
 800af00:	4619      	mov	r1, r3
 800af02:	4610      	mov	r0, r2
 800af04:	f000 fcf8 	bl	800b8f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800af68:	2300      	movs	r3, #0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3708      	adds	r7, #8
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b086      	sub	sp, #24
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
 800af7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	e097      	b.n	800b0b6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d106      	bne.n	800afa0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f7f7 fcb2 	bl	8002904 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2202      	movs	r2, #2
 800afa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	6812      	ldr	r2, [r2, #0]
 800afb2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800afb6:	f023 0307 	bic.w	r3, r3, #7
 800afba:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	3304      	adds	r3, #4
 800afc4:	4619      	mov	r1, r3
 800afc6:	4610      	mov	r0, r2
 800afc8:	f000 fc96 	bl	800b8f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	699b      	ldr	r3, [r3, #24]
 800afda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	6a1b      	ldr	r3, [r3, #32]
 800afe2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	697a      	ldr	r2, [r7, #20]
 800afea:	4313      	orrs	r3, r2
 800afec:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aff4:	f023 0303 	bic.w	r3, r3, #3
 800aff8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	689a      	ldr	r2, [r3, #8]
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	699b      	ldr	r3, [r3, #24]
 800b002:	021b      	lsls	r3, r3, #8
 800b004:	4313      	orrs	r3, r2
 800b006:	693a      	ldr	r2, [r7, #16]
 800b008:	4313      	orrs	r3, r2
 800b00a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800b012:	f023 030c 	bic.w	r3, r3, #12
 800b016:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b01e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	68da      	ldr	r2, [r3, #12]
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	69db      	ldr	r3, [r3, #28]
 800b02c:	021b      	lsls	r3, r3, #8
 800b02e:	4313      	orrs	r3, r2
 800b030:	693a      	ldr	r2, [r7, #16]
 800b032:	4313      	orrs	r3, r2
 800b034:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	691b      	ldr	r3, [r3, #16]
 800b03a:	011a      	lsls	r2, r3, #4
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	6a1b      	ldr	r3, [r3, #32]
 800b040:	031b      	lsls	r3, r3, #12
 800b042:	4313      	orrs	r3, r2
 800b044:	693a      	ldr	r2, [r7, #16]
 800b046:	4313      	orrs	r3, r2
 800b048:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b050:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b058:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	685a      	ldr	r2, [r3, #4]
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	695b      	ldr	r3, [r3, #20]
 800b062:	011b      	lsls	r3, r3, #4
 800b064:	4313      	orrs	r3, r2
 800b066:	68fa      	ldr	r2, [r7, #12]
 800b068:	4313      	orrs	r3, r2
 800b06a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	697a      	ldr	r2, [r7, #20]
 800b072:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	693a      	ldr	r2, [r7, #16]
 800b07a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3718      	adds	r7, #24
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b084      	sub	sp, #16
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
 800b0c6:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b0ce:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b0d6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0de:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0e6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d110      	bne.n	800b110 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b0ee:	7bfb      	ldrb	r3, [r7, #15]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d102      	bne.n	800b0fa <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b0f4:	7b7b      	ldrb	r3, [r7, #13]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d001      	beq.n	800b0fe <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e069      	b.n	800b1d2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2202      	movs	r2, #2
 800b102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2202      	movs	r2, #2
 800b10a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b10e:	e031      	b.n	800b174 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	2b04      	cmp	r3, #4
 800b114:	d110      	bne.n	800b138 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b116:	7bbb      	ldrb	r3, [r7, #14]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d102      	bne.n	800b122 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b11c:	7b3b      	ldrb	r3, [r7, #12]
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d001      	beq.n	800b126 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	e055      	b.n	800b1d2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2202      	movs	r2, #2
 800b12a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2202      	movs	r2, #2
 800b132:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b136:	e01d      	b.n	800b174 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b138:	7bfb      	ldrb	r3, [r7, #15]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d108      	bne.n	800b150 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b13e:	7bbb      	ldrb	r3, [r7, #14]
 800b140:	2b01      	cmp	r3, #1
 800b142:	d105      	bne.n	800b150 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b144:	7b7b      	ldrb	r3, [r7, #13]
 800b146:	2b01      	cmp	r3, #1
 800b148:	d102      	bne.n	800b150 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b14a:	7b3b      	ldrb	r3, [r7, #12]
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d001      	beq.n	800b154 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b150:	2301      	movs	r3, #1
 800b152:	e03e      	b.n	800b1d2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2202      	movs	r2, #2
 800b158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2202      	movs	r2, #2
 800b160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2202      	movs	r2, #2
 800b168:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2202      	movs	r2, #2
 800b170:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d003      	beq.n	800b182 <HAL_TIM_Encoder_Start+0xc4>
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	2b04      	cmp	r3, #4
 800b17e:	d008      	beq.n	800b192 <HAL_TIM_Encoder_Start+0xd4>
 800b180:	e00f      	b.n	800b1a2 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2201      	movs	r2, #1
 800b188:	2100      	movs	r1, #0
 800b18a:	4618      	mov	r0, r3
 800b18c:	f001 f824 	bl	800c1d8 <TIM_CCxChannelCmd>
      break;
 800b190:	e016      	b.n	800b1c0 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2201      	movs	r2, #1
 800b198:	2104      	movs	r1, #4
 800b19a:	4618      	mov	r0, r3
 800b19c:	f001 f81c 	bl	800c1d8 <TIM_CCxChannelCmd>
      break;
 800b1a0:	e00e      	b.n	800b1c0 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f001 f814 	bl	800c1d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	2104      	movs	r1, #4
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f001 f80d 	bl	800c1d8 <TIM_CCxChannelCmd>
      break;
 800b1be:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f042 0201 	orr.w	r2, r2, #1
 800b1ce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b084      	sub	sp, #16
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	691b      	ldr	r3, [r3, #16]
 800b1f0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	f003 0302 	and.w	r3, r3, #2
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d020      	beq.n	800b23e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f003 0302 	and.w	r3, r3, #2
 800b202:	2b00      	cmp	r3, #0
 800b204:	d01b      	beq.n	800b23e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f06f 0202 	mvn.w	r2, #2
 800b20e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	699b      	ldr	r3, [r3, #24]
 800b21c:	f003 0303 	and.w	r3, r3, #3
 800b220:	2b00      	cmp	r3, #0
 800b222:	d003      	beq.n	800b22c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 fb49 	bl	800b8bc <HAL_TIM_IC_CaptureCallback>
 800b22a:	e005      	b.n	800b238 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 fb3b 	bl	800b8a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 fb4c 	bl	800b8d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	f003 0304 	and.w	r3, r3, #4
 800b244:	2b00      	cmp	r3, #0
 800b246:	d020      	beq.n	800b28a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f003 0304 	and.w	r3, r3, #4
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d01b      	beq.n	800b28a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f06f 0204 	mvn.w	r2, #4
 800b25a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2202      	movs	r2, #2
 800b260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	699b      	ldr	r3, [r3, #24]
 800b268:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d003      	beq.n	800b278 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 fb23 	bl	800b8bc <HAL_TIM_IC_CaptureCallback>
 800b276:	e005      	b.n	800b284 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 fb15 	bl	800b8a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fb26 	bl	800b8d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	f003 0308 	and.w	r3, r3, #8
 800b290:	2b00      	cmp	r3, #0
 800b292:	d020      	beq.n	800b2d6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f003 0308 	and.w	r3, r3, #8
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d01b      	beq.n	800b2d6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f06f 0208 	mvn.w	r2, #8
 800b2a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2204      	movs	r2, #4
 800b2ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	69db      	ldr	r3, [r3, #28]
 800b2b4:	f003 0303 	and.w	r3, r3, #3
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d003      	beq.n	800b2c4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 fafd 	bl	800b8bc <HAL_TIM_IC_CaptureCallback>
 800b2c2:	e005      	b.n	800b2d0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 faef 	bl	800b8a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 fb00 	bl	800b8d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	f003 0310 	and.w	r3, r3, #16
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d020      	beq.n	800b322 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f003 0310 	and.w	r3, r3, #16
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d01b      	beq.n	800b322 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f06f 0210 	mvn.w	r2, #16
 800b2f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2208      	movs	r2, #8
 800b2f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	69db      	ldr	r3, [r3, #28]
 800b300:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b304:	2b00      	cmp	r3, #0
 800b306:	d003      	beq.n	800b310 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 fad7 	bl	800b8bc <HAL_TIM_IC_CaptureCallback>
 800b30e:	e005      	b.n	800b31c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 fac9 	bl	800b8a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 fada 	bl	800b8d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	f003 0301 	and.w	r3, r3, #1
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00c      	beq.n	800b346 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f003 0301 	and.w	r3, r3, #1
 800b332:	2b00      	cmp	r3, #0
 800b334:	d007      	beq.n	800b346 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f06f 0201 	mvn.w	r2, #1
 800b33e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f7f7 f8c7 	bl	80024d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d104      	bne.n	800b35a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00c      	beq.n	800b374 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b360:	2b00      	cmp	r3, #0
 800b362:	d007      	beq.n	800b374 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b36c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f001 f8bf 	bl	800c4f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00c      	beq.n	800b398 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b384:	2b00      	cmp	r3, #0
 800b386:	d007      	beq.n	800b398 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f001 f8b7 	bl	800c506 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00c      	beq.n	800b3bc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d007      	beq.n	800b3bc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b3b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fa94 	bl	800b8e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	f003 0320 	and.w	r3, r3, #32
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d00c      	beq.n	800b3e0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f003 0320 	and.w	r3, r3, #32
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d007      	beq.n	800b3e0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f06f 0220 	mvn.w	r2, #32
 800b3d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f001 f87f 	bl	800c4de <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00c      	beq.n	800b404 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d007      	beq.n	800b404 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b3fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f001 f88b 	bl	800c51a <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d00c      	beq.n	800b428 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b414:	2b00      	cmp	r3, #0
 800b416:	d007      	beq.n	800b428 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f001 f883 	bl	800c52e <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d00c      	beq.n	800b44c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d007      	beq.n	800b44c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f001 f87b 	bl	800c542 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b452:	2b00      	cmp	r3, #0
 800b454:	d00c      	beq.n	800b470 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d007      	beq.n	800b470 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f001 f873 	bl	800c556 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b470:	bf00      	nop
 800b472:	3710      	adds	r7, #16
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b086      	sub	sp, #24
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b484:	2300      	movs	r3, #0
 800b486:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d101      	bne.n	800b496 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b492:	2302      	movs	r3, #2
 800b494:	e0ff      	b.n	800b696 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2201      	movs	r2, #1
 800b49a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2b14      	cmp	r3, #20
 800b4a2:	f200 80f0 	bhi.w	800b686 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b4a6:	a201      	add	r2, pc, #4	@ (adr r2, 800b4ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ac:	0800b501 	.word	0x0800b501
 800b4b0:	0800b687 	.word	0x0800b687
 800b4b4:	0800b687 	.word	0x0800b687
 800b4b8:	0800b687 	.word	0x0800b687
 800b4bc:	0800b541 	.word	0x0800b541
 800b4c0:	0800b687 	.word	0x0800b687
 800b4c4:	0800b687 	.word	0x0800b687
 800b4c8:	0800b687 	.word	0x0800b687
 800b4cc:	0800b583 	.word	0x0800b583
 800b4d0:	0800b687 	.word	0x0800b687
 800b4d4:	0800b687 	.word	0x0800b687
 800b4d8:	0800b687 	.word	0x0800b687
 800b4dc:	0800b5c3 	.word	0x0800b5c3
 800b4e0:	0800b687 	.word	0x0800b687
 800b4e4:	0800b687 	.word	0x0800b687
 800b4e8:	0800b687 	.word	0x0800b687
 800b4ec:	0800b605 	.word	0x0800b605
 800b4f0:	0800b687 	.word	0x0800b687
 800b4f4:	0800b687 	.word	0x0800b687
 800b4f8:	0800b687 	.word	0x0800b687
 800b4fc:	0800b645 	.word	0x0800b645
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	68b9      	ldr	r1, [r7, #8]
 800b506:	4618      	mov	r0, r3
 800b508:	f000 faa0 	bl	800ba4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	699a      	ldr	r2, [r3, #24]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f042 0208 	orr.w	r2, r2, #8
 800b51a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	699a      	ldr	r2, [r3, #24]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f022 0204 	bic.w	r2, r2, #4
 800b52a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	6999      	ldr	r1, [r3, #24]
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	691a      	ldr	r2, [r3, #16]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	430a      	orrs	r2, r1
 800b53c:	619a      	str	r2, [r3, #24]
      break;
 800b53e:	e0a5      	b.n	800b68c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	68b9      	ldr	r1, [r7, #8]
 800b546:	4618      	mov	r0, r3
 800b548:	f000 fb1a 	bl	800bb80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	699a      	ldr	r2, [r3, #24]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b55a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	699a      	ldr	r2, [r3, #24]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b56a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	6999      	ldr	r1, [r3, #24]
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	691b      	ldr	r3, [r3, #16]
 800b576:	021a      	lsls	r2, r3, #8
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	430a      	orrs	r2, r1
 800b57e:	619a      	str	r2, [r3, #24]
      break;
 800b580:	e084      	b.n	800b68c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	68b9      	ldr	r1, [r7, #8]
 800b588:	4618      	mov	r0, r3
 800b58a:	f000 fb8d 	bl	800bca8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	69da      	ldr	r2, [r3, #28]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f042 0208 	orr.w	r2, r2, #8
 800b59c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	69da      	ldr	r2, [r3, #28]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f022 0204 	bic.w	r2, r2, #4
 800b5ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	69d9      	ldr	r1, [r3, #28]
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	691a      	ldr	r2, [r3, #16]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	430a      	orrs	r2, r1
 800b5be:	61da      	str	r2, [r3, #28]
      break;
 800b5c0:	e064      	b.n	800b68c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68b9      	ldr	r1, [r7, #8]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f000 fbff 	bl	800bdcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	69da      	ldr	r2, [r3, #28]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b5dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	69da      	ldr	r2, [r3, #28]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b5ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	69d9      	ldr	r1, [r3, #28]
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	691b      	ldr	r3, [r3, #16]
 800b5f8:	021a      	lsls	r2, r3, #8
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	430a      	orrs	r2, r1
 800b600:	61da      	str	r2, [r3, #28]
      break;
 800b602:	e043      	b.n	800b68c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68b9      	ldr	r1, [r7, #8]
 800b60a:	4618      	mov	r0, r3
 800b60c:	f000 fc72 	bl	800bef4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f042 0208 	orr.w	r2, r2, #8
 800b61e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f022 0204 	bic.w	r2, r2, #4
 800b62e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	691a      	ldr	r2, [r3, #16]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	430a      	orrs	r2, r1
 800b640:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b642:	e023      	b.n	800b68c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68b9      	ldr	r1, [r7, #8]
 800b64a:	4618      	mov	r0, r3
 800b64c:	f000 fcbc 	bl	800bfc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b65e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b66e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	691b      	ldr	r3, [r3, #16]
 800b67a:	021a      	lsls	r2, r3, #8
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	430a      	orrs	r2, r1
 800b682:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b684:	e002      	b.n	800b68c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b686:	2301      	movs	r3, #1
 800b688:	75fb      	strb	r3, [r7, #23]
      break;
 800b68a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2200      	movs	r2, #0
 800b690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b694:	7dfb      	ldrb	r3, [r7, #23]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3718      	adds	r7, #24
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop

0800b6a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d101      	bne.n	800b6bc <HAL_TIM_ConfigClockSource+0x1c>
 800b6b8:	2302      	movs	r3, #2
 800b6ba:	e0e6      	b.n	800b88a <HAL_TIM_ConfigClockSource+0x1ea>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2202      	movs	r2, #2
 800b6c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b6da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b6de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b6e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a67      	ldr	r2, [pc, #412]	@ (800b894 <HAL_TIM_ConfigClockSource+0x1f4>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	f000 80b1 	beq.w	800b85e <HAL_TIM_ConfigClockSource+0x1be>
 800b6fc:	4a65      	ldr	r2, [pc, #404]	@ (800b894 <HAL_TIM_ConfigClockSource+0x1f4>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	f200 80b6 	bhi.w	800b870 <HAL_TIM_ConfigClockSource+0x1d0>
 800b704:	4a64      	ldr	r2, [pc, #400]	@ (800b898 <HAL_TIM_ConfigClockSource+0x1f8>)
 800b706:	4293      	cmp	r3, r2
 800b708:	f000 80a9 	beq.w	800b85e <HAL_TIM_ConfigClockSource+0x1be>
 800b70c:	4a62      	ldr	r2, [pc, #392]	@ (800b898 <HAL_TIM_ConfigClockSource+0x1f8>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	f200 80ae 	bhi.w	800b870 <HAL_TIM_ConfigClockSource+0x1d0>
 800b714:	4a61      	ldr	r2, [pc, #388]	@ (800b89c <HAL_TIM_ConfigClockSource+0x1fc>)
 800b716:	4293      	cmp	r3, r2
 800b718:	f000 80a1 	beq.w	800b85e <HAL_TIM_ConfigClockSource+0x1be>
 800b71c:	4a5f      	ldr	r2, [pc, #380]	@ (800b89c <HAL_TIM_ConfigClockSource+0x1fc>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	f200 80a6 	bhi.w	800b870 <HAL_TIM_ConfigClockSource+0x1d0>
 800b724:	4a5e      	ldr	r2, [pc, #376]	@ (800b8a0 <HAL_TIM_ConfigClockSource+0x200>)
 800b726:	4293      	cmp	r3, r2
 800b728:	f000 8099 	beq.w	800b85e <HAL_TIM_ConfigClockSource+0x1be>
 800b72c:	4a5c      	ldr	r2, [pc, #368]	@ (800b8a0 <HAL_TIM_ConfigClockSource+0x200>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	f200 809e 	bhi.w	800b870 <HAL_TIM_ConfigClockSource+0x1d0>
 800b734:	4a5b      	ldr	r2, [pc, #364]	@ (800b8a4 <HAL_TIM_ConfigClockSource+0x204>)
 800b736:	4293      	cmp	r3, r2
 800b738:	f000 8091 	beq.w	800b85e <HAL_TIM_ConfigClockSource+0x1be>
 800b73c:	4a59      	ldr	r2, [pc, #356]	@ (800b8a4 <HAL_TIM_ConfigClockSource+0x204>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	f200 8096 	bhi.w	800b870 <HAL_TIM_ConfigClockSource+0x1d0>
 800b744:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b748:	f000 8089 	beq.w	800b85e <HAL_TIM_ConfigClockSource+0x1be>
 800b74c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b750:	f200 808e 	bhi.w	800b870 <HAL_TIM_ConfigClockSource+0x1d0>
 800b754:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b758:	d03e      	beq.n	800b7d8 <HAL_TIM_ConfigClockSource+0x138>
 800b75a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b75e:	f200 8087 	bhi.w	800b870 <HAL_TIM_ConfigClockSource+0x1d0>
 800b762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b766:	f000 8086 	beq.w	800b876 <HAL_TIM_ConfigClockSource+0x1d6>
 800b76a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b76e:	d87f      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x1d0>
 800b770:	2b70      	cmp	r3, #112	@ 0x70
 800b772:	d01a      	beq.n	800b7aa <HAL_TIM_ConfigClockSource+0x10a>
 800b774:	2b70      	cmp	r3, #112	@ 0x70
 800b776:	d87b      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x1d0>
 800b778:	2b60      	cmp	r3, #96	@ 0x60
 800b77a:	d050      	beq.n	800b81e <HAL_TIM_ConfigClockSource+0x17e>
 800b77c:	2b60      	cmp	r3, #96	@ 0x60
 800b77e:	d877      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x1d0>
 800b780:	2b50      	cmp	r3, #80	@ 0x50
 800b782:	d03c      	beq.n	800b7fe <HAL_TIM_ConfigClockSource+0x15e>
 800b784:	2b50      	cmp	r3, #80	@ 0x50
 800b786:	d873      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x1d0>
 800b788:	2b40      	cmp	r3, #64	@ 0x40
 800b78a:	d058      	beq.n	800b83e <HAL_TIM_ConfigClockSource+0x19e>
 800b78c:	2b40      	cmp	r3, #64	@ 0x40
 800b78e:	d86f      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x1d0>
 800b790:	2b30      	cmp	r3, #48	@ 0x30
 800b792:	d064      	beq.n	800b85e <HAL_TIM_ConfigClockSource+0x1be>
 800b794:	2b30      	cmp	r3, #48	@ 0x30
 800b796:	d86b      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x1d0>
 800b798:	2b20      	cmp	r3, #32
 800b79a:	d060      	beq.n	800b85e <HAL_TIM_ConfigClockSource+0x1be>
 800b79c:	2b20      	cmp	r3, #32
 800b79e:	d867      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x1d0>
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d05c      	beq.n	800b85e <HAL_TIM_ConfigClockSource+0x1be>
 800b7a4:	2b10      	cmp	r3, #16
 800b7a6:	d05a      	beq.n	800b85e <HAL_TIM_ConfigClockSource+0x1be>
 800b7a8:	e062      	b.n	800b870 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b7ba:	f000 fced 	bl	800c198 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b7cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	68ba      	ldr	r2, [r7, #8]
 800b7d4:	609a      	str	r2, [r3, #8]
      break;
 800b7d6:	e04f      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b7e8:	f000 fcd6 	bl	800c198 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	689a      	ldr	r2, [r3, #8]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b7fa:	609a      	str	r2, [r3, #8]
      break;
 800b7fc:	e03c      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b80a:	461a      	mov	r2, r3
 800b80c:	f000 fc48 	bl	800c0a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2150      	movs	r1, #80	@ 0x50
 800b816:	4618      	mov	r0, r3
 800b818:	f000 fca1 	bl	800c15e <TIM_ITRx_SetConfig>
      break;
 800b81c:	e02c      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b82a:	461a      	mov	r2, r3
 800b82c:	f000 fc67 	bl	800c0fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2160      	movs	r1, #96	@ 0x60
 800b836:	4618      	mov	r0, r3
 800b838:	f000 fc91 	bl	800c15e <TIM_ITRx_SetConfig>
      break;
 800b83c:	e01c      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b84a:	461a      	mov	r2, r3
 800b84c:	f000 fc28 	bl	800c0a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2140      	movs	r1, #64	@ 0x40
 800b856:	4618      	mov	r0, r3
 800b858:	f000 fc81 	bl	800c15e <TIM_ITRx_SetConfig>
      break;
 800b85c:	e00c      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4619      	mov	r1, r3
 800b868:	4610      	mov	r0, r2
 800b86a:	f000 fc78 	bl	800c15e <TIM_ITRx_SetConfig>
      break;
 800b86e:	e003      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	73fb      	strb	r3, [r7, #15]
      break;
 800b874:	e000      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800b876:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b888:	7bfb      	ldrb	r3, [r7, #15]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3710      	adds	r7, #16
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	00100070 	.word	0x00100070
 800b898:	00100050 	.word	0x00100050
 800b89c:	00100040 	.word	0x00100040
 800b8a0:	00100030 	.word	0x00100030
 800b8a4:	00100020 	.word	0x00100020

0800b8a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b8b0:	bf00      	nop
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b8c4:	bf00      	nop
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b8ec:	bf00      	nop
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a48      	ldr	r2, [pc, #288]	@ (800ba2c <TIM_Base_SetConfig+0x134>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d013      	beq.n	800b938 <TIM_Base_SetConfig+0x40>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b916:	d00f      	beq.n	800b938 <TIM_Base_SetConfig+0x40>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	4a45      	ldr	r2, [pc, #276]	@ (800ba30 <TIM_Base_SetConfig+0x138>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d00b      	beq.n	800b938 <TIM_Base_SetConfig+0x40>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a44      	ldr	r2, [pc, #272]	@ (800ba34 <TIM_Base_SetConfig+0x13c>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d007      	beq.n	800b938 <TIM_Base_SetConfig+0x40>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a43      	ldr	r2, [pc, #268]	@ (800ba38 <TIM_Base_SetConfig+0x140>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d003      	beq.n	800b938 <TIM_Base_SetConfig+0x40>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a42      	ldr	r2, [pc, #264]	@ (800ba3c <TIM_Base_SetConfig+0x144>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d108      	bne.n	800b94a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b93e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	68fa      	ldr	r2, [r7, #12]
 800b946:	4313      	orrs	r3, r2
 800b948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4a37      	ldr	r2, [pc, #220]	@ (800ba2c <TIM_Base_SetConfig+0x134>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d01f      	beq.n	800b992 <TIM_Base_SetConfig+0x9a>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b958:	d01b      	beq.n	800b992 <TIM_Base_SetConfig+0x9a>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4a34      	ldr	r2, [pc, #208]	@ (800ba30 <TIM_Base_SetConfig+0x138>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d017      	beq.n	800b992 <TIM_Base_SetConfig+0x9a>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	4a33      	ldr	r2, [pc, #204]	@ (800ba34 <TIM_Base_SetConfig+0x13c>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d013      	beq.n	800b992 <TIM_Base_SetConfig+0x9a>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4a32      	ldr	r2, [pc, #200]	@ (800ba38 <TIM_Base_SetConfig+0x140>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d00f      	beq.n	800b992 <TIM_Base_SetConfig+0x9a>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4a32      	ldr	r2, [pc, #200]	@ (800ba40 <TIM_Base_SetConfig+0x148>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d00b      	beq.n	800b992 <TIM_Base_SetConfig+0x9a>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4a31      	ldr	r2, [pc, #196]	@ (800ba44 <TIM_Base_SetConfig+0x14c>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d007      	beq.n	800b992 <TIM_Base_SetConfig+0x9a>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4a30      	ldr	r2, [pc, #192]	@ (800ba48 <TIM_Base_SetConfig+0x150>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d003      	beq.n	800b992 <TIM_Base_SetConfig+0x9a>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	4a2b      	ldr	r2, [pc, #172]	@ (800ba3c <TIM_Base_SetConfig+0x144>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d108      	bne.n	800b9a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	68fa      	ldr	r2, [r7, #12]
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	695b      	ldr	r3, [r3, #20]
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	689a      	ldr	r2, [r3, #8]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4a18      	ldr	r2, [pc, #96]	@ (800ba2c <TIM_Base_SetConfig+0x134>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d013      	beq.n	800b9f8 <TIM_Base_SetConfig+0x100>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	4a19      	ldr	r2, [pc, #100]	@ (800ba38 <TIM_Base_SetConfig+0x140>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d00f      	beq.n	800b9f8 <TIM_Base_SetConfig+0x100>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	4a19      	ldr	r2, [pc, #100]	@ (800ba40 <TIM_Base_SetConfig+0x148>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d00b      	beq.n	800b9f8 <TIM_Base_SetConfig+0x100>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	4a18      	ldr	r2, [pc, #96]	@ (800ba44 <TIM_Base_SetConfig+0x14c>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d007      	beq.n	800b9f8 <TIM_Base_SetConfig+0x100>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	4a17      	ldr	r2, [pc, #92]	@ (800ba48 <TIM_Base_SetConfig+0x150>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d003      	beq.n	800b9f8 <TIM_Base_SetConfig+0x100>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	4a12      	ldr	r2, [pc, #72]	@ (800ba3c <TIM_Base_SetConfig+0x144>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d103      	bne.n	800ba00 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	691a      	ldr	r2, [r3, #16]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	f003 0301 	and.w	r3, r3, #1
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d105      	bne.n	800ba1e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	691b      	ldr	r3, [r3, #16]
 800ba16:	f023 0201 	bic.w	r2, r3, #1
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	611a      	str	r2, [r3, #16]
  }
}
 800ba1e:	bf00      	nop
 800ba20:	3714      	adds	r7, #20
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	40012c00 	.word	0x40012c00
 800ba30:	40000400 	.word	0x40000400
 800ba34:	40000800 	.word	0x40000800
 800ba38:	40013400 	.word	0x40013400
 800ba3c:	40015000 	.word	0x40015000
 800ba40:	40014000 	.word	0x40014000
 800ba44:	40014400 	.word	0x40014400
 800ba48:	40014800 	.word	0x40014800

0800ba4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b087      	sub	sp, #28
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a1b      	ldr	r3, [r3, #32]
 800ba5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6a1b      	ldr	r3, [r3, #32]
 800ba60:	f023 0201 	bic.w	r2, r3, #1
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	699b      	ldr	r3, [r3, #24]
 800ba72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f023 0303 	bic.w	r3, r3, #3
 800ba86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	f023 0302 	bic.w	r3, r3, #2
 800ba98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	697a      	ldr	r2, [r7, #20]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4a30      	ldr	r2, [pc, #192]	@ (800bb68 <TIM_OC1_SetConfig+0x11c>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d013      	beq.n	800bad4 <TIM_OC1_SetConfig+0x88>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	4a2f      	ldr	r2, [pc, #188]	@ (800bb6c <TIM_OC1_SetConfig+0x120>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d00f      	beq.n	800bad4 <TIM_OC1_SetConfig+0x88>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	4a2e      	ldr	r2, [pc, #184]	@ (800bb70 <TIM_OC1_SetConfig+0x124>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d00b      	beq.n	800bad4 <TIM_OC1_SetConfig+0x88>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4a2d      	ldr	r2, [pc, #180]	@ (800bb74 <TIM_OC1_SetConfig+0x128>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d007      	beq.n	800bad4 <TIM_OC1_SetConfig+0x88>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	4a2c      	ldr	r2, [pc, #176]	@ (800bb78 <TIM_OC1_SetConfig+0x12c>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d003      	beq.n	800bad4 <TIM_OC1_SetConfig+0x88>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	4a2b      	ldr	r2, [pc, #172]	@ (800bb7c <TIM_OC1_SetConfig+0x130>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d10c      	bne.n	800baee <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	f023 0308 	bic.w	r3, r3, #8
 800bada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	697a      	ldr	r2, [r7, #20]
 800bae2:	4313      	orrs	r3, r2
 800bae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	f023 0304 	bic.w	r3, r3, #4
 800baec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4a1d      	ldr	r2, [pc, #116]	@ (800bb68 <TIM_OC1_SetConfig+0x11c>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d013      	beq.n	800bb1e <TIM_OC1_SetConfig+0xd2>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	4a1c      	ldr	r2, [pc, #112]	@ (800bb6c <TIM_OC1_SetConfig+0x120>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d00f      	beq.n	800bb1e <TIM_OC1_SetConfig+0xd2>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4a1b      	ldr	r2, [pc, #108]	@ (800bb70 <TIM_OC1_SetConfig+0x124>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d00b      	beq.n	800bb1e <TIM_OC1_SetConfig+0xd2>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a1a      	ldr	r2, [pc, #104]	@ (800bb74 <TIM_OC1_SetConfig+0x128>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d007      	beq.n	800bb1e <TIM_OC1_SetConfig+0xd2>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4a19      	ldr	r2, [pc, #100]	@ (800bb78 <TIM_OC1_SetConfig+0x12c>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d003      	beq.n	800bb1e <TIM_OC1_SetConfig+0xd2>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4a18      	ldr	r2, [pc, #96]	@ (800bb7c <TIM_OC1_SetConfig+0x130>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d111      	bne.n	800bb42 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bb2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	695b      	ldr	r3, [r3, #20]
 800bb32:	693a      	ldr	r2, [r7, #16]
 800bb34:	4313      	orrs	r3, r2
 800bb36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	699b      	ldr	r3, [r3, #24]
 800bb3c:	693a      	ldr	r2, [r7, #16]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	693a      	ldr	r2, [r7, #16]
 800bb46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	685a      	ldr	r2, [r3, #4]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	697a      	ldr	r2, [r7, #20]
 800bb5a:	621a      	str	r2, [r3, #32]
}
 800bb5c:	bf00      	nop
 800bb5e:	371c      	adds	r7, #28
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr
 800bb68:	40012c00 	.word	0x40012c00
 800bb6c:	40013400 	.word	0x40013400
 800bb70:	40014000 	.word	0x40014000
 800bb74:	40014400 	.word	0x40014400
 800bb78:	40014800 	.word	0x40014800
 800bb7c:	40015000 	.word	0x40015000

0800bb80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b087      	sub	sp, #28
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6a1b      	ldr	r3, [r3, #32]
 800bb8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6a1b      	ldr	r3, [r3, #32]
 800bb94:	f023 0210 	bic.w	r2, r3, #16
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	699b      	ldr	r3, [r3, #24]
 800bba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bbae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bbb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bbba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	021b      	lsls	r3, r3, #8
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	f023 0320 	bic.w	r3, r3, #32
 800bbce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	011b      	lsls	r3, r3, #4
 800bbd6:	697a      	ldr	r2, [r7, #20]
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4a2c      	ldr	r2, [pc, #176]	@ (800bc90 <TIM_OC2_SetConfig+0x110>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d007      	beq.n	800bbf4 <TIM_OC2_SetConfig+0x74>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4a2b      	ldr	r2, [pc, #172]	@ (800bc94 <TIM_OC2_SetConfig+0x114>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d003      	beq.n	800bbf4 <TIM_OC2_SetConfig+0x74>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a2a      	ldr	r2, [pc, #168]	@ (800bc98 <TIM_OC2_SetConfig+0x118>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d10d      	bne.n	800bc10 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bbfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	011b      	lsls	r3, r3, #4
 800bc02:	697a      	ldr	r2, [r7, #20]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4a1f      	ldr	r2, [pc, #124]	@ (800bc90 <TIM_OC2_SetConfig+0x110>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d013      	beq.n	800bc40 <TIM_OC2_SetConfig+0xc0>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	4a1e      	ldr	r2, [pc, #120]	@ (800bc94 <TIM_OC2_SetConfig+0x114>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d00f      	beq.n	800bc40 <TIM_OC2_SetConfig+0xc0>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	4a1e      	ldr	r2, [pc, #120]	@ (800bc9c <TIM_OC2_SetConfig+0x11c>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d00b      	beq.n	800bc40 <TIM_OC2_SetConfig+0xc0>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4a1d      	ldr	r2, [pc, #116]	@ (800bca0 <TIM_OC2_SetConfig+0x120>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d007      	beq.n	800bc40 <TIM_OC2_SetConfig+0xc0>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	4a1c      	ldr	r2, [pc, #112]	@ (800bca4 <TIM_OC2_SetConfig+0x124>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d003      	beq.n	800bc40 <TIM_OC2_SetConfig+0xc0>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4a17      	ldr	r2, [pc, #92]	@ (800bc98 <TIM_OC2_SetConfig+0x118>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d113      	bne.n	800bc68 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bc46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bc4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	695b      	ldr	r3, [r3, #20]
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	693a      	ldr	r2, [r7, #16]
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	699b      	ldr	r3, [r3, #24]
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	693a      	ldr	r2, [r7, #16]
 800bc64:	4313      	orrs	r3, r2
 800bc66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	693a      	ldr	r2, [r7, #16]
 800bc6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	68fa      	ldr	r2, [r7, #12]
 800bc72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	685a      	ldr	r2, [r3, #4]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	697a      	ldr	r2, [r7, #20]
 800bc80:	621a      	str	r2, [r3, #32]
}
 800bc82:	bf00      	nop
 800bc84:	371c      	adds	r7, #28
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr
 800bc8e:	bf00      	nop
 800bc90:	40012c00 	.word	0x40012c00
 800bc94:	40013400 	.word	0x40013400
 800bc98:	40015000 	.word	0x40015000
 800bc9c:	40014000 	.word	0x40014000
 800bca0:	40014400 	.word	0x40014400
 800bca4:	40014800 	.word	0x40014800

0800bca8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b087      	sub	sp, #28
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a1b      	ldr	r3, [r3, #32]
 800bcb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6a1b      	ldr	r3, [r3, #32]
 800bcbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	69db      	ldr	r3, [r3, #28]
 800bcce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bcd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f023 0303 	bic.w	r3, r3, #3
 800bce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	68fa      	ldr	r2, [r7, #12]
 800bcea:	4313      	orrs	r3, r2
 800bcec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bcf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	021b      	lsls	r3, r3, #8
 800bcfc:	697a      	ldr	r2, [r7, #20]
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4a2b      	ldr	r2, [pc, #172]	@ (800bdb4 <TIM_OC3_SetConfig+0x10c>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d007      	beq.n	800bd1a <TIM_OC3_SetConfig+0x72>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a2a      	ldr	r2, [pc, #168]	@ (800bdb8 <TIM_OC3_SetConfig+0x110>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d003      	beq.n	800bd1a <TIM_OC3_SetConfig+0x72>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4a29      	ldr	r2, [pc, #164]	@ (800bdbc <TIM_OC3_SetConfig+0x114>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d10d      	bne.n	800bd36 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bd20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	021b      	lsls	r3, r3, #8
 800bd28:	697a      	ldr	r2, [r7, #20]
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bd34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4a1e      	ldr	r2, [pc, #120]	@ (800bdb4 <TIM_OC3_SetConfig+0x10c>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d013      	beq.n	800bd66 <TIM_OC3_SetConfig+0xbe>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4a1d      	ldr	r2, [pc, #116]	@ (800bdb8 <TIM_OC3_SetConfig+0x110>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d00f      	beq.n	800bd66 <TIM_OC3_SetConfig+0xbe>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	4a1d      	ldr	r2, [pc, #116]	@ (800bdc0 <TIM_OC3_SetConfig+0x118>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d00b      	beq.n	800bd66 <TIM_OC3_SetConfig+0xbe>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	4a1c      	ldr	r2, [pc, #112]	@ (800bdc4 <TIM_OC3_SetConfig+0x11c>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d007      	beq.n	800bd66 <TIM_OC3_SetConfig+0xbe>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	4a1b      	ldr	r2, [pc, #108]	@ (800bdc8 <TIM_OC3_SetConfig+0x120>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d003      	beq.n	800bd66 <TIM_OC3_SetConfig+0xbe>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4a16      	ldr	r2, [pc, #88]	@ (800bdbc <TIM_OC3_SetConfig+0x114>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d113      	bne.n	800bd8e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bd74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	695b      	ldr	r3, [r3, #20]
 800bd7a:	011b      	lsls	r3, r3, #4
 800bd7c:	693a      	ldr	r2, [r7, #16]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	699b      	ldr	r3, [r3, #24]
 800bd86:	011b      	lsls	r3, r3, #4
 800bd88:	693a      	ldr	r2, [r7, #16]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	693a      	ldr	r2, [r7, #16]
 800bd92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	68fa      	ldr	r2, [r7, #12]
 800bd98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	685a      	ldr	r2, [r3, #4]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	697a      	ldr	r2, [r7, #20]
 800bda6:	621a      	str	r2, [r3, #32]
}
 800bda8:	bf00      	nop
 800bdaa:	371c      	adds	r7, #28
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr
 800bdb4:	40012c00 	.word	0x40012c00
 800bdb8:	40013400 	.word	0x40013400
 800bdbc:	40015000 	.word	0x40015000
 800bdc0:	40014000 	.word	0x40014000
 800bdc4:	40014400 	.word	0x40014400
 800bdc8:	40014800 	.word	0x40014800

0800bdcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b087      	sub	sp, #28
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6a1b      	ldr	r3, [r3, #32]
 800bdda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6a1b      	ldr	r3, [r3, #32]
 800bde0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	69db      	ldr	r3, [r3, #28]
 800bdf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bdfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bdfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	021b      	lsls	r3, r3, #8
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	4313      	orrs	r3, r2
 800be12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800be1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	689b      	ldr	r3, [r3, #8]
 800be20:	031b      	lsls	r3, r3, #12
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	4313      	orrs	r3, r2
 800be26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	4a2c      	ldr	r2, [pc, #176]	@ (800bedc <TIM_OC4_SetConfig+0x110>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d007      	beq.n	800be40 <TIM_OC4_SetConfig+0x74>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4a2b      	ldr	r2, [pc, #172]	@ (800bee0 <TIM_OC4_SetConfig+0x114>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d003      	beq.n	800be40 <TIM_OC4_SetConfig+0x74>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	4a2a      	ldr	r2, [pc, #168]	@ (800bee4 <TIM_OC4_SetConfig+0x118>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d10d      	bne.n	800be5c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800be46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	031b      	lsls	r3, r3, #12
 800be4e:	697a      	ldr	r2, [r7, #20]
 800be50:	4313      	orrs	r3, r2
 800be52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	4a1f      	ldr	r2, [pc, #124]	@ (800bedc <TIM_OC4_SetConfig+0x110>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d013      	beq.n	800be8c <TIM_OC4_SetConfig+0xc0>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4a1e      	ldr	r2, [pc, #120]	@ (800bee0 <TIM_OC4_SetConfig+0x114>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d00f      	beq.n	800be8c <TIM_OC4_SetConfig+0xc0>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4a1e      	ldr	r2, [pc, #120]	@ (800bee8 <TIM_OC4_SetConfig+0x11c>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d00b      	beq.n	800be8c <TIM_OC4_SetConfig+0xc0>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	4a1d      	ldr	r2, [pc, #116]	@ (800beec <TIM_OC4_SetConfig+0x120>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d007      	beq.n	800be8c <TIM_OC4_SetConfig+0xc0>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	4a1c      	ldr	r2, [pc, #112]	@ (800bef0 <TIM_OC4_SetConfig+0x124>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d003      	beq.n	800be8c <TIM_OC4_SetConfig+0xc0>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4a17      	ldr	r2, [pc, #92]	@ (800bee4 <TIM_OC4_SetConfig+0x118>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d113      	bne.n	800beb4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be92:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800be9a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	695b      	ldr	r3, [r3, #20]
 800bea0:	019b      	lsls	r3, r3, #6
 800bea2:	693a      	ldr	r2, [r7, #16]
 800bea4:	4313      	orrs	r3, r2
 800bea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	699b      	ldr	r3, [r3, #24]
 800beac:	019b      	lsls	r3, r3, #6
 800beae:	693a      	ldr	r2, [r7, #16]
 800beb0:	4313      	orrs	r3, r2
 800beb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	693a      	ldr	r2, [r7, #16]
 800beb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	68fa      	ldr	r2, [r7, #12]
 800bebe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	685a      	ldr	r2, [r3, #4]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	697a      	ldr	r2, [r7, #20]
 800becc:	621a      	str	r2, [r3, #32]
}
 800bece:	bf00      	nop
 800bed0:	371c      	adds	r7, #28
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	40012c00 	.word	0x40012c00
 800bee0:	40013400 	.word	0x40013400
 800bee4:	40015000 	.word	0x40015000
 800bee8:	40014000 	.word	0x40014000
 800beec:	40014400 	.word	0x40014400
 800bef0:	40014800 	.word	0x40014800

0800bef4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b087      	sub	sp, #28
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a1b      	ldr	r3, [r3, #32]
 800bf02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a1b      	ldr	r3, [r3, #32]
 800bf08:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bf22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	68fa      	ldr	r2, [r7, #12]
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bf38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	689b      	ldr	r3, [r3, #8]
 800bf3e:	041b      	lsls	r3, r3, #16
 800bf40:	693a      	ldr	r2, [r7, #16]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4a19      	ldr	r2, [pc, #100]	@ (800bfb0 <TIM_OC5_SetConfig+0xbc>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d013      	beq.n	800bf76 <TIM_OC5_SetConfig+0x82>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4a18      	ldr	r2, [pc, #96]	@ (800bfb4 <TIM_OC5_SetConfig+0xc0>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d00f      	beq.n	800bf76 <TIM_OC5_SetConfig+0x82>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	4a17      	ldr	r2, [pc, #92]	@ (800bfb8 <TIM_OC5_SetConfig+0xc4>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d00b      	beq.n	800bf76 <TIM_OC5_SetConfig+0x82>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4a16      	ldr	r2, [pc, #88]	@ (800bfbc <TIM_OC5_SetConfig+0xc8>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d007      	beq.n	800bf76 <TIM_OC5_SetConfig+0x82>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	4a15      	ldr	r2, [pc, #84]	@ (800bfc0 <TIM_OC5_SetConfig+0xcc>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d003      	beq.n	800bf76 <TIM_OC5_SetConfig+0x82>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	4a14      	ldr	r2, [pc, #80]	@ (800bfc4 <TIM_OC5_SetConfig+0xd0>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d109      	bne.n	800bf8a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bf7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	695b      	ldr	r3, [r3, #20]
 800bf82:	021b      	lsls	r3, r3, #8
 800bf84:	697a      	ldr	r2, [r7, #20]
 800bf86:	4313      	orrs	r3, r2
 800bf88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	697a      	ldr	r2, [r7, #20]
 800bf8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	68fa      	ldr	r2, [r7, #12]
 800bf94:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	685a      	ldr	r2, [r3, #4]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	693a      	ldr	r2, [r7, #16]
 800bfa2:	621a      	str	r2, [r3, #32]
}
 800bfa4:	bf00      	nop
 800bfa6:	371c      	adds	r7, #28
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr
 800bfb0:	40012c00 	.word	0x40012c00
 800bfb4:	40013400 	.word	0x40013400
 800bfb8:	40014000 	.word	0x40014000
 800bfbc:	40014400 	.word	0x40014400
 800bfc0:	40014800 	.word	0x40014800
 800bfc4:	40015000 	.word	0x40015000

0800bfc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b087      	sub	sp, #28
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6a1b      	ldr	r3, [r3, #32]
 800bfd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6a1b      	ldr	r3, [r3, #32]
 800bfdc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bff6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	021b      	lsls	r3, r3, #8
 800c002:	68fa      	ldr	r2, [r7, #12]
 800c004:	4313      	orrs	r3, r2
 800c006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c00e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	051b      	lsls	r3, r3, #20
 800c016:	693a      	ldr	r2, [r7, #16]
 800c018:	4313      	orrs	r3, r2
 800c01a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4a1a      	ldr	r2, [pc, #104]	@ (800c088 <TIM_OC6_SetConfig+0xc0>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d013      	beq.n	800c04c <TIM_OC6_SetConfig+0x84>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4a19      	ldr	r2, [pc, #100]	@ (800c08c <TIM_OC6_SetConfig+0xc4>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d00f      	beq.n	800c04c <TIM_OC6_SetConfig+0x84>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4a18      	ldr	r2, [pc, #96]	@ (800c090 <TIM_OC6_SetConfig+0xc8>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d00b      	beq.n	800c04c <TIM_OC6_SetConfig+0x84>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4a17      	ldr	r2, [pc, #92]	@ (800c094 <TIM_OC6_SetConfig+0xcc>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d007      	beq.n	800c04c <TIM_OC6_SetConfig+0x84>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a16      	ldr	r2, [pc, #88]	@ (800c098 <TIM_OC6_SetConfig+0xd0>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d003      	beq.n	800c04c <TIM_OC6_SetConfig+0x84>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4a15      	ldr	r2, [pc, #84]	@ (800c09c <TIM_OC6_SetConfig+0xd4>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d109      	bne.n	800c060 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c052:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	695b      	ldr	r3, [r3, #20]
 800c058:	029b      	lsls	r3, r3, #10
 800c05a:	697a      	ldr	r2, [r7, #20]
 800c05c:	4313      	orrs	r3, r2
 800c05e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	697a      	ldr	r2, [r7, #20]
 800c064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	685a      	ldr	r2, [r3, #4]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	693a      	ldr	r2, [r7, #16]
 800c078:	621a      	str	r2, [r3, #32]
}
 800c07a:	bf00      	nop
 800c07c:	371c      	adds	r7, #28
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr
 800c086:	bf00      	nop
 800c088:	40012c00 	.word	0x40012c00
 800c08c:	40013400 	.word	0x40013400
 800c090:	40014000 	.word	0x40014000
 800c094:	40014400 	.word	0x40014400
 800c098:	40014800 	.word	0x40014800
 800c09c:	40015000 	.word	0x40015000

0800c0a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b087      	sub	sp, #28
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	60b9      	str	r1, [r7, #8]
 800c0aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	6a1b      	ldr	r3, [r3, #32]
 800c0b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	6a1b      	ldr	r3, [r3, #32]
 800c0b6:	f023 0201 	bic.w	r2, r3, #1
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	699b      	ldr	r3, [r3, #24]
 800c0c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c0ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	011b      	lsls	r3, r3, #4
 800c0d0:	693a      	ldr	r2, [r7, #16]
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	f023 030a 	bic.w	r3, r3, #10
 800c0dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c0de:	697a      	ldr	r2, [r7, #20]
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	693a      	ldr	r2, [r7, #16]
 800c0ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	697a      	ldr	r2, [r7, #20]
 800c0f0:	621a      	str	r2, [r3, #32]
}
 800c0f2:	bf00      	nop
 800c0f4:	371c      	adds	r7, #28
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr

0800c0fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c0fe:	b480      	push	{r7}
 800c100:	b087      	sub	sp, #28
 800c102:	af00      	add	r7, sp, #0
 800c104:	60f8      	str	r0, [r7, #12]
 800c106:	60b9      	str	r1, [r7, #8]
 800c108:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	6a1b      	ldr	r3, [r3, #32]
 800c10e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	6a1b      	ldr	r3, [r3, #32]
 800c114:	f023 0210 	bic.w	r2, r3, #16
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	699b      	ldr	r3, [r3, #24]
 800c120:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c128:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	031b      	lsls	r3, r3, #12
 800c12e:	693a      	ldr	r2, [r7, #16]
 800c130:	4313      	orrs	r3, r2
 800c132:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c13a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	011b      	lsls	r3, r3, #4
 800c140:	697a      	ldr	r2, [r7, #20]
 800c142:	4313      	orrs	r3, r2
 800c144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	693a      	ldr	r2, [r7, #16]
 800c14a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	697a      	ldr	r2, [r7, #20]
 800c150:	621a      	str	r2, [r3, #32]
}
 800c152:	bf00      	nop
 800c154:	371c      	adds	r7, #28
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr

0800c15e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c15e:	b480      	push	{r7}
 800c160:	b085      	sub	sp, #20
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
 800c166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c17a:	683a      	ldr	r2, [r7, #0]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	4313      	orrs	r3, r2
 800c180:	f043 0307 	orr.w	r3, r3, #7
 800c184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	68fa      	ldr	r2, [r7, #12]
 800c18a:	609a      	str	r2, [r3, #8]
}
 800c18c:	bf00      	nop
 800c18e:	3714      	adds	r7, #20
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c198:	b480      	push	{r7}
 800c19a:	b087      	sub	sp, #28
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	607a      	str	r2, [r7, #4]
 800c1a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	689b      	ldr	r3, [r3, #8]
 800c1aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c1b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	021a      	lsls	r2, r3, #8
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	431a      	orrs	r2, r3
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	697a      	ldr	r2, [r7, #20]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	697a      	ldr	r2, [r7, #20]
 800c1ca:	609a      	str	r2, [r3, #8]
}
 800c1cc:	bf00      	nop
 800c1ce:	371c      	adds	r7, #28
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b087      	sub	sp, #28
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	f003 031f 	and.w	r3, r3, #31
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c1f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	6a1a      	ldr	r2, [r3, #32]
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	43db      	mvns	r3, r3
 800c1fa:	401a      	ands	r2, r3
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	6a1a      	ldr	r2, [r3, #32]
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	f003 031f 	and.w	r3, r3, #31
 800c20a:	6879      	ldr	r1, [r7, #4]
 800c20c:	fa01 f303 	lsl.w	r3, r1, r3
 800c210:	431a      	orrs	r2, r3
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	621a      	str	r2, [r3, #32]
}
 800c216:	bf00      	nop
 800c218:	371c      	adds	r7, #28
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr
	...

0800c224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c224:	b480      	push	{r7}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c234:	2b01      	cmp	r3, #1
 800c236:	d101      	bne.n	800c23c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c238:	2302      	movs	r3, #2
 800c23a:	e06f      	b.n	800c31c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2201      	movs	r2, #1
 800c240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2202      	movs	r2, #2
 800c248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a31      	ldr	r2, [pc, #196]	@ (800c328 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d009      	beq.n	800c27a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a30      	ldr	r2, [pc, #192]	@ (800c32c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d004      	beq.n	800c27a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a2e      	ldr	r2, [pc, #184]	@ (800c330 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d108      	bne.n	800c28c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c280:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	4313      	orrs	r3, r2
 800c28a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	68fa      	ldr	r2, [r7, #12]
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	68fa      	ldr	r2, [r7, #12]
 800c2a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	4a1e      	ldr	r2, [pc, #120]	@ (800c328 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d01d      	beq.n	800c2f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2bc:	d018      	beq.n	800c2f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	4a1c      	ldr	r2, [pc, #112]	@ (800c334 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d013      	beq.n	800c2f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a1a      	ldr	r2, [pc, #104]	@ (800c338 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d00e      	beq.n	800c2f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a15      	ldr	r2, [pc, #84]	@ (800c32c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d009      	beq.n	800c2f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a16      	ldr	r2, [pc, #88]	@ (800c33c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d004      	beq.n	800c2f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a11      	ldr	r2, [pc, #68]	@ (800c330 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d10c      	bne.n	800c30a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c2f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	68ba      	ldr	r2, [r7, #8]
 800c2fe:	4313      	orrs	r3, r2
 800c300:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	68ba      	ldr	r2, [r7, #8]
 800c308:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2201      	movs	r2, #1
 800c30e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2200      	movs	r2, #0
 800c316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c31a:	2300      	movs	r3, #0
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3714      	adds	r7, #20
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr
 800c328:	40012c00 	.word	0x40012c00
 800c32c:	40013400 	.word	0x40013400
 800c330:	40015000 	.word	0x40015000
 800c334:	40000400 	.word	0x40000400
 800c338:	40000800 	.word	0x40000800
 800c33c:	40014000 	.word	0x40014000

0800c340 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c34a:	2300      	movs	r3, #0
 800c34c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c354:	2b01      	cmp	r3, #1
 800c356:	d101      	bne.n	800c35c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c358:	2302      	movs	r3, #2
 800c35a:	e078      	b.n	800c44e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2201      	movs	r2, #1
 800c360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	4313      	orrs	r3, r2
 800c370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	689b      	ldr	r3, [r3, #8]
 800c37c:	4313      	orrs	r3, r2
 800c37e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	4313      	orrs	r3, r2
 800c38c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4313      	orrs	r3, r2
 800c39a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	691b      	ldr	r3, [r3, #16]
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	695b      	ldr	r3, [r3, #20]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	699b      	ldr	r3, [r3, #24]
 800c3d0:	041b      	lsls	r3, r3, #16
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	69db      	ldr	r3, [r3, #28]
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a1c      	ldr	r2, [pc, #112]	@ (800c45c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d009      	beq.n	800c402 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a1b      	ldr	r2, [pc, #108]	@ (800c460 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d004      	beq.n	800c402 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a19      	ldr	r2, [pc, #100]	@ (800c464 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d11c      	bne.n	800c43c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c40c:	051b      	lsls	r3, r3, #20
 800c40e:	4313      	orrs	r3, r2
 800c410:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	6a1b      	ldr	r3, [r3, #32]
 800c41c:	4313      	orrs	r3, r2
 800c41e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c42a:	4313      	orrs	r3, r2
 800c42c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c438:	4313      	orrs	r3, r2
 800c43a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	68fa      	ldr	r2, [r7, #12]
 800c442:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2200      	movs	r2, #0
 800c448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3714      	adds	r7, #20
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr
 800c45a:	bf00      	nop
 800c45c:	40012c00 	.word	0x40012c00
 800c460:	40013400 	.word	0x40013400
 800c464:	40015000 	.word	0x40015000

0800c468 <HAL_TIMEx_ConfigEncoderIndex>:
  * @param  sEncoderIndexConfig Encoder index configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigEncoderIndex(TIM_HandleTypeDef *htim,
                                               TIMEx_EncoderIndexConfigTypeDef *sEncoderIndexConfig)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
  assert_param(IS_FUNCTIONAL_STATE(sEncoderIndexConfig->FirstIndexEnable));
  assert_param(IS_TIM_ENCODERINDEX_POSITION(sEncoderIndexConfig->Position));
  assert_param(IS_TIM_ENCODERINDEX_DIRECTION(sEncoderIndexConfig->Direction));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d101      	bne.n	800c480 <HAL_TIMEx_ConfigEncoderIndex+0x18>
 800c47c:	2302      	movs	r3, #2
 800c47e:	e02a      	b.n	800c4d6 <HAL_TIMEx_ConfigEncoderIndex+0x6e>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Configures the TIMx External Trigger (ETR) which is used as Index input */
  TIM_ETR_SetConfig(htim->Instance,
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6818      	ldr	r0, [r3, #0]
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	6859      	ldr	r1, [r3, #4]
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	f7ff fe7e 	bl	800c198 <TIM_ETR_SetConfig>
                    sEncoderIndexConfig->Prescaler,
                    sEncoderIndexConfig->Polarity,
                    sEncoderIndexConfig->Filter);

  /* Configures the encoder index */
  MODIFY_REG(htim->Instance->ECR,
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4a2:	f023 02e6 	bic.w	r2, r3, #230	@ 0xe6
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	695b      	ldr	r3, [r3, #20]
 800c4aa:	6839      	ldr	r1, [r7, #0]
 800c4ac:	7b09      	ldrb	r1, [r1, #12]
 800c4ae:	2901      	cmp	r1, #1
 800c4b0:	d101      	bne.n	800c4b6 <HAL_TIMEx_ConfigEncoderIndex+0x4e>
 800c4b2:	2120      	movs	r1, #32
 800c4b4:	e000      	b.n	800c4b8 <HAL_TIMEx_ConfigEncoderIndex+0x50>
 800c4b6:	2100      	movs	r1, #0
 800c4b8:	4319      	orrs	r1, r3
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	691b      	ldr	r3, [r3, #16]
 800c4be:	430b      	orrs	r3, r1
 800c4c0:	431a      	orrs	r2, r3
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f042 0201 	orr.w	r2, r2, #1
 800c4ca:	659a      	str	r2, [r3, #88]	@ 0x58
             (sEncoderIndexConfig->Direction |
              ((sEncoderIndexConfig->FirstIndexEnable == ENABLE) ? (0x1U << TIM_ECR_FIDX_Pos) : 0U) |
              sEncoderIndexConfig->Position |
              TIM_ECR_IE));

  __HAL_UNLOCK(htim);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c4de:	b480      	push	{r7}
 800c4e0:	b083      	sub	sp, #12
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c4e6:	bf00      	nop
 800c4e8:	370c      	adds	r7, #12
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr

0800c4f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c4f2:	b480      	push	{r7}
 800c4f4:	b083      	sub	sp, #12
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c4fa:	bf00      	nop
 800c4fc:	370c      	adds	r7, #12
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr

0800c506 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c506:	b480      	push	{r7}
 800c508:	b083      	sub	sp, #12
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c50e:	bf00      	nop
 800c510:	370c      	adds	r7, #12
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr

0800c51a <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c51a:	b480      	push	{r7}
 800c51c:	b083      	sub	sp, #12
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c522:	bf00      	nop
 800c524:	370c      	adds	r7, #12
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr

0800c52e <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c52e:	b480      	push	{r7}
 800c530:	b083      	sub	sp, #12
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c536:	bf00      	nop
 800c538:	370c      	adds	r7, #12
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr

0800c542 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c542:	b480      	push	{r7}
 800c544:	b083      	sub	sp, #12
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c54a:	bf00      	nop
 800c54c:	370c      	adds	r7, #12
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr

0800c556 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c556:	b480      	push	{r7}
 800c558:	b083      	sub	sp, #12
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c55e:	bf00      	nop
 800c560:	370c      	adds	r7, #12
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b082      	sub	sp, #8
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d101      	bne.n	800c57c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c578:	2301      	movs	r3, #1
 800c57a:	e042      	b.n	800c602 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c582:	2b00      	cmp	r3, #0
 800c584:	d106      	bne.n	800c594 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2200      	movs	r2, #0
 800c58a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f7f6 fb2a 	bl	8002be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2224      	movs	r2, #36	@ 0x24
 800c598:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f022 0201 	bic.w	r2, r2, #1
 800c5aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d002      	beq.n	800c5ba <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f001 f833 	bl	800d620 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 fd34 	bl	800d028 <UART_SetConfig>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d101      	bne.n	800c5ca <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e01b      	b.n	800c602 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	685a      	ldr	r2, [r3, #4]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c5d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	689a      	ldr	r2, [r3, #8]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c5e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f042 0201 	orr.w	r2, r2, #1
 800c5f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f001 f8b2 	bl	800d764 <UART_CheckIdleState>
 800c600:	4603      	mov	r3, r0
}
 800c602:	4618      	mov	r0, r3
 800c604:	3708      	adds	r7, #8
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}

0800c60a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b08a      	sub	sp, #40	@ 0x28
 800c60e:	af02      	add	r7, sp, #8
 800c610:	60f8      	str	r0, [r7, #12]
 800c612:	60b9      	str	r1, [r7, #8]
 800c614:	603b      	str	r3, [r7, #0]
 800c616:	4613      	mov	r3, r2
 800c618:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c620:	2b20      	cmp	r3, #32
 800c622:	d17b      	bne.n	800c71c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d002      	beq.n	800c630 <HAL_UART_Transmit+0x26>
 800c62a:	88fb      	ldrh	r3, [r7, #6]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d101      	bne.n	800c634 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c630:	2301      	movs	r3, #1
 800c632:	e074      	b.n	800c71e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2200      	movs	r2, #0
 800c638:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2221      	movs	r2, #33	@ 0x21
 800c640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c644:	f7f7 ff88 	bl	8004558 <HAL_GetTick>
 800c648:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	88fa      	ldrh	r2, [r7, #6]
 800c64e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	88fa      	ldrh	r2, [r7, #6]
 800c656:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c662:	d108      	bne.n	800c676 <HAL_UART_Transmit+0x6c>
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	691b      	ldr	r3, [r3, #16]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d104      	bne.n	800c676 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c66c:	2300      	movs	r3, #0
 800c66e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	61bb      	str	r3, [r7, #24]
 800c674:	e003      	b.n	800c67e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c67a:	2300      	movs	r3, #0
 800c67c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c67e:	e030      	b.n	800c6e2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	9300      	str	r3, [sp, #0]
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	2200      	movs	r2, #0
 800c688:	2180      	movs	r1, #128	@ 0x80
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f001 f914 	bl	800d8b8 <UART_WaitOnFlagUntilTimeout>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d005      	beq.n	800c6a2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2220      	movs	r2, #32
 800c69a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c69e:	2303      	movs	r3, #3
 800c6a0:	e03d      	b.n	800c71e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d10b      	bne.n	800c6c0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	881b      	ldrh	r3, [r3, #0]
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c6b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	3302      	adds	r3, #2
 800c6bc:	61bb      	str	r3, [r7, #24]
 800c6be:	e007      	b.n	800c6d0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	781a      	ldrb	r2, [r3, #0]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	3b01      	subs	r3, #1
 800c6da:	b29a      	uxth	r2, r3
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d1c8      	bne.n	800c680 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	9300      	str	r3, [sp, #0]
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	2140      	movs	r1, #64	@ 0x40
 800c6f8:	68f8      	ldr	r0, [r7, #12]
 800c6fa:	f001 f8dd 	bl	800d8b8 <UART_WaitOnFlagUntilTimeout>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d005      	beq.n	800c710 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2220      	movs	r2, #32
 800c708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c70c:	2303      	movs	r3, #3
 800c70e:	e006      	b.n	800c71e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2220      	movs	r2, #32
 800c714:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c718:	2300      	movs	r3, #0
 800c71a:	e000      	b.n	800c71e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c71c:	2302      	movs	r3, #2
  }
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3720      	adds	r7, #32
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b08a      	sub	sp, #40	@ 0x28
 800c72a:	af02      	add	r7, sp, #8
 800c72c:	60f8      	str	r0, [r7, #12]
 800c72e:	60b9      	str	r1, [r7, #8]
 800c730:	603b      	str	r3, [r7, #0]
 800c732:	4613      	mov	r3, r2
 800c734:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c73c:	2b20      	cmp	r3, #32
 800c73e:	f040 80b5 	bne.w	800c8ac <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d002      	beq.n	800c74e <HAL_UART_Receive+0x28>
 800c748:	88fb      	ldrh	r3, [r7, #6]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d101      	bne.n	800c752 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800c74e:	2301      	movs	r3, #1
 800c750:	e0ad      	b.n	800c8ae <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2200      	movs	r2, #0
 800c756:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2222      	movs	r2, #34	@ 0x22
 800c75e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2200      	movs	r2, #0
 800c766:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c768:	f7f7 fef6 	bl	8004558 <HAL_GetTick>
 800c76c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	88fa      	ldrh	r2, [r7, #6]
 800c772:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	88fa      	ldrh	r2, [r7, #6]
 800c77a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c786:	d10e      	bne.n	800c7a6 <HAL_UART_Receive+0x80>
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	691b      	ldr	r3, [r3, #16]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d105      	bne.n	800c79c <HAL_UART_Receive+0x76>
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c796:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c79a:	e02d      	b.n	800c7f8 <HAL_UART_Receive+0xd2>
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	22ff      	movs	r2, #255	@ 0xff
 800c7a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c7a4:	e028      	b.n	800c7f8 <HAL_UART_Receive+0xd2>
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	689b      	ldr	r3, [r3, #8]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d10d      	bne.n	800c7ca <HAL_UART_Receive+0xa4>
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	691b      	ldr	r3, [r3, #16]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d104      	bne.n	800c7c0 <HAL_UART_Receive+0x9a>
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	22ff      	movs	r2, #255	@ 0xff
 800c7ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c7be:	e01b      	b.n	800c7f8 <HAL_UART_Receive+0xd2>
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	227f      	movs	r2, #127	@ 0x7f
 800c7c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c7c8:	e016      	b.n	800c7f8 <HAL_UART_Receive+0xd2>
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	689b      	ldr	r3, [r3, #8]
 800c7ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c7d2:	d10d      	bne.n	800c7f0 <HAL_UART_Receive+0xca>
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d104      	bne.n	800c7e6 <HAL_UART_Receive+0xc0>
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	227f      	movs	r2, #127	@ 0x7f
 800c7e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c7e4:	e008      	b.n	800c7f8 <HAL_UART_Receive+0xd2>
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	223f      	movs	r2, #63	@ 0x3f
 800c7ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c7ee:	e003      	b.n	800c7f8 <HAL_UART_Receive+0xd2>
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c7fe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	689b      	ldr	r3, [r3, #8]
 800c804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c808:	d108      	bne.n	800c81c <HAL_UART_Receive+0xf6>
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d104      	bne.n	800c81c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800c812:	2300      	movs	r3, #0
 800c814:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	61bb      	str	r3, [r7, #24]
 800c81a:	e003      	b.n	800c824 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c820:	2300      	movs	r3, #0
 800c822:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800c824:	e036      	b.n	800c894 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	9300      	str	r3, [sp, #0]
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	2200      	movs	r2, #0
 800c82e:	2120      	movs	r1, #32
 800c830:	68f8      	ldr	r0, [r7, #12]
 800c832:	f001 f841 	bl	800d8b8 <UART_WaitOnFlagUntilTimeout>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d005      	beq.n	800c848 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	2220      	movs	r2, #32
 800c840:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800c844:	2303      	movs	r3, #3
 800c846:	e032      	b.n	800c8ae <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d10c      	bne.n	800c868 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c854:	b29a      	uxth	r2, r3
 800c856:	8a7b      	ldrh	r3, [r7, #18]
 800c858:	4013      	ands	r3, r2
 800c85a:	b29a      	uxth	r2, r3
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c860:	69bb      	ldr	r3, [r7, #24]
 800c862:	3302      	adds	r3, #2
 800c864:	61bb      	str	r3, [r7, #24]
 800c866:	e00c      	b.n	800c882 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c86e:	b2da      	uxtb	r2, r3
 800c870:	8a7b      	ldrh	r3, [r7, #18]
 800c872:	b2db      	uxtb	r3, r3
 800c874:	4013      	ands	r3, r2
 800c876:	b2da      	uxtb	r2, r3
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	3301      	adds	r3, #1
 800c880:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c888:	b29b      	uxth	r3, r3
 800c88a:	3b01      	subs	r3, #1
 800c88c:	b29a      	uxth	r2, r3
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c89a:	b29b      	uxth	r3, r3
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d1c2      	bne.n	800c826 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2220      	movs	r2, #32
 800c8a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	e000      	b.n	800c8ae <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800c8ac:	2302      	movs	r3, #2
  }
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3720      	adds	r7, #32
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
	...

0800c8b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b08a      	sub	sp, #40	@ 0x28
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	4613      	mov	r3, r2
 800c8c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c8cc:	2b20      	cmp	r3, #32
 800c8ce:	d137      	bne.n	800c940 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d002      	beq.n	800c8dc <HAL_UART_Receive_IT+0x24>
 800c8d6:	88fb      	ldrh	r3, [r7, #6]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d101      	bne.n	800c8e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	e030      	b.n	800c942 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a18      	ldr	r2, [pc, #96]	@ (800c94c <HAL_UART_Receive_IT+0x94>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d01f      	beq.n	800c930 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d018      	beq.n	800c930 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	e853 3f00 	ldrex	r3, [r3]
 800c90a:	613b      	str	r3, [r7, #16]
   return(result);
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c912:	627b      	str	r3, [r7, #36]	@ 0x24
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	461a      	mov	r2, r3
 800c91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91c:	623b      	str	r3, [r7, #32]
 800c91e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c920:	69f9      	ldr	r1, [r7, #28]
 800c922:	6a3a      	ldr	r2, [r7, #32]
 800c924:	e841 2300 	strex	r3, r2, [r1]
 800c928:	61bb      	str	r3, [r7, #24]
   return(result);
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d1e6      	bne.n	800c8fe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c930:	88fb      	ldrh	r3, [r7, #6]
 800c932:	461a      	mov	r2, r3
 800c934:	68b9      	ldr	r1, [r7, #8]
 800c936:	68f8      	ldr	r0, [r7, #12]
 800c938:	f001 f82c 	bl	800d994 <UART_Start_Receive_IT>
 800c93c:	4603      	mov	r3, r0
 800c93e:	e000      	b.n	800c942 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c940:	2302      	movs	r3, #2
  }
}
 800c942:	4618      	mov	r0, r3
 800c944:	3728      	adds	r7, #40	@ 0x28
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	40008000 	.word	0x40008000

0800c950 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b0ba      	sub	sp, #232	@ 0xe8
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	69db      	ldr	r3, [r3, #28]
 800c95e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	689b      	ldr	r3, [r3, #8]
 800c972:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c976:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c97a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c97e:	4013      	ands	r3, r2
 800c980:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c984:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d11b      	bne.n	800c9c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c98c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c990:	f003 0320 	and.w	r3, r3, #32
 800c994:	2b00      	cmp	r3, #0
 800c996:	d015      	beq.n	800c9c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c99c:	f003 0320 	and.w	r3, r3, #32
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d105      	bne.n	800c9b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c9a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c9a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d009      	beq.n	800c9c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f000 8300 	beq.w	800cfba <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	4798      	blx	r3
      }
      return;
 800c9c2:	e2fa      	b.n	800cfba <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c9c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f000 8123 	beq.w	800cc14 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c9ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c9d2:	4b8d      	ldr	r3, [pc, #564]	@ (800cc08 <HAL_UART_IRQHandler+0x2b8>)
 800c9d4:	4013      	ands	r3, r2
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d106      	bne.n	800c9e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c9da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c9de:	4b8b      	ldr	r3, [pc, #556]	@ (800cc0c <HAL_UART_IRQHandler+0x2bc>)
 800c9e0:	4013      	ands	r3, r2
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	f000 8116 	beq.w	800cc14 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c9e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9ec:	f003 0301 	and.w	r3, r3, #1
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d011      	beq.n	800ca18 <HAL_UART_IRQHandler+0xc8>
 800c9f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c9f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00b      	beq.n	800ca18 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	2201      	movs	r2, #1
 800ca06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca0e:	f043 0201 	orr.w	r2, r3, #1
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ca18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca1c:	f003 0302 	and.w	r3, r3, #2
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d011      	beq.n	800ca48 <HAL_UART_IRQHandler+0xf8>
 800ca24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca28:	f003 0301 	and.w	r3, r3, #1
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d00b      	beq.n	800ca48 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2202      	movs	r2, #2
 800ca36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca3e:	f043 0204 	orr.w	r2, r3, #4
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ca48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca4c:	f003 0304 	and.w	r3, r3, #4
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d011      	beq.n	800ca78 <HAL_UART_IRQHandler+0x128>
 800ca54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca58:	f003 0301 	and.w	r3, r3, #1
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00b      	beq.n	800ca78 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2204      	movs	r2, #4
 800ca66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca6e:	f043 0202 	orr.w	r2, r3, #2
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ca78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca7c:	f003 0308 	and.w	r3, r3, #8
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d017      	beq.n	800cab4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ca84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca88:	f003 0320 	and.w	r3, r3, #32
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d105      	bne.n	800ca9c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ca90:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ca94:	4b5c      	ldr	r3, [pc, #368]	@ (800cc08 <HAL_UART_IRQHandler+0x2b8>)
 800ca96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d00b      	beq.n	800cab4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	2208      	movs	r2, #8
 800caa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800caaa:	f043 0208 	orr.w	r2, r3, #8
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cab8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d012      	beq.n	800cae6 <HAL_UART_IRQHandler+0x196>
 800cac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cac4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d00c      	beq.n	800cae6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cad4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cadc:	f043 0220 	orr.w	r2, r3, #32
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800caec:	2b00      	cmp	r3, #0
 800caee:	f000 8266 	beq.w	800cfbe <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800caf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800caf6:	f003 0320 	and.w	r3, r3, #32
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d013      	beq.n	800cb26 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cafe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb02:	f003 0320 	and.w	r3, r3, #32
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d105      	bne.n	800cb16 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cb0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d007      	beq.n	800cb26 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d003      	beq.n	800cb26 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb2c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb3a:	2b40      	cmp	r3, #64	@ 0x40
 800cb3c:	d005      	beq.n	800cb4a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cb3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cb42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d054      	beq.n	800cbf4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f001 f844 	bl	800dbd8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb5a:	2b40      	cmp	r3, #64	@ 0x40
 800cb5c:	d146      	bne.n	800cbec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	3308      	adds	r3, #8
 800cb64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cb6c:	e853 3f00 	ldrex	r3, [r3]
 800cb70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cb74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cb78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	3308      	adds	r3, #8
 800cb86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cb8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cb8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cb96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cb9a:	e841 2300 	strex	r3, r2, [r1]
 800cb9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1d9      	bne.n	800cb5e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d017      	beq.n	800cbe4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbba:	4a15      	ldr	r2, [pc, #84]	@ (800cc10 <HAL_UART_IRQHandler+0x2c0>)
 800cbbc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7f8 ffea 	bl	8005b9e <HAL_DMA_Abort_IT>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d019      	beq.n	800cc04 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800cbde:	4610      	mov	r0, r2
 800cbe0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbe2:	e00f      	b.n	800cc04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f000 fa09 	bl	800cffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbea:	e00b      	b.n	800cc04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 fa05 	bl	800cffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbf2:	e007      	b.n	800cc04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 fa01 	bl	800cffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800cc02:	e1dc      	b.n	800cfbe <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc04:	bf00      	nop
    return;
 800cc06:	e1da      	b.n	800cfbe <HAL_UART_IRQHandler+0x66e>
 800cc08:	10000001 	.word	0x10000001
 800cc0c:	04000120 	.word	0x04000120
 800cc10:	0800dca5 	.word	0x0800dca5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	f040 8170 	bne.w	800cefe <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cc1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc22:	f003 0310 	and.w	r3, r3, #16
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f000 8169 	beq.w	800cefe <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cc2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc30:	f003 0310 	and.w	r3, r3, #16
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	f000 8162 	beq.w	800cefe <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2210      	movs	r2, #16
 800cc40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	689b      	ldr	r3, [r3, #8]
 800cc48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc4c:	2b40      	cmp	r3, #64	@ 0x40
 800cc4e:	f040 80d8 	bne.w	800ce02 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cc60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	f000 80af 	beq.w	800cdc8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cc70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cc74:	429a      	cmp	r2, r3
 800cc76:	f080 80a7 	bcs.w	800cdc8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cc80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f003 0320 	and.w	r3, r3, #32
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	f040 8087 	bne.w	800cda6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cca4:	e853 3f00 	ldrex	r3, [r3]
 800cca8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ccac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ccb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ccb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ccc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ccc6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ccce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ccd2:	e841 2300 	strex	r3, r2, [r1]
 800ccd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ccda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d1da      	bne.n	800cc98 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	3308      	adds	r3, #8
 800cce8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ccec:	e853 3f00 	ldrex	r3, [r3]
 800ccf0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ccf2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ccf4:	f023 0301 	bic.w	r3, r3, #1
 800ccf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	3308      	adds	r3, #8
 800cd02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cd06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cd0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cd0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cd12:	e841 2300 	strex	r3, r2, [r1]
 800cd16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cd18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d1e1      	bne.n	800cce2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	3308      	adds	r3, #8
 800cd24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cd28:	e853 3f00 	ldrex	r3, [r3]
 800cd2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cd2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cd30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	3308      	adds	r3, #8
 800cd3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cd42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cd44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cd48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cd4a:	e841 2300 	strex	r3, r2, [r1]
 800cd4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cd50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d1e3      	bne.n	800cd1e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2220      	movs	r2, #32
 800cd5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2200      	movs	r2, #0
 800cd62:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd6c:	e853 3f00 	ldrex	r3, [r3]
 800cd70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cd72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd74:	f023 0310 	bic.w	r3, r3, #16
 800cd78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	461a      	mov	r2, r3
 800cd82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd86:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cd88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cd8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cd8e:	e841 2300 	strex	r3, r2, [r1]
 800cd92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cd94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d1e4      	bne.n	800cd64 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7f8 fea3 	bl	8005aec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2202      	movs	r2, #2
 800cdaa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	1ad3      	subs	r3, r2, r3
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 f925 	bl	800d010 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800cdc6:	e0fc      	b.n	800cfc2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cdce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	f040 80f5 	bne.w	800cfc2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f003 0320 	and.w	r3, r3, #32
 800cde6:	2b20      	cmp	r3, #32
 800cde8:	f040 80eb 	bne.w	800cfc2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2202      	movs	r2, #2
 800cdf0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f908 	bl	800d010 <HAL_UARTEx_RxEventCallback>
      return;
 800ce00:	e0df      	b.n	800cfc2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	1ad3      	subs	r3, r2, r3
 800ce12:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	f000 80d1 	beq.w	800cfc6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800ce24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f000 80cc 	beq.w	800cfc6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce36:	e853 3f00 	ldrex	r3, [r3]
 800ce3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ce3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ce50:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce52:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ce56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce58:	e841 2300 	strex	r3, r2, [r1]
 800ce5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ce5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d1e4      	bne.n	800ce2e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	3308      	adds	r3, #8
 800ce6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce6e:	e853 3f00 	ldrex	r3, [r3]
 800ce72:	623b      	str	r3, [r7, #32]
   return(result);
 800ce74:	6a3b      	ldr	r3, [r7, #32]
 800ce76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ce7a:	f023 0301 	bic.w	r3, r3, #1
 800ce7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	3308      	adds	r3, #8
 800ce88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ce8c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ce8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce94:	e841 2300 	strex	r3, r2, [r1]
 800ce98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d1e1      	bne.n	800ce64 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2220      	movs	r2, #32
 800cea4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	e853 3f00 	ldrex	r3, [r3]
 800cec0:	60fb      	str	r3, [r7, #12]
   return(result);
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	f023 0310 	bic.w	r3, r3, #16
 800cec8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	461a      	mov	r2, r3
 800ced2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ced6:	61fb      	str	r3, [r7, #28]
 800ced8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceda:	69b9      	ldr	r1, [r7, #24]
 800cedc:	69fa      	ldr	r2, [r7, #28]
 800cede:	e841 2300 	strex	r3, r2, [r1]
 800cee2:	617b      	str	r3, [r7, #20]
   return(result);
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d1e4      	bne.n	800ceb4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2202      	movs	r2, #2
 800ceee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cef0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cef4:	4619      	mov	r1, r3
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 f88a 	bl	800d010 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cefc:	e063      	b.n	800cfc6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cefe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00e      	beq.n	800cf28 <HAL_UART_IRQHandler+0x5d8>
 800cf0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cf0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d008      	beq.n	800cf28 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800cf1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f001 fc1d 	bl	800e760 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf26:	e051      	b.n	800cfcc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cf28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d014      	beq.n	800cf5e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cf34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d105      	bne.n	800cf4c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cf40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cf44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d008      	beq.n	800cf5e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d03a      	beq.n	800cfca <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	4798      	blx	r3
    }
    return;
 800cf5c:	e035      	b.n	800cfca <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cf5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d009      	beq.n	800cf7e <HAL_UART_IRQHandler+0x62e>
 800cf6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d003      	beq.n	800cf7e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 fea6 	bl	800dcc8 <UART_EndTransmit_IT>
    return;
 800cf7c:	e026      	b.n	800cfcc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cf7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d009      	beq.n	800cf9e <HAL_UART_IRQHandler+0x64e>
 800cf8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf8e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d003      	beq.n	800cf9e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f001 fbf6 	bl	800e788 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf9c:	e016      	b.n	800cfcc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cf9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfa2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d010      	beq.n	800cfcc <HAL_UART_IRQHandler+0x67c>
 800cfaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	da0c      	bge.n	800cfcc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f001 fbde 	bl	800e774 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cfb8:	e008      	b.n	800cfcc <HAL_UART_IRQHandler+0x67c>
      return;
 800cfba:	bf00      	nop
 800cfbc:	e006      	b.n	800cfcc <HAL_UART_IRQHandler+0x67c>
    return;
 800cfbe:	bf00      	nop
 800cfc0:	e004      	b.n	800cfcc <HAL_UART_IRQHandler+0x67c>
      return;
 800cfc2:	bf00      	nop
 800cfc4:	e002      	b.n	800cfcc <HAL_UART_IRQHandler+0x67c>
      return;
 800cfc6:	bf00      	nop
 800cfc8:	e000      	b.n	800cfcc <HAL_UART_IRQHandler+0x67c>
    return;
 800cfca:	bf00      	nop
  }
}
 800cfcc:	37e8      	adds	r7, #232	@ 0xe8
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop

0800cfd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cfdc:	bf00      	nop
 800cfde:	370c      	adds	r7, #12
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr

0800cfe8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b083      	sub	sp, #12
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800cff0:	bf00      	nop
 800cff2:	370c      	adds	r7, #12
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr

0800cffc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b083      	sub	sp, #12
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d004:	bf00      	nop
 800d006:	370c      	adds	r7, #12
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	460b      	mov	r3, r1
 800d01a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d01c:	bf00      	nop
 800d01e:	370c      	adds	r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr

0800d028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d02c:	b08c      	sub	sp, #48	@ 0x30
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d032:	2300      	movs	r3, #0
 800d034:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	689a      	ldr	r2, [r3, #8]
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	691b      	ldr	r3, [r3, #16]
 800d040:	431a      	orrs	r2, r3
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	695b      	ldr	r3, [r3, #20]
 800d046:	431a      	orrs	r2, r3
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	69db      	ldr	r3, [r3, #28]
 800d04c:	4313      	orrs	r3, r2
 800d04e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	4baa      	ldr	r3, [pc, #680]	@ (800d300 <UART_SetConfig+0x2d8>)
 800d058:	4013      	ands	r3, r2
 800d05a:	697a      	ldr	r2, [r7, #20]
 800d05c:	6812      	ldr	r2, [r2, #0]
 800d05e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d060:	430b      	orrs	r3, r1
 800d062:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	68da      	ldr	r2, [r3, #12]
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	430a      	orrs	r2, r1
 800d078:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	699b      	ldr	r3, [r3, #24]
 800d07e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4a9f      	ldr	r2, [pc, #636]	@ (800d304 <UART_SetConfig+0x2dc>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d004      	beq.n	800d094 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	6a1b      	ldr	r3, [r3, #32]
 800d08e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d090:	4313      	orrs	r3, r2
 800d092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800d09e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800d0a2:	697a      	ldr	r2, [r7, #20]
 800d0a4:	6812      	ldr	r2, [r2, #0]
 800d0a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d0a8:	430b      	orrs	r3, r1
 800d0aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0b2:	f023 010f 	bic.w	r1, r3, #15
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	430a      	orrs	r2, r1
 800d0c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4a90      	ldr	r2, [pc, #576]	@ (800d308 <UART_SetConfig+0x2e0>)
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d125      	bne.n	800d118 <UART_SetConfig+0xf0>
 800d0cc:	4b8f      	ldr	r3, [pc, #572]	@ (800d30c <UART_SetConfig+0x2e4>)
 800d0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0d2:	f003 0303 	and.w	r3, r3, #3
 800d0d6:	2b03      	cmp	r3, #3
 800d0d8:	d81a      	bhi.n	800d110 <UART_SetConfig+0xe8>
 800d0da:	a201      	add	r2, pc, #4	@ (adr r2, 800d0e0 <UART_SetConfig+0xb8>)
 800d0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e0:	0800d0f1 	.word	0x0800d0f1
 800d0e4:	0800d101 	.word	0x0800d101
 800d0e8:	0800d0f9 	.word	0x0800d0f9
 800d0ec:	0800d109 	.word	0x0800d109
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0f6:	e116      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d0f8:	2302      	movs	r3, #2
 800d0fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0fe:	e112      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d100:	2304      	movs	r3, #4
 800d102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d106:	e10e      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d108:	2308      	movs	r3, #8
 800d10a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d10e:	e10a      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d110:	2310      	movs	r3, #16
 800d112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d116:	e106      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a7c      	ldr	r2, [pc, #496]	@ (800d310 <UART_SetConfig+0x2e8>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d138      	bne.n	800d194 <UART_SetConfig+0x16c>
 800d122:	4b7a      	ldr	r3, [pc, #488]	@ (800d30c <UART_SetConfig+0x2e4>)
 800d124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d128:	f003 030c 	and.w	r3, r3, #12
 800d12c:	2b0c      	cmp	r3, #12
 800d12e:	d82d      	bhi.n	800d18c <UART_SetConfig+0x164>
 800d130:	a201      	add	r2, pc, #4	@ (adr r2, 800d138 <UART_SetConfig+0x110>)
 800d132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d136:	bf00      	nop
 800d138:	0800d16d 	.word	0x0800d16d
 800d13c:	0800d18d 	.word	0x0800d18d
 800d140:	0800d18d 	.word	0x0800d18d
 800d144:	0800d18d 	.word	0x0800d18d
 800d148:	0800d17d 	.word	0x0800d17d
 800d14c:	0800d18d 	.word	0x0800d18d
 800d150:	0800d18d 	.word	0x0800d18d
 800d154:	0800d18d 	.word	0x0800d18d
 800d158:	0800d175 	.word	0x0800d175
 800d15c:	0800d18d 	.word	0x0800d18d
 800d160:	0800d18d 	.word	0x0800d18d
 800d164:	0800d18d 	.word	0x0800d18d
 800d168:	0800d185 	.word	0x0800d185
 800d16c:	2300      	movs	r3, #0
 800d16e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d172:	e0d8      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d174:	2302      	movs	r3, #2
 800d176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d17a:	e0d4      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d17c:	2304      	movs	r3, #4
 800d17e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d182:	e0d0      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d184:	2308      	movs	r3, #8
 800d186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d18a:	e0cc      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d18c:	2310      	movs	r3, #16
 800d18e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d192:	e0c8      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4a5e      	ldr	r2, [pc, #376]	@ (800d314 <UART_SetConfig+0x2ec>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d125      	bne.n	800d1ea <UART_SetConfig+0x1c2>
 800d19e:	4b5b      	ldr	r3, [pc, #364]	@ (800d30c <UART_SetConfig+0x2e4>)
 800d1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d1a8:	2b30      	cmp	r3, #48	@ 0x30
 800d1aa:	d016      	beq.n	800d1da <UART_SetConfig+0x1b2>
 800d1ac:	2b30      	cmp	r3, #48	@ 0x30
 800d1ae:	d818      	bhi.n	800d1e2 <UART_SetConfig+0x1ba>
 800d1b0:	2b20      	cmp	r3, #32
 800d1b2:	d00a      	beq.n	800d1ca <UART_SetConfig+0x1a2>
 800d1b4:	2b20      	cmp	r3, #32
 800d1b6:	d814      	bhi.n	800d1e2 <UART_SetConfig+0x1ba>
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d002      	beq.n	800d1c2 <UART_SetConfig+0x19a>
 800d1bc:	2b10      	cmp	r3, #16
 800d1be:	d008      	beq.n	800d1d2 <UART_SetConfig+0x1aa>
 800d1c0:	e00f      	b.n	800d1e2 <UART_SetConfig+0x1ba>
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1c8:	e0ad      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d1ca:	2302      	movs	r3, #2
 800d1cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1d0:	e0a9      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d1d2:	2304      	movs	r3, #4
 800d1d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1d8:	e0a5      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d1da:	2308      	movs	r3, #8
 800d1dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1e0:	e0a1      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d1e2:	2310      	movs	r3, #16
 800d1e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1e8:	e09d      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a4a      	ldr	r2, [pc, #296]	@ (800d318 <UART_SetConfig+0x2f0>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d125      	bne.n	800d240 <UART_SetConfig+0x218>
 800d1f4:	4b45      	ldr	r3, [pc, #276]	@ (800d30c <UART_SetConfig+0x2e4>)
 800d1f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d1fe:	2bc0      	cmp	r3, #192	@ 0xc0
 800d200:	d016      	beq.n	800d230 <UART_SetConfig+0x208>
 800d202:	2bc0      	cmp	r3, #192	@ 0xc0
 800d204:	d818      	bhi.n	800d238 <UART_SetConfig+0x210>
 800d206:	2b80      	cmp	r3, #128	@ 0x80
 800d208:	d00a      	beq.n	800d220 <UART_SetConfig+0x1f8>
 800d20a:	2b80      	cmp	r3, #128	@ 0x80
 800d20c:	d814      	bhi.n	800d238 <UART_SetConfig+0x210>
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d002      	beq.n	800d218 <UART_SetConfig+0x1f0>
 800d212:	2b40      	cmp	r3, #64	@ 0x40
 800d214:	d008      	beq.n	800d228 <UART_SetConfig+0x200>
 800d216:	e00f      	b.n	800d238 <UART_SetConfig+0x210>
 800d218:	2300      	movs	r3, #0
 800d21a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d21e:	e082      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d220:	2302      	movs	r3, #2
 800d222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d226:	e07e      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d228:	2304      	movs	r3, #4
 800d22a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d22e:	e07a      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d230:	2308      	movs	r3, #8
 800d232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d236:	e076      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d238:	2310      	movs	r3, #16
 800d23a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d23e:	e072      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4a35      	ldr	r2, [pc, #212]	@ (800d31c <UART_SetConfig+0x2f4>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d12a      	bne.n	800d2a0 <UART_SetConfig+0x278>
 800d24a:	4b30      	ldr	r3, [pc, #192]	@ (800d30c <UART_SetConfig+0x2e4>)
 800d24c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d250:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d254:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d258:	d01a      	beq.n	800d290 <UART_SetConfig+0x268>
 800d25a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d25e:	d81b      	bhi.n	800d298 <UART_SetConfig+0x270>
 800d260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d264:	d00c      	beq.n	800d280 <UART_SetConfig+0x258>
 800d266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d26a:	d815      	bhi.n	800d298 <UART_SetConfig+0x270>
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d003      	beq.n	800d278 <UART_SetConfig+0x250>
 800d270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d274:	d008      	beq.n	800d288 <UART_SetConfig+0x260>
 800d276:	e00f      	b.n	800d298 <UART_SetConfig+0x270>
 800d278:	2300      	movs	r3, #0
 800d27a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d27e:	e052      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d280:	2302      	movs	r3, #2
 800d282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d286:	e04e      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d288:	2304      	movs	r3, #4
 800d28a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d28e:	e04a      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d290:	2308      	movs	r3, #8
 800d292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d296:	e046      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d298:	2310      	movs	r3, #16
 800d29a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d29e:	e042      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4a17      	ldr	r2, [pc, #92]	@ (800d304 <UART_SetConfig+0x2dc>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d13a      	bne.n	800d320 <UART_SetConfig+0x2f8>
 800d2aa:	4b18      	ldr	r3, [pc, #96]	@ (800d30c <UART_SetConfig+0x2e4>)
 800d2ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d2b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d2b8:	d01a      	beq.n	800d2f0 <UART_SetConfig+0x2c8>
 800d2ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d2be:	d81b      	bhi.n	800d2f8 <UART_SetConfig+0x2d0>
 800d2c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d2c4:	d00c      	beq.n	800d2e0 <UART_SetConfig+0x2b8>
 800d2c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d2ca:	d815      	bhi.n	800d2f8 <UART_SetConfig+0x2d0>
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d003      	beq.n	800d2d8 <UART_SetConfig+0x2b0>
 800d2d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d2d4:	d008      	beq.n	800d2e8 <UART_SetConfig+0x2c0>
 800d2d6:	e00f      	b.n	800d2f8 <UART_SetConfig+0x2d0>
 800d2d8:	2300      	movs	r3, #0
 800d2da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2de:	e022      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d2e0:	2302      	movs	r3, #2
 800d2e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2e6:	e01e      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d2e8:	2304      	movs	r3, #4
 800d2ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2ee:	e01a      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d2f0:	2308      	movs	r3, #8
 800d2f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2f6:	e016      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d2f8:	2310      	movs	r3, #16
 800d2fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2fe:	e012      	b.n	800d326 <UART_SetConfig+0x2fe>
 800d300:	cfff69f3 	.word	0xcfff69f3
 800d304:	40008000 	.word	0x40008000
 800d308:	40013800 	.word	0x40013800
 800d30c:	40021000 	.word	0x40021000
 800d310:	40004400 	.word	0x40004400
 800d314:	40004800 	.word	0x40004800
 800d318:	40004c00 	.word	0x40004c00
 800d31c:	40005000 	.word	0x40005000
 800d320:	2310      	movs	r3, #16
 800d322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4aae      	ldr	r2, [pc, #696]	@ (800d5e4 <UART_SetConfig+0x5bc>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	f040 8097 	bne.w	800d460 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d332:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d336:	2b08      	cmp	r3, #8
 800d338:	d823      	bhi.n	800d382 <UART_SetConfig+0x35a>
 800d33a:	a201      	add	r2, pc, #4	@ (adr r2, 800d340 <UART_SetConfig+0x318>)
 800d33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d340:	0800d365 	.word	0x0800d365
 800d344:	0800d383 	.word	0x0800d383
 800d348:	0800d36d 	.word	0x0800d36d
 800d34c:	0800d383 	.word	0x0800d383
 800d350:	0800d373 	.word	0x0800d373
 800d354:	0800d383 	.word	0x0800d383
 800d358:	0800d383 	.word	0x0800d383
 800d35c:	0800d383 	.word	0x0800d383
 800d360:	0800d37b 	.word	0x0800d37b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d364:	f7fc f890 	bl	8009488 <HAL_RCC_GetPCLK1Freq>
 800d368:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d36a:	e010      	b.n	800d38e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d36c:	4b9e      	ldr	r3, [pc, #632]	@ (800d5e8 <UART_SetConfig+0x5c0>)
 800d36e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d370:	e00d      	b.n	800d38e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d372:	f7fc f81b 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800d376:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d378:	e009      	b.n	800d38e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d37a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d37e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d380:	e005      	b.n	800d38e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800d382:	2300      	movs	r3, #0
 800d384:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d386:	2301      	movs	r3, #1
 800d388:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d38c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d390:	2b00      	cmp	r3, #0
 800d392:	f000 8130 	beq.w	800d5f6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d39a:	4a94      	ldr	r2, [pc, #592]	@ (800d5ec <UART_SetConfig+0x5c4>)
 800d39c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	685a      	ldr	r2, [r3, #4]
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	005b      	lsls	r3, r3, #1
 800d3b2:	4413      	add	r3, r2
 800d3b4:	69ba      	ldr	r2, [r7, #24]
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d305      	bcc.n	800d3c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d3c0:	69ba      	ldr	r2, [r7, #24]
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d903      	bls.n	800d3ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d3cc:	e113      	b.n	800d5f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	60bb      	str	r3, [r7, #8]
 800d3d4:	60fa      	str	r2, [r7, #12]
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3da:	4a84      	ldr	r2, [pc, #528]	@ (800d5ec <UART_SetConfig+0x5c4>)
 800d3dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	603b      	str	r3, [r7, #0]
 800d3e6:	607a      	str	r2, [r7, #4]
 800d3e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d3f0:	f7f3 fc52 	bl	8000c98 <__aeabi_uldivmod>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	4610      	mov	r0, r2
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	f04f 0200 	mov.w	r2, #0
 800d400:	f04f 0300 	mov.w	r3, #0
 800d404:	020b      	lsls	r3, r1, #8
 800d406:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d40a:	0202      	lsls	r2, r0, #8
 800d40c:	6979      	ldr	r1, [r7, #20]
 800d40e:	6849      	ldr	r1, [r1, #4]
 800d410:	0849      	lsrs	r1, r1, #1
 800d412:	2000      	movs	r0, #0
 800d414:	460c      	mov	r4, r1
 800d416:	4605      	mov	r5, r0
 800d418:	eb12 0804 	adds.w	r8, r2, r4
 800d41c:	eb43 0905 	adc.w	r9, r3, r5
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	2200      	movs	r2, #0
 800d426:	469a      	mov	sl, r3
 800d428:	4693      	mov	fp, r2
 800d42a:	4652      	mov	r2, sl
 800d42c:	465b      	mov	r3, fp
 800d42e:	4640      	mov	r0, r8
 800d430:	4649      	mov	r1, r9
 800d432:	f7f3 fc31 	bl	8000c98 <__aeabi_uldivmod>
 800d436:	4602      	mov	r2, r0
 800d438:	460b      	mov	r3, r1
 800d43a:	4613      	mov	r3, r2
 800d43c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d43e:	6a3b      	ldr	r3, [r7, #32]
 800d440:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d444:	d308      	bcc.n	800d458 <UART_SetConfig+0x430>
 800d446:	6a3b      	ldr	r3, [r7, #32]
 800d448:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d44c:	d204      	bcs.n	800d458 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	6a3a      	ldr	r2, [r7, #32]
 800d454:	60da      	str	r2, [r3, #12]
 800d456:	e0ce      	b.n	800d5f6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800d458:	2301      	movs	r3, #1
 800d45a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d45e:	e0ca      	b.n	800d5f6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	69db      	ldr	r3, [r3, #28]
 800d464:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d468:	d166      	bne.n	800d538 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800d46a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d46e:	2b08      	cmp	r3, #8
 800d470:	d827      	bhi.n	800d4c2 <UART_SetConfig+0x49a>
 800d472:	a201      	add	r2, pc, #4	@ (adr r2, 800d478 <UART_SetConfig+0x450>)
 800d474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d478:	0800d49d 	.word	0x0800d49d
 800d47c:	0800d4a5 	.word	0x0800d4a5
 800d480:	0800d4ad 	.word	0x0800d4ad
 800d484:	0800d4c3 	.word	0x0800d4c3
 800d488:	0800d4b3 	.word	0x0800d4b3
 800d48c:	0800d4c3 	.word	0x0800d4c3
 800d490:	0800d4c3 	.word	0x0800d4c3
 800d494:	0800d4c3 	.word	0x0800d4c3
 800d498:	0800d4bb 	.word	0x0800d4bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d49c:	f7fb fff4 	bl	8009488 <HAL_RCC_GetPCLK1Freq>
 800d4a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d4a2:	e014      	b.n	800d4ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d4a4:	f7fc f806 	bl	80094b4 <HAL_RCC_GetPCLK2Freq>
 800d4a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d4aa:	e010      	b.n	800d4ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d4ac:	4b4e      	ldr	r3, [pc, #312]	@ (800d5e8 <UART_SetConfig+0x5c0>)
 800d4ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d4b0:	e00d      	b.n	800d4ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d4b2:	f7fb ff7b 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800d4b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d4b8:	e009      	b.n	800d4ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d4be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d4c0:	e005      	b.n	800d4ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d4cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	f000 8090 	beq.w	800d5f6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4da:	4a44      	ldr	r2, [pc, #272]	@ (800d5ec <UART_SetConfig+0x5c4>)
 800d4dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4e8:	005a      	lsls	r2, r3, #1
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	085b      	lsrs	r3, r3, #1
 800d4f0:	441a      	add	r2, r3
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4fc:	6a3b      	ldr	r3, [r7, #32]
 800d4fe:	2b0f      	cmp	r3, #15
 800d500:	d916      	bls.n	800d530 <UART_SetConfig+0x508>
 800d502:	6a3b      	ldr	r3, [r7, #32]
 800d504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d508:	d212      	bcs.n	800d530 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d50a:	6a3b      	ldr	r3, [r7, #32]
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	f023 030f 	bic.w	r3, r3, #15
 800d512:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d514:	6a3b      	ldr	r3, [r7, #32]
 800d516:	085b      	lsrs	r3, r3, #1
 800d518:	b29b      	uxth	r3, r3
 800d51a:	f003 0307 	and.w	r3, r3, #7
 800d51e:	b29a      	uxth	r2, r3
 800d520:	8bfb      	ldrh	r3, [r7, #30]
 800d522:	4313      	orrs	r3, r2
 800d524:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	8bfa      	ldrh	r2, [r7, #30]
 800d52c:	60da      	str	r2, [r3, #12]
 800d52e:	e062      	b.n	800d5f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800d530:	2301      	movs	r3, #1
 800d532:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d536:	e05e      	b.n	800d5f6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d538:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d53c:	2b08      	cmp	r3, #8
 800d53e:	d828      	bhi.n	800d592 <UART_SetConfig+0x56a>
 800d540:	a201      	add	r2, pc, #4	@ (adr r2, 800d548 <UART_SetConfig+0x520>)
 800d542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d546:	bf00      	nop
 800d548:	0800d56d 	.word	0x0800d56d
 800d54c:	0800d575 	.word	0x0800d575
 800d550:	0800d57d 	.word	0x0800d57d
 800d554:	0800d593 	.word	0x0800d593
 800d558:	0800d583 	.word	0x0800d583
 800d55c:	0800d593 	.word	0x0800d593
 800d560:	0800d593 	.word	0x0800d593
 800d564:	0800d593 	.word	0x0800d593
 800d568:	0800d58b 	.word	0x0800d58b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d56c:	f7fb ff8c 	bl	8009488 <HAL_RCC_GetPCLK1Freq>
 800d570:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d572:	e014      	b.n	800d59e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d574:	f7fb ff9e 	bl	80094b4 <HAL_RCC_GetPCLK2Freq>
 800d578:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d57a:	e010      	b.n	800d59e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d57c:	4b1a      	ldr	r3, [pc, #104]	@ (800d5e8 <UART_SetConfig+0x5c0>)
 800d57e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d580:	e00d      	b.n	800d59e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d582:	f7fb ff13 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800d586:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d588:	e009      	b.n	800d59e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d58a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d58e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d590:	e005      	b.n	800d59e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800d592:	2300      	movs	r3, #0
 800d594:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d596:	2301      	movs	r3, #1
 800d598:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d59c:	bf00      	nop
    }

    if (pclk != 0U)
 800d59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d028      	beq.n	800d5f6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5a8:	4a10      	ldr	r2, [pc, #64]	@ (800d5ec <UART_SetConfig+0x5c4>)
 800d5aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b2:	fbb3 f2f2 	udiv	r2, r3, r2
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	085b      	lsrs	r3, r3, #1
 800d5bc:	441a      	add	r2, r3
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5c8:	6a3b      	ldr	r3, [r7, #32]
 800d5ca:	2b0f      	cmp	r3, #15
 800d5cc:	d910      	bls.n	800d5f0 <UART_SetConfig+0x5c8>
 800d5ce:	6a3b      	ldr	r3, [r7, #32]
 800d5d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d5d4:	d20c      	bcs.n	800d5f0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d5d6:	6a3b      	ldr	r3, [r7, #32]
 800d5d8:	b29a      	uxth	r2, r3
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	60da      	str	r2, [r3, #12]
 800d5e0:	e009      	b.n	800d5f6 <UART_SetConfig+0x5ce>
 800d5e2:	bf00      	nop
 800d5e4:	40008000 	.word	0x40008000
 800d5e8:	00f42400 	.word	0x00f42400
 800d5ec:	08016bc8 	.word	0x08016bc8
      }
      else
      {
        ret = HAL_ERROR;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	2201      	movs	r2, #1
 800d602:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	2200      	movs	r2, #0
 800d60a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	2200      	movs	r2, #0
 800d610:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d612:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d616:	4618      	mov	r0, r3
 800d618:	3730      	adds	r7, #48	@ 0x30
 800d61a:	46bd      	mov	sp, r7
 800d61c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d620:	b480      	push	{r7}
 800d622:	b083      	sub	sp, #12
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d62c:	f003 0308 	and.w	r3, r3, #8
 800d630:	2b00      	cmp	r3, #0
 800d632:	d00a      	beq.n	800d64a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	430a      	orrs	r2, r1
 800d648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d64e:	f003 0301 	and.w	r3, r3, #1
 800d652:	2b00      	cmp	r3, #0
 800d654:	d00a      	beq.n	800d66c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	430a      	orrs	r2, r1
 800d66a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d670:	f003 0302 	and.w	r3, r3, #2
 800d674:	2b00      	cmp	r3, #0
 800d676:	d00a      	beq.n	800d68e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	430a      	orrs	r2, r1
 800d68c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d692:	f003 0304 	and.w	r3, r3, #4
 800d696:	2b00      	cmp	r3, #0
 800d698:	d00a      	beq.n	800d6b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	430a      	orrs	r2, r1
 800d6ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6b4:	f003 0310 	and.w	r3, r3, #16
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d00a      	beq.n	800d6d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	689b      	ldr	r3, [r3, #8]
 800d6c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	430a      	orrs	r2, r1
 800d6d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6d6:	f003 0320 	and.w	r3, r3, #32
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d00a      	beq.n	800d6f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	689b      	ldr	r3, [r3, #8]
 800d6e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	430a      	orrs	r2, r1
 800d6f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d01a      	beq.n	800d736 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	430a      	orrs	r2, r1
 800d714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d71a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d71e:	d10a      	bne.n	800d736 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	685b      	ldr	r3, [r3, #4]
 800d726:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	430a      	orrs	r2, r1
 800d734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d73a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d00a      	beq.n	800d758 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	430a      	orrs	r2, r1
 800d756:	605a      	str	r2, [r3, #4]
  }
}
 800d758:	bf00      	nop
 800d75a:	370c      	adds	r7, #12
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr

0800d764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b098      	sub	sp, #96	@ 0x60
 800d768:	af02      	add	r7, sp, #8
 800d76a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2200      	movs	r2, #0
 800d770:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d774:	f7f6 fef0 	bl	8004558 <HAL_GetTick>
 800d778:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f003 0308 	and.w	r3, r3, #8
 800d784:	2b08      	cmp	r3, #8
 800d786:	d12f      	bne.n	800d7e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d788:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d78c:	9300      	str	r3, [sp, #0]
 800d78e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d790:	2200      	movs	r2, #0
 800d792:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f000 f88e 	bl	800d8b8 <UART_WaitOnFlagUntilTimeout>
 800d79c:	4603      	mov	r3, r0
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d022      	beq.n	800d7e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7aa:	e853 3f00 	ldrex	r3, [r3]
 800d7ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d7b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d7b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	461a      	mov	r2, r3
 800d7be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d7c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d7c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d7c8:	e841 2300 	strex	r3, r2, [r1]
 800d7cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d7ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d1e6      	bne.n	800d7a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2220      	movs	r2, #32
 800d7d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d7e4:	2303      	movs	r3, #3
 800d7e6:	e063      	b.n	800d8b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f003 0304 	and.w	r3, r3, #4
 800d7f2:	2b04      	cmp	r3, #4
 800d7f4:	d149      	bne.n	800d88a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d7f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d7fa:	9300      	str	r3, [sp, #0]
 800d7fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7fe:	2200      	movs	r2, #0
 800d800:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f000 f857 	bl	800d8b8 <UART_WaitOnFlagUntilTimeout>
 800d80a:	4603      	mov	r3, r0
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d03c      	beq.n	800d88a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d818:	e853 3f00 	ldrex	r3, [r3]
 800d81c:	623b      	str	r3, [r7, #32]
   return(result);
 800d81e:	6a3b      	ldr	r3, [r7, #32]
 800d820:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d824:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	461a      	mov	r2, r3
 800d82c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d82e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d830:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d832:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d834:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d836:	e841 2300 	strex	r3, r2, [r1]
 800d83a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d1e6      	bne.n	800d810 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	3308      	adds	r3, #8
 800d848:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	e853 3f00 	ldrex	r3, [r3]
 800d850:	60fb      	str	r3, [r7, #12]
   return(result);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f023 0301 	bic.w	r3, r3, #1
 800d858:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	3308      	adds	r3, #8
 800d860:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d862:	61fa      	str	r2, [r7, #28]
 800d864:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d866:	69b9      	ldr	r1, [r7, #24]
 800d868:	69fa      	ldr	r2, [r7, #28]
 800d86a:	e841 2300 	strex	r3, r2, [r1]
 800d86e:	617b      	str	r3, [r7, #20]
   return(result);
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d1e5      	bne.n	800d842 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2220      	movs	r2, #32
 800d87a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2200      	movs	r2, #0
 800d882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d886:	2303      	movs	r3, #3
 800d888:	e012      	b.n	800d8b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2220      	movs	r2, #32
 800d88e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2220      	movs	r2, #32
 800d896:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2200      	movs	r2, #0
 800d89e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d8ae:	2300      	movs	r3, #0
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3758      	adds	r7, #88	@ 0x58
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	60b9      	str	r1, [r7, #8]
 800d8c2:	603b      	str	r3, [r7, #0]
 800d8c4:	4613      	mov	r3, r2
 800d8c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8c8:	e04f      	b.n	800d96a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d8ca:	69bb      	ldr	r3, [r7, #24]
 800d8cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d8d0:	d04b      	beq.n	800d96a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8d2:	f7f6 fe41 	bl	8004558 <HAL_GetTick>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	1ad3      	subs	r3, r2, r3
 800d8dc:	69ba      	ldr	r2, [r7, #24]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d302      	bcc.n	800d8e8 <UART_WaitOnFlagUntilTimeout+0x30>
 800d8e2:	69bb      	ldr	r3, [r7, #24]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d101      	bne.n	800d8ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d8e8:	2303      	movs	r3, #3
 800d8ea:	e04e      	b.n	800d98a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f003 0304 	and.w	r3, r3, #4
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d037      	beq.n	800d96a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	2b80      	cmp	r3, #128	@ 0x80
 800d8fe:	d034      	beq.n	800d96a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	2b40      	cmp	r3, #64	@ 0x40
 800d904:	d031      	beq.n	800d96a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	69db      	ldr	r3, [r3, #28]
 800d90c:	f003 0308 	and.w	r3, r3, #8
 800d910:	2b08      	cmp	r3, #8
 800d912:	d110      	bne.n	800d936 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	2208      	movs	r2, #8
 800d91a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d91c:	68f8      	ldr	r0, [r7, #12]
 800d91e:	f000 f95b 	bl	800dbd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	2208      	movs	r2, #8
 800d926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2200      	movs	r2, #0
 800d92e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d932:	2301      	movs	r3, #1
 800d934:	e029      	b.n	800d98a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	69db      	ldr	r3, [r3, #28]
 800d93c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d940:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d944:	d111      	bne.n	800d96a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d94e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	f000 f941 	bl	800dbd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	2220      	movs	r2, #32
 800d95a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2200      	movs	r2, #0
 800d962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d966:	2303      	movs	r3, #3
 800d968:	e00f      	b.n	800d98a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	69da      	ldr	r2, [r3, #28]
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	4013      	ands	r3, r2
 800d974:	68ba      	ldr	r2, [r7, #8]
 800d976:	429a      	cmp	r2, r3
 800d978:	bf0c      	ite	eq
 800d97a:	2301      	moveq	r3, #1
 800d97c:	2300      	movne	r3, #0
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	461a      	mov	r2, r3
 800d982:	79fb      	ldrb	r3, [r7, #7]
 800d984:	429a      	cmp	r2, r3
 800d986:	d0a0      	beq.n	800d8ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d988:	2300      	movs	r3, #0
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3710      	adds	r7, #16
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
	...

0800d994 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d994:	b480      	push	{r7}
 800d996:	b0a3      	sub	sp, #140	@ 0x8c
 800d998:	af00      	add	r7, sp, #0
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	4613      	mov	r3, r2
 800d9a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	68ba      	ldr	r2, [r7, #8]
 800d9a6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	88fa      	ldrh	r2, [r7, #6]
 800d9ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	88fa      	ldrh	r2, [r7, #6]
 800d9b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d9c6:	d10e      	bne.n	800d9e6 <UART_Start_Receive_IT+0x52>
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	691b      	ldr	r3, [r3, #16]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d105      	bne.n	800d9dc <UART_Start_Receive_IT+0x48>
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800d9d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d9da:	e02d      	b.n	800da38 <UART_Start_Receive_IT+0xa4>
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	22ff      	movs	r2, #255	@ 0xff
 800d9e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d9e4:	e028      	b.n	800da38 <UART_Start_Receive_IT+0xa4>
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	689b      	ldr	r3, [r3, #8]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d10d      	bne.n	800da0a <UART_Start_Receive_IT+0x76>
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	691b      	ldr	r3, [r3, #16]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d104      	bne.n	800da00 <UART_Start_Receive_IT+0x6c>
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	22ff      	movs	r2, #255	@ 0xff
 800d9fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d9fe:	e01b      	b.n	800da38 <UART_Start_Receive_IT+0xa4>
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	227f      	movs	r2, #127	@ 0x7f
 800da04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da08:	e016      	b.n	800da38 <UART_Start_Receive_IT+0xa4>
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	689b      	ldr	r3, [r3, #8]
 800da0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800da12:	d10d      	bne.n	800da30 <UART_Start_Receive_IT+0x9c>
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	691b      	ldr	r3, [r3, #16]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d104      	bne.n	800da26 <UART_Start_Receive_IT+0x92>
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	227f      	movs	r2, #127	@ 0x7f
 800da20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da24:	e008      	b.n	800da38 <UART_Start_Receive_IT+0xa4>
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	223f      	movs	r2, #63	@ 0x3f
 800da2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da2e:	e003      	b.n	800da38 <UART_Start_Receive_IT+0xa4>
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2200      	movs	r2, #0
 800da34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2200      	movs	r2, #0
 800da3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2222      	movs	r2, #34	@ 0x22
 800da44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	3308      	adds	r3, #8
 800da4e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da52:	e853 3f00 	ldrex	r3, [r3]
 800da56:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800da58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800da5a:	f043 0301 	orr.w	r3, r3, #1
 800da5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	3308      	adds	r3, #8
 800da68:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800da6c:	673a      	str	r2, [r7, #112]	@ 0x70
 800da6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da70:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800da72:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800da74:	e841 2300 	strex	r3, r2, [r1]
 800da78:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800da7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d1e3      	bne.n	800da48 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800da88:	d14f      	bne.n	800db2a <UART_Start_Receive_IT+0x196>
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800da90:	88fa      	ldrh	r2, [r7, #6]
 800da92:	429a      	cmp	r2, r3
 800da94:	d349      	bcc.n	800db2a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	689b      	ldr	r3, [r3, #8]
 800da9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da9e:	d107      	bne.n	800dab0 <UART_Start_Receive_IT+0x11c>
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	691b      	ldr	r3, [r3, #16]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d103      	bne.n	800dab0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	4a47      	ldr	r2, [pc, #284]	@ (800dbc8 <UART_Start_Receive_IT+0x234>)
 800daac:	675a      	str	r2, [r3, #116]	@ 0x74
 800daae:	e002      	b.n	800dab6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	4a46      	ldr	r2, [pc, #280]	@ (800dbcc <UART_Start_Receive_IT+0x238>)
 800dab4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	691b      	ldr	r3, [r3, #16]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d01a      	beq.n	800daf4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dac4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dac6:	e853 3f00 	ldrex	r3, [r3]
 800daca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800dacc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dad2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	461a      	mov	r2, r3
 800dadc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dae2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800dae6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800dae8:	e841 2300 	strex	r3, r2, [r1]
 800daec:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800daee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d1e4      	bne.n	800dabe <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	3308      	adds	r3, #8
 800dafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dafc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dafe:	e853 3f00 	ldrex	r3, [r3]
 800db02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800db04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800db0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	3308      	adds	r3, #8
 800db12:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800db14:	64ba      	str	r2, [r7, #72]	@ 0x48
 800db16:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db18:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800db1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db1c:	e841 2300 	strex	r3, r2, [r1]
 800db20:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800db22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db24:	2b00      	cmp	r3, #0
 800db26:	d1e5      	bne.n	800daf4 <UART_Start_Receive_IT+0x160>
 800db28:	e046      	b.n	800dbb8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db32:	d107      	bne.n	800db44 <UART_Start_Receive_IT+0x1b0>
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	691b      	ldr	r3, [r3, #16]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d103      	bne.n	800db44 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	4a24      	ldr	r2, [pc, #144]	@ (800dbd0 <UART_Start_Receive_IT+0x23c>)
 800db40:	675a      	str	r2, [r3, #116]	@ 0x74
 800db42:	e002      	b.n	800db4a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	4a23      	ldr	r2, [pc, #140]	@ (800dbd4 <UART_Start_Receive_IT+0x240>)
 800db48:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	691b      	ldr	r3, [r3, #16]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d019      	beq.n	800db86 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db5a:	e853 3f00 	ldrex	r3, [r3]
 800db5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800db60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db62:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800db66:	677b      	str	r3, [r7, #116]	@ 0x74
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	461a      	mov	r2, r3
 800db6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800db70:	637b      	str	r3, [r7, #52]	@ 0x34
 800db72:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800db76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db78:	e841 2300 	strex	r3, r2, [r1]
 800db7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800db7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db80:	2b00      	cmp	r3, #0
 800db82:	d1e6      	bne.n	800db52 <UART_Start_Receive_IT+0x1be>
 800db84:	e018      	b.n	800dbb8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	e853 3f00 	ldrex	r3, [r3]
 800db92:	613b      	str	r3, [r7, #16]
   return(result);
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	f043 0320 	orr.w	r3, r3, #32
 800db9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	461a      	mov	r2, r3
 800dba2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dba4:	623b      	str	r3, [r7, #32]
 800dba6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dba8:	69f9      	ldr	r1, [r7, #28]
 800dbaa:	6a3a      	ldr	r2, [r7, #32]
 800dbac:	e841 2300 	strex	r3, r2, [r1]
 800dbb0:	61bb      	str	r3, [r7, #24]
   return(result);
 800dbb2:	69bb      	ldr	r3, [r7, #24]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d1e6      	bne.n	800db86 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800dbb8:	2300      	movs	r3, #0
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	378c      	adds	r7, #140	@ 0x8c
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc4:	4770      	bx	lr
 800dbc6:	bf00      	nop
 800dbc8:	0800e3f5 	.word	0x0800e3f5
 800dbcc:	0800e091 	.word	0x0800e091
 800dbd0:	0800ded9 	.word	0x0800ded9
 800dbd4:	0800dd21 	.word	0x0800dd21

0800dbd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b095      	sub	sp, #84	@ 0x54
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbe8:	e853 3f00 	ldrex	r3, [r3]
 800dbec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dbee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dbf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbfe:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc00:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dc04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dc06:	e841 2300 	strex	r3, r2, [r1]
 800dc0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dc0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d1e6      	bne.n	800dbe0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	3308      	adds	r3, #8
 800dc18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc1a:	6a3b      	ldr	r3, [r7, #32]
 800dc1c:	e853 3f00 	ldrex	r3, [r3]
 800dc20:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc22:	69fb      	ldr	r3, [r7, #28]
 800dc24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dc28:	f023 0301 	bic.w	r3, r3, #1
 800dc2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	3308      	adds	r3, #8
 800dc34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dc38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc3e:	e841 2300 	strex	r3, r2, [r1]
 800dc42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d1e3      	bne.n	800dc12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d118      	bne.n	800dc84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	e853 3f00 	ldrex	r3, [r3]
 800dc5e:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	f023 0310 	bic.w	r3, r3, #16
 800dc66:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc70:	61bb      	str	r3, [r7, #24]
 800dc72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc74:	6979      	ldr	r1, [r7, #20]
 800dc76:	69ba      	ldr	r2, [r7, #24]
 800dc78:	e841 2300 	strex	r3, r2, [r1]
 800dc7c:	613b      	str	r3, [r7, #16]
   return(result);
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d1e6      	bne.n	800dc52 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2220      	movs	r2, #32
 800dc88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2200      	movs	r2, #0
 800dc96:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dc98:	bf00      	nop
 800dc9a:	3754      	adds	r7, #84	@ 0x54
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr

0800dca4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dcba:	68f8      	ldr	r0, [r7, #12]
 800dcbc:	f7ff f99e 	bl	800cffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcc0:	bf00      	nop
 800dcc2:	3710      	adds	r7, #16
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b088      	sub	sp, #32
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	e853 3f00 	ldrex	r3, [r3]
 800dcdc:	60bb      	str	r3, [r7, #8]
   return(result);
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dce4:	61fb      	str	r3, [r7, #28]
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	461a      	mov	r2, r3
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	61bb      	str	r3, [r7, #24]
 800dcf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcf2:	6979      	ldr	r1, [r7, #20]
 800dcf4:	69ba      	ldr	r2, [r7, #24]
 800dcf6:	e841 2300 	strex	r3, r2, [r1]
 800dcfa:	613b      	str	r3, [r7, #16]
   return(result);
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d1e6      	bne.n	800dcd0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2220      	movs	r2, #32
 800dd06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f7ff f95f 	bl	800cfd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd16:	bf00      	nop
 800dd18:	3720      	adds	r7, #32
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
	...

0800dd20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b09c      	sub	sp, #112	@ 0x70
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dd2e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dd38:	2b22      	cmp	r3, #34	@ 0x22
 800dd3a:	f040 80be 	bne.w	800deba <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd44:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dd48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800dd4c:	b2d9      	uxtb	r1, r3
 800dd4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800dd52:	b2da      	uxtb	r2, r3
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd58:	400a      	ands	r2, r1
 800dd5a:	b2d2      	uxtb	r2, r2
 800dd5c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd62:	1c5a      	adds	r2, r3, #1
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	3b01      	subs	r3, #1
 800dd72:	b29a      	uxth	r2, r3
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	f040 80a1 	bne.w	800deca <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd90:	e853 3f00 	ldrex	r3, [r3]
 800dd94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dd96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dd9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	461a      	mov	r2, r3
 800dda4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dda6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dda8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddaa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ddac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ddae:	e841 2300 	strex	r3, r2, [r1]
 800ddb2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ddb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d1e6      	bne.n	800dd88 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	3308      	adds	r3, #8
 800ddc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddc4:	e853 3f00 	ldrex	r3, [r3]
 800ddc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ddca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddcc:	f023 0301 	bic.w	r3, r3, #1
 800ddd0:	667b      	str	r3, [r7, #100]	@ 0x64
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	3308      	adds	r3, #8
 800ddd8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ddda:	647a      	str	r2, [r7, #68]	@ 0x44
 800dddc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dde0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dde2:	e841 2300 	strex	r3, r2, [r1]
 800dde6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dde8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d1e5      	bne.n	800ddba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2220      	movs	r2, #32
 800ddf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2200      	movs	r2, #0
 800de00:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	4a33      	ldr	r2, [pc, #204]	@ (800ded4 <UART_RxISR_8BIT+0x1b4>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d01f      	beq.n	800de4c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	685b      	ldr	r3, [r3, #4]
 800de12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de16:	2b00      	cmp	r3, #0
 800de18:	d018      	beq.n	800de4c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de22:	e853 3f00 	ldrex	r3, [r3]
 800de26:	623b      	str	r3, [r7, #32]
   return(result);
 800de28:	6a3b      	ldr	r3, [r7, #32]
 800de2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800de2e:	663b      	str	r3, [r7, #96]	@ 0x60
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	461a      	mov	r2, r3
 800de36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800de38:	633b      	str	r3, [r7, #48]	@ 0x30
 800de3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800de3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de40:	e841 2300 	strex	r3, r2, [r1]
 800de44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800de46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d1e6      	bne.n	800de1a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de50:	2b01      	cmp	r3, #1
 800de52:	d12e      	bne.n	800deb2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2200      	movs	r2, #0
 800de58:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	e853 3f00 	ldrex	r3, [r3]
 800de66:	60fb      	str	r3, [r7, #12]
   return(result);
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	f023 0310 	bic.w	r3, r3, #16
 800de6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	461a      	mov	r2, r3
 800de76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de78:	61fb      	str	r3, [r7, #28]
 800de7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de7c:	69b9      	ldr	r1, [r7, #24]
 800de7e:	69fa      	ldr	r2, [r7, #28]
 800de80:	e841 2300 	strex	r3, r2, [r1]
 800de84:	617b      	str	r3, [r7, #20]
   return(result);
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d1e6      	bne.n	800de5a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	69db      	ldr	r3, [r3, #28]
 800de92:	f003 0310 	and.w	r3, r3, #16
 800de96:	2b10      	cmp	r3, #16
 800de98:	d103      	bne.n	800dea2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	2210      	movs	r2, #16
 800dea0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dea8:	4619      	mov	r1, r3
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f7ff f8b0 	bl	800d010 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800deb0:	e00b      	b.n	800deca <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f7ff f898 	bl	800cfe8 <HAL_UART_RxCpltCallback>
}
 800deb8:	e007      	b.n	800deca <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	699a      	ldr	r2, [r3, #24]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f042 0208 	orr.w	r2, r2, #8
 800dec8:	619a      	str	r2, [r3, #24]
}
 800deca:	bf00      	nop
 800decc:	3770      	adds	r7, #112	@ 0x70
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	40008000 	.word	0x40008000

0800ded8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b09c      	sub	sp, #112	@ 0x70
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dee6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800def0:	2b22      	cmp	r3, #34	@ 0x22
 800def2:	f040 80be 	bne.w	800e072 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800defc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df04:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800df06:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800df0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800df0e:	4013      	ands	r3, r2
 800df10:	b29a      	uxth	r2, r3
 800df12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800df14:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df1a:	1c9a      	adds	r2, r3, #2
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800df26:	b29b      	uxth	r3, r3
 800df28:	3b01      	subs	r3, #1
 800df2a:	b29a      	uxth	r2, r3
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800df38:	b29b      	uxth	r3, r3
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	f040 80a1 	bne.w	800e082 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df48:	e853 3f00 	ldrex	r3, [r3]
 800df4c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800df4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800df54:	667b      	str	r3, [r7, #100]	@ 0x64
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	461a      	mov	r2, r3
 800df5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800df5e:	657b      	str	r3, [r7, #84]	@ 0x54
 800df60:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800df64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800df66:	e841 2300 	strex	r3, r2, [r1]
 800df6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800df6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d1e6      	bne.n	800df40 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	3308      	adds	r3, #8
 800df78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df7c:	e853 3f00 	ldrex	r3, [r3]
 800df80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800df82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df84:	f023 0301 	bic.w	r3, r3, #1
 800df88:	663b      	str	r3, [r7, #96]	@ 0x60
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	3308      	adds	r3, #8
 800df90:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800df92:	643a      	str	r2, [r7, #64]	@ 0x40
 800df94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800df98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800df9a:	e841 2300 	strex	r3, r2, [r1]
 800df9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dfa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d1e5      	bne.n	800df72 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2220      	movs	r2, #32
 800dfaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	4a33      	ldr	r2, [pc, #204]	@ (800e08c <UART_RxISR_16BIT+0x1b4>)
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	d01f      	beq.n	800e004 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d018      	beq.n	800e004 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfd8:	6a3b      	ldr	r3, [r7, #32]
 800dfda:	e853 3f00 	ldrex	r3, [r3]
 800dfde:	61fb      	str	r3, [r7, #28]
   return(result);
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dfe6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	461a      	mov	r2, r3
 800dfee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dff2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dff4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dff8:	e841 2300 	strex	r3, r2, [r1]
 800dffc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e000:	2b00      	cmp	r3, #0
 800e002:	d1e6      	bne.n	800dfd2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e008:	2b01      	cmp	r3, #1
 800e00a:	d12e      	bne.n	800e06a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2200      	movs	r2, #0
 800e010:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	e853 3f00 	ldrex	r3, [r3]
 800e01e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	f023 0310 	bic.w	r3, r3, #16
 800e026:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	461a      	mov	r2, r3
 800e02e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e030:	61bb      	str	r3, [r7, #24]
 800e032:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e034:	6979      	ldr	r1, [r7, #20]
 800e036:	69ba      	ldr	r2, [r7, #24]
 800e038:	e841 2300 	strex	r3, r2, [r1]
 800e03c:	613b      	str	r3, [r7, #16]
   return(result);
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d1e6      	bne.n	800e012 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	69db      	ldr	r3, [r3, #28]
 800e04a:	f003 0310 	and.w	r3, r3, #16
 800e04e:	2b10      	cmp	r3, #16
 800e050:	d103      	bne.n	800e05a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2210      	movs	r2, #16
 800e058:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e060:	4619      	mov	r1, r3
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f7fe ffd4 	bl	800d010 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e068:	e00b      	b.n	800e082 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f7fe ffbc 	bl	800cfe8 <HAL_UART_RxCpltCallback>
}
 800e070:	e007      	b.n	800e082 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	699a      	ldr	r2, [r3, #24]
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f042 0208 	orr.w	r2, r2, #8
 800e080:	619a      	str	r2, [r3, #24]
}
 800e082:	bf00      	nop
 800e084:	3770      	adds	r7, #112	@ 0x70
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	40008000 	.word	0x40008000

0800e090 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b0ac      	sub	sp, #176	@ 0xb0
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e09e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	69db      	ldr	r3, [r3, #28]
 800e0a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	689b      	ldr	r3, [r3, #8]
 800e0bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e0c6:	2b22      	cmp	r3, #34	@ 0x22
 800e0c8:	f040 8183 	bne.w	800e3d2 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e0d2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e0d6:	e126      	b.n	800e326 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0de:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e0e2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800e0e6:	b2d9      	uxtb	r1, r3
 800e0e8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800e0ec:	b2da      	uxtb	r2, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0f2:	400a      	ands	r2, r1
 800e0f4:	b2d2      	uxtb	r2, r2
 800e0f6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0fc:	1c5a      	adds	r2, r3, #1
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e108:	b29b      	uxth	r3, r3
 800e10a:	3b01      	subs	r3, #1
 800e10c:	b29a      	uxth	r2, r3
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	69db      	ldr	r3, [r3, #28]
 800e11a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e11e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e122:	f003 0307 	and.w	r3, r3, #7
 800e126:	2b00      	cmp	r3, #0
 800e128:	d053      	beq.n	800e1d2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e12a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e12e:	f003 0301 	and.w	r3, r3, #1
 800e132:	2b00      	cmp	r3, #0
 800e134:	d011      	beq.n	800e15a <UART_RxISR_8BIT_FIFOEN+0xca>
 800e136:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e13a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d00b      	beq.n	800e15a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2201      	movs	r2, #1
 800e148:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e150:	f043 0201 	orr.w	r2, r3, #1
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e15a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e15e:	f003 0302 	and.w	r3, r3, #2
 800e162:	2b00      	cmp	r3, #0
 800e164:	d011      	beq.n	800e18a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e166:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e16a:	f003 0301 	and.w	r3, r3, #1
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d00b      	beq.n	800e18a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	2202      	movs	r2, #2
 800e178:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e180:	f043 0204 	orr.w	r2, r3, #4
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e18a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e18e:	f003 0304 	and.w	r3, r3, #4
 800e192:	2b00      	cmp	r3, #0
 800e194:	d011      	beq.n	800e1ba <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e196:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e19a:	f003 0301 	and.w	r3, r3, #1
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d00b      	beq.n	800e1ba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	2204      	movs	r2, #4
 800e1a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1b0:	f043 0202 	orr.w	r2, r3, #2
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d006      	beq.n	800e1d2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f7fe ff19 	bl	800cffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e1d8:	b29b      	uxth	r3, r3
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	f040 80a3 	bne.w	800e326 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e1e8:	e853 3f00 	ldrex	r3, [r3]
 800e1ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800e1ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e1f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e1f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	461a      	mov	r2, r3
 800e1fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e202:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e204:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e206:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800e208:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e20a:	e841 2300 	strex	r3, r2, [r1]
 800e20e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800e210:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e212:	2b00      	cmp	r3, #0
 800e214:	d1e4      	bne.n	800e1e0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	3308      	adds	r3, #8
 800e21c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e21e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e220:	e853 3f00 	ldrex	r3, [r3]
 800e224:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800e226:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e228:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e22c:	f023 0301 	bic.w	r3, r3, #1
 800e230:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	3308      	adds	r3, #8
 800e23a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e23e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800e240:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e242:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e244:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e246:	e841 2300 	strex	r3, r2, [r1]
 800e24a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e24c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d1e1      	bne.n	800e216 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2220      	movs	r2, #32
 800e256:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2200      	movs	r2, #0
 800e25e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4a60      	ldr	r2, [pc, #384]	@ (800e3ec <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800e26c:	4293      	cmp	r3, r2
 800e26e:	d021      	beq.n	800e2b4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d01a      	beq.n	800e2b4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e286:	e853 3f00 	ldrex	r3, [r3]
 800e28a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e28c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e28e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e292:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	461a      	mov	r2, r3
 800e29c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e2a0:	657b      	str	r3, [r7, #84]	@ 0x54
 800e2a2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2a4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e2a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e2a8:	e841 2300 	strex	r3, r2, [r1]
 800e2ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e2ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d1e4      	bne.n	800e27e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	d130      	bne.n	800e31e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2ca:	e853 3f00 	ldrex	r3, [r3]
 800e2ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2d2:	f023 0310 	bic.w	r3, r3, #16
 800e2d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	461a      	mov	r2, r3
 800e2e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e2e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800e2e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e2ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e2ec:	e841 2300 	strex	r3, r2, [r1]
 800e2f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e2f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d1e4      	bne.n	800e2c2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	69db      	ldr	r3, [r3, #28]
 800e2fe:	f003 0310 	and.w	r3, r3, #16
 800e302:	2b10      	cmp	r3, #16
 800e304:	d103      	bne.n	800e30e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2210      	movs	r2, #16
 800e30c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e314:	4619      	mov	r1, r3
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f7fe fe7a 	bl	800d010 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e31c:	e00e      	b.n	800e33c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f7fe fe62 	bl	800cfe8 <HAL_UART_RxCpltCallback>
        break;
 800e324:	e00a      	b.n	800e33c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e326:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d006      	beq.n	800e33c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800e32e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e332:	f003 0320 	and.w	r3, r3, #32
 800e336:	2b00      	cmp	r3, #0
 800e338:	f47f aece 	bne.w	800e0d8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e342:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e346:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d049      	beq.n	800e3e2 <UART_RxISR_8BIT_FIFOEN+0x352>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e354:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800e358:	429a      	cmp	r2, r3
 800e35a:	d242      	bcs.n	800e3e2 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	3308      	adds	r3, #8
 800e362:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e364:	6a3b      	ldr	r3, [r7, #32]
 800e366:	e853 3f00 	ldrex	r3, [r3]
 800e36a:	61fb      	str	r3, [r7, #28]
   return(result);
 800e36c:	69fb      	ldr	r3, [r7, #28]
 800e36e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e372:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	3308      	adds	r3, #8
 800e37c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e380:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e382:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e384:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e388:	e841 2300 	strex	r3, r2, [r1]
 800e38c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e390:	2b00      	cmp	r3, #0
 800e392:	d1e3      	bne.n	800e35c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	4a16      	ldr	r2, [pc, #88]	@ (800e3f0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800e398:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	e853 3f00 	ldrex	r3, [r3]
 800e3a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	f043 0320 	orr.w	r3, r3, #32
 800e3ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e3bc:	61bb      	str	r3, [r7, #24]
 800e3be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3c0:	6979      	ldr	r1, [r7, #20]
 800e3c2:	69ba      	ldr	r2, [r7, #24]
 800e3c4:	e841 2300 	strex	r3, r2, [r1]
 800e3c8:	613b      	str	r3, [r7, #16]
   return(result);
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d1e4      	bne.n	800e39a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e3d0:	e007      	b.n	800e3e2 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	699a      	ldr	r2, [r3, #24]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f042 0208 	orr.w	r2, r2, #8
 800e3e0:	619a      	str	r2, [r3, #24]
}
 800e3e2:	bf00      	nop
 800e3e4:	37b0      	adds	r7, #176	@ 0xb0
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	40008000 	.word	0x40008000
 800e3f0:	0800dd21 	.word	0x0800dd21

0800e3f4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b0ae      	sub	sp, #184	@ 0xb8
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e402:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	69db      	ldr	r3, [r3, #28]
 800e40c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	689b      	ldr	r3, [r3, #8]
 800e420:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e42a:	2b22      	cmp	r3, #34	@ 0x22
 800e42c:	f040 8187 	bne.w	800e73e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e436:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e43a:	e12a      	b.n	800e692 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e442:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e44a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800e44e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800e452:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800e456:	4013      	ands	r3, r2
 800e458:	b29a      	uxth	r2, r3
 800e45a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e45e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e464:	1c9a      	adds	r2, r3, #2
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e470:	b29b      	uxth	r3, r3
 800e472:	3b01      	subs	r3, #1
 800e474:	b29a      	uxth	r2, r3
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	69db      	ldr	r3, [r3, #28]
 800e482:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e486:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e48a:	f003 0307 	and.w	r3, r3, #7
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d053      	beq.n	800e53a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e492:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e496:	f003 0301 	and.w	r3, r3, #1
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d011      	beq.n	800e4c2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800e49e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d00b      	beq.n	800e4c2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4b8:	f043 0201 	orr.w	r2, r3, #1
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e4c6:	f003 0302 	and.w	r3, r3, #2
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d011      	beq.n	800e4f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e4ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e4d2:	f003 0301 	and.w	r3, r3, #1
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d00b      	beq.n	800e4f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	2202      	movs	r2, #2
 800e4e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4e8:	f043 0204 	orr.w	r2, r3, #4
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e4f6:	f003 0304 	and.w	r3, r3, #4
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d011      	beq.n	800e522 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e4fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e502:	f003 0301 	and.w	r3, r3, #1
 800e506:	2b00      	cmp	r3, #0
 800e508:	d00b      	beq.n	800e522 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2204      	movs	r2, #4
 800e510:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e518:	f043 0202 	orr.w	r2, r3, #2
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d006      	beq.n	800e53a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f7fe fd65 	bl	800cffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2200      	movs	r2, #0
 800e536:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e540:	b29b      	uxth	r3, r3
 800e542:	2b00      	cmp	r3, #0
 800e544:	f040 80a5 	bne.w	800e692 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e54e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e550:	e853 3f00 	ldrex	r3, [r3]
 800e554:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e556:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e558:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e55c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	461a      	mov	r2, r3
 800e566:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e56a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e56e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e570:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e572:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e576:	e841 2300 	strex	r3, r2, [r1]
 800e57a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e57c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d1e2      	bne.n	800e548 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	3308      	adds	r3, #8
 800e588:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e58a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e58c:	e853 3f00 	ldrex	r3, [r3]
 800e590:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e592:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e594:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e598:	f023 0301 	bic.w	r3, r3, #1
 800e59c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	3308      	adds	r3, #8
 800e5a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e5aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e5ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e5b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e5b2:	e841 2300 	strex	r3, r2, [r1]
 800e5b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e5b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d1e1      	bne.n	800e582 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2220      	movs	r2, #32
 800e5c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	4a60      	ldr	r2, [pc, #384]	@ (800e758 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800e5d8:	4293      	cmp	r3, r2
 800e5da:	d021      	beq.n	800e620 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d01a      	beq.n	800e620 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5f2:	e853 3f00 	ldrex	r3, [r3]
 800e5f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e5f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e5fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e5fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	461a      	mov	r2, r3
 800e608:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e60c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e60e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e610:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e612:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e614:	e841 2300 	strex	r3, r2, [r1]
 800e618:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e61a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d1e4      	bne.n	800e5ea <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e624:	2b01      	cmp	r3, #1
 800e626:	d130      	bne.n	800e68a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2200      	movs	r2, #0
 800e62c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e636:	e853 3f00 	ldrex	r3, [r3]
 800e63a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e63c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e63e:	f023 0310 	bic.w	r3, r3, #16
 800e642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	461a      	mov	r2, r3
 800e64c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e650:	647b      	str	r3, [r7, #68]	@ 0x44
 800e652:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e654:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e656:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e658:	e841 2300 	strex	r3, r2, [r1]
 800e65c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e65e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e660:	2b00      	cmp	r3, #0
 800e662:	d1e4      	bne.n	800e62e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	69db      	ldr	r3, [r3, #28]
 800e66a:	f003 0310 	and.w	r3, r3, #16
 800e66e:	2b10      	cmp	r3, #16
 800e670:	d103      	bne.n	800e67a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	2210      	movs	r2, #16
 800e678:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e680:	4619      	mov	r1, r3
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f7fe fcc4 	bl	800d010 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e688:	e00e      	b.n	800e6a8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f7fe fcac 	bl	800cfe8 <HAL_UART_RxCpltCallback>
        break;
 800e690:	e00a      	b.n	800e6a8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e692:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800e696:	2b00      	cmp	r3, #0
 800e698:	d006      	beq.n	800e6a8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800e69a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e69e:	f003 0320 	and.w	r3, r3, #32
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	f47f aeca 	bne.w	800e43c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e6ae:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e6b2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d049      	beq.n	800e74e <UART_RxISR_16BIT_FIFOEN+0x35a>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e6c0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d242      	bcs.n	800e74e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	3308      	adds	r3, #8
 800e6ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6d2:	e853 3f00 	ldrex	r3, [r3]
 800e6d6:	623b      	str	r3, [r7, #32]
   return(result);
 800e6d8:	6a3b      	ldr	r3, [r7, #32]
 800e6da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e6de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	3308      	adds	r3, #8
 800e6e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e6ec:	633a      	str	r2, [r7, #48]	@ 0x30
 800e6ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e6f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6f4:	e841 2300 	strex	r3, r2, [r1]
 800e6f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d1e3      	bne.n	800e6c8 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	4a16      	ldr	r2, [pc, #88]	@ (800e75c <UART_RxISR_16BIT_FIFOEN+0x368>)
 800e704:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	e853 3f00 	ldrex	r3, [r3]
 800e712:	60fb      	str	r3, [r7, #12]
   return(result);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f043 0320 	orr.w	r3, r3, #32
 800e71a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	461a      	mov	r2, r3
 800e724:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e728:	61fb      	str	r3, [r7, #28]
 800e72a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e72c:	69b9      	ldr	r1, [r7, #24]
 800e72e:	69fa      	ldr	r2, [r7, #28]
 800e730:	e841 2300 	strex	r3, r2, [r1]
 800e734:	617b      	str	r3, [r7, #20]
   return(result);
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d1e4      	bne.n	800e706 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e73c:	e007      	b.n	800e74e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	699a      	ldr	r2, [r3, #24]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	f042 0208 	orr.w	r2, r2, #8
 800e74c:	619a      	str	r2, [r3, #24]
}
 800e74e:	bf00      	nop
 800e750:	37b8      	adds	r7, #184	@ 0xb8
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
 800e756:	bf00      	nop
 800e758:	40008000 	.word	0x40008000
 800e75c:	0800ded9 	.word	0x0800ded9

0800e760 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e760:	b480      	push	{r7}
 800e762:	b083      	sub	sp, #12
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e768:	bf00      	nop
 800e76a:	370c      	adds	r7, #12
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr

0800e774 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e774:	b480      	push	{r7}
 800e776:	b083      	sub	sp, #12
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e77c:	bf00      	nop
 800e77e:	370c      	adds	r7, #12
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr

0800e788 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e788:	b480      	push	{r7}
 800e78a:	b083      	sub	sp, #12
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e790:	bf00      	nop
 800e792:	370c      	adds	r7, #12
 800e794:	46bd      	mov	sp, r7
 800e796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79a:	4770      	bx	lr

0800e79c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b085      	sub	sp, #20
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d101      	bne.n	800e7b2 <HAL_UARTEx_DisableFifoMode+0x16>
 800e7ae:	2302      	movs	r3, #2
 800e7b0:	e027      	b.n	800e802 <HAL_UARTEx_DisableFifoMode+0x66>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2224      	movs	r2, #36	@ 0x24
 800e7be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f022 0201 	bic.w	r2, r2, #1
 800e7d8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e7e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	68fa      	ldr	r2, [r7, #12]
 800e7ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2220      	movs	r2, #32
 800e7f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e800:	2300      	movs	r3, #0
}
 800e802:	4618      	mov	r0, r3
 800e804:	3714      	adds	r7, #20
 800e806:	46bd      	mov	sp, r7
 800e808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80c:	4770      	bx	lr

0800e80e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e80e:	b580      	push	{r7, lr}
 800e810:	b084      	sub	sp, #16
 800e812:	af00      	add	r7, sp, #0
 800e814:	6078      	str	r0, [r7, #4]
 800e816:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e81e:	2b01      	cmp	r3, #1
 800e820:	d101      	bne.n	800e826 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e822:	2302      	movs	r3, #2
 800e824:	e02d      	b.n	800e882 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2201      	movs	r2, #1
 800e82a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2224      	movs	r2, #36	@ 0x24
 800e832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	681a      	ldr	r2, [r3, #0]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	f022 0201 	bic.w	r2, r2, #1
 800e84c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	689b      	ldr	r3, [r3, #8]
 800e854:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	683a      	ldr	r2, [r7, #0]
 800e85e:	430a      	orrs	r2, r1
 800e860:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f000 f850 	bl	800e908 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	68fa      	ldr	r2, [r7, #12]
 800e86e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2220      	movs	r2, #32
 800e874:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2200      	movs	r2, #0
 800e87c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e880:	2300      	movs	r3, #0
}
 800e882:	4618      	mov	r0, r3
 800e884:	3710      	adds	r7, #16
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}

0800e88a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e88a:	b580      	push	{r7, lr}
 800e88c:	b084      	sub	sp, #16
 800e88e:	af00      	add	r7, sp, #0
 800e890:	6078      	str	r0, [r7, #4]
 800e892:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e89a:	2b01      	cmp	r3, #1
 800e89c:	d101      	bne.n	800e8a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e89e:	2302      	movs	r3, #2
 800e8a0:	e02d      	b.n	800e8fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2224      	movs	r2, #36	@ 0x24
 800e8ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f022 0201 	bic.w	r2, r2, #1
 800e8c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	689b      	ldr	r3, [r3, #8]
 800e8d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	683a      	ldr	r2, [r7, #0]
 800e8da:	430a      	orrs	r2, r1
 800e8dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f000 f812 	bl	800e908 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	68fa      	ldr	r2, [r7, #12]
 800e8ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2220      	movs	r2, #32
 800e8f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e8fc:	2300      	movs	r3, #0
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3710      	adds	r7, #16
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
	...

0800e908 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e908:	b480      	push	{r7}
 800e90a:	b085      	sub	sp, #20
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e914:	2b00      	cmp	r3, #0
 800e916:	d108      	bne.n	800e92a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2201      	movs	r2, #1
 800e91c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2201      	movs	r2, #1
 800e924:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e928:	e031      	b.n	800e98e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e92a:	2308      	movs	r3, #8
 800e92c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e92e:	2308      	movs	r3, #8
 800e930:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	689b      	ldr	r3, [r3, #8]
 800e938:	0e5b      	lsrs	r3, r3, #25
 800e93a:	b2db      	uxtb	r3, r3
 800e93c:	f003 0307 	and.w	r3, r3, #7
 800e940:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	689b      	ldr	r3, [r3, #8]
 800e948:	0f5b      	lsrs	r3, r3, #29
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	f003 0307 	and.w	r3, r3, #7
 800e950:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e952:	7bbb      	ldrb	r3, [r7, #14]
 800e954:	7b3a      	ldrb	r2, [r7, #12]
 800e956:	4911      	ldr	r1, [pc, #68]	@ (800e99c <UARTEx_SetNbDataToProcess+0x94>)
 800e958:	5c8a      	ldrb	r2, [r1, r2]
 800e95a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e95e:	7b3a      	ldrb	r2, [r7, #12]
 800e960:	490f      	ldr	r1, [pc, #60]	@ (800e9a0 <UARTEx_SetNbDataToProcess+0x98>)
 800e962:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e964:	fb93 f3f2 	sdiv	r3, r3, r2
 800e968:	b29a      	uxth	r2, r3
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e970:	7bfb      	ldrb	r3, [r7, #15]
 800e972:	7b7a      	ldrb	r2, [r7, #13]
 800e974:	4909      	ldr	r1, [pc, #36]	@ (800e99c <UARTEx_SetNbDataToProcess+0x94>)
 800e976:	5c8a      	ldrb	r2, [r1, r2]
 800e978:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e97c:	7b7a      	ldrb	r2, [r7, #13]
 800e97e:	4908      	ldr	r1, [pc, #32]	@ (800e9a0 <UARTEx_SetNbDataToProcess+0x98>)
 800e980:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e982:	fb93 f3f2 	sdiv	r3, r3, r2
 800e986:	b29a      	uxth	r2, r3
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e98e:	bf00      	nop
 800e990:	3714      	adds	r7, #20
 800e992:	46bd      	mov	sp, r7
 800e994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e998:	4770      	bx	lr
 800e99a:	bf00      	nop
 800e99c:	08016be0 	.word	0x08016be0
 800e9a0:	08016be8 	.word	0x08016be8

0800e9a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b085      	sub	sp, #20
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e9b4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800e9b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	b29a      	uxth	r2, r3
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e9c4:	2300      	movs	r3, #0
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3714      	adds	r7, #20
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr

0800e9d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800e9d2:	b480      	push	{r7}
 800e9d4:	b085      	sub	sp, #20
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e9da:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800e9de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e9e6:	b29a      	uxth	r2, r3
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	43db      	mvns	r3, r3
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	4013      	ands	r3, r2
 800e9f2:	b29a      	uxth	r2, r3
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e9fa:	2300      	movs	r3, #0
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3714      	adds	r7, #20
 800ea00:	46bd      	mov	sp, r7
 800ea02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea06:	4770      	bx	lr

0800ea08 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b085      	sub	sp, #20
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	60f8      	str	r0, [r7, #12]
 800ea10:	1d3b      	adds	r3, r7, #4
 800ea12:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	2201      	movs	r2, #1
 800ea1a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2200      	movs	r2, #0
 800ea22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2200      	movs	r2, #0
 800ea32:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800ea36:	2300      	movs	r3, #0
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3714      	adds	r7, #20
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr

0800ea44 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b0a7      	sub	sp, #156	@ 0x9c
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	781b      	ldrb	r3, [r3, #0]
 800ea5a:	009b      	lsls	r3, r3, #2
 800ea5c:	4413      	add	r3, r2
 800ea5e:	881b      	ldrh	r3, [r3, #0]
 800ea60:	b29b      	uxth	r3, r3
 800ea62:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800ea66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea6a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	78db      	ldrb	r3, [r3, #3]
 800ea72:	2b03      	cmp	r3, #3
 800ea74:	d81f      	bhi.n	800eab6 <USB_ActivateEndpoint+0x72>
 800ea76:	a201      	add	r2, pc, #4	@ (adr r2, 800ea7c <USB_ActivateEndpoint+0x38>)
 800ea78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea7c:	0800ea8d 	.word	0x0800ea8d
 800ea80:	0800eaa9 	.word	0x0800eaa9
 800ea84:	0800eabf 	.word	0x0800eabf
 800ea88:	0800ea9b 	.word	0x0800ea9b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ea8c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ea90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ea94:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800ea98:	e012      	b.n	800eac0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ea9a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ea9e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800eaa2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800eaa6:	e00b      	b.n	800eac0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800eaa8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800eaac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800eab0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800eab4:	e004      	b.n	800eac0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800eab6:	2301      	movs	r3, #1
 800eab8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800eabc:	e000      	b.n	800eac0 <USB_ActivateEndpoint+0x7c>
      break;
 800eabe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800eac0:	687a      	ldr	r2, [r7, #4]
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	009b      	lsls	r3, r3, #2
 800eac8:	441a      	add	r2, r3
 800eaca:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800eace:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ead2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ead6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eade:	b29b      	uxth	r3, r3
 800eae0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800eae2:	687a      	ldr	r2, [r7, #4]
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	781b      	ldrb	r3, [r3, #0]
 800eae8:	009b      	lsls	r3, r3, #2
 800eaea:	4413      	add	r3, r2
 800eaec:	881b      	ldrh	r3, [r3, #0]
 800eaee:	b29b      	uxth	r3, r3
 800eaf0:	b21b      	sxth	r3, r3
 800eaf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eaf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eafa:	b21a      	sxth	r2, r3
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	781b      	ldrb	r3, [r3, #0]
 800eb00:	b21b      	sxth	r3, r3
 800eb02:	4313      	orrs	r3, r2
 800eb04:	b21b      	sxth	r3, r3
 800eb06:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800eb0a:	687a      	ldr	r2, [r7, #4]
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	009b      	lsls	r3, r3, #2
 800eb12:	441a      	add	r2, r3
 800eb14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800eb18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eb1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eb20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eb24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb28:	b29b      	uxth	r3, r3
 800eb2a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	7b1b      	ldrb	r3, [r3, #12]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	f040 8180 	bne.w	800ee36 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	785b      	ldrb	r3, [r3, #1]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	f000 8084 	beq.w	800ec48 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	61bb      	str	r3, [r7, #24]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eb4a:	b29b      	uxth	r3, r3
 800eb4c:	461a      	mov	r2, r3
 800eb4e:	69bb      	ldr	r3, [r7, #24]
 800eb50:	4413      	add	r3, r2
 800eb52:	61bb      	str	r3, [r7, #24]
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	00da      	lsls	r2, r3, #3
 800eb5a:	69bb      	ldr	r3, [r7, #24]
 800eb5c:	4413      	add	r3, r2
 800eb5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eb62:	617b      	str	r3, [r7, #20]
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	88db      	ldrh	r3, [r3, #6]
 800eb68:	085b      	lsrs	r3, r3, #1
 800eb6a:	b29b      	uxth	r3, r3
 800eb6c:	005b      	lsls	r3, r3, #1
 800eb6e:	b29a      	uxth	r2, r3
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800eb74:	687a      	ldr	r2, [r7, #4]
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	4413      	add	r3, r2
 800eb7e:	881b      	ldrh	r3, [r3, #0]
 800eb80:	827b      	strh	r3, [r7, #18]
 800eb82:	8a7b      	ldrh	r3, [r7, #18]
 800eb84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d01b      	beq.n	800ebc4 <USB_ActivateEndpoint+0x180>
 800eb8c:	687a      	ldr	r2, [r7, #4]
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	781b      	ldrb	r3, [r3, #0]
 800eb92:	009b      	lsls	r3, r3, #2
 800eb94:	4413      	add	r3, r2
 800eb96:	881b      	ldrh	r3, [r3, #0]
 800eb98:	b29b      	uxth	r3, r3
 800eb9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eb9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eba2:	823b      	strh	r3, [r7, #16]
 800eba4:	687a      	ldr	r2, [r7, #4]
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	781b      	ldrb	r3, [r3, #0]
 800ebaa:	009b      	lsls	r3, r3, #2
 800ebac:	441a      	add	r2, r3
 800ebae:	8a3b      	ldrh	r3, [r7, #16]
 800ebb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ebb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ebb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ebbc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	78db      	ldrb	r3, [r3, #3]
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	d020      	beq.n	800ec0e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	009b      	lsls	r3, r3, #2
 800ebd4:	4413      	add	r3, r2
 800ebd6:	881b      	ldrh	r3, [r3, #0]
 800ebd8:	b29b      	uxth	r3, r3
 800ebda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ebde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ebe2:	81bb      	strh	r3, [r7, #12]
 800ebe4:	89bb      	ldrh	r3, [r7, #12]
 800ebe6:	f083 0320 	eor.w	r3, r3, #32
 800ebea:	81bb      	strh	r3, [r7, #12]
 800ebec:	687a      	ldr	r2, [r7, #4]
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	781b      	ldrb	r3, [r3, #0]
 800ebf2:	009b      	lsls	r3, r3, #2
 800ebf4:	441a      	add	r2, r3
 800ebf6:	89bb      	ldrh	r3, [r7, #12]
 800ebf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ebfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ec00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ec04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec08:	b29b      	uxth	r3, r3
 800ec0a:	8013      	strh	r3, [r2, #0]
 800ec0c:	e3f9      	b.n	800f402 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ec0e:	687a      	ldr	r2, [r7, #4]
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	009b      	lsls	r3, r3, #2
 800ec16:	4413      	add	r3, r2
 800ec18:	881b      	ldrh	r3, [r3, #0]
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ec20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ec24:	81fb      	strh	r3, [r7, #14]
 800ec26:	687a      	ldr	r2, [r7, #4]
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	009b      	lsls	r3, r3, #2
 800ec2e:	441a      	add	r2, r3
 800ec30:	89fb      	ldrh	r3, [r7, #14]
 800ec32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ec36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ec3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ec3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec42:	b29b      	uxth	r3, r3
 800ec44:	8013      	strh	r3, [r2, #0]
 800ec46:	e3dc      	b.n	800f402 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	461a      	mov	r2, r3
 800ec56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec58:	4413      	add	r3, r2
 800ec5a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	00da      	lsls	r2, r3, #3
 800ec62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec64:	4413      	add	r3, r2
 800ec66:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ec6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	88db      	ldrh	r3, [r3, #6]
 800ec70:	085b      	lsrs	r3, r3, #1
 800ec72:	b29b      	uxth	r3, r3
 800ec74:	005b      	lsls	r3, r3, #1
 800ec76:	b29a      	uxth	r2, r3
 800ec78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec7a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ec86:	b29b      	uxth	r3, r3
 800ec88:	461a      	mov	r2, r3
 800ec8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec8c:	4413      	add	r3, r2
 800ec8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	00da      	lsls	r2, r3, #3
 800ec96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec98:	4413      	add	r3, r2
 800ec9a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ec9e:	627b      	str	r3, [r7, #36]	@ 0x24
 800eca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eca2:	881b      	ldrh	r3, [r3, #0]
 800eca4:	b29b      	uxth	r3, r3
 800eca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ecaa:	b29a      	uxth	r2, r3
 800ecac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecae:	801a      	strh	r2, [r3, #0]
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	691b      	ldr	r3, [r3, #16]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d10a      	bne.n	800ecce <USB_ActivateEndpoint+0x28a>
 800ecb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecba:	881b      	ldrh	r3, [r3, #0]
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ecc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ecc6:	b29a      	uxth	r2, r3
 800ecc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecca:	801a      	strh	r2, [r3, #0]
 800eccc:	e041      	b.n	800ed52 <USB_ActivateEndpoint+0x30e>
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	691b      	ldr	r3, [r3, #16]
 800ecd2:	2b3e      	cmp	r3, #62	@ 0x3e
 800ecd4:	d81c      	bhi.n	800ed10 <USB_ActivateEndpoint+0x2cc>
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	691b      	ldr	r3, [r3, #16]
 800ecda:	085b      	lsrs	r3, r3, #1
 800ecdc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	691b      	ldr	r3, [r3, #16]
 800ece4:	f003 0301 	and.w	r3, r3, #1
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d004      	beq.n	800ecf6 <USB_ActivateEndpoint+0x2b2>
 800ecec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ecf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecf8:	881b      	ldrh	r3, [r3, #0]
 800ecfa:	b29a      	uxth	r2, r3
 800ecfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	029b      	lsls	r3, r3, #10
 800ed04:	b29b      	uxth	r3, r3
 800ed06:	4313      	orrs	r3, r2
 800ed08:	b29a      	uxth	r2, r3
 800ed0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed0c:	801a      	strh	r2, [r3, #0]
 800ed0e:	e020      	b.n	800ed52 <USB_ActivateEndpoint+0x30e>
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	691b      	ldr	r3, [r3, #16]
 800ed14:	095b      	lsrs	r3, r3, #5
 800ed16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	691b      	ldr	r3, [r3, #16]
 800ed1e:	f003 031f 	and.w	r3, r3, #31
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d104      	bne.n	800ed30 <USB_ActivateEndpoint+0x2ec>
 800ed26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ed2a:	3b01      	subs	r3, #1
 800ed2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ed30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed32:	881b      	ldrh	r3, [r3, #0]
 800ed34:	b29a      	uxth	r2, r3
 800ed36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ed3a:	b29b      	uxth	r3, r3
 800ed3c:	029b      	lsls	r3, r3, #10
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	4313      	orrs	r3, r2
 800ed42:	b29b      	uxth	r3, r3
 800ed44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed4c:	b29a      	uxth	r2, r3
 800ed4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed50:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ed52:	687a      	ldr	r2, [r7, #4]
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	781b      	ldrb	r3, [r3, #0]
 800ed58:	009b      	lsls	r3, r3, #2
 800ed5a:	4413      	add	r3, r2
 800ed5c:	881b      	ldrh	r3, [r3, #0]
 800ed5e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ed60:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ed62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d01b      	beq.n	800eda2 <USB_ActivateEndpoint+0x35e>
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	009b      	lsls	r3, r3, #2
 800ed72:	4413      	add	r3, r2
 800ed74:	881b      	ldrh	r3, [r3, #0]
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ed7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ed80:	843b      	strh	r3, [r7, #32]
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	009b      	lsls	r3, r3, #2
 800ed8a:	441a      	add	r2, r3
 800ed8c:	8c3b      	ldrh	r3, [r7, #32]
 800ed8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ed92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ed96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ed9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	781b      	ldrb	r3, [r3, #0]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d124      	bne.n	800edf4 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800edaa:	687a      	ldr	r2, [r7, #4]
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	009b      	lsls	r3, r3, #2
 800edb2:	4413      	add	r3, r2
 800edb4:	881b      	ldrh	r3, [r3, #0]
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800edbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800edc0:	83bb      	strh	r3, [r7, #28]
 800edc2:	8bbb      	ldrh	r3, [r7, #28]
 800edc4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800edc8:	83bb      	strh	r3, [r7, #28]
 800edca:	8bbb      	ldrh	r3, [r7, #28]
 800edcc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800edd0:	83bb      	strh	r3, [r7, #28]
 800edd2:	687a      	ldr	r2, [r7, #4]
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	781b      	ldrb	r3, [r3, #0]
 800edd8:	009b      	lsls	r3, r3, #2
 800edda:	441a      	add	r2, r3
 800eddc:	8bbb      	ldrh	r3, [r7, #28]
 800edde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ede2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ede6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800edea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edee:	b29b      	uxth	r3, r3
 800edf0:	8013      	strh	r3, [r2, #0]
 800edf2:	e306      	b.n	800f402 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800edf4:	687a      	ldr	r2, [r7, #4]
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	009b      	lsls	r3, r3, #2
 800edfc:	4413      	add	r3, r2
 800edfe:	881b      	ldrh	r3, [r3, #0]
 800ee00:	b29b      	uxth	r3, r3
 800ee02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ee06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee0a:	83fb      	strh	r3, [r7, #30]
 800ee0c:	8bfb      	ldrh	r3, [r7, #30]
 800ee0e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ee12:	83fb      	strh	r3, [r7, #30]
 800ee14:	687a      	ldr	r2, [r7, #4]
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	009b      	lsls	r3, r3, #2
 800ee1c:	441a      	add	r2, r3
 800ee1e:	8bfb      	ldrh	r3, [r7, #30]
 800ee20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ee24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ee28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ee2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee30:	b29b      	uxth	r3, r3
 800ee32:	8013      	strh	r3, [r2, #0]
 800ee34:	e2e5      	b.n	800f402 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	78db      	ldrb	r3, [r3, #3]
 800ee3a:	2b02      	cmp	r3, #2
 800ee3c:	d11e      	bne.n	800ee7c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ee3e:	687a      	ldr	r2, [r7, #4]
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	4413      	add	r3, r2
 800ee48:	881b      	ldrh	r3, [r3, #0]
 800ee4a:	b29b      	uxth	r3, r3
 800ee4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ee50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee54:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	009b      	lsls	r3, r3, #2
 800ee60:	441a      	add	r2, r3
 800ee62:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800ee66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ee6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ee6e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ee72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	8013      	strh	r3, [r2, #0]
 800ee7a:	e01d      	b.n	800eeb8 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ee7c:	687a      	ldr	r2, [r7, #4]
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	009b      	lsls	r3, r3, #2
 800ee84:	4413      	add	r3, r2
 800ee86:	881b      	ldrh	r3, [r3, #0]
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ee8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee92:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800ee96:	687a      	ldr	r2, [r7, #4]
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	009b      	lsls	r3, r3, #2
 800ee9e:	441a      	add	r2, r3
 800eea0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800eea4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eea8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eeac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eeb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eeb4:	b29b      	uxth	r3, r3
 800eeb6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	461a      	mov	r2, r3
 800eec6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800eec8:	4413      	add	r3, r2
 800eeca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	00da      	lsls	r2, r3, #3
 800eed2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800eed4:	4413      	add	r3, r2
 800eed6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eeda:	67bb      	str	r3, [r7, #120]	@ 0x78
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	891b      	ldrh	r3, [r3, #8]
 800eee0:	085b      	lsrs	r3, r3, #1
 800eee2:	b29b      	uxth	r3, r3
 800eee4:	005b      	lsls	r3, r3, #1
 800eee6:	b29a      	uxth	r2, r3
 800eee8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eeea:	801a      	strh	r2, [r3, #0]
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	677b      	str	r3, [r7, #116]	@ 0x74
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eef6:	b29b      	uxth	r3, r3
 800eef8:	461a      	mov	r2, r3
 800eefa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eefc:	4413      	add	r3, r2
 800eefe:	677b      	str	r3, [r7, #116]	@ 0x74
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	781b      	ldrb	r3, [r3, #0]
 800ef04:	00da      	lsls	r2, r3, #3
 800ef06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ef08:	4413      	add	r3, r2
 800ef0a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ef0e:	673b      	str	r3, [r7, #112]	@ 0x70
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	895b      	ldrh	r3, [r3, #10]
 800ef14:	085b      	lsrs	r3, r3, #1
 800ef16:	b29b      	uxth	r3, r3
 800ef18:	005b      	lsls	r3, r3, #1
 800ef1a:	b29a      	uxth	r2, r3
 800ef1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ef1e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	785b      	ldrb	r3, [r3, #1]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	f040 81af 	bne.w	800f288 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ef2a:	687a      	ldr	r2, [r7, #4]
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	009b      	lsls	r3, r3, #2
 800ef32:	4413      	add	r3, r2
 800ef34:	881b      	ldrh	r3, [r3, #0]
 800ef36:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800ef3a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800ef3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d01d      	beq.n	800ef82 <USB_ActivateEndpoint+0x53e>
 800ef46:	687a      	ldr	r2, [r7, #4]
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	009b      	lsls	r3, r3, #2
 800ef4e:	4413      	add	r3, r2
 800ef50:	881b      	ldrh	r3, [r3, #0]
 800ef52:	b29b      	uxth	r3, r3
 800ef54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ef58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef5c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800ef60:	687a      	ldr	r2, [r7, #4]
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	009b      	lsls	r3, r3, #2
 800ef68:	441a      	add	r2, r3
 800ef6a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800ef6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ef72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ef76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ef7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef7e:	b29b      	uxth	r3, r3
 800ef80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ef82:	687a      	ldr	r2, [r7, #4]
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	009b      	lsls	r3, r3, #2
 800ef8a:	4413      	add	r3, r2
 800ef8c:	881b      	ldrh	r3, [r3, #0]
 800ef8e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800ef92:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800ef96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d01d      	beq.n	800efda <USB_ActivateEndpoint+0x596>
 800ef9e:	687a      	ldr	r2, [r7, #4]
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	4413      	add	r3, r2
 800efa8:	881b      	ldrh	r3, [r3, #0]
 800efaa:	b29b      	uxth	r3, r3
 800efac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800efb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800efb4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	009b      	lsls	r3, r3, #2
 800efc0:	441a      	add	r2, r3
 800efc2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800efc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800efca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800efce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800efd2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800efd6:	b29b      	uxth	r3, r3
 800efd8:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	785b      	ldrb	r3, [r3, #1]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d16b      	bne.n	800f0ba <USB_ActivateEndpoint+0x676>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800efec:	b29b      	uxth	r3, r3
 800efee:	461a      	mov	r2, r3
 800eff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eff2:	4413      	add	r3, r2
 800eff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	781b      	ldrb	r3, [r3, #0]
 800effa:	00da      	lsls	r2, r3, #3
 800effc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800effe:	4413      	add	r3, r2
 800f000:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f004:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f006:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f008:	881b      	ldrh	r3, [r3, #0]
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f010:	b29a      	uxth	r2, r3
 800f012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f014:	801a      	strh	r2, [r3, #0]
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	691b      	ldr	r3, [r3, #16]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d10a      	bne.n	800f034 <USB_ActivateEndpoint+0x5f0>
 800f01e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f020:	881b      	ldrh	r3, [r3, #0]
 800f022:	b29b      	uxth	r3, r3
 800f024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f02c:	b29a      	uxth	r2, r3
 800f02e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f030:	801a      	strh	r2, [r3, #0]
 800f032:	e05d      	b.n	800f0f0 <USB_ActivateEndpoint+0x6ac>
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	691b      	ldr	r3, [r3, #16]
 800f038:	2b3e      	cmp	r3, #62	@ 0x3e
 800f03a:	d81c      	bhi.n	800f076 <USB_ActivateEndpoint+0x632>
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	691b      	ldr	r3, [r3, #16]
 800f040:	085b      	lsrs	r3, r3, #1
 800f042:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	691b      	ldr	r3, [r3, #16]
 800f04a:	f003 0301 	and.w	r3, r3, #1
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d004      	beq.n	800f05c <USB_ActivateEndpoint+0x618>
 800f052:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f056:	3301      	adds	r3, #1
 800f058:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f05c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f05e:	881b      	ldrh	r3, [r3, #0]
 800f060:	b29a      	uxth	r2, r3
 800f062:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f066:	b29b      	uxth	r3, r3
 800f068:	029b      	lsls	r3, r3, #10
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	4313      	orrs	r3, r2
 800f06e:	b29a      	uxth	r2, r3
 800f070:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f072:	801a      	strh	r2, [r3, #0]
 800f074:	e03c      	b.n	800f0f0 <USB_ActivateEndpoint+0x6ac>
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	691b      	ldr	r3, [r3, #16]
 800f07a:	095b      	lsrs	r3, r3, #5
 800f07c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	691b      	ldr	r3, [r3, #16]
 800f084:	f003 031f 	and.w	r3, r3, #31
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d104      	bne.n	800f096 <USB_ActivateEndpoint+0x652>
 800f08c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f090:	3b01      	subs	r3, #1
 800f092:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f098:	881b      	ldrh	r3, [r3, #0]
 800f09a:	b29a      	uxth	r2, r3
 800f09c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f0a0:	b29b      	uxth	r3, r3
 800f0a2:	029b      	lsls	r3, r3, #10
 800f0a4:	b29b      	uxth	r3, r3
 800f0a6:	4313      	orrs	r3, r2
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f0ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f0b2:	b29a      	uxth	r2, r3
 800f0b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f0b6:	801a      	strh	r2, [r3, #0]
 800f0b8:	e01a      	b.n	800f0f0 <USB_ActivateEndpoint+0x6ac>
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	785b      	ldrb	r3, [r3, #1]
 800f0be:	2b01      	cmp	r3, #1
 800f0c0:	d116      	bne.n	800f0f0 <USB_ActivateEndpoint+0x6ac>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	657b      	str	r3, [r7, #84]	@ 0x54
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f0cc:	b29b      	uxth	r3, r3
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0d2:	4413      	add	r3, r2
 800f0d4:	657b      	str	r3, [r7, #84]	@ 0x54
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	00da      	lsls	r2, r3, #3
 800f0dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0de:	4413      	add	r3, r2
 800f0e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f0e4:	653b      	str	r3, [r7, #80]	@ 0x50
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	691b      	ldr	r3, [r3, #16]
 800f0ea:	b29a      	uxth	r2, r3
 800f0ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f0ee:	801a      	strh	r2, [r3, #0]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	785b      	ldrb	r3, [r3, #1]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d16b      	bne.n	800f1d4 <USB_ActivateEndpoint+0x790>
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f106:	b29b      	uxth	r3, r3
 800f108:	461a      	mov	r2, r3
 800f10a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f10c:	4413      	add	r3, r2
 800f10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	781b      	ldrb	r3, [r3, #0]
 800f114:	00da      	lsls	r2, r3, #3
 800f116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f118:	4413      	add	r3, r2
 800f11a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f11e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f122:	881b      	ldrh	r3, [r3, #0]
 800f124:	b29b      	uxth	r3, r3
 800f126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f12a:	b29a      	uxth	r2, r3
 800f12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f12e:	801a      	strh	r2, [r3, #0]
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	691b      	ldr	r3, [r3, #16]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d10a      	bne.n	800f14e <USB_ActivateEndpoint+0x70a>
 800f138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f13a:	881b      	ldrh	r3, [r3, #0]
 800f13c:	b29b      	uxth	r3, r3
 800f13e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f146:	b29a      	uxth	r2, r3
 800f148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f14a:	801a      	strh	r2, [r3, #0]
 800f14c:	e05b      	b.n	800f206 <USB_ActivateEndpoint+0x7c2>
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	691b      	ldr	r3, [r3, #16]
 800f152:	2b3e      	cmp	r3, #62	@ 0x3e
 800f154:	d81c      	bhi.n	800f190 <USB_ActivateEndpoint+0x74c>
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	691b      	ldr	r3, [r3, #16]
 800f15a:	085b      	lsrs	r3, r3, #1
 800f15c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	691b      	ldr	r3, [r3, #16]
 800f164:	f003 0301 	and.w	r3, r3, #1
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d004      	beq.n	800f176 <USB_ActivateEndpoint+0x732>
 800f16c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f170:	3301      	adds	r3, #1
 800f172:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f178:	881b      	ldrh	r3, [r3, #0]
 800f17a:	b29a      	uxth	r2, r3
 800f17c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f180:	b29b      	uxth	r3, r3
 800f182:	029b      	lsls	r3, r3, #10
 800f184:	b29b      	uxth	r3, r3
 800f186:	4313      	orrs	r3, r2
 800f188:	b29a      	uxth	r2, r3
 800f18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f18c:	801a      	strh	r2, [r3, #0]
 800f18e:	e03a      	b.n	800f206 <USB_ActivateEndpoint+0x7c2>
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	691b      	ldr	r3, [r3, #16]
 800f194:	095b      	lsrs	r3, r3, #5
 800f196:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	691b      	ldr	r3, [r3, #16]
 800f19e:	f003 031f 	and.w	r3, r3, #31
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d104      	bne.n	800f1b0 <USB_ActivateEndpoint+0x76c>
 800f1a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f1aa:	3b01      	subs	r3, #1
 800f1ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1b2:	881b      	ldrh	r3, [r3, #0]
 800f1b4:	b29a      	uxth	r2, r3
 800f1b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	029b      	lsls	r3, r3, #10
 800f1be:	b29b      	uxth	r3, r3
 800f1c0:	4313      	orrs	r3, r2
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f1c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f1cc:	b29a      	uxth	r2, r3
 800f1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1d0:	801a      	strh	r2, [r3, #0]
 800f1d2:	e018      	b.n	800f206 <USB_ActivateEndpoint+0x7c2>
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	785b      	ldrb	r3, [r3, #1]
 800f1d8:	2b01      	cmp	r3, #1
 800f1da:	d114      	bne.n	800f206 <USB_ActivateEndpoint+0x7c2>
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f1e2:	b29b      	uxth	r3, r3
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1e8:	4413      	add	r3, r2
 800f1ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	781b      	ldrb	r3, [r3, #0]
 800f1f0:	00da      	lsls	r2, r3, #3
 800f1f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1f4:	4413      	add	r3, r2
 800f1f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f1fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	691b      	ldr	r3, [r3, #16]
 800f200:	b29a      	uxth	r2, r3
 800f202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f204:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f206:	687a      	ldr	r2, [r7, #4]
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	781b      	ldrb	r3, [r3, #0]
 800f20c:	009b      	lsls	r3, r3, #2
 800f20e:	4413      	add	r3, r2
 800f210:	881b      	ldrh	r3, [r3, #0]
 800f212:	b29b      	uxth	r3, r3
 800f214:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f21c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f21e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f220:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f224:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f226:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f228:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f22c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f22e:	687a      	ldr	r2, [r7, #4]
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	009b      	lsls	r3, r3, #2
 800f236:	441a      	add	r2, r3
 800f238:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f23a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f23e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f24e:	687a      	ldr	r2, [r7, #4]
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	009b      	lsls	r3, r3, #2
 800f256:	4413      	add	r3, r2
 800f258:	881b      	ldrh	r3, [r3, #0]
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f260:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f264:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800f266:	687a      	ldr	r2, [r7, #4]
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	441a      	add	r2, r3
 800f270:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800f272:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f276:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f27a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f27e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f282:	b29b      	uxth	r3, r3
 800f284:	8013      	strh	r3, [r2, #0]
 800f286:	e0bc      	b.n	800f402 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f288:	687a      	ldr	r2, [r7, #4]
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	009b      	lsls	r3, r3, #2
 800f290:	4413      	add	r3, r2
 800f292:	881b      	ldrh	r3, [r3, #0]
 800f294:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800f298:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800f29c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d01d      	beq.n	800f2e0 <USB_ActivateEndpoint+0x89c>
 800f2a4:	687a      	ldr	r2, [r7, #4]
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	009b      	lsls	r3, r3, #2
 800f2ac:	4413      	add	r3, r2
 800f2ae:	881b      	ldrh	r3, [r3, #0]
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f2b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f2ba:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800f2be:	687a      	ldr	r2, [r7, #4]
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	781b      	ldrb	r3, [r3, #0]
 800f2c4:	009b      	lsls	r3, r3, #2
 800f2c6:	441a      	add	r2, r3
 800f2c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800f2cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f2d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f2d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f2d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2dc:	b29b      	uxth	r3, r3
 800f2de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f2e0:	687a      	ldr	r2, [r7, #4]
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	781b      	ldrb	r3, [r3, #0]
 800f2e6:	009b      	lsls	r3, r3, #2
 800f2e8:	4413      	add	r3, r2
 800f2ea:	881b      	ldrh	r3, [r3, #0]
 800f2ec:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800f2f0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800f2f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d01d      	beq.n	800f338 <USB_ActivateEndpoint+0x8f4>
 800f2fc:	687a      	ldr	r2, [r7, #4]
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	009b      	lsls	r3, r3, #2
 800f304:	4413      	add	r3, r2
 800f306:	881b      	ldrh	r3, [r3, #0]
 800f308:	b29b      	uxth	r3, r3
 800f30a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f30e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f312:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800f316:	687a      	ldr	r2, [r7, #4]
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	009b      	lsls	r3, r3, #2
 800f31e:	441a      	add	r2, r3
 800f320:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800f324:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f328:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f32c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f330:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f334:	b29b      	uxth	r3, r3
 800f336:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	78db      	ldrb	r3, [r3, #3]
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d024      	beq.n	800f38a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f340:	687a      	ldr	r2, [r7, #4]
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	781b      	ldrb	r3, [r3, #0]
 800f346:	009b      	lsls	r3, r3, #2
 800f348:	4413      	add	r3, r2
 800f34a:	881b      	ldrh	r3, [r3, #0]
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f352:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f356:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800f35a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800f35e:	f083 0320 	eor.w	r3, r3, #32
 800f362:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800f366:	687a      	ldr	r2, [r7, #4]
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	009b      	lsls	r3, r3, #2
 800f36e:	441a      	add	r2, r3
 800f370:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800f374:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f378:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f37c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f384:	b29b      	uxth	r3, r3
 800f386:	8013      	strh	r3, [r2, #0]
 800f388:	e01d      	b.n	800f3c6 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f38a:	687a      	ldr	r2, [r7, #4]
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	781b      	ldrb	r3, [r3, #0]
 800f390:	009b      	lsls	r3, r3, #2
 800f392:	4413      	add	r3, r2
 800f394:	881b      	ldrh	r3, [r3, #0]
 800f396:	b29b      	uxth	r3, r3
 800f398:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f39c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f3a0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	009b      	lsls	r3, r3, #2
 800f3ac:	441a      	add	r2, r3
 800f3ae:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800f3b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f3b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f3ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f3be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f3c2:	b29b      	uxth	r3, r3
 800f3c4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f3c6:	687a      	ldr	r2, [r7, #4]
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	009b      	lsls	r3, r3, #2
 800f3ce:	4413      	add	r3, r2
 800f3d0:	881b      	ldrh	r3, [r3, #0]
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f3d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f3dc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800f3e0:	687a      	ldr	r2, [r7, #4]
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	009b      	lsls	r3, r3, #2
 800f3e8:	441a      	add	r2, r3
 800f3ea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800f3ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f3f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f3f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f3fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800f402:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800f406:	4618      	mov	r0, r3
 800f408:	379c      	adds	r7, #156	@ 0x9c
 800f40a:	46bd      	mov	sp, r7
 800f40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f410:	4770      	bx	lr
 800f412:	bf00      	nop

0800f414 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b0ac      	sub	sp, #176	@ 0xb0
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	785b      	ldrb	r3, [r3, #1]
 800f422:	2b01      	cmp	r3, #1
 800f424:	f040 84ca 	bne.w	800fdbc <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	699a      	ldr	r2, [r3, #24]
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	691b      	ldr	r3, [r3, #16]
 800f430:	429a      	cmp	r2, r3
 800f432:	d904      	bls.n	800f43e <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	691b      	ldr	r3, [r3, #16]
 800f438:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f43c:	e003      	b.n	800f446 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	699b      	ldr	r3, [r3, #24]
 800f442:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	7b1b      	ldrb	r3, [r3, #12]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d122      	bne.n	800f494 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	6959      	ldr	r1, [r3, #20]
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	88da      	ldrh	r2, [r3, #6]
 800f456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f000 fed2 	bl	8010206 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	613b      	str	r3, [r7, #16]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f46c:	b29b      	uxth	r3, r3
 800f46e:	461a      	mov	r2, r3
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	4413      	add	r3, r2
 800f474:	613b      	str	r3, [r7, #16]
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	00da      	lsls	r2, r3, #3
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	4413      	add	r3, r2
 800f480:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f484:	60fb      	str	r3, [r7, #12]
 800f486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f48a:	b29a      	uxth	r2, r3
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	801a      	strh	r2, [r3, #0]
 800f490:	f000 bc6f 	b.w	800fd72 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	78db      	ldrb	r3, [r3, #3]
 800f498:	2b02      	cmp	r3, #2
 800f49a:	f040 831e 	bne.w	800fada <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	6a1a      	ldr	r2, [r3, #32]
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	691b      	ldr	r3, [r3, #16]
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	f240 82cf 	bls.w	800fa4a <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f4ac:	687a      	ldr	r2, [r7, #4]
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	009b      	lsls	r3, r3, #2
 800f4b4:	4413      	add	r3, r2
 800f4b6:	881b      	ldrh	r3, [r3, #0]
 800f4b8:	b29b      	uxth	r3, r3
 800f4ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f4be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f4c2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800f4c6:	687a      	ldr	r2, [r7, #4]
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	009b      	lsls	r3, r3, #2
 800f4ce:	441a      	add	r2, r3
 800f4d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800f4d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f4d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f4dc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800f4e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4e4:	b29b      	uxth	r3, r3
 800f4e6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	6a1a      	ldr	r2, [r3, #32]
 800f4ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f4f0:	1ad2      	subs	r2, r2, r3
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f4f6:	687a      	ldr	r2, [r7, #4]
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	009b      	lsls	r3, r3, #2
 800f4fe:	4413      	add	r3, r2
 800f500:	881b      	ldrh	r3, [r3, #0]
 800f502:	b29b      	uxth	r3, r3
 800f504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f508:	2b00      	cmp	r3, #0
 800f50a:	f000 814f 	beq.w	800f7ac <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	633b      	str	r3, [r7, #48]	@ 0x30
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	785b      	ldrb	r3, [r3, #1]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d16b      	bne.n	800f5f2 <USB_EPStartXfer+0x1de>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f524:	b29b      	uxth	r3, r3
 800f526:	461a      	mov	r2, r3
 800f528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f52a:	4413      	add	r3, r2
 800f52c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	00da      	lsls	r2, r3, #3
 800f534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f536:	4413      	add	r3, r2
 800f538:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f53c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f540:	881b      	ldrh	r3, [r3, #0]
 800f542:	b29b      	uxth	r3, r3
 800f544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f548:	b29a      	uxth	r2, r3
 800f54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f54c:	801a      	strh	r2, [r3, #0]
 800f54e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f552:	2b00      	cmp	r3, #0
 800f554:	d10a      	bne.n	800f56c <USB_EPStartXfer+0x158>
 800f556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f558:	881b      	ldrh	r3, [r3, #0]
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f564:	b29a      	uxth	r2, r3
 800f566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f568:	801a      	strh	r2, [r3, #0]
 800f56a:	e05b      	b.n	800f624 <USB_EPStartXfer+0x210>
 800f56c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f570:	2b3e      	cmp	r3, #62	@ 0x3e
 800f572:	d81c      	bhi.n	800f5ae <USB_EPStartXfer+0x19a>
 800f574:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f578:	085b      	lsrs	r3, r3, #1
 800f57a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f57e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f582:	f003 0301 	and.w	r3, r3, #1
 800f586:	2b00      	cmp	r3, #0
 800f588:	d004      	beq.n	800f594 <USB_EPStartXfer+0x180>
 800f58a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f58e:	3301      	adds	r3, #1
 800f590:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f596:	881b      	ldrh	r3, [r3, #0]
 800f598:	b29a      	uxth	r2, r3
 800f59a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f59e:	b29b      	uxth	r3, r3
 800f5a0:	029b      	lsls	r3, r3, #10
 800f5a2:	b29b      	uxth	r3, r3
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	b29a      	uxth	r2, r3
 800f5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5aa:	801a      	strh	r2, [r3, #0]
 800f5ac:	e03a      	b.n	800f624 <USB_EPStartXfer+0x210>
 800f5ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f5b2:	095b      	lsrs	r3, r3, #5
 800f5b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f5b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f5bc:	f003 031f 	and.w	r3, r3, #31
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d104      	bne.n	800f5ce <USB_EPStartXfer+0x1ba>
 800f5c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f5c8:	3b01      	subs	r3, #1
 800f5ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5d0:	881b      	ldrh	r3, [r3, #0]
 800f5d2:	b29a      	uxth	r2, r3
 800f5d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f5d8:	b29b      	uxth	r3, r3
 800f5da:	029b      	lsls	r3, r3, #10
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	4313      	orrs	r3, r2
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f5e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f5ea:	b29a      	uxth	r2, r3
 800f5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5ee:	801a      	strh	r2, [r3, #0]
 800f5f0:	e018      	b.n	800f624 <USB_EPStartXfer+0x210>
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	785b      	ldrb	r3, [r3, #1]
 800f5f6:	2b01      	cmp	r3, #1
 800f5f8:	d114      	bne.n	800f624 <USB_EPStartXfer+0x210>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f600:	b29b      	uxth	r3, r3
 800f602:	461a      	mov	r2, r3
 800f604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f606:	4413      	add	r3, r2
 800f608:	633b      	str	r3, [r7, #48]	@ 0x30
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	781b      	ldrb	r3, [r3, #0]
 800f60e:	00da      	lsls	r2, r3, #3
 800f610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f612:	4413      	add	r3, r2
 800f614:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f61a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f61e:	b29a      	uxth	r2, r3
 800f620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f622:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	895b      	ldrh	r3, [r3, #10]
 800f628:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	6959      	ldr	r1, [r3, #20]
 800f630:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f634:	b29b      	uxth	r3, r3
 800f636:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f000 fde3 	bl	8010206 <USB_WritePMA>
            ep->xfer_buff += len;
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	695a      	ldr	r2, [r3, #20]
 800f644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f648:	441a      	add	r2, r3
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	6a1a      	ldr	r2, [r3, #32]
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	691b      	ldr	r3, [r3, #16]
 800f656:	429a      	cmp	r2, r3
 800f658:	d907      	bls.n	800f66a <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	6a1a      	ldr	r2, [r3, #32]
 800f65e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f662:	1ad2      	subs	r2, r2, r3
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	621a      	str	r2, [r3, #32]
 800f668:	e006      	b.n	800f678 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	6a1b      	ldr	r3, [r3, #32]
 800f66e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	2200      	movs	r2, #0
 800f676:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	785b      	ldrb	r3, [r3, #1]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d16b      	bne.n	800f758 <USB_EPStartXfer+0x344>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	61bb      	str	r3, [r7, #24]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f68a:	b29b      	uxth	r3, r3
 800f68c:	461a      	mov	r2, r3
 800f68e:	69bb      	ldr	r3, [r7, #24]
 800f690:	4413      	add	r3, r2
 800f692:	61bb      	str	r3, [r7, #24]
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	00da      	lsls	r2, r3, #3
 800f69a:	69bb      	ldr	r3, [r7, #24]
 800f69c:	4413      	add	r3, r2
 800f69e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f6a2:	617b      	str	r3, [r7, #20]
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	881b      	ldrh	r3, [r3, #0]
 800f6a8:	b29b      	uxth	r3, r3
 800f6aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f6ae:	b29a      	uxth	r2, r3
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	801a      	strh	r2, [r3, #0]
 800f6b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d10a      	bne.n	800f6d2 <USB_EPStartXfer+0x2be>
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	881b      	ldrh	r3, [r3, #0]
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f6c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f6ca:	b29a      	uxth	r2, r3
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	801a      	strh	r2, [r3, #0]
 800f6d0:	e05d      	b.n	800f78e <USB_EPStartXfer+0x37a>
 800f6d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f6d6:	2b3e      	cmp	r3, #62	@ 0x3e
 800f6d8:	d81c      	bhi.n	800f714 <USB_EPStartXfer+0x300>
 800f6da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f6de:	085b      	lsrs	r3, r3, #1
 800f6e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f6e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f6e8:	f003 0301 	and.w	r3, r3, #1
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d004      	beq.n	800f6fa <USB_EPStartXfer+0x2e6>
 800f6f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	881b      	ldrh	r3, [r3, #0]
 800f6fe:	b29a      	uxth	r2, r3
 800f700:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f704:	b29b      	uxth	r3, r3
 800f706:	029b      	lsls	r3, r3, #10
 800f708:	b29b      	uxth	r3, r3
 800f70a:	4313      	orrs	r3, r2
 800f70c:	b29a      	uxth	r2, r3
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	801a      	strh	r2, [r3, #0]
 800f712:	e03c      	b.n	800f78e <USB_EPStartXfer+0x37a>
 800f714:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f718:	095b      	lsrs	r3, r3, #5
 800f71a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f71e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f722:	f003 031f 	and.w	r3, r3, #31
 800f726:	2b00      	cmp	r3, #0
 800f728:	d104      	bne.n	800f734 <USB_EPStartXfer+0x320>
 800f72a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f72e:	3b01      	subs	r3, #1
 800f730:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	881b      	ldrh	r3, [r3, #0]
 800f738:	b29a      	uxth	r2, r3
 800f73a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f73e:	b29b      	uxth	r3, r3
 800f740:	029b      	lsls	r3, r3, #10
 800f742:	b29b      	uxth	r3, r3
 800f744:	4313      	orrs	r3, r2
 800f746:	b29b      	uxth	r3, r3
 800f748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f74c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f750:	b29a      	uxth	r2, r3
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	801a      	strh	r2, [r3, #0]
 800f756:	e01a      	b.n	800f78e <USB_EPStartXfer+0x37a>
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	785b      	ldrb	r3, [r3, #1]
 800f75c:	2b01      	cmp	r3, #1
 800f75e:	d116      	bne.n	800f78e <USB_EPStartXfer+0x37a>
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	623b      	str	r3, [r7, #32]
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	461a      	mov	r2, r3
 800f76e:	6a3b      	ldr	r3, [r7, #32]
 800f770:	4413      	add	r3, r2
 800f772:	623b      	str	r3, [r7, #32]
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	781b      	ldrb	r3, [r3, #0]
 800f778:	00da      	lsls	r2, r3, #3
 800f77a:	6a3b      	ldr	r3, [r7, #32]
 800f77c:	4413      	add	r3, r2
 800f77e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f782:	61fb      	str	r3, [r7, #28]
 800f784:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f788:	b29a      	uxth	r2, r3
 800f78a:	69fb      	ldr	r3, [r7, #28]
 800f78c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	891b      	ldrh	r3, [r3, #8]
 800f792:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	6959      	ldr	r1, [r3, #20]
 800f79a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f000 fd2e 	bl	8010206 <USB_WritePMA>
 800f7aa:	e2e2      	b.n	800fd72 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	785b      	ldrb	r3, [r3, #1]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d16b      	bne.n	800f88c <USB_EPStartXfer+0x478>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f7be:	b29b      	uxth	r3, r3
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f7c4:	4413      	add	r3, r2
 800f7c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	00da      	lsls	r2, r3, #3
 800f7ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f7d0:	4413      	add	r3, r2
 800f7d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f7d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800f7d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f7da:	881b      	ldrh	r3, [r3, #0]
 800f7dc:	b29b      	uxth	r3, r3
 800f7de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f7e2:	b29a      	uxth	r2, r3
 800f7e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f7e6:	801a      	strh	r2, [r3, #0]
 800f7e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d10a      	bne.n	800f806 <USB_EPStartXfer+0x3f2>
 800f7f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f7f2:	881b      	ldrh	r3, [r3, #0]
 800f7f4:	b29b      	uxth	r3, r3
 800f7f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f7fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f7fe:	b29a      	uxth	r2, r3
 800f800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f802:	801a      	strh	r2, [r3, #0]
 800f804:	e05d      	b.n	800f8c2 <USB_EPStartXfer+0x4ae>
 800f806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f80a:	2b3e      	cmp	r3, #62	@ 0x3e
 800f80c:	d81c      	bhi.n	800f848 <USB_EPStartXfer+0x434>
 800f80e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f812:	085b      	lsrs	r3, r3, #1
 800f814:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f818:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f81c:	f003 0301 	and.w	r3, r3, #1
 800f820:	2b00      	cmp	r3, #0
 800f822:	d004      	beq.n	800f82e <USB_EPStartXfer+0x41a>
 800f824:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f828:	3301      	adds	r3, #1
 800f82a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f82e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f830:	881b      	ldrh	r3, [r3, #0]
 800f832:	b29a      	uxth	r2, r3
 800f834:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f838:	b29b      	uxth	r3, r3
 800f83a:	029b      	lsls	r3, r3, #10
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	4313      	orrs	r3, r2
 800f840:	b29a      	uxth	r2, r3
 800f842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f844:	801a      	strh	r2, [r3, #0]
 800f846:	e03c      	b.n	800f8c2 <USB_EPStartXfer+0x4ae>
 800f848:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f84c:	095b      	lsrs	r3, r3, #5
 800f84e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f856:	f003 031f 	and.w	r3, r3, #31
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d104      	bne.n	800f868 <USB_EPStartXfer+0x454>
 800f85e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f862:	3b01      	subs	r3, #1
 800f864:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f86a:	881b      	ldrh	r3, [r3, #0]
 800f86c:	b29a      	uxth	r2, r3
 800f86e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f872:	b29b      	uxth	r3, r3
 800f874:	029b      	lsls	r3, r3, #10
 800f876:	b29b      	uxth	r3, r3
 800f878:	4313      	orrs	r3, r2
 800f87a:	b29b      	uxth	r3, r3
 800f87c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f884:	b29a      	uxth	r2, r3
 800f886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f888:	801a      	strh	r2, [r3, #0]
 800f88a:	e01a      	b.n	800f8c2 <USB_EPStartXfer+0x4ae>
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	785b      	ldrb	r3, [r3, #1]
 800f890:	2b01      	cmp	r3, #1
 800f892:	d116      	bne.n	800f8c2 <USB_EPStartXfer+0x4ae>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	653b      	str	r3, [r7, #80]	@ 0x50
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f89e:	b29b      	uxth	r3, r3
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f8a4:	4413      	add	r3, r2
 800f8a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	00da      	lsls	r2, r3, #3
 800f8ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f8b0:	4413      	add	r3, r2
 800f8b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f8b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f8b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f8bc:	b29a      	uxth	r2, r3
 800f8be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	891b      	ldrh	r3, [r3, #8]
 800f8c6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	6959      	ldr	r1, [r3, #20]
 800f8ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f000 fc94 	bl	8010206 <USB_WritePMA>
            ep->xfer_buff += len;
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	695a      	ldr	r2, [r3, #20]
 800f8e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f8e6:	441a      	add	r2, r3
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	6a1a      	ldr	r2, [r3, #32]
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	691b      	ldr	r3, [r3, #16]
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d907      	bls.n	800f908 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	6a1a      	ldr	r2, [r3, #32]
 800f8fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f900:	1ad2      	subs	r2, r2, r3
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	621a      	str	r2, [r3, #32]
 800f906:	e006      	b.n	800f916 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	6a1b      	ldr	r3, [r3, #32]
 800f90c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	2200      	movs	r2, #0
 800f914:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	643b      	str	r3, [r7, #64]	@ 0x40
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	785b      	ldrb	r3, [r3, #1]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d16b      	bne.n	800f9fa <USB_EPStartXfer+0x5e6>
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	461a      	mov	r2, r3
 800f930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f932:	4413      	add	r3, r2
 800f934:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	00da      	lsls	r2, r3, #3
 800f93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f93e:	4413      	add	r3, r2
 800f940:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f944:	637b      	str	r3, [r7, #52]	@ 0x34
 800f946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f948:	881b      	ldrh	r3, [r3, #0]
 800f94a:	b29b      	uxth	r3, r3
 800f94c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f950:	b29a      	uxth	r2, r3
 800f952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f954:	801a      	strh	r2, [r3, #0]
 800f956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d10a      	bne.n	800f974 <USB_EPStartXfer+0x560>
 800f95e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f960:	881b      	ldrh	r3, [r3, #0]
 800f962:	b29b      	uxth	r3, r3
 800f964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f96c:	b29a      	uxth	r2, r3
 800f96e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f970:	801a      	strh	r2, [r3, #0]
 800f972:	e05b      	b.n	800fa2c <USB_EPStartXfer+0x618>
 800f974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f978:	2b3e      	cmp	r3, #62	@ 0x3e
 800f97a:	d81c      	bhi.n	800f9b6 <USB_EPStartXfer+0x5a2>
 800f97c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f980:	085b      	lsrs	r3, r3, #1
 800f982:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f98a:	f003 0301 	and.w	r3, r3, #1
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d004      	beq.n	800f99c <USB_EPStartXfer+0x588>
 800f992:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f996:	3301      	adds	r3, #1
 800f998:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f99c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f99e:	881b      	ldrh	r3, [r3, #0]
 800f9a0:	b29a      	uxth	r2, r3
 800f9a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f9a6:	b29b      	uxth	r3, r3
 800f9a8:	029b      	lsls	r3, r3, #10
 800f9aa:	b29b      	uxth	r3, r3
 800f9ac:	4313      	orrs	r3, r2
 800f9ae:	b29a      	uxth	r2, r3
 800f9b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9b2:	801a      	strh	r2, [r3, #0]
 800f9b4:	e03a      	b.n	800fa2c <USB_EPStartXfer+0x618>
 800f9b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f9ba:	095b      	lsrs	r3, r3, #5
 800f9bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f9c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f9c4:	f003 031f 	and.w	r3, r3, #31
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d104      	bne.n	800f9d6 <USB_EPStartXfer+0x5c2>
 800f9cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f9d0:	3b01      	subs	r3, #1
 800f9d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f9d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9d8:	881b      	ldrh	r3, [r3, #0]
 800f9da:	b29a      	uxth	r2, r3
 800f9dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	029b      	lsls	r3, r3, #10
 800f9e4:	b29b      	uxth	r3, r3
 800f9e6:	4313      	orrs	r3, r2
 800f9e8:	b29b      	uxth	r3, r3
 800f9ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f9ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f9f2:	b29a      	uxth	r2, r3
 800f9f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9f6:	801a      	strh	r2, [r3, #0]
 800f9f8:	e018      	b.n	800fa2c <USB_EPStartXfer+0x618>
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	785b      	ldrb	r3, [r3, #1]
 800f9fe:	2b01      	cmp	r3, #1
 800fa00:	d114      	bne.n	800fa2c <USB_EPStartXfer+0x618>
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	461a      	mov	r2, r3
 800fa0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa0e:	4413      	add	r3, r2
 800fa10:	643b      	str	r3, [r7, #64]	@ 0x40
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	781b      	ldrb	r3, [r3, #0]
 800fa16:	00da      	lsls	r2, r3, #3
 800fa18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa1a:	4413      	add	r3, r2
 800fa1c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800fa20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fa22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fa26:	b29a      	uxth	r2, r3
 800fa28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa2a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	895b      	ldrh	r3, [r3, #10]
 800fa30:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	6959      	ldr	r1, [r3, #20]
 800fa38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fa3c:	b29b      	uxth	r3, r3
 800fa3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f000 fbdf 	bl	8010206 <USB_WritePMA>
 800fa48:	e193      	b.n	800fd72 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	6a1b      	ldr	r3, [r3, #32]
 800fa4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800fa52:	687a      	ldr	r2, [r7, #4]
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	009b      	lsls	r3, r3, #2
 800fa5a:	4413      	add	r3, r2
 800fa5c:	881b      	ldrh	r3, [r3, #0]
 800fa5e:	b29b      	uxth	r3, r3
 800fa60:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800fa64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa68:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800fa6c:	687a      	ldr	r2, [r7, #4]
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	009b      	lsls	r3, r3, #2
 800fa74:	441a      	add	r2, r3
 800fa76:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800fa7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fa7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fa82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fa86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa8a:	b29b      	uxth	r3, r3
 800fa8c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fa98:	b29b      	uxth	r3, r3
 800fa9a:	461a      	mov	r2, r3
 800fa9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fa9e:	4413      	add	r3, r2
 800faa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	781b      	ldrb	r3, [r3, #0]
 800faa6:	00da      	lsls	r2, r3, #3
 800faa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800faaa:	4413      	add	r3, r2
 800faac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800fab0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fab6:	b29a      	uxth	r2, r3
 800fab8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800faba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	891b      	ldrh	r3, [r3, #8]
 800fac0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	6959      	ldr	r1, [r3, #20]
 800fac8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800facc:	b29b      	uxth	r3, r3
 800face:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f000 fb97 	bl	8010206 <USB_WritePMA>
 800fad8:	e14b      	b.n	800fd72 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	6a1a      	ldr	r2, [r3, #32]
 800fade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fae2:	1ad2      	subs	r2, r2, r3
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800fae8:	687a      	ldr	r2, [r7, #4]
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	781b      	ldrb	r3, [r3, #0]
 800faee:	009b      	lsls	r3, r3, #2
 800faf0:	4413      	add	r3, r2
 800faf2:	881b      	ldrh	r3, [r3, #0]
 800faf4:	b29b      	uxth	r3, r3
 800faf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	f000 809a 	beq.w	800fc34 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	673b      	str	r3, [r7, #112]	@ 0x70
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	785b      	ldrb	r3, [r3, #1]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d16b      	bne.n	800fbe4 <USB_EPStartXfer+0x7d0>
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fb16:	b29b      	uxth	r3, r3
 800fb18:	461a      	mov	r2, r3
 800fb1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fb1c:	4413      	add	r3, r2
 800fb1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	00da      	lsls	r2, r3, #3
 800fb26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fb28:	4413      	add	r3, r2
 800fb2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800fb2e:	667b      	str	r3, [r7, #100]	@ 0x64
 800fb30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb32:	881b      	ldrh	r3, [r3, #0]
 800fb34:	b29b      	uxth	r3, r3
 800fb36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fb3a:	b29a      	uxth	r2, r3
 800fb3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb3e:	801a      	strh	r2, [r3, #0]
 800fb40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d10a      	bne.n	800fb5e <USB_EPStartXfer+0x74a>
 800fb48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb4a:	881b      	ldrh	r3, [r3, #0]
 800fb4c:	b29b      	uxth	r3, r3
 800fb4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb56:	b29a      	uxth	r2, r3
 800fb58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb5a:	801a      	strh	r2, [r3, #0]
 800fb5c:	e05b      	b.n	800fc16 <USB_EPStartXfer+0x802>
 800fb5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fb62:	2b3e      	cmp	r3, #62	@ 0x3e
 800fb64:	d81c      	bhi.n	800fba0 <USB_EPStartXfer+0x78c>
 800fb66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fb6a:	085b      	lsrs	r3, r3, #1
 800fb6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800fb70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fb74:	f003 0301 	and.w	r3, r3, #1
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d004      	beq.n	800fb86 <USB_EPStartXfer+0x772>
 800fb7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fb80:	3301      	adds	r3, #1
 800fb82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800fb86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb88:	881b      	ldrh	r3, [r3, #0]
 800fb8a:	b29a      	uxth	r2, r3
 800fb8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fb90:	b29b      	uxth	r3, r3
 800fb92:	029b      	lsls	r3, r3, #10
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	4313      	orrs	r3, r2
 800fb98:	b29a      	uxth	r2, r3
 800fb9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb9c:	801a      	strh	r2, [r3, #0]
 800fb9e:	e03a      	b.n	800fc16 <USB_EPStartXfer+0x802>
 800fba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fba4:	095b      	lsrs	r3, r3, #5
 800fba6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800fbaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fbae:	f003 031f 	and.w	r3, r3, #31
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d104      	bne.n	800fbc0 <USB_EPStartXfer+0x7ac>
 800fbb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fbba:	3b01      	subs	r3, #1
 800fbbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800fbc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fbc2:	881b      	ldrh	r3, [r3, #0]
 800fbc4:	b29a      	uxth	r2, r3
 800fbc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fbca:	b29b      	uxth	r3, r3
 800fbcc:	029b      	lsls	r3, r3, #10
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	4313      	orrs	r3, r2
 800fbd2:	b29b      	uxth	r3, r3
 800fbd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fbd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fbdc:	b29a      	uxth	r2, r3
 800fbde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fbe0:	801a      	strh	r2, [r3, #0]
 800fbe2:	e018      	b.n	800fc16 <USB_EPStartXfer+0x802>
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	785b      	ldrb	r3, [r3, #1]
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	d114      	bne.n	800fc16 <USB_EPStartXfer+0x802>
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fbf2:	b29b      	uxth	r3, r3
 800fbf4:	461a      	mov	r2, r3
 800fbf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fbf8:	4413      	add	r3, r2
 800fbfa:	673b      	str	r3, [r7, #112]	@ 0x70
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	781b      	ldrb	r3, [r3, #0]
 800fc00:	00da      	lsls	r2, r3, #3
 800fc02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fc04:	4413      	add	r3, r2
 800fc06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800fc0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800fc0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fc10:	b29a      	uxth	r2, r3
 800fc12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fc14:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	895b      	ldrh	r3, [r3, #10]
 800fc1a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	6959      	ldr	r1, [r3, #20]
 800fc22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fc26:	b29b      	uxth	r3, r3
 800fc28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f000 faea 	bl	8010206 <USB_WritePMA>
 800fc32:	e09e      	b.n	800fd72 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	785b      	ldrb	r3, [r3, #1]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d16b      	bne.n	800fd14 <USB_EPStartXfer+0x900>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fc46:	b29b      	uxth	r3, r3
 800fc48:	461a      	mov	r2, r3
 800fc4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fc4c:	4413      	add	r3, r2
 800fc4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	00da      	lsls	r2, r3, #3
 800fc56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fc58:	4413      	add	r3, r2
 800fc5a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800fc5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800fc60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fc62:	881b      	ldrh	r3, [r3, #0]
 800fc64:	b29b      	uxth	r3, r3
 800fc66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fc6a:	b29a      	uxth	r2, r3
 800fc6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fc6e:	801a      	strh	r2, [r3, #0]
 800fc70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d10a      	bne.n	800fc8e <USB_EPStartXfer+0x87a>
 800fc78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fc7a:	881b      	ldrh	r3, [r3, #0]
 800fc7c:	b29b      	uxth	r3, r3
 800fc7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fc82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fc86:	b29a      	uxth	r2, r3
 800fc88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fc8a:	801a      	strh	r2, [r3, #0]
 800fc8c:	e063      	b.n	800fd56 <USB_EPStartXfer+0x942>
 800fc8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fc92:	2b3e      	cmp	r3, #62	@ 0x3e
 800fc94:	d81c      	bhi.n	800fcd0 <USB_EPStartXfer+0x8bc>
 800fc96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fc9a:	085b      	lsrs	r3, r3, #1
 800fc9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fca4:	f003 0301 	and.w	r3, r3, #1
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d004      	beq.n	800fcb6 <USB_EPStartXfer+0x8a2>
 800fcac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fcb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fcb8:	881b      	ldrh	r3, [r3, #0]
 800fcba:	b29a      	uxth	r2, r3
 800fcbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fcc0:	b29b      	uxth	r3, r3
 800fcc2:	029b      	lsls	r3, r3, #10
 800fcc4:	b29b      	uxth	r3, r3
 800fcc6:	4313      	orrs	r3, r2
 800fcc8:	b29a      	uxth	r2, r3
 800fcca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fccc:	801a      	strh	r2, [r3, #0]
 800fcce:	e042      	b.n	800fd56 <USB_EPStartXfer+0x942>
 800fcd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fcd4:	095b      	lsrs	r3, r3, #5
 800fcd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fcda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fcde:	f003 031f 	and.w	r3, r3, #31
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d104      	bne.n	800fcf0 <USB_EPStartXfer+0x8dc>
 800fce6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fcea:	3b01      	subs	r3, #1
 800fcec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fcf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fcf2:	881b      	ldrh	r3, [r3, #0]
 800fcf4:	b29a      	uxth	r2, r3
 800fcf6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fcfa:	b29b      	uxth	r3, r3
 800fcfc:	029b      	lsls	r3, r3, #10
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	4313      	orrs	r3, r2
 800fd02:	b29b      	uxth	r3, r3
 800fd04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd0c:	b29a      	uxth	r2, r3
 800fd0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fd10:	801a      	strh	r2, [r3, #0]
 800fd12:	e020      	b.n	800fd56 <USB_EPStartXfer+0x942>
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	785b      	ldrb	r3, [r3, #1]
 800fd18:	2b01      	cmp	r3, #1
 800fd1a:	d11c      	bne.n	800fd56 <USB_EPStartXfer+0x942>
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fd28:	b29b      	uxth	r3, r3
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fd30:	4413      	add	r3, r2
 800fd32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	00da      	lsls	r2, r3, #3
 800fd3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fd40:	4413      	add	r3, r2
 800fd42:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800fd46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fd4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fd4e:	b29a      	uxth	r2, r3
 800fd50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fd54:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	891b      	ldrh	r3, [r3, #8]
 800fd5a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	6959      	ldr	r1, [r3, #20]
 800fd62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f000 fa4a 	bl	8010206 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800fd72:	687a      	ldr	r2, [r7, #4]
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	781b      	ldrb	r3, [r3, #0]
 800fd78:	009b      	lsls	r3, r3, #2
 800fd7a:	4413      	add	r3, r2
 800fd7c:	881b      	ldrh	r3, [r3, #0]
 800fd7e:	b29b      	uxth	r3, r3
 800fd80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fd84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd88:	817b      	strh	r3, [r7, #10]
 800fd8a:	897b      	ldrh	r3, [r7, #10]
 800fd8c:	f083 0310 	eor.w	r3, r3, #16
 800fd90:	817b      	strh	r3, [r7, #10]
 800fd92:	897b      	ldrh	r3, [r7, #10]
 800fd94:	f083 0320 	eor.w	r3, r3, #32
 800fd98:	817b      	strh	r3, [r7, #10]
 800fd9a:	687a      	ldr	r2, [r7, #4]
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	009b      	lsls	r3, r3, #2
 800fda2:	441a      	add	r2, r3
 800fda4:	897b      	ldrh	r3, [r7, #10]
 800fda6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fdaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fdae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fdb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fdb6:	b29b      	uxth	r3, r3
 800fdb8:	8013      	strh	r3, [r2, #0]
 800fdba:	e0d5      	b.n	800ff68 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	7b1b      	ldrb	r3, [r3, #12]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d156      	bne.n	800fe72 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	699b      	ldr	r3, [r3, #24]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d122      	bne.n	800fe12 <USB_EPStartXfer+0x9fe>
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	78db      	ldrb	r3, [r3, #3]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d11e      	bne.n	800fe12 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800fdd4:	687a      	ldr	r2, [r7, #4]
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	781b      	ldrb	r3, [r3, #0]
 800fdda:	009b      	lsls	r3, r3, #2
 800fddc:	4413      	add	r3, r2
 800fdde:	881b      	ldrh	r3, [r3, #0]
 800fde0:	b29b      	uxth	r3, r3
 800fde2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fde6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fdea:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800fdee:	687a      	ldr	r2, [r7, #4]
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	441a      	add	r2, r3
 800fdf8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800fdfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fe00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fe04:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800fe08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	8013      	strh	r3, [r2, #0]
 800fe10:	e01d      	b.n	800fe4e <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800fe12:	687a      	ldr	r2, [r7, #4]
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	781b      	ldrb	r3, [r3, #0]
 800fe18:	009b      	lsls	r3, r3, #2
 800fe1a:	4413      	add	r3, r2
 800fe1c:	881b      	ldrh	r3, [r3, #0]
 800fe1e:	b29b      	uxth	r3, r3
 800fe20:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800fe24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe28:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800fe2c:	687a      	ldr	r2, [r7, #4]
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	009b      	lsls	r3, r3, #2
 800fe34:	441a      	add	r2, r3
 800fe36:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800fe3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fe3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fe42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fe46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe4a:	b29b      	uxth	r3, r3
 800fe4c:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	699a      	ldr	r2, [r3, #24]
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	691b      	ldr	r3, [r3, #16]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d907      	bls.n	800fe6a <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	699a      	ldr	r2, [r3, #24]
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	691b      	ldr	r3, [r3, #16]
 800fe62:	1ad2      	subs	r2, r2, r3
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	619a      	str	r2, [r3, #24]
 800fe68:	e054      	b.n	800ff14 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	619a      	str	r2, [r3, #24]
 800fe70:	e050      	b.n	800ff14 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	78db      	ldrb	r3, [r3, #3]
 800fe76:	2b02      	cmp	r3, #2
 800fe78:	d142      	bne.n	800ff00 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	69db      	ldr	r3, [r3, #28]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d048      	beq.n	800ff14 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800fe82:	687a      	ldr	r2, [r7, #4]
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	009b      	lsls	r3, r3, #2
 800fe8a:	4413      	add	r3, r2
 800fe8c:	881b      	ldrh	r3, [r3, #0]
 800fe8e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800fe92:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800fe96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d005      	beq.n	800feaa <USB_EPStartXfer+0xa96>
 800fe9e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800fea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d10b      	bne.n	800fec2 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800feaa:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800feae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d12e      	bne.n	800ff14 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800feb6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800feba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d128      	bne.n	800ff14 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800fec2:	687a      	ldr	r2, [r7, #4]
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	781b      	ldrb	r3, [r3, #0]
 800fec8:	009b      	lsls	r3, r3, #2
 800feca:	4413      	add	r3, r2
 800fecc:	881b      	ldrh	r3, [r3, #0]
 800fece:	b29b      	uxth	r3, r3
 800fed0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fed8:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800fedc:	687a      	ldr	r2, [r7, #4]
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	009b      	lsls	r3, r3, #2
 800fee4:	441a      	add	r2, r3
 800fee6:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800feea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800feee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fef6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800fefa:	b29b      	uxth	r3, r3
 800fefc:	8013      	strh	r3, [r2, #0]
 800fefe:	e009      	b.n	800ff14 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	78db      	ldrb	r3, [r3, #3]
 800ff04:	2b01      	cmp	r3, #1
 800ff06:	d103      	bne.n	800ff10 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	619a      	str	r2, [r3, #24]
 800ff0e:	e001      	b.n	800ff14 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800ff10:	2301      	movs	r3, #1
 800ff12:	e02a      	b.n	800ff6a <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ff14:	687a      	ldr	r2, [r7, #4]
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	781b      	ldrb	r3, [r3, #0]
 800ff1a:	009b      	lsls	r3, r3, #2
 800ff1c:	4413      	add	r3, r2
 800ff1e:	881b      	ldrh	r3, [r3, #0]
 800ff20:	b29b      	uxth	r3, r3
 800ff22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ff26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ff2a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ff2e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ff32:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ff36:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ff3a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ff3e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ff42:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ff46:	687a      	ldr	r2, [r7, #4]
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	781b      	ldrb	r3, [r3, #0]
 800ff4c:	009b      	lsls	r3, r3, #2
 800ff4e:	441a      	add	r2, r3
 800ff50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ff54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ff58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ff5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ff60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff64:	b29b      	uxth	r3, r3
 800ff66:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ff68:	2300      	movs	r3, #0
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	37b0      	adds	r7, #176	@ 0xb0
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}

0800ff72 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ff72:	b480      	push	{r7}
 800ff74:	b085      	sub	sp, #20
 800ff76:	af00      	add	r7, sp, #0
 800ff78:	6078      	str	r0, [r7, #4]
 800ff7a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	785b      	ldrb	r3, [r3, #1]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d020      	beq.n	800ffc6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ff84:	687a      	ldr	r2, [r7, #4]
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	781b      	ldrb	r3, [r3, #0]
 800ff8a:	009b      	lsls	r3, r3, #2
 800ff8c:	4413      	add	r3, r2
 800ff8e:	881b      	ldrh	r3, [r3, #0]
 800ff90:	b29b      	uxth	r3, r3
 800ff92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ff96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ff9a:	81bb      	strh	r3, [r7, #12]
 800ff9c:	89bb      	ldrh	r3, [r7, #12]
 800ff9e:	f083 0310 	eor.w	r3, r3, #16
 800ffa2:	81bb      	strh	r3, [r7, #12]
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	781b      	ldrb	r3, [r3, #0]
 800ffaa:	009b      	lsls	r3, r3, #2
 800ffac:	441a      	add	r2, r3
 800ffae:	89bb      	ldrh	r3, [r7, #12]
 800ffb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ffb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ffb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ffbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ffc0:	b29b      	uxth	r3, r3
 800ffc2:	8013      	strh	r3, [r2, #0]
 800ffc4:	e01f      	b.n	8010006 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ffc6:	687a      	ldr	r2, [r7, #4]
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	781b      	ldrb	r3, [r3, #0]
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	4413      	add	r3, r2
 800ffd0:	881b      	ldrh	r3, [r3, #0]
 800ffd2:	b29b      	uxth	r3, r3
 800ffd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ffd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ffdc:	81fb      	strh	r3, [r7, #14]
 800ffde:	89fb      	ldrh	r3, [r7, #14]
 800ffe0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ffe4:	81fb      	strh	r3, [r7, #14]
 800ffe6:	687a      	ldr	r2, [r7, #4]
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	781b      	ldrb	r3, [r3, #0]
 800ffec:	009b      	lsls	r3, r3, #2
 800ffee:	441a      	add	r2, r3
 800fff0:	89fb      	ldrh	r3, [r7, #14]
 800fff2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fff6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010002:	b29b      	uxth	r3, r3
 8010004:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8010006:	2300      	movs	r3, #0
}
 8010008:	4618      	mov	r0, r3
 801000a:	3714      	adds	r7, #20
 801000c:	46bd      	mov	sp, r7
 801000e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010012:	4770      	bx	lr

08010014 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010014:	b480      	push	{r7}
 8010016:	b087      	sub	sp, #28
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	785b      	ldrb	r3, [r3, #1]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d04c      	beq.n	80100c0 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010026:	687a      	ldr	r2, [r7, #4]
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	009b      	lsls	r3, r3, #2
 801002e:	4413      	add	r3, r2
 8010030:	881b      	ldrh	r3, [r3, #0]
 8010032:	823b      	strh	r3, [r7, #16]
 8010034:	8a3b      	ldrh	r3, [r7, #16]
 8010036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801003a:	2b00      	cmp	r3, #0
 801003c:	d01b      	beq.n	8010076 <USB_EPClearStall+0x62>
 801003e:	687a      	ldr	r2, [r7, #4]
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	009b      	lsls	r3, r3, #2
 8010046:	4413      	add	r3, r2
 8010048:	881b      	ldrh	r3, [r3, #0]
 801004a:	b29b      	uxth	r3, r3
 801004c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010054:	81fb      	strh	r3, [r7, #14]
 8010056:	687a      	ldr	r2, [r7, #4]
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	009b      	lsls	r3, r3, #2
 801005e:	441a      	add	r2, r3
 8010060:	89fb      	ldrh	r3, [r7, #14]
 8010062:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010066:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801006a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801006e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010072:	b29b      	uxth	r3, r3
 8010074:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	78db      	ldrb	r3, [r3, #3]
 801007a:	2b01      	cmp	r3, #1
 801007c:	d06c      	beq.n	8010158 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801007e:	687a      	ldr	r2, [r7, #4]
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	781b      	ldrb	r3, [r3, #0]
 8010084:	009b      	lsls	r3, r3, #2
 8010086:	4413      	add	r3, r2
 8010088:	881b      	ldrh	r3, [r3, #0]
 801008a:	b29b      	uxth	r3, r3
 801008c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010094:	81bb      	strh	r3, [r7, #12]
 8010096:	89bb      	ldrh	r3, [r7, #12]
 8010098:	f083 0320 	eor.w	r3, r3, #32
 801009c:	81bb      	strh	r3, [r7, #12]
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	781b      	ldrb	r3, [r3, #0]
 80100a4:	009b      	lsls	r3, r3, #2
 80100a6:	441a      	add	r2, r3
 80100a8:	89bb      	ldrh	r3, [r7, #12]
 80100aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80100ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80100b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80100b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80100ba:	b29b      	uxth	r3, r3
 80100bc:	8013      	strh	r3, [r2, #0]
 80100be:	e04b      	b.n	8010158 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80100c0:	687a      	ldr	r2, [r7, #4]
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	781b      	ldrb	r3, [r3, #0]
 80100c6:	009b      	lsls	r3, r3, #2
 80100c8:	4413      	add	r3, r2
 80100ca:	881b      	ldrh	r3, [r3, #0]
 80100cc:	82fb      	strh	r3, [r7, #22]
 80100ce:	8afb      	ldrh	r3, [r7, #22]
 80100d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d01b      	beq.n	8010110 <USB_EPClearStall+0xfc>
 80100d8:	687a      	ldr	r2, [r7, #4]
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	781b      	ldrb	r3, [r3, #0]
 80100de:	009b      	lsls	r3, r3, #2
 80100e0:	4413      	add	r3, r2
 80100e2:	881b      	ldrh	r3, [r3, #0]
 80100e4:	b29b      	uxth	r3, r3
 80100e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80100ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80100ee:	82bb      	strh	r3, [r7, #20]
 80100f0:	687a      	ldr	r2, [r7, #4]
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	781b      	ldrb	r3, [r3, #0]
 80100f6:	009b      	lsls	r3, r3, #2
 80100f8:	441a      	add	r2, r3
 80100fa:	8abb      	ldrh	r3, [r7, #20]
 80100fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010100:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010104:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801010c:	b29b      	uxth	r3, r3
 801010e:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010110:	687a      	ldr	r2, [r7, #4]
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	781b      	ldrb	r3, [r3, #0]
 8010116:	009b      	lsls	r3, r3, #2
 8010118:	4413      	add	r3, r2
 801011a:	881b      	ldrh	r3, [r3, #0]
 801011c:	b29b      	uxth	r3, r3
 801011e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010126:	827b      	strh	r3, [r7, #18]
 8010128:	8a7b      	ldrh	r3, [r7, #18]
 801012a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801012e:	827b      	strh	r3, [r7, #18]
 8010130:	8a7b      	ldrh	r3, [r7, #18]
 8010132:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010136:	827b      	strh	r3, [r7, #18]
 8010138:	687a      	ldr	r2, [r7, #4]
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	781b      	ldrb	r3, [r3, #0]
 801013e:	009b      	lsls	r3, r3, #2
 8010140:	441a      	add	r2, r3
 8010142:	8a7b      	ldrh	r3, [r7, #18]
 8010144:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010148:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801014c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010150:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010154:	b29b      	uxth	r3, r3
 8010156:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8010158:	2300      	movs	r3, #0
}
 801015a:	4618      	mov	r0, r3
 801015c:	371c      	adds	r7, #28
 801015e:	46bd      	mov	sp, r7
 8010160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010164:	4770      	bx	lr

08010166 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8010166:	b480      	push	{r7}
 8010168:	b083      	sub	sp, #12
 801016a:	af00      	add	r7, sp, #0
 801016c:	6078      	str	r0, [r7, #4]
 801016e:	460b      	mov	r3, r1
 8010170:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8010172:	78fb      	ldrb	r3, [r7, #3]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d103      	bne.n	8010180 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2280      	movs	r2, #128	@ 0x80
 801017c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8010180:	2300      	movs	r3, #0
}
 8010182:	4618      	mov	r0, r3
 8010184:	370c      	adds	r7, #12
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr

0801018e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801018e:	b480      	push	{r7}
 8010190:	b083      	sub	sp, #12
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801019c:	b29b      	uxth	r3, r3
 801019e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80101a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80101a6:	b29a      	uxth	r2, r3
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80101ae:	2300      	movs	r3, #0
}
 80101b0:	4618      	mov	r0, r3
 80101b2:	370c      	adds	r7, #12
 80101b4:	46bd      	mov	sp, r7
 80101b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ba:	4770      	bx	lr

080101bc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80101bc:	b480      	push	{r7}
 80101be:	b083      	sub	sp, #12
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80101ca:	b29b      	uxth	r3, r3
 80101cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80101d0:	b29a      	uxth	r2, r3
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80101d8:	2300      	movs	r3, #0
}
 80101da:	4618      	mov	r0, r3
 80101dc:	370c      	adds	r7, #12
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr

080101e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80101e6:	b480      	push	{r7}
 80101e8:	b085      	sub	sp, #20
 80101ea:	af00      	add	r7, sp, #0
 80101ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80101f4:	b29b      	uxth	r3, r3
 80101f6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80101f8:	68fb      	ldr	r3, [r7, #12]
}
 80101fa:	4618      	mov	r0, r3
 80101fc:	3714      	adds	r7, #20
 80101fe:	46bd      	mov	sp, r7
 8010200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010204:	4770      	bx	lr

08010206 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010206:	b480      	push	{r7}
 8010208:	b08b      	sub	sp, #44	@ 0x2c
 801020a:	af00      	add	r7, sp, #0
 801020c:	60f8      	str	r0, [r7, #12]
 801020e:	60b9      	str	r1, [r7, #8]
 8010210:	4611      	mov	r1, r2
 8010212:	461a      	mov	r2, r3
 8010214:	460b      	mov	r3, r1
 8010216:	80fb      	strh	r3, [r7, #6]
 8010218:	4613      	mov	r3, r2
 801021a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801021c:	88bb      	ldrh	r3, [r7, #4]
 801021e:	3301      	adds	r3, #1
 8010220:	085b      	lsrs	r3, r3, #1
 8010222:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801022c:	88fa      	ldrh	r2, [r7, #6]
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	4413      	add	r3, r2
 8010232:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010236:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8010238:	69bb      	ldr	r3, [r7, #24]
 801023a:	627b      	str	r3, [r7, #36]	@ 0x24
 801023c:	e01b      	b.n	8010276 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 801023e:	69fb      	ldr	r3, [r7, #28]
 8010240:	781b      	ldrb	r3, [r3, #0]
 8010242:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8010244:	69fb      	ldr	r3, [r7, #28]
 8010246:	3301      	adds	r3, #1
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	021b      	lsls	r3, r3, #8
 801024c:	b21a      	sxth	r2, r3
 801024e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010252:	4313      	orrs	r3, r2
 8010254:	b21b      	sxth	r3, r3
 8010256:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8010258:	6a3b      	ldr	r3, [r7, #32]
 801025a:	8a7a      	ldrh	r2, [r7, #18]
 801025c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801025e:	6a3b      	ldr	r3, [r7, #32]
 8010260:	3302      	adds	r3, #2
 8010262:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	3301      	adds	r3, #1
 8010268:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801026a:	69fb      	ldr	r3, [r7, #28]
 801026c:	3301      	adds	r3, #1
 801026e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8010270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010272:	3b01      	subs	r3, #1
 8010274:	627b      	str	r3, [r7, #36]	@ 0x24
 8010276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010278:	2b00      	cmp	r3, #0
 801027a:	d1e0      	bne.n	801023e <USB_WritePMA+0x38>
  }
}
 801027c:	bf00      	nop
 801027e:	bf00      	nop
 8010280:	372c      	adds	r7, #44	@ 0x2c
 8010282:	46bd      	mov	sp, r7
 8010284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010288:	4770      	bx	lr

0801028a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801028a:	b480      	push	{r7}
 801028c:	b08b      	sub	sp, #44	@ 0x2c
 801028e:	af00      	add	r7, sp, #0
 8010290:	60f8      	str	r0, [r7, #12]
 8010292:	60b9      	str	r1, [r7, #8]
 8010294:	4611      	mov	r1, r2
 8010296:	461a      	mov	r2, r3
 8010298:	460b      	mov	r3, r1
 801029a:	80fb      	strh	r3, [r7, #6]
 801029c:	4613      	mov	r3, r2
 801029e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80102a0:	88bb      	ldrh	r3, [r7, #4]
 80102a2:	085b      	lsrs	r3, r3, #1
 80102a4:	b29b      	uxth	r3, r3
 80102a6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80102b0:	88fa      	ldrh	r2, [r7, #6]
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	4413      	add	r3, r2
 80102b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80102ba:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80102bc:	69bb      	ldr	r3, [r7, #24]
 80102be:	627b      	str	r3, [r7, #36]	@ 0x24
 80102c0:	e018      	b.n	80102f4 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80102c2:	6a3b      	ldr	r3, [r7, #32]
 80102c4:	881b      	ldrh	r3, [r3, #0]
 80102c6:	b29b      	uxth	r3, r3
 80102c8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80102ca:	6a3b      	ldr	r3, [r7, #32]
 80102cc:	3302      	adds	r3, #2
 80102ce:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	b2da      	uxtb	r2, r3
 80102d4:	69fb      	ldr	r3, [r7, #28]
 80102d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80102d8:	69fb      	ldr	r3, [r7, #28]
 80102da:	3301      	adds	r3, #1
 80102dc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	0a1b      	lsrs	r3, r3, #8
 80102e2:	b2da      	uxtb	r2, r3
 80102e4:	69fb      	ldr	r3, [r7, #28]
 80102e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80102e8:	69fb      	ldr	r3, [r7, #28]
 80102ea:	3301      	adds	r3, #1
 80102ec:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80102ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102f0:	3b01      	subs	r3, #1
 80102f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80102f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d1e3      	bne.n	80102c2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80102fa:	88bb      	ldrh	r3, [r7, #4]
 80102fc:	f003 0301 	and.w	r3, r3, #1
 8010300:	b29b      	uxth	r3, r3
 8010302:	2b00      	cmp	r3, #0
 8010304:	d007      	beq.n	8010316 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8010306:	6a3b      	ldr	r3, [r7, #32]
 8010308:	881b      	ldrh	r3, [r3, #0]
 801030a:	b29b      	uxth	r3, r3
 801030c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801030e:	693b      	ldr	r3, [r7, #16]
 8010310:	b2da      	uxtb	r2, r3
 8010312:	69fb      	ldr	r3, [r7, #28]
 8010314:	701a      	strb	r2, [r3, #0]
  }
}
 8010316:	bf00      	nop
 8010318:	372c      	adds	r7, #44	@ 0x2c
 801031a:	46bd      	mov	sp, r7
 801031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010320:	4770      	bx	lr
	...

08010324 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8010324:	b480      	push	{r7}
 8010326:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8010328:	f3bf 8f4f 	dsb	sy
}
 801032c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801032e:	4b06      	ldr	r3, [pc, #24]	@ (8010348 <__NVIC_SystemReset+0x24>)
 8010330:	68db      	ldr	r3, [r3, #12]
 8010332:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8010336:	4904      	ldr	r1, [pc, #16]	@ (8010348 <__NVIC_SystemReset+0x24>)
 8010338:	4b04      	ldr	r3, [pc, #16]	@ (801034c <__NVIC_SystemReset+0x28>)
 801033a:	4313      	orrs	r3, r2
 801033c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801033e:	f3bf 8f4f 	dsb	sy
}
 8010342:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8010344:	bf00      	nop
 8010346:	e7fd      	b.n	8010344 <__NVIC_SystemReset+0x20>
 8010348:	e000ed00 	.word	0xe000ed00
 801034c:	05fa0004 	.word	0x05fa0004

08010350 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b084      	sub	sp, #16
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	460b      	mov	r3, r1
 801035a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 801035c:	f240 401c 	movw	r0, #1052	@ 0x41c
 8010360:	f002 fbfc 	bl	8012b5c <USBD_static_malloc>
 8010364:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d105      	bne.n	8010378 <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2200      	movs	r2, #0
 8010370:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8010374:	2302      	movs	r3, #2
 8010376:	e03f      	b.n	80103f8 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	68fa      	ldr	r2, [r7, #12]
 801037c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	2200      	movs	r2, #0
 8010384:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 801038e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	2200      	movs	r2, #0
 8010396:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	2200      	movs	r2, #0
 801039e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	2200      	movs	r2, #0
 80103a6:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	2202      	movs	r2, #2
 80103ae:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2200      	movs	r2, #0
 80103b6:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2200      	movs	r2, #0
 80103be:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	2200      	movs	r2, #0
 80103c6:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	2200      	movs	r2, #0
 80103ce:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	2202      	movs	r2, #2
 80103d6:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	2200      	movs	r2, #0
 80103de:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80103e8:	685b      	ldr	r3, [r3, #4]
 80103ea:	4798      	blx	r3
 80103ec:	4603      	mov	r3, r0
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d001      	beq.n	80103f6 <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 80103f2:	2303      	movs	r3, #3
 80103f4:	e000      	b.n	80103f8 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 80103f6:	2300      	movs	r3, #0
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3710      	adds	r7, #16
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b084      	sub	sp, #16
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	460b      	mov	r3, r1
 801040a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010412:	2b00      	cmp	r3, #0
 8010414:	d101      	bne.n	801041a <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 8010416:	2302      	movs	r3, #2
 8010418:	e027      	b.n	801046a <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010420:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	2200      	movs	r2, #0
 8010426:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2200      	movs	r2, #0
 801042e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	2202      	movs	r2, #2
 8010436:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	2200      	movs	r2, #0
 801043e:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2202      	movs	r2, #2
 8010446:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8010450:	689b      	ldr	r3, [r3, #8]
 8010452:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801045a:	4618      	mov	r0, r3
 801045c:	f002 fb8c 	bl	8012b78 <USBD_static_free>
  pdev->pClassData = NULL;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2200      	movs	r2, #0
 8010464:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8010468:	2300      	movs	r3, #0
}
 801046a:	4618      	mov	r0, r3
 801046c:	3710      	adds	r7, #16
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}
	...

08010474 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b088      	sub	sp, #32
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010484:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8010486:	2300      	movs	r3, #0
 8010488:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 801048a:	2300      	movs	r3, #0
 801048c:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 801048e:	2300      	movs	r3, #0
 8010490:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 8010492:	2300      	movs	r3, #0
 8010494:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d101      	bne.n	80104a0 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 801049c:	2303      	movs	r3, #3
 801049e:	e0d5      	b.n	801064c <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d03e      	beq.n	801052a <USBD_DFU_Setup+0xb6>
 80104ac:	2b20      	cmp	r3, #32
 80104ae:	f040 80c5 	bne.w	801063c <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	785b      	ldrb	r3, [r3, #1]
 80104b6:	2b06      	cmp	r3, #6
 80104b8:	d82f      	bhi.n	801051a <USBD_DFU_Setup+0xa6>
 80104ba:	a201      	add	r2, pc, #4	@ (adr r2, 80104c0 <USBD_DFU_Setup+0x4c>)
 80104bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104c0:	08010511 	.word	0x08010511
 80104c4:	080104dd 	.word	0x080104dd
 80104c8:	080104e7 	.word	0x080104e7
 80104cc:	080104f1 	.word	0x080104f1
 80104d0:	080104f9 	.word	0x080104f9
 80104d4:	08010501 	.word	0x08010501
 80104d8:	08010509 	.word	0x08010509
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 80104dc:	6839      	ldr	r1, [r7, #0]
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f000 fa6c 	bl	80109bc <DFU_Download>
          break;
 80104e4:	e020      	b.n	8010528 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 80104e6:	6839      	ldr	r1, [r7, #0]
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f000 fad3 	bl	8010a94 <DFU_Upload>
          break;
 80104ee:	e01b      	b.n	8010528 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f000 fba9 	bl	8010c48 <DFU_GetStatus>
          break;
 80104f6:	e017      	b.n	8010528 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f000 fc5b 	bl	8010db4 <DFU_ClearStatus>
          break;
 80104fe:	e013      	b.n	8010528 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f000 fcab 	bl	8010e5c <DFU_GetState>
          break;
 8010506:	e00f      	b.n	8010528 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f000 fcbf 	bl	8010e8c <DFU_Abort>
          break;
 801050e:	e00b      	b.n	8010528 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8010510:	6839      	ldr	r1, [r7, #0]
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f000 f9ee 	bl	80108f4 <DFU_Detach>
          break;
 8010518:	e006      	b.n	8010528 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 801051a:	6839      	ldr	r1, [r7, #0]
 801051c:	6878      	ldr	r0, [r7, #4]
 801051e:	f001 fdb1 	bl	8012084 <USBD_CtlError>
          ret = USBD_FAIL;
 8010522:	2303      	movs	r3, #3
 8010524:	77fb      	strb	r3, [r7, #31]
          break;
 8010526:	bf00      	nop
      }
      break;
 8010528:	e08f      	b.n	801064a <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	785b      	ldrb	r3, [r3, #1]
 801052e:	2b0b      	cmp	r3, #11
 8010530:	d87b      	bhi.n	801062a <USBD_DFU_Setup+0x1b6>
 8010532:	a201      	add	r2, pc, #4	@ (adr r2, 8010538 <USBD_DFU_Setup+0xc4>)
 8010534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010538:	08010569 	.word	0x08010569
 801053c:	08010639 	.word	0x08010639
 8010540:	0801062b 	.word	0x0801062b
 8010544:	0801062b 	.word	0x0801062b
 8010548:	0801062b 	.word	0x0801062b
 801054c:	0801062b 	.word	0x0801062b
 8010550:	08010593 	.word	0x08010593
 8010554:	0801062b 	.word	0x0801062b
 8010558:	0801062b 	.word	0x0801062b
 801055c:	0801062b 	.word	0x0801062b
 8010560:	080105bd 	.word	0x080105bd
 8010564:	080105e9 	.word	0x080105e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801056e:	b2db      	uxtb	r3, r3
 8010570:	2b03      	cmp	r3, #3
 8010572:	d107      	bne.n	8010584 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010574:	f107 030e 	add.w	r3, r7, #14
 8010578:	2202      	movs	r2, #2
 801057a:	4619      	mov	r1, r3
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f001 fdf2 	bl	8012166 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010582:	e05a      	b.n	801063a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8010584:	6839      	ldr	r1, [r7, #0]
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f001 fd7c 	bl	8012084 <USBD_CtlError>
            ret = USBD_FAIL;
 801058c:	2303      	movs	r3, #3
 801058e:	77fb      	strb	r3, [r7, #31]
          break;
 8010590:	e053      	b.n	801063a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	885b      	ldrh	r3, [r3, #2]
 8010596:	0a1b      	lsrs	r3, r3, #8
 8010598:	b29b      	uxth	r3, r3
 801059a:	2b21      	cmp	r3, #33	@ 0x21
 801059c:	d107      	bne.n	80105ae <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 801059e:	4b2d      	ldr	r3, [pc, #180]	@ (8010654 <USBD_DFU_Setup+0x1e0>)
 80105a0:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	88db      	ldrh	r3, [r3, #6]
 80105a6:	2b09      	cmp	r3, #9
 80105a8:	bf28      	it	cs
 80105aa:	2309      	movcs	r3, #9
 80105ac:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80105ae:	8afb      	ldrh	r3, [r7, #22]
 80105b0:	461a      	mov	r2, r3
 80105b2:	69b9      	ldr	r1, [r7, #24]
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f001 fdd6 	bl	8012166 <USBD_CtlSendData>
          break;
 80105ba:	e03e      	b.n	801063a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80105c2:	b2db      	uxtb	r3, r3
 80105c4:	2b03      	cmp	r3, #3
 80105c6:	d108      	bne.n	80105da <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80105ce:	2201      	movs	r2, #1
 80105d0:	4619      	mov	r1, r3
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f001 fdc7 	bl	8012166 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80105d8:	e02f      	b.n	801063a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 80105da:	6839      	ldr	r1, [r7, #0]
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f001 fd51 	bl	8012084 <USBD_CtlError>
            ret = USBD_FAIL;
 80105e2:	2303      	movs	r3, #3
 80105e4:	77fb      	strb	r3, [r7, #31]
          break;
 80105e6:	e028      	b.n	801063a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	885b      	ldrh	r3, [r3, #2]
 80105ec:	b2db      	uxtb	r3, r3
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d114      	bne.n	801061c <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80105f8:	b2db      	uxtb	r3, r3
 80105fa:	2b03      	cmp	r3, #3
 80105fc:	d107      	bne.n	801060e <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	885b      	ldrh	r3, [r3, #2]
 8010602:	b2db      	uxtb	r3, r3
 8010604:	461a      	mov	r2, r3
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801060c:	e015      	b.n	801063a <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 801060e:	6839      	ldr	r1, [r7, #0]
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f001 fd37 	bl	8012084 <USBD_CtlError>
              ret = USBD_FAIL;
 8010616:	2303      	movs	r3, #3
 8010618:	77fb      	strb	r3, [r7, #31]
          break;
 801061a:	e00e      	b.n	801063a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 801061c:	6839      	ldr	r1, [r7, #0]
 801061e:	6878      	ldr	r0, [r7, #4]
 8010620:	f001 fd30 	bl	8012084 <USBD_CtlError>
            ret = USBD_FAIL;
 8010624:	2303      	movs	r3, #3
 8010626:	77fb      	strb	r3, [r7, #31]
          break;
 8010628:	e007      	b.n	801063a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801062a:	6839      	ldr	r1, [r7, #0]
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f001 fd29 	bl	8012084 <USBD_CtlError>
          ret = USBD_FAIL;
 8010632:	2303      	movs	r3, #3
 8010634:	77fb      	strb	r3, [r7, #31]
          break;
 8010636:	e000      	b.n	801063a <USBD_DFU_Setup+0x1c6>
          break;
 8010638:	bf00      	nop
      }
      break;
 801063a:	e006      	b.n	801064a <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 801063c:	6839      	ldr	r1, [r7, #0]
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f001 fd20 	bl	8012084 <USBD_CtlError>
      ret = USBD_FAIL;
 8010644:	2303      	movs	r3, #3
 8010646:	77fb      	strb	r3, [r7, #31]
      break;
 8010648:	bf00      	nop
  }

  return (uint8_t)ret;
 801064a:	7ffb      	ldrb	r3, [r7, #31]
}
 801064c:	4618      	mov	r0, r3
 801064e:	3720      	adds	r7, #32
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	2000005e 	.word	0x2000005e

08010658 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8010658:	b480      	push	{r7}
 801065a:	b083      	sub	sp, #12
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	221b      	movs	r2, #27
 8010664:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8010666:	4b03      	ldr	r3, [pc, #12]	@ (8010674 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8010668:	4618      	mov	r0, r3
 801066a:	370c      	adds	r7, #12
 801066c:	46bd      	mov	sp, r7
 801066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010672:	4770      	bx	lr
 8010674:	2000004c 	.word	0x2000004c

08010678 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010678:	b480      	push	{r7}
 801067a:	b083      	sub	sp, #12
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8010680:	2300      	movs	r3, #0
}
 8010682:	4618      	mov	r0, r3
 8010684:	370c      	adds	r7, #12
 8010686:	46bd      	mov	sp, r7
 8010688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068c:	4770      	bx	lr

0801068e <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 801068e:	b580      	push	{r7, lr}
 8010690:	b088      	sub	sp, #32
 8010692:	af00      	add	r7, sp, #0
 8010694:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801069c:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80106a4:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 80106a6:	69fb      	ldr	r3, [r7, #28]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d101      	bne.n	80106b0 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80106ac:	2303      	movs	r3, #3
 80106ae:	e0ce      	b.n	801084e <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 80106b0:	69fb      	ldr	r3, [r7, #28]
 80106b2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80106b6:	2b04      	cmp	r3, #4
 80106b8:	f040 80bd 	bne.w	8010836 <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 80106bc:	69fb      	ldr	r3, [r7, #28]
 80106be:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d17c      	bne.n	80107c0 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 80106c6:	69fb      	ldr	r3, [r7, #28]
 80106c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80106cc:	2b01      	cmp	r3, #1
 80106ce:	f000 8093 	beq.w	80107f8 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 80106d2:	69fb      	ldr	r3, [r7, #28]
 80106d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80106d8:	2b05      	cmp	r3, #5
 80106da:	d15e      	bne.n	801079a <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 80106dc:	69fb      	ldr	r3, [r7, #28]
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	2b21      	cmp	r3, #33	@ 0x21
 80106e2:	d124      	bne.n	801072e <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80106e4:	69fb      	ldr	r3, [r7, #28]
 80106e6:	785b      	ldrb	r3, [r3, #1]
 80106e8:	461a      	mov	r2, r3
 80106ea:	69fb      	ldr	r3, [r7, #28]
 80106ec:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80106f0:	69fb      	ldr	r3, [r7, #28]
 80106f2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80106f6:	69fb      	ldr	r3, [r7, #28]
 80106f8:	789b      	ldrb	r3, [r3, #2]
 80106fa:	021b      	lsls	r3, r3, #8
 80106fc:	441a      	add	r2, r3
 80106fe:	69fb      	ldr	r3, [r7, #28]
 8010700:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8010704:	69fb      	ldr	r3, [r7, #28]
 8010706:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 801070a:	69fb      	ldr	r3, [r7, #28]
 801070c:	78db      	ldrb	r3, [r3, #3]
 801070e:	041b      	lsls	r3, r3, #16
 8010710:	441a      	add	r2, r3
 8010712:	69fb      	ldr	r3, [r7, #28]
 8010714:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8010718:	69fb      	ldr	r3, [r7, #28]
 801071a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 801071e:	69fb      	ldr	r3, [r7, #28]
 8010720:	791b      	ldrb	r3, [r3, #4]
 8010722:	061b      	lsls	r3, r3, #24
 8010724:	441a      	add	r2, r3
 8010726:	69fb      	ldr	r3, [r7, #28]
 8010728:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 801072c:	e064      	b.n	80107f8 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 801072e:	69fb      	ldr	r3, [r7, #28]
 8010730:	781b      	ldrb	r3, [r3, #0]
 8010732:	2b41      	cmp	r3, #65	@ 0x41
 8010734:	d12f      	bne.n	8010796 <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8010736:	69fb      	ldr	r3, [r7, #28]
 8010738:	785b      	ldrb	r3, [r3, #1]
 801073a:	461a      	mov	r2, r3
 801073c:	69fb      	ldr	r3, [r7, #28]
 801073e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8010742:	69fb      	ldr	r3, [r7, #28]
 8010744:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8010748:	69fb      	ldr	r3, [r7, #28]
 801074a:	789b      	ldrb	r3, [r3, #2]
 801074c:	021b      	lsls	r3, r3, #8
 801074e:	441a      	add	r2, r3
 8010750:	69fb      	ldr	r3, [r7, #28]
 8010752:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8010756:	69fb      	ldr	r3, [r7, #28]
 8010758:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 801075c:	69fb      	ldr	r3, [r7, #28]
 801075e:	78db      	ldrb	r3, [r3, #3]
 8010760:	041b      	lsls	r3, r3, #16
 8010762:	441a      	add	r2, r3
 8010764:	69fb      	ldr	r3, [r7, #28]
 8010766:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 801076a:	69fb      	ldr	r3, [r7, #28]
 801076c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8010770:	69fb      	ldr	r3, [r7, #28]
 8010772:	791b      	ldrb	r3, [r3, #4]
 8010774:	061b      	lsls	r3, r3, #24
 8010776:	441a      	add	r2, r3
 8010778:	69fb      	ldr	r3, [r7, #28]
 801077a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 801077e:	69bb      	ldr	r3, [r7, #24]
 8010780:	68db      	ldr	r3, [r3, #12]
 8010782:	69fa      	ldr	r2, [r7, #28]
 8010784:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 8010788:	4610      	mov	r0, r2
 801078a:	4798      	blx	r3
 801078c:	4603      	mov	r3, r0
 801078e:	2b00      	cmp	r3, #0
 8010790:	d032      	beq.n	80107f8 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 8010792:	2303      	movs	r3, #3
 8010794:	e05b      	b.n	801084e <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 8010796:	2303      	movs	r3, #3
 8010798:	e059      	b.n	801084e <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 801079a:	69fb      	ldr	r3, [r7, #28]
 801079c:	2200      	movs	r2, #0
 801079e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 80107a2:	69fb      	ldr	r3, [r7, #28]
 80107a4:	2200      	movs	r2, #0
 80107a6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 80107aa:	2300      	movs	r3, #0
 80107ac:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 80107ae:	2301      	movs	r3, #1
 80107b0:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 80107b2:	f107 030c 	add.w	r3, r7, #12
 80107b6:	4619      	mov	r1, r3
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f001 fc63 	bl	8012084 <USBD_CtlError>
 80107be:	e01b      	b.n	80107f8 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 80107c0:	69fb      	ldr	r3, [r7, #28]
 80107c2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80107c6:	2b01      	cmp	r3, #1
 80107c8:	d916      	bls.n	80107f8 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80107ca:	69fb      	ldr	r3, [r7, #28]
 80107cc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80107d0:	3b02      	subs	r3, #2
 80107d2:	029a      	lsls	r2, r3, #10
 80107d4:	69fb      	ldr	r3, [r7, #28]
 80107d6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80107da:	4413      	add	r3, r2
 80107dc:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 80107de:	69bb      	ldr	r3, [r7, #24]
 80107e0:	691b      	ldr	r3, [r3, #16]
 80107e2:	69f8      	ldr	r0, [r7, #28]
 80107e4:	6979      	ldr	r1, [r7, #20]
 80107e6:	69fa      	ldr	r2, [r7, #28]
 80107e8:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 80107ec:	4798      	blx	r3
 80107ee:	4603      	mov	r3, r0
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d001      	beq.n	80107f8 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 80107f4:	2303      	movs	r3, #3
 80107f6:	e02a      	b.n	801084e <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 80107f8:	69fb      	ldr	r3, [r7, #28]
 80107fa:	2200      	movs	r2, #0
 80107fc:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8010800:	69fb      	ldr	r3, [r7, #28]
 8010802:	2200      	movs	r2, #0
 8010804:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8010808:	69fb      	ldr	r3, [r7, #28]
 801080a:	2203      	movs	r2, #3
 801080c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8010810:	69fb      	ldr	r3, [r7, #28]
 8010812:	2200      	movs	r2, #0
 8010814:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8010818:	69fb      	ldr	r3, [r7, #28]
 801081a:	2200      	movs	r2, #0
 801081c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8010820:	69fb      	ldr	r3, [r7, #28]
 8010822:	2200      	movs	r2, #0
 8010824:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8010828:	69fb      	ldr	r3, [r7, #28]
 801082a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 801082e:	69fb      	ldr	r3, [r7, #28]
 8010830:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8010834:	e00a      	b.n	801084c <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8010836:	69fb      	ldr	r3, [r7, #28]
 8010838:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 801083c:	2b07      	cmp	r3, #7
 801083e:	d103      	bne.n	8010848 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f000 fb75 	bl	8010f30 <DFU_Leave>
 8010846:	e001      	b.n	801084c <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8010848:	2303      	movs	r3, #3
 801084a:	e000      	b.n	801084e <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 801084c:	2300      	movs	r3, #0
}
 801084e:	4618      	mov	r0, r3
 8010850:	3720      	adds	r7, #32
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}

08010856 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8010856:	b480      	push	{r7}
 8010858:	b083      	sub	sp, #12
 801085a:	af00      	add	r7, sp, #0
 801085c:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 801085e:	2300      	movs	r3, #0
}
 8010860:	4618      	mov	r0, r3
 8010862:	370c      	adds	r7, #12
 8010864:	46bd      	mov	sp, r7
 8010866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086a:	4770      	bx	lr

0801086c <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 801086c:	b480      	push	{r7}
 801086e:	b083      	sub	sp, #12
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	220a      	movs	r2, #10
 8010878:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 801087a:	4b03      	ldr	r3, [pc, #12]	@ (8010888 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 801087c:	4618      	mov	r0, r3
 801087e:	370c      	adds	r7, #12
 8010880:	46bd      	mov	sp, r7
 8010882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010886:	4770      	bx	lr
 8010888:	20000068 	.word	0x20000068

0801088c <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b086      	sub	sp, #24
 8010890:	af00      	add	r7, sp, #0
 8010892:	60f8      	str	r0, [r7, #12]
 8010894:	460b      	mov	r3, r1
 8010896:	607a      	str	r2, [r7, #4]
 8010898:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80108a0:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80108a2:	7afb      	ldrb	r3, [r7, #11]
 80108a4:	2b06      	cmp	r3, #6
 80108a6:	d808      	bhi.n	80108ba <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 80108a8:	697b      	ldr	r3, [r7, #20]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	687a      	ldr	r2, [r7, #4]
 80108ae:	4905      	ldr	r1, [pc, #20]	@ (80108c4 <USBD_DFU_GetUsrStringDesc+0x38>)
 80108b0:	4618      	mov	r0, r3
 80108b2:	f001 fbf8 	bl	80120a6 <USBD_GetString>
    return USBD_StrDesc;
 80108b6:	4b03      	ldr	r3, [pc, #12]	@ (80108c4 <USBD_DFU_GetUsrStringDesc+0x38>)
 80108b8:	e000      	b.n	80108bc <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80108ba:	2300      	movs	r3, #0
  }
}
 80108bc:	4618      	mov	r0, r3
 80108be:	3718      	adds	r7, #24
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}
 80108c4:	200008bc 	.word	0x200008bc

080108c8 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 80108c8:	b480      	push	{r7}
 80108ca:	b083      	sub	sp, #12
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d101      	bne.n	80108dc <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80108d8:	2303      	movs	r3, #3
 80108da:	e004      	b.n	80108e6 <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	683a      	ldr	r2, [r7, #0]
 80108e0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80108e4:	2300      	movs	r3, #0
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	370c      	adds	r7, #12
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr
	...

080108f4 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b084      	sub	sp, #16
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010904:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d051      	beq.n	80109b0 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8010912:	2b02      	cmp	r3, #2
 8010914:	d013      	beq.n	801093e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 801091c:	2b03      	cmp	r3, #3
 801091e:	d00e      	beq.n	801093e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8010926:	2b05      	cmp	r3, #5
 8010928:	d009      	beq.n	801093e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8010930:	2b06      	cmp	r3, #6
 8010932:	d004      	beq.n	801093e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 801093a:	2b09      	cmp	r3, #9
 801093c:	d125      	bne.n	801098a <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	2202      	movs	r2, #2
 8010942:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	2200      	movs	r2, #0
 801094a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	2200      	movs	r2, #0
 8010952:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	2200      	movs	r2, #0
 801095a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	2200      	movs	r2, #0
 8010962:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	2200      	movs	r2, #0
 8010976:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	2200      	movs	r2, #0
 801097e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	2200      	movs	r2, #0
 8010986:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 801098a:	4b0b      	ldr	r3, [pc, #44]	@ (80109b8 <DFU_Detach+0xc4>)
 801098c:	7d5b      	ldrb	r3, [r3, #21]
 801098e:	f003 0310 	and.w	r3, r3, #16
 8010992:	2b00      	cmp	r3, #0
 8010994:	d006      	beq.n	80109a4 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f000 fb7b 	bl	8011092 <USBD_Stop>
    (void)USBD_Start(pdev);
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f000 fb6c 	bl	801107a <USBD_Start>
 80109a2:	e006      	b.n	80109b2 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	885b      	ldrh	r3, [r3, #2]
 80109a8:	4618      	mov	r0, r3
 80109aa:	f7f3 fde1 	bl	8004570 <HAL_Delay>
 80109ae:	e000      	b.n	80109b2 <DFU_Detach+0xbe>
    return;
 80109b0:	bf00      	nop
  }
}
 80109b2:	3710      	adds	r7, #16
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}
 80109b8:	2000004c 	.word	0x2000004c

080109bc <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b084      	sub	sp, #16
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
 80109c4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80109cc:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d05b      	beq.n	8010a8c <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80109d4:	683b      	ldr	r3, [r7, #0]
 80109d6:	88db      	ldrh	r3, [r3, #6]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d02d      	beq.n	8010a38 <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80109e2:	2b02      	cmp	r3, #2
 80109e4:	d004      	beq.n	80109f0 <DFU_Download+0x34>
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80109ec:	2b05      	cmp	r3, #5
 80109ee:	d11e      	bne.n	8010a2e <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	885b      	ldrh	r3, [r3, #2]
 80109f4:	461a      	mov	r2, r3
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	88db      	ldrh	r3, [r3, #6]
 8010a00:	461a      	mov	r2, r3
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	2203      	movs	r2, #3
 8010a0c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8010a1c:	68f9      	ldr	r1, [r7, #12]
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8010a24:	461a      	mov	r2, r3
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f001 fbc9 	bl	80121be <USBD_CtlPrepareRx>
 8010a2c:	e02f      	b.n	8010a8e <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8010a2e:	6839      	ldr	r1, [r7, #0]
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f001 fb27 	bl	8012084 <USBD_CtlError>
 8010a36:	e02a      	b.n	8010a8e <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8010a3e:	2b05      	cmp	r3, #5
 8010a40:	d004      	beq.n	8010a4c <DFU_Download+0x90>
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8010a48:	2b02      	cmp	r3, #2
 8010a4a:	d11a      	bne.n	8010a82 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	2201      	movs	r2, #1
 8010a50:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	2206      	movs	r2, #6
 8010a58:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	2200      	movs	r2, #0
 8010a60:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	2200      	movs	r2, #0
 8010a68:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	2200      	movs	r2, #0
 8010a70:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8010a80:	e005      	b.n	8010a8e <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8010a82:	6839      	ldr	r1, [r7, #0]
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f001 fafd 	bl	8012084 <USBD_CtlError>
 8010a8a:	e000      	b.n	8010a8e <DFU_Download+0xd2>
    return;
 8010a8c:	bf00      	nop
    }
  }
}
 8010a8e:	3710      	adds	r7, #16
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b086      	sub	sp, #24
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010aa4:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8010aac:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	f000 80c4 	beq.w	8010c3e <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	88db      	ldrh	r3, [r3, #6]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	f000 80a8 	beq.w	8010c10 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8010ac6:	2b02      	cmp	r3, #2
 8010ac8:	d005      	beq.n	8010ad6 <DFU_Upload+0x42>
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8010ad0:	2b09      	cmp	r3, #9
 8010ad2:	f040 8090 	bne.w	8010bf6 <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	885b      	ldrh	r3, [r3, #2]
 8010ada:	461a      	mov	r2, r3
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	88db      	ldrh	r3, [r3, #6]
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d12c      	bne.n	8010b52 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8010afe:	2b03      	cmp	r3, #3
 8010b00:	d901      	bls.n	8010b06 <DFU_Upload+0x72>
 8010b02:	2202      	movs	r2, #2
 8010b04:	e000      	b.n	8010b08 <DFU_Upload+0x74>
 8010b06:	2209      	movs	r2, #9
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	2200      	movs	r2, #0
 8010b12:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8010b16:	697b      	ldr	r3, [r7, #20]
 8010b18:	2200      	movs	r2, #0
 8010b1a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	2200      	movs	r2, #0
 8010b22:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8010b26:	697b      	ldr	r3, [r7, #20]
 8010b28:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8010b32:	697b      	ldr	r3, [r7, #20]
 8010b34:	2200      	movs	r2, #0
 8010b36:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8010b38:	697b      	ldr	r3, [r7, #20]
 8010b3a:	2221      	movs	r2, #33	@ 0x21
 8010b3c:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	2241      	movs	r2, #65	@ 0x41
 8010b42:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	2203      	movs	r2, #3
 8010b48:	4619      	mov	r1, r3
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f001 fb0b 	bl	8012166 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8010b50:	e076      	b.n	8010c40 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8010b58:	2b01      	cmp	r3, #1
 8010b5a:	d931      	bls.n	8010bc0 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	2209      	movs	r2, #9
 8010b60:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	2200      	movs	r2, #0
 8010b68:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	2200      	movs	r2, #0
 8010b70:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	2200      	movs	r2, #0
 8010b78:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8010b7c:	697b      	ldr	r3, [r7, #20]
 8010b7e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8010b8e:	3b02      	subs	r3, #2
 8010b90:	029a      	lsls	r2, r3, #10
 8010b92:	697b      	ldr	r3, [r7, #20]
 8010b94:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8010b98:	4413      	add	r3, r2
 8010b9a:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8010b9c:	693b      	ldr	r3, [r7, #16]
 8010b9e:	695b      	ldr	r3, [r3, #20]
 8010ba0:	68f8      	ldr	r0, [r7, #12]
 8010ba2:	6979      	ldr	r1, [r7, #20]
 8010ba4:	697a      	ldr	r2, [r7, #20]
 8010ba6:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8010baa:	4798      	blx	r3
 8010bac:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8010bb4:	461a      	mov	r2, r3
 8010bb6:	68b9      	ldr	r1, [r7, #8]
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f001 fad4 	bl	8012166 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8010bbe:	e03f      	b.n	8010c40 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	220f      	movs	r2, #15
 8010bc4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	2200      	movs	r2, #0
 8010bdc:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8010be0:	697b      	ldr	r3, [r7, #20]
 8010be2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 8010bec:	6839      	ldr	r1, [r7, #0]
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f001 fa48 	bl	8012084 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8010bf4:	e024      	b.n	8010c40 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	2200      	movs	r2, #0
 8010c02:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8010c06:	6839      	ldr	r1, [r7, #0]
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f001 fa3b 	bl	8012084 <USBD_CtlError>
 8010c0e:	e017      	b.n	8010c40 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	2202      	movs	r2, #2
 8010c14:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	2200      	movs	r2, #0
 8010c24:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8010c3c:	e000      	b.n	8010c40 <DFU_Upload+0x1ac>
    return;
 8010c3e:	bf00      	nop
  }
}
 8010c40:	3718      	adds	r7, #24
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}
	...

08010c48 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b084      	sub	sp, #16
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010c56:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8010c5e:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	f000 80a0 	beq.w	8010da8 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8010c6e:	2b03      	cmp	r3, #3
 8010c70:	d002      	beq.n	8010c78 <DFU_GetStatus+0x30>
 8010c72:	2b06      	cmp	r3, #6
 8010c74:	d051      	beq.n	8010d1a <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 8010c76:	e08e      	b.n	8010d96 <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d034      	beq.n	8010cec <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	2204      	movs	r2, #4
 8010c86:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	2200      	movs	r2, #0
 8010c96:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d10e      	bne.n	8010cd6 <DFU_GetStatus+0x8e>
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	781b      	ldrb	r3, [r3, #0]
 8010cbc:	2b41      	cmp	r3, #65	@ 0x41
 8010cbe:	d10a      	bne.n	8010cd6 <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	699b      	ldr	r3, [r3, #24]
 8010cc4:	68fa      	ldr	r2, [r7, #12]
 8010cc6:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8010cca:	68fa      	ldr	r2, [r7, #12]
 8010ccc:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 8010cd0:	2100      	movs	r1, #0
 8010cd2:	4798      	blx	r3
      break;
 8010cd4:	e05f      	b.n	8010d96 <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8010cd6:	68bb      	ldr	r3, [r7, #8]
 8010cd8:	699b      	ldr	r3, [r3, #24]
 8010cda:	68fa      	ldr	r2, [r7, #12]
 8010cdc:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8010ce0:	68fa      	ldr	r2, [r7, #12]
 8010ce2:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 8010ce6:	2101      	movs	r1, #1
 8010ce8:	4798      	blx	r3
      break;
 8010cea:	e054      	b.n	8010d96 <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	2205      	movs	r2, #5
 8010cf0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	2200      	movs	r2, #0
 8010d00:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	2200      	movs	r2, #0
 8010d08:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8010d18:	e03d      	b.n	8010d96 <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8010d20:	2b01      	cmp	r3, #1
 8010d22:	d116      	bne.n	8010d52 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	2207      	movs	r2, #7
 8010d28:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	2201      	movs	r2, #1
 8010d30:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	2200      	movs	r2, #0
 8010d38:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	2200      	movs	r2, #0
 8010d40:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8010d50:	e020      	b.n	8010d94 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d11b      	bne.n	8010d94 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 8010d5c:	4b14      	ldr	r3, [pc, #80]	@ (8010db0 <DFU_GetStatus+0x168>)
 8010d5e:	7d1b      	ldrb	r3, [r3, #20]
 8010d60:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d015      	beq.n	8010d94 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	2202      	movs	r2, #2
 8010d6c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	2200      	movs	r2, #0
 8010d74:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	2200      	movs	r2, #0
 8010d84:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8010d94:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8010d9c:	2206      	movs	r2, #6
 8010d9e:	4619      	mov	r1, r3
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f001 f9e0 	bl	8012166 <USBD_CtlSendData>
 8010da6:	e000      	b.n	8010daa <DFU_GetStatus+0x162>
    return;
 8010da8:	bf00      	nop
}
 8010daa:	3710      	adds	r7, #16
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}
 8010db0:	2000004c 	.word	0x2000004c

08010db4 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8010db4:	b480      	push	{r7}
 8010db6:	b085      	sub	sp, #20
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010dc2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d042      	beq.n	8010e50 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8010dd0:	2b0a      	cmp	r3, #10
 8010dd2:	d11e      	bne.n	8010e12 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	2202      	movs	r2, #2
 8010dd8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	2200      	movs	r2, #0
 8010de0:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	2200      	movs	r2, #0
 8010de8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	2200      	movs	r2, #0
 8010df0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	2200      	movs	r2, #0
 8010df8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8010e10:	e01f      	b.n	8010e52 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	220a      	movs	r2, #10
 8010e16:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	220e      	movs	r2, #14
 8010e1e:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	2200      	movs	r2, #0
 8010e26:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2200      	movs	r2, #0
 8010e36:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	2200      	movs	r2, #0
 8010e4a:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8010e4e:	e000      	b.n	8010e52 <DFU_ClearStatus+0x9e>
    return;
 8010e50:	bf00      	nop
  }
}
 8010e52:	3714      	adds	r7, #20
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr

08010e5c <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b084      	sub	sp, #16
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010e6a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d008      	beq.n	8010e84 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8010e78:	2201      	movs	r2, #1
 8010e7a:	4619      	mov	r1, r3
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f001 f972 	bl	8012166 <USBD_CtlSendData>
 8010e82:	e000      	b.n	8010e86 <DFU_GetState+0x2a>
    return;
 8010e84:	bf00      	nop
}
 8010e86:	3710      	adds	r7, #16
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}

08010e8c <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8010e8c:	b480      	push	{r7}
 8010e8e:	b085      	sub	sp, #20
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010e9a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d03f      	beq.n	8010f22 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8010ea8:	2b02      	cmp	r3, #2
 8010eaa:	d013      	beq.n	8010ed4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8010eb2:	2b03      	cmp	r3, #3
 8010eb4:	d00e      	beq.n	8010ed4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8010ebc:	2b05      	cmp	r3, #5
 8010ebe:	d009      	beq.n	8010ed4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8010ec6:	2b06      	cmp	r3, #6
 8010ec8:	d004      	beq.n	8010ed4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8010ed0:	2b09      	cmp	r3, #9
 8010ed2:	d127      	bne.n	8010f24 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	2202      	movs	r2, #2
 8010ed8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	2200      	movs	r2, #0
 8010ee0:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2200      	movs	r2, #0
 8010ef0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	2200      	movs	r2, #0
 8010f14:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8010f20:	e000      	b.n	8010f24 <DFU_Abort+0x98>
    return;
 8010f22:	bf00      	nop
  }
}
 8010f24:	3714      	adds	r7, #20
 8010f26:	46bd      	mov	sp, r7
 8010f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2c:	4770      	bx	lr
	...

08010f30 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b084      	sub	sp, #16
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010f3e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d03b      	beq.n	8010fbe <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8010f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8010fc8 <DFU_Leave+0x98>)
 8010f50:	7d1b      	ldrb	r3, [r3, #20]
 8010f52:	f003 0304 	and.w	r3, r3, #4
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d016      	beq.n	8010f88 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	2206      	movs	r2, #6
 8010f5e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	2200      	movs	r2, #0
 8010f66:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	2200      	movs	r2, #0
 8010f76:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 8010f86:	e01b      	b.n	8010fc0 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	2208      	movs	r2, #8
 8010f8c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	2200      	movs	r2, #0
 8010f94:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	f000 f86c 	bl	8011092 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8010fba:	f7ff f9b3 	bl	8010324 <__NVIC_SystemReset>
    return;
 8010fbe:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 8010fc0:	3710      	adds	r7, #16
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}
 8010fc6:	bf00      	nop
 8010fc8:	2000004c 	.word	0x2000004c

08010fcc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b086      	sub	sp, #24
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	60f8      	str	r0, [r7, #12]
 8010fd4:	60b9      	str	r1, [r7, #8]
 8010fd6:	4613      	mov	r3, r2
 8010fd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d101      	bne.n	8010fe4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010fe0:	2303      	movs	r3, #3
 8010fe2:	e01f      	b.n	8011024 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	2200      	movs	r2, #0
 8010ff0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d003      	beq.n	801100a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	68ba      	ldr	r2, [r7, #8]
 8011006:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	2201      	movs	r2, #1
 801100e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	79fa      	ldrb	r2, [r7, #7]
 8011016:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011018:	68f8      	ldr	r0, [r7, #12]
 801101a:	f001 fbd9 	bl	80127d0 <USBD_LL_Init>
 801101e:	4603      	mov	r3, r0
 8011020:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011022:	7dfb      	ldrb	r3, [r7, #23]
}
 8011024:	4618      	mov	r0, r3
 8011026:	3718      	adds	r7, #24
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}

0801102c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b084      	sub	sp, #16
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011036:	2300      	movs	r3, #0
 8011038:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d101      	bne.n	8011044 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011040:	2303      	movs	r3, #3
 8011042:	e016      	b.n	8011072 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	683a      	ldr	r2, [r7, #0]
 8011048:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011054:	2b00      	cmp	r3, #0
 8011056:	d00b      	beq.n	8011070 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801105e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011060:	f107 020e 	add.w	r2, r7, #14
 8011064:	4610      	mov	r0, r2
 8011066:	4798      	blx	r3
 8011068:	4602      	mov	r2, r0
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8011070:	2300      	movs	r3, #0
}
 8011072:	4618      	mov	r0, r3
 8011074:	3710      	adds	r7, #16
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}

0801107a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801107a:	b580      	push	{r7, lr}
 801107c:	b082      	sub	sp, #8
 801107e:	af00      	add	r7, sp, #0
 8011080:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011082:	6878      	ldr	r0, [r7, #4]
 8011084:	f001 fbea 	bl	801285c <USBD_LL_Start>
 8011088:	4603      	mov	r3, r0
}
 801108a:	4618      	mov	r0, r3
 801108c:	3708      	adds	r7, #8
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}

08011092 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8011092:	b580      	push	{r7, lr}
 8011094:	b082      	sub	sp, #8
 8011096:	af00      	add	r7, sp, #0
 8011098:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f001 fbf9 	bl	8012892 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d009      	beq.n	80110be <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80110b0:	685b      	ldr	r3, [r3, #4]
 80110b2:	687a      	ldr	r2, [r7, #4]
 80110b4:	6852      	ldr	r2, [r2, #4]
 80110b6:	b2d2      	uxtb	r2, r2
 80110b8:	4611      	mov	r1, r2
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	4798      	blx	r3
  }

  return USBD_OK;
 80110be:	2300      	movs	r3, #0
}
 80110c0:	4618      	mov	r0, r3
 80110c2:	3708      	adds	r7, #8
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}

080110c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80110c8:	b480      	push	{r7}
 80110ca:	b083      	sub	sp, #12
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80110d0:	2300      	movs	r3, #0
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	370c      	adds	r7, #12
 80110d6:	46bd      	mov	sp, r7
 80110d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110dc:	4770      	bx	lr

080110de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80110de:	b580      	push	{r7, lr}
 80110e0:	b084      	sub	sp, #16
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	6078      	str	r0, [r7, #4]
 80110e6:	460b      	mov	r3, r1
 80110e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80110ea:	2303      	movs	r3, #3
 80110ec:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d009      	beq.n	801110c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	78fa      	ldrb	r2, [r7, #3]
 8011102:	4611      	mov	r1, r2
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	4798      	blx	r3
 8011108:	4603      	mov	r3, r0
 801110a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801110c:	7bfb      	ldrb	r3, [r7, #15]
}
 801110e:	4618      	mov	r0, r3
 8011110:	3710      	adds	r7, #16
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}

08011116 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011116:	b580      	push	{r7, lr}
 8011118:	b082      	sub	sp, #8
 801111a:	af00      	add	r7, sp, #0
 801111c:	6078      	str	r0, [r7, #4]
 801111e:	460b      	mov	r3, r1
 8011120:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011128:	2b00      	cmp	r3, #0
 801112a:	d007      	beq.n	801113c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011132:	685b      	ldr	r3, [r3, #4]
 8011134:	78fa      	ldrb	r2, [r7, #3]
 8011136:	4611      	mov	r1, r2
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	4798      	blx	r3
  }

  return USBD_OK;
 801113c:	2300      	movs	r3, #0
}
 801113e:	4618      	mov	r0, r3
 8011140:	3708      	adds	r7, #8
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}

08011146 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011146:	b580      	push	{r7, lr}
 8011148:	b084      	sub	sp, #16
 801114a:	af00      	add	r7, sp, #0
 801114c:	6078      	str	r0, [r7, #4]
 801114e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011156:	6839      	ldr	r1, [r7, #0]
 8011158:	4618      	mov	r0, r3
 801115a:	f000 ff59 	bl	8012010 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2201      	movs	r2, #1
 8011162:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 801116c:	461a      	mov	r2, r3
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801117a:	f003 031f 	and.w	r3, r3, #31
 801117e:	2b02      	cmp	r3, #2
 8011180:	d01a      	beq.n	80111b8 <USBD_LL_SetupStage+0x72>
 8011182:	2b02      	cmp	r3, #2
 8011184:	d822      	bhi.n	80111cc <USBD_LL_SetupStage+0x86>
 8011186:	2b00      	cmp	r3, #0
 8011188:	d002      	beq.n	8011190 <USBD_LL_SetupStage+0x4a>
 801118a:	2b01      	cmp	r3, #1
 801118c:	d00a      	beq.n	80111a4 <USBD_LL_SetupStage+0x5e>
 801118e:	e01d      	b.n	80111cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011196:	4619      	mov	r1, r3
 8011198:	6878      	ldr	r0, [r7, #4]
 801119a:	f000 f9ef 	bl	801157c <USBD_StdDevReq>
 801119e:	4603      	mov	r3, r0
 80111a0:	73fb      	strb	r3, [r7, #15]
      break;
 80111a2:	e020      	b.n	80111e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80111aa:	4619      	mov	r1, r3
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f000 fa53 	bl	8011658 <USBD_StdItfReq>
 80111b2:	4603      	mov	r3, r0
 80111b4:	73fb      	strb	r3, [r7, #15]
      break;
 80111b6:	e016      	b.n	80111e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80111be:	4619      	mov	r1, r3
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f000 fa92 	bl	80116ea <USBD_StdEPReq>
 80111c6:	4603      	mov	r3, r0
 80111c8:	73fb      	strb	r3, [r7, #15]
      break;
 80111ca:	e00c      	b.n	80111e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80111d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80111d6:	b2db      	uxtb	r3, r3
 80111d8:	4619      	mov	r1, r3
 80111da:	6878      	ldr	r0, [r7, #4]
 80111dc:	f001 fb9a 	bl	8012914 <USBD_LL_StallEP>
 80111e0:	4603      	mov	r3, r0
 80111e2:	73fb      	strb	r3, [r7, #15]
      break;
 80111e4:	bf00      	nop
  }

  return ret;
 80111e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80111e8:	4618      	mov	r0, r3
 80111ea:	3710      	adds	r7, #16
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}

080111f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b086      	sub	sp, #24
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	60f8      	str	r0, [r7, #12]
 80111f8:	460b      	mov	r3, r1
 80111fa:	607a      	str	r2, [r7, #4]
 80111fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80111fe:	7afb      	ldrb	r3, [r7, #11]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d138      	bne.n	8011276 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801120a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011212:	2b03      	cmp	r3, #3
 8011214:	d14a      	bne.n	80112ac <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011216:	693b      	ldr	r3, [r7, #16]
 8011218:	689a      	ldr	r2, [r3, #8]
 801121a:	693b      	ldr	r3, [r7, #16]
 801121c:	68db      	ldr	r3, [r3, #12]
 801121e:	429a      	cmp	r2, r3
 8011220:	d913      	bls.n	801124a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011222:	693b      	ldr	r3, [r7, #16]
 8011224:	689a      	ldr	r2, [r3, #8]
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	68db      	ldr	r3, [r3, #12]
 801122a:	1ad2      	subs	r2, r2, r3
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011230:	693b      	ldr	r3, [r7, #16]
 8011232:	68da      	ldr	r2, [r3, #12]
 8011234:	693b      	ldr	r3, [r7, #16]
 8011236:	689b      	ldr	r3, [r3, #8]
 8011238:	4293      	cmp	r3, r2
 801123a:	bf28      	it	cs
 801123c:	4613      	movcs	r3, r2
 801123e:	461a      	mov	r2, r3
 8011240:	6879      	ldr	r1, [r7, #4]
 8011242:	68f8      	ldr	r0, [r7, #12]
 8011244:	f000 ffd8 	bl	80121f8 <USBD_CtlContinueRx>
 8011248:	e030      	b.n	80112ac <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011250:	b2db      	uxtb	r3, r3
 8011252:	2b03      	cmp	r3, #3
 8011254:	d10b      	bne.n	801126e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801125c:	691b      	ldr	r3, [r3, #16]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d005      	beq.n	801126e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011268:	691b      	ldr	r3, [r3, #16]
 801126a:	68f8      	ldr	r0, [r7, #12]
 801126c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801126e:	68f8      	ldr	r0, [r7, #12]
 8011270:	f000 ffd3 	bl	801221a <USBD_CtlSendStatus>
 8011274:	e01a      	b.n	80112ac <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801127c:	b2db      	uxtb	r3, r3
 801127e:	2b03      	cmp	r3, #3
 8011280:	d114      	bne.n	80112ac <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011288:	699b      	ldr	r3, [r3, #24]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d00e      	beq.n	80112ac <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011294:	699b      	ldr	r3, [r3, #24]
 8011296:	7afa      	ldrb	r2, [r7, #11]
 8011298:	4611      	mov	r1, r2
 801129a:	68f8      	ldr	r0, [r7, #12]
 801129c:	4798      	blx	r3
 801129e:	4603      	mov	r3, r0
 80112a0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80112a2:	7dfb      	ldrb	r3, [r7, #23]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d001      	beq.n	80112ac <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80112a8:	7dfb      	ldrb	r3, [r7, #23]
 80112aa:	e000      	b.n	80112ae <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80112ac:	2300      	movs	r3, #0
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	3718      	adds	r7, #24
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}

080112b6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80112b6:	b580      	push	{r7, lr}
 80112b8:	b086      	sub	sp, #24
 80112ba:	af00      	add	r7, sp, #0
 80112bc:	60f8      	str	r0, [r7, #12]
 80112be:	460b      	mov	r3, r1
 80112c0:	607a      	str	r2, [r7, #4]
 80112c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80112c4:	7afb      	ldrb	r3, [r7, #11]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d16b      	bne.n	80113a2 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	3314      	adds	r3, #20
 80112ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80112d6:	2b02      	cmp	r3, #2
 80112d8:	d156      	bne.n	8011388 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	689a      	ldr	r2, [r3, #8]
 80112de:	693b      	ldr	r3, [r7, #16]
 80112e0:	68db      	ldr	r3, [r3, #12]
 80112e2:	429a      	cmp	r2, r3
 80112e4:	d914      	bls.n	8011310 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80112e6:	693b      	ldr	r3, [r7, #16]
 80112e8:	689a      	ldr	r2, [r3, #8]
 80112ea:	693b      	ldr	r3, [r7, #16]
 80112ec:	68db      	ldr	r3, [r3, #12]
 80112ee:	1ad2      	subs	r2, r2, r3
 80112f0:	693b      	ldr	r3, [r7, #16]
 80112f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80112f4:	693b      	ldr	r3, [r7, #16]
 80112f6:	689b      	ldr	r3, [r3, #8]
 80112f8:	461a      	mov	r2, r3
 80112fa:	6879      	ldr	r1, [r7, #4]
 80112fc:	68f8      	ldr	r0, [r7, #12]
 80112fe:	f000 ff4d 	bl	801219c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011302:	2300      	movs	r3, #0
 8011304:	2200      	movs	r2, #0
 8011306:	2100      	movs	r1, #0
 8011308:	68f8      	ldr	r0, [r7, #12]
 801130a:	f001 fbad 	bl	8012a68 <USBD_LL_PrepareReceive>
 801130e:	e03b      	b.n	8011388 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	68da      	ldr	r2, [r3, #12]
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	689b      	ldr	r3, [r3, #8]
 8011318:	429a      	cmp	r2, r3
 801131a:	d11c      	bne.n	8011356 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801131c:	693b      	ldr	r3, [r7, #16]
 801131e:	685a      	ldr	r2, [r3, #4]
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011324:	429a      	cmp	r2, r3
 8011326:	d316      	bcc.n	8011356 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011328:	693b      	ldr	r3, [r7, #16]
 801132a:	685a      	ldr	r2, [r3, #4]
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011332:	429a      	cmp	r2, r3
 8011334:	d20f      	bcs.n	8011356 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011336:	2200      	movs	r2, #0
 8011338:	2100      	movs	r1, #0
 801133a:	68f8      	ldr	r0, [r7, #12]
 801133c:	f000 ff2e 	bl	801219c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	2200      	movs	r2, #0
 8011344:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011348:	2300      	movs	r3, #0
 801134a:	2200      	movs	r2, #0
 801134c:	2100      	movs	r1, #0
 801134e:	68f8      	ldr	r0, [r7, #12]
 8011350:	f001 fb8a 	bl	8012a68 <USBD_LL_PrepareReceive>
 8011354:	e018      	b.n	8011388 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801135c:	b2db      	uxtb	r3, r3
 801135e:	2b03      	cmp	r3, #3
 8011360:	d10b      	bne.n	801137a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011368:	68db      	ldr	r3, [r3, #12]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d005      	beq.n	801137a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011374:	68db      	ldr	r3, [r3, #12]
 8011376:	68f8      	ldr	r0, [r7, #12]
 8011378:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801137a:	2180      	movs	r1, #128	@ 0x80
 801137c:	68f8      	ldr	r0, [r7, #12]
 801137e:	f001 fac9 	bl	8012914 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011382:	68f8      	ldr	r0, [r7, #12]
 8011384:	f000 ff5c 	bl	8012240 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801138e:	2b01      	cmp	r3, #1
 8011390:	d122      	bne.n	80113d8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011392:	68f8      	ldr	r0, [r7, #12]
 8011394:	f7ff fe98 	bl	80110c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	2200      	movs	r2, #0
 801139c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80113a0:	e01a      	b.n	80113d8 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113a8:	b2db      	uxtb	r3, r3
 80113aa:	2b03      	cmp	r3, #3
 80113ac:	d114      	bne.n	80113d8 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80113b4:	695b      	ldr	r3, [r3, #20]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d00e      	beq.n	80113d8 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80113c0:	695b      	ldr	r3, [r3, #20]
 80113c2:	7afa      	ldrb	r2, [r7, #11]
 80113c4:	4611      	mov	r1, r2
 80113c6:	68f8      	ldr	r0, [r7, #12]
 80113c8:	4798      	blx	r3
 80113ca:	4603      	mov	r3, r0
 80113cc:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80113ce:	7dfb      	ldrb	r3, [r7, #23]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d001      	beq.n	80113d8 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80113d4:	7dfb      	ldrb	r3, [r7, #23]
 80113d6:	e000      	b.n	80113da <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80113d8:	2300      	movs	r3, #0
}
 80113da:	4618      	mov	r0, r3
 80113dc:	3718      	adds	r7, #24
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}

080113e2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80113e2:	b580      	push	{r7, lr}
 80113e4:	b082      	sub	sp, #8
 80113e6:	af00      	add	r7, sp, #0
 80113e8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	2201      	movs	r2, #1
 80113ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	2200      	movs	r2, #0
 80113f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2200      	movs	r2, #0
 80113fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2200      	movs	r2, #0
 8011404:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801140e:	2b00      	cmp	r3, #0
 8011410:	d101      	bne.n	8011416 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8011412:	2303      	movs	r3, #3
 8011414:	e02f      	b.n	8011476 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801141c:	2b00      	cmp	r3, #0
 801141e:	d00f      	beq.n	8011440 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011426:	685b      	ldr	r3, [r3, #4]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d009      	beq.n	8011440 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011432:	685b      	ldr	r3, [r3, #4]
 8011434:	687a      	ldr	r2, [r7, #4]
 8011436:	6852      	ldr	r2, [r2, #4]
 8011438:	b2d2      	uxtb	r2, r2
 801143a:	4611      	mov	r1, r2
 801143c:	6878      	ldr	r0, [r7, #4]
 801143e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011440:	2340      	movs	r3, #64	@ 0x40
 8011442:	2200      	movs	r2, #0
 8011444:	2100      	movs	r1, #0
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f001 fa3e 	bl	80128c8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2201      	movs	r2, #1
 8011450:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2240      	movs	r2, #64	@ 0x40
 8011458:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801145c:	2340      	movs	r3, #64	@ 0x40
 801145e:	2200      	movs	r2, #0
 8011460:	2180      	movs	r1, #128	@ 0x80
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	f001 fa30 	bl	80128c8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	2201      	movs	r2, #1
 801146c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	2240      	movs	r2, #64	@ 0x40
 8011472:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011474:	2300      	movs	r3, #0
}
 8011476:	4618      	mov	r0, r3
 8011478:	3708      	adds	r7, #8
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}

0801147e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801147e:	b480      	push	{r7}
 8011480:	b083      	sub	sp, #12
 8011482:	af00      	add	r7, sp, #0
 8011484:	6078      	str	r0, [r7, #4]
 8011486:	460b      	mov	r3, r1
 8011488:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	78fa      	ldrb	r2, [r7, #3]
 801148e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011490:	2300      	movs	r3, #0
}
 8011492:	4618      	mov	r0, r3
 8011494:	370c      	adds	r7, #12
 8011496:	46bd      	mov	sp, r7
 8011498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149c:	4770      	bx	lr

0801149e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801149e:	b480      	push	{r7}
 80114a0:	b083      	sub	sp, #12
 80114a2:	af00      	add	r7, sp, #0
 80114a4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80114ac:	b2da      	uxtb	r2, r3
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	2204      	movs	r2, #4
 80114b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80114bc:	2300      	movs	r3, #0
}
 80114be:	4618      	mov	r0, r3
 80114c0:	370c      	adds	r7, #12
 80114c2:	46bd      	mov	sp, r7
 80114c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c8:	4770      	bx	lr

080114ca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80114ca:	b480      	push	{r7}
 80114cc:	b083      	sub	sp, #12
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80114d8:	b2db      	uxtb	r3, r3
 80114da:	2b04      	cmp	r3, #4
 80114dc:	d106      	bne.n	80114ec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80114e4:	b2da      	uxtb	r2, r3
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80114ec:	2300      	movs	r3, #0
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	370c      	adds	r7, #12
 80114f2:	46bd      	mov	sp, r7
 80114f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f8:	4770      	bx	lr

080114fa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80114fa:	b580      	push	{r7, lr}
 80114fc:	b082      	sub	sp, #8
 80114fe:	af00      	add	r7, sp, #0
 8011500:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011508:	2b00      	cmp	r3, #0
 801150a:	d101      	bne.n	8011510 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801150c:	2303      	movs	r3, #3
 801150e:	e012      	b.n	8011536 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011516:	b2db      	uxtb	r3, r3
 8011518:	2b03      	cmp	r3, #3
 801151a:	d10b      	bne.n	8011534 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011522:	69db      	ldr	r3, [r3, #28]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d005      	beq.n	8011534 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801152e:	69db      	ldr	r3, [r3, #28]
 8011530:	6878      	ldr	r0, [r7, #4]
 8011532:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011534:	2300      	movs	r3, #0
}
 8011536:	4618      	mov	r0, r3
 8011538:	3708      	adds	r7, #8
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}

0801153e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801153e:	b480      	push	{r7}
 8011540:	b087      	sub	sp, #28
 8011542:	af00      	add	r7, sp, #0
 8011544:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801154a:	697b      	ldr	r3, [r7, #20]
 801154c:	781b      	ldrb	r3, [r3, #0]
 801154e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011550:	697b      	ldr	r3, [r7, #20]
 8011552:	3301      	adds	r3, #1
 8011554:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	781b      	ldrb	r3, [r3, #0]
 801155a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801155c:	8a3b      	ldrh	r3, [r7, #16]
 801155e:	021b      	lsls	r3, r3, #8
 8011560:	b21a      	sxth	r2, r3
 8011562:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011566:	4313      	orrs	r3, r2
 8011568:	b21b      	sxth	r3, r3
 801156a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801156c:	89fb      	ldrh	r3, [r7, #14]
}
 801156e:	4618      	mov	r0, r3
 8011570:	371c      	adds	r7, #28
 8011572:	46bd      	mov	sp, r7
 8011574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011578:	4770      	bx	lr
	...

0801157c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b084      	sub	sp, #16
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
 8011584:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011586:	2300      	movs	r3, #0
 8011588:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	781b      	ldrb	r3, [r3, #0]
 801158e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011592:	2b40      	cmp	r3, #64	@ 0x40
 8011594:	d005      	beq.n	80115a2 <USBD_StdDevReq+0x26>
 8011596:	2b40      	cmp	r3, #64	@ 0x40
 8011598:	d853      	bhi.n	8011642 <USBD_StdDevReq+0xc6>
 801159a:	2b00      	cmp	r3, #0
 801159c:	d00b      	beq.n	80115b6 <USBD_StdDevReq+0x3a>
 801159e:	2b20      	cmp	r3, #32
 80115a0:	d14f      	bne.n	8011642 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80115a8:	689b      	ldr	r3, [r3, #8]
 80115aa:	6839      	ldr	r1, [r7, #0]
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	4798      	blx	r3
 80115b0:	4603      	mov	r3, r0
 80115b2:	73fb      	strb	r3, [r7, #15]
      break;
 80115b4:	e04a      	b.n	801164c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	785b      	ldrb	r3, [r3, #1]
 80115ba:	2b09      	cmp	r3, #9
 80115bc:	d83b      	bhi.n	8011636 <USBD_StdDevReq+0xba>
 80115be:	a201      	add	r2, pc, #4	@ (adr r2, 80115c4 <USBD_StdDevReq+0x48>)
 80115c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115c4:	08011619 	.word	0x08011619
 80115c8:	0801162d 	.word	0x0801162d
 80115cc:	08011637 	.word	0x08011637
 80115d0:	08011623 	.word	0x08011623
 80115d4:	08011637 	.word	0x08011637
 80115d8:	080115f7 	.word	0x080115f7
 80115dc:	080115ed 	.word	0x080115ed
 80115e0:	08011637 	.word	0x08011637
 80115e4:	0801160f 	.word	0x0801160f
 80115e8:	08011601 	.word	0x08011601
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80115ec:	6839      	ldr	r1, [r7, #0]
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f000 f9de 	bl	80119b0 <USBD_GetDescriptor>
          break;
 80115f4:	e024      	b.n	8011640 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80115f6:	6839      	ldr	r1, [r7, #0]
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f000 fb7f 	bl	8011cfc <USBD_SetAddress>
          break;
 80115fe:	e01f      	b.n	8011640 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011600:	6839      	ldr	r1, [r7, #0]
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f000 fbbe 	bl	8011d84 <USBD_SetConfig>
 8011608:	4603      	mov	r3, r0
 801160a:	73fb      	strb	r3, [r7, #15]
          break;
 801160c:	e018      	b.n	8011640 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801160e:	6839      	ldr	r1, [r7, #0]
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f000 fc5d 	bl	8011ed0 <USBD_GetConfig>
          break;
 8011616:	e013      	b.n	8011640 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011618:	6839      	ldr	r1, [r7, #0]
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f000 fc8e 	bl	8011f3c <USBD_GetStatus>
          break;
 8011620:	e00e      	b.n	8011640 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011622:	6839      	ldr	r1, [r7, #0]
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f000 fcbd 	bl	8011fa4 <USBD_SetFeature>
          break;
 801162a:	e009      	b.n	8011640 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801162c:	6839      	ldr	r1, [r7, #0]
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f000 fccc 	bl	8011fcc <USBD_ClrFeature>
          break;
 8011634:	e004      	b.n	8011640 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8011636:	6839      	ldr	r1, [r7, #0]
 8011638:	6878      	ldr	r0, [r7, #4]
 801163a:	f000 fd23 	bl	8012084 <USBD_CtlError>
          break;
 801163e:	bf00      	nop
      }
      break;
 8011640:	e004      	b.n	801164c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8011642:	6839      	ldr	r1, [r7, #0]
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f000 fd1d 	bl	8012084 <USBD_CtlError>
      break;
 801164a:	bf00      	nop
  }

  return ret;
 801164c:	7bfb      	ldrb	r3, [r7, #15]
}
 801164e:	4618      	mov	r0, r3
 8011650:	3710      	adds	r7, #16
 8011652:	46bd      	mov	sp, r7
 8011654:	bd80      	pop	{r7, pc}
 8011656:	bf00      	nop

08011658 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b084      	sub	sp, #16
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011662:	2300      	movs	r3, #0
 8011664:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	781b      	ldrb	r3, [r3, #0]
 801166a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801166e:	2b40      	cmp	r3, #64	@ 0x40
 8011670:	d005      	beq.n	801167e <USBD_StdItfReq+0x26>
 8011672:	2b40      	cmp	r3, #64	@ 0x40
 8011674:	d82f      	bhi.n	80116d6 <USBD_StdItfReq+0x7e>
 8011676:	2b00      	cmp	r3, #0
 8011678:	d001      	beq.n	801167e <USBD_StdItfReq+0x26>
 801167a:	2b20      	cmp	r3, #32
 801167c:	d12b      	bne.n	80116d6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011684:	b2db      	uxtb	r3, r3
 8011686:	3b01      	subs	r3, #1
 8011688:	2b02      	cmp	r3, #2
 801168a:	d81d      	bhi.n	80116c8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	889b      	ldrh	r3, [r3, #4]
 8011690:	b2db      	uxtb	r3, r3
 8011692:	2b01      	cmp	r3, #1
 8011694:	d813      	bhi.n	80116be <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801169c:	689b      	ldr	r3, [r3, #8]
 801169e:	6839      	ldr	r1, [r7, #0]
 80116a0:	6878      	ldr	r0, [r7, #4]
 80116a2:	4798      	blx	r3
 80116a4:	4603      	mov	r3, r0
 80116a6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	88db      	ldrh	r3, [r3, #6]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d110      	bne.n	80116d2 <USBD_StdItfReq+0x7a>
 80116b0:	7bfb      	ldrb	r3, [r7, #15]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d10d      	bne.n	80116d2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f000 fdaf 	bl	801221a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80116bc:	e009      	b.n	80116d2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80116be:	6839      	ldr	r1, [r7, #0]
 80116c0:	6878      	ldr	r0, [r7, #4]
 80116c2:	f000 fcdf 	bl	8012084 <USBD_CtlError>
          break;
 80116c6:	e004      	b.n	80116d2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80116c8:	6839      	ldr	r1, [r7, #0]
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	f000 fcda 	bl	8012084 <USBD_CtlError>
          break;
 80116d0:	e000      	b.n	80116d4 <USBD_StdItfReq+0x7c>
          break;
 80116d2:	bf00      	nop
      }
      break;
 80116d4:	e004      	b.n	80116e0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80116d6:	6839      	ldr	r1, [r7, #0]
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f000 fcd3 	bl	8012084 <USBD_CtlError>
      break;
 80116de:	bf00      	nop
  }

  return ret;
 80116e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80116e2:	4618      	mov	r0, r3
 80116e4:	3710      	adds	r7, #16
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}

080116ea <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116ea:	b580      	push	{r7, lr}
 80116ec:	b084      	sub	sp, #16
 80116ee:	af00      	add	r7, sp, #0
 80116f0:	6078      	str	r0, [r7, #4]
 80116f2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80116f4:	2300      	movs	r3, #0
 80116f6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	889b      	ldrh	r3, [r3, #4]
 80116fc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	781b      	ldrb	r3, [r3, #0]
 8011702:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011706:	2b40      	cmp	r3, #64	@ 0x40
 8011708:	d007      	beq.n	801171a <USBD_StdEPReq+0x30>
 801170a:	2b40      	cmp	r3, #64	@ 0x40
 801170c:	f200 8145 	bhi.w	801199a <USBD_StdEPReq+0x2b0>
 8011710:	2b00      	cmp	r3, #0
 8011712:	d00c      	beq.n	801172e <USBD_StdEPReq+0x44>
 8011714:	2b20      	cmp	r3, #32
 8011716:	f040 8140 	bne.w	801199a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011720:	689b      	ldr	r3, [r3, #8]
 8011722:	6839      	ldr	r1, [r7, #0]
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	4798      	blx	r3
 8011728:	4603      	mov	r3, r0
 801172a:	73fb      	strb	r3, [r7, #15]
      break;
 801172c:	e13a      	b.n	80119a4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	785b      	ldrb	r3, [r3, #1]
 8011732:	2b03      	cmp	r3, #3
 8011734:	d007      	beq.n	8011746 <USBD_StdEPReq+0x5c>
 8011736:	2b03      	cmp	r3, #3
 8011738:	f300 8129 	bgt.w	801198e <USBD_StdEPReq+0x2a4>
 801173c:	2b00      	cmp	r3, #0
 801173e:	d07f      	beq.n	8011840 <USBD_StdEPReq+0x156>
 8011740:	2b01      	cmp	r3, #1
 8011742:	d03c      	beq.n	80117be <USBD_StdEPReq+0xd4>
 8011744:	e123      	b.n	801198e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801174c:	b2db      	uxtb	r3, r3
 801174e:	2b02      	cmp	r3, #2
 8011750:	d002      	beq.n	8011758 <USBD_StdEPReq+0x6e>
 8011752:	2b03      	cmp	r3, #3
 8011754:	d016      	beq.n	8011784 <USBD_StdEPReq+0x9a>
 8011756:	e02c      	b.n	80117b2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011758:	7bbb      	ldrb	r3, [r7, #14]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d00d      	beq.n	801177a <USBD_StdEPReq+0x90>
 801175e:	7bbb      	ldrb	r3, [r7, #14]
 8011760:	2b80      	cmp	r3, #128	@ 0x80
 8011762:	d00a      	beq.n	801177a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011764:	7bbb      	ldrb	r3, [r7, #14]
 8011766:	4619      	mov	r1, r3
 8011768:	6878      	ldr	r0, [r7, #4]
 801176a:	f001 f8d3 	bl	8012914 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801176e:	2180      	movs	r1, #128	@ 0x80
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f001 f8cf 	bl	8012914 <USBD_LL_StallEP>
 8011776:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011778:	e020      	b.n	80117bc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801177a:	6839      	ldr	r1, [r7, #0]
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f000 fc81 	bl	8012084 <USBD_CtlError>
              break;
 8011782:	e01b      	b.n	80117bc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	885b      	ldrh	r3, [r3, #2]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d10e      	bne.n	80117aa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801178c:	7bbb      	ldrb	r3, [r7, #14]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d00b      	beq.n	80117aa <USBD_StdEPReq+0xc0>
 8011792:	7bbb      	ldrb	r3, [r7, #14]
 8011794:	2b80      	cmp	r3, #128	@ 0x80
 8011796:	d008      	beq.n	80117aa <USBD_StdEPReq+0xc0>
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	88db      	ldrh	r3, [r3, #6]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d104      	bne.n	80117aa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80117a0:	7bbb      	ldrb	r3, [r7, #14]
 80117a2:	4619      	mov	r1, r3
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f001 f8b5 	bl	8012914 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80117aa:	6878      	ldr	r0, [r7, #4]
 80117ac:	f000 fd35 	bl	801221a <USBD_CtlSendStatus>

              break;
 80117b0:	e004      	b.n	80117bc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80117b2:	6839      	ldr	r1, [r7, #0]
 80117b4:	6878      	ldr	r0, [r7, #4]
 80117b6:	f000 fc65 	bl	8012084 <USBD_CtlError>
              break;
 80117ba:	bf00      	nop
          }
          break;
 80117bc:	e0ec      	b.n	8011998 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	2b02      	cmp	r3, #2
 80117c8:	d002      	beq.n	80117d0 <USBD_StdEPReq+0xe6>
 80117ca:	2b03      	cmp	r3, #3
 80117cc:	d016      	beq.n	80117fc <USBD_StdEPReq+0x112>
 80117ce:	e030      	b.n	8011832 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80117d0:	7bbb      	ldrb	r3, [r7, #14]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d00d      	beq.n	80117f2 <USBD_StdEPReq+0x108>
 80117d6:	7bbb      	ldrb	r3, [r7, #14]
 80117d8:	2b80      	cmp	r3, #128	@ 0x80
 80117da:	d00a      	beq.n	80117f2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80117dc:	7bbb      	ldrb	r3, [r7, #14]
 80117de:	4619      	mov	r1, r3
 80117e0:	6878      	ldr	r0, [r7, #4]
 80117e2:	f001 f897 	bl	8012914 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80117e6:	2180      	movs	r1, #128	@ 0x80
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f001 f893 	bl	8012914 <USBD_LL_StallEP>
 80117ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80117f0:	e025      	b.n	801183e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80117f2:	6839      	ldr	r1, [r7, #0]
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f000 fc45 	bl	8012084 <USBD_CtlError>
              break;
 80117fa:	e020      	b.n	801183e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	885b      	ldrh	r3, [r3, #2]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d11b      	bne.n	801183c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011804:	7bbb      	ldrb	r3, [r7, #14]
 8011806:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801180a:	2b00      	cmp	r3, #0
 801180c:	d004      	beq.n	8011818 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801180e:	7bbb      	ldrb	r3, [r7, #14]
 8011810:	4619      	mov	r1, r3
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f001 f89d 	bl	8012952 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f000 fcfe 	bl	801221a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011824:	689b      	ldr	r3, [r3, #8]
 8011826:	6839      	ldr	r1, [r7, #0]
 8011828:	6878      	ldr	r0, [r7, #4]
 801182a:	4798      	blx	r3
 801182c:	4603      	mov	r3, r0
 801182e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8011830:	e004      	b.n	801183c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8011832:	6839      	ldr	r1, [r7, #0]
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f000 fc25 	bl	8012084 <USBD_CtlError>
              break;
 801183a:	e000      	b.n	801183e <USBD_StdEPReq+0x154>
              break;
 801183c:	bf00      	nop
          }
          break;
 801183e:	e0ab      	b.n	8011998 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011846:	b2db      	uxtb	r3, r3
 8011848:	2b02      	cmp	r3, #2
 801184a:	d002      	beq.n	8011852 <USBD_StdEPReq+0x168>
 801184c:	2b03      	cmp	r3, #3
 801184e:	d032      	beq.n	80118b6 <USBD_StdEPReq+0x1cc>
 8011850:	e097      	b.n	8011982 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011852:	7bbb      	ldrb	r3, [r7, #14]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d007      	beq.n	8011868 <USBD_StdEPReq+0x17e>
 8011858:	7bbb      	ldrb	r3, [r7, #14]
 801185a:	2b80      	cmp	r3, #128	@ 0x80
 801185c:	d004      	beq.n	8011868 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801185e:	6839      	ldr	r1, [r7, #0]
 8011860:	6878      	ldr	r0, [r7, #4]
 8011862:	f000 fc0f 	bl	8012084 <USBD_CtlError>
                break;
 8011866:	e091      	b.n	801198c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011868:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801186c:	2b00      	cmp	r3, #0
 801186e:	da0b      	bge.n	8011888 <USBD_StdEPReq+0x19e>
 8011870:	7bbb      	ldrb	r3, [r7, #14]
 8011872:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011876:	4613      	mov	r3, r2
 8011878:	009b      	lsls	r3, r3, #2
 801187a:	4413      	add	r3, r2
 801187c:	009b      	lsls	r3, r3, #2
 801187e:	3310      	adds	r3, #16
 8011880:	687a      	ldr	r2, [r7, #4]
 8011882:	4413      	add	r3, r2
 8011884:	3304      	adds	r3, #4
 8011886:	e00b      	b.n	80118a0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011888:	7bbb      	ldrb	r3, [r7, #14]
 801188a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801188e:	4613      	mov	r3, r2
 8011890:	009b      	lsls	r3, r3, #2
 8011892:	4413      	add	r3, r2
 8011894:	009b      	lsls	r3, r3, #2
 8011896:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801189a:	687a      	ldr	r2, [r7, #4]
 801189c:	4413      	add	r3, r2
 801189e:	3304      	adds	r3, #4
 80118a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	2200      	movs	r2, #0
 80118a6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	2202      	movs	r2, #2
 80118ac:	4619      	mov	r1, r3
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f000 fc59 	bl	8012166 <USBD_CtlSendData>
              break;
 80118b4:	e06a      	b.n	801198c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80118b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	da11      	bge.n	80118e2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80118be:	7bbb      	ldrb	r3, [r7, #14]
 80118c0:	f003 020f 	and.w	r2, r3, #15
 80118c4:	6879      	ldr	r1, [r7, #4]
 80118c6:	4613      	mov	r3, r2
 80118c8:	009b      	lsls	r3, r3, #2
 80118ca:	4413      	add	r3, r2
 80118cc:	009b      	lsls	r3, r3, #2
 80118ce:	440b      	add	r3, r1
 80118d0:	3324      	adds	r3, #36	@ 0x24
 80118d2:	881b      	ldrh	r3, [r3, #0]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d117      	bne.n	8011908 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80118d8:	6839      	ldr	r1, [r7, #0]
 80118da:	6878      	ldr	r0, [r7, #4]
 80118dc:	f000 fbd2 	bl	8012084 <USBD_CtlError>
                  break;
 80118e0:	e054      	b.n	801198c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80118e2:	7bbb      	ldrb	r3, [r7, #14]
 80118e4:	f003 020f 	and.w	r2, r3, #15
 80118e8:	6879      	ldr	r1, [r7, #4]
 80118ea:	4613      	mov	r3, r2
 80118ec:	009b      	lsls	r3, r3, #2
 80118ee:	4413      	add	r3, r2
 80118f0:	009b      	lsls	r3, r3, #2
 80118f2:	440b      	add	r3, r1
 80118f4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80118f8:	881b      	ldrh	r3, [r3, #0]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d104      	bne.n	8011908 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80118fe:	6839      	ldr	r1, [r7, #0]
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f000 fbbf 	bl	8012084 <USBD_CtlError>
                  break;
 8011906:	e041      	b.n	801198c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801190c:	2b00      	cmp	r3, #0
 801190e:	da0b      	bge.n	8011928 <USBD_StdEPReq+0x23e>
 8011910:	7bbb      	ldrb	r3, [r7, #14]
 8011912:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011916:	4613      	mov	r3, r2
 8011918:	009b      	lsls	r3, r3, #2
 801191a:	4413      	add	r3, r2
 801191c:	009b      	lsls	r3, r3, #2
 801191e:	3310      	adds	r3, #16
 8011920:	687a      	ldr	r2, [r7, #4]
 8011922:	4413      	add	r3, r2
 8011924:	3304      	adds	r3, #4
 8011926:	e00b      	b.n	8011940 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011928:	7bbb      	ldrb	r3, [r7, #14]
 801192a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801192e:	4613      	mov	r3, r2
 8011930:	009b      	lsls	r3, r3, #2
 8011932:	4413      	add	r3, r2
 8011934:	009b      	lsls	r3, r3, #2
 8011936:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801193a:	687a      	ldr	r2, [r7, #4]
 801193c:	4413      	add	r3, r2
 801193e:	3304      	adds	r3, #4
 8011940:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011942:	7bbb      	ldrb	r3, [r7, #14]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d002      	beq.n	801194e <USBD_StdEPReq+0x264>
 8011948:	7bbb      	ldrb	r3, [r7, #14]
 801194a:	2b80      	cmp	r3, #128	@ 0x80
 801194c:	d103      	bne.n	8011956 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	2200      	movs	r2, #0
 8011952:	601a      	str	r2, [r3, #0]
 8011954:	e00e      	b.n	8011974 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011956:	7bbb      	ldrb	r3, [r7, #14]
 8011958:	4619      	mov	r1, r3
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f001 f818 	bl	8012990 <USBD_LL_IsStallEP>
 8011960:	4603      	mov	r3, r0
 8011962:	2b00      	cmp	r3, #0
 8011964:	d003      	beq.n	801196e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8011966:	68bb      	ldr	r3, [r7, #8]
 8011968:	2201      	movs	r2, #1
 801196a:	601a      	str	r2, [r3, #0]
 801196c:	e002      	b.n	8011974 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	2200      	movs	r2, #0
 8011972:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	2202      	movs	r2, #2
 8011978:	4619      	mov	r1, r3
 801197a:	6878      	ldr	r0, [r7, #4]
 801197c:	f000 fbf3 	bl	8012166 <USBD_CtlSendData>
              break;
 8011980:	e004      	b.n	801198c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8011982:	6839      	ldr	r1, [r7, #0]
 8011984:	6878      	ldr	r0, [r7, #4]
 8011986:	f000 fb7d 	bl	8012084 <USBD_CtlError>
              break;
 801198a:	bf00      	nop
          }
          break;
 801198c:	e004      	b.n	8011998 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801198e:	6839      	ldr	r1, [r7, #0]
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f000 fb77 	bl	8012084 <USBD_CtlError>
          break;
 8011996:	bf00      	nop
      }
      break;
 8011998:	e004      	b.n	80119a4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801199a:	6839      	ldr	r1, [r7, #0]
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f000 fb71 	bl	8012084 <USBD_CtlError>
      break;
 80119a2:	bf00      	nop
  }

  return ret;
 80119a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80119a6:	4618      	mov	r0, r3
 80119a8:	3710      	adds	r7, #16
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}
	...

080119b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b084      	sub	sp, #16
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80119ba:	2300      	movs	r3, #0
 80119bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80119be:	2300      	movs	r3, #0
 80119c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80119c2:	2300      	movs	r3, #0
 80119c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	885b      	ldrh	r3, [r3, #2]
 80119ca:	0a1b      	lsrs	r3, r3, #8
 80119cc:	b29b      	uxth	r3, r3
 80119ce:	3b01      	subs	r3, #1
 80119d0:	2b0e      	cmp	r3, #14
 80119d2:	f200 8165 	bhi.w	8011ca0 <USBD_GetDescriptor+0x2f0>
 80119d6:	a201      	add	r2, pc, #4	@ (adr r2, 80119dc <USBD_GetDescriptor+0x2c>)
 80119d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119dc:	08011a4d 	.word	0x08011a4d
 80119e0:	08011a65 	.word	0x08011a65
 80119e4:	08011aa5 	.word	0x08011aa5
 80119e8:	08011ca1 	.word	0x08011ca1
 80119ec:	08011ca1 	.word	0x08011ca1
 80119f0:	08011c41 	.word	0x08011c41
 80119f4:	08011c6d 	.word	0x08011c6d
 80119f8:	08011ca1 	.word	0x08011ca1
 80119fc:	08011ca1 	.word	0x08011ca1
 8011a00:	08011ca1 	.word	0x08011ca1
 8011a04:	08011ca1 	.word	0x08011ca1
 8011a08:	08011ca1 	.word	0x08011ca1
 8011a0c:	08011ca1 	.word	0x08011ca1
 8011a10:	08011ca1 	.word	0x08011ca1
 8011a14:	08011a19 	.word	0x08011a19
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011a1e:	69db      	ldr	r3, [r3, #28]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d00b      	beq.n	8011a3c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011a2a:	69db      	ldr	r3, [r3, #28]
 8011a2c:	687a      	ldr	r2, [r7, #4]
 8011a2e:	7c12      	ldrb	r2, [r2, #16]
 8011a30:	f107 0108 	add.w	r1, r7, #8
 8011a34:	4610      	mov	r0, r2
 8011a36:	4798      	blx	r3
 8011a38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011a3a:	e139      	b.n	8011cb0 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8011a3c:	6839      	ldr	r1, [r7, #0]
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	f000 fb20 	bl	8012084 <USBD_CtlError>
        err++;
 8011a44:	7afb      	ldrb	r3, [r7, #11]
 8011a46:	3301      	adds	r3, #1
 8011a48:	72fb      	strb	r3, [r7, #11]
      break;
 8011a4a:	e131      	b.n	8011cb0 <USBD_GetDescriptor+0x300>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	687a      	ldr	r2, [r7, #4]
 8011a56:	7c12      	ldrb	r2, [r2, #16]
 8011a58:	f107 0108 	add.w	r1, r7, #8
 8011a5c:	4610      	mov	r0, r2
 8011a5e:	4798      	blx	r3
 8011a60:	60f8      	str	r0, [r7, #12]
      break;
 8011a62:	e125      	b.n	8011cb0 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	7c1b      	ldrb	r3, [r3, #16]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d10d      	bne.n	8011a88 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a74:	f107 0208 	add.w	r2, r7, #8
 8011a78:	4610      	mov	r0, r2
 8011a7a:	4798      	blx	r3
 8011a7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	3301      	adds	r3, #1
 8011a82:	2202      	movs	r2, #2
 8011a84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011a86:	e113      	b.n	8011cb0 <USBD_GetDescriptor+0x300>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a90:	f107 0208 	add.w	r2, r7, #8
 8011a94:	4610      	mov	r0, r2
 8011a96:	4798      	blx	r3
 8011a98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	3301      	adds	r3, #1
 8011a9e:	2202      	movs	r2, #2
 8011aa0:	701a      	strb	r2, [r3, #0]
      break;
 8011aa2:	e105      	b.n	8011cb0 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	885b      	ldrh	r3, [r3, #2]
 8011aa8:	b2db      	uxtb	r3, r3
 8011aaa:	2b05      	cmp	r3, #5
 8011aac:	f200 80ac 	bhi.w	8011c08 <USBD_GetDescriptor+0x258>
 8011ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8011ab8 <USBD_GetDescriptor+0x108>)
 8011ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ab6:	bf00      	nop
 8011ab8:	08011ad1 	.word	0x08011ad1
 8011abc:	08011b05 	.word	0x08011b05
 8011ac0:	08011b39 	.word	0x08011b39
 8011ac4:	08011b6d 	.word	0x08011b6d
 8011ac8:	08011ba1 	.word	0x08011ba1
 8011acc:	08011bd5 	.word	0x08011bd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011ad6:	685b      	ldr	r3, [r3, #4]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d00b      	beq.n	8011af4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011ae2:	685b      	ldr	r3, [r3, #4]
 8011ae4:	687a      	ldr	r2, [r7, #4]
 8011ae6:	7c12      	ldrb	r2, [r2, #16]
 8011ae8:	f107 0108 	add.w	r1, r7, #8
 8011aec:	4610      	mov	r0, r2
 8011aee:	4798      	blx	r3
 8011af0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011af2:	e0a4      	b.n	8011c3e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8011af4:	6839      	ldr	r1, [r7, #0]
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f000 fac4 	bl	8012084 <USBD_CtlError>
            err++;
 8011afc:	7afb      	ldrb	r3, [r7, #11]
 8011afe:	3301      	adds	r3, #1
 8011b00:	72fb      	strb	r3, [r7, #11]
          break;
 8011b02:	e09c      	b.n	8011c3e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011b0a:	689b      	ldr	r3, [r3, #8]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d00b      	beq.n	8011b28 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011b16:	689b      	ldr	r3, [r3, #8]
 8011b18:	687a      	ldr	r2, [r7, #4]
 8011b1a:	7c12      	ldrb	r2, [r2, #16]
 8011b1c:	f107 0108 	add.w	r1, r7, #8
 8011b20:	4610      	mov	r0, r2
 8011b22:	4798      	blx	r3
 8011b24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011b26:	e08a      	b.n	8011c3e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8011b28:	6839      	ldr	r1, [r7, #0]
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f000 faaa 	bl	8012084 <USBD_CtlError>
            err++;
 8011b30:	7afb      	ldrb	r3, [r7, #11]
 8011b32:	3301      	adds	r3, #1
 8011b34:	72fb      	strb	r3, [r7, #11]
          break;
 8011b36:	e082      	b.n	8011c3e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011b3e:	68db      	ldr	r3, [r3, #12]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d00b      	beq.n	8011b5c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011b4a:	68db      	ldr	r3, [r3, #12]
 8011b4c:	687a      	ldr	r2, [r7, #4]
 8011b4e:	7c12      	ldrb	r2, [r2, #16]
 8011b50:	f107 0108 	add.w	r1, r7, #8
 8011b54:	4610      	mov	r0, r2
 8011b56:	4798      	blx	r3
 8011b58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011b5a:	e070      	b.n	8011c3e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8011b5c:	6839      	ldr	r1, [r7, #0]
 8011b5e:	6878      	ldr	r0, [r7, #4]
 8011b60:	f000 fa90 	bl	8012084 <USBD_CtlError>
            err++;
 8011b64:	7afb      	ldrb	r3, [r7, #11]
 8011b66:	3301      	adds	r3, #1
 8011b68:	72fb      	strb	r3, [r7, #11]
          break;
 8011b6a:	e068      	b.n	8011c3e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011b72:	691b      	ldr	r3, [r3, #16]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d00b      	beq.n	8011b90 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011b7e:	691b      	ldr	r3, [r3, #16]
 8011b80:	687a      	ldr	r2, [r7, #4]
 8011b82:	7c12      	ldrb	r2, [r2, #16]
 8011b84:	f107 0108 	add.w	r1, r7, #8
 8011b88:	4610      	mov	r0, r2
 8011b8a:	4798      	blx	r3
 8011b8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011b8e:	e056      	b.n	8011c3e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8011b90:	6839      	ldr	r1, [r7, #0]
 8011b92:	6878      	ldr	r0, [r7, #4]
 8011b94:	f000 fa76 	bl	8012084 <USBD_CtlError>
            err++;
 8011b98:	7afb      	ldrb	r3, [r7, #11]
 8011b9a:	3301      	adds	r3, #1
 8011b9c:	72fb      	strb	r3, [r7, #11]
          break;
 8011b9e:	e04e      	b.n	8011c3e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011ba6:	695b      	ldr	r3, [r3, #20]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d00b      	beq.n	8011bc4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011bb2:	695b      	ldr	r3, [r3, #20]
 8011bb4:	687a      	ldr	r2, [r7, #4]
 8011bb6:	7c12      	ldrb	r2, [r2, #16]
 8011bb8:	f107 0108 	add.w	r1, r7, #8
 8011bbc:	4610      	mov	r0, r2
 8011bbe:	4798      	blx	r3
 8011bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011bc2:	e03c      	b.n	8011c3e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8011bc4:	6839      	ldr	r1, [r7, #0]
 8011bc6:	6878      	ldr	r0, [r7, #4]
 8011bc8:	f000 fa5c 	bl	8012084 <USBD_CtlError>
            err++;
 8011bcc:	7afb      	ldrb	r3, [r7, #11]
 8011bce:	3301      	adds	r3, #1
 8011bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8011bd2:	e034      	b.n	8011c3e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011bda:	699b      	ldr	r3, [r3, #24]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d00b      	beq.n	8011bf8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011be6:	699b      	ldr	r3, [r3, #24]
 8011be8:	687a      	ldr	r2, [r7, #4]
 8011bea:	7c12      	ldrb	r2, [r2, #16]
 8011bec:	f107 0108 	add.w	r1, r7, #8
 8011bf0:	4610      	mov	r0, r2
 8011bf2:	4798      	blx	r3
 8011bf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011bf6:	e022      	b.n	8011c3e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8011bf8:	6839      	ldr	r1, [r7, #0]
 8011bfa:	6878      	ldr	r0, [r7, #4]
 8011bfc:	f000 fa42 	bl	8012084 <USBD_CtlError>
            err++;
 8011c00:	7afb      	ldrb	r3, [r7, #11]
 8011c02:	3301      	adds	r3, #1
 8011c04:	72fb      	strb	r3, [r7, #11]
          break;
 8011c06:	e01a      	b.n	8011c3e <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d00c      	beq.n	8011c2e <USBD_GetDescriptor+0x27e>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c1c:	683a      	ldr	r2, [r7, #0]
 8011c1e:	8852      	ldrh	r2, [r2, #2]
 8011c20:	b2d1      	uxtb	r1, r2
 8011c22:	f107 0208 	add.w	r2, r7, #8
 8011c26:	6878      	ldr	r0, [r7, #4]
 8011c28:	4798      	blx	r3
 8011c2a:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8011c2c:	e006      	b.n	8011c3c <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 8011c2e:	6839      	ldr	r1, [r7, #0]
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f000 fa27 	bl	8012084 <USBD_CtlError>
            err++;
 8011c36:	7afb      	ldrb	r3, [r7, #11]
 8011c38:	3301      	adds	r3, #1
 8011c3a:	72fb      	strb	r3, [r7, #11]
          break;
 8011c3c:	bf00      	nop
      }
      break;
 8011c3e:	e037      	b.n	8011cb0 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	7c1b      	ldrb	r3, [r3, #16]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d109      	bne.n	8011c5c <USBD_GetDescriptor+0x2ac>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011c50:	f107 0208 	add.w	r2, r7, #8
 8011c54:	4610      	mov	r0, r2
 8011c56:	4798      	blx	r3
 8011c58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011c5a:	e029      	b.n	8011cb0 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8011c5c:	6839      	ldr	r1, [r7, #0]
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f000 fa10 	bl	8012084 <USBD_CtlError>
        err++;
 8011c64:	7afb      	ldrb	r3, [r7, #11]
 8011c66:	3301      	adds	r3, #1
 8011c68:	72fb      	strb	r3, [r7, #11]
      break;
 8011c6a:	e021      	b.n	8011cb0 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	7c1b      	ldrb	r3, [r3, #16]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d10d      	bne.n	8011c90 <USBD_GetDescriptor+0x2e0>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c7c:	f107 0208 	add.w	r2, r7, #8
 8011c80:	4610      	mov	r0, r2
 8011c82:	4798      	blx	r3
 8011c84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	3301      	adds	r3, #1
 8011c8a:	2207      	movs	r2, #7
 8011c8c:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011c8e:	e00f      	b.n	8011cb0 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8011c90:	6839      	ldr	r1, [r7, #0]
 8011c92:	6878      	ldr	r0, [r7, #4]
 8011c94:	f000 f9f6 	bl	8012084 <USBD_CtlError>
        err++;
 8011c98:	7afb      	ldrb	r3, [r7, #11]
 8011c9a:	3301      	adds	r3, #1
 8011c9c:	72fb      	strb	r3, [r7, #11]
      break;
 8011c9e:	e007      	b.n	8011cb0 <USBD_GetDescriptor+0x300>

    default:
      USBD_CtlError(pdev, req);
 8011ca0:	6839      	ldr	r1, [r7, #0]
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f000 f9ee 	bl	8012084 <USBD_CtlError>
      err++;
 8011ca8:	7afb      	ldrb	r3, [r7, #11]
 8011caa:	3301      	adds	r3, #1
 8011cac:	72fb      	strb	r3, [r7, #11]
      break;
 8011cae:	bf00      	nop
  }

  if (err != 0U)
 8011cb0:	7afb      	ldrb	r3, [r7, #11]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d11e      	bne.n	8011cf4 <USBD_GetDescriptor+0x344>
  {
    return;
  }

  if (req->wLength != 0U)
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	88db      	ldrh	r3, [r3, #6]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d016      	beq.n	8011cec <USBD_GetDescriptor+0x33c>
  {
    if (len != 0U)
 8011cbe:	893b      	ldrh	r3, [r7, #8]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d00e      	beq.n	8011ce2 <USBD_GetDescriptor+0x332>
    {
      len = MIN(len, req->wLength);
 8011cc4:	683b      	ldr	r3, [r7, #0]
 8011cc6:	88da      	ldrh	r2, [r3, #6]
 8011cc8:	893b      	ldrh	r3, [r7, #8]
 8011cca:	4293      	cmp	r3, r2
 8011ccc:	bf28      	it	cs
 8011cce:	4613      	movcs	r3, r2
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011cd4:	893b      	ldrh	r3, [r7, #8]
 8011cd6:	461a      	mov	r2, r3
 8011cd8:	68f9      	ldr	r1, [r7, #12]
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f000 fa43 	bl	8012166 <USBD_CtlSendData>
 8011ce0:	e009      	b.n	8011cf6 <USBD_GetDescriptor+0x346>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011ce2:	6839      	ldr	r1, [r7, #0]
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f000 f9cd 	bl	8012084 <USBD_CtlError>
 8011cea:	e004      	b.n	8011cf6 <USBD_GetDescriptor+0x346>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011cec:	6878      	ldr	r0, [r7, #4]
 8011cee:	f000 fa94 	bl	801221a <USBD_CtlSendStatus>
 8011cf2:	e000      	b.n	8011cf6 <USBD_GetDescriptor+0x346>
    return;
 8011cf4:	bf00      	nop
  }
}
 8011cf6:	3710      	adds	r7, #16
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	bd80      	pop	{r7, pc}

08011cfc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b084      	sub	sp, #16
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
 8011d04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	889b      	ldrh	r3, [r3, #4]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d131      	bne.n	8011d72 <USBD_SetAddress+0x76>
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	88db      	ldrh	r3, [r3, #6]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d12d      	bne.n	8011d72 <USBD_SetAddress+0x76>
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	885b      	ldrh	r3, [r3, #2]
 8011d1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8011d1c:	d829      	bhi.n	8011d72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	885b      	ldrh	r3, [r3, #2]
 8011d22:	b2db      	uxtb	r3, r3
 8011d24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011d28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d30:	b2db      	uxtb	r3, r3
 8011d32:	2b03      	cmp	r3, #3
 8011d34:	d104      	bne.n	8011d40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011d36:	6839      	ldr	r1, [r7, #0]
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f000 f9a3 	bl	8012084 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d3e:	e01d      	b.n	8011d7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	7bfa      	ldrb	r2, [r7, #15]
 8011d44:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011d48:	7bfb      	ldrb	r3, [r7, #15]
 8011d4a:	4619      	mov	r1, r3
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f000 fe4b 	bl	80129e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f000 fa61 	bl	801221a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011d58:	7bfb      	ldrb	r3, [r7, #15]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d004      	beq.n	8011d68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2202      	movs	r2, #2
 8011d62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d66:	e009      	b.n	8011d7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	2201      	movs	r2, #1
 8011d6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d70:	e004      	b.n	8011d7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011d72:	6839      	ldr	r1, [r7, #0]
 8011d74:	6878      	ldr	r0, [r7, #4]
 8011d76:	f000 f985 	bl	8012084 <USBD_CtlError>
  }
}
 8011d7a:	bf00      	nop
 8011d7c:	bf00      	nop
 8011d7e:	3710      	adds	r7, #16
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}

08011d84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b084      	sub	sp, #16
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
 8011d8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	885b      	ldrh	r3, [r3, #2]
 8011d96:	b2da      	uxtb	r2, r3
 8011d98:	4b4c      	ldr	r3, [pc, #304]	@ (8011ecc <USBD_SetConfig+0x148>)
 8011d9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8011ecc <USBD_SetConfig+0x148>)
 8011d9e:	781b      	ldrb	r3, [r3, #0]
 8011da0:	2b01      	cmp	r3, #1
 8011da2:	d905      	bls.n	8011db0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011da4:	6839      	ldr	r1, [r7, #0]
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f000 f96c 	bl	8012084 <USBD_CtlError>
    return USBD_FAIL;
 8011dac:	2303      	movs	r3, #3
 8011dae:	e088      	b.n	8011ec2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011db6:	b2db      	uxtb	r3, r3
 8011db8:	2b02      	cmp	r3, #2
 8011dba:	d002      	beq.n	8011dc2 <USBD_SetConfig+0x3e>
 8011dbc:	2b03      	cmp	r3, #3
 8011dbe:	d025      	beq.n	8011e0c <USBD_SetConfig+0x88>
 8011dc0:	e071      	b.n	8011ea6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011dc2:	4b42      	ldr	r3, [pc, #264]	@ (8011ecc <USBD_SetConfig+0x148>)
 8011dc4:	781b      	ldrb	r3, [r3, #0]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d01c      	beq.n	8011e04 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8011dca:	4b40      	ldr	r3, [pc, #256]	@ (8011ecc <USBD_SetConfig+0x148>)
 8011dcc:	781b      	ldrb	r3, [r3, #0]
 8011dce:	461a      	mov	r2, r3
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011dd4:	4b3d      	ldr	r3, [pc, #244]	@ (8011ecc <USBD_SetConfig+0x148>)
 8011dd6:	781b      	ldrb	r3, [r3, #0]
 8011dd8:	4619      	mov	r1, r3
 8011dda:	6878      	ldr	r0, [r7, #4]
 8011ddc:	f7ff f97f 	bl	80110de <USBD_SetClassConfig>
 8011de0:	4603      	mov	r3, r0
 8011de2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011de4:	7bfb      	ldrb	r3, [r7, #15]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d004      	beq.n	8011df4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8011dea:	6839      	ldr	r1, [r7, #0]
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f000 f949 	bl	8012084 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011df2:	e065      	b.n	8011ec0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f000 fa10 	bl	801221a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	2203      	movs	r2, #3
 8011dfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011e02:	e05d      	b.n	8011ec0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f000 fa08 	bl	801221a <USBD_CtlSendStatus>
      break;
 8011e0a:	e059      	b.n	8011ec0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011e0c:	4b2f      	ldr	r3, [pc, #188]	@ (8011ecc <USBD_SetConfig+0x148>)
 8011e0e:	781b      	ldrb	r3, [r3, #0]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d112      	bne.n	8011e3a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	2202      	movs	r2, #2
 8011e18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8011ecc <USBD_SetConfig+0x148>)
 8011e1e:	781b      	ldrb	r3, [r3, #0]
 8011e20:	461a      	mov	r2, r3
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011e26:	4b29      	ldr	r3, [pc, #164]	@ (8011ecc <USBD_SetConfig+0x148>)
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	6878      	ldr	r0, [r7, #4]
 8011e2e:	f7ff f972 	bl	8011116 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011e32:	6878      	ldr	r0, [r7, #4]
 8011e34:	f000 f9f1 	bl	801221a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011e38:	e042      	b.n	8011ec0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8011e3a:	4b24      	ldr	r3, [pc, #144]	@ (8011ecc <USBD_SetConfig+0x148>)
 8011e3c:	781b      	ldrb	r3, [r3, #0]
 8011e3e:	461a      	mov	r2, r3
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	685b      	ldr	r3, [r3, #4]
 8011e44:	429a      	cmp	r2, r3
 8011e46:	d02a      	beq.n	8011e9e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	b2db      	uxtb	r3, r3
 8011e4e:	4619      	mov	r1, r3
 8011e50:	6878      	ldr	r0, [r7, #4]
 8011e52:	f7ff f960 	bl	8011116 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011e56:	4b1d      	ldr	r3, [pc, #116]	@ (8011ecc <USBD_SetConfig+0x148>)
 8011e58:	781b      	ldrb	r3, [r3, #0]
 8011e5a:	461a      	mov	r2, r3
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011e60:	4b1a      	ldr	r3, [pc, #104]	@ (8011ecc <USBD_SetConfig+0x148>)
 8011e62:	781b      	ldrb	r3, [r3, #0]
 8011e64:	4619      	mov	r1, r3
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f7ff f939 	bl	80110de <USBD_SetClassConfig>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011e70:	7bfb      	ldrb	r3, [r7, #15]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d00f      	beq.n	8011e96 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8011e76:	6839      	ldr	r1, [r7, #0]
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f000 f903 	bl	8012084 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	685b      	ldr	r3, [r3, #4]
 8011e82:	b2db      	uxtb	r3, r3
 8011e84:	4619      	mov	r1, r3
 8011e86:	6878      	ldr	r0, [r7, #4]
 8011e88:	f7ff f945 	bl	8011116 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2202      	movs	r2, #2
 8011e90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011e94:	e014      	b.n	8011ec0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f000 f9bf 	bl	801221a <USBD_CtlSendStatus>
      break;
 8011e9c:	e010      	b.n	8011ec0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f000 f9bb 	bl	801221a <USBD_CtlSendStatus>
      break;
 8011ea4:	e00c      	b.n	8011ec0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8011ea6:	6839      	ldr	r1, [r7, #0]
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f000 f8eb 	bl	8012084 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011eae:	4b07      	ldr	r3, [pc, #28]	@ (8011ecc <USBD_SetConfig+0x148>)
 8011eb0:	781b      	ldrb	r3, [r3, #0]
 8011eb2:	4619      	mov	r1, r3
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f7ff f92e 	bl	8011116 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011eba:	2303      	movs	r3, #3
 8011ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8011ebe:	bf00      	nop
  }

  return ret;
 8011ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	3710      	adds	r7, #16
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd80      	pop	{r7, pc}
 8011eca:	bf00      	nop
 8011ecc:	200009bb 	.word	0x200009bb

08011ed0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b082      	sub	sp, #8
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
 8011ed8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	88db      	ldrh	r3, [r3, #6]
 8011ede:	2b01      	cmp	r3, #1
 8011ee0:	d004      	beq.n	8011eec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011ee2:	6839      	ldr	r1, [r7, #0]
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f000 f8cd 	bl	8012084 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011eea:	e023      	b.n	8011f34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ef2:	b2db      	uxtb	r3, r3
 8011ef4:	2b02      	cmp	r3, #2
 8011ef6:	dc02      	bgt.n	8011efe <USBD_GetConfig+0x2e>
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	dc03      	bgt.n	8011f04 <USBD_GetConfig+0x34>
 8011efc:	e015      	b.n	8011f2a <USBD_GetConfig+0x5a>
 8011efe:	2b03      	cmp	r3, #3
 8011f00:	d00b      	beq.n	8011f1a <USBD_GetConfig+0x4a>
 8011f02:	e012      	b.n	8011f2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2200      	movs	r2, #0
 8011f08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	3308      	adds	r3, #8
 8011f0e:	2201      	movs	r2, #1
 8011f10:	4619      	mov	r1, r3
 8011f12:	6878      	ldr	r0, [r7, #4]
 8011f14:	f000 f927 	bl	8012166 <USBD_CtlSendData>
        break;
 8011f18:	e00c      	b.n	8011f34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	3304      	adds	r3, #4
 8011f1e:	2201      	movs	r2, #1
 8011f20:	4619      	mov	r1, r3
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f000 f91f 	bl	8012166 <USBD_CtlSendData>
        break;
 8011f28:	e004      	b.n	8011f34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011f2a:	6839      	ldr	r1, [r7, #0]
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	f000 f8a9 	bl	8012084 <USBD_CtlError>
        break;
 8011f32:	bf00      	nop
}
 8011f34:	bf00      	nop
 8011f36:	3708      	adds	r7, #8
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}

08011f3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b082      	sub	sp, #8
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
 8011f44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f4c:	b2db      	uxtb	r3, r3
 8011f4e:	3b01      	subs	r3, #1
 8011f50:	2b02      	cmp	r3, #2
 8011f52:	d81e      	bhi.n	8011f92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	88db      	ldrh	r3, [r3, #6]
 8011f58:	2b02      	cmp	r3, #2
 8011f5a:	d004      	beq.n	8011f66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011f5c:	6839      	ldr	r1, [r7, #0]
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	f000 f890 	bl	8012084 <USBD_CtlError>
        break;
 8011f64:	e01a      	b.n	8011f9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2201      	movs	r2, #1
 8011f6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d005      	beq.n	8011f82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	68db      	ldr	r3, [r3, #12]
 8011f7a:	f043 0202 	orr.w	r2, r3, #2
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	330c      	adds	r3, #12
 8011f86:	2202      	movs	r2, #2
 8011f88:	4619      	mov	r1, r3
 8011f8a:	6878      	ldr	r0, [r7, #4]
 8011f8c:	f000 f8eb 	bl	8012166 <USBD_CtlSendData>
      break;
 8011f90:	e004      	b.n	8011f9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011f92:	6839      	ldr	r1, [r7, #0]
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f000 f875 	bl	8012084 <USBD_CtlError>
      break;
 8011f9a:	bf00      	nop
  }
}
 8011f9c:	bf00      	nop
 8011f9e:	3708      	adds	r7, #8
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}

08011fa4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b082      	sub	sp, #8
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
 8011fac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	885b      	ldrh	r3, [r3, #2]
 8011fb2:	2b01      	cmp	r3, #1
 8011fb4:	d106      	bne.n	8011fc4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	2201      	movs	r2, #1
 8011fba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011fbe:	6878      	ldr	r0, [r7, #4]
 8011fc0:	f000 f92b 	bl	801221a <USBD_CtlSendStatus>
  }
}
 8011fc4:	bf00      	nop
 8011fc6:	3708      	adds	r7, #8
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	bd80      	pop	{r7, pc}

08011fcc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b082      	sub	sp, #8
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
 8011fd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011fdc:	b2db      	uxtb	r3, r3
 8011fde:	3b01      	subs	r3, #1
 8011fe0:	2b02      	cmp	r3, #2
 8011fe2:	d80b      	bhi.n	8011ffc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	885b      	ldrh	r3, [r3, #2]
 8011fe8:	2b01      	cmp	r3, #1
 8011fea:	d10c      	bne.n	8012006 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	f000 f910 	bl	801221a <USBD_CtlSendStatus>
      }
      break;
 8011ffa:	e004      	b.n	8012006 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011ffc:	6839      	ldr	r1, [r7, #0]
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	f000 f840 	bl	8012084 <USBD_CtlError>
      break;
 8012004:	e000      	b.n	8012008 <USBD_ClrFeature+0x3c>
      break;
 8012006:	bf00      	nop
  }
}
 8012008:	bf00      	nop
 801200a:	3708      	adds	r7, #8
 801200c:	46bd      	mov	sp, r7
 801200e:	bd80      	pop	{r7, pc}

08012010 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b084      	sub	sp, #16
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
 8012018:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	781a      	ldrb	r2, [r3, #0]
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	3301      	adds	r3, #1
 801202a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	781a      	ldrb	r2, [r3, #0]
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	3301      	adds	r3, #1
 8012038:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801203a:	68f8      	ldr	r0, [r7, #12]
 801203c:	f7ff fa7f 	bl	801153e <SWAPBYTE>
 8012040:	4603      	mov	r3, r0
 8012042:	461a      	mov	r2, r3
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	3301      	adds	r3, #1
 801204c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	3301      	adds	r3, #1
 8012052:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012054:	68f8      	ldr	r0, [r7, #12]
 8012056:	f7ff fa72 	bl	801153e <SWAPBYTE>
 801205a:	4603      	mov	r3, r0
 801205c:	461a      	mov	r2, r3
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	3301      	adds	r3, #1
 8012066:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	3301      	adds	r3, #1
 801206c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801206e:	68f8      	ldr	r0, [r7, #12]
 8012070:	f7ff fa65 	bl	801153e <SWAPBYTE>
 8012074:	4603      	mov	r3, r0
 8012076:	461a      	mov	r2, r3
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	80da      	strh	r2, [r3, #6]
}
 801207c:	bf00      	nop
 801207e:	3710      	adds	r7, #16
 8012080:	46bd      	mov	sp, r7
 8012082:	bd80      	pop	{r7, pc}

08012084 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b082      	sub	sp, #8
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
 801208c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801208e:	2180      	movs	r1, #128	@ 0x80
 8012090:	6878      	ldr	r0, [r7, #4]
 8012092:	f000 fc3f 	bl	8012914 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012096:	2100      	movs	r1, #0
 8012098:	6878      	ldr	r0, [r7, #4]
 801209a:	f000 fc3b 	bl	8012914 <USBD_LL_StallEP>
}
 801209e:	bf00      	nop
 80120a0:	3708      	adds	r7, #8
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd80      	pop	{r7, pc}

080120a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80120a6:	b580      	push	{r7, lr}
 80120a8:	b086      	sub	sp, #24
 80120aa:	af00      	add	r7, sp, #0
 80120ac:	60f8      	str	r0, [r7, #12]
 80120ae:	60b9      	str	r1, [r7, #8]
 80120b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80120b2:	2300      	movs	r3, #0
 80120b4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d036      	beq.n	801212a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80120c0:	6938      	ldr	r0, [r7, #16]
 80120c2:	f000 f836 	bl	8012132 <USBD_GetLen>
 80120c6:	4603      	mov	r3, r0
 80120c8:	3301      	adds	r3, #1
 80120ca:	b29b      	uxth	r3, r3
 80120cc:	005b      	lsls	r3, r3, #1
 80120ce:	b29a      	uxth	r2, r3
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80120d4:	7dfb      	ldrb	r3, [r7, #23]
 80120d6:	68ba      	ldr	r2, [r7, #8]
 80120d8:	4413      	add	r3, r2
 80120da:	687a      	ldr	r2, [r7, #4]
 80120dc:	7812      	ldrb	r2, [r2, #0]
 80120de:	701a      	strb	r2, [r3, #0]
  idx++;
 80120e0:	7dfb      	ldrb	r3, [r7, #23]
 80120e2:	3301      	adds	r3, #1
 80120e4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80120e6:	7dfb      	ldrb	r3, [r7, #23]
 80120e8:	68ba      	ldr	r2, [r7, #8]
 80120ea:	4413      	add	r3, r2
 80120ec:	2203      	movs	r2, #3
 80120ee:	701a      	strb	r2, [r3, #0]
  idx++;
 80120f0:	7dfb      	ldrb	r3, [r7, #23]
 80120f2:	3301      	adds	r3, #1
 80120f4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80120f6:	e013      	b.n	8012120 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80120f8:	7dfb      	ldrb	r3, [r7, #23]
 80120fa:	68ba      	ldr	r2, [r7, #8]
 80120fc:	4413      	add	r3, r2
 80120fe:	693a      	ldr	r2, [r7, #16]
 8012100:	7812      	ldrb	r2, [r2, #0]
 8012102:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	3301      	adds	r3, #1
 8012108:	613b      	str	r3, [r7, #16]
    idx++;
 801210a:	7dfb      	ldrb	r3, [r7, #23]
 801210c:	3301      	adds	r3, #1
 801210e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012110:	7dfb      	ldrb	r3, [r7, #23]
 8012112:	68ba      	ldr	r2, [r7, #8]
 8012114:	4413      	add	r3, r2
 8012116:	2200      	movs	r2, #0
 8012118:	701a      	strb	r2, [r3, #0]
    idx++;
 801211a:	7dfb      	ldrb	r3, [r7, #23]
 801211c:	3301      	adds	r3, #1
 801211e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012120:	693b      	ldr	r3, [r7, #16]
 8012122:	781b      	ldrb	r3, [r3, #0]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d1e7      	bne.n	80120f8 <USBD_GetString+0x52>
 8012128:	e000      	b.n	801212c <USBD_GetString+0x86>
    return;
 801212a:	bf00      	nop
  }
}
 801212c:	3718      	adds	r7, #24
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}

08012132 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012132:	b480      	push	{r7}
 8012134:	b085      	sub	sp, #20
 8012136:	af00      	add	r7, sp, #0
 8012138:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801213a:	2300      	movs	r3, #0
 801213c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012142:	e005      	b.n	8012150 <USBD_GetLen+0x1e>
  {
    len++;
 8012144:	7bfb      	ldrb	r3, [r7, #15]
 8012146:	3301      	adds	r3, #1
 8012148:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801214a:	68bb      	ldr	r3, [r7, #8]
 801214c:	3301      	adds	r3, #1
 801214e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	781b      	ldrb	r3, [r3, #0]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d1f5      	bne.n	8012144 <USBD_GetLen+0x12>
  }

  return len;
 8012158:	7bfb      	ldrb	r3, [r7, #15]
}
 801215a:	4618      	mov	r0, r3
 801215c:	3714      	adds	r7, #20
 801215e:	46bd      	mov	sp, r7
 8012160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012164:	4770      	bx	lr

08012166 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012166:	b580      	push	{r7, lr}
 8012168:	b084      	sub	sp, #16
 801216a:	af00      	add	r7, sp, #0
 801216c:	60f8      	str	r0, [r7, #12]
 801216e:	60b9      	str	r1, [r7, #8]
 8012170:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	2202      	movs	r2, #2
 8012176:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	687a      	ldr	r2, [r7, #4]
 801217e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	687a      	ldr	r2, [r7, #4]
 8012184:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	68ba      	ldr	r2, [r7, #8]
 801218a:	2100      	movs	r1, #0
 801218c:	68f8      	ldr	r0, [r7, #12]
 801218e:	f000 fc4a 	bl	8012a26 <USBD_LL_Transmit>

  return USBD_OK;
 8012192:	2300      	movs	r3, #0
}
 8012194:	4618      	mov	r0, r3
 8012196:	3710      	adds	r7, #16
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}

0801219c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b084      	sub	sp, #16
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	68ba      	ldr	r2, [r7, #8]
 80121ac:	2100      	movs	r1, #0
 80121ae:	68f8      	ldr	r0, [r7, #12]
 80121b0:	f000 fc39 	bl	8012a26 <USBD_LL_Transmit>

  return USBD_OK;
 80121b4:	2300      	movs	r3, #0
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	3710      	adds	r7, #16
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}

080121be <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80121be:	b580      	push	{r7, lr}
 80121c0:	b084      	sub	sp, #16
 80121c2:	af00      	add	r7, sp, #0
 80121c4:	60f8      	str	r0, [r7, #12]
 80121c6:	60b9      	str	r1, [r7, #8]
 80121c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	2203      	movs	r2, #3
 80121ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	687a      	ldr	r2, [r7, #4]
 80121d6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	687a      	ldr	r2, [r7, #4]
 80121de:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	68ba      	ldr	r2, [r7, #8]
 80121e6:	2100      	movs	r1, #0
 80121e8:	68f8      	ldr	r0, [r7, #12]
 80121ea:	f000 fc3d 	bl	8012a68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80121ee:	2300      	movs	r3, #0
}
 80121f0:	4618      	mov	r0, r3
 80121f2:	3710      	adds	r7, #16
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}

080121f8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b084      	sub	sp, #16
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	60f8      	str	r0, [r7, #12]
 8012200:	60b9      	str	r1, [r7, #8]
 8012202:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	68ba      	ldr	r2, [r7, #8]
 8012208:	2100      	movs	r1, #0
 801220a:	68f8      	ldr	r0, [r7, #12]
 801220c:	f000 fc2c 	bl	8012a68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012210:	2300      	movs	r3, #0
}
 8012212:	4618      	mov	r0, r3
 8012214:	3710      	adds	r7, #16
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}

0801221a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801221a:	b580      	push	{r7, lr}
 801221c:	b082      	sub	sp, #8
 801221e:	af00      	add	r7, sp, #0
 8012220:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	2204      	movs	r2, #4
 8012226:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801222a:	2300      	movs	r3, #0
 801222c:	2200      	movs	r2, #0
 801222e:	2100      	movs	r1, #0
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f000 fbf8 	bl	8012a26 <USBD_LL_Transmit>

  return USBD_OK;
 8012236:	2300      	movs	r3, #0
}
 8012238:	4618      	mov	r0, r3
 801223a:	3708      	adds	r7, #8
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}

08012240 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b082      	sub	sp, #8
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2205      	movs	r2, #5
 801224c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012250:	2300      	movs	r3, #0
 8012252:	2200      	movs	r2, #0
 8012254:	2100      	movs	r1, #0
 8012256:	6878      	ldr	r0, [r7, #4]
 8012258:	f000 fc06 	bl	8012a68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801225c:	2300      	movs	r3, #0
}
 801225e:	4618      	mov	r0, r3
 8012260:	3708      	adds	r7, #8
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
	...

08012268 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &DFU_Desc, DEVICE_FS) != USBD_OK) {
 801226c:	2200      	movs	r2, #0
 801226e:	4912      	ldr	r1, [pc, #72]	@ (80122b8 <MX_USB_Device_Init+0x50>)
 8012270:	4812      	ldr	r0, [pc, #72]	@ (80122bc <MX_USB_Device_Init+0x54>)
 8012272:	f7fe feab 	bl	8010fcc <USBD_Init>
 8012276:	4603      	mov	r3, r0
 8012278:	2b00      	cmp	r3, #0
 801227a:	d001      	beq.n	8012280 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801227c:	f7f0 f93c 	bl	80024f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 8012280:	490f      	ldr	r1, [pc, #60]	@ (80122c0 <MX_USB_Device_Init+0x58>)
 8012282:	480e      	ldr	r0, [pc, #56]	@ (80122bc <MX_USB_Device_Init+0x54>)
 8012284:	f7fe fed2 	bl	801102c <USBD_RegisterClass>
 8012288:	4603      	mov	r3, r0
 801228a:	2b00      	cmp	r3, #0
 801228c:	d001      	beq.n	8012292 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801228e:	f7f0 f933 	bl	80024f8 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_Flash_fops) != USBD_OK) {
 8012292:	490c      	ldr	r1, [pc, #48]	@ (80122c4 <MX_USB_Device_Init+0x5c>)
 8012294:	4809      	ldr	r0, [pc, #36]	@ (80122bc <MX_USB_Device_Init+0x54>)
 8012296:	f7fe fb17 	bl	80108c8 <USBD_DFU_RegisterMedia>
 801229a:	4603      	mov	r3, r0
 801229c:	2b00      	cmp	r3, #0
 801229e:	d001      	beq.n	80122a4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80122a0:	f7f0 f92a 	bl	80024f8 <Error_Handler>
  }
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  if (USBD_LL_BatterryCharging(&hUsbDeviceFS) != USBD_OK) {
 80122a4:	4805      	ldr	r0, [pc, #20]	@ (80122bc <MX_USB_Device_Init+0x54>)
 80122a6:	f000 fc01 	bl	8012aac <USBD_LL_BatterryCharging>
 80122aa:	4603      	mov	r3, r0
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d001      	beq.n	80122b4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80122b0:	f7f0 f922 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80122b4:	bf00      	nop
 80122b6:	bd80      	pop	{r7, pc}
 80122b8:	20000074 	.word	0x20000074
 80122bc:	200009bc 	.word	0x200009bc
 80122c0:	20000010 	.word	0x20000010
 80122c4:	200000c8 	.word	0x200000c8

080122c8 <USBD_DFU_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122c8:	b480      	push	{r7}
 80122ca:	b083      	sub	sp, #12
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	4603      	mov	r3, r0
 80122d0:	6039      	str	r1, [r7, #0]
 80122d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DFU_DeviceDesc);
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	2212      	movs	r2, #18
 80122d8:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceDesc;
 80122da:	4b03      	ldr	r3, [pc, #12]	@ (80122e8 <USBD_DFU_DeviceDescriptor+0x20>)
}
 80122dc:	4618      	mov	r0, r3
 80122de:	370c      	adds	r7, #12
 80122e0:	46bd      	mov	sp, r7
 80122e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e6:	4770      	bx	lr
 80122e8:	20000094 	.word	0x20000094

080122ec <USBD_DFU_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122ec:	b480      	push	{r7}
 80122ee:	b083      	sub	sp, #12
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	4603      	mov	r3, r0
 80122f4:	6039      	str	r1, [r7, #0]
 80122f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80122f8:	683b      	ldr	r3, [r7, #0]
 80122fa:	2204      	movs	r2, #4
 80122fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80122fe:	4b03      	ldr	r3, [pc, #12]	@ (801230c <USBD_DFU_LangIDStrDescriptor+0x20>)
}
 8012300:	4618      	mov	r0, r3
 8012302:	370c      	adds	r7, #12
 8012304:	46bd      	mov	sp, r7
 8012306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230a:	4770      	bx	lr
 801230c:	200000a8 	.word	0x200000a8

08012310 <USBD_DFU_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b082      	sub	sp, #8
 8012314:	af00      	add	r7, sp, #0
 8012316:	4603      	mov	r3, r0
 8012318:	6039      	str	r1, [r7, #0]
 801231a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801231c:	79fb      	ldrb	r3, [r7, #7]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d105      	bne.n	801232e <USBD_DFU_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012322:	683a      	ldr	r2, [r7, #0]
 8012324:	4907      	ldr	r1, [pc, #28]	@ (8012344 <USBD_DFU_ProductStrDescriptor+0x34>)
 8012326:	4808      	ldr	r0, [pc, #32]	@ (8012348 <USBD_DFU_ProductStrDescriptor+0x38>)
 8012328:	f7ff febd 	bl	80120a6 <USBD_GetString>
 801232c:	e004      	b.n	8012338 <USBD_DFU_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801232e:	683a      	ldr	r2, [r7, #0]
 8012330:	4904      	ldr	r1, [pc, #16]	@ (8012344 <USBD_DFU_ProductStrDescriptor+0x34>)
 8012332:	4805      	ldr	r0, [pc, #20]	@ (8012348 <USBD_DFU_ProductStrDescriptor+0x38>)
 8012334:	f7ff feb7 	bl	80120a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012338:	4b02      	ldr	r3, [pc, #8]	@ (8012344 <USBD_DFU_ProductStrDescriptor+0x34>)
}
 801233a:	4618      	mov	r0, r3
 801233c:	3708      	adds	r7, #8
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}
 8012342:	bf00      	nop
 8012344:	20000c8c 	.word	0x20000c8c
 8012348:	08016aa0 	.word	0x08016aa0

0801234c <USBD_DFU_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b082      	sub	sp, #8
 8012350:	af00      	add	r7, sp, #0
 8012352:	4603      	mov	r3, r0
 8012354:	6039      	str	r1, [r7, #0]
 8012356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012358:	683a      	ldr	r2, [r7, #0]
 801235a:	4904      	ldr	r1, [pc, #16]	@ (801236c <USBD_DFU_ManufacturerStrDescriptor+0x20>)
 801235c:	4804      	ldr	r0, [pc, #16]	@ (8012370 <USBD_DFU_ManufacturerStrDescriptor+0x24>)
 801235e:	f7ff fea2 	bl	80120a6 <USBD_GetString>
  return USBD_StrDesc;
 8012362:	4b02      	ldr	r3, [pc, #8]	@ (801236c <USBD_DFU_ManufacturerStrDescriptor+0x20>)
}
 8012364:	4618      	mov	r0, r3
 8012366:	3708      	adds	r7, #8
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}
 801236c:	20000c8c 	.word	0x20000c8c
 8012370:	08016ac0 	.word	0x08016ac0

08012374 <USBD_DFU_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b082      	sub	sp, #8
 8012378:	af00      	add	r7, sp, #0
 801237a:	4603      	mov	r3, r0
 801237c:	6039      	str	r1, [r7, #0]
 801237e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012380:	683b      	ldr	r3, [r7, #0]
 8012382:	221a      	movs	r2, #26
 8012384:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012386:	f000 f843 	bl	8012410 <Get_SerialNum>

  /* USER CODE BEGIN USBD_DFU_SerialStrDescriptor */

  /* USER CODE END USBD_DFU_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801238a:	4b02      	ldr	r3, [pc, #8]	@ (8012394 <USBD_DFU_SerialStrDescriptor+0x20>)
}
 801238c:	4618      	mov	r0, r3
 801238e:	3708      	adds	r7, #8
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}
 8012394:	200000ac 	.word	0x200000ac

08012398 <USBD_DFU_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b082      	sub	sp, #8
 801239c:	af00      	add	r7, sp, #0
 801239e:	4603      	mov	r3, r0
 80123a0:	6039      	str	r1, [r7, #0]
 80123a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80123a4:	79fb      	ldrb	r3, [r7, #7]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d105      	bne.n	80123b6 <USBD_DFU_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80123aa:	683a      	ldr	r2, [r7, #0]
 80123ac:	4907      	ldr	r1, [pc, #28]	@ (80123cc <USBD_DFU_ConfigStrDescriptor+0x34>)
 80123ae:	4808      	ldr	r0, [pc, #32]	@ (80123d0 <USBD_DFU_ConfigStrDescriptor+0x38>)
 80123b0:	f7ff fe79 	bl	80120a6 <USBD_GetString>
 80123b4:	e004      	b.n	80123c0 <USBD_DFU_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80123b6:	683a      	ldr	r2, [r7, #0]
 80123b8:	4904      	ldr	r1, [pc, #16]	@ (80123cc <USBD_DFU_ConfigStrDescriptor+0x34>)
 80123ba:	4805      	ldr	r0, [pc, #20]	@ (80123d0 <USBD_DFU_ConfigStrDescriptor+0x38>)
 80123bc:	f7ff fe73 	bl	80120a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80123c0:	4b02      	ldr	r3, [pc, #8]	@ (80123cc <USBD_DFU_ConfigStrDescriptor+0x34>)
}
 80123c2:	4618      	mov	r0, r3
 80123c4:	3708      	adds	r7, #8
 80123c6:	46bd      	mov	sp, r7
 80123c8:	bd80      	pop	{r7, pc}
 80123ca:	bf00      	nop
 80123cc:	20000c8c 	.word	0x20000c8c
 80123d0:	08016ad4 	.word	0x08016ad4

080123d4 <USBD_DFU_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b082      	sub	sp, #8
 80123d8:	af00      	add	r7, sp, #0
 80123da:	4603      	mov	r3, r0
 80123dc:	6039      	str	r1, [r7, #0]
 80123de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80123e0:	79fb      	ldrb	r3, [r7, #7]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d105      	bne.n	80123f2 <USBD_DFU_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80123e6:	683a      	ldr	r2, [r7, #0]
 80123e8:	4907      	ldr	r1, [pc, #28]	@ (8012408 <USBD_DFU_InterfaceStrDescriptor+0x34>)
 80123ea:	4808      	ldr	r0, [pc, #32]	@ (801240c <USBD_DFU_InterfaceStrDescriptor+0x38>)
 80123ec:	f7ff fe5b 	bl	80120a6 <USBD_GetString>
 80123f0:	e004      	b.n	80123fc <USBD_DFU_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80123f2:	683a      	ldr	r2, [r7, #0]
 80123f4:	4904      	ldr	r1, [pc, #16]	@ (8012408 <USBD_DFU_InterfaceStrDescriptor+0x34>)
 80123f6:	4805      	ldr	r0, [pc, #20]	@ (801240c <USBD_DFU_InterfaceStrDescriptor+0x38>)
 80123f8:	f7ff fe55 	bl	80120a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80123fc:	4b02      	ldr	r3, [pc, #8]	@ (8012408 <USBD_DFU_InterfaceStrDescriptor+0x34>)
}
 80123fe:	4618      	mov	r0, r3
 8012400:	3708      	adds	r7, #8
 8012402:	46bd      	mov	sp, r7
 8012404:	bd80      	pop	{r7, pc}
 8012406:	bf00      	nop
 8012408:	20000c8c 	.word	0x20000c8c
 801240c:	08016ae0 	.word	0x08016ae0

08012410 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b084      	sub	sp, #16
 8012414:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012416:	4b0f      	ldr	r3, [pc, #60]	@ (8012454 <Get_SerialNum+0x44>)
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801241c:	4b0e      	ldr	r3, [pc, #56]	@ (8012458 <Get_SerialNum+0x48>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012422:	4b0e      	ldr	r3, [pc, #56]	@ (801245c <Get_SerialNum+0x4c>)
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012428:	68fa      	ldr	r2, [r7, #12]
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	4413      	add	r3, r2
 801242e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d009      	beq.n	801244a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012436:	2208      	movs	r2, #8
 8012438:	4909      	ldr	r1, [pc, #36]	@ (8012460 <Get_SerialNum+0x50>)
 801243a:	68f8      	ldr	r0, [r7, #12]
 801243c:	f000 f814 	bl	8012468 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012440:	2204      	movs	r2, #4
 8012442:	4908      	ldr	r1, [pc, #32]	@ (8012464 <Get_SerialNum+0x54>)
 8012444:	68b8      	ldr	r0, [r7, #8]
 8012446:	f000 f80f 	bl	8012468 <IntToUnicode>
  }
}
 801244a:	bf00      	nop
 801244c:	3710      	adds	r7, #16
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}
 8012452:	bf00      	nop
 8012454:	1fff7590 	.word	0x1fff7590
 8012458:	1fff7594 	.word	0x1fff7594
 801245c:	1fff7598 	.word	0x1fff7598
 8012460:	200000ae 	.word	0x200000ae
 8012464:	200000be 	.word	0x200000be

08012468 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012468:	b480      	push	{r7}
 801246a:	b087      	sub	sp, #28
 801246c:	af00      	add	r7, sp, #0
 801246e:	60f8      	str	r0, [r7, #12]
 8012470:	60b9      	str	r1, [r7, #8]
 8012472:	4613      	mov	r3, r2
 8012474:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012476:	2300      	movs	r3, #0
 8012478:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801247a:	2300      	movs	r3, #0
 801247c:	75fb      	strb	r3, [r7, #23]
 801247e:	e027      	b.n	80124d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	0f1b      	lsrs	r3, r3, #28
 8012484:	2b09      	cmp	r3, #9
 8012486:	d80b      	bhi.n	80124a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	0f1b      	lsrs	r3, r3, #28
 801248c:	b2da      	uxtb	r2, r3
 801248e:	7dfb      	ldrb	r3, [r7, #23]
 8012490:	005b      	lsls	r3, r3, #1
 8012492:	4619      	mov	r1, r3
 8012494:	68bb      	ldr	r3, [r7, #8]
 8012496:	440b      	add	r3, r1
 8012498:	3230      	adds	r2, #48	@ 0x30
 801249a:	b2d2      	uxtb	r2, r2
 801249c:	701a      	strb	r2, [r3, #0]
 801249e:	e00a      	b.n	80124b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	0f1b      	lsrs	r3, r3, #28
 80124a4:	b2da      	uxtb	r2, r3
 80124a6:	7dfb      	ldrb	r3, [r7, #23]
 80124a8:	005b      	lsls	r3, r3, #1
 80124aa:	4619      	mov	r1, r3
 80124ac:	68bb      	ldr	r3, [r7, #8]
 80124ae:	440b      	add	r3, r1
 80124b0:	3237      	adds	r2, #55	@ 0x37
 80124b2:	b2d2      	uxtb	r2, r2
 80124b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	011b      	lsls	r3, r3, #4
 80124ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80124bc:	7dfb      	ldrb	r3, [r7, #23]
 80124be:	005b      	lsls	r3, r3, #1
 80124c0:	3301      	adds	r3, #1
 80124c2:	68ba      	ldr	r2, [r7, #8]
 80124c4:	4413      	add	r3, r2
 80124c6:	2200      	movs	r2, #0
 80124c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80124ca:	7dfb      	ldrb	r3, [r7, #23]
 80124cc:	3301      	adds	r3, #1
 80124ce:	75fb      	strb	r3, [r7, #23]
 80124d0:	7dfa      	ldrb	r2, [r7, #23]
 80124d2:	79fb      	ldrb	r3, [r7, #7]
 80124d4:	429a      	cmp	r2, r3
 80124d6:	d3d3      	bcc.n	8012480 <IntToUnicode+0x18>
  }
}
 80124d8:	bf00      	nop
 80124da:	bf00      	nop
 80124dc:	371c      	adds	r7, #28
 80124de:	46bd      	mov	sp, r7
 80124e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e4:	4770      	bx	lr

080124e6 <FLASH_If_Init>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Init(void)
{
 80124e6:	b480      	push	{r7}
 80124e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 80124ea:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 80124ec:	4618      	mov	r0, r3
 80124ee:	46bd      	mov	sp, r7
 80124f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f4:	4770      	bx	lr

080124f6 <FLASH_If_DeInit>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t FLASH_If_DeInit(void)
{
 80124f6:	b480      	push	{r7}
 80124f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 80124fa:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 80124fc:	4618      	mov	r0, r3
 80124fe:	46bd      	mov	sp, r7
 8012500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012504:	4770      	bx	lr

08012506 <FLASH_If_Erase>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Erase(uint32_t Add)
{
 8012506:	b480      	push	{r7}
 8012508:	b083      	sub	sp, #12
 801250a:	af00      	add	r7, sp, #0
 801250c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 801250e:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8012510:	4618      	mov	r0, r3
 8012512:	370c      	adds	r7, #12
 8012514:	46bd      	mov	sp, r7
 8012516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251a:	4770      	bx	lr

0801251c <FLASH_If_Write>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 801251c:	b480      	push	{r7}
 801251e:	b085      	sub	sp, #20
 8012520:	af00      	add	r7, sp, #0
 8012522:	60f8      	str	r0, [r7, #12]
 8012524:	60b9      	str	r1, [r7, #8]
 8012526:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8012528:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801252a:	4618      	mov	r0, r3
 801252c:	3714      	adds	r7, #20
 801252e:	46bd      	mov	sp, r7
 8012530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012534:	4770      	bx	lr

08012536 <FLASH_If_Read>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *FLASH_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8012536:	b480      	push	{r7}
 8012538:	b085      	sub	sp, #20
 801253a:	af00      	add	r7, sp, #0
 801253c:	60f8      	str	r0, [r7, #12]
 801253e:	60b9      	str	r1, [r7, #8]
 8012540:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(FLASH_BASE);
 8012542:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  /* USER CODE END 4 */
}
 8012546:	4618      	mov	r0, r3
 8012548:	3714      	adds	r7, #20
 801254a:	46bd      	mov	sp, r7
 801254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012550:	4770      	bx	lr

08012552 <FLASH_If_GetStatus>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t FLASH_If_GetStatus(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8012552:	b480      	push	{r7}
 8012554:	b085      	sub	sp, #20
 8012556:	af00      	add	r7, sp, #0
 8012558:	60f8      	str	r0, [r7, #12]
 801255a:	460b      	mov	r3, r1
 801255c:	607a      	str	r2, [r7, #4]
 801255e:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8012560:	7afb      	ldrb	r3, [r7, #11]
 8012562:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8012564:	bf00      	nop
  }
  return (USBD_OK);
 8012566:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012568:	4618      	mov	r0, r3
 801256a:	3714      	adds	r7, #20
 801256c:	46bd      	mov	sp, r7
 801256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012572:	4770      	bx	lr

08012574 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b098      	sub	sp, #96	@ 0x60
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801257c:	f107 0310 	add.w	r3, r7, #16
 8012580:	2250      	movs	r2, #80	@ 0x50
 8012582:	2100      	movs	r1, #0
 8012584:	4618      	mov	r0, r3
 8012586:	f001 f9cc 	bl	8013922 <memset>
  if(pcdHandle->Instance==USB)
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	4a15      	ldr	r2, [pc, #84]	@ (80125e4 <HAL_PCD_MspInit+0x70>)
 8012590:	4293      	cmp	r3, r2
 8012592:	d122      	bne.n	80125da <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012594:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012598:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801259a:	2300      	movs	r3, #0
 801259c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801259e:	f107 0310 	add.w	r3, r7, #16
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7f7 f814 	bl	80095d0 <HAL_RCCEx_PeriphCLKConfig>
 80125a8:	4603      	mov	r3, r0
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d001      	beq.n	80125b2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80125ae:	f7ef ffa3 	bl	80024f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80125b2:	4b0d      	ldr	r3, [pc, #52]	@ (80125e8 <HAL_PCD_MspInit+0x74>)
 80125b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125b6:	4a0c      	ldr	r2, [pc, #48]	@ (80125e8 <HAL_PCD_MspInit+0x74>)
 80125b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80125bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80125be:	4b0a      	ldr	r3, [pc, #40]	@ (80125e8 <HAL_PCD_MspInit+0x74>)
 80125c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80125c6:	60fb      	str	r3, [r7, #12]
 80125c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80125ca:	2200      	movs	r2, #0
 80125cc:	2100      	movs	r1, #0
 80125ce:	2014      	movs	r0, #20
 80125d0:	f7f3 f9bc 	bl	800594c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80125d4:	2014      	movs	r0, #20
 80125d6:	f7f3 f9d3 	bl	8005980 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80125da:	bf00      	nop
 80125dc:	3760      	adds	r7, #96	@ 0x60
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}
 80125e2:	bf00      	nop
 80125e4:	40005c00 	.word	0x40005c00
 80125e8:	40021000 	.word	0x40021000

080125ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b082      	sub	sp, #8
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8012600:	4619      	mov	r1, r3
 8012602:	4610      	mov	r0, r2
 8012604:	f7fe fd9f 	bl	8011146 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8012608:	bf00      	nop
 801260a:	3708      	adds	r7, #8
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}

08012610 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b082      	sub	sp, #8
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
 8012618:	460b      	mov	r3, r1
 801261a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8012622:	78fa      	ldrb	r2, [r7, #3]
 8012624:	6879      	ldr	r1, [r7, #4]
 8012626:	4613      	mov	r3, r2
 8012628:	009b      	lsls	r3, r3, #2
 801262a:	4413      	add	r3, r2
 801262c:	00db      	lsls	r3, r3, #3
 801262e:	440b      	add	r3, r1
 8012630:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012634:	681a      	ldr	r2, [r3, #0]
 8012636:	78fb      	ldrb	r3, [r7, #3]
 8012638:	4619      	mov	r1, r3
 801263a:	f7fe fdd9 	bl	80111f0 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801263e:	bf00      	nop
 8012640:	3708      	adds	r7, #8
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}

08012646 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012646:	b580      	push	{r7, lr}
 8012648:	b082      	sub	sp, #8
 801264a:	af00      	add	r7, sp, #0
 801264c:	6078      	str	r0, [r7, #4]
 801264e:	460b      	mov	r3, r1
 8012650:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8012658:	78fa      	ldrb	r2, [r7, #3]
 801265a:	6879      	ldr	r1, [r7, #4]
 801265c:	4613      	mov	r3, r2
 801265e:	009b      	lsls	r3, r3, #2
 8012660:	4413      	add	r3, r2
 8012662:	00db      	lsls	r3, r3, #3
 8012664:	440b      	add	r3, r1
 8012666:	3324      	adds	r3, #36	@ 0x24
 8012668:	681a      	ldr	r2, [r3, #0]
 801266a:	78fb      	ldrb	r3, [r7, #3]
 801266c:	4619      	mov	r1, r3
 801266e:	f7fe fe22 	bl	80112b6 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8012672:	bf00      	nop
 8012674:	3708      	adds	r7, #8
 8012676:	46bd      	mov	sp, r7
 8012678:	bd80      	pop	{r7, pc}

0801267a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801267a:	b580      	push	{r7, lr}
 801267c:	b082      	sub	sp, #8
 801267e:	af00      	add	r7, sp, #0
 8012680:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012688:	4618      	mov	r0, r3
 801268a:	f7fe ff36 	bl	80114fa <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801268e:	bf00      	nop
 8012690:	3708      	adds	r7, #8
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}

08012696 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012696:	b580      	push	{r7, lr}
 8012698:	b084      	sub	sp, #16
 801269a:	af00      	add	r7, sp, #0
 801269c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801269e:	2301      	movs	r3, #1
 80126a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	795b      	ldrb	r3, [r3, #5]
 80126a6:	2b02      	cmp	r3, #2
 80126a8:	d001      	beq.n	80126ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80126aa:	f7ef ff25 	bl	80024f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80126b4:	7bfa      	ldrb	r2, [r7, #15]
 80126b6:	4611      	mov	r1, r2
 80126b8:	4618      	mov	r0, r3
 80126ba:	f7fe fee0 	bl	801147e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80126c4:	4618      	mov	r0, r3
 80126c6:	f7fe fe8c 	bl	80113e2 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80126ca:	bf00      	nop
 80126cc:	3710      	adds	r7, #16
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}
	...

080126d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b082      	sub	sp, #8
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7fe fedb 	bl	801149e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	7a5b      	ldrb	r3, [r3, #9]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d005      	beq.n	80126fc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80126f0:	4b04      	ldr	r3, [pc, #16]	@ (8012704 <HAL_PCD_SuspendCallback+0x30>)
 80126f2:	691b      	ldr	r3, [r3, #16]
 80126f4:	4a03      	ldr	r2, [pc, #12]	@ (8012704 <HAL_PCD_SuspendCallback+0x30>)
 80126f6:	f043 0306 	orr.w	r3, r3, #6
 80126fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80126fc:	bf00      	nop
 80126fe:	3708      	adds	r7, #8
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}
 8012704:	e000ed00 	.word	0xe000ed00

08012708 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b082      	sub	sp, #8
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	7a5b      	ldrb	r3, [r3, #9]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d007      	beq.n	8012728 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012718:	4b08      	ldr	r3, [pc, #32]	@ (801273c <HAL_PCD_ResumeCallback+0x34>)
 801271a:	691b      	ldr	r3, [r3, #16]
 801271c:	4a07      	ldr	r2, [pc, #28]	@ (801273c <HAL_PCD_ResumeCallback+0x34>)
 801271e:	f023 0306 	bic.w	r3, r3, #6
 8012722:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8012724:	f000 fa32 	bl	8012b8c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801272e:	4618      	mov	r0, r3
 8012730:	f7fe fecb 	bl	80114ca <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8012734:	bf00      	nop
 8012736:	3708      	adds	r7, #8
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}
 801273c:	e000ed00 	.word	0xe000ed00

08012740 <HAL_PCDEx_BCD_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_BCDCallback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
#else
void HAL_PCDEx_BCD_Callback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b082      	sub	sp, #8
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
 8012748:	460b      	mov	r3, r1
 801274a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCDEx_BCD_Callback_PreTreatment */

  /* USER CODE END HAL_PCDEx_BCD_Callback_PreTreatment */
  switch(msg)
 801274c:	78fb      	ldrb	r3, [r7, #3]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d026      	beq.n	80127a0 <HAL_PCDEx_BCD_Callback+0x60>
 8012752:	2b00      	cmp	r3, #0
 8012754:	db34      	blt.n	80127c0 <HAL_PCDEx_BCD_Callback+0x80>
 8012756:	2bff      	cmp	r3, #255	@ 0xff
 8012758:	dc32      	bgt.n	80127c0 <HAL_PCDEx_BCD_Callback+0x80>
 801275a:	2bfb      	cmp	r3, #251	@ 0xfb
 801275c:	db30      	blt.n	80127c0 <HAL_PCDEx_BCD_Callback+0x80>
 801275e:	3bfb      	subs	r3, #251	@ 0xfb
 8012760:	2b04      	cmp	r3, #4
 8012762:	d82d      	bhi.n	80127c0 <HAL_PCDEx_BCD_Callback+0x80>
 8012764:	a201      	add	r2, pc, #4	@ (adr r2, 801276c <HAL_PCDEx_BCD_Callback+0x2c>)
 8012766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801276a:	bf00      	nop
 801276c:	08012799 	.word	0x08012799
 8012770:	08012791 	.word	0x08012791
 8012774:	08012789 	.word	0x08012789
 8012778:	08012781 	.word	0x08012781
 801277c:	080127bb 	.word	0x080127bb
  {
    case PCD_BCD_CONTACT_DETECTION:
      USBD_BCD_PortState = USB_BCD_CONTACT_DETECTION;
 8012780:	4b12      	ldr	r3, [pc, #72]	@ (80127cc <HAL_PCDEx_BCD_Callback+0x8c>)
 8012782:	22fe      	movs	r2, #254	@ 0xfe
 8012784:	701a      	strb	r2, [r3, #0]
    break;
 8012786:	e01c      	b.n	80127c2 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_STD_DOWNSTREAM_PORT:
      USBD_BCD_PortState = USB_BCD_STD_DOWNSTREAM_PORT;
 8012788:	4b10      	ldr	r3, [pc, #64]	@ (80127cc <HAL_PCDEx_BCD_Callback+0x8c>)
 801278a:	22fd      	movs	r2, #253	@ 0xfd
 801278c:	701a      	strb	r2, [r3, #0]
    break;
 801278e:	e018      	b.n	80127c2 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_CHARGING_DOWNSTREAM_PORT:
      USBD_BCD_PortState = USB_BCD_CHARGING_DOWNSTREAM_PORT;
 8012790:	4b0e      	ldr	r3, [pc, #56]	@ (80127cc <HAL_PCDEx_BCD_Callback+0x8c>)
 8012792:	22fc      	movs	r2, #252	@ 0xfc
 8012794:	701a      	strb	r2, [r3, #0]
    break;
 8012796:	e014      	b.n	80127c2 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_DEDICATED_CHARGING_PORT:
      USBD_BCD_PortState = USB_BCD_DEDICATED_CHARGING_PORT;
 8012798:	4b0c      	ldr	r3, [pc, #48]	@ (80127cc <HAL_PCDEx_BCD_Callback+0x8c>)
 801279a:	22fb      	movs	r2, #251	@ 0xfb
 801279c:	701a      	strb	r2, [r3, #0]
    break;
 801279e:	e010      	b.n	80127c2 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_DISCOVERY_COMPLETED:
      HAL_Delay(20);
 80127a0:	2014      	movs	r0, #20
 80127a2:	f7f1 fee5 	bl	8004570 <HAL_Delay>
      /* Start USB */
      USBD_Start(hpcd->pData);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80127ac:	4618      	mov	r0, r3
 80127ae:	f7fe fc64 	bl	801107a <USBD_Start>
      USBD_BCD_PortState = USB_BCD_DISCOVERY_COMPLETED;
 80127b2:	4b06      	ldr	r3, [pc, #24]	@ (80127cc <HAL_PCDEx_BCD_Callback+0x8c>)
 80127b4:	22fa      	movs	r2, #250	@ 0xfa
 80127b6:	701a      	strb	r2, [r3, #0]
    break;
 80127b8:	e003      	b.n	80127c2 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_ERROR:
      Error_Handler();
 80127ba:	f7ef fe9d 	bl	80024f8 <Error_Handler>
    break;
 80127be:	e000      	b.n	80127c2 <HAL_PCDEx_BCD_Callback+0x82>

    default:
    break;
 80127c0:	bf00      	nop
  }
  /* USER CODE BEGIN HAL_PCDEx_BCD_Callback_PostTreatment */

  /* USER CODE END HAL_PCDEx_BCD_Callback_PostTreatment */
}
 80127c2:	bf00      	nop
 80127c4:	3708      	adds	r7, #8
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
 80127ca:	bf00      	nop
 80127cc:	20000e8c 	.word	0x20000e8c

080127d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b082      	sub	sp, #8
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80127d8:	4a1e      	ldr	r2, [pc, #120]	@ (8012854 <USBD_LL_Init+0x84>)
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	4a1c      	ldr	r2, [pc, #112]	@ (8012854 <USBD_LL_Init+0x84>)
 80127e4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 80127e8:	4b1a      	ldr	r3, [pc, #104]	@ (8012854 <USBD_LL_Init+0x84>)
 80127ea:	4a1b      	ldr	r2, [pc, #108]	@ (8012858 <USBD_LL_Init+0x88>)
 80127ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80127ee:	4b19      	ldr	r3, [pc, #100]	@ (8012854 <USBD_LL_Init+0x84>)
 80127f0:	2208      	movs	r2, #8
 80127f2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80127f4:	4b17      	ldr	r3, [pc, #92]	@ (8012854 <USBD_LL_Init+0x84>)
 80127f6:	2202      	movs	r2, #2
 80127f8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80127fa:	4b16      	ldr	r3, [pc, #88]	@ (8012854 <USBD_LL_Init+0x84>)
 80127fc:	2202      	movs	r2, #2
 80127fe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8012800:	4b14      	ldr	r3, [pc, #80]	@ (8012854 <USBD_LL_Init+0x84>)
 8012802:	2200      	movs	r2, #0
 8012804:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8012806:	4b13      	ldr	r3, [pc, #76]	@ (8012854 <USBD_LL_Init+0x84>)
 8012808:	2200      	movs	r2, #0
 801280a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801280c:	4b11      	ldr	r3, [pc, #68]	@ (8012854 <USBD_LL_Init+0x84>)
 801280e:	2200      	movs	r2, #0
 8012810:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = ENABLE;
 8012812:	4b10      	ldr	r3, [pc, #64]	@ (8012854 <USBD_LL_Init+0x84>)
 8012814:	2201      	movs	r2, #1
 8012816:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012818:	480e      	ldr	r0, [pc, #56]	@ (8012854 <USBD_LL_Init+0x84>)
 801281a:	f7f4 fa52 	bl	8006cc2 <HAL_PCD_Init>
 801281e:	4603      	mov	r3, r0
 8012820:	2b00      	cmp	r3, #0
 8012822:	d001      	beq.n	8012828 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8012824:	f7ef fe68 	bl	80024f8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801282e:	2318      	movs	r3, #24
 8012830:	2200      	movs	r2, #0
 8012832:	2100      	movs	r1, #0
 8012834:	f7f5 fe9b 	bl	800856e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801283e:	2358      	movs	r3, #88	@ 0x58
 8012840:	2200      	movs	r2, #0
 8012842:	2180      	movs	r1, #128	@ 0x80
 8012844:	f7f5 fe93 	bl	800856e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 8012848:	2300      	movs	r3, #0
}
 801284a:	4618      	mov	r0, r3
 801284c:	3708      	adds	r7, #8
 801284e:	46bd      	mov	sp, r7
 8012850:	bd80      	pop	{r7, pc}
 8012852:	bf00      	nop
 8012854:	20000e90 	.word	0x20000e90
 8012858:	40005c00 	.word	0x40005c00

0801285c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b084      	sub	sp, #16
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012864:	2300      	movs	r3, #0
 8012866:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012868:	2300      	movs	r3, #0
 801286a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012872:	4618      	mov	r0, r3
 8012874:	f7f4 faf3 	bl	8006e5e <HAL_PCD_Start>
 8012878:	4603      	mov	r3, r0
 801287a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801287c:	7bfb      	ldrb	r3, [r7, #15]
 801287e:	4618      	mov	r0, r3
 8012880:	f000 f98a 	bl	8012b98 <USBD_Get_USB_Status>
 8012884:	4603      	mov	r3, r0
 8012886:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012888:	7bbb      	ldrb	r3, [r7, #14]
}
 801288a:	4618      	mov	r0, r3
 801288c:	3710      	adds	r7, #16
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}

08012892 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8012892:	b580      	push	{r7, lr}
 8012894:	b084      	sub	sp, #16
 8012896:	af00      	add	r7, sp, #0
 8012898:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801289a:	2300      	movs	r3, #0
 801289c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801289e:	2300      	movs	r3, #0
 80128a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80128a8:	4618      	mov	r0, r3
 80128aa:	f7f4 fafa 	bl	8006ea2 <HAL_PCD_Stop>
 80128ae:	4603      	mov	r3, r0
 80128b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128b2:	7bfb      	ldrb	r3, [r7, #15]
 80128b4:	4618      	mov	r0, r3
 80128b6:	f000 f96f 	bl	8012b98 <USBD_Get_USB_Status>
 80128ba:	4603      	mov	r3, r0
 80128bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128be:	7bbb      	ldrb	r3, [r7, #14]
}
 80128c0:	4618      	mov	r0, r3
 80128c2:	3710      	adds	r7, #16
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}

080128c8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b084      	sub	sp, #16
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
 80128d0:	4608      	mov	r0, r1
 80128d2:	4611      	mov	r1, r2
 80128d4:	461a      	mov	r2, r3
 80128d6:	4603      	mov	r3, r0
 80128d8:	70fb      	strb	r3, [r7, #3]
 80128da:	460b      	mov	r3, r1
 80128dc:	70bb      	strb	r3, [r7, #2]
 80128de:	4613      	mov	r3, r2
 80128e0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128e2:	2300      	movs	r3, #0
 80128e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128e6:	2300      	movs	r3, #0
 80128e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80128f0:	78bb      	ldrb	r3, [r7, #2]
 80128f2:	883a      	ldrh	r2, [r7, #0]
 80128f4:	78f9      	ldrb	r1, [r7, #3]
 80128f6:	f7f4 fc41 	bl	800717c <HAL_PCD_EP_Open>
 80128fa:	4603      	mov	r3, r0
 80128fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128fe:	7bfb      	ldrb	r3, [r7, #15]
 8012900:	4618      	mov	r0, r3
 8012902:	f000 f949 	bl	8012b98 <USBD_Get_USB_Status>
 8012906:	4603      	mov	r3, r0
 8012908:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801290a:	7bbb      	ldrb	r3, [r7, #14]
}
 801290c:	4618      	mov	r0, r3
 801290e:	3710      	adds	r7, #16
 8012910:	46bd      	mov	sp, r7
 8012912:	bd80      	pop	{r7, pc}

08012914 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b084      	sub	sp, #16
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
 801291c:	460b      	mov	r3, r1
 801291e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012920:	2300      	movs	r3, #0
 8012922:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012924:	2300      	movs	r3, #0
 8012926:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801292e:	78fa      	ldrb	r2, [r7, #3]
 8012930:	4611      	mov	r1, r2
 8012932:	4618      	mov	r0, r3
 8012934:	f7f4 fce9 	bl	800730a <HAL_PCD_EP_SetStall>
 8012938:	4603      	mov	r3, r0
 801293a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801293c:	7bfb      	ldrb	r3, [r7, #15]
 801293e:	4618      	mov	r0, r3
 8012940:	f000 f92a 	bl	8012b98 <USBD_Get_USB_Status>
 8012944:	4603      	mov	r3, r0
 8012946:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012948:	7bbb      	ldrb	r3, [r7, #14]
}
 801294a:	4618      	mov	r0, r3
 801294c:	3710      	adds	r7, #16
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}

08012952 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012952:	b580      	push	{r7, lr}
 8012954:	b084      	sub	sp, #16
 8012956:	af00      	add	r7, sp, #0
 8012958:	6078      	str	r0, [r7, #4]
 801295a:	460b      	mov	r3, r1
 801295c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801295e:	2300      	movs	r3, #0
 8012960:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012962:	2300      	movs	r3, #0
 8012964:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801296c:	78fa      	ldrb	r2, [r7, #3]
 801296e:	4611      	mov	r1, r2
 8012970:	4618      	mov	r0, r3
 8012972:	f7f4 fd1c 	bl	80073ae <HAL_PCD_EP_ClrStall>
 8012976:	4603      	mov	r3, r0
 8012978:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801297a:	7bfb      	ldrb	r3, [r7, #15]
 801297c:	4618      	mov	r0, r3
 801297e:	f000 f90b 	bl	8012b98 <USBD_Get_USB_Status>
 8012982:	4603      	mov	r3, r0
 8012984:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012986:	7bbb      	ldrb	r3, [r7, #14]
}
 8012988:	4618      	mov	r0, r3
 801298a:	3710      	adds	r7, #16
 801298c:	46bd      	mov	sp, r7
 801298e:	bd80      	pop	{r7, pc}

08012990 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012990:	b480      	push	{r7}
 8012992:	b085      	sub	sp, #20
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
 8012998:	460b      	mov	r3, r1
 801299a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80129a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80129a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	da0b      	bge.n	80129c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80129ac:	78fb      	ldrb	r3, [r7, #3]
 80129ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80129b2:	68f9      	ldr	r1, [r7, #12]
 80129b4:	4613      	mov	r3, r2
 80129b6:	009b      	lsls	r3, r3, #2
 80129b8:	4413      	add	r3, r2
 80129ba:	00db      	lsls	r3, r3, #3
 80129bc:	440b      	add	r3, r1
 80129be:	3312      	adds	r3, #18
 80129c0:	781b      	ldrb	r3, [r3, #0]
 80129c2:	e00b      	b.n	80129dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80129c4:	78fb      	ldrb	r3, [r7, #3]
 80129c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80129ca:	68f9      	ldr	r1, [r7, #12]
 80129cc:	4613      	mov	r3, r2
 80129ce:	009b      	lsls	r3, r3, #2
 80129d0:	4413      	add	r3, r2
 80129d2:	00db      	lsls	r3, r3, #3
 80129d4:	440b      	add	r3, r1
 80129d6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80129da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80129dc:	4618      	mov	r0, r3
 80129de:	3714      	adds	r7, #20
 80129e0:	46bd      	mov	sp, r7
 80129e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e6:	4770      	bx	lr

080129e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b084      	sub	sp, #16
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
 80129f0:	460b      	mov	r3, r1
 80129f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129f4:	2300      	movs	r3, #0
 80129f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129f8:	2300      	movs	r3, #0
 80129fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012a02:	78fa      	ldrb	r2, [r7, #3]
 8012a04:	4611      	mov	r1, r2
 8012a06:	4618      	mov	r0, r3
 8012a08:	f7f4 fb94 	bl	8007134 <HAL_PCD_SetAddress>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a10:	7bfb      	ldrb	r3, [r7, #15]
 8012a12:	4618      	mov	r0, r3
 8012a14:	f000 f8c0 	bl	8012b98 <USBD_Get_USB_Status>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	3710      	adds	r7, #16
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}

08012a26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012a26:	b580      	push	{r7, lr}
 8012a28:	b086      	sub	sp, #24
 8012a2a:	af00      	add	r7, sp, #0
 8012a2c:	60f8      	str	r0, [r7, #12]
 8012a2e:	607a      	str	r2, [r7, #4]
 8012a30:	603b      	str	r3, [r7, #0]
 8012a32:	460b      	mov	r3, r1
 8012a34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a36:	2300      	movs	r3, #0
 8012a38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012a44:	7af9      	ldrb	r1, [r7, #11]
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	687a      	ldr	r2, [r7, #4]
 8012a4a:	f7f4 fc27 	bl	800729c <HAL_PCD_EP_Transmit>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a52:	7dfb      	ldrb	r3, [r7, #23]
 8012a54:	4618      	mov	r0, r3
 8012a56:	f000 f89f 	bl	8012b98 <USBD_Get_USB_Status>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012a5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8012a60:	4618      	mov	r0, r3
 8012a62:	3718      	adds	r7, #24
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bd80      	pop	{r7, pc}

08012a68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b086      	sub	sp, #24
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	60f8      	str	r0, [r7, #12]
 8012a70:	607a      	str	r2, [r7, #4]
 8012a72:	603b      	str	r3, [r7, #0]
 8012a74:	460b      	mov	r3, r1
 8012a76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a78:	2300      	movs	r3, #0
 8012a7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012a86:	7af9      	ldrb	r1, [r7, #11]
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	687a      	ldr	r2, [r7, #4]
 8012a8c:	f7f4 fbd5 	bl	800723a <HAL_PCD_EP_Receive>
 8012a90:	4603      	mov	r3, r0
 8012a92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a94:	7dfb      	ldrb	r3, [r7, #23]
 8012a96:	4618      	mov	r0, r3
 8012a98:	f000 f87e 	bl	8012b98 <USBD_Get_USB_Status>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012aa0:	7dbb      	ldrb	r3, [r7, #22]
}
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	3718      	adds	r7, #24
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	bd80      	pop	{r7, pc}
	...

08012aac <USBD_LL_BatterryCharging>:
  * @brief
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatterryCharging(USBD_HandleTypeDef *pdev)
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b082      	sub	sp, #8
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1) == GPIO_PIN_SET)
 8012ab4:	2102      	movs	r1, #2
 8012ab6:	480d      	ldr	r0, [pc, #52]	@ (8012aec <USBD_LL_BatterryCharging+0x40>)
 8012ab8:	f7f3 fc18 	bl	80062ec <HAL_GPIO_ReadPin>
 8012abc:	4603      	mov	r3, r0
 8012abe:	2b01      	cmp	r3, #1
 8012ac0:	d10f      	bne.n	8012ae2 <USBD_LL_BatterryCharging+0x36>
  {
    /*wait for bus stabilization*/
    HAL_Delay(450);
 8012ac2:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8012ac6:	f7f1 fd53 	bl	8004570 <HAL_Delay>
    /*Start BCD Detect*/
    HAL_PCDEx_ActivateBCD (pdev->pData);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f7f5 fd8f 	bl	80085f4 <HAL_PCDEx_ActivateBCD>
    HAL_PCDEx_BCD_VBUSDetect(pdev->pData);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012adc:	4618      	mov	r0, r3
 8012ade:	f7f5 fddf 	bl	80086a0 <HAL_PCDEx_BCD_VBUSDetect>
  }
  return USBD_OK;
 8012ae2:	2300      	movs	r3, #0
}
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	3708      	adds	r7, #8
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	bd80      	pop	{r7, pc}
 8012aec:	48001400 	.word	0x48001400

08012af0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b082      	sub	sp, #8
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
 8012af8:	460b      	mov	r3, r1
 8012afa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8012afc:	78fb      	ldrb	r3, [r7, #3]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d002      	beq.n	8012b08 <HAL_PCDEx_LPM_Callback+0x18>
 8012b02:	2b01      	cmp	r3, #1
 8012b04:	d013      	beq.n	8012b2e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8012b06:	e023      	b.n	8012b50 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	7a5b      	ldrb	r3, [r3, #9]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d007      	beq.n	8012b20 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8012b10:	f000 f83c 	bl	8012b8c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012b14:	4b10      	ldr	r3, [pc, #64]	@ (8012b58 <HAL_PCDEx_LPM_Callback+0x68>)
 8012b16:	691b      	ldr	r3, [r3, #16]
 8012b18:	4a0f      	ldr	r2, [pc, #60]	@ (8012b58 <HAL_PCDEx_LPM_Callback+0x68>)
 8012b1a:	f023 0306 	bic.w	r3, r3, #6
 8012b1e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012b26:	4618      	mov	r0, r3
 8012b28:	f7fe fccf 	bl	80114ca <USBD_LL_Resume>
    break;
 8012b2c:	e010      	b.n	8012b50 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012b34:	4618      	mov	r0, r3
 8012b36:	f7fe fcb2 	bl	801149e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	7a5b      	ldrb	r3, [r3, #9]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d005      	beq.n	8012b4e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012b42:	4b05      	ldr	r3, [pc, #20]	@ (8012b58 <HAL_PCDEx_LPM_Callback+0x68>)
 8012b44:	691b      	ldr	r3, [r3, #16]
 8012b46:	4a04      	ldr	r2, [pc, #16]	@ (8012b58 <HAL_PCDEx_LPM_Callback+0x68>)
 8012b48:	f043 0306 	orr.w	r3, r3, #6
 8012b4c:	6113      	str	r3, [r2, #16]
    break;
 8012b4e:	bf00      	nop
}
 8012b50:	bf00      	nop
 8012b52:	3708      	adds	r7, #8
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd80      	pop	{r7, pc}
 8012b58:	e000ed00 	.word	0xe000ed00

08012b5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012b5c:	b480      	push	{r7}
 8012b5e:	b083      	sub	sp, #12
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012b64:	4b03      	ldr	r3, [pc, #12]	@ (8012b74 <USBD_static_malloc+0x18>)
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	370c      	adds	r7, #12
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b70:	4770      	bx	lr
 8012b72:	bf00      	nop
 8012b74:	2000116c 	.word	0x2000116c

08012b78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012b78:	b480      	push	{r7}
 8012b7a:	b083      	sub	sp, #12
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]

}
 8012b80:	bf00      	nop
 8012b82:	370c      	adds	r7, #12
 8012b84:	46bd      	mov	sp, r7
 8012b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8a:	4770      	bx	lr

08012b8c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8012b90:	f7ee fe72 	bl	8001878 <SystemClock_Config>
}
 8012b94:	bf00      	nop
 8012b96:	bd80      	pop	{r7, pc}

08012b98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012b98:	b480      	push	{r7}
 8012b9a:	b085      	sub	sp, #20
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012ba6:	79fb      	ldrb	r3, [r7, #7]
 8012ba8:	2b03      	cmp	r3, #3
 8012baa:	d817      	bhi.n	8012bdc <USBD_Get_USB_Status+0x44>
 8012bac:	a201      	add	r2, pc, #4	@ (adr r2, 8012bb4 <USBD_Get_USB_Status+0x1c>)
 8012bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bb2:	bf00      	nop
 8012bb4:	08012bc5 	.word	0x08012bc5
 8012bb8:	08012bcb 	.word	0x08012bcb
 8012bbc:	08012bd1 	.word	0x08012bd1
 8012bc0:	08012bd7 	.word	0x08012bd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	73fb      	strb	r3, [r7, #15]
    break;
 8012bc8:	e00b      	b.n	8012be2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012bca:	2303      	movs	r3, #3
 8012bcc:	73fb      	strb	r3, [r7, #15]
    break;
 8012bce:	e008      	b.n	8012be2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012bd0:	2301      	movs	r3, #1
 8012bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8012bd4:	e005      	b.n	8012be2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012bd6:	2303      	movs	r3, #3
 8012bd8:	73fb      	strb	r3, [r7, #15]
    break;
 8012bda:	e002      	b.n	8012be2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012bdc:	2303      	movs	r3, #3
 8012bde:	73fb      	strb	r3, [r7, #15]
    break;
 8012be0:	bf00      	nop
  }
  return usb_status;
 8012be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012be4:	4618      	mov	r0, r3
 8012be6:	3714      	adds	r7, #20
 8012be8:	46bd      	mov	sp, r7
 8012bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bee:	4770      	bx	lr

08012bf0 <__cvt>:
 8012bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012bf4:	ec57 6b10 	vmov	r6, r7, d0
 8012bf8:	2f00      	cmp	r7, #0
 8012bfa:	460c      	mov	r4, r1
 8012bfc:	4619      	mov	r1, r3
 8012bfe:	463b      	mov	r3, r7
 8012c00:	bfbb      	ittet	lt
 8012c02:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8012c06:	461f      	movlt	r7, r3
 8012c08:	2300      	movge	r3, #0
 8012c0a:	232d      	movlt	r3, #45	@ 0x2d
 8012c0c:	700b      	strb	r3, [r1, #0]
 8012c0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012c10:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012c14:	4691      	mov	r9, r2
 8012c16:	f023 0820 	bic.w	r8, r3, #32
 8012c1a:	bfbc      	itt	lt
 8012c1c:	4632      	movlt	r2, r6
 8012c1e:	4616      	movlt	r6, r2
 8012c20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012c24:	d005      	beq.n	8012c32 <__cvt+0x42>
 8012c26:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012c2a:	d100      	bne.n	8012c2e <__cvt+0x3e>
 8012c2c:	3401      	adds	r4, #1
 8012c2e:	2102      	movs	r1, #2
 8012c30:	e000      	b.n	8012c34 <__cvt+0x44>
 8012c32:	2103      	movs	r1, #3
 8012c34:	ab03      	add	r3, sp, #12
 8012c36:	9301      	str	r3, [sp, #4]
 8012c38:	ab02      	add	r3, sp, #8
 8012c3a:	9300      	str	r3, [sp, #0]
 8012c3c:	ec47 6b10 	vmov	d0, r6, r7
 8012c40:	4653      	mov	r3, sl
 8012c42:	4622      	mov	r2, r4
 8012c44:	f000 ff70 	bl	8013b28 <_dtoa_r>
 8012c48:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012c4c:	4605      	mov	r5, r0
 8012c4e:	d119      	bne.n	8012c84 <__cvt+0x94>
 8012c50:	f019 0f01 	tst.w	r9, #1
 8012c54:	d00e      	beq.n	8012c74 <__cvt+0x84>
 8012c56:	eb00 0904 	add.w	r9, r0, r4
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	4630      	mov	r0, r6
 8012c60:	4639      	mov	r1, r7
 8012c62:	f7ed ff59 	bl	8000b18 <__aeabi_dcmpeq>
 8012c66:	b108      	cbz	r0, 8012c6c <__cvt+0x7c>
 8012c68:	f8cd 900c 	str.w	r9, [sp, #12]
 8012c6c:	2230      	movs	r2, #48	@ 0x30
 8012c6e:	9b03      	ldr	r3, [sp, #12]
 8012c70:	454b      	cmp	r3, r9
 8012c72:	d31e      	bcc.n	8012cb2 <__cvt+0xc2>
 8012c74:	9b03      	ldr	r3, [sp, #12]
 8012c76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012c78:	1b5b      	subs	r3, r3, r5
 8012c7a:	4628      	mov	r0, r5
 8012c7c:	6013      	str	r3, [r2, #0]
 8012c7e:	b004      	add	sp, #16
 8012c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012c88:	eb00 0904 	add.w	r9, r0, r4
 8012c8c:	d1e5      	bne.n	8012c5a <__cvt+0x6a>
 8012c8e:	7803      	ldrb	r3, [r0, #0]
 8012c90:	2b30      	cmp	r3, #48	@ 0x30
 8012c92:	d10a      	bne.n	8012caa <__cvt+0xba>
 8012c94:	2200      	movs	r2, #0
 8012c96:	2300      	movs	r3, #0
 8012c98:	4630      	mov	r0, r6
 8012c9a:	4639      	mov	r1, r7
 8012c9c:	f7ed ff3c 	bl	8000b18 <__aeabi_dcmpeq>
 8012ca0:	b918      	cbnz	r0, 8012caa <__cvt+0xba>
 8012ca2:	f1c4 0401 	rsb	r4, r4, #1
 8012ca6:	f8ca 4000 	str.w	r4, [sl]
 8012caa:	f8da 3000 	ldr.w	r3, [sl]
 8012cae:	4499      	add	r9, r3
 8012cb0:	e7d3      	b.n	8012c5a <__cvt+0x6a>
 8012cb2:	1c59      	adds	r1, r3, #1
 8012cb4:	9103      	str	r1, [sp, #12]
 8012cb6:	701a      	strb	r2, [r3, #0]
 8012cb8:	e7d9      	b.n	8012c6e <__cvt+0x7e>

08012cba <__exponent>:
 8012cba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012cbc:	2900      	cmp	r1, #0
 8012cbe:	bfba      	itte	lt
 8012cc0:	4249      	neglt	r1, r1
 8012cc2:	232d      	movlt	r3, #45	@ 0x2d
 8012cc4:	232b      	movge	r3, #43	@ 0x2b
 8012cc6:	2909      	cmp	r1, #9
 8012cc8:	7002      	strb	r2, [r0, #0]
 8012cca:	7043      	strb	r3, [r0, #1]
 8012ccc:	dd29      	ble.n	8012d22 <__exponent+0x68>
 8012cce:	f10d 0307 	add.w	r3, sp, #7
 8012cd2:	461d      	mov	r5, r3
 8012cd4:	270a      	movs	r7, #10
 8012cd6:	461a      	mov	r2, r3
 8012cd8:	fbb1 f6f7 	udiv	r6, r1, r7
 8012cdc:	fb07 1416 	mls	r4, r7, r6, r1
 8012ce0:	3430      	adds	r4, #48	@ 0x30
 8012ce2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012ce6:	460c      	mov	r4, r1
 8012ce8:	2c63      	cmp	r4, #99	@ 0x63
 8012cea:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8012cee:	4631      	mov	r1, r6
 8012cf0:	dcf1      	bgt.n	8012cd6 <__exponent+0x1c>
 8012cf2:	3130      	adds	r1, #48	@ 0x30
 8012cf4:	1e94      	subs	r4, r2, #2
 8012cf6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012cfa:	1c41      	adds	r1, r0, #1
 8012cfc:	4623      	mov	r3, r4
 8012cfe:	42ab      	cmp	r3, r5
 8012d00:	d30a      	bcc.n	8012d18 <__exponent+0x5e>
 8012d02:	f10d 0309 	add.w	r3, sp, #9
 8012d06:	1a9b      	subs	r3, r3, r2
 8012d08:	42ac      	cmp	r4, r5
 8012d0a:	bf88      	it	hi
 8012d0c:	2300      	movhi	r3, #0
 8012d0e:	3302      	adds	r3, #2
 8012d10:	4403      	add	r3, r0
 8012d12:	1a18      	subs	r0, r3, r0
 8012d14:	b003      	add	sp, #12
 8012d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d18:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012d1c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012d20:	e7ed      	b.n	8012cfe <__exponent+0x44>
 8012d22:	2330      	movs	r3, #48	@ 0x30
 8012d24:	3130      	adds	r1, #48	@ 0x30
 8012d26:	7083      	strb	r3, [r0, #2]
 8012d28:	70c1      	strb	r1, [r0, #3]
 8012d2a:	1d03      	adds	r3, r0, #4
 8012d2c:	e7f1      	b.n	8012d12 <__exponent+0x58>
	...

08012d30 <_printf_float>:
 8012d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d34:	b08d      	sub	sp, #52	@ 0x34
 8012d36:	460c      	mov	r4, r1
 8012d38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012d3c:	4616      	mov	r6, r2
 8012d3e:	461f      	mov	r7, r3
 8012d40:	4605      	mov	r5, r0
 8012d42:	f000 fdf7 	bl	8013934 <_localeconv_r>
 8012d46:	6803      	ldr	r3, [r0, #0]
 8012d48:	9304      	str	r3, [sp, #16]
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f7ed fab8 	bl	80002c0 <strlen>
 8012d50:	2300      	movs	r3, #0
 8012d52:	930a      	str	r3, [sp, #40]	@ 0x28
 8012d54:	f8d8 3000 	ldr.w	r3, [r8]
 8012d58:	9005      	str	r0, [sp, #20]
 8012d5a:	3307      	adds	r3, #7
 8012d5c:	f023 0307 	bic.w	r3, r3, #7
 8012d60:	f103 0208 	add.w	r2, r3, #8
 8012d64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012d68:	f8d4 b000 	ldr.w	fp, [r4]
 8012d6c:	f8c8 2000 	str.w	r2, [r8]
 8012d70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012d74:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012d78:	9307      	str	r3, [sp, #28]
 8012d7a:	f8cd 8018 	str.w	r8, [sp, #24]
 8012d7e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012d82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d86:	4b9c      	ldr	r3, [pc, #624]	@ (8012ff8 <_printf_float+0x2c8>)
 8012d88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012d8c:	f7ed fef6 	bl	8000b7c <__aeabi_dcmpun>
 8012d90:	bb70      	cbnz	r0, 8012df0 <_printf_float+0xc0>
 8012d92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d96:	4b98      	ldr	r3, [pc, #608]	@ (8012ff8 <_printf_float+0x2c8>)
 8012d98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012d9c:	f7ed fed0 	bl	8000b40 <__aeabi_dcmple>
 8012da0:	bb30      	cbnz	r0, 8012df0 <_printf_float+0xc0>
 8012da2:	2200      	movs	r2, #0
 8012da4:	2300      	movs	r3, #0
 8012da6:	4640      	mov	r0, r8
 8012da8:	4649      	mov	r1, r9
 8012daa:	f7ed febf 	bl	8000b2c <__aeabi_dcmplt>
 8012dae:	b110      	cbz	r0, 8012db6 <_printf_float+0x86>
 8012db0:	232d      	movs	r3, #45	@ 0x2d
 8012db2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012db6:	4a91      	ldr	r2, [pc, #580]	@ (8012ffc <_printf_float+0x2cc>)
 8012db8:	4b91      	ldr	r3, [pc, #580]	@ (8013000 <_printf_float+0x2d0>)
 8012dba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012dbe:	bf94      	ite	ls
 8012dc0:	4690      	movls	r8, r2
 8012dc2:	4698      	movhi	r8, r3
 8012dc4:	2303      	movs	r3, #3
 8012dc6:	6123      	str	r3, [r4, #16]
 8012dc8:	f02b 0304 	bic.w	r3, fp, #4
 8012dcc:	6023      	str	r3, [r4, #0]
 8012dce:	f04f 0900 	mov.w	r9, #0
 8012dd2:	9700      	str	r7, [sp, #0]
 8012dd4:	4633      	mov	r3, r6
 8012dd6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012dd8:	4621      	mov	r1, r4
 8012dda:	4628      	mov	r0, r5
 8012ddc:	f000 fa7c 	bl	80132d8 <_printf_common>
 8012de0:	3001      	adds	r0, #1
 8012de2:	f040 808d 	bne.w	8012f00 <_printf_float+0x1d0>
 8012de6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012dea:	b00d      	add	sp, #52	@ 0x34
 8012dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012df0:	4642      	mov	r2, r8
 8012df2:	464b      	mov	r3, r9
 8012df4:	4640      	mov	r0, r8
 8012df6:	4649      	mov	r1, r9
 8012df8:	f7ed fec0 	bl	8000b7c <__aeabi_dcmpun>
 8012dfc:	b140      	cbz	r0, 8012e10 <_printf_float+0xe0>
 8012dfe:	464b      	mov	r3, r9
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	bfbc      	itt	lt
 8012e04:	232d      	movlt	r3, #45	@ 0x2d
 8012e06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012e0a:	4a7e      	ldr	r2, [pc, #504]	@ (8013004 <_printf_float+0x2d4>)
 8012e0c:	4b7e      	ldr	r3, [pc, #504]	@ (8013008 <_printf_float+0x2d8>)
 8012e0e:	e7d4      	b.n	8012dba <_printf_float+0x8a>
 8012e10:	6863      	ldr	r3, [r4, #4]
 8012e12:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012e16:	9206      	str	r2, [sp, #24]
 8012e18:	1c5a      	adds	r2, r3, #1
 8012e1a:	d13b      	bne.n	8012e94 <_printf_float+0x164>
 8012e1c:	2306      	movs	r3, #6
 8012e1e:	6063      	str	r3, [r4, #4]
 8012e20:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012e24:	2300      	movs	r3, #0
 8012e26:	6022      	str	r2, [r4, #0]
 8012e28:	9303      	str	r3, [sp, #12]
 8012e2a:	ab0a      	add	r3, sp, #40	@ 0x28
 8012e2c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012e30:	ab09      	add	r3, sp, #36	@ 0x24
 8012e32:	9300      	str	r3, [sp, #0]
 8012e34:	6861      	ldr	r1, [r4, #4]
 8012e36:	ec49 8b10 	vmov	d0, r8, r9
 8012e3a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012e3e:	4628      	mov	r0, r5
 8012e40:	f7ff fed6 	bl	8012bf0 <__cvt>
 8012e44:	9b06      	ldr	r3, [sp, #24]
 8012e46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012e48:	2b47      	cmp	r3, #71	@ 0x47
 8012e4a:	4680      	mov	r8, r0
 8012e4c:	d129      	bne.n	8012ea2 <_printf_float+0x172>
 8012e4e:	1cc8      	adds	r0, r1, #3
 8012e50:	db02      	blt.n	8012e58 <_printf_float+0x128>
 8012e52:	6863      	ldr	r3, [r4, #4]
 8012e54:	4299      	cmp	r1, r3
 8012e56:	dd41      	ble.n	8012edc <_printf_float+0x1ac>
 8012e58:	f1aa 0a02 	sub.w	sl, sl, #2
 8012e5c:	fa5f fa8a 	uxtb.w	sl, sl
 8012e60:	3901      	subs	r1, #1
 8012e62:	4652      	mov	r2, sl
 8012e64:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012e68:	9109      	str	r1, [sp, #36]	@ 0x24
 8012e6a:	f7ff ff26 	bl	8012cba <__exponent>
 8012e6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012e70:	1813      	adds	r3, r2, r0
 8012e72:	2a01      	cmp	r2, #1
 8012e74:	4681      	mov	r9, r0
 8012e76:	6123      	str	r3, [r4, #16]
 8012e78:	dc02      	bgt.n	8012e80 <_printf_float+0x150>
 8012e7a:	6822      	ldr	r2, [r4, #0]
 8012e7c:	07d2      	lsls	r2, r2, #31
 8012e7e:	d501      	bpl.n	8012e84 <_printf_float+0x154>
 8012e80:	3301      	adds	r3, #1
 8012e82:	6123      	str	r3, [r4, #16]
 8012e84:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d0a2      	beq.n	8012dd2 <_printf_float+0xa2>
 8012e8c:	232d      	movs	r3, #45	@ 0x2d
 8012e8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012e92:	e79e      	b.n	8012dd2 <_printf_float+0xa2>
 8012e94:	9a06      	ldr	r2, [sp, #24]
 8012e96:	2a47      	cmp	r2, #71	@ 0x47
 8012e98:	d1c2      	bne.n	8012e20 <_printf_float+0xf0>
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d1c0      	bne.n	8012e20 <_printf_float+0xf0>
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	e7bd      	b.n	8012e1e <_printf_float+0xee>
 8012ea2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012ea6:	d9db      	bls.n	8012e60 <_printf_float+0x130>
 8012ea8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012eac:	d118      	bne.n	8012ee0 <_printf_float+0x1b0>
 8012eae:	2900      	cmp	r1, #0
 8012eb0:	6863      	ldr	r3, [r4, #4]
 8012eb2:	dd0b      	ble.n	8012ecc <_printf_float+0x19c>
 8012eb4:	6121      	str	r1, [r4, #16]
 8012eb6:	b913      	cbnz	r3, 8012ebe <_printf_float+0x18e>
 8012eb8:	6822      	ldr	r2, [r4, #0]
 8012eba:	07d0      	lsls	r0, r2, #31
 8012ebc:	d502      	bpl.n	8012ec4 <_printf_float+0x194>
 8012ebe:	3301      	adds	r3, #1
 8012ec0:	440b      	add	r3, r1
 8012ec2:	6123      	str	r3, [r4, #16]
 8012ec4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012ec6:	f04f 0900 	mov.w	r9, #0
 8012eca:	e7db      	b.n	8012e84 <_printf_float+0x154>
 8012ecc:	b913      	cbnz	r3, 8012ed4 <_printf_float+0x1a4>
 8012ece:	6822      	ldr	r2, [r4, #0]
 8012ed0:	07d2      	lsls	r2, r2, #31
 8012ed2:	d501      	bpl.n	8012ed8 <_printf_float+0x1a8>
 8012ed4:	3302      	adds	r3, #2
 8012ed6:	e7f4      	b.n	8012ec2 <_printf_float+0x192>
 8012ed8:	2301      	movs	r3, #1
 8012eda:	e7f2      	b.n	8012ec2 <_printf_float+0x192>
 8012edc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012ee0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ee2:	4299      	cmp	r1, r3
 8012ee4:	db05      	blt.n	8012ef2 <_printf_float+0x1c2>
 8012ee6:	6823      	ldr	r3, [r4, #0]
 8012ee8:	6121      	str	r1, [r4, #16]
 8012eea:	07d8      	lsls	r0, r3, #31
 8012eec:	d5ea      	bpl.n	8012ec4 <_printf_float+0x194>
 8012eee:	1c4b      	adds	r3, r1, #1
 8012ef0:	e7e7      	b.n	8012ec2 <_printf_float+0x192>
 8012ef2:	2900      	cmp	r1, #0
 8012ef4:	bfd4      	ite	le
 8012ef6:	f1c1 0202 	rsble	r2, r1, #2
 8012efa:	2201      	movgt	r2, #1
 8012efc:	4413      	add	r3, r2
 8012efe:	e7e0      	b.n	8012ec2 <_printf_float+0x192>
 8012f00:	6823      	ldr	r3, [r4, #0]
 8012f02:	055a      	lsls	r2, r3, #21
 8012f04:	d407      	bmi.n	8012f16 <_printf_float+0x1e6>
 8012f06:	6923      	ldr	r3, [r4, #16]
 8012f08:	4642      	mov	r2, r8
 8012f0a:	4631      	mov	r1, r6
 8012f0c:	4628      	mov	r0, r5
 8012f0e:	47b8      	blx	r7
 8012f10:	3001      	adds	r0, #1
 8012f12:	d12b      	bne.n	8012f6c <_printf_float+0x23c>
 8012f14:	e767      	b.n	8012de6 <_printf_float+0xb6>
 8012f16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012f1a:	f240 80dd 	bls.w	80130d8 <_printf_float+0x3a8>
 8012f1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012f22:	2200      	movs	r2, #0
 8012f24:	2300      	movs	r3, #0
 8012f26:	f7ed fdf7 	bl	8000b18 <__aeabi_dcmpeq>
 8012f2a:	2800      	cmp	r0, #0
 8012f2c:	d033      	beq.n	8012f96 <_printf_float+0x266>
 8012f2e:	4a37      	ldr	r2, [pc, #220]	@ (801300c <_printf_float+0x2dc>)
 8012f30:	2301      	movs	r3, #1
 8012f32:	4631      	mov	r1, r6
 8012f34:	4628      	mov	r0, r5
 8012f36:	47b8      	blx	r7
 8012f38:	3001      	adds	r0, #1
 8012f3a:	f43f af54 	beq.w	8012de6 <_printf_float+0xb6>
 8012f3e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012f42:	4543      	cmp	r3, r8
 8012f44:	db02      	blt.n	8012f4c <_printf_float+0x21c>
 8012f46:	6823      	ldr	r3, [r4, #0]
 8012f48:	07d8      	lsls	r0, r3, #31
 8012f4a:	d50f      	bpl.n	8012f6c <_printf_float+0x23c>
 8012f4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f50:	4631      	mov	r1, r6
 8012f52:	4628      	mov	r0, r5
 8012f54:	47b8      	blx	r7
 8012f56:	3001      	adds	r0, #1
 8012f58:	f43f af45 	beq.w	8012de6 <_printf_float+0xb6>
 8012f5c:	f04f 0900 	mov.w	r9, #0
 8012f60:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8012f64:	f104 0a1a 	add.w	sl, r4, #26
 8012f68:	45c8      	cmp	r8, r9
 8012f6a:	dc09      	bgt.n	8012f80 <_printf_float+0x250>
 8012f6c:	6823      	ldr	r3, [r4, #0]
 8012f6e:	079b      	lsls	r3, r3, #30
 8012f70:	f100 8103 	bmi.w	801317a <_printf_float+0x44a>
 8012f74:	68e0      	ldr	r0, [r4, #12]
 8012f76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012f78:	4298      	cmp	r0, r3
 8012f7a:	bfb8      	it	lt
 8012f7c:	4618      	movlt	r0, r3
 8012f7e:	e734      	b.n	8012dea <_printf_float+0xba>
 8012f80:	2301      	movs	r3, #1
 8012f82:	4652      	mov	r2, sl
 8012f84:	4631      	mov	r1, r6
 8012f86:	4628      	mov	r0, r5
 8012f88:	47b8      	blx	r7
 8012f8a:	3001      	adds	r0, #1
 8012f8c:	f43f af2b 	beq.w	8012de6 <_printf_float+0xb6>
 8012f90:	f109 0901 	add.w	r9, r9, #1
 8012f94:	e7e8      	b.n	8012f68 <_printf_float+0x238>
 8012f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	dc39      	bgt.n	8013010 <_printf_float+0x2e0>
 8012f9c:	4a1b      	ldr	r2, [pc, #108]	@ (801300c <_printf_float+0x2dc>)
 8012f9e:	2301      	movs	r3, #1
 8012fa0:	4631      	mov	r1, r6
 8012fa2:	4628      	mov	r0, r5
 8012fa4:	47b8      	blx	r7
 8012fa6:	3001      	adds	r0, #1
 8012fa8:	f43f af1d 	beq.w	8012de6 <_printf_float+0xb6>
 8012fac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012fb0:	ea59 0303 	orrs.w	r3, r9, r3
 8012fb4:	d102      	bne.n	8012fbc <_printf_float+0x28c>
 8012fb6:	6823      	ldr	r3, [r4, #0]
 8012fb8:	07d9      	lsls	r1, r3, #31
 8012fba:	d5d7      	bpl.n	8012f6c <_printf_float+0x23c>
 8012fbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012fc0:	4631      	mov	r1, r6
 8012fc2:	4628      	mov	r0, r5
 8012fc4:	47b8      	blx	r7
 8012fc6:	3001      	adds	r0, #1
 8012fc8:	f43f af0d 	beq.w	8012de6 <_printf_float+0xb6>
 8012fcc:	f04f 0a00 	mov.w	sl, #0
 8012fd0:	f104 0b1a 	add.w	fp, r4, #26
 8012fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012fd6:	425b      	negs	r3, r3
 8012fd8:	4553      	cmp	r3, sl
 8012fda:	dc01      	bgt.n	8012fe0 <_printf_float+0x2b0>
 8012fdc:	464b      	mov	r3, r9
 8012fde:	e793      	b.n	8012f08 <_printf_float+0x1d8>
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	465a      	mov	r2, fp
 8012fe4:	4631      	mov	r1, r6
 8012fe6:	4628      	mov	r0, r5
 8012fe8:	47b8      	blx	r7
 8012fea:	3001      	adds	r0, #1
 8012fec:	f43f aefb 	beq.w	8012de6 <_printf_float+0xb6>
 8012ff0:	f10a 0a01 	add.w	sl, sl, #1
 8012ff4:	e7ee      	b.n	8012fd4 <_printf_float+0x2a4>
 8012ff6:	bf00      	nop
 8012ff8:	7fefffff 	.word	0x7fefffff
 8012ffc:	08016bf0 	.word	0x08016bf0
 8013000:	08016bf4 	.word	0x08016bf4
 8013004:	08016bf8 	.word	0x08016bf8
 8013008:	08016bfc 	.word	0x08016bfc
 801300c:	08016c00 	.word	0x08016c00
 8013010:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013012:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013016:	4553      	cmp	r3, sl
 8013018:	bfa8      	it	ge
 801301a:	4653      	movge	r3, sl
 801301c:	2b00      	cmp	r3, #0
 801301e:	4699      	mov	r9, r3
 8013020:	dc36      	bgt.n	8013090 <_printf_float+0x360>
 8013022:	f04f 0b00 	mov.w	fp, #0
 8013026:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801302a:	f104 021a 	add.w	r2, r4, #26
 801302e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013030:	9306      	str	r3, [sp, #24]
 8013032:	eba3 0309 	sub.w	r3, r3, r9
 8013036:	455b      	cmp	r3, fp
 8013038:	dc31      	bgt.n	801309e <_printf_float+0x36e>
 801303a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801303c:	459a      	cmp	sl, r3
 801303e:	dc3a      	bgt.n	80130b6 <_printf_float+0x386>
 8013040:	6823      	ldr	r3, [r4, #0]
 8013042:	07da      	lsls	r2, r3, #31
 8013044:	d437      	bmi.n	80130b6 <_printf_float+0x386>
 8013046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013048:	ebaa 0903 	sub.w	r9, sl, r3
 801304c:	9b06      	ldr	r3, [sp, #24]
 801304e:	ebaa 0303 	sub.w	r3, sl, r3
 8013052:	4599      	cmp	r9, r3
 8013054:	bfa8      	it	ge
 8013056:	4699      	movge	r9, r3
 8013058:	f1b9 0f00 	cmp.w	r9, #0
 801305c:	dc33      	bgt.n	80130c6 <_printf_float+0x396>
 801305e:	f04f 0800 	mov.w	r8, #0
 8013062:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013066:	f104 0b1a 	add.w	fp, r4, #26
 801306a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801306c:	ebaa 0303 	sub.w	r3, sl, r3
 8013070:	eba3 0309 	sub.w	r3, r3, r9
 8013074:	4543      	cmp	r3, r8
 8013076:	f77f af79 	ble.w	8012f6c <_printf_float+0x23c>
 801307a:	2301      	movs	r3, #1
 801307c:	465a      	mov	r2, fp
 801307e:	4631      	mov	r1, r6
 8013080:	4628      	mov	r0, r5
 8013082:	47b8      	blx	r7
 8013084:	3001      	adds	r0, #1
 8013086:	f43f aeae 	beq.w	8012de6 <_printf_float+0xb6>
 801308a:	f108 0801 	add.w	r8, r8, #1
 801308e:	e7ec      	b.n	801306a <_printf_float+0x33a>
 8013090:	4642      	mov	r2, r8
 8013092:	4631      	mov	r1, r6
 8013094:	4628      	mov	r0, r5
 8013096:	47b8      	blx	r7
 8013098:	3001      	adds	r0, #1
 801309a:	d1c2      	bne.n	8013022 <_printf_float+0x2f2>
 801309c:	e6a3      	b.n	8012de6 <_printf_float+0xb6>
 801309e:	2301      	movs	r3, #1
 80130a0:	4631      	mov	r1, r6
 80130a2:	4628      	mov	r0, r5
 80130a4:	9206      	str	r2, [sp, #24]
 80130a6:	47b8      	blx	r7
 80130a8:	3001      	adds	r0, #1
 80130aa:	f43f ae9c 	beq.w	8012de6 <_printf_float+0xb6>
 80130ae:	9a06      	ldr	r2, [sp, #24]
 80130b0:	f10b 0b01 	add.w	fp, fp, #1
 80130b4:	e7bb      	b.n	801302e <_printf_float+0x2fe>
 80130b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80130ba:	4631      	mov	r1, r6
 80130bc:	4628      	mov	r0, r5
 80130be:	47b8      	blx	r7
 80130c0:	3001      	adds	r0, #1
 80130c2:	d1c0      	bne.n	8013046 <_printf_float+0x316>
 80130c4:	e68f      	b.n	8012de6 <_printf_float+0xb6>
 80130c6:	9a06      	ldr	r2, [sp, #24]
 80130c8:	464b      	mov	r3, r9
 80130ca:	4442      	add	r2, r8
 80130cc:	4631      	mov	r1, r6
 80130ce:	4628      	mov	r0, r5
 80130d0:	47b8      	blx	r7
 80130d2:	3001      	adds	r0, #1
 80130d4:	d1c3      	bne.n	801305e <_printf_float+0x32e>
 80130d6:	e686      	b.n	8012de6 <_printf_float+0xb6>
 80130d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80130dc:	f1ba 0f01 	cmp.w	sl, #1
 80130e0:	dc01      	bgt.n	80130e6 <_printf_float+0x3b6>
 80130e2:	07db      	lsls	r3, r3, #31
 80130e4:	d536      	bpl.n	8013154 <_printf_float+0x424>
 80130e6:	2301      	movs	r3, #1
 80130e8:	4642      	mov	r2, r8
 80130ea:	4631      	mov	r1, r6
 80130ec:	4628      	mov	r0, r5
 80130ee:	47b8      	blx	r7
 80130f0:	3001      	adds	r0, #1
 80130f2:	f43f ae78 	beq.w	8012de6 <_printf_float+0xb6>
 80130f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80130fa:	4631      	mov	r1, r6
 80130fc:	4628      	mov	r0, r5
 80130fe:	47b8      	blx	r7
 8013100:	3001      	adds	r0, #1
 8013102:	f43f ae70 	beq.w	8012de6 <_printf_float+0xb6>
 8013106:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801310a:	2200      	movs	r2, #0
 801310c:	2300      	movs	r3, #0
 801310e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8013112:	f7ed fd01 	bl	8000b18 <__aeabi_dcmpeq>
 8013116:	b9c0      	cbnz	r0, 801314a <_printf_float+0x41a>
 8013118:	4653      	mov	r3, sl
 801311a:	f108 0201 	add.w	r2, r8, #1
 801311e:	4631      	mov	r1, r6
 8013120:	4628      	mov	r0, r5
 8013122:	47b8      	blx	r7
 8013124:	3001      	adds	r0, #1
 8013126:	d10c      	bne.n	8013142 <_printf_float+0x412>
 8013128:	e65d      	b.n	8012de6 <_printf_float+0xb6>
 801312a:	2301      	movs	r3, #1
 801312c:	465a      	mov	r2, fp
 801312e:	4631      	mov	r1, r6
 8013130:	4628      	mov	r0, r5
 8013132:	47b8      	blx	r7
 8013134:	3001      	adds	r0, #1
 8013136:	f43f ae56 	beq.w	8012de6 <_printf_float+0xb6>
 801313a:	f108 0801 	add.w	r8, r8, #1
 801313e:	45d0      	cmp	r8, sl
 8013140:	dbf3      	blt.n	801312a <_printf_float+0x3fa>
 8013142:	464b      	mov	r3, r9
 8013144:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013148:	e6df      	b.n	8012f0a <_printf_float+0x1da>
 801314a:	f04f 0800 	mov.w	r8, #0
 801314e:	f104 0b1a 	add.w	fp, r4, #26
 8013152:	e7f4      	b.n	801313e <_printf_float+0x40e>
 8013154:	2301      	movs	r3, #1
 8013156:	4642      	mov	r2, r8
 8013158:	e7e1      	b.n	801311e <_printf_float+0x3ee>
 801315a:	2301      	movs	r3, #1
 801315c:	464a      	mov	r2, r9
 801315e:	4631      	mov	r1, r6
 8013160:	4628      	mov	r0, r5
 8013162:	47b8      	blx	r7
 8013164:	3001      	adds	r0, #1
 8013166:	f43f ae3e 	beq.w	8012de6 <_printf_float+0xb6>
 801316a:	f108 0801 	add.w	r8, r8, #1
 801316e:	68e3      	ldr	r3, [r4, #12]
 8013170:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013172:	1a5b      	subs	r3, r3, r1
 8013174:	4543      	cmp	r3, r8
 8013176:	dcf0      	bgt.n	801315a <_printf_float+0x42a>
 8013178:	e6fc      	b.n	8012f74 <_printf_float+0x244>
 801317a:	f04f 0800 	mov.w	r8, #0
 801317e:	f104 0919 	add.w	r9, r4, #25
 8013182:	e7f4      	b.n	801316e <_printf_float+0x43e>

08013184 <malloc>:
 8013184:	4b02      	ldr	r3, [pc, #8]	@ (8013190 <malloc+0xc>)
 8013186:	4601      	mov	r1, r0
 8013188:	6818      	ldr	r0, [r3, #0]
 801318a:	f000 b825 	b.w	80131d8 <_malloc_r>
 801318e:	bf00      	nop
 8013190:	200000f0 	.word	0x200000f0

08013194 <sbrk_aligned>:
 8013194:	b570      	push	{r4, r5, r6, lr}
 8013196:	4e0f      	ldr	r6, [pc, #60]	@ (80131d4 <sbrk_aligned+0x40>)
 8013198:	460c      	mov	r4, r1
 801319a:	6831      	ldr	r1, [r6, #0]
 801319c:	4605      	mov	r5, r0
 801319e:	b911      	cbnz	r1, 80131a6 <sbrk_aligned+0x12>
 80131a0:	f000 fbcc 	bl	801393c <_sbrk_r>
 80131a4:	6030      	str	r0, [r6, #0]
 80131a6:	4621      	mov	r1, r4
 80131a8:	4628      	mov	r0, r5
 80131aa:	f000 fbc7 	bl	801393c <_sbrk_r>
 80131ae:	1c43      	adds	r3, r0, #1
 80131b0:	d103      	bne.n	80131ba <sbrk_aligned+0x26>
 80131b2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80131b6:	4620      	mov	r0, r4
 80131b8:	bd70      	pop	{r4, r5, r6, pc}
 80131ba:	1cc4      	adds	r4, r0, #3
 80131bc:	f024 0403 	bic.w	r4, r4, #3
 80131c0:	42a0      	cmp	r0, r4
 80131c2:	d0f8      	beq.n	80131b6 <sbrk_aligned+0x22>
 80131c4:	1a21      	subs	r1, r4, r0
 80131c6:	4628      	mov	r0, r5
 80131c8:	f000 fbb8 	bl	801393c <_sbrk_r>
 80131cc:	3001      	adds	r0, #1
 80131ce:	d1f2      	bne.n	80131b6 <sbrk_aligned+0x22>
 80131d0:	e7ef      	b.n	80131b2 <sbrk_aligned+0x1e>
 80131d2:	bf00      	nop
 80131d4:	2000158c 	.word	0x2000158c

080131d8 <_malloc_r>:
 80131d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131dc:	1ccd      	adds	r5, r1, #3
 80131de:	f025 0503 	bic.w	r5, r5, #3
 80131e2:	3508      	adds	r5, #8
 80131e4:	2d0c      	cmp	r5, #12
 80131e6:	bf38      	it	cc
 80131e8:	250c      	movcc	r5, #12
 80131ea:	2d00      	cmp	r5, #0
 80131ec:	4606      	mov	r6, r0
 80131ee:	db01      	blt.n	80131f4 <_malloc_r+0x1c>
 80131f0:	42a9      	cmp	r1, r5
 80131f2:	d904      	bls.n	80131fe <_malloc_r+0x26>
 80131f4:	230c      	movs	r3, #12
 80131f6:	6033      	str	r3, [r6, #0]
 80131f8:	2000      	movs	r0, #0
 80131fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80132d4 <_malloc_r+0xfc>
 8013202:	f000 f9f7 	bl	80135f4 <__malloc_lock>
 8013206:	f8d8 3000 	ldr.w	r3, [r8]
 801320a:	461c      	mov	r4, r3
 801320c:	bb44      	cbnz	r4, 8013260 <_malloc_r+0x88>
 801320e:	4629      	mov	r1, r5
 8013210:	4630      	mov	r0, r6
 8013212:	f7ff ffbf 	bl	8013194 <sbrk_aligned>
 8013216:	1c43      	adds	r3, r0, #1
 8013218:	4604      	mov	r4, r0
 801321a:	d158      	bne.n	80132ce <_malloc_r+0xf6>
 801321c:	f8d8 4000 	ldr.w	r4, [r8]
 8013220:	4627      	mov	r7, r4
 8013222:	2f00      	cmp	r7, #0
 8013224:	d143      	bne.n	80132ae <_malloc_r+0xd6>
 8013226:	2c00      	cmp	r4, #0
 8013228:	d04b      	beq.n	80132c2 <_malloc_r+0xea>
 801322a:	6823      	ldr	r3, [r4, #0]
 801322c:	4639      	mov	r1, r7
 801322e:	4630      	mov	r0, r6
 8013230:	eb04 0903 	add.w	r9, r4, r3
 8013234:	f000 fb82 	bl	801393c <_sbrk_r>
 8013238:	4581      	cmp	r9, r0
 801323a:	d142      	bne.n	80132c2 <_malloc_r+0xea>
 801323c:	6821      	ldr	r1, [r4, #0]
 801323e:	1a6d      	subs	r5, r5, r1
 8013240:	4629      	mov	r1, r5
 8013242:	4630      	mov	r0, r6
 8013244:	f7ff ffa6 	bl	8013194 <sbrk_aligned>
 8013248:	3001      	adds	r0, #1
 801324a:	d03a      	beq.n	80132c2 <_malloc_r+0xea>
 801324c:	6823      	ldr	r3, [r4, #0]
 801324e:	442b      	add	r3, r5
 8013250:	6023      	str	r3, [r4, #0]
 8013252:	f8d8 3000 	ldr.w	r3, [r8]
 8013256:	685a      	ldr	r2, [r3, #4]
 8013258:	bb62      	cbnz	r2, 80132b4 <_malloc_r+0xdc>
 801325a:	f8c8 7000 	str.w	r7, [r8]
 801325e:	e00f      	b.n	8013280 <_malloc_r+0xa8>
 8013260:	6822      	ldr	r2, [r4, #0]
 8013262:	1b52      	subs	r2, r2, r5
 8013264:	d420      	bmi.n	80132a8 <_malloc_r+0xd0>
 8013266:	2a0b      	cmp	r2, #11
 8013268:	d917      	bls.n	801329a <_malloc_r+0xc2>
 801326a:	1961      	adds	r1, r4, r5
 801326c:	42a3      	cmp	r3, r4
 801326e:	6025      	str	r5, [r4, #0]
 8013270:	bf18      	it	ne
 8013272:	6059      	strne	r1, [r3, #4]
 8013274:	6863      	ldr	r3, [r4, #4]
 8013276:	bf08      	it	eq
 8013278:	f8c8 1000 	streq.w	r1, [r8]
 801327c:	5162      	str	r2, [r4, r5]
 801327e:	604b      	str	r3, [r1, #4]
 8013280:	4630      	mov	r0, r6
 8013282:	f000 f9bd 	bl	8013600 <__malloc_unlock>
 8013286:	f104 000b 	add.w	r0, r4, #11
 801328a:	1d23      	adds	r3, r4, #4
 801328c:	f020 0007 	bic.w	r0, r0, #7
 8013290:	1ac2      	subs	r2, r0, r3
 8013292:	bf1c      	itt	ne
 8013294:	1a1b      	subne	r3, r3, r0
 8013296:	50a3      	strne	r3, [r4, r2]
 8013298:	e7af      	b.n	80131fa <_malloc_r+0x22>
 801329a:	6862      	ldr	r2, [r4, #4]
 801329c:	42a3      	cmp	r3, r4
 801329e:	bf0c      	ite	eq
 80132a0:	f8c8 2000 	streq.w	r2, [r8]
 80132a4:	605a      	strne	r2, [r3, #4]
 80132a6:	e7eb      	b.n	8013280 <_malloc_r+0xa8>
 80132a8:	4623      	mov	r3, r4
 80132aa:	6864      	ldr	r4, [r4, #4]
 80132ac:	e7ae      	b.n	801320c <_malloc_r+0x34>
 80132ae:	463c      	mov	r4, r7
 80132b0:	687f      	ldr	r7, [r7, #4]
 80132b2:	e7b6      	b.n	8013222 <_malloc_r+0x4a>
 80132b4:	461a      	mov	r2, r3
 80132b6:	685b      	ldr	r3, [r3, #4]
 80132b8:	42a3      	cmp	r3, r4
 80132ba:	d1fb      	bne.n	80132b4 <_malloc_r+0xdc>
 80132bc:	2300      	movs	r3, #0
 80132be:	6053      	str	r3, [r2, #4]
 80132c0:	e7de      	b.n	8013280 <_malloc_r+0xa8>
 80132c2:	230c      	movs	r3, #12
 80132c4:	6033      	str	r3, [r6, #0]
 80132c6:	4630      	mov	r0, r6
 80132c8:	f000 f99a 	bl	8013600 <__malloc_unlock>
 80132cc:	e794      	b.n	80131f8 <_malloc_r+0x20>
 80132ce:	6005      	str	r5, [r0, #0]
 80132d0:	e7d6      	b.n	8013280 <_malloc_r+0xa8>
 80132d2:	bf00      	nop
 80132d4:	20001590 	.word	0x20001590

080132d8 <_printf_common>:
 80132d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132dc:	4616      	mov	r6, r2
 80132de:	4698      	mov	r8, r3
 80132e0:	688a      	ldr	r2, [r1, #8]
 80132e2:	690b      	ldr	r3, [r1, #16]
 80132e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80132e8:	4293      	cmp	r3, r2
 80132ea:	bfb8      	it	lt
 80132ec:	4613      	movlt	r3, r2
 80132ee:	6033      	str	r3, [r6, #0]
 80132f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80132f4:	4607      	mov	r7, r0
 80132f6:	460c      	mov	r4, r1
 80132f8:	b10a      	cbz	r2, 80132fe <_printf_common+0x26>
 80132fa:	3301      	adds	r3, #1
 80132fc:	6033      	str	r3, [r6, #0]
 80132fe:	6823      	ldr	r3, [r4, #0]
 8013300:	0699      	lsls	r1, r3, #26
 8013302:	bf42      	ittt	mi
 8013304:	6833      	ldrmi	r3, [r6, #0]
 8013306:	3302      	addmi	r3, #2
 8013308:	6033      	strmi	r3, [r6, #0]
 801330a:	6825      	ldr	r5, [r4, #0]
 801330c:	f015 0506 	ands.w	r5, r5, #6
 8013310:	d106      	bne.n	8013320 <_printf_common+0x48>
 8013312:	f104 0a19 	add.w	sl, r4, #25
 8013316:	68e3      	ldr	r3, [r4, #12]
 8013318:	6832      	ldr	r2, [r6, #0]
 801331a:	1a9b      	subs	r3, r3, r2
 801331c:	42ab      	cmp	r3, r5
 801331e:	dc26      	bgt.n	801336e <_printf_common+0x96>
 8013320:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013324:	6822      	ldr	r2, [r4, #0]
 8013326:	3b00      	subs	r3, #0
 8013328:	bf18      	it	ne
 801332a:	2301      	movne	r3, #1
 801332c:	0692      	lsls	r2, r2, #26
 801332e:	d42b      	bmi.n	8013388 <_printf_common+0xb0>
 8013330:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013334:	4641      	mov	r1, r8
 8013336:	4638      	mov	r0, r7
 8013338:	47c8      	blx	r9
 801333a:	3001      	adds	r0, #1
 801333c:	d01e      	beq.n	801337c <_printf_common+0xa4>
 801333e:	6823      	ldr	r3, [r4, #0]
 8013340:	6922      	ldr	r2, [r4, #16]
 8013342:	f003 0306 	and.w	r3, r3, #6
 8013346:	2b04      	cmp	r3, #4
 8013348:	bf02      	ittt	eq
 801334a:	68e5      	ldreq	r5, [r4, #12]
 801334c:	6833      	ldreq	r3, [r6, #0]
 801334e:	1aed      	subeq	r5, r5, r3
 8013350:	68a3      	ldr	r3, [r4, #8]
 8013352:	bf0c      	ite	eq
 8013354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013358:	2500      	movne	r5, #0
 801335a:	4293      	cmp	r3, r2
 801335c:	bfc4      	itt	gt
 801335e:	1a9b      	subgt	r3, r3, r2
 8013360:	18ed      	addgt	r5, r5, r3
 8013362:	2600      	movs	r6, #0
 8013364:	341a      	adds	r4, #26
 8013366:	42b5      	cmp	r5, r6
 8013368:	d11a      	bne.n	80133a0 <_printf_common+0xc8>
 801336a:	2000      	movs	r0, #0
 801336c:	e008      	b.n	8013380 <_printf_common+0xa8>
 801336e:	2301      	movs	r3, #1
 8013370:	4652      	mov	r2, sl
 8013372:	4641      	mov	r1, r8
 8013374:	4638      	mov	r0, r7
 8013376:	47c8      	blx	r9
 8013378:	3001      	adds	r0, #1
 801337a:	d103      	bne.n	8013384 <_printf_common+0xac>
 801337c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013384:	3501      	adds	r5, #1
 8013386:	e7c6      	b.n	8013316 <_printf_common+0x3e>
 8013388:	18e1      	adds	r1, r4, r3
 801338a:	1c5a      	adds	r2, r3, #1
 801338c:	2030      	movs	r0, #48	@ 0x30
 801338e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013392:	4422      	add	r2, r4
 8013394:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013398:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801339c:	3302      	adds	r3, #2
 801339e:	e7c7      	b.n	8013330 <_printf_common+0x58>
 80133a0:	2301      	movs	r3, #1
 80133a2:	4622      	mov	r2, r4
 80133a4:	4641      	mov	r1, r8
 80133a6:	4638      	mov	r0, r7
 80133a8:	47c8      	blx	r9
 80133aa:	3001      	adds	r0, #1
 80133ac:	d0e6      	beq.n	801337c <_printf_common+0xa4>
 80133ae:	3601      	adds	r6, #1
 80133b0:	e7d9      	b.n	8013366 <_printf_common+0x8e>
	...

080133b4 <_printf_i>:
 80133b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80133b8:	7e0f      	ldrb	r7, [r1, #24]
 80133ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80133bc:	2f78      	cmp	r7, #120	@ 0x78
 80133be:	4691      	mov	r9, r2
 80133c0:	4680      	mov	r8, r0
 80133c2:	460c      	mov	r4, r1
 80133c4:	469a      	mov	sl, r3
 80133c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80133ca:	d807      	bhi.n	80133dc <_printf_i+0x28>
 80133cc:	2f62      	cmp	r7, #98	@ 0x62
 80133ce:	d80a      	bhi.n	80133e6 <_printf_i+0x32>
 80133d0:	2f00      	cmp	r7, #0
 80133d2:	f000 80d2 	beq.w	801357a <_printf_i+0x1c6>
 80133d6:	2f58      	cmp	r7, #88	@ 0x58
 80133d8:	f000 80b9 	beq.w	801354e <_printf_i+0x19a>
 80133dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80133e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80133e4:	e03a      	b.n	801345c <_printf_i+0xa8>
 80133e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80133ea:	2b15      	cmp	r3, #21
 80133ec:	d8f6      	bhi.n	80133dc <_printf_i+0x28>
 80133ee:	a101      	add	r1, pc, #4	@ (adr r1, 80133f4 <_printf_i+0x40>)
 80133f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80133f4:	0801344d 	.word	0x0801344d
 80133f8:	08013461 	.word	0x08013461
 80133fc:	080133dd 	.word	0x080133dd
 8013400:	080133dd 	.word	0x080133dd
 8013404:	080133dd 	.word	0x080133dd
 8013408:	080133dd 	.word	0x080133dd
 801340c:	08013461 	.word	0x08013461
 8013410:	080133dd 	.word	0x080133dd
 8013414:	080133dd 	.word	0x080133dd
 8013418:	080133dd 	.word	0x080133dd
 801341c:	080133dd 	.word	0x080133dd
 8013420:	08013561 	.word	0x08013561
 8013424:	0801348b 	.word	0x0801348b
 8013428:	0801351b 	.word	0x0801351b
 801342c:	080133dd 	.word	0x080133dd
 8013430:	080133dd 	.word	0x080133dd
 8013434:	08013583 	.word	0x08013583
 8013438:	080133dd 	.word	0x080133dd
 801343c:	0801348b 	.word	0x0801348b
 8013440:	080133dd 	.word	0x080133dd
 8013444:	080133dd 	.word	0x080133dd
 8013448:	08013523 	.word	0x08013523
 801344c:	6833      	ldr	r3, [r6, #0]
 801344e:	1d1a      	adds	r2, r3, #4
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	6032      	str	r2, [r6, #0]
 8013454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013458:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801345c:	2301      	movs	r3, #1
 801345e:	e09d      	b.n	801359c <_printf_i+0x1e8>
 8013460:	6833      	ldr	r3, [r6, #0]
 8013462:	6820      	ldr	r0, [r4, #0]
 8013464:	1d19      	adds	r1, r3, #4
 8013466:	6031      	str	r1, [r6, #0]
 8013468:	0606      	lsls	r6, r0, #24
 801346a:	d501      	bpl.n	8013470 <_printf_i+0xbc>
 801346c:	681d      	ldr	r5, [r3, #0]
 801346e:	e003      	b.n	8013478 <_printf_i+0xc4>
 8013470:	0645      	lsls	r5, r0, #25
 8013472:	d5fb      	bpl.n	801346c <_printf_i+0xb8>
 8013474:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013478:	2d00      	cmp	r5, #0
 801347a:	da03      	bge.n	8013484 <_printf_i+0xd0>
 801347c:	232d      	movs	r3, #45	@ 0x2d
 801347e:	426d      	negs	r5, r5
 8013480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013484:	4859      	ldr	r0, [pc, #356]	@ (80135ec <_printf_i+0x238>)
 8013486:	230a      	movs	r3, #10
 8013488:	e011      	b.n	80134ae <_printf_i+0xfa>
 801348a:	6821      	ldr	r1, [r4, #0]
 801348c:	6833      	ldr	r3, [r6, #0]
 801348e:	0608      	lsls	r0, r1, #24
 8013490:	f853 5b04 	ldr.w	r5, [r3], #4
 8013494:	d402      	bmi.n	801349c <_printf_i+0xe8>
 8013496:	0649      	lsls	r1, r1, #25
 8013498:	bf48      	it	mi
 801349a:	b2ad      	uxthmi	r5, r5
 801349c:	2f6f      	cmp	r7, #111	@ 0x6f
 801349e:	4853      	ldr	r0, [pc, #332]	@ (80135ec <_printf_i+0x238>)
 80134a0:	6033      	str	r3, [r6, #0]
 80134a2:	bf14      	ite	ne
 80134a4:	230a      	movne	r3, #10
 80134a6:	2308      	moveq	r3, #8
 80134a8:	2100      	movs	r1, #0
 80134aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80134ae:	6866      	ldr	r6, [r4, #4]
 80134b0:	60a6      	str	r6, [r4, #8]
 80134b2:	2e00      	cmp	r6, #0
 80134b4:	bfa2      	ittt	ge
 80134b6:	6821      	ldrge	r1, [r4, #0]
 80134b8:	f021 0104 	bicge.w	r1, r1, #4
 80134bc:	6021      	strge	r1, [r4, #0]
 80134be:	b90d      	cbnz	r5, 80134c4 <_printf_i+0x110>
 80134c0:	2e00      	cmp	r6, #0
 80134c2:	d04b      	beq.n	801355c <_printf_i+0x1a8>
 80134c4:	4616      	mov	r6, r2
 80134c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80134ca:	fb03 5711 	mls	r7, r3, r1, r5
 80134ce:	5dc7      	ldrb	r7, [r0, r7]
 80134d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80134d4:	462f      	mov	r7, r5
 80134d6:	42bb      	cmp	r3, r7
 80134d8:	460d      	mov	r5, r1
 80134da:	d9f4      	bls.n	80134c6 <_printf_i+0x112>
 80134dc:	2b08      	cmp	r3, #8
 80134de:	d10b      	bne.n	80134f8 <_printf_i+0x144>
 80134e0:	6823      	ldr	r3, [r4, #0]
 80134e2:	07df      	lsls	r7, r3, #31
 80134e4:	d508      	bpl.n	80134f8 <_printf_i+0x144>
 80134e6:	6923      	ldr	r3, [r4, #16]
 80134e8:	6861      	ldr	r1, [r4, #4]
 80134ea:	4299      	cmp	r1, r3
 80134ec:	bfde      	ittt	le
 80134ee:	2330      	movle	r3, #48	@ 0x30
 80134f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80134f4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80134f8:	1b92      	subs	r2, r2, r6
 80134fa:	6122      	str	r2, [r4, #16]
 80134fc:	f8cd a000 	str.w	sl, [sp]
 8013500:	464b      	mov	r3, r9
 8013502:	aa03      	add	r2, sp, #12
 8013504:	4621      	mov	r1, r4
 8013506:	4640      	mov	r0, r8
 8013508:	f7ff fee6 	bl	80132d8 <_printf_common>
 801350c:	3001      	adds	r0, #1
 801350e:	d14a      	bne.n	80135a6 <_printf_i+0x1f2>
 8013510:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013514:	b004      	add	sp, #16
 8013516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801351a:	6823      	ldr	r3, [r4, #0]
 801351c:	f043 0320 	orr.w	r3, r3, #32
 8013520:	6023      	str	r3, [r4, #0]
 8013522:	4833      	ldr	r0, [pc, #204]	@ (80135f0 <_printf_i+0x23c>)
 8013524:	2778      	movs	r7, #120	@ 0x78
 8013526:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801352a:	6823      	ldr	r3, [r4, #0]
 801352c:	6831      	ldr	r1, [r6, #0]
 801352e:	061f      	lsls	r7, r3, #24
 8013530:	f851 5b04 	ldr.w	r5, [r1], #4
 8013534:	d402      	bmi.n	801353c <_printf_i+0x188>
 8013536:	065f      	lsls	r7, r3, #25
 8013538:	bf48      	it	mi
 801353a:	b2ad      	uxthmi	r5, r5
 801353c:	6031      	str	r1, [r6, #0]
 801353e:	07d9      	lsls	r1, r3, #31
 8013540:	bf44      	itt	mi
 8013542:	f043 0320 	orrmi.w	r3, r3, #32
 8013546:	6023      	strmi	r3, [r4, #0]
 8013548:	b11d      	cbz	r5, 8013552 <_printf_i+0x19e>
 801354a:	2310      	movs	r3, #16
 801354c:	e7ac      	b.n	80134a8 <_printf_i+0xf4>
 801354e:	4827      	ldr	r0, [pc, #156]	@ (80135ec <_printf_i+0x238>)
 8013550:	e7e9      	b.n	8013526 <_printf_i+0x172>
 8013552:	6823      	ldr	r3, [r4, #0]
 8013554:	f023 0320 	bic.w	r3, r3, #32
 8013558:	6023      	str	r3, [r4, #0]
 801355a:	e7f6      	b.n	801354a <_printf_i+0x196>
 801355c:	4616      	mov	r6, r2
 801355e:	e7bd      	b.n	80134dc <_printf_i+0x128>
 8013560:	6833      	ldr	r3, [r6, #0]
 8013562:	6825      	ldr	r5, [r4, #0]
 8013564:	6961      	ldr	r1, [r4, #20]
 8013566:	1d18      	adds	r0, r3, #4
 8013568:	6030      	str	r0, [r6, #0]
 801356a:	062e      	lsls	r6, r5, #24
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	d501      	bpl.n	8013574 <_printf_i+0x1c0>
 8013570:	6019      	str	r1, [r3, #0]
 8013572:	e002      	b.n	801357a <_printf_i+0x1c6>
 8013574:	0668      	lsls	r0, r5, #25
 8013576:	d5fb      	bpl.n	8013570 <_printf_i+0x1bc>
 8013578:	8019      	strh	r1, [r3, #0]
 801357a:	2300      	movs	r3, #0
 801357c:	6123      	str	r3, [r4, #16]
 801357e:	4616      	mov	r6, r2
 8013580:	e7bc      	b.n	80134fc <_printf_i+0x148>
 8013582:	6833      	ldr	r3, [r6, #0]
 8013584:	1d1a      	adds	r2, r3, #4
 8013586:	6032      	str	r2, [r6, #0]
 8013588:	681e      	ldr	r6, [r3, #0]
 801358a:	6862      	ldr	r2, [r4, #4]
 801358c:	2100      	movs	r1, #0
 801358e:	4630      	mov	r0, r6
 8013590:	f7ec fe46 	bl	8000220 <memchr>
 8013594:	b108      	cbz	r0, 801359a <_printf_i+0x1e6>
 8013596:	1b80      	subs	r0, r0, r6
 8013598:	6060      	str	r0, [r4, #4]
 801359a:	6863      	ldr	r3, [r4, #4]
 801359c:	6123      	str	r3, [r4, #16]
 801359e:	2300      	movs	r3, #0
 80135a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80135a4:	e7aa      	b.n	80134fc <_printf_i+0x148>
 80135a6:	6923      	ldr	r3, [r4, #16]
 80135a8:	4632      	mov	r2, r6
 80135aa:	4649      	mov	r1, r9
 80135ac:	4640      	mov	r0, r8
 80135ae:	47d0      	blx	sl
 80135b0:	3001      	adds	r0, #1
 80135b2:	d0ad      	beq.n	8013510 <_printf_i+0x15c>
 80135b4:	6823      	ldr	r3, [r4, #0]
 80135b6:	079b      	lsls	r3, r3, #30
 80135b8:	d413      	bmi.n	80135e2 <_printf_i+0x22e>
 80135ba:	68e0      	ldr	r0, [r4, #12]
 80135bc:	9b03      	ldr	r3, [sp, #12]
 80135be:	4298      	cmp	r0, r3
 80135c0:	bfb8      	it	lt
 80135c2:	4618      	movlt	r0, r3
 80135c4:	e7a6      	b.n	8013514 <_printf_i+0x160>
 80135c6:	2301      	movs	r3, #1
 80135c8:	4632      	mov	r2, r6
 80135ca:	4649      	mov	r1, r9
 80135cc:	4640      	mov	r0, r8
 80135ce:	47d0      	blx	sl
 80135d0:	3001      	adds	r0, #1
 80135d2:	d09d      	beq.n	8013510 <_printf_i+0x15c>
 80135d4:	3501      	adds	r5, #1
 80135d6:	68e3      	ldr	r3, [r4, #12]
 80135d8:	9903      	ldr	r1, [sp, #12]
 80135da:	1a5b      	subs	r3, r3, r1
 80135dc:	42ab      	cmp	r3, r5
 80135de:	dcf2      	bgt.n	80135c6 <_printf_i+0x212>
 80135e0:	e7eb      	b.n	80135ba <_printf_i+0x206>
 80135e2:	2500      	movs	r5, #0
 80135e4:	f104 0619 	add.w	r6, r4, #25
 80135e8:	e7f5      	b.n	80135d6 <_printf_i+0x222>
 80135ea:	bf00      	nop
 80135ec:	08016c02 	.word	0x08016c02
 80135f0:	08016c13 	.word	0x08016c13

080135f4 <__malloc_lock>:
 80135f4:	4801      	ldr	r0, [pc, #4]	@ (80135fc <__malloc_lock+0x8>)
 80135f6:	f7ef be2e 	b.w	8003256 <__retarget_lock_acquire_recursive>
 80135fa:	bf00      	nop
 80135fc:	2000086c 	.word	0x2000086c

08013600 <__malloc_unlock>:
 8013600:	4801      	ldr	r0, [pc, #4]	@ (8013608 <__malloc_unlock+0x8>)
 8013602:	f7ef be3d 	b.w	8003280 <__retarget_lock_release_recursive>
 8013606:	bf00      	nop
 8013608:	2000086c 	.word	0x2000086c

0801360c <siprintf>:
 801360c:	b40e      	push	{r1, r2, r3}
 801360e:	b500      	push	{lr}
 8013610:	b09c      	sub	sp, #112	@ 0x70
 8013612:	ab1d      	add	r3, sp, #116	@ 0x74
 8013614:	9002      	str	r0, [sp, #8]
 8013616:	9006      	str	r0, [sp, #24]
 8013618:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801361c:	4809      	ldr	r0, [pc, #36]	@ (8013644 <siprintf+0x38>)
 801361e:	9107      	str	r1, [sp, #28]
 8013620:	9104      	str	r1, [sp, #16]
 8013622:	4909      	ldr	r1, [pc, #36]	@ (8013648 <siprintf+0x3c>)
 8013624:	f853 2b04 	ldr.w	r2, [r3], #4
 8013628:	9105      	str	r1, [sp, #20]
 801362a:	6800      	ldr	r0, [r0, #0]
 801362c:	9301      	str	r3, [sp, #4]
 801362e:	a902      	add	r1, sp, #8
 8013630:	f001 f8e4 	bl	80147fc <_svfiprintf_r>
 8013634:	9b02      	ldr	r3, [sp, #8]
 8013636:	2200      	movs	r2, #0
 8013638:	701a      	strb	r2, [r3, #0]
 801363a:	b01c      	add	sp, #112	@ 0x70
 801363c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013640:	b003      	add	sp, #12
 8013642:	4770      	bx	lr
 8013644:	200000f0 	.word	0x200000f0
 8013648:	ffff0208 	.word	0xffff0208

0801364c <std>:
 801364c:	2300      	movs	r3, #0
 801364e:	b510      	push	{r4, lr}
 8013650:	4604      	mov	r4, r0
 8013652:	e9c0 3300 	strd	r3, r3, [r0]
 8013656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801365a:	6083      	str	r3, [r0, #8]
 801365c:	8181      	strh	r1, [r0, #12]
 801365e:	6643      	str	r3, [r0, #100]	@ 0x64
 8013660:	81c2      	strh	r2, [r0, #14]
 8013662:	6183      	str	r3, [r0, #24]
 8013664:	4619      	mov	r1, r3
 8013666:	2208      	movs	r2, #8
 8013668:	305c      	adds	r0, #92	@ 0x5c
 801366a:	f000 f95a 	bl	8013922 <memset>
 801366e:	4b0d      	ldr	r3, [pc, #52]	@ (80136a4 <std+0x58>)
 8013670:	6263      	str	r3, [r4, #36]	@ 0x24
 8013672:	4b0d      	ldr	r3, [pc, #52]	@ (80136a8 <std+0x5c>)
 8013674:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013676:	4b0d      	ldr	r3, [pc, #52]	@ (80136ac <std+0x60>)
 8013678:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801367a:	4b0d      	ldr	r3, [pc, #52]	@ (80136b0 <std+0x64>)
 801367c:	6323      	str	r3, [r4, #48]	@ 0x30
 801367e:	4b0d      	ldr	r3, [pc, #52]	@ (80136b4 <std+0x68>)
 8013680:	6224      	str	r4, [r4, #32]
 8013682:	429c      	cmp	r4, r3
 8013684:	d006      	beq.n	8013694 <std+0x48>
 8013686:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801368a:	4294      	cmp	r4, r2
 801368c:	d002      	beq.n	8013694 <std+0x48>
 801368e:	33d0      	adds	r3, #208	@ 0xd0
 8013690:	429c      	cmp	r4, r3
 8013692:	d105      	bne.n	80136a0 <std+0x54>
 8013694:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801369c:	f7ef bdb4 	b.w	8003208 <__retarget_lock_init_recursive>
 80136a0:	bd10      	pop	{r4, pc}
 80136a2:	bf00      	nop
 80136a4:	08015251 	.word	0x08015251
 80136a8:	08015273 	.word	0x08015273
 80136ac:	080152ab 	.word	0x080152ab
 80136b0:	080152cf 	.word	0x080152cf
 80136b4:	20001594 	.word	0x20001594

080136b8 <stdio_exit_handler>:
 80136b8:	4a02      	ldr	r2, [pc, #8]	@ (80136c4 <stdio_exit_handler+0xc>)
 80136ba:	4903      	ldr	r1, [pc, #12]	@ (80136c8 <stdio_exit_handler+0x10>)
 80136bc:	4803      	ldr	r0, [pc, #12]	@ (80136cc <stdio_exit_handler+0x14>)
 80136be:	f000 b8ed 	b.w	801389c <_fwalk_sglue>
 80136c2:	bf00      	nop
 80136c4:	200000e4 	.word	0x200000e4
 80136c8:	08014afd 	.word	0x08014afd
 80136cc:	200000f4 	.word	0x200000f4

080136d0 <cleanup_stdio>:
 80136d0:	6841      	ldr	r1, [r0, #4]
 80136d2:	4b0c      	ldr	r3, [pc, #48]	@ (8013704 <cleanup_stdio+0x34>)
 80136d4:	4299      	cmp	r1, r3
 80136d6:	b510      	push	{r4, lr}
 80136d8:	4604      	mov	r4, r0
 80136da:	d001      	beq.n	80136e0 <cleanup_stdio+0x10>
 80136dc:	f001 fa0e 	bl	8014afc <_fflush_r>
 80136e0:	68a1      	ldr	r1, [r4, #8]
 80136e2:	4b09      	ldr	r3, [pc, #36]	@ (8013708 <cleanup_stdio+0x38>)
 80136e4:	4299      	cmp	r1, r3
 80136e6:	d002      	beq.n	80136ee <cleanup_stdio+0x1e>
 80136e8:	4620      	mov	r0, r4
 80136ea:	f001 fa07 	bl	8014afc <_fflush_r>
 80136ee:	68e1      	ldr	r1, [r4, #12]
 80136f0:	4b06      	ldr	r3, [pc, #24]	@ (801370c <cleanup_stdio+0x3c>)
 80136f2:	4299      	cmp	r1, r3
 80136f4:	d004      	beq.n	8013700 <cleanup_stdio+0x30>
 80136f6:	4620      	mov	r0, r4
 80136f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136fc:	f001 b9fe 	b.w	8014afc <_fflush_r>
 8013700:	bd10      	pop	{r4, pc}
 8013702:	bf00      	nop
 8013704:	20001594 	.word	0x20001594
 8013708:	200015fc 	.word	0x200015fc
 801370c:	20001664 	.word	0x20001664

08013710 <global_stdio_init.part.0>:
 8013710:	b510      	push	{r4, lr}
 8013712:	4b0b      	ldr	r3, [pc, #44]	@ (8013740 <global_stdio_init.part.0+0x30>)
 8013714:	4c0b      	ldr	r4, [pc, #44]	@ (8013744 <global_stdio_init.part.0+0x34>)
 8013716:	4a0c      	ldr	r2, [pc, #48]	@ (8013748 <global_stdio_init.part.0+0x38>)
 8013718:	601a      	str	r2, [r3, #0]
 801371a:	4620      	mov	r0, r4
 801371c:	2200      	movs	r2, #0
 801371e:	2104      	movs	r1, #4
 8013720:	f7ff ff94 	bl	801364c <std>
 8013724:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013728:	2201      	movs	r2, #1
 801372a:	2109      	movs	r1, #9
 801372c:	f7ff ff8e 	bl	801364c <std>
 8013730:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013734:	2202      	movs	r2, #2
 8013736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801373a:	2112      	movs	r1, #18
 801373c:	f7ff bf86 	b.w	801364c <std>
 8013740:	200016cc 	.word	0x200016cc
 8013744:	20001594 	.word	0x20001594
 8013748:	080136b9 	.word	0x080136b9

0801374c <__sfp_lock_acquire>:
 801374c:	4801      	ldr	r0, [pc, #4]	@ (8013754 <__sfp_lock_acquire+0x8>)
 801374e:	f7ef bd82 	b.w	8003256 <__retarget_lock_acquire_recursive>
 8013752:	bf00      	nop
 8013754:	20000868 	.word	0x20000868

08013758 <__sfp_lock_release>:
 8013758:	4801      	ldr	r0, [pc, #4]	@ (8013760 <__sfp_lock_release+0x8>)
 801375a:	f7ef bd91 	b.w	8003280 <__retarget_lock_release_recursive>
 801375e:	bf00      	nop
 8013760:	20000868 	.word	0x20000868

08013764 <__sinit>:
 8013764:	b510      	push	{r4, lr}
 8013766:	4604      	mov	r4, r0
 8013768:	f7ff fff0 	bl	801374c <__sfp_lock_acquire>
 801376c:	6a23      	ldr	r3, [r4, #32]
 801376e:	b11b      	cbz	r3, 8013778 <__sinit+0x14>
 8013770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013774:	f7ff bff0 	b.w	8013758 <__sfp_lock_release>
 8013778:	4b04      	ldr	r3, [pc, #16]	@ (801378c <__sinit+0x28>)
 801377a:	6223      	str	r3, [r4, #32]
 801377c:	4b04      	ldr	r3, [pc, #16]	@ (8013790 <__sinit+0x2c>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d1f5      	bne.n	8013770 <__sinit+0xc>
 8013784:	f7ff ffc4 	bl	8013710 <global_stdio_init.part.0>
 8013788:	e7f2      	b.n	8013770 <__sinit+0xc>
 801378a:	bf00      	nop
 801378c:	080136d1 	.word	0x080136d1
 8013790:	200016cc 	.word	0x200016cc

08013794 <_strtol_l.constprop.0>:
 8013794:	2b24      	cmp	r3, #36	@ 0x24
 8013796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801379a:	4686      	mov	lr, r0
 801379c:	4690      	mov	r8, r2
 801379e:	d801      	bhi.n	80137a4 <_strtol_l.constprop.0+0x10>
 80137a0:	2b01      	cmp	r3, #1
 80137a2:	d106      	bne.n	80137b2 <_strtol_l.constprop.0+0x1e>
 80137a4:	f000 f8da 	bl	801395c <__errno>
 80137a8:	2316      	movs	r3, #22
 80137aa:	6003      	str	r3, [r0, #0]
 80137ac:	2000      	movs	r0, #0
 80137ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137b2:	4834      	ldr	r0, [pc, #208]	@ (8013884 <_strtol_l.constprop.0+0xf0>)
 80137b4:	460d      	mov	r5, r1
 80137b6:	462a      	mov	r2, r5
 80137b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80137bc:	5d06      	ldrb	r6, [r0, r4]
 80137be:	f016 0608 	ands.w	r6, r6, #8
 80137c2:	d1f8      	bne.n	80137b6 <_strtol_l.constprop.0+0x22>
 80137c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80137c6:	d12d      	bne.n	8013824 <_strtol_l.constprop.0+0x90>
 80137c8:	782c      	ldrb	r4, [r5, #0]
 80137ca:	2601      	movs	r6, #1
 80137cc:	1c95      	adds	r5, r2, #2
 80137ce:	f033 0210 	bics.w	r2, r3, #16
 80137d2:	d109      	bne.n	80137e8 <_strtol_l.constprop.0+0x54>
 80137d4:	2c30      	cmp	r4, #48	@ 0x30
 80137d6:	d12a      	bne.n	801382e <_strtol_l.constprop.0+0x9a>
 80137d8:	782a      	ldrb	r2, [r5, #0]
 80137da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80137de:	2a58      	cmp	r2, #88	@ 0x58
 80137e0:	d125      	bne.n	801382e <_strtol_l.constprop.0+0x9a>
 80137e2:	786c      	ldrb	r4, [r5, #1]
 80137e4:	2310      	movs	r3, #16
 80137e6:	3502      	adds	r5, #2
 80137e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80137ec:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80137f0:	2200      	movs	r2, #0
 80137f2:	fbbc f9f3 	udiv	r9, ip, r3
 80137f6:	4610      	mov	r0, r2
 80137f8:	fb03 ca19 	mls	sl, r3, r9, ip
 80137fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013800:	2f09      	cmp	r7, #9
 8013802:	d81b      	bhi.n	801383c <_strtol_l.constprop.0+0xa8>
 8013804:	463c      	mov	r4, r7
 8013806:	42a3      	cmp	r3, r4
 8013808:	dd27      	ble.n	801385a <_strtol_l.constprop.0+0xc6>
 801380a:	1c57      	adds	r7, r2, #1
 801380c:	d007      	beq.n	801381e <_strtol_l.constprop.0+0x8a>
 801380e:	4581      	cmp	r9, r0
 8013810:	d320      	bcc.n	8013854 <_strtol_l.constprop.0+0xc0>
 8013812:	d101      	bne.n	8013818 <_strtol_l.constprop.0+0x84>
 8013814:	45a2      	cmp	sl, r4
 8013816:	db1d      	blt.n	8013854 <_strtol_l.constprop.0+0xc0>
 8013818:	fb00 4003 	mla	r0, r0, r3, r4
 801381c:	2201      	movs	r2, #1
 801381e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013822:	e7eb      	b.n	80137fc <_strtol_l.constprop.0+0x68>
 8013824:	2c2b      	cmp	r4, #43	@ 0x2b
 8013826:	bf04      	itt	eq
 8013828:	782c      	ldrbeq	r4, [r5, #0]
 801382a:	1c95      	addeq	r5, r2, #2
 801382c:	e7cf      	b.n	80137ce <_strtol_l.constprop.0+0x3a>
 801382e:	2b00      	cmp	r3, #0
 8013830:	d1da      	bne.n	80137e8 <_strtol_l.constprop.0+0x54>
 8013832:	2c30      	cmp	r4, #48	@ 0x30
 8013834:	bf0c      	ite	eq
 8013836:	2308      	moveq	r3, #8
 8013838:	230a      	movne	r3, #10
 801383a:	e7d5      	b.n	80137e8 <_strtol_l.constprop.0+0x54>
 801383c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013840:	2f19      	cmp	r7, #25
 8013842:	d801      	bhi.n	8013848 <_strtol_l.constprop.0+0xb4>
 8013844:	3c37      	subs	r4, #55	@ 0x37
 8013846:	e7de      	b.n	8013806 <_strtol_l.constprop.0+0x72>
 8013848:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801384c:	2f19      	cmp	r7, #25
 801384e:	d804      	bhi.n	801385a <_strtol_l.constprop.0+0xc6>
 8013850:	3c57      	subs	r4, #87	@ 0x57
 8013852:	e7d8      	b.n	8013806 <_strtol_l.constprop.0+0x72>
 8013854:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013858:	e7e1      	b.n	801381e <_strtol_l.constprop.0+0x8a>
 801385a:	1c53      	adds	r3, r2, #1
 801385c:	d108      	bne.n	8013870 <_strtol_l.constprop.0+0xdc>
 801385e:	2322      	movs	r3, #34	@ 0x22
 8013860:	f8ce 3000 	str.w	r3, [lr]
 8013864:	4660      	mov	r0, ip
 8013866:	f1b8 0f00 	cmp.w	r8, #0
 801386a:	d0a0      	beq.n	80137ae <_strtol_l.constprop.0+0x1a>
 801386c:	1e69      	subs	r1, r5, #1
 801386e:	e006      	b.n	801387e <_strtol_l.constprop.0+0xea>
 8013870:	b106      	cbz	r6, 8013874 <_strtol_l.constprop.0+0xe0>
 8013872:	4240      	negs	r0, r0
 8013874:	f1b8 0f00 	cmp.w	r8, #0
 8013878:	d099      	beq.n	80137ae <_strtol_l.constprop.0+0x1a>
 801387a:	2a00      	cmp	r2, #0
 801387c:	d1f6      	bne.n	801386c <_strtol_l.constprop.0+0xd8>
 801387e:	f8c8 1000 	str.w	r1, [r8]
 8013882:	e794      	b.n	80137ae <_strtol_l.constprop.0+0x1a>
 8013884:	08016c25 	.word	0x08016c25

08013888 <strtol>:
 8013888:	4613      	mov	r3, r2
 801388a:	460a      	mov	r2, r1
 801388c:	4601      	mov	r1, r0
 801388e:	4802      	ldr	r0, [pc, #8]	@ (8013898 <strtol+0x10>)
 8013890:	6800      	ldr	r0, [r0, #0]
 8013892:	f7ff bf7f 	b.w	8013794 <_strtol_l.constprop.0>
 8013896:	bf00      	nop
 8013898:	200000f0 	.word	0x200000f0

0801389c <_fwalk_sglue>:
 801389c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138a0:	4607      	mov	r7, r0
 80138a2:	4688      	mov	r8, r1
 80138a4:	4614      	mov	r4, r2
 80138a6:	2600      	movs	r6, #0
 80138a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80138ac:	f1b9 0901 	subs.w	r9, r9, #1
 80138b0:	d505      	bpl.n	80138be <_fwalk_sglue+0x22>
 80138b2:	6824      	ldr	r4, [r4, #0]
 80138b4:	2c00      	cmp	r4, #0
 80138b6:	d1f7      	bne.n	80138a8 <_fwalk_sglue+0xc>
 80138b8:	4630      	mov	r0, r6
 80138ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138be:	89ab      	ldrh	r3, [r5, #12]
 80138c0:	2b01      	cmp	r3, #1
 80138c2:	d907      	bls.n	80138d4 <_fwalk_sglue+0x38>
 80138c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80138c8:	3301      	adds	r3, #1
 80138ca:	d003      	beq.n	80138d4 <_fwalk_sglue+0x38>
 80138cc:	4629      	mov	r1, r5
 80138ce:	4638      	mov	r0, r7
 80138d0:	47c0      	blx	r8
 80138d2:	4306      	orrs	r6, r0
 80138d4:	3568      	adds	r5, #104	@ 0x68
 80138d6:	e7e9      	b.n	80138ac <_fwalk_sglue+0x10>

080138d8 <strncmp>:
 80138d8:	b510      	push	{r4, lr}
 80138da:	b16a      	cbz	r2, 80138f8 <strncmp+0x20>
 80138dc:	3901      	subs	r1, #1
 80138de:	1884      	adds	r4, r0, r2
 80138e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80138e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80138e8:	429a      	cmp	r2, r3
 80138ea:	d103      	bne.n	80138f4 <strncmp+0x1c>
 80138ec:	42a0      	cmp	r0, r4
 80138ee:	d001      	beq.n	80138f4 <strncmp+0x1c>
 80138f0:	2a00      	cmp	r2, #0
 80138f2:	d1f5      	bne.n	80138e0 <strncmp+0x8>
 80138f4:	1ad0      	subs	r0, r2, r3
 80138f6:	bd10      	pop	{r4, pc}
 80138f8:	4610      	mov	r0, r2
 80138fa:	e7fc      	b.n	80138f6 <strncmp+0x1e>

080138fc <strncpy>:
 80138fc:	b510      	push	{r4, lr}
 80138fe:	3901      	subs	r1, #1
 8013900:	4603      	mov	r3, r0
 8013902:	b132      	cbz	r2, 8013912 <strncpy+0x16>
 8013904:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013908:	f803 4b01 	strb.w	r4, [r3], #1
 801390c:	3a01      	subs	r2, #1
 801390e:	2c00      	cmp	r4, #0
 8013910:	d1f7      	bne.n	8013902 <strncpy+0x6>
 8013912:	441a      	add	r2, r3
 8013914:	2100      	movs	r1, #0
 8013916:	4293      	cmp	r3, r2
 8013918:	d100      	bne.n	801391c <strncpy+0x20>
 801391a:	bd10      	pop	{r4, pc}
 801391c:	f803 1b01 	strb.w	r1, [r3], #1
 8013920:	e7f9      	b.n	8013916 <strncpy+0x1a>

08013922 <memset>:
 8013922:	4402      	add	r2, r0
 8013924:	4603      	mov	r3, r0
 8013926:	4293      	cmp	r3, r2
 8013928:	d100      	bne.n	801392c <memset+0xa>
 801392a:	4770      	bx	lr
 801392c:	f803 1b01 	strb.w	r1, [r3], #1
 8013930:	e7f9      	b.n	8013926 <memset+0x4>
	...

08013934 <_localeconv_r>:
 8013934:	4800      	ldr	r0, [pc, #0]	@ (8013938 <_localeconv_r+0x4>)
 8013936:	4770      	bx	lr
 8013938:	20000230 	.word	0x20000230

0801393c <_sbrk_r>:
 801393c:	b538      	push	{r3, r4, r5, lr}
 801393e:	4d06      	ldr	r5, [pc, #24]	@ (8013958 <_sbrk_r+0x1c>)
 8013940:	2300      	movs	r3, #0
 8013942:	4604      	mov	r4, r0
 8013944:	4608      	mov	r0, r1
 8013946:	602b      	str	r3, [r5, #0]
 8013948:	f7ef fb72 	bl	8003030 <_sbrk>
 801394c:	1c43      	adds	r3, r0, #1
 801394e:	d102      	bne.n	8013956 <_sbrk_r+0x1a>
 8013950:	682b      	ldr	r3, [r5, #0]
 8013952:	b103      	cbz	r3, 8013956 <_sbrk_r+0x1a>
 8013954:	6023      	str	r3, [r4, #0]
 8013956:	bd38      	pop	{r3, r4, r5, pc}
 8013958:	200016d0 	.word	0x200016d0

0801395c <__errno>:
 801395c:	4b01      	ldr	r3, [pc, #4]	@ (8013964 <__errno+0x8>)
 801395e:	6818      	ldr	r0, [r3, #0]
 8013960:	4770      	bx	lr
 8013962:	bf00      	nop
 8013964:	200000f0 	.word	0x200000f0

08013968 <__libc_init_array>:
 8013968:	b570      	push	{r4, r5, r6, lr}
 801396a:	4d0d      	ldr	r5, [pc, #52]	@ (80139a0 <__libc_init_array+0x38>)
 801396c:	4c0d      	ldr	r4, [pc, #52]	@ (80139a4 <__libc_init_array+0x3c>)
 801396e:	1b64      	subs	r4, r4, r5
 8013970:	10a4      	asrs	r4, r4, #2
 8013972:	2600      	movs	r6, #0
 8013974:	42a6      	cmp	r6, r4
 8013976:	d109      	bne.n	801398c <__libc_init_array+0x24>
 8013978:	4d0b      	ldr	r5, [pc, #44]	@ (80139a8 <__libc_init_array+0x40>)
 801397a:	4c0c      	ldr	r4, [pc, #48]	@ (80139ac <__libc_init_array+0x44>)
 801397c:	f002 ff88 	bl	8016890 <_init>
 8013980:	1b64      	subs	r4, r4, r5
 8013982:	10a4      	asrs	r4, r4, #2
 8013984:	2600      	movs	r6, #0
 8013986:	42a6      	cmp	r6, r4
 8013988:	d105      	bne.n	8013996 <__libc_init_array+0x2e>
 801398a:	bd70      	pop	{r4, r5, r6, pc}
 801398c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013990:	4798      	blx	r3
 8013992:	3601      	adds	r6, #1
 8013994:	e7ee      	b.n	8013974 <__libc_init_array+0xc>
 8013996:	f855 3b04 	ldr.w	r3, [r5], #4
 801399a:	4798      	blx	r3
 801399c:	3601      	adds	r6, #1
 801399e:	e7f2      	b.n	8013986 <__libc_init_array+0x1e>
 80139a0:	08016fa0 	.word	0x08016fa0
 80139a4:	08016fa0 	.word	0x08016fa0
 80139a8:	08016fa0 	.word	0x08016fa0
 80139ac:	08016fa4 	.word	0x08016fa4

080139b0 <memcpy>:
 80139b0:	440a      	add	r2, r1
 80139b2:	4291      	cmp	r1, r2
 80139b4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80139b8:	d100      	bne.n	80139bc <memcpy+0xc>
 80139ba:	4770      	bx	lr
 80139bc:	b510      	push	{r4, lr}
 80139be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80139c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80139c6:	4291      	cmp	r1, r2
 80139c8:	d1f9      	bne.n	80139be <memcpy+0xe>
 80139ca:	bd10      	pop	{r4, pc}

080139cc <strcpy>:
 80139cc:	4603      	mov	r3, r0
 80139ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80139d2:	f803 2b01 	strb.w	r2, [r3], #1
 80139d6:	2a00      	cmp	r2, #0
 80139d8:	d1f9      	bne.n	80139ce <strcpy+0x2>
 80139da:	4770      	bx	lr

080139dc <__assert_func>:
 80139dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80139de:	4614      	mov	r4, r2
 80139e0:	461a      	mov	r2, r3
 80139e2:	4b09      	ldr	r3, [pc, #36]	@ (8013a08 <__assert_func+0x2c>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	4605      	mov	r5, r0
 80139e8:	68d8      	ldr	r0, [r3, #12]
 80139ea:	b954      	cbnz	r4, 8013a02 <__assert_func+0x26>
 80139ec:	4b07      	ldr	r3, [pc, #28]	@ (8013a0c <__assert_func+0x30>)
 80139ee:	461c      	mov	r4, r3
 80139f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80139f4:	9100      	str	r1, [sp, #0]
 80139f6:	462b      	mov	r3, r5
 80139f8:	4905      	ldr	r1, [pc, #20]	@ (8013a10 <__assert_func+0x34>)
 80139fa:	f001 fc6d 	bl	80152d8 <fiprintf>
 80139fe:	f001 fd0b 	bl	8015418 <abort>
 8013a02:	4b04      	ldr	r3, [pc, #16]	@ (8013a14 <__assert_func+0x38>)
 8013a04:	e7f4      	b.n	80139f0 <__assert_func+0x14>
 8013a06:	bf00      	nop
 8013a08:	200000f0 	.word	0x200000f0
 8013a0c:	08016d60 	.word	0x08016d60
 8013a10:	08016d32 	.word	0x08016d32
 8013a14:	08016d25 	.word	0x08016d25

08013a18 <quorem>:
 8013a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a1c:	6903      	ldr	r3, [r0, #16]
 8013a1e:	690c      	ldr	r4, [r1, #16]
 8013a20:	42a3      	cmp	r3, r4
 8013a22:	4607      	mov	r7, r0
 8013a24:	db7e      	blt.n	8013b24 <quorem+0x10c>
 8013a26:	3c01      	subs	r4, #1
 8013a28:	f101 0814 	add.w	r8, r1, #20
 8013a2c:	00a3      	lsls	r3, r4, #2
 8013a2e:	f100 0514 	add.w	r5, r0, #20
 8013a32:	9300      	str	r3, [sp, #0]
 8013a34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013a38:	9301      	str	r3, [sp, #4]
 8013a3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013a3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013a42:	3301      	adds	r3, #1
 8013a44:	429a      	cmp	r2, r3
 8013a46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013a4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8013a4e:	d32e      	bcc.n	8013aae <quorem+0x96>
 8013a50:	f04f 0a00 	mov.w	sl, #0
 8013a54:	46c4      	mov	ip, r8
 8013a56:	46ae      	mov	lr, r5
 8013a58:	46d3      	mov	fp, sl
 8013a5a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013a5e:	b298      	uxth	r0, r3
 8013a60:	fb06 a000 	mla	r0, r6, r0, sl
 8013a64:	0c02      	lsrs	r2, r0, #16
 8013a66:	0c1b      	lsrs	r3, r3, #16
 8013a68:	fb06 2303 	mla	r3, r6, r3, r2
 8013a6c:	f8de 2000 	ldr.w	r2, [lr]
 8013a70:	b280      	uxth	r0, r0
 8013a72:	b292      	uxth	r2, r2
 8013a74:	1a12      	subs	r2, r2, r0
 8013a76:	445a      	add	r2, fp
 8013a78:	f8de 0000 	ldr.w	r0, [lr]
 8013a7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013a80:	b29b      	uxth	r3, r3
 8013a82:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013a86:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013a8a:	b292      	uxth	r2, r2
 8013a8c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013a90:	45e1      	cmp	r9, ip
 8013a92:	f84e 2b04 	str.w	r2, [lr], #4
 8013a96:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013a9a:	d2de      	bcs.n	8013a5a <quorem+0x42>
 8013a9c:	9b00      	ldr	r3, [sp, #0]
 8013a9e:	58eb      	ldr	r3, [r5, r3]
 8013aa0:	b92b      	cbnz	r3, 8013aae <quorem+0x96>
 8013aa2:	9b01      	ldr	r3, [sp, #4]
 8013aa4:	3b04      	subs	r3, #4
 8013aa6:	429d      	cmp	r5, r3
 8013aa8:	461a      	mov	r2, r3
 8013aaa:	d32f      	bcc.n	8013b0c <quorem+0xf4>
 8013aac:	613c      	str	r4, [r7, #16]
 8013aae:	4638      	mov	r0, r7
 8013ab0:	f001 fac6 	bl	8015040 <__mcmp>
 8013ab4:	2800      	cmp	r0, #0
 8013ab6:	db25      	blt.n	8013b04 <quorem+0xec>
 8013ab8:	4629      	mov	r1, r5
 8013aba:	2000      	movs	r0, #0
 8013abc:	f858 2b04 	ldr.w	r2, [r8], #4
 8013ac0:	f8d1 c000 	ldr.w	ip, [r1]
 8013ac4:	fa1f fe82 	uxth.w	lr, r2
 8013ac8:	fa1f f38c 	uxth.w	r3, ip
 8013acc:	eba3 030e 	sub.w	r3, r3, lr
 8013ad0:	4403      	add	r3, r0
 8013ad2:	0c12      	lsrs	r2, r2, #16
 8013ad4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013ad8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013adc:	b29b      	uxth	r3, r3
 8013ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013ae2:	45c1      	cmp	r9, r8
 8013ae4:	f841 3b04 	str.w	r3, [r1], #4
 8013ae8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013aec:	d2e6      	bcs.n	8013abc <quorem+0xa4>
 8013aee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013af2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013af6:	b922      	cbnz	r2, 8013b02 <quorem+0xea>
 8013af8:	3b04      	subs	r3, #4
 8013afa:	429d      	cmp	r5, r3
 8013afc:	461a      	mov	r2, r3
 8013afe:	d30b      	bcc.n	8013b18 <quorem+0x100>
 8013b00:	613c      	str	r4, [r7, #16]
 8013b02:	3601      	adds	r6, #1
 8013b04:	4630      	mov	r0, r6
 8013b06:	b003      	add	sp, #12
 8013b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b0c:	6812      	ldr	r2, [r2, #0]
 8013b0e:	3b04      	subs	r3, #4
 8013b10:	2a00      	cmp	r2, #0
 8013b12:	d1cb      	bne.n	8013aac <quorem+0x94>
 8013b14:	3c01      	subs	r4, #1
 8013b16:	e7c6      	b.n	8013aa6 <quorem+0x8e>
 8013b18:	6812      	ldr	r2, [r2, #0]
 8013b1a:	3b04      	subs	r3, #4
 8013b1c:	2a00      	cmp	r2, #0
 8013b1e:	d1ef      	bne.n	8013b00 <quorem+0xe8>
 8013b20:	3c01      	subs	r4, #1
 8013b22:	e7ea      	b.n	8013afa <quorem+0xe2>
 8013b24:	2000      	movs	r0, #0
 8013b26:	e7ee      	b.n	8013b06 <quorem+0xee>

08013b28 <_dtoa_r>:
 8013b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b2c:	69c7      	ldr	r7, [r0, #28]
 8013b2e:	b099      	sub	sp, #100	@ 0x64
 8013b30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013b34:	ec55 4b10 	vmov	r4, r5, d0
 8013b38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8013b3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8013b3c:	4683      	mov	fp, r0
 8013b3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8013b40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013b42:	b97f      	cbnz	r7, 8013b64 <_dtoa_r+0x3c>
 8013b44:	2010      	movs	r0, #16
 8013b46:	f7ff fb1d 	bl	8013184 <malloc>
 8013b4a:	4602      	mov	r2, r0
 8013b4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8013b50:	b920      	cbnz	r0, 8013b5c <_dtoa_r+0x34>
 8013b52:	4ba7      	ldr	r3, [pc, #668]	@ (8013df0 <_dtoa_r+0x2c8>)
 8013b54:	21ef      	movs	r1, #239	@ 0xef
 8013b56:	48a7      	ldr	r0, [pc, #668]	@ (8013df4 <_dtoa_r+0x2cc>)
 8013b58:	f7ff ff40 	bl	80139dc <__assert_func>
 8013b5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013b60:	6007      	str	r7, [r0, #0]
 8013b62:	60c7      	str	r7, [r0, #12]
 8013b64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013b68:	6819      	ldr	r1, [r3, #0]
 8013b6a:	b159      	cbz	r1, 8013b84 <_dtoa_r+0x5c>
 8013b6c:	685a      	ldr	r2, [r3, #4]
 8013b6e:	604a      	str	r2, [r1, #4]
 8013b70:	2301      	movs	r3, #1
 8013b72:	4093      	lsls	r3, r2
 8013b74:	608b      	str	r3, [r1, #8]
 8013b76:	4658      	mov	r0, fp
 8013b78:	f001 f828 	bl	8014bcc <_Bfree>
 8013b7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013b80:	2200      	movs	r2, #0
 8013b82:	601a      	str	r2, [r3, #0]
 8013b84:	1e2b      	subs	r3, r5, #0
 8013b86:	bfb9      	ittee	lt
 8013b88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013b8c:	9303      	strlt	r3, [sp, #12]
 8013b8e:	2300      	movge	r3, #0
 8013b90:	6033      	strge	r3, [r6, #0]
 8013b92:	9f03      	ldr	r7, [sp, #12]
 8013b94:	4b98      	ldr	r3, [pc, #608]	@ (8013df8 <_dtoa_r+0x2d0>)
 8013b96:	bfbc      	itt	lt
 8013b98:	2201      	movlt	r2, #1
 8013b9a:	6032      	strlt	r2, [r6, #0]
 8013b9c:	43bb      	bics	r3, r7
 8013b9e:	d112      	bne.n	8013bc6 <_dtoa_r+0x9e>
 8013ba0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013ba2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013ba6:	6013      	str	r3, [r2, #0]
 8013ba8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013bac:	4323      	orrs	r3, r4
 8013bae:	f000 854d 	beq.w	801464c <_dtoa_r+0xb24>
 8013bb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013bb4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8013e0c <_dtoa_r+0x2e4>
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	f000 854f 	beq.w	801465c <_dtoa_r+0xb34>
 8013bbe:	f10a 0303 	add.w	r3, sl, #3
 8013bc2:	f000 bd49 	b.w	8014658 <_dtoa_r+0xb30>
 8013bc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013bca:	2200      	movs	r2, #0
 8013bcc:	ec51 0b17 	vmov	r0, r1, d7
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8013bd6:	f7ec ff9f 	bl	8000b18 <__aeabi_dcmpeq>
 8013bda:	4680      	mov	r8, r0
 8013bdc:	b158      	cbz	r0, 8013bf6 <_dtoa_r+0xce>
 8013bde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013be0:	2301      	movs	r3, #1
 8013be2:	6013      	str	r3, [r2, #0]
 8013be4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013be6:	b113      	cbz	r3, 8013bee <_dtoa_r+0xc6>
 8013be8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013bea:	4b84      	ldr	r3, [pc, #528]	@ (8013dfc <_dtoa_r+0x2d4>)
 8013bec:	6013      	str	r3, [r2, #0]
 8013bee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8013e10 <_dtoa_r+0x2e8>
 8013bf2:	f000 bd33 	b.w	801465c <_dtoa_r+0xb34>
 8013bf6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013bfa:	aa16      	add	r2, sp, #88	@ 0x58
 8013bfc:	a917      	add	r1, sp, #92	@ 0x5c
 8013bfe:	4658      	mov	r0, fp
 8013c00:	f001 face 	bl	80151a0 <__d2b>
 8013c04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013c08:	4681      	mov	r9, r0
 8013c0a:	2e00      	cmp	r6, #0
 8013c0c:	d077      	beq.n	8013cfe <_dtoa_r+0x1d6>
 8013c0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013c10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8013c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013c18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013c1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013c20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8013c24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013c28:	4619      	mov	r1, r3
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	4b74      	ldr	r3, [pc, #464]	@ (8013e00 <_dtoa_r+0x2d8>)
 8013c2e:	f7ec fb53 	bl	80002d8 <__aeabi_dsub>
 8013c32:	a369      	add	r3, pc, #420	@ (adr r3, 8013dd8 <_dtoa_r+0x2b0>)
 8013c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c38:	f7ec fd06 	bl	8000648 <__aeabi_dmul>
 8013c3c:	a368      	add	r3, pc, #416	@ (adr r3, 8013de0 <_dtoa_r+0x2b8>)
 8013c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c42:	f7ec fb4b 	bl	80002dc <__adddf3>
 8013c46:	4604      	mov	r4, r0
 8013c48:	4630      	mov	r0, r6
 8013c4a:	460d      	mov	r5, r1
 8013c4c:	f7ec fc92 	bl	8000574 <__aeabi_i2d>
 8013c50:	a365      	add	r3, pc, #404	@ (adr r3, 8013de8 <_dtoa_r+0x2c0>)
 8013c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c56:	f7ec fcf7 	bl	8000648 <__aeabi_dmul>
 8013c5a:	4602      	mov	r2, r0
 8013c5c:	460b      	mov	r3, r1
 8013c5e:	4620      	mov	r0, r4
 8013c60:	4629      	mov	r1, r5
 8013c62:	f7ec fb3b 	bl	80002dc <__adddf3>
 8013c66:	4604      	mov	r4, r0
 8013c68:	460d      	mov	r5, r1
 8013c6a:	f7ec ff9d 	bl	8000ba8 <__aeabi_d2iz>
 8013c6e:	2200      	movs	r2, #0
 8013c70:	4607      	mov	r7, r0
 8013c72:	2300      	movs	r3, #0
 8013c74:	4620      	mov	r0, r4
 8013c76:	4629      	mov	r1, r5
 8013c78:	f7ec ff58 	bl	8000b2c <__aeabi_dcmplt>
 8013c7c:	b140      	cbz	r0, 8013c90 <_dtoa_r+0x168>
 8013c7e:	4638      	mov	r0, r7
 8013c80:	f7ec fc78 	bl	8000574 <__aeabi_i2d>
 8013c84:	4622      	mov	r2, r4
 8013c86:	462b      	mov	r3, r5
 8013c88:	f7ec ff46 	bl	8000b18 <__aeabi_dcmpeq>
 8013c8c:	b900      	cbnz	r0, 8013c90 <_dtoa_r+0x168>
 8013c8e:	3f01      	subs	r7, #1
 8013c90:	2f16      	cmp	r7, #22
 8013c92:	d851      	bhi.n	8013d38 <_dtoa_r+0x210>
 8013c94:	4b5b      	ldr	r3, [pc, #364]	@ (8013e04 <_dtoa_r+0x2dc>)
 8013c96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013ca2:	f7ec ff43 	bl	8000b2c <__aeabi_dcmplt>
 8013ca6:	2800      	cmp	r0, #0
 8013ca8:	d048      	beq.n	8013d3c <_dtoa_r+0x214>
 8013caa:	3f01      	subs	r7, #1
 8013cac:	2300      	movs	r3, #0
 8013cae:	9312      	str	r3, [sp, #72]	@ 0x48
 8013cb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013cb2:	1b9b      	subs	r3, r3, r6
 8013cb4:	1e5a      	subs	r2, r3, #1
 8013cb6:	bf44      	itt	mi
 8013cb8:	f1c3 0801 	rsbmi	r8, r3, #1
 8013cbc:	2300      	movmi	r3, #0
 8013cbe:	9208      	str	r2, [sp, #32]
 8013cc0:	bf54      	ite	pl
 8013cc2:	f04f 0800 	movpl.w	r8, #0
 8013cc6:	9308      	strmi	r3, [sp, #32]
 8013cc8:	2f00      	cmp	r7, #0
 8013cca:	db39      	blt.n	8013d40 <_dtoa_r+0x218>
 8013ccc:	9b08      	ldr	r3, [sp, #32]
 8013cce:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013cd0:	443b      	add	r3, r7
 8013cd2:	9308      	str	r3, [sp, #32]
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8013cd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013cda:	2b09      	cmp	r3, #9
 8013cdc:	d864      	bhi.n	8013da8 <_dtoa_r+0x280>
 8013cde:	2b05      	cmp	r3, #5
 8013ce0:	bfc4      	itt	gt
 8013ce2:	3b04      	subgt	r3, #4
 8013ce4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8013ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ce8:	f1a3 0302 	sub.w	r3, r3, #2
 8013cec:	bfcc      	ite	gt
 8013cee:	2400      	movgt	r4, #0
 8013cf0:	2401      	movle	r4, #1
 8013cf2:	2b03      	cmp	r3, #3
 8013cf4:	d863      	bhi.n	8013dbe <_dtoa_r+0x296>
 8013cf6:	e8df f003 	tbb	[pc, r3]
 8013cfa:	372a      	.short	0x372a
 8013cfc:	5535      	.short	0x5535
 8013cfe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8013d02:	441e      	add	r6, r3
 8013d04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013d08:	2b20      	cmp	r3, #32
 8013d0a:	bfc1      	itttt	gt
 8013d0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013d10:	409f      	lslgt	r7, r3
 8013d12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013d16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013d1a:	bfd6      	itet	le
 8013d1c:	f1c3 0320 	rsble	r3, r3, #32
 8013d20:	ea47 0003 	orrgt.w	r0, r7, r3
 8013d24:	fa04 f003 	lslle.w	r0, r4, r3
 8013d28:	f7ec fc14 	bl	8000554 <__aeabi_ui2d>
 8013d2c:	2201      	movs	r2, #1
 8013d2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013d32:	3e01      	subs	r6, #1
 8013d34:	9214      	str	r2, [sp, #80]	@ 0x50
 8013d36:	e777      	b.n	8013c28 <_dtoa_r+0x100>
 8013d38:	2301      	movs	r3, #1
 8013d3a:	e7b8      	b.n	8013cae <_dtoa_r+0x186>
 8013d3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8013d3e:	e7b7      	b.n	8013cb0 <_dtoa_r+0x188>
 8013d40:	427b      	negs	r3, r7
 8013d42:	930a      	str	r3, [sp, #40]	@ 0x28
 8013d44:	2300      	movs	r3, #0
 8013d46:	eba8 0807 	sub.w	r8, r8, r7
 8013d4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013d4c:	e7c4      	b.n	8013cd8 <_dtoa_r+0x1b0>
 8013d4e:	2300      	movs	r3, #0
 8013d50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	dc35      	bgt.n	8013dc4 <_dtoa_r+0x29c>
 8013d58:	2301      	movs	r3, #1
 8013d5a:	9300      	str	r3, [sp, #0]
 8013d5c:	9307      	str	r3, [sp, #28]
 8013d5e:	461a      	mov	r2, r3
 8013d60:	920e      	str	r2, [sp, #56]	@ 0x38
 8013d62:	e00b      	b.n	8013d7c <_dtoa_r+0x254>
 8013d64:	2301      	movs	r3, #1
 8013d66:	e7f3      	b.n	8013d50 <_dtoa_r+0x228>
 8013d68:	2300      	movs	r3, #0
 8013d6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013d6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d6e:	18fb      	adds	r3, r7, r3
 8013d70:	9300      	str	r3, [sp, #0]
 8013d72:	3301      	adds	r3, #1
 8013d74:	2b01      	cmp	r3, #1
 8013d76:	9307      	str	r3, [sp, #28]
 8013d78:	bfb8      	it	lt
 8013d7a:	2301      	movlt	r3, #1
 8013d7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8013d80:	2100      	movs	r1, #0
 8013d82:	2204      	movs	r2, #4
 8013d84:	f102 0514 	add.w	r5, r2, #20
 8013d88:	429d      	cmp	r5, r3
 8013d8a:	d91f      	bls.n	8013dcc <_dtoa_r+0x2a4>
 8013d8c:	6041      	str	r1, [r0, #4]
 8013d8e:	4658      	mov	r0, fp
 8013d90:	f000 fedc 	bl	8014b4c <_Balloc>
 8013d94:	4682      	mov	sl, r0
 8013d96:	2800      	cmp	r0, #0
 8013d98:	d13c      	bne.n	8013e14 <_dtoa_r+0x2ec>
 8013d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8013e08 <_dtoa_r+0x2e0>)
 8013d9c:	4602      	mov	r2, r0
 8013d9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8013da2:	e6d8      	b.n	8013b56 <_dtoa_r+0x2e>
 8013da4:	2301      	movs	r3, #1
 8013da6:	e7e0      	b.n	8013d6a <_dtoa_r+0x242>
 8013da8:	2401      	movs	r4, #1
 8013daa:	2300      	movs	r3, #0
 8013dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8013dae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013db0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013db4:	9300      	str	r3, [sp, #0]
 8013db6:	9307      	str	r3, [sp, #28]
 8013db8:	2200      	movs	r2, #0
 8013dba:	2312      	movs	r3, #18
 8013dbc:	e7d0      	b.n	8013d60 <_dtoa_r+0x238>
 8013dbe:	2301      	movs	r3, #1
 8013dc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013dc2:	e7f5      	b.n	8013db0 <_dtoa_r+0x288>
 8013dc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013dc6:	9300      	str	r3, [sp, #0]
 8013dc8:	9307      	str	r3, [sp, #28]
 8013dca:	e7d7      	b.n	8013d7c <_dtoa_r+0x254>
 8013dcc:	3101      	adds	r1, #1
 8013dce:	0052      	lsls	r2, r2, #1
 8013dd0:	e7d8      	b.n	8013d84 <_dtoa_r+0x25c>
 8013dd2:	bf00      	nop
 8013dd4:	f3af 8000 	nop.w
 8013dd8:	636f4361 	.word	0x636f4361
 8013ddc:	3fd287a7 	.word	0x3fd287a7
 8013de0:	8b60c8b3 	.word	0x8b60c8b3
 8013de4:	3fc68a28 	.word	0x3fc68a28
 8013de8:	509f79fb 	.word	0x509f79fb
 8013dec:	3fd34413 	.word	0x3fd34413
 8013df0:	08016d6e 	.word	0x08016d6e
 8013df4:	08016d85 	.word	0x08016d85
 8013df8:	7ff00000 	.word	0x7ff00000
 8013dfc:	08016c01 	.word	0x08016c01
 8013e00:	3ff80000 	.word	0x3ff80000
 8013e04:	08016e90 	.word	0x08016e90
 8013e08:	08016ddd 	.word	0x08016ddd
 8013e0c:	08016d6a 	.word	0x08016d6a
 8013e10:	08016c00 	.word	0x08016c00
 8013e14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013e18:	6018      	str	r0, [r3, #0]
 8013e1a:	9b07      	ldr	r3, [sp, #28]
 8013e1c:	2b0e      	cmp	r3, #14
 8013e1e:	f200 80a4 	bhi.w	8013f6a <_dtoa_r+0x442>
 8013e22:	2c00      	cmp	r4, #0
 8013e24:	f000 80a1 	beq.w	8013f6a <_dtoa_r+0x442>
 8013e28:	2f00      	cmp	r7, #0
 8013e2a:	dd33      	ble.n	8013e94 <_dtoa_r+0x36c>
 8013e2c:	4bad      	ldr	r3, [pc, #692]	@ (80140e4 <_dtoa_r+0x5bc>)
 8013e2e:	f007 020f 	and.w	r2, r7, #15
 8013e32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013e36:	ed93 7b00 	vldr	d7, [r3]
 8013e3a:	05f8      	lsls	r0, r7, #23
 8013e3c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013e40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013e44:	d516      	bpl.n	8013e74 <_dtoa_r+0x34c>
 8013e46:	4ba8      	ldr	r3, [pc, #672]	@ (80140e8 <_dtoa_r+0x5c0>)
 8013e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013e4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013e50:	f7ec fd24 	bl	800089c <__aeabi_ddiv>
 8013e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013e58:	f004 040f 	and.w	r4, r4, #15
 8013e5c:	2603      	movs	r6, #3
 8013e5e:	4da2      	ldr	r5, [pc, #648]	@ (80140e8 <_dtoa_r+0x5c0>)
 8013e60:	b954      	cbnz	r4, 8013e78 <_dtoa_r+0x350>
 8013e62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e6a:	f7ec fd17 	bl	800089c <__aeabi_ddiv>
 8013e6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013e72:	e028      	b.n	8013ec6 <_dtoa_r+0x39e>
 8013e74:	2602      	movs	r6, #2
 8013e76:	e7f2      	b.n	8013e5e <_dtoa_r+0x336>
 8013e78:	07e1      	lsls	r1, r4, #31
 8013e7a:	d508      	bpl.n	8013e8e <_dtoa_r+0x366>
 8013e7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013e80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013e84:	f7ec fbe0 	bl	8000648 <__aeabi_dmul>
 8013e88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013e8c:	3601      	adds	r6, #1
 8013e8e:	1064      	asrs	r4, r4, #1
 8013e90:	3508      	adds	r5, #8
 8013e92:	e7e5      	b.n	8013e60 <_dtoa_r+0x338>
 8013e94:	f000 80d2 	beq.w	801403c <_dtoa_r+0x514>
 8013e98:	427c      	negs	r4, r7
 8013e9a:	4b92      	ldr	r3, [pc, #584]	@ (80140e4 <_dtoa_r+0x5bc>)
 8013e9c:	4d92      	ldr	r5, [pc, #584]	@ (80140e8 <_dtoa_r+0x5c0>)
 8013e9e:	f004 020f 	and.w	r2, r4, #15
 8013ea2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013eae:	f7ec fbcb 	bl	8000648 <__aeabi_dmul>
 8013eb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013eb6:	1124      	asrs	r4, r4, #4
 8013eb8:	2300      	movs	r3, #0
 8013eba:	2602      	movs	r6, #2
 8013ebc:	2c00      	cmp	r4, #0
 8013ebe:	f040 80b2 	bne.w	8014026 <_dtoa_r+0x4fe>
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d1d3      	bne.n	8013e6e <_dtoa_r+0x346>
 8013ec6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013ec8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	f000 80b7 	beq.w	8014040 <_dtoa_r+0x518>
 8013ed2:	4b86      	ldr	r3, [pc, #536]	@ (80140ec <_dtoa_r+0x5c4>)
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	4620      	mov	r0, r4
 8013ed8:	4629      	mov	r1, r5
 8013eda:	f7ec fe27 	bl	8000b2c <__aeabi_dcmplt>
 8013ede:	2800      	cmp	r0, #0
 8013ee0:	f000 80ae 	beq.w	8014040 <_dtoa_r+0x518>
 8013ee4:	9b07      	ldr	r3, [sp, #28]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	f000 80aa 	beq.w	8014040 <_dtoa_r+0x518>
 8013eec:	9b00      	ldr	r3, [sp, #0]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	dd37      	ble.n	8013f62 <_dtoa_r+0x43a>
 8013ef2:	1e7b      	subs	r3, r7, #1
 8013ef4:	9304      	str	r3, [sp, #16]
 8013ef6:	4620      	mov	r0, r4
 8013ef8:	4b7d      	ldr	r3, [pc, #500]	@ (80140f0 <_dtoa_r+0x5c8>)
 8013efa:	2200      	movs	r2, #0
 8013efc:	4629      	mov	r1, r5
 8013efe:	f7ec fba3 	bl	8000648 <__aeabi_dmul>
 8013f02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f06:	9c00      	ldr	r4, [sp, #0]
 8013f08:	3601      	adds	r6, #1
 8013f0a:	4630      	mov	r0, r6
 8013f0c:	f7ec fb32 	bl	8000574 <__aeabi_i2d>
 8013f10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013f14:	f7ec fb98 	bl	8000648 <__aeabi_dmul>
 8013f18:	4b76      	ldr	r3, [pc, #472]	@ (80140f4 <_dtoa_r+0x5cc>)
 8013f1a:	2200      	movs	r2, #0
 8013f1c:	f7ec f9de 	bl	80002dc <__adddf3>
 8013f20:	4605      	mov	r5, r0
 8013f22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013f26:	2c00      	cmp	r4, #0
 8013f28:	f040 808d 	bne.w	8014046 <_dtoa_r+0x51e>
 8013f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f30:	4b71      	ldr	r3, [pc, #452]	@ (80140f8 <_dtoa_r+0x5d0>)
 8013f32:	2200      	movs	r2, #0
 8013f34:	f7ec f9d0 	bl	80002d8 <__aeabi_dsub>
 8013f38:	4602      	mov	r2, r0
 8013f3a:	460b      	mov	r3, r1
 8013f3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013f40:	462a      	mov	r2, r5
 8013f42:	4633      	mov	r3, r6
 8013f44:	f7ec fe10 	bl	8000b68 <__aeabi_dcmpgt>
 8013f48:	2800      	cmp	r0, #0
 8013f4a:	f040 828b 	bne.w	8014464 <_dtoa_r+0x93c>
 8013f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f52:	462a      	mov	r2, r5
 8013f54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013f58:	f7ec fde8 	bl	8000b2c <__aeabi_dcmplt>
 8013f5c:	2800      	cmp	r0, #0
 8013f5e:	f040 8128 	bne.w	80141b2 <_dtoa_r+0x68a>
 8013f62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8013f66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013f6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	f2c0 815a 	blt.w	8014226 <_dtoa_r+0x6fe>
 8013f72:	2f0e      	cmp	r7, #14
 8013f74:	f300 8157 	bgt.w	8014226 <_dtoa_r+0x6fe>
 8013f78:	4b5a      	ldr	r3, [pc, #360]	@ (80140e4 <_dtoa_r+0x5bc>)
 8013f7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013f7e:	ed93 7b00 	vldr	d7, [r3]
 8013f82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	ed8d 7b00 	vstr	d7, [sp]
 8013f8a:	da03      	bge.n	8013f94 <_dtoa_r+0x46c>
 8013f8c:	9b07      	ldr	r3, [sp, #28]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	f340 8101 	ble.w	8014196 <_dtoa_r+0x66e>
 8013f94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013f98:	4656      	mov	r6, sl
 8013f9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f9e:	4620      	mov	r0, r4
 8013fa0:	4629      	mov	r1, r5
 8013fa2:	f7ec fc7b 	bl	800089c <__aeabi_ddiv>
 8013fa6:	f7ec fdff 	bl	8000ba8 <__aeabi_d2iz>
 8013faa:	4680      	mov	r8, r0
 8013fac:	f7ec fae2 	bl	8000574 <__aeabi_i2d>
 8013fb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013fb4:	f7ec fb48 	bl	8000648 <__aeabi_dmul>
 8013fb8:	4602      	mov	r2, r0
 8013fba:	460b      	mov	r3, r1
 8013fbc:	4620      	mov	r0, r4
 8013fbe:	4629      	mov	r1, r5
 8013fc0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013fc4:	f7ec f988 	bl	80002d8 <__aeabi_dsub>
 8013fc8:	f806 4b01 	strb.w	r4, [r6], #1
 8013fcc:	9d07      	ldr	r5, [sp, #28]
 8013fce:	eba6 040a 	sub.w	r4, r6, sl
 8013fd2:	42a5      	cmp	r5, r4
 8013fd4:	4602      	mov	r2, r0
 8013fd6:	460b      	mov	r3, r1
 8013fd8:	f040 8117 	bne.w	801420a <_dtoa_r+0x6e2>
 8013fdc:	f7ec f97e 	bl	80002dc <__adddf3>
 8013fe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013fe4:	4604      	mov	r4, r0
 8013fe6:	460d      	mov	r5, r1
 8013fe8:	f7ec fdbe 	bl	8000b68 <__aeabi_dcmpgt>
 8013fec:	2800      	cmp	r0, #0
 8013fee:	f040 80f9 	bne.w	80141e4 <_dtoa_r+0x6bc>
 8013ff2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ff6:	4620      	mov	r0, r4
 8013ff8:	4629      	mov	r1, r5
 8013ffa:	f7ec fd8d 	bl	8000b18 <__aeabi_dcmpeq>
 8013ffe:	b118      	cbz	r0, 8014008 <_dtoa_r+0x4e0>
 8014000:	f018 0f01 	tst.w	r8, #1
 8014004:	f040 80ee 	bne.w	80141e4 <_dtoa_r+0x6bc>
 8014008:	4649      	mov	r1, r9
 801400a:	4658      	mov	r0, fp
 801400c:	f000 fdde 	bl	8014bcc <_Bfree>
 8014010:	2300      	movs	r3, #0
 8014012:	7033      	strb	r3, [r6, #0]
 8014014:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014016:	3701      	adds	r7, #1
 8014018:	601f      	str	r7, [r3, #0]
 801401a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801401c:	2b00      	cmp	r3, #0
 801401e:	f000 831d 	beq.w	801465c <_dtoa_r+0xb34>
 8014022:	601e      	str	r6, [r3, #0]
 8014024:	e31a      	b.n	801465c <_dtoa_r+0xb34>
 8014026:	07e2      	lsls	r2, r4, #31
 8014028:	d505      	bpl.n	8014036 <_dtoa_r+0x50e>
 801402a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801402e:	f7ec fb0b 	bl	8000648 <__aeabi_dmul>
 8014032:	3601      	adds	r6, #1
 8014034:	2301      	movs	r3, #1
 8014036:	1064      	asrs	r4, r4, #1
 8014038:	3508      	adds	r5, #8
 801403a:	e73f      	b.n	8013ebc <_dtoa_r+0x394>
 801403c:	2602      	movs	r6, #2
 801403e:	e742      	b.n	8013ec6 <_dtoa_r+0x39e>
 8014040:	9c07      	ldr	r4, [sp, #28]
 8014042:	9704      	str	r7, [sp, #16]
 8014044:	e761      	b.n	8013f0a <_dtoa_r+0x3e2>
 8014046:	4b27      	ldr	r3, [pc, #156]	@ (80140e4 <_dtoa_r+0x5bc>)
 8014048:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801404a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801404e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014052:	4454      	add	r4, sl
 8014054:	2900      	cmp	r1, #0
 8014056:	d053      	beq.n	8014100 <_dtoa_r+0x5d8>
 8014058:	4928      	ldr	r1, [pc, #160]	@ (80140fc <_dtoa_r+0x5d4>)
 801405a:	2000      	movs	r0, #0
 801405c:	f7ec fc1e 	bl	800089c <__aeabi_ddiv>
 8014060:	4633      	mov	r3, r6
 8014062:	462a      	mov	r2, r5
 8014064:	f7ec f938 	bl	80002d8 <__aeabi_dsub>
 8014068:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801406c:	4656      	mov	r6, sl
 801406e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014072:	f7ec fd99 	bl	8000ba8 <__aeabi_d2iz>
 8014076:	4605      	mov	r5, r0
 8014078:	f7ec fa7c 	bl	8000574 <__aeabi_i2d>
 801407c:	4602      	mov	r2, r0
 801407e:	460b      	mov	r3, r1
 8014080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014084:	f7ec f928 	bl	80002d8 <__aeabi_dsub>
 8014088:	3530      	adds	r5, #48	@ 0x30
 801408a:	4602      	mov	r2, r0
 801408c:	460b      	mov	r3, r1
 801408e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014092:	f806 5b01 	strb.w	r5, [r6], #1
 8014096:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801409a:	f7ec fd47 	bl	8000b2c <__aeabi_dcmplt>
 801409e:	2800      	cmp	r0, #0
 80140a0:	d171      	bne.n	8014186 <_dtoa_r+0x65e>
 80140a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80140a6:	4911      	ldr	r1, [pc, #68]	@ (80140ec <_dtoa_r+0x5c4>)
 80140a8:	2000      	movs	r0, #0
 80140aa:	f7ec f915 	bl	80002d8 <__aeabi_dsub>
 80140ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80140b2:	f7ec fd3b 	bl	8000b2c <__aeabi_dcmplt>
 80140b6:	2800      	cmp	r0, #0
 80140b8:	f040 8095 	bne.w	80141e6 <_dtoa_r+0x6be>
 80140bc:	42a6      	cmp	r6, r4
 80140be:	f43f af50 	beq.w	8013f62 <_dtoa_r+0x43a>
 80140c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80140c6:	4b0a      	ldr	r3, [pc, #40]	@ (80140f0 <_dtoa_r+0x5c8>)
 80140c8:	2200      	movs	r2, #0
 80140ca:	f7ec fabd 	bl	8000648 <__aeabi_dmul>
 80140ce:	4b08      	ldr	r3, [pc, #32]	@ (80140f0 <_dtoa_r+0x5c8>)
 80140d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80140d4:	2200      	movs	r2, #0
 80140d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80140da:	f7ec fab5 	bl	8000648 <__aeabi_dmul>
 80140de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80140e2:	e7c4      	b.n	801406e <_dtoa_r+0x546>
 80140e4:	08016e90 	.word	0x08016e90
 80140e8:	08016e68 	.word	0x08016e68
 80140ec:	3ff00000 	.word	0x3ff00000
 80140f0:	40240000 	.word	0x40240000
 80140f4:	401c0000 	.word	0x401c0000
 80140f8:	40140000 	.word	0x40140000
 80140fc:	3fe00000 	.word	0x3fe00000
 8014100:	4631      	mov	r1, r6
 8014102:	4628      	mov	r0, r5
 8014104:	f7ec faa0 	bl	8000648 <__aeabi_dmul>
 8014108:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801410c:	9415      	str	r4, [sp, #84]	@ 0x54
 801410e:	4656      	mov	r6, sl
 8014110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014114:	f7ec fd48 	bl	8000ba8 <__aeabi_d2iz>
 8014118:	4605      	mov	r5, r0
 801411a:	f7ec fa2b 	bl	8000574 <__aeabi_i2d>
 801411e:	4602      	mov	r2, r0
 8014120:	460b      	mov	r3, r1
 8014122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014126:	f7ec f8d7 	bl	80002d8 <__aeabi_dsub>
 801412a:	3530      	adds	r5, #48	@ 0x30
 801412c:	f806 5b01 	strb.w	r5, [r6], #1
 8014130:	4602      	mov	r2, r0
 8014132:	460b      	mov	r3, r1
 8014134:	42a6      	cmp	r6, r4
 8014136:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801413a:	f04f 0200 	mov.w	r2, #0
 801413e:	d124      	bne.n	801418a <_dtoa_r+0x662>
 8014140:	4bac      	ldr	r3, [pc, #688]	@ (80143f4 <_dtoa_r+0x8cc>)
 8014142:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8014146:	f7ec f8c9 	bl	80002dc <__adddf3>
 801414a:	4602      	mov	r2, r0
 801414c:	460b      	mov	r3, r1
 801414e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014152:	f7ec fd09 	bl	8000b68 <__aeabi_dcmpgt>
 8014156:	2800      	cmp	r0, #0
 8014158:	d145      	bne.n	80141e6 <_dtoa_r+0x6be>
 801415a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801415e:	49a5      	ldr	r1, [pc, #660]	@ (80143f4 <_dtoa_r+0x8cc>)
 8014160:	2000      	movs	r0, #0
 8014162:	f7ec f8b9 	bl	80002d8 <__aeabi_dsub>
 8014166:	4602      	mov	r2, r0
 8014168:	460b      	mov	r3, r1
 801416a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801416e:	f7ec fcdd 	bl	8000b2c <__aeabi_dcmplt>
 8014172:	2800      	cmp	r0, #0
 8014174:	f43f aef5 	beq.w	8013f62 <_dtoa_r+0x43a>
 8014178:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801417a:	1e73      	subs	r3, r6, #1
 801417c:	9315      	str	r3, [sp, #84]	@ 0x54
 801417e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014182:	2b30      	cmp	r3, #48	@ 0x30
 8014184:	d0f8      	beq.n	8014178 <_dtoa_r+0x650>
 8014186:	9f04      	ldr	r7, [sp, #16]
 8014188:	e73e      	b.n	8014008 <_dtoa_r+0x4e0>
 801418a:	4b9b      	ldr	r3, [pc, #620]	@ (80143f8 <_dtoa_r+0x8d0>)
 801418c:	f7ec fa5c 	bl	8000648 <__aeabi_dmul>
 8014190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014194:	e7bc      	b.n	8014110 <_dtoa_r+0x5e8>
 8014196:	d10c      	bne.n	80141b2 <_dtoa_r+0x68a>
 8014198:	4b98      	ldr	r3, [pc, #608]	@ (80143fc <_dtoa_r+0x8d4>)
 801419a:	2200      	movs	r2, #0
 801419c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80141a0:	f7ec fa52 	bl	8000648 <__aeabi_dmul>
 80141a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80141a8:	f7ec fcd4 	bl	8000b54 <__aeabi_dcmpge>
 80141ac:	2800      	cmp	r0, #0
 80141ae:	f000 8157 	beq.w	8014460 <_dtoa_r+0x938>
 80141b2:	2400      	movs	r4, #0
 80141b4:	4625      	mov	r5, r4
 80141b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80141b8:	43db      	mvns	r3, r3
 80141ba:	9304      	str	r3, [sp, #16]
 80141bc:	4656      	mov	r6, sl
 80141be:	2700      	movs	r7, #0
 80141c0:	4621      	mov	r1, r4
 80141c2:	4658      	mov	r0, fp
 80141c4:	f000 fd02 	bl	8014bcc <_Bfree>
 80141c8:	2d00      	cmp	r5, #0
 80141ca:	d0dc      	beq.n	8014186 <_dtoa_r+0x65e>
 80141cc:	b12f      	cbz	r7, 80141da <_dtoa_r+0x6b2>
 80141ce:	42af      	cmp	r7, r5
 80141d0:	d003      	beq.n	80141da <_dtoa_r+0x6b2>
 80141d2:	4639      	mov	r1, r7
 80141d4:	4658      	mov	r0, fp
 80141d6:	f000 fcf9 	bl	8014bcc <_Bfree>
 80141da:	4629      	mov	r1, r5
 80141dc:	4658      	mov	r0, fp
 80141de:	f000 fcf5 	bl	8014bcc <_Bfree>
 80141e2:	e7d0      	b.n	8014186 <_dtoa_r+0x65e>
 80141e4:	9704      	str	r7, [sp, #16]
 80141e6:	4633      	mov	r3, r6
 80141e8:	461e      	mov	r6, r3
 80141ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80141ee:	2a39      	cmp	r2, #57	@ 0x39
 80141f0:	d107      	bne.n	8014202 <_dtoa_r+0x6da>
 80141f2:	459a      	cmp	sl, r3
 80141f4:	d1f8      	bne.n	80141e8 <_dtoa_r+0x6c0>
 80141f6:	9a04      	ldr	r2, [sp, #16]
 80141f8:	3201      	adds	r2, #1
 80141fa:	9204      	str	r2, [sp, #16]
 80141fc:	2230      	movs	r2, #48	@ 0x30
 80141fe:	f88a 2000 	strb.w	r2, [sl]
 8014202:	781a      	ldrb	r2, [r3, #0]
 8014204:	3201      	adds	r2, #1
 8014206:	701a      	strb	r2, [r3, #0]
 8014208:	e7bd      	b.n	8014186 <_dtoa_r+0x65e>
 801420a:	4b7b      	ldr	r3, [pc, #492]	@ (80143f8 <_dtoa_r+0x8d0>)
 801420c:	2200      	movs	r2, #0
 801420e:	f7ec fa1b 	bl	8000648 <__aeabi_dmul>
 8014212:	2200      	movs	r2, #0
 8014214:	2300      	movs	r3, #0
 8014216:	4604      	mov	r4, r0
 8014218:	460d      	mov	r5, r1
 801421a:	f7ec fc7d 	bl	8000b18 <__aeabi_dcmpeq>
 801421e:	2800      	cmp	r0, #0
 8014220:	f43f aebb 	beq.w	8013f9a <_dtoa_r+0x472>
 8014224:	e6f0      	b.n	8014008 <_dtoa_r+0x4e0>
 8014226:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014228:	2a00      	cmp	r2, #0
 801422a:	f000 80db 	beq.w	80143e4 <_dtoa_r+0x8bc>
 801422e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014230:	2a01      	cmp	r2, #1
 8014232:	f300 80bf 	bgt.w	80143b4 <_dtoa_r+0x88c>
 8014236:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014238:	2a00      	cmp	r2, #0
 801423a:	f000 80b7 	beq.w	80143ac <_dtoa_r+0x884>
 801423e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8014242:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014244:	4646      	mov	r6, r8
 8014246:	9a08      	ldr	r2, [sp, #32]
 8014248:	2101      	movs	r1, #1
 801424a:	441a      	add	r2, r3
 801424c:	4658      	mov	r0, fp
 801424e:	4498      	add	r8, r3
 8014250:	9208      	str	r2, [sp, #32]
 8014252:	f000 fd6f 	bl	8014d34 <__i2b>
 8014256:	4605      	mov	r5, r0
 8014258:	b15e      	cbz	r6, 8014272 <_dtoa_r+0x74a>
 801425a:	9b08      	ldr	r3, [sp, #32]
 801425c:	2b00      	cmp	r3, #0
 801425e:	dd08      	ble.n	8014272 <_dtoa_r+0x74a>
 8014260:	42b3      	cmp	r3, r6
 8014262:	9a08      	ldr	r2, [sp, #32]
 8014264:	bfa8      	it	ge
 8014266:	4633      	movge	r3, r6
 8014268:	eba8 0803 	sub.w	r8, r8, r3
 801426c:	1af6      	subs	r6, r6, r3
 801426e:	1ad3      	subs	r3, r2, r3
 8014270:	9308      	str	r3, [sp, #32]
 8014272:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014274:	b1f3      	cbz	r3, 80142b4 <_dtoa_r+0x78c>
 8014276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014278:	2b00      	cmp	r3, #0
 801427a:	f000 80b7 	beq.w	80143ec <_dtoa_r+0x8c4>
 801427e:	b18c      	cbz	r4, 80142a4 <_dtoa_r+0x77c>
 8014280:	4629      	mov	r1, r5
 8014282:	4622      	mov	r2, r4
 8014284:	4658      	mov	r0, fp
 8014286:	f000 fe15 	bl	8014eb4 <__pow5mult>
 801428a:	464a      	mov	r2, r9
 801428c:	4601      	mov	r1, r0
 801428e:	4605      	mov	r5, r0
 8014290:	4658      	mov	r0, fp
 8014292:	f000 fd65 	bl	8014d60 <__multiply>
 8014296:	4649      	mov	r1, r9
 8014298:	9004      	str	r0, [sp, #16]
 801429a:	4658      	mov	r0, fp
 801429c:	f000 fc96 	bl	8014bcc <_Bfree>
 80142a0:	9b04      	ldr	r3, [sp, #16]
 80142a2:	4699      	mov	r9, r3
 80142a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80142a6:	1b1a      	subs	r2, r3, r4
 80142a8:	d004      	beq.n	80142b4 <_dtoa_r+0x78c>
 80142aa:	4649      	mov	r1, r9
 80142ac:	4658      	mov	r0, fp
 80142ae:	f000 fe01 	bl	8014eb4 <__pow5mult>
 80142b2:	4681      	mov	r9, r0
 80142b4:	2101      	movs	r1, #1
 80142b6:	4658      	mov	r0, fp
 80142b8:	f000 fd3c 	bl	8014d34 <__i2b>
 80142bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80142be:	4604      	mov	r4, r0
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	f000 81cf 	beq.w	8014664 <_dtoa_r+0xb3c>
 80142c6:	461a      	mov	r2, r3
 80142c8:	4601      	mov	r1, r0
 80142ca:	4658      	mov	r0, fp
 80142cc:	f000 fdf2 	bl	8014eb4 <__pow5mult>
 80142d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142d2:	2b01      	cmp	r3, #1
 80142d4:	4604      	mov	r4, r0
 80142d6:	f300 8095 	bgt.w	8014404 <_dtoa_r+0x8dc>
 80142da:	9b02      	ldr	r3, [sp, #8]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	f040 8087 	bne.w	80143f0 <_dtoa_r+0x8c8>
 80142e2:	9b03      	ldr	r3, [sp, #12]
 80142e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	f040 8089 	bne.w	8014400 <_dtoa_r+0x8d8>
 80142ee:	9b03      	ldr	r3, [sp, #12]
 80142f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80142f4:	0d1b      	lsrs	r3, r3, #20
 80142f6:	051b      	lsls	r3, r3, #20
 80142f8:	b12b      	cbz	r3, 8014306 <_dtoa_r+0x7de>
 80142fa:	9b08      	ldr	r3, [sp, #32]
 80142fc:	3301      	adds	r3, #1
 80142fe:	9308      	str	r3, [sp, #32]
 8014300:	f108 0801 	add.w	r8, r8, #1
 8014304:	2301      	movs	r3, #1
 8014306:	930a      	str	r3, [sp, #40]	@ 0x28
 8014308:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801430a:	2b00      	cmp	r3, #0
 801430c:	f000 81b0 	beq.w	8014670 <_dtoa_r+0xb48>
 8014310:	6923      	ldr	r3, [r4, #16]
 8014312:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014316:	6918      	ldr	r0, [r3, #16]
 8014318:	f000 fcc0 	bl	8014c9c <__hi0bits>
 801431c:	f1c0 0020 	rsb	r0, r0, #32
 8014320:	9b08      	ldr	r3, [sp, #32]
 8014322:	4418      	add	r0, r3
 8014324:	f010 001f 	ands.w	r0, r0, #31
 8014328:	d077      	beq.n	801441a <_dtoa_r+0x8f2>
 801432a:	f1c0 0320 	rsb	r3, r0, #32
 801432e:	2b04      	cmp	r3, #4
 8014330:	dd6b      	ble.n	801440a <_dtoa_r+0x8e2>
 8014332:	9b08      	ldr	r3, [sp, #32]
 8014334:	f1c0 001c 	rsb	r0, r0, #28
 8014338:	4403      	add	r3, r0
 801433a:	4480      	add	r8, r0
 801433c:	4406      	add	r6, r0
 801433e:	9308      	str	r3, [sp, #32]
 8014340:	f1b8 0f00 	cmp.w	r8, #0
 8014344:	dd05      	ble.n	8014352 <_dtoa_r+0x82a>
 8014346:	4649      	mov	r1, r9
 8014348:	4642      	mov	r2, r8
 801434a:	4658      	mov	r0, fp
 801434c:	f000 fe0c 	bl	8014f68 <__lshift>
 8014350:	4681      	mov	r9, r0
 8014352:	9b08      	ldr	r3, [sp, #32]
 8014354:	2b00      	cmp	r3, #0
 8014356:	dd05      	ble.n	8014364 <_dtoa_r+0x83c>
 8014358:	4621      	mov	r1, r4
 801435a:	461a      	mov	r2, r3
 801435c:	4658      	mov	r0, fp
 801435e:	f000 fe03 	bl	8014f68 <__lshift>
 8014362:	4604      	mov	r4, r0
 8014364:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014366:	2b00      	cmp	r3, #0
 8014368:	d059      	beq.n	801441e <_dtoa_r+0x8f6>
 801436a:	4621      	mov	r1, r4
 801436c:	4648      	mov	r0, r9
 801436e:	f000 fe67 	bl	8015040 <__mcmp>
 8014372:	2800      	cmp	r0, #0
 8014374:	da53      	bge.n	801441e <_dtoa_r+0x8f6>
 8014376:	1e7b      	subs	r3, r7, #1
 8014378:	9304      	str	r3, [sp, #16]
 801437a:	4649      	mov	r1, r9
 801437c:	2300      	movs	r3, #0
 801437e:	220a      	movs	r2, #10
 8014380:	4658      	mov	r0, fp
 8014382:	f000 fc45 	bl	8014c10 <__multadd>
 8014386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014388:	4681      	mov	r9, r0
 801438a:	2b00      	cmp	r3, #0
 801438c:	f000 8172 	beq.w	8014674 <_dtoa_r+0xb4c>
 8014390:	2300      	movs	r3, #0
 8014392:	4629      	mov	r1, r5
 8014394:	220a      	movs	r2, #10
 8014396:	4658      	mov	r0, fp
 8014398:	f000 fc3a 	bl	8014c10 <__multadd>
 801439c:	9b00      	ldr	r3, [sp, #0]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	4605      	mov	r5, r0
 80143a2:	dc67      	bgt.n	8014474 <_dtoa_r+0x94c>
 80143a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143a6:	2b02      	cmp	r3, #2
 80143a8:	dc41      	bgt.n	801442e <_dtoa_r+0x906>
 80143aa:	e063      	b.n	8014474 <_dtoa_r+0x94c>
 80143ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80143ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80143b2:	e746      	b.n	8014242 <_dtoa_r+0x71a>
 80143b4:	9b07      	ldr	r3, [sp, #28]
 80143b6:	1e5c      	subs	r4, r3, #1
 80143b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80143ba:	42a3      	cmp	r3, r4
 80143bc:	bfbf      	itttt	lt
 80143be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80143c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80143c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80143c4:	1ae3      	sublt	r3, r4, r3
 80143c6:	bfb4      	ite	lt
 80143c8:	18d2      	addlt	r2, r2, r3
 80143ca:	1b1c      	subge	r4, r3, r4
 80143cc:	9b07      	ldr	r3, [sp, #28]
 80143ce:	bfbc      	itt	lt
 80143d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80143d2:	2400      	movlt	r4, #0
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	bfb5      	itete	lt
 80143d8:	eba8 0603 	sublt.w	r6, r8, r3
 80143dc:	9b07      	ldrge	r3, [sp, #28]
 80143de:	2300      	movlt	r3, #0
 80143e0:	4646      	movge	r6, r8
 80143e2:	e730      	b.n	8014246 <_dtoa_r+0x71e>
 80143e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80143e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80143e8:	4646      	mov	r6, r8
 80143ea:	e735      	b.n	8014258 <_dtoa_r+0x730>
 80143ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80143ee:	e75c      	b.n	80142aa <_dtoa_r+0x782>
 80143f0:	2300      	movs	r3, #0
 80143f2:	e788      	b.n	8014306 <_dtoa_r+0x7de>
 80143f4:	3fe00000 	.word	0x3fe00000
 80143f8:	40240000 	.word	0x40240000
 80143fc:	40140000 	.word	0x40140000
 8014400:	9b02      	ldr	r3, [sp, #8]
 8014402:	e780      	b.n	8014306 <_dtoa_r+0x7de>
 8014404:	2300      	movs	r3, #0
 8014406:	930a      	str	r3, [sp, #40]	@ 0x28
 8014408:	e782      	b.n	8014310 <_dtoa_r+0x7e8>
 801440a:	d099      	beq.n	8014340 <_dtoa_r+0x818>
 801440c:	9a08      	ldr	r2, [sp, #32]
 801440e:	331c      	adds	r3, #28
 8014410:	441a      	add	r2, r3
 8014412:	4498      	add	r8, r3
 8014414:	441e      	add	r6, r3
 8014416:	9208      	str	r2, [sp, #32]
 8014418:	e792      	b.n	8014340 <_dtoa_r+0x818>
 801441a:	4603      	mov	r3, r0
 801441c:	e7f6      	b.n	801440c <_dtoa_r+0x8e4>
 801441e:	9b07      	ldr	r3, [sp, #28]
 8014420:	9704      	str	r7, [sp, #16]
 8014422:	2b00      	cmp	r3, #0
 8014424:	dc20      	bgt.n	8014468 <_dtoa_r+0x940>
 8014426:	9300      	str	r3, [sp, #0]
 8014428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801442a:	2b02      	cmp	r3, #2
 801442c:	dd1e      	ble.n	801446c <_dtoa_r+0x944>
 801442e:	9b00      	ldr	r3, [sp, #0]
 8014430:	2b00      	cmp	r3, #0
 8014432:	f47f aec0 	bne.w	80141b6 <_dtoa_r+0x68e>
 8014436:	4621      	mov	r1, r4
 8014438:	2205      	movs	r2, #5
 801443a:	4658      	mov	r0, fp
 801443c:	f000 fbe8 	bl	8014c10 <__multadd>
 8014440:	4601      	mov	r1, r0
 8014442:	4604      	mov	r4, r0
 8014444:	4648      	mov	r0, r9
 8014446:	f000 fdfb 	bl	8015040 <__mcmp>
 801444a:	2800      	cmp	r0, #0
 801444c:	f77f aeb3 	ble.w	80141b6 <_dtoa_r+0x68e>
 8014450:	4656      	mov	r6, sl
 8014452:	2331      	movs	r3, #49	@ 0x31
 8014454:	f806 3b01 	strb.w	r3, [r6], #1
 8014458:	9b04      	ldr	r3, [sp, #16]
 801445a:	3301      	adds	r3, #1
 801445c:	9304      	str	r3, [sp, #16]
 801445e:	e6ae      	b.n	80141be <_dtoa_r+0x696>
 8014460:	9c07      	ldr	r4, [sp, #28]
 8014462:	9704      	str	r7, [sp, #16]
 8014464:	4625      	mov	r5, r4
 8014466:	e7f3      	b.n	8014450 <_dtoa_r+0x928>
 8014468:	9b07      	ldr	r3, [sp, #28]
 801446a:	9300      	str	r3, [sp, #0]
 801446c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801446e:	2b00      	cmp	r3, #0
 8014470:	f000 8104 	beq.w	801467c <_dtoa_r+0xb54>
 8014474:	2e00      	cmp	r6, #0
 8014476:	dd05      	ble.n	8014484 <_dtoa_r+0x95c>
 8014478:	4629      	mov	r1, r5
 801447a:	4632      	mov	r2, r6
 801447c:	4658      	mov	r0, fp
 801447e:	f000 fd73 	bl	8014f68 <__lshift>
 8014482:	4605      	mov	r5, r0
 8014484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014486:	2b00      	cmp	r3, #0
 8014488:	d05a      	beq.n	8014540 <_dtoa_r+0xa18>
 801448a:	6869      	ldr	r1, [r5, #4]
 801448c:	4658      	mov	r0, fp
 801448e:	f000 fb5d 	bl	8014b4c <_Balloc>
 8014492:	4606      	mov	r6, r0
 8014494:	b928      	cbnz	r0, 80144a2 <_dtoa_r+0x97a>
 8014496:	4b84      	ldr	r3, [pc, #528]	@ (80146a8 <_dtoa_r+0xb80>)
 8014498:	4602      	mov	r2, r0
 801449a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801449e:	f7ff bb5a 	b.w	8013b56 <_dtoa_r+0x2e>
 80144a2:	692a      	ldr	r2, [r5, #16]
 80144a4:	3202      	adds	r2, #2
 80144a6:	0092      	lsls	r2, r2, #2
 80144a8:	f105 010c 	add.w	r1, r5, #12
 80144ac:	300c      	adds	r0, #12
 80144ae:	f7ff fa7f 	bl	80139b0 <memcpy>
 80144b2:	2201      	movs	r2, #1
 80144b4:	4631      	mov	r1, r6
 80144b6:	4658      	mov	r0, fp
 80144b8:	f000 fd56 	bl	8014f68 <__lshift>
 80144bc:	f10a 0301 	add.w	r3, sl, #1
 80144c0:	9307      	str	r3, [sp, #28]
 80144c2:	9b00      	ldr	r3, [sp, #0]
 80144c4:	4453      	add	r3, sl
 80144c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80144c8:	9b02      	ldr	r3, [sp, #8]
 80144ca:	f003 0301 	and.w	r3, r3, #1
 80144ce:	462f      	mov	r7, r5
 80144d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80144d2:	4605      	mov	r5, r0
 80144d4:	9b07      	ldr	r3, [sp, #28]
 80144d6:	4621      	mov	r1, r4
 80144d8:	3b01      	subs	r3, #1
 80144da:	4648      	mov	r0, r9
 80144dc:	9300      	str	r3, [sp, #0]
 80144de:	f7ff fa9b 	bl	8013a18 <quorem>
 80144e2:	4639      	mov	r1, r7
 80144e4:	9002      	str	r0, [sp, #8]
 80144e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80144ea:	4648      	mov	r0, r9
 80144ec:	f000 fda8 	bl	8015040 <__mcmp>
 80144f0:	462a      	mov	r2, r5
 80144f2:	9008      	str	r0, [sp, #32]
 80144f4:	4621      	mov	r1, r4
 80144f6:	4658      	mov	r0, fp
 80144f8:	f000 fdbe 	bl	8015078 <__mdiff>
 80144fc:	68c2      	ldr	r2, [r0, #12]
 80144fe:	4606      	mov	r6, r0
 8014500:	bb02      	cbnz	r2, 8014544 <_dtoa_r+0xa1c>
 8014502:	4601      	mov	r1, r0
 8014504:	4648      	mov	r0, r9
 8014506:	f000 fd9b 	bl	8015040 <__mcmp>
 801450a:	4602      	mov	r2, r0
 801450c:	4631      	mov	r1, r6
 801450e:	4658      	mov	r0, fp
 8014510:	920e      	str	r2, [sp, #56]	@ 0x38
 8014512:	f000 fb5b 	bl	8014bcc <_Bfree>
 8014516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014518:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801451a:	9e07      	ldr	r6, [sp, #28]
 801451c:	ea43 0102 	orr.w	r1, r3, r2
 8014520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014522:	4319      	orrs	r1, r3
 8014524:	d110      	bne.n	8014548 <_dtoa_r+0xa20>
 8014526:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801452a:	d029      	beq.n	8014580 <_dtoa_r+0xa58>
 801452c:	9b08      	ldr	r3, [sp, #32]
 801452e:	2b00      	cmp	r3, #0
 8014530:	dd02      	ble.n	8014538 <_dtoa_r+0xa10>
 8014532:	9b02      	ldr	r3, [sp, #8]
 8014534:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8014538:	9b00      	ldr	r3, [sp, #0]
 801453a:	f883 8000 	strb.w	r8, [r3]
 801453e:	e63f      	b.n	80141c0 <_dtoa_r+0x698>
 8014540:	4628      	mov	r0, r5
 8014542:	e7bb      	b.n	80144bc <_dtoa_r+0x994>
 8014544:	2201      	movs	r2, #1
 8014546:	e7e1      	b.n	801450c <_dtoa_r+0x9e4>
 8014548:	9b08      	ldr	r3, [sp, #32]
 801454a:	2b00      	cmp	r3, #0
 801454c:	db04      	blt.n	8014558 <_dtoa_r+0xa30>
 801454e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014550:	430b      	orrs	r3, r1
 8014552:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014554:	430b      	orrs	r3, r1
 8014556:	d120      	bne.n	801459a <_dtoa_r+0xa72>
 8014558:	2a00      	cmp	r2, #0
 801455a:	dded      	ble.n	8014538 <_dtoa_r+0xa10>
 801455c:	4649      	mov	r1, r9
 801455e:	2201      	movs	r2, #1
 8014560:	4658      	mov	r0, fp
 8014562:	f000 fd01 	bl	8014f68 <__lshift>
 8014566:	4621      	mov	r1, r4
 8014568:	4681      	mov	r9, r0
 801456a:	f000 fd69 	bl	8015040 <__mcmp>
 801456e:	2800      	cmp	r0, #0
 8014570:	dc03      	bgt.n	801457a <_dtoa_r+0xa52>
 8014572:	d1e1      	bne.n	8014538 <_dtoa_r+0xa10>
 8014574:	f018 0f01 	tst.w	r8, #1
 8014578:	d0de      	beq.n	8014538 <_dtoa_r+0xa10>
 801457a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801457e:	d1d8      	bne.n	8014532 <_dtoa_r+0xa0a>
 8014580:	9a00      	ldr	r2, [sp, #0]
 8014582:	2339      	movs	r3, #57	@ 0x39
 8014584:	7013      	strb	r3, [r2, #0]
 8014586:	4633      	mov	r3, r6
 8014588:	461e      	mov	r6, r3
 801458a:	3b01      	subs	r3, #1
 801458c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014590:	2a39      	cmp	r2, #57	@ 0x39
 8014592:	d052      	beq.n	801463a <_dtoa_r+0xb12>
 8014594:	3201      	adds	r2, #1
 8014596:	701a      	strb	r2, [r3, #0]
 8014598:	e612      	b.n	80141c0 <_dtoa_r+0x698>
 801459a:	2a00      	cmp	r2, #0
 801459c:	dd07      	ble.n	80145ae <_dtoa_r+0xa86>
 801459e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80145a2:	d0ed      	beq.n	8014580 <_dtoa_r+0xa58>
 80145a4:	9a00      	ldr	r2, [sp, #0]
 80145a6:	f108 0301 	add.w	r3, r8, #1
 80145aa:	7013      	strb	r3, [r2, #0]
 80145ac:	e608      	b.n	80141c0 <_dtoa_r+0x698>
 80145ae:	9b07      	ldr	r3, [sp, #28]
 80145b0:	9a07      	ldr	r2, [sp, #28]
 80145b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80145b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80145b8:	4293      	cmp	r3, r2
 80145ba:	d028      	beq.n	801460e <_dtoa_r+0xae6>
 80145bc:	4649      	mov	r1, r9
 80145be:	2300      	movs	r3, #0
 80145c0:	220a      	movs	r2, #10
 80145c2:	4658      	mov	r0, fp
 80145c4:	f000 fb24 	bl	8014c10 <__multadd>
 80145c8:	42af      	cmp	r7, r5
 80145ca:	4681      	mov	r9, r0
 80145cc:	f04f 0300 	mov.w	r3, #0
 80145d0:	f04f 020a 	mov.w	r2, #10
 80145d4:	4639      	mov	r1, r7
 80145d6:	4658      	mov	r0, fp
 80145d8:	d107      	bne.n	80145ea <_dtoa_r+0xac2>
 80145da:	f000 fb19 	bl	8014c10 <__multadd>
 80145de:	4607      	mov	r7, r0
 80145e0:	4605      	mov	r5, r0
 80145e2:	9b07      	ldr	r3, [sp, #28]
 80145e4:	3301      	adds	r3, #1
 80145e6:	9307      	str	r3, [sp, #28]
 80145e8:	e774      	b.n	80144d4 <_dtoa_r+0x9ac>
 80145ea:	f000 fb11 	bl	8014c10 <__multadd>
 80145ee:	4629      	mov	r1, r5
 80145f0:	4607      	mov	r7, r0
 80145f2:	2300      	movs	r3, #0
 80145f4:	220a      	movs	r2, #10
 80145f6:	4658      	mov	r0, fp
 80145f8:	f000 fb0a 	bl	8014c10 <__multadd>
 80145fc:	4605      	mov	r5, r0
 80145fe:	e7f0      	b.n	80145e2 <_dtoa_r+0xaba>
 8014600:	9b00      	ldr	r3, [sp, #0]
 8014602:	2b00      	cmp	r3, #0
 8014604:	bfcc      	ite	gt
 8014606:	461e      	movgt	r6, r3
 8014608:	2601      	movle	r6, #1
 801460a:	4456      	add	r6, sl
 801460c:	2700      	movs	r7, #0
 801460e:	4649      	mov	r1, r9
 8014610:	2201      	movs	r2, #1
 8014612:	4658      	mov	r0, fp
 8014614:	f000 fca8 	bl	8014f68 <__lshift>
 8014618:	4621      	mov	r1, r4
 801461a:	4681      	mov	r9, r0
 801461c:	f000 fd10 	bl	8015040 <__mcmp>
 8014620:	2800      	cmp	r0, #0
 8014622:	dcb0      	bgt.n	8014586 <_dtoa_r+0xa5e>
 8014624:	d102      	bne.n	801462c <_dtoa_r+0xb04>
 8014626:	f018 0f01 	tst.w	r8, #1
 801462a:	d1ac      	bne.n	8014586 <_dtoa_r+0xa5e>
 801462c:	4633      	mov	r3, r6
 801462e:	461e      	mov	r6, r3
 8014630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014634:	2a30      	cmp	r2, #48	@ 0x30
 8014636:	d0fa      	beq.n	801462e <_dtoa_r+0xb06>
 8014638:	e5c2      	b.n	80141c0 <_dtoa_r+0x698>
 801463a:	459a      	cmp	sl, r3
 801463c:	d1a4      	bne.n	8014588 <_dtoa_r+0xa60>
 801463e:	9b04      	ldr	r3, [sp, #16]
 8014640:	3301      	adds	r3, #1
 8014642:	9304      	str	r3, [sp, #16]
 8014644:	2331      	movs	r3, #49	@ 0x31
 8014646:	f88a 3000 	strb.w	r3, [sl]
 801464a:	e5b9      	b.n	80141c0 <_dtoa_r+0x698>
 801464c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801464e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80146ac <_dtoa_r+0xb84>
 8014652:	b11b      	cbz	r3, 801465c <_dtoa_r+0xb34>
 8014654:	f10a 0308 	add.w	r3, sl, #8
 8014658:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801465a:	6013      	str	r3, [r2, #0]
 801465c:	4650      	mov	r0, sl
 801465e:	b019      	add	sp, #100	@ 0x64
 8014660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014666:	2b01      	cmp	r3, #1
 8014668:	f77f ae37 	ble.w	80142da <_dtoa_r+0x7b2>
 801466c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801466e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014670:	2001      	movs	r0, #1
 8014672:	e655      	b.n	8014320 <_dtoa_r+0x7f8>
 8014674:	9b00      	ldr	r3, [sp, #0]
 8014676:	2b00      	cmp	r3, #0
 8014678:	f77f aed6 	ble.w	8014428 <_dtoa_r+0x900>
 801467c:	4656      	mov	r6, sl
 801467e:	4621      	mov	r1, r4
 8014680:	4648      	mov	r0, r9
 8014682:	f7ff f9c9 	bl	8013a18 <quorem>
 8014686:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801468a:	f806 8b01 	strb.w	r8, [r6], #1
 801468e:	9b00      	ldr	r3, [sp, #0]
 8014690:	eba6 020a 	sub.w	r2, r6, sl
 8014694:	4293      	cmp	r3, r2
 8014696:	ddb3      	ble.n	8014600 <_dtoa_r+0xad8>
 8014698:	4649      	mov	r1, r9
 801469a:	2300      	movs	r3, #0
 801469c:	220a      	movs	r2, #10
 801469e:	4658      	mov	r0, fp
 80146a0:	f000 fab6 	bl	8014c10 <__multadd>
 80146a4:	4681      	mov	r9, r0
 80146a6:	e7ea      	b.n	801467e <_dtoa_r+0xb56>
 80146a8:	08016ddd 	.word	0x08016ddd
 80146ac:	08016d61 	.word	0x08016d61

080146b0 <_free_r>:
 80146b0:	b538      	push	{r3, r4, r5, lr}
 80146b2:	4605      	mov	r5, r0
 80146b4:	2900      	cmp	r1, #0
 80146b6:	d041      	beq.n	801473c <_free_r+0x8c>
 80146b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80146bc:	1f0c      	subs	r4, r1, #4
 80146be:	2b00      	cmp	r3, #0
 80146c0:	bfb8      	it	lt
 80146c2:	18e4      	addlt	r4, r4, r3
 80146c4:	f7fe ff96 	bl	80135f4 <__malloc_lock>
 80146c8:	4a1d      	ldr	r2, [pc, #116]	@ (8014740 <_free_r+0x90>)
 80146ca:	6813      	ldr	r3, [r2, #0]
 80146cc:	b933      	cbnz	r3, 80146dc <_free_r+0x2c>
 80146ce:	6063      	str	r3, [r4, #4]
 80146d0:	6014      	str	r4, [r2, #0]
 80146d2:	4628      	mov	r0, r5
 80146d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80146d8:	f7fe bf92 	b.w	8013600 <__malloc_unlock>
 80146dc:	42a3      	cmp	r3, r4
 80146de:	d908      	bls.n	80146f2 <_free_r+0x42>
 80146e0:	6820      	ldr	r0, [r4, #0]
 80146e2:	1821      	adds	r1, r4, r0
 80146e4:	428b      	cmp	r3, r1
 80146e6:	bf01      	itttt	eq
 80146e8:	6819      	ldreq	r1, [r3, #0]
 80146ea:	685b      	ldreq	r3, [r3, #4]
 80146ec:	1809      	addeq	r1, r1, r0
 80146ee:	6021      	streq	r1, [r4, #0]
 80146f0:	e7ed      	b.n	80146ce <_free_r+0x1e>
 80146f2:	461a      	mov	r2, r3
 80146f4:	685b      	ldr	r3, [r3, #4]
 80146f6:	b10b      	cbz	r3, 80146fc <_free_r+0x4c>
 80146f8:	42a3      	cmp	r3, r4
 80146fa:	d9fa      	bls.n	80146f2 <_free_r+0x42>
 80146fc:	6811      	ldr	r1, [r2, #0]
 80146fe:	1850      	adds	r0, r2, r1
 8014700:	42a0      	cmp	r0, r4
 8014702:	d10b      	bne.n	801471c <_free_r+0x6c>
 8014704:	6820      	ldr	r0, [r4, #0]
 8014706:	4401      	add	r1, r0
 8014708:	1850      	adds	r0, r2, r1
 801470a:	4283      	cmp	r3, r0
 801470c:	6011      	str	r1, [r2, #0]
 801470e:	d1e0      	bne.n	80146d2 <_free_r+0x22>
 8014710:	6818      	ldr	r0, [r3, #0]
 8014712:	685b      	ldr	r3, [r3, #4]
 8014714:	6053      	str	r3, [r2, #4]
 8014716:	4408      	add	r0, r1
 8014718:	6010      	str	r0, [r2, #0]
 801471a:	e7da      	b.n	80146d2 <_free_r+0x22>
 801471c:	d902      	bls.n	8014724 <_free_r+0x74>
 801471e:	230c      	movs	r3, #12
 8014720:	602b      	str	r3, [r5, #0]
 8014722:	e7d6      	b.n	80146d2 <_free_r+0x22>
 8014724:	6820      	ldr	r0, [r4, #0]
 8014726:	1821      	adds	r1, r4, r0
 8014728:	428b      	cmp	r3, r1
 801472a:	bf04      	itt	eq
 801472c:	6819      	ldreq	r1, [r3, #0]
 801472e:	685b      	ldreq	r3, [r3, #4]
 8014730:	6063      	str	r3, [r4, #4]
 8014732:	bf04      	itt	eq
 8014734:	1809      	addeq	r1, r1, r0
 8014736:	6021      	streq	r1, [r4, #0]
 8014738:	6054      	str	r4, [r2, #4]
 801473a:	e7ca      	b.n	80146d2 <_free_r+0x22>
 801473c:	bd38      	pop	{r3, r4, r5, pc}
 801473e:	bf00      	nop
 8014740:	20001590 	.word	0x20001590

08014744 <__ssputs_r>:
 8014744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014748:	688e      	ldr	r6, [r1, #8]
 801474a:	461f      	mov	r7, r3
 801474c:	42be      	cmp	r6, r7
 801474e:	680b      	ldr	r3, [r1, #0]
 8014750:	4682      	mov	sl, r0
 8014752:	460c      	mov	r4, r1
 8014754:	4690      	mov	r8, r2
 8014756:	d82d      	bhi.n	80147b4 <__ssputs_r+0x70>
 8014758:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801475c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014760:	d026      	beq.n	80147b0 <__ssputs_r+0x6c>
 8014762:	6965      	ldr	r5, [r4, #20]
 8014764:	6909      	ldr	r1, [r1, #16]
 8014766:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801476a:	eba3 0901 	sub.w	r9, r3, r1
 801476e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014772:	1c7b      	adds	r3, r7, #1
 8014774:	444b      	add	r3, r9
 8014776:	106d      	asrs	r5, r5, #1
 8014778:	429d      	cmp	r5, r3
 801477a:	bf38      	it	cc
 801477c:	461d      	movcc	r5, r3
 801477e:	0553      	lsls	r3, r2, #21
 8014780:	d527      	bpl.n	80147d2 <__ssputs_r+0x8e>
 8014782:	4629      	mov	r1, r5
 8014784:	f7fe fd28 	bl	80131d8 <_malloc_r>
 8014788:	4606      	mov	r6, r0
 801478a:	b360      	cbz	r0, 80147e6 <__ssputs_r+0xa2>
 801478c:	6921      	ldr	r1, [r4, #16]
 801478e:	464a      	mov	r2, r9
 8014790:	f7ff f90e 	bl	80139b0 <memcpy>
 8014794:	89a3      	ldrh	r3, [r4, #12]
 8014796:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801479a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801479e:	81a3      	strh	r3, [r4, #12]
 80147a0:	6126      	str	r6, [r4, #16]
 80147a2:	6165      	str	r5, [r4, #20]
 80147a4:	444e      	add	r6, r9
 80147a6:	eba5 0509 	sub.w	r5, r5, r9
 80147aa:	6026      	str	r6, [r4, #0]
 80147ac:	60a5      	str	r5, [r4, #8]
 80147ae:	463e      	mov	r6, r7
 80147b0:	42be      	cmp	r6, r7
 80147b2:	d900      	bls.n	80147b6 <__ssputs_r+0x72>
 80147b4:	463e      	mov	r6, r7
 80147b6:	6820      	ldr	r0, [r4, #0]
 80147b8:	4632      	mov	r2, r6
 80147ba:	4641      	mov	r1, r8
 80147bc:	f000 fdcc 	bl	8015358 <memmove>
 80147c0:	68a3      	ldr	r3, [r4, #8]
 80147c2:	1b9b      	subs	r3, r3, r6
 80147c4:	60a3      	str	r3, [r4, #8]
 80147c6:	6823      	ldr	r3, [r4, #0]
 80147c8:	4433      	add	r3, r6
 80147ca:	6023      	str	r3, [r4, #0]
 80147cc:	2000      	movs	r0, #0
 80147ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147d2:	462a      	mov	r2, r5
 80147d4:	f000 fd92 	bl	80152fc <_realloc_r>
 80147d8:	4606      	mov	r6, r0
 80147da:	2800      	cmp	r0, #0
 80147dc:	d1e0      	bne.n	80147a0 <__ssputs_r+0x5c>
 80147de:	6921      	ldr	r1, [r4, #16]
 80147e0:	4650      	mov	r0, sl
 80147e2:	f7ff ff65 	bl	80146b0 <_free_r>
 80147e6:	230c      	movs	r3, #12
 80147e8:	f8ca 3000 	str.w	r3, [sl]
 80147ec:	89a3      	ldrh	r3, [r4, #12]
 80147ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80147f2:	81a3      	strh	r3, [r4, #12]
 80147f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80147f8:	e7e9      	b.n	80147ce <__ssputs_r+0x8a>
	...

080147fc <_svfiprintf_r>:
 80147fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014800:	4698      	mov	r8, r3
 8014802:	898b      	ldrh	r3, [r1, #12]
 8014804:	061b      	lsls	r3, r3, #24
 8014806:	b09d      	sub	sp, #116	@ 0x74
 8014808:	4607      	mov	r7, r0
 801480a:	460d      	mov	r5, r1
 801480c:	4614      	mov	r4, r2
 801480e:	d510      	bpl.n	8014832 <_svfiprintf_r+0x36>
 8014810:	690b      	ldr	r3, [r1, #16]
 8014812:	b973      	cbnz	r3, 8014832 <_svfiprintf_r+0x36>
 8014814:	2140      	movs	r1, #64	@ 0x40
 8014816:	f7fe fcdf 	bl	80131d8 <_malloc_r>
 801481a:	6028      	str	r0, [r5, #0]
 801481c:	6128      	str	r0, [r5, #16]
 801481e:	b930      	cbnz	r0, 801482e <_svfiprintf_r+0x32>
 8014820:	230c      	movs	r3, #12
 8014822:	603b      	str	r3, [r7, #0]
 8014824:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014828:	b01d      	add	sp, #116	@ 0x74
 801482a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801482e:	2340      	movs	r3, #64	@ 0x40
 8014830:	616b      	str	r3, [r5, #20]
 8014832:	2300      	movs	r3, #0
 8014834:	9309      	str	r3, [sp, #36]	@ 0x24
 8014836:	2320      	movs	r3, #32
 8014838:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801483c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014840:	2330      	movs	r3, #48	@ 0x30
 8014842:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80149e0 <_svfiprintf_r+0x1e4>
 8014846:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801484a:	f04f 0901 	mov.w	r9, #1
 801484e:	4623      	mov	r3, r4
 8014850:	469a      	mov	sl, r3
 8014852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014856:	b10a      	cbz	r2, 801485c <_svfiprintf_r+0x60>
 8014858:	2a25      	cmp	r2, #37	@ 0x25
 801485a:	d1f9      	bne.n	8014850 <_svfiprintf_r+0x54>
 801485c:	ebba 0b04 	subs.w	fp, sl, r4
 8014860:	d00b      	beq.n	801487a <_svfiprintf_r+0x7e>
 8014862:	465b      	mov	r3, fp
 8014864:	4622      	mov	r2, r4
 8014866:	4629      	mov	r1, r5
 8014868:	4638      	mov	r0, r7
 801486a:	f7ff ff6b 	bl	8014744 <__ssputs_r>
 801486e:	3001      	adds	r0, #1
 8014870:	f000 80a7 	beq.w	80149c2 <_svfiprintf_r+0x1c6>
 8014874:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014876:	445a      	add	r2, fp
 8014878:	9209      	str	r2, [sp, #36]	@ 0x24
 801487a:	f89a 3000 	ldrb.w	r3, [sl]
 801487e:	2b00      	cmp	r3, #0
 8014880:	f000 809f 	beq.w	80149c2 <_svfiprintf_r+0x1c6>
 8014884:	2300      	movs	r3, #0
 8014886:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801488a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801488e:	f10a 0a01 	add.w	sl, sl, #1
 8014892:	9304      	str	r3, [sp, #16]
 8014894:	9307      	str	r3, [sp, #28]
 8014896:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801489a:	931a      	str	r3, [sp, #104]	@ 0x68
 801489c:	4654      	mov	r4, sl
 801489e:	2205      	movs	r2, #5
 80148a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148a4:	484e      	ldr	r0, [pc, #312]	@ (80149e0 <_svfiprintf_r+0x1e4>)
 80148a6:	f7eb fcbb 	bl	8000220 <memchr>
 80148aa:	9a04      	ldr	r2, [sp, #16]
 80148ac:	b9d8      	cbnz	r0, 80148e6 <_svfiprintf_r+0xea>
 80148ae:	06d0      	lsls	r0, r2, #27
 80148b0:	bf44      	itt	mi
 80148b2:	2320      	movmi	r3, #32
 80148b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80148b8:	0711      	lsls	r1, r2, #28
 80148ba:	bf44      	itt	mi
 80148bc:	232b      	movmi	r3, #43	@ 0x2b
 80148be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80148c2:	f89a 3000 	ldrb.w	r3, [sl]
 80148c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80148c8:	d015      	beq.n	80148f6 <_svfiprintf_r+0xfa>
 80148ca:	9a07      	ldr	r2, [sp, #28]
 80148cc:	4654      	mov	r4, sl
 80148ce:	2000      	movs	r0, #0
 80148d0:	f04f 0c0a 	mov.w	ip, #10
 80148d4:	4621      	mov	r1, r4
 80148d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80148da:	3b30      	subs	r3, #48	@ 0x30
 80148dc:	2b09      	cmp	r3, #9
 80148de:	d94b      	bls.n	8014978 <_svfiprintf_r+0x17c>
 80148e0:	b1b0      	cbz	r0, 8014910 <_svfiprintf_r+0x114>
 80148e2:	9207      	str	r2, [sp, #28]
 80148e4:	e014      	b.n	8014910 <_svfiprintf_r+0x114>
 80148e6:	eba0 0308 	sub.w	r3, r0, r8
 80148ea:	fa09 f303 	lsl.w	r3, r9, r3
 80148ee:	4313      	orrs	r3, r2
 80148f0:	9304      	str	r3, [sp, #16]
 80148f2:	46a2      	mov	sl, r4
 80148f4:	e7d2      	b.n	801489c <_svfiprintf_r+0xa0>
 80148f6:	9b03      	ldr	r3, [sp, #12]
 80148f8:	1d19      	adds	r1, r3, #4
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	9103      	str	r1, [sp, #12]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	bfbb      	ittet	lt
 8014902:	425b      	neglt	r3, r3
 8014904:	f042 0202 	orrlt.w	r2, r2, #2
 8014908:	9307      	strge	r3, [sp, #28]
 801490a:	9307      	strlt	r3, [sp, #28]
 801490c:	bfb8      	it	lt
 801490e:	9204      	strlt	r2, [sp, #16]
 8014910:	7823      	ldrb	r3, [r4, #0]
 8014912:	2b2e      	cmp	r3, #46	@ 0x2e
 8014914:	d10a      	bne.n	801492c <_svfiprintf_r+0x130>
 8014916:	7863      	ldrb	r3, [r4, #1]
 8014918:	2b2a      	cmp	r3, #42	@ 0x2a
 801491a:	d132      	bne.n	8014982 <_svfiprintf_r+0x186>
 801491c:	9b03      	ldr	r3, [sp, #12]
 801491e:	1d1a      	adds	r2, r3, #4
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	9203      	str	r2, [sp, #12]
 8014924:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014928:	3402      	adds	r4, #2
 801492a:	9305      	str	r3, [sp, #20]
 801492c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80149f0 <_svfiprintf_r+0x1f4>
 8014930:	7821      	ldrb	r1, [r4, #0]
 8014932:	2203      	movs	r2, #3
 8014934:	4650      	mov	r0, sl
 8014936:	f7eb fc73 	bl	8000220 <memchr>
 801493a:	b138      	cbz	r0, 801494c <_svfiprintf_r+0x150>
 801493c:	9b04      	ldr	r3, [sp, #16]
 801493e:	eba0 000a 	sub.w	r0, r0, sl
 8014942:	2240      	movs	r2, #64	@ 0x40
 8014944:	4082      	lsls	r2, r0
 8014946:	4313      	orrs	r3, r2
 8014948:	3401      	adds	r4, #1
 801494a:	9304      	str	r3, [sp, #16]
 801494c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014950:	4824      	ldr	r0, [pc, #144]	@ (80149e4 <_svfiprintf_r+0x1e8>)
 8014952:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014956:	2206      	movs	r2, #6
 8014958:	f7eb fc62 	bl	8000220 <memchr>
 801495c:	2800      	cmp	r0, #0
 801495e:	d036      	beq.n	80149ce <_svfiprintf_r+0x1d2>
 8014960:	4b21      	ldr	r3, [pc, #132]	@ (80149e8 <_svfiprintf_r+0x1ec>)
 8014962:	bb1b      	cbnz	r3, 80149ac <_svfiprintf_r+0x1b0>
 8014964:	9b03      	ldr	r3, [sp, #12]
 8014966:	3307      	adds	r3, #7
 8014968:	f023 0307 	bic.w	r3, r3, #7
 801496c:	3308      	adds	r3, #8
 801496e:	9303      	str	r3, [sp, #12]
 8014970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014972:	4433      	add	r3, r6
 8014974:	9309      	str	r3, [sp, #36]	@ 0x24
 8014976:	e76a      	b.n	801484e <_svfiprintf_r+0x52>
 8014978:	fb0c 3202 	mla	r2, ip, r2, r3
 801497c:	460c      	mov	r4, r1
 801497e:	2001      	movs	r0, #1
 8014980:	e7a8      	b.n	80148d4 <_svfiprintf_r+0xd8>
 8014982:	2300      	movs	r3, #0
 8014984:	3401      	adds	r4, #1
 8014986:	9305      	str	r3, [sp, #20]
 8014988:	4619      	mov	r1, r3
 801498a:	f04f 0c0a 	mov.w	ip, #10
 801498e:	4620      	mov	r0, r4
 8014990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014994:	3a30      	subs	r2, #48	@ 0x30
 8014996:	2a09      	cmp	r2, #9
 8014998:	d903      	bls.n	80149a2 <_svfiprintf_r+0x1a6>
 801499a:	2b00      	cmp	r3, #0
 801499c:	d0c6      	beq.n	801492c <_svfiprintf_r+0x130>
 801499e:	9105      	str	r1, [sp, #20]
 80149a0:	e7c4      	b.n	801492c <_svfiprintf_r+0x130>
 80149a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80149a6:	4604      	mov	r4, r0
 80149a8:	2301      	movs	r3, #1
 80149aa:	e7f0      	b.n	801498e <_svfiprintf_r+0x192>
 80149ac:	ab03      	add	r3, sp, #12
 80149ae:	9300      	str	r3, [sp, #0]
 80149b0:	462a      	mov	r2, r5
 80149b2:	4b0e      	ldr	r3, [pc, #56]	@ (80149ec <_svfiprintf_r+0x1f0>)
 80149b4:	a904      	add	r1, sp, #16
 80149b6:	4638      	mov	r0, r7
 80149b8:	f7fe f9ba 	bl	8012d30 <_printf_float>
 80149bc:	1c42      	adds	r2, r0, #1
 80149be:	4606      	mov	r6, r0
 80149c0:	d1d6      	bne.n	8014970 <_svfiprintf_r+0x174>
 80149c2:	89ab      	ldrh	r3, [r5, #12]
 80149c4:	065b      	lsls	r3, r3, #25
 80149c6:	f53f af2d 	bmi.w	8014824 <_svfiprintf_r+0x28>
 80149ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80149cc:	e72c      	b.n	8014828 <_svfiprintf_r+0x2c>
 80149ce:	ab03      	add	r3, sp, #12
 80149d0:	9300      	str	r3, [sp, #0]
 80149d2:	462a      	mov	r2, r5
 80149d4:	4b05      	ldr	r3, [pc, #20]	@ (80149ec <_svfiprintf_r+0x1f0>)
 80149d6:	a904      	add	r1, sp, #16
 80149d8:	4638      	mov	r0, r7
 80149da:	f7fe fceb 	bl	80133b4 <_printf_i>
 80149de:	e7ed      	b.n	80149bc <_svfiprintf_r+0x1c0>
 80149e0:	08016dee 	.word	0x08016dee
 80149e4:	08016df8 	.word	0x08016df8
 80149e8:	08012d31 	.word	0x08012d31
 80149ec:	08014745 	.word	0x08014745
 80149f0:	08016df4 	.word	0x08016df4

080149f4 <__sflush_r>:
 80149f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80149f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149fc:	0716      	lsls	r6, r2, #28
 80149fe:	4605      	mov	r5, r0
 8014a00:	460c      	mov	r4, r1
 8014a02:	d454      	bmi.n	8014aae <__sflush_r+0xba>
 8014a04:	684b      	ldr	r3, [r1, #4]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	dc02      	bgt.n	8014a10 <__sflush_r+0x1c>
 8014a0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	dd48      	ble.n	8014aa2 <__sflush_r+0xae>
 8014a10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014a12:	2e00      	cmp	r6, #0
 8014a14:	d045      	beq.n	8014aa2 <__sflush_r+0xae>
 8014a16:	2300      	movs	r3, #0
 8014a18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014a1c:	682f      	ldr	r7, [r5, #0]
 8014a1e:	6a21      	ldr	r1, [r4, #32]
 8014a20:	602b      	str	r3, [r5, #0]
 8014a22:	d030      	beq.n	8014a86 <__sflush_r+0x92>
 8014a24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014a26:	89a3      	ldrh	r3, [r4, #12]
 8014a28:	0759      	lsls	r1, r3, #29
 8014a2a:	d505      	bpl.n	8014a38 <__sflush_r+0x44>
 8014a2c:	6863      	ldr	r3, [r4, #4]
 8014a2e:	1ad2      	subs	r2, r2, r3
 8014a30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014a32:	b10b      	cbz	r3, 8014a38 <__sflush_r+0x44>
 8014a34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014a36:	1ad2      	subs	r2, r2, r3
 8014a38:	2300      	movs	r3, #0
 8014a3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014a3c:	6a21      	ldr	r1, [r4, #32]
 8014a3e:	4628      	mov	r0, r5
 8014a40:	47b0      	blx	r6
 8014a42:	1c43      	adds	r3, r0, #1
 8014a44:	89a3      	ldrh	r3, [r4, #12]
 8014a46:	d106      	bne.n	8014a56 <__sflush_r+0x62>
 8014a48:	6829      	ldr	r1, [r5, #0]
 8014a4a:	291d      	cmp	r1, #29
 8014a4c:	d82b      	bhi.n	8014aa6 <__sflush_r+0xb2>
 8014a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8014af8 <__sflush_r+0x104>)
 8014a50:	410a      	asrs	r2, r1
 8014a52:	07d6      	lsls	r6, r2, #31
 8014a54:	d427      	bmi.n	8014aa6 <__sflush_r+0xb2>
 8014a56:	2200      	movs	r2, #0
 8014a58:	6062      	str	r2, [r4, #4]
 8014a5a:	04d9      	lsls	r1, r3, #19
 8014a5c:	6922      	ldr	r2, [r4, #16]
 8014a5e:	6022      	str	r2, [r4, #0]
 8014a60:	d504      	bpl.n	8014a6c <__sflush_r+0x78>
 8014a62:	1c42      	adds	r2, r0, #1
 8014a64:	d101      	bne.n	8014a6a <__sflush_r+0x76>
 8014a66:	682b      	ldr	r3, [r5, #0]
 8014a68:	b903      	cbnz	r3, 8014a6c <__sflush_r+0x78>
 8014a6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8014a6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014a6e:	602f      	str	r7, [r5, #0]
 8014a70:	b1b9      	cbz	r1, 8014aa2 <__sflush_r+0xae>
 8014a72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014a76:	4299      	cmp	r1, r3
 8014a78:	d002      	beq.n	8014a80 <__sflush_r+0x8c>
 8014a7a:	4628      	mov	r0, r5
 8014a7c:	f7ff fe18 	bl	80146b0 <_free_r>
 8014a80:	2300      	movs	r3, #0
 8014a82:	6363      	str	r3, [r4, #52]	@ 0x34
 8014a84:	e00d      	b.n	8014aa2 <__sflush_r+0xae>
 8014a86:	2301      	movs	r3, #1
 8014a88:	4628      	mov	r0, r5
 8014a8a:	47b0      	blx	r6
 8014a8c:	4602      	mov	r2, r0
 8014a8e:	1c50      	adds	r0, r2, #1
 8014a90:	d1c9      	bne.n	8014a26 <__sflush_r+0x32>
 8014a92:	682b      	ldr	r3, [r5, #0]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d0c6      	beq.n	8014a26 <__sflush_r+0x32>
 8014a98:	2b1d      	cmp	r3, #29
 8014a9a:	d001      	beq.n	8014aa0 <__sflush_r+0xac>
 8014a9c:	2b16      	cmp	r3, #22
 8014a9e:	d11e      	bne.n	8014ade <__sflush_r+0xea>
 8014aa0:	602f      	str	r7, [r5, #0]
 8014aa2:	2000      	movs	r0, #0
 8014aa4:	e022      	b.n	8014aec <__sflush_r+0xf8>
 8014aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014aaa:	b21b      	sxth	r3, r3
 8014aac:	e01b      	b.n	8014ae6 <__sflush_r+0xf2>
 8014aae:	690f      	ldr	r7, [r1, #16]
 8014ab0:	2f00      	cmp	r7, #0
 8014ab2:	d0f6      	beq.n	8014aa2 <__sflush_r+0xae>
 8014ab4:	0793      	lsls	r3, r2, #30
 8014ab6:	680e      	ldr	r6, [r1, #0]
 8014ab8:	bf08      	it	eq
 8014aba:	694b      	ldreq	r3, [r1, #20]
 8014abc:	600f      	str	r7, [r1, #0]
 8014abe:	bf18      	it	ne
 8014ac0:	2300      	movne	r3, #0
 8014ac2:	eba6 0807 	sub.w	r8, r6, r7
 8014ac6:	608b      	str	r3, [r1, #8]
 8014ac8:	f1b8 0f00 	cmp.w	r8, #0
 8014acc:	dde9      	ble.n	8014aa2 <__sflush_r+0xae>
 8014ace:	6a21      	ldr	r1, [r4, #32]
 8014ad0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014ad2:	4643      	mov	r3, r8
 8014ad4:	463a      	mov	r2, r7
 8014ad6:	4628      	mov	r0, r5
 8014ad8:	47b0      	blx	r6
 8014ada:	2800      	cmp	r0, #0
 8014adc:	dc08      	bgt.n	8014af0 <__sflush_r+0xfc>
 8014ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014ae6:	81a3      	strh	r3, [r4, #12]
 8014ae8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014af0:	4407      	add	r7, r0
 8014af2:	eba8 0800 	sub.w	r8, r8, r0
 8014af6:	e7e7      	b.n	8014ac8 <__sflush_r+0xd4>
 8014af8:	dfbffffe 	.word	0xdfbffffe

08014afc <_fflush_r>:
 8014afc:	b538      	push	{r3, r4, r5, lr}
 8014afe:	690b      	ldr	r3, [r1, #16]
 8014b00:	4605      	mov	r5, r0
 8014b02:	460c      	mov	r4, r1
 8014b04:	b913      	cbnz	r3, 8014b0c <_fflush_r+0x10>
 8014b06:	2500      	movs	r5, #0
 8014b08:	4628      	mov	r0, r5
 8014b0a:	bd38      	pop	{r3, r4, r5, pc}
 8014b0c:	b118      	cbz	r0, 8014b16 <_fflush_r+0x1a>
 8014b0e:	6a03      	ldr	r3, [r0, #32]
 8014b10:	b90b      	cbnz	r3, 8014b16 <_fflush_r+0x1a>
 8014b12:	f7fe fe27 	bl	8013764 <__sinit>
 8014b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d0f3      	beq.n	8014b06 <_fflush_r+0xa>
 8014b1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014b20:	07d0      	lsls	r0, r2, #31
 8014b22:	d404      	bmi.n	8014b2e <_fflush_r+0x32>
 8014b24:	0599      	lsls	r1, r3, #22
 8014b26:	d402      	bmi.n	8014b2e <_fflush_r+0x32>
 8014b28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014b2a:	f7ee fb94 	bl	8003256 <__retarget_lock_acquire_recursive>
 8014b2e:	4628      	mov	r0, r5
 8014b30:	4621      	mov	r1, r4
 8014b32:	f7ff ff5f 	bl	80149f4 <__sflush_r>
 8014b36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014b38:	07da      	lsls	r2, r3, #31
 8014b3a:	4605      	mov	r5, r0
 8014b3c:	d4e4      	bmi.n	8014b08 <_fflush_r+0xc>
 8014b3e:	89a3      	ldrh	r3, [r4, #12]
 8014b40:	059b      	lsls	r3, r3, #22
 8014b42:	d4e1      	bmi.n	8014b08 <_fflush_r+0xc>
 8014b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014b46:	f7ee fb9b 	bl	8003280 <__retarget_lock_release_recursive>
 8014b4a:	e7dd      	b.n	8014b08 <_fflush_r+0xc>

08014b4c <_Balloc>:
 8014b4c:	b570      	push	{r4, r5, r6, lr}
 8014b4e:	69c6      	ldr	r6, [r0, #28]
 8014b50:	4604      	mov	r4, r0
 8014b52:	460d      	mov	r5, r1
 8014b54:	b976      	cbnz	r6, 8014b74 <_Balloc+0x28>
 8014b56:	2010      	movs	r0, #16
 8014b58:	f7fe fb14 	bl	8013184 <malloc>
 8014b5c:	4602      	mov	r2, r0
 8014b5e:	61e0      	str	r0, [r4, #28]
 8014b60:	b920      	cbnz	r0, 8014b6c <_Balloc+0x20>
 8014b62:	4b18      	ldr	r3, [pc, #96]	@ (8014bc4 <_Balloc+0x78>)
 8014b64:	4818      	ldr	r0, [pc, #96]	@ (8014bc8 <_Balloc+0x7c>)
 8014b66:	216b      	movs	r1, #107	@ 0x6b
 8014b68:	f7fe ff38 	bl	80139dc <__assert_func>
 8014b6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014b70:	6006      	str	r6, [r0, #0]
 8014b72:	60c6      	str	r6, [r0, #12]
 8014b74:	69e6      	ldr	r6, [r4, #28]
 8014b76:	68f3      	ldr	r3, [r6, #12]
 8014b78:	b183      	cbz	r3, 8014b9c <_Balloc+0x50>
 8014b7a:	69e3      	ldr	r3, [r4, #28]
 8014b7c:	68db      	ldr	r3, [r3, #12]
 8014b7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014b82:	b9b8      	cbnz	r0, 8014bb4 <_Balloc+0x68>
 8014b84:	2101      	movs	r1, #1
 8014b86:	fa01 f605 	lsl.w	r6, r1, r5
 8014b8a:	1d72      	adds	r2, r6, #5
 8014b8c:	0092      	lsls	r2, r2, #2
 8014b8e:	4620      	mov	r0, r4
 8014b90:	f000 fc49 	bl	8015426 <_calloc_r>
 8014b94:	b160      	cbz	r0, 8014bb0 <_Balloc+0x64>
 8014b96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014b9a:	e00e      	b.n	8014bba <_Balloc+0x6e>
 8014b9c:	2221      	movs	r2, #33	@ 0x21
 8014b9e:	2104      	movs	r1, #4
 8014ba0:	4620      	mov	r0, r4
 8014ba2:	f000 fc40 	bl	8015426 <_calloc_r>
 8014ba6:	69e3      	ldr	r3, [r4, #28]
 8014ba8:	60f0      	str	r0, [r6, #12]
 8014baa:	68db      	ldr	r3, [r3, #12]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d1e4      	bne.n	8014b7a <_Balloc+0x2e>
 8014bb0:	2000      	movs	r0, #0
 8014bb2:	bd70      	pop	{r4, r5, r6, pc}
 8014bb4:	6802      	ldr	r2, [r0, #0]
 8014bb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014bba:	2300      	movs	r3, #0
 8014bbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014bc0:	e7f7      	b.n	8014bb2 <_Balloc+0x66>
 8014bc2:	bf00      	nop
 8014bc4:	08016d6e 	.word	0x08016d6e
 8014bc8:	08016dff 	.word	0x08016dff

08014bcc <_Bfree>:
 8014bcc:	b570      	push	{r4, r5, r6, lr}
 8014bce:	69c6      	ldr	r6, [r0, #28]
 8014bd0:	4605      	mov	r5, r0
 8014bd2:	460c      	mov	r4, r1
 8014bd4:	b976      	cbnz	r6, 8014bf4 <_Bfree+0x28>
 8014bd6:	2010      	movs	r0, #16
 8014bd8:	f7fe fad4 	bl	8013184 <malloc>
 8014bdc:	4602      	mov	r2, r0
 8014bde:	61e8      	str	r0, [r5, #28]
 8014be0:	b920      	cbnz	r0, 8014bec <_Bfree+0x20>
 8014be2:	4b09      	ldr	r3, [pc, #36]	@ (8014c08 <_Bfree+0x3c>)
 8014be4:	4809      	ldr	r0, [pc, #36]	@ (8014c0c <_Bfree+0x40>)
 8014be6:	218f      	movs	r1, #143	@ 0x8f
 8014be8:	f7fe fef8 	bl	80139dc <__assert_func>
 8014bec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014bf0:	6006      	str	r6, [r0, #0]
 8014bf2:	60c6      	str	r6, [r0, #12]
 8014bf4:	b13c      	cbz	r4, 8014c06 <_Bfree+0x3a>
 8014bf6:	69eb      	ldr	r3, [r5, #28]
 8014bf8:	6862      	ldr	r2, [r4, #4]
 8014bfa:	68db      	ldr	r3, [r3, #12]
 8014bfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014c00:	6021      	str	r1, [r4, #0]
 8014c02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014c06:	bd70      	pop	{r4, r5, r6, pc}
 8014c08:	08016d6e 	.word	0x08016d6e
 8014c0c:	08016dff 	.word	0x08016dff

08014c10 <__multadd>:
 8014c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c14:	690d      	ldr	r5, [r1, #16]
 8014c16:	4607      	mov	r7, r0
 8014c18:	460c      	mov	r4, r1
 8014c1a:	461e      	mov	r6, r3
 8014c1c:	f101 0c14 	add.w	ip, r1, #20
 8014c20:	2000      	movs	r0, #0
 8014c22:	f8dc 3000 	ldr.w	r3, [ip]
 8014c26:	b299      	uxth	r1, r3
 8014c28:	fb02 6101 	mla	r1, r2, r1, r6
 8014c2c:	0c1e      	lsrs	r6, r3, #16
 8014c2e:	0c0b      	lsrs	r3, r1, #16
 8014c30:	fb02 3306 	mla	r3, r2, r6, r3
 8014c34:	b289      	uxth	r1, r1
 8014c36:	3001      	adds	r0, #1
 8014c38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014c3c:	4285      	cmp	r5, r0
 8014c3e:	f84c 1b04 	str.w	r1, [ip], #4
 8014c42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014c46:	dcec      	bgt.n	8014c22 <__multadd+0x12>
 8014c48:	b30e      	cbz	r6, 8014c8e <__multadd+0x7e>
 8014c4a:	68a3      	ldr	r3, [r4, #8]
 8014c4c:	42ab      	cmp	r3, r5
 8014c4e:	dc19      	bgt.n	8014c84 <__multadd+0x74>
 8014c50:	6861      	ldr	r1, [r4, #4]
 8014c52:	4638      	mov	r0, r7
 8014c54:	3101      	adds	r1, #1
 8014c56:	f7ff ff79 	bl	8014b4c <_Balloc>
 8014c5a:	4680      	mov	r8, r0
 8014c5c:	b928      	cbnz	r0, 8014c6a <__multadd+0x5a>
 8014c5e:	4602      	mov	r2, r0
 8014c60:	4b0c      	ldr	r3, [pc, #48]	@ (8014c94 <__multadd+0x84>)
 8014c62:	480d      	ldr	r0, [pc, #52]	@ (8014c98 <__multadd+0x88>)
 8014c64:	21ba      	movs	r1, #186	@ 0xba
 8014c66:	f7fe feb9 	bl	80139dc <__assert_func>
 8014c6a:	6922      	ldr	r2, [r4, #16]
 8014c6c:	3202      	adds	r2, #2
 8014c6e:	f104 010c 	add.w	r1, r4, #12
 8014c72:	0092      	lsls	r2, r2, #2
 8014c74:	300c      	adds	r0, #12
 8014c76:	f7fe fe9b 	bl	80139b0 <memcpy>
 8014c7a:	4621      	mov	r1, r4
 8014c7c:	4638      	mov	r0, r7
 8014c7e:	f7ff ffa5 	bl	8014bcc <_Bfree>
 8014c82:	4644      	mov	r4, r8
 8014c84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014c88:	3501      	adds	r5, #1
 8014c8a:	615e      	str	r6, [r3, #20]
 8014c8c:	6125      	str	r5, [r4, #16]
 8014c8e:	4620      	mov	r0, r4
 8014c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c94:	08016ddd 	.word	0x08016ddd
 8014c98:	08016dff 	.word	0x08016dff

08014c9c <__hi0bits>:
 8014c9c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014ca0:	4603      	mov	r3, r0
 8014ca2:	bf36      	itet	cc
 8014ca4:	0403      	lslcc	r3, r0, #16
 8014ca6:	2000      	movcs	r0, #0
 8014ca8:	2010      	movcc	r0, #16
 8014caa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014cae:	bf3c      	itt	cc
 8014cb0:	021b      	lslcc	r3, r3, #8
 8014cb2:	3008      	addcc	r0, #8
 8014cb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014cb8:	bf3c      	itt	cc
 8014cba:	011b      	lslcc	r3, r3, #4
 8014cbc:	3004      	addcc	r0, #4
 8014cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014cc2:	bf3c      	itt	cc
 8014cc4:	009b      	lslcc	r3, r3, #2
 8014cc6:	3002      	addcc	r0, #2
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	db05      	blt.n	8014cd8 <__hi0bits+0x3c>
 8014ccc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014cd0:	f100 0001 	add.w	r0, r0, #1
 8014cd4:	bf08      	it	eq
 8014cd6:	2020      	moveq	r0, #32
 8014cd8:	4770      	bx	lr

08014cda <__lo0bits>:
 8014cda:	6803      	ldr	r3, [r0, #0]
 8014cdc:	4602      	mov	r2, r0
 8014cde:	f013 0007 	ands.w	r0, r3, #7
 8014ce2:	d00b      	beq.n	8014cfc <__lo0bits+0x22>
 8014ce4:	07d9      	lsls	r1, r3, #31
 8014ce6:	d421      	bmi.n	8014d2c <__lo0bits+0x52>
 8014ce8:	0798      	lsls	r0, r3, #30
 8014cea:	bf49      	itett	mi
 8014cec:	085b      	lsrmi	r3, r3, #1
 8014cee:	089b      	lsrpl	r3, r3, #2
 8014cf0:	2001      	movmi	r0, #1
 8014cf2:	6013      	strmi	r3, [r2, #0]
 8014cf4:	bf5c      	itt	pl
 8014cf6:	6013      	strpl	r3, [r2, #0]
 8014cf8:	2002      	movpl	r0, #2
 8014cfa:	4770      	bx	lr
 8014cfc:	b299      	uxth	r1, r3
 8014cfe:	b909      	cbnz	r1, 8014d04 <__lo0bits+0x2a>
 8014d00:	0c1b      	lsrs	r3, r3, #16
 8014d02:	2010      	movs	r0, #16
 8014d04:	b2d9      	uxtb	r1, r3
 8014d06:	b909      	cbnz	r1, 8014d0c <__lo0bits+0x32>
 8014d08:	3008      	adds	r0, #8
 8014d0a:	0a1b      	lsrs	r3, r3, #8
 8014d0c:	0719      	lsls	r1, r3, #28
 8014d0e:	bf04      	itt	eq
 8014d10:	091b      	lsreq	r3, r3, #4
 8014d12:	3004      	addeq	r0, #4
 8014d14:	0799      	lsls	r1, r3, #30
 8014d16:	bf04      	itt	eq
 8014d18:	089b      	lsreq	r3, r3, #2
 8014d1a:	3002      	addeq	r0, #2
 8014d1c:	07d9      	lsls	r1, r3, #31
 8014d1e:	d403      	bmi.n	8014d28 <__lo0bits+0x4e>
 8014d20:	085b      	lsrs	r3, r3, #1
 8014d22:	f100 0001 	add.w	r0, r0, #1
 8014d26:	d003      	beq.n	8014d30 <__lo0bits+0x56>
 8014d28:	6013      	str	r3, [r2, #0]
 8014d2a:	4770      	bx	lr
 8014d2c:	2000      	movs	r0, #0
 8014d2e:	4770      	bx	lr
 8014d30:	2020      	movs	r0, #32
 8014d32:	4770      	bx	lr

08014d34 <__i2b>:
 8014d34:	b510      	push	{r4, lr}
 8014d36:	460c      	mov	r4, r1
 8014d38:	2101      	movs	r1, #1
 8014d3a:	f7ff ff07 	bl	8014b4c <_Balloc>
 8014d3e:	4602      	mov	r2, r0
 8014d40:	b928      	cbnz	r0, 8014d4e <__i2b+0x1a>
 8014d42:	4b05      	ldr	r3, [pc, #20]	@ (8014d58 <__i2b+0x24>)
 8014d44:	4805      	ldr	r0, [pc, #20]	@ (8014d5c <__i2b+0x28>)
 8014d46:	f240 1145 	movw	r1, #325	@ 0x145
 8014d4a:	f7fe fe47 	bl	80139dc <__assert_func>
 8014d4e:	2301      	movs	r3, #1
 8014d50:	6144      	str	r4, [r0, #20]
 8014d52:	6103      	str	r3, [r0, #16]
 8014d54:	bd10      	pop	{r4, pc}
 8014d56:	bf00      	nop
 8014d58:	08016ddd 	.word	0x08016ddd
 8014d5c:	08016dff 	.word	0x08016dff

08014d60 <__multiply>:
 8014d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d64:	4614      	mov	r4, r2
 8014d66:	690a      	ldr	r2, [r1, #16]
 8014d68:	6923      	ldr	r3, [r4, #16]
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	bfa8      	it	ge
 8014d6e:	4623      	movge	r3, r4
 8014d70:	460f      	mov	r7, r1
 8014d72:	bfa4      	itt	ge
 8014d74:	460c      	movge	r4, r1
 8014d76:	461f      	movge	r7, r3
 8014d78:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014d7c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014d80:	68a3      	ldr	r3, [r4, #8]
 8014d82:	6861      	ldr	r1, [r4, #4]
 8014d84:	eb0a 0609 	add.w	r6, sl, r9
 8014d88:	42b3      	cmp	r3, r6
 8014d8a:	b085      	sub	sp, #20
 8014d8c:	bfb8      	it	lt
 8014d8e:	3101      	addlt	r1, #1
 8014d90:	f7ff fedc 	bl	8014b4c <_Balloc>
 8014d94:	b930      	cbnz	r0, 8014da4 <__multiply+0x44>
 8014d96:	4602      	mov	r2, r0
 8014d98:	4b44      	ldr	r3, [pc, #272]	@ (8014eac <__multiply+0x14c>)
 8014d9a:	4845      	ldr	r0, [pc, #276]	@ (8014eb0 <__multiply+0x150>)
 8014d9c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014da0:	f7fe fe1c 	bl	80139dc <__assert_func>
 8014da4:	f100 0514 	add.w	r5, r0, #20
 8014da8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014dac:	462b      	mov	r3, r5
 8014dae:	2200      	movs	r2, #0
 8014db0:	4543      	cmp	r3, r8
 8014db2:	d321      	bcc.n	8014df8 <__multiply+0x98>
 8014db4:	f107 0114 	add.w	r1, r7, #20
 8014db8:	f104 0214 	add.w	r2, r4, #20
 8014dbc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014dc0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8014dc4:	9302      	str	r3, [sp, #8]
 8014dc6:	1b13      	subs	r3, r2, r4
 8014dc8:	3b15      	subs	r3, #21
 8014dca:	f023 0303 	bic.w	r3, r3, #3
 8014dce:	3304      	adds	r3, #4
 8014dd0:	f104 0715 	add.w	r7, r4, #21
 8014dd4:	42ba      	cmp	r2, r7
 8014dd6:	bf38      	it	cc
 8014dd8:	2304      	movcc	r3, #4
 8014dda:	9301      	str	r3, [sp, #4]
 8014ddc:	9b02      	ldr	r3, [sp, #8]
 8014dde:	9103      	str	r1, [sp, #12]
 8014de0:	428b      	cmp	r3, r1
 8014de2:	d80c      	bhi.n	8014dfe <__multiply+0x9e>
 8014de4:	2e00      	cmp	r6, #0
 8014de6:	dd03      	ble.n	8014df0 <__multiply+0x90>
 8014de8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d05b      	beq.n	8014ea8 <__multiply+0x148>
 8014df0:	6106      	str	r6, [r0, #16]
 8014df2:	b005      	add	sp, #20
 8014df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014df8:	f843 2b04 	str.w	r2, [r3], #4
 8014dfc:	e7d8      	b.n	8014db0 <__multiply+0x50>
 8014dfe:	f8b1 a000 	ldrh.w	sl, [r1]
 8014e02:	f1ba 0f00 	cmp.w	sl, #0
 8014e06:	d024      	beq.n	8014e52 <__multiply+0xf2>
 8014e08:	f104 0e14 	add.w	lr, r4, #20
 8014e0c:	46a9      	mov	r9, r5
 8014e0e:	f04f 0c00 	mov.w	ip, #0
 8014e12:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014e16:	f8d9 3000 	ldr.w	r3, [r9]
 8014e1a:	fa1f fb87 	uxth.w	fp, r7
 8014e1e:	b29b      	uxth	r3, r3
 8014e20:	fb0a 330b 	mla	r3, sl, fp, r3
 8014e24:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014e28:	f8d9 7000 	ldr.w	r7, [r9]
 8014e2c:	4463      	add	r3, ip
 8014e2e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014e32:	fb0a c70b 	mla	r7, sl, fp, ip
 8014e36:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014e3a:	b29b      	uxth	r3, r3
 8014e3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014e40:	4572      	cmp	r2, lr
 8014e42:	f849 3b04 	str.w	r3, [r9], #4
 8014e46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014e4a:	d8e2      	bhi.n	8014e12 <__multiply+0xb2>
 8014e4c:	9b01      	ldr	r3, [sp, #4]
 8014e4e:	f845 c003 	str.w	ip, [r5, r3]
 8014e52:	9b03      	ldr	r3, [sp, #12]
 8014e54:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014e58:	3104      	adds	r1, #4
 8014e5a:	f1b9 0f00 	cmp.w	r9, #0
 8014e5e:	d021      	beq.n	8014ea4 <__multiply+0x144>
 8014e60:	682b      	ldr	r3, [r5, #0]
 8014e62:	f104 0c14 	add.w	ip, r4, #20
 8014e66:	46ae      	mov	lr, r5
 8014e68:	f04f 0a00 	mov.w	sl, #0
 8014e6c:	f8bc b000 	ldrh.w	fp, [ip]
 8014e70:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8014e74:	fb09 770b 	mla	r7, r9, fp, r7
 8014e78:	4457      	add	r7, sl
 8014e7a:	b29b      	uxth	r3, r3
 8014e7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014e80:	f84e 3b04 	str.w	r3, [lr], #4
 8014e84:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014e88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014e8c:	f8be 3000 	ldrh.w	r3, [lr]
 8014e90:	fb09 330a 	mla	r3, r9, sl, r3
 8014e94:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014e98:	4562      	cmp	r2, ip
 8014e9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014e9e:	d8e5      	bhi.n	8014e6c <__multiply+0x10c>
 8014ea0:	9f01      	ldr	r7, [sp, #4]
 8014ea2:	51eb      	str	r3, [r5, r7]
 8014ea4:	3504      	adds	r5, #4
 8014ea6:	e799      	b.n	8014ddc <__multiply+0x7c>
 8014ea8:	3e01      	subs	r6, #1
 8014eaa:	e79b      	b.n	8014de4 <__multiply+0x84>
 8014eac:	08016ddd 	.word	0x08016ddd
 8014eb0:	08016dff 	.word	0x08016dff

08014eb4 <__pow5mult>:
 8014eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014eb8:	4615      	mov	r5, r2
 8014eba:	f012 0203 	ands.w	r2, r2, #3
 8014ebe:	4607      	mov	r7, r0
 8014ec0:	460e      	mov	r6, r1
 8014ec2:	d007      	beq.n	8014ed4 <__pow5mult+0x20>
 8014ec4:	4c25      	ldr	r4, [pc, #148]	@ (8014f5c <__pow5mult+0xa8>)
 8014ec6:	3a01      	subs	r2, #1
 8014ec8:	2300      	movs	r3, #0
 8014eca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014ece:	f7ff fe9f 	bl	8014c10 <__multadd>
 8014ed2:	4606      	mov	r6, r0
 8014ed4:	10ad      	asrs	r5, r5, #2
 8014ed6:	d03d      	beq.n	8014f54 <__pow5mult+0xa0>
 8014ed8:	69fc      	ldr	r4, [r7, #28]
 8014eda:	b97c      	cbnz	r4, 8014efc <__pow5mult+0x48>
 8014edc:	2010      	movs	r0, #16
 8014ede:	f7fe f951 	bl	8013184 <malloc>
 8014ee2:	4602      	mov	r2, r0
 8014ee4:	61f8      	str	r0, [r7, #28]
 8014ee6:	b928      	cbnz	r0, 8014ef4 <__pow5mult+0x40>
 8014ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8014f60 <__pow5mult+0xac>)
 8014eea:	481e      	ldr	r0, [pc, #120]	@ (8014f64 <__pow5mult+0xb0>)
 8014eec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014ef0:	f7fe fd74 	bl	80139dc <__assert_func>
 8014ef4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014ef8:	6004      	str	r4, [r0, #0]
 8014efa:	60c4      	str	r4, [r0, #12]
 8014efc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014f00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014f04:	b94c      	cbnz	r4, 8014f1a <__pow5mult+0x66>
 8014f06:	f240 2171 	movw	r1, #625	@ 0x271
 8014f0a:	4638      	mov	r0, r7
 8014f0c:	f7ff ff12 	bl	8014d34 <__i2b>
 8014f10:	2300      	movs	r3, #0
 8014f12:	f8c8 0008 	str.w	r0, [r8, #8]
 8014f16:	4604      	mov	r4, r0
 8014f18:	6003      	str	r3, [r0, #0]
 8014f1a:	f04f 0900 	mov.w	r9, #0
 8014f1e:	07eb      	lsls	r3, r5, #31
 8014f20:	d50a      	bpl.n	8014f38 <__pow5mult+0x84>
 8014f22:	4631      	mov	r1, r6
 8014f24:	4622      	mov	r2, r4
 8014f26:	4638      	mov	r0, r7
 8014f28:	f7ff ff1a 	bl	8014d60 <__multiply>
 8014f2c:	4631      	mov	r1, r6
 8014f2e:	4680      	mov	r8, r0
 8014f30:	4638      	mov	r0, r7
 8014f32:	f7ff fe4b 	bl	8014bcc <_Bfree>
 8014f36:	4646      	mov	r6, r8
 8014f38:	106d      	asrs	r5, r5, #1
 8014f3a:	d00b      	beq.n	8014f54 <__pow5mult+0xa0>
 8014f3c:	6820      	ldr	r0, [r4, #0]
 8014f3e:	b938      	cbnz	r0, 8014f50 <__pow5mult+0x9c>
 8014f40:	4622      	mov	r2, r4
 8014f42:	4621      	mov	r1, r4
 8014f44:	4638      	mov	r0, r7
 8014f46:	f7ff ff0b 	bl	8014d60 <__multiply>
 8014f4a:	6020      	str	r0, [r4, #0]
 8014f4c:	f8c0 9000 	str.w	r9, [r0]
 8014f50:	4604      	mov	r4, r0
 8014f52:	e7e4      	b.n	8014f1e <__pow5mult+0x6a>
 8014f54:	4630      	mov	r0, r6
 8014f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f5a:	bf00      	nop
 8014f5c:	08016e58 	.word	0x08016e58
 8014f60:	08016d6e 	.word	0x08016d6e
 8014f64:	08016dff 	.word	0x08016dff

08014f68 <__lshift>:
 8014f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f6c:	460c      	mov	r4, r1
 8014f6e:	6849      	ldr	r1, [r1, #4]
 8014f70:	6923      	ldr	r3, [r4, #16]
 8014f72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014f76:	68a3      	ldr	r3, [r4, #8]
 8014f78:	4607      	mov	r7, r0
 8014f7a:	4691      	mov	r9, r2
 8014f7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014f80:	f108 0601 	add.w	r6, r8, #1
 8014f84:	42b3      	cmp	r3, r6
 8014f86:	db0b      	blt.n	8014fa0 <__lshift+0x38>
 8014f88:	4638      	mov	r0, r7
 8014f8a:	f7ff fddf 	bl	8014b4c <_Balloc>
 8014f8e:	4605      	mov	r5, r0
 8014f90:	b948      	cbnz	r0, 8014fa6 <__lshift+0x3e>
 8014f92:	4602      	mov	r2, r0
 8014f94:	4b28      	ldr	r3, [pc, #160]	@ (8015038 <__lshift+0xd0>)
 8014f96:	4829      	ldr	r0, [pc, #164]	@ (801503c <__lshift+0xd4>)
 8014f98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014f9c:	f7fe fd1e 	bl	80139dc <__assert_func>
 8014fa0:	3101      	adds	r1, #1
 8014fa2:	005b      	lsls	r3, r3, #1
 8014fa4:	e7ee      	b.n	8014f84 <__lshift+0x1c>
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	f100 0114 	add.w	r1, r0, #20
 8014fac:	f100 0210 	add.w	r2, r0, #16
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	4553      	cmp	r3, sl
 8014fb4:	db33      	blt.n	801501e <__lshift+0xb6>
 8014fb6:	6920      	ldr	r0, [r4, #16]
 8014fb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014fbc:	f104 0314 	add.w	r3, r4, #20
 8014fc0:	f019 091f 	ands.w	r9, r9, #31
 8014fc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014fc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014fcc:	d02b      	beq.n	8015026 <__lshift+0xbe>
 8014fce:	f1c9 0e20 	rsb	lr, r9, #32
 8014fd2:	468a      	mov	sl, r1
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	6818      	ldr	r0, [r3, #0]
 8014fd8:	fa00 f009 	lsl.w	r0, r0, r9
 8014fdc:	4310      	orrs	r0, r2
 8014fde:	f84a 0b04 	str.w	r0, [sl], #4
 8014fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fe6:	459c      	cmp	ip, r3
 8014fe8:	fa22 f20e 	lsr.w	r2, r2, lr
 8014fec:	d8f3      	bhi.n	8014fd6 <__lshift+0x6e>
 8014fee:	ebac 0304 	sub.w	r3, ip, r4
 8014ff2:	3b15      	subs	r3, #21
 8014ff4:	f023 0303 	bic.w	r3, r3, #3
 8014ff8:	3304      	adds	r3, #4
 8014ffa:	f104 0015 	add.w	r0, r4, #21
 8014ffe:	4584      	cmp	ip, r0
 8015000:	bf38      	it	cc
 8015002:	2304      	movcc	r3, #4
 8015004:	50ca      	str	r2, [r1, r3]
 8015006:	b10a      	cbz	r2, 801500c <__lshift+0xa4>
 8015008:	f108 0602 	add.w	r6, r8, #2
 801500c:	3e01      	subs	r6, #1
 801500e:	4638      	mov	r0, r7
 8015010:	612e      	str	r6, [r5, #16]
 8015012:	4621      	mov	r1, r4
 8015014:	f7ff fdda 	bl	8014bcc <_Bfree>
 8015018:	4628      	mov	r0, r5
 801501a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801501e:	f842 0f04 	str.w	r0, [r2, #4]!
 8015022:	3301      	adds	r3, #1
 8015024:	e7c5      	b.n	8014fb2 <__lshift+0x4a>
 8015026:	3904      	subs	r1, #4
 8015028:	f853 2b04 	ldr.w	r2, [r3], #4
 801502c:	f841 2f04 	str.w	r2, [r1, #4]!
 8015030:	459c      	cmp	ip, r3
 8015032:	d8f9      	bhi.n	8015028 <__lshift+0xc0>
 8015034:	e7ea      	b.n	801500c <__lshift+0xa4>
 8015036:	bf00      	nop
 8015038:	08016ddd 	.word	0x08016ddd
 801503c:	08016dff 	.word	0x08016dff

08015040 <__mcmp>:
 8015040:	690a      	ldr	r2, [r1, #16]
 8015042:	4603      	mov	r3, r0
 8015044:	6900      	ldr	r0, [r0, #16]
 8015046:	1a80      	subs	r0, r0, r2
 8015048:	b530      	push	{r4, r5, lr}
 801504a:	d10e      	bne.n	801506a <__mcmp+0x2a>
 801504c:	3314      	adds	r3, #20
 801504e:	3114      	adds	r1, #20
 8015050:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015054:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015058:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801505c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015060:	4295      	cmp	r5, r2
 8015062:	d003      	beq.n	801506c <__mcmp+0x2c>
 8015064:	d205      	bcs.n	8015072 <__mcmp+0x32>
 8015066:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801506a:	bd30      	pop	{r4, r5, pc}
 801506c:	42a3      	cmp	r3, r4
 801506e:	d3f3      	bcc.n	8015058 <__mcmp+0x18>
 8015070:	e7fb      	b.n	801506a <__mcmp+0x2a>
 8015072:	2001      	movs	r0, #1
 8015074:	e7f9      	b.n	801506a <__mcmp+0x2a>
	...

08015078 <__mdiff>:
 8015078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801507c:	4689      	mov	r9, r1
 801507e:	4606      	mov	r6, r0
 8015080:	4611      	mov	r1, r2
 8015082:	4648      	mov	r0, r9
 8015084:	4614      	mov	r4, r2
 8015086:	f7ff ffdb 	bl	8015040 <__mcmp>
 801508a:	1e05      	subs	r5, r0, #0
 801508c:	d112      	bne.n	80150b4 <__mdiff+0x3c>
 801508e:	4629      	mov	r1, r5
 8015090:	4630      	mov	r0, r6
 8015092:	f7ff fd5b 	bl	8014b4c <_Balloc>
 8015096:	4602      	mov	r2, r0
 8015098:	b928      	cbnz	r0, 80150a6 <__mdiff+0x2e>
 801509a:	4b3f      	ldr	r3, [pc, #252]	@ (8015198 <__mdiff+0x120>)
 801509c:	f240 2137 	movw	r1, #567	@ 0x237
 80150a0:	483e      	ldr	r0, [pc, #248]	@ (801519c <__mdiff+0x124>)
 80150a2:	f7fe fc9b 	bl	80139dc <__assert_func>
 80150a6:	2301      	movs	r3, #1
 80150a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80150ac:	4610      	mov	r0, r2
 80150ae:	b003      	add	sp, #12
 80150b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150b4:	bfbc      	itt	lt
 80150b6:	464b      	movlt	r3, r9
 80150b8:	46a1      	movlt	r9, r4
 80150ba:	4630      	mov	r0, r6
 80150bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80150c0:	bfba      	itte	lt
 80150c2:	461c      	movlt	r4, r3
 80150c4:	2501      	movlt	r5, #1
 80150c6:	2500      	movge	r5, #0
 80150c8:	f7ff fd40 	bl	8014b4c <_Balloc>
 80150cc:	4602      	mov	r2, r0
 80150ce:	b918      	cbnz	r0, 80150d8 <__mdiff+0x60>
 80150d0:	4b31      	ldr	r3, [pc, #196]	@ (8015198 <__mdiff+0x120>)
 80150d2:	f240 2145 	movw	r1, #581	@ 0x245
 80150d6:	e7e3      	b.n	80150a0 <__mdiff+0x28>
 80150d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80150dc:	6926      	ldr	r6, [r4, #16]
 80150de:	60c5      	str	r5, [r0, #12]
 80150e0:	f109 0310 	add.w	r3, r9, #16
 80150e4:	f109 0514 	add.w	r5, r9, #20
 80150e8:	f104 0e14 	add.w	lr, r4, #20
 80150ec:	f100 0b14 	add.w	fp, r0, #20
 80150f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80150f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80150f8:	9301      	str	r3, [sp, #4]
 80150fa:	46d9      	mov	r9, fp
 80150fc:	f04f 0c00 	mov.w	ip, #0
 8015100:	9b01      	ldr	r3, [sp, #4]
 8015102:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015106:	f853 af04 	ldr.w	sl, [r3, #4]!
 801510a:	9301      	str	r3, [sp, #4]
 801510c:	fa1f f38a 	uxth.w	r3, sl
 8015110:	4619      	mov	r1, r3
 8015112:	b283      	uxth	r3, r0
 8015114:	1acb      	subs	r3, r1, r3
 8015116:	0c00      	lsrs	r0, r0, #16
 8015118:	4463      	add	r3, ip
 801511a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801511e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8015122:	b29b      	uxth	r3, r3
 8015124:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015128:	4576      	cmp	r6, lr
 801512a:	f849 3b04 	str.w	r3, [r9], #4
 801512e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015132:	d8e5      	bhi.n	8015100 <__mdiff+0x88>
 8015134:	1b33      	subs	r3, r6, r4
 8015136:	3b15      	subs	r3, #21
 8015138:	f023 0303 	bic.w	r3, r3, #3
 801513c:	3415      	adds	r4, #21
 801513e:	3304      	adds	r3, #4
 8015140:	42a6      	cmp	r6, r4
 8015142:	bf38      	it	cc
 8015144:	2304      	movcc	r3, #4
 8015146:	441d      	add	r5, r3
 8015148:	445b      	add	r3, fp
 801514a:	461e      	mov	r6, r3
 801514c:	462c      	mov	r4, r5
 801514e:	4544      	cmp	r4, r8
 8015150:	d30e      	bcc.n	8015170 <__mdiff+0xf8>
 8015152:	f108 0103 	add.w	r1, r8, #3
 8015156:	1b49      	subs	r1, r1, r5
 8015158:	f021 0103 	bic.w	r1, r1, #3
 801515c:	3d03      	subs	r5, #3
 801515e:	45a8      	cmp	r8, r5
 8015160:	bf38      	it	cc
 8015162:	2100      	movcc	r1, #0
 8015164:	440b      	add	r3, r1
 8015166:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801516a:	b191      	cbz	r1, 8015192 <__mdiff+0x11a>
 801516c:	6117      	str	r7, [r2, #16]
 801516e:	e79d      	b.n	80150ac <__mdiff+0x34>
 8015170:	f854 1b04 	ldr.w	r1, [r4], #4
 8015174:	46e6      	mov	lr, ip
 8015176:	0c08      	lsrs	r0, r1, #16
 8015178:	fa1c fc81 	uxtah	ip, ip, r1
 801517c:	4471      	add	r1, lr
 801517e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8015182:	b289      	uxth	r1, r1
 8015184:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015188:	f846 1b04 	str.w	r1, [r6], #4
 801518c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015190:	e7dd      	b.n	801514e <__mdiff+0xd6>
 8015192:	3f01      	subs	r7, #1
 8015194:	e7e7      	b.n	8015166 <__mdiff+0xee>
 8015196:	bf00      	nop
 8015198:	08016ddd 	.word	0x08016ddd
 801519c:	08016dff 	.word	0x08016dff

080151a0 <__d2b>:
 80151a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80151a4:	460f      	mov	r7, r1
 80151a6:	2101      	movs	r1, #1
 80151a8:	ec59 8b10 	vmov	r8, r9, d0
 80151ac:	4616      	mov	r6, r2
 80151ae:	f7ff fccd 	bl	8014b4c <_Balloc>
 80151b2:	4604      	mov	r4, r0
 80151b4:	b930      	cbnz	r0, 80151c4 <__d2b+0x24>
 80151b6:	4602      	mov	r2, r0
 80151b8:	4b23      	ldr	r3, [pc, #140]	@ (8015248 <__d2b+0xa8>)
 80151ba:	4824      	ldr	r0, [pc, #144]	@ (801524c <__d2b+0xac>)
 80151bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80151c0:	f7fe fc0c 	bl	80139dc <__assert_func>
 80151c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80151c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80151cc:	b10d      	cbz	r5, 80151d2 <__d2b+0x32>
 80151ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80151d2:	9301      	str	r3, [sp, #4]
 80151d4:	f1b8 0300 	subs.w	r3, r8, #0
 80151d8:	d023      	beq.n	8015222 <__d2b+0x82>
 80151da:	4668      	mov	r0, sp
 80151dc:	9300      	str	r3, [sp, #0]
 80151de:	f7ff fd7c 	bl	8014cda <__lo0bits>
 80151e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80151e6:	b1d0      	cbz	r0, 801521e <__d2b+0x7e>
 80151e8:	f1c0 0320 	rsb	r3, r0, #32
 80151ec:	fa02 f303 	lsl.w	r3, r2, r3
 80151f0:	430b      	orrs	r3, r1
 80151f2:	40c2      	lsrs	r2, r0
 80151f4:	6163      	str	r3, [r4, #20]
 80151f6:	9201      	str	r2, [sp, #4]
 80151f8:	9b01      	ldr	r3, [sp, #4]
 80151fa:	61a3      	str	r3, [r4, #24]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	bf0c      	ite	eq
 8015200:	2201      	moveq	r2, #1
 8015202:	2202      	movne	r2, #2
 8015204:	6122      	str	r2, [r4, #16]
 8015206:	b1a5      	cbz	r5, 8015232 <__d2b+0x92>
 8015208:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801520c:	4405      	add	r5, r0
 801520e:	603d      	str	r5, [r7, #0]
 8015210:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015214:	6030      	str	r0, [r6, #0]
 8015216:	4620      	mov	r0, r4
 8015218:	b003      	add	sp, #12
 801521a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801521e:	6161      	str	r1, [r4, #20]
 8015220:	e7ea      	b.n	80151f8 <__d2b+0x58>
 8015222:	a801      	add	r0, sp, #4
 8015224:	f7ff fd59 	bl	8014cda <__lo0bits>
 8015228:	9b01      	ldr	r3, [sp, #4]
 801522a:	6163      	str	r3, [r4, #20]
 801522c:	3020      	adds	r0, #32
 801522e:	2201      	movs	r2, #1
 8015230:	e7e8      	b.n	8015204 <__d2b+0x64>
 8015232:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015236:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801523a:	6038      	str	r0, [r7, #0]
 801523c:	6918      	ldr	r0, [r3, #16]
 801523e:	f7ff fd2d 	bl	8014c9c <__hi0bits>
 8015242:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015246:	e7e5      	b.n	8015214 <__d2b+0x74>
 8015248:	08016ddd 	.word	0x08016ddd
 801524c:	08016dff 	.word	0x08016dff

08015250 <__sread>:
 8015250:	b510      	push	{r4, lr}
 8015252:	460c      	mov	r4, r1
 8015254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015258:	f000 f8ba 	bl	80153d0 <_read_r>
 801525c:	2800      	cmp	r0, #0
 801525e:	bfab      	itete	ge
 8015260:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015262:	89a3      	ldrhlt	r3, [r4, #12]
 8015264:	181b      	addge	r3, r3, r0
 8015266:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801526a:	bfac      	ite	ge
 801526c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801526e:	81a3      	strhlt	r3, [r4, #12]
 8015270:	bd10      	pop	{r4, pc}

08015272 <__swrite>:
 8015272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015276:	461f      	mov	r7, r3
 8015278:	898b      	ldrh	r3, [r1, #12]
 801527a:	05db      	lsls	r3, r3, #23
 801527c:	4605      	mov	r5, r0
 801527e:	460c      	mov	r4, r1
 8015280:	4616      	mov	r6, r2
 8015282:	d505      	bpl.n	8015290 <__swrite+0x1e>
 8015284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015288:	2302      	movs	r3, #2
 801528a:	2200      	movs	r2, #0
 801528c:	f000 f88e 	bl	80153ac <_lseek_r>
 8015290:	89a3      	ldrh	r3, [r4, #12]
 8015292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015296:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801529a:	81a3      	strh	r3, [r4, #12]
 801529c:	4632      	mov	r2, r6
 801529e:	463b      	mov	r3, r7
 80152a0:	4628      	mov	r0, r5
 80152a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80152a6:	f000 b8a5 	b.w	80153f4 <_write_r>

080152aa <__sseek>:
 80152aa:	b510      	push	{r4, lr}
 80152ac:	460c      	mov	r4, r1
 80152ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152b2:	f000 f87b 	bl	80153ac <_lseek_r>
 80152b6:	1c43      	adds	r3, r0, #1
 80152b8:	89a3      	ldrh	r3, [r4, #12]
 80152ba:	bf15      	itete	ne
 80152bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80152be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80152c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80152c6:	81a3      	strheq	r3, [r4, #12]
 80152c8:	bf18      	it	ne
 80152ca:	81a3      	strhne	r3, [r4, #12]
 80152cc:	bd10      	pop	{r4, pc}

080152ce <__sclose>:
 80152ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152d2:	f000 b85b 	b.w	801538c <_close_r>
	...

080152d8 <fiprintf>:
 80152d8:	b40e      	push	{r1, r2, r3}
 80152da:	b503      	push	{r0, r1, lr}
 80152dc:	4601      	mov	r1, r0
 80152de:	ab03      	add	r3, sp, #12
 80152e0:	4805      	ldr	r0, [pc, #20]	@ (80152f8 <fiprintf+0x20>)
 80152e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80152e6:	6800      	ldr	r0, [r0, #0]
 80152e8:	9301      	str	r3, [sp, #4]
 80152ea:	f000 f8d9 	bl	80154a0 <_vfiprintf_r>
 80152ee:	b002      	add	sp, #8
 80152f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80152f4:	b003      	add	sp, #12
 80152f6:	4770      	bx	lr
 80152f8:	200000f0 	.word	0x200000f0

080152fc <_realloc_r>:
 80152fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015300:	4680      	mov	r8, r0
 8015302:	4615      	mov	r5, r2
 8015304:	460c      	mov	r4, r1
 8015306:	b921      	cbnz	r1, 8015312 <_realloc_r+0x16>
 8015308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801530c:	4611      	mov	r1, r2
 801530e:	f7fd bf63 	b.w	80131d8 <_malloc_r>
 8015312:	b92a      	cbnz	r2, 8015320 <_realloc_r+0x24>
 8015314:	f7ff f9cc 	bl	80146b0 <_free_r>
 8015318:	2400      	movs	r4, #0
 801531a:	4620      	mov	r0, r4
 801531c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015320:	f000 f9e8 	bl	80156f4 <_malloc_usable_size_r>
 8015324:	4285      	cmp	r5, r0
 8015326:	4606      	mov	r6, r0
 8015328:	d802      	bhi.n	8015330 <_realloc_r+0x34>
 801532a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801532e:	d8f4      	bhi.n	801531a <_realloc_r+0x1e>
 8015330:	4629      	mov	r1, r5
 8015332:	4640      	mov	r0, r8
 8015334:	f7fd ff50 	bl	80131d8 <_malloc_r>
 8015338:	4607      	mov	r7, r0
 801533a:	2800      	cmp	r0, #0
 801533c:	d0ec      	beq.n	8015318 <_realloc_r+0x1c>
 801533e:	42b5      	cmp	r5, r6
 8015340:	462a      	mov	r2, r5
 8015342:	4621      	mov	r1, r4
 8015344:	bf28      	it	cs
 8015346:	4632      	movcs	r2, r6
 8015348:	f7fe fb32 	bl	80139b0 <memcpy>
 801534c:	4621      	mov	r1, r4
 801534e:	4640      	mov	r0, r8
 8015350:	f7ff f9ae 	bl	80146b0 <_free_r>
 8015354:	463c      	mov	r4, r7
 8015356:	e7e0      	b.n	801531a <_realloc_r+0x1e>

08015358 <memmove>:
 8015358:	4288      	cmp	r0, r1
 801535a:	b510      	push	{r4, lr}
 801535c:	eb01 0402 	add.w	r4, r1, r2
 8015360:	d902      	bls.n	8015368 <memmove+0x10>
 8015362:	4284      	cmp	r4, r0
 8015364:	4623      	mov	r3, r4
 8015366:	d807      	bhi.n	8015378 <memmove+0x20>
 8015368:	1e43      	subs	r3, r0, #1
 801536a:	42a1      	cmp	r1, r4
 801536c:	d008      	beq.n	8015380 <memmove+0x28>
 801536e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015372:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015376:	e7f8      	b.n	801536a <memmove+0x12>
 8015378:	4402      	add	r2, r0
 801537a:	4601      	mov	r1, r0
 801537c:	428a      	cmp	r2, r1
 801537e:	d100      	bne.n	8015382 <memmove+0x2a>
 8015380:	bd10      	pop	{r4, pc}
 8015382:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015386:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801538a:	e7f7      	b.n	801537c <memmove+0x24>

0801538c <_close_r>:
 801538c:	b538      	push	{r3, r4, r5, lr}
 801538e:	4d06      	ldr	r5, [pc, #24]	@ (80153a8 <_close_r+0x1c>)
 8015390:	2300      	movs	r3, #0
 8015392:	4604      	mov	r4, r0
 8015394:	4608      	mov	r0, r1
 8015396:	602b      	str	r3, [r5, #0]
 8015398:	f7ed fe16 	bl	8002fc8 <_close>
 801539c:	1c43      	adds	r3, r0, #1
 801539e:	d102      	bne.n	80153a6 <_close_r+0x1a>
 80153a0:	682b      	ldr	r3, [r5, #0]
 80153a2:	b103      	cbz	r3, 80153a6 <_close_r+0x1a>
 80153a4:	6023      	str	r3, [r4, #0]
 80153a6:	bd38      	pop	{r3, r4, r5, pc}
 80153a8:	200016d0 	.word	0x200016d0

080153ac <_lseek_r>:
 80153ac:	b538      	push	{r3, r4, r5, lr}
 80153ae:	4d07      	ldr	r5, [pc, #28]	@ (80153cc <_lseek_r+0x20>)
 80153b0:	4604      	mov	r4, r0
 80153b2:	4608      	mov	r0, r1
 80153b4:	4611      	mov	r1, r2
 80153b6:	2200      	movs	r2, #0
 80153b8:	602a      	str	r2, [r5, #0]
 80153ba:	461a      	mov	r2, r3
 80153bc:	f7ed fe2b 	bl	8003016 <_lseek>
 80153c0:	1c43      	adds	r3, r0, #1
 80153c2:	d102      	bne.n	80153ca <_lseek_r+0x1e>
 80153c4:	682b      	ldr	r3, [r5, #0]
 80153c6:	b103      	cbz	r3, 80153ca <_lseek_r+0x1e>
 80153c8:	6023      	str	r3, [r4, #0]
 80153ca:	bd38      	pop	{r3, r4, r5, pc}
 80153cc:	200016d0 	.word	0x200016d0

080153d0 <_read_r>:
 80153d0:	b538      	push	{r3, r4, r5, lr}
 80153d2:	4d07      	ldr	r5, [pc, #28]	@ (80153f0 <_read_r+0x20>)
 80153d4:	4604      	mov	r4, r0
 80153d6:	4608      	mov	r0, r1
 80153d8:	4611      	mov	r1, r2
 80153da:	2200      	movs	r2, #0
 80153dc:	602a      	str	r2, [r5, #0]
 80153de:	461a      	mov	r2, r3
 80153e0:	f7ed fdd5 	bl	8002f8e <_read>
 80153e4:	1c43      	adds	r3, r0, #1
 80153e6:	d102      	bne.n	80153ee <_read_r+0x1e>
 80153e8:	682b      	ldr	r3, [r5, #0]
 80153ea:	b103      	cbz	r3, 80153ee <_read_r+0x1e>
 80153ec:	6023      	str	r3, [r4, #0]
 80153ee:	bd38      	pop	{r3, r4, r5, pc}
 80153f0:	200016d0 	.word	0x200016d0

080153f4 <_write_r>:
 80153f4:	b538      	push	{r3, r4, r5, lr}
 80153f6:	4d07      	ldr	r5, [pc, #28]	@ (8015414 <_write_r+0x20>)
 80153f8:	4604      	mov	r4, r0
 80153fa:	4608      	mov	r0, r1
 80153fc:	4611      	mov	r1, r2
 80153fe:	2200      	movs	r2, #0
 8015400:	602a      	str	r2, [r5, #0]
 8015402:	461a      	mov	r2, r3
 8015404:	f7eb fe24 	bl	8001050 <_write>
 8015408:	1c43      	adds	r3, r0, #1
 801540a:	d102      	bne.n	8015412 <_write_r+0x1e>
 801540c:	682b      	ldr	r3, [r5, #0]
 801540e:	b103      	cbz	r3, 8015412 <_write_r+0x1e>
 8015410:	6023      	str	r3, [r4, #0]
 8015412:	bd38      	pop	{r3, r4, r5, pc}
 8015414:	200016d0 	.word	0x200016d0

08015418 <abort>:
 8015418:	b508      	push	{r3, lr}
 801541a:	2006      	movs	r0, #6
 801541c:	f000 fac0 	bl	80159a0 <raise>
 8015420:	2001      	movs	r0, #1
 8015422:	f7ed fda9 	bl	8002f78 <_exit>

08015426 <_calloc_r>:
 8015426:	b570      	push	{r4, r5, r6, lr}
 8015428:	fba1 5402 	umull	r5, r4, r1, r2
 801542c:	b93c      	cbnz	r4, 801543e <_calloc_r+0x18>
 801542e:	4629      	mov	r1, r5
 8015430:	f7fd fed2 	bl	80131d8 <_malloc_r>
 8015434:	4606      	mov	r6, r0
 8015436:	b928      	cbnz	r0, 8015444 <_calloc_r+0x1e>
 8015438:	2600      	movs	r6, #0
 801543a:	4630      	mov	r0, r6
 801543c:	bd70      	pop	{r4, r5, r6, pc}
 801543e:	220c      	movs	r2, #12
 8015440:	6002      	str	r2, [r0, #0]
 8015442:	e7f9      	b.n	8015438 <_calloc_r+0x12>
 8015444:	462a      	mov	r2, r5
 8015446:	4621      	mov	r1, r4
 8015448:	f7fe fa6b 	bl	8013922 <memset>
 801544c:	e7f5      	b.n	801543a <_calloc_r+0x14>

0801544e <__sfputc_r>:
 801544e:	6893      	ldr	r3, [r2, #8]
 8015450:	3b01      	subs	r3, #1
 8015452:	2b00      	cmp	r3, #0
 8015454:	b410      	push	{r4}
 8015456:	6093      	str	r3, [r2, #8]
 8015458:	da08      	bge.n	801546c <__sfputc_r+0x1e>
 801545a:	6994      	ldr	r4, [r2, #24]
 801545c:	42a3      	cmp	r3, r4
 801545e:	db01      	blt.n	8015464 <__sfputc_r+0x16>
 8015460:	290a      	cmp	r1, #10
 8015462:	d103      	bne.n	801546c <__sfputc_r+0x1e>
 8015464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015468:	f000 b94c 	b.w	8015704 <__swbuf_r>
 801546c:	6813      	ldr	r3, [r2, #0]
 801546e:	1c58      	adds	r0, r3, #1
 8015470:	6010      	str	r0, [r2, #0]
 8015472:	7019      	strb	r1, [r3, #0]
 8015474:	4608      	mov	r0, r1
 8015476:	f85d 4b04 	ldr.w	r4, [sp], #4
 801547a:	4770      	bx	lr

0801547c <__sfputs_r>:
 801547c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801547e:	4606      	mov	r6, r0
 8015480:	460f      	mov	r7, r1
 8015482:	4614      	mov	r4, r2
 8015484:	18d5      	adds	r5, r2, r3
 8015486:	42ac      	cmp	r4, r5
 8015488:	d101      	bne.n	801548e <__sfputs_r+0x12>
 801548a:	2000      	movs	r0, #0
 801548c:	e007      	b.n	801549e <__sfputs_r+0x22>
 801548e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015492:	463a      	mov	r2, r7
 8015494:	4630      	mov	r0, r6
 8015496:	f7ff ffda 	bl	801544e <__sfputc_r>
 801549a:	1c43      	adds	r3, r0, #1
 801549c:	d1f3      	bne.n	8015486 <__sfputs_r+0xa>
 801549e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080154a0 <_vfiprintf_r>:
 80154a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154a4:	460d      	mov	r5, r1
 80154a6:	b09d      	sub	sp, #116	@ 0x74
 80154a8:	4614      	mov	r4, r2
 80154aa:	4698      	mov	r8, r3
 80154ac:	4606      	mov	r6, r0
 80154ae:	b118      	cbz	r0, 80154b8 <_vfiprintf_r+0x18>
 80154b0:	6a03      	ldr	r3, [r0, #32]
 80154b2:	b90b      	cbnz	r3, 80154b8 <_vfiprintf_r+0x18>
 80154b4:	f7fe f956 	bl	8013764 <__sinit>
 80154b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80154ba:	07d9      	lsls	r1, r3, #31
 80154bc:	d405      	bmi.n	80154ca <_vfiprintf_r+0x2a>
 80154be:	89ab      	ldrh	r3, [r5, #12]
 80154c0:	059a      	lsls	r2, r3, #22
 80154c2:	d402      	bmi.n	80154ca <_vfiprintf_r+0x2a>
 80154c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80154c6:	f7ed fec6 	bl	8003256 <__retarget_lock_acquire_recursive>
 80154ca:	89ab      	ldrh	r3, [r5, #12]
 80154cc:	071b      	lsls	r3, r3, #28
 80154ce:	d501      	bpl.n	80154d4 <_vfiprintf_r+0x34>
 80154d0:	692b      	ldr	r3, [r5, #16]
 80154d2:	b99b      	cbnz	r3, 80154fc <_vfiprintf_r+0x5c>
 80154d4:	4629      	mov	r1, r5
 80154d6:	4630      	mov	r0, r6
 80154d8:	f000 f952 	bl	8015780 <__swsetup_r>
 80154dc:	b170      	cbz	r0, 80154fc <_vfiprintf_r+0x5c>
 80154de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80154e0:	07dc      	lsls	r4, r3, #31
 80154e2:	d504      	bpl.n	80154ee <_vfiprintf_r+0x4e>
 80154e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80154e8:	b01d      	add	sp, #116	@ 0x74
 80154ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154ee:	89ab      	ldrh	r3, [r5, #12]
 80154f0:	0598      	lsls	r0, r3, #22
 80154f2:	d4f7      	bmi.n	80154e4 <_vfiprintf_r+0x44>
 80154f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80154f6:	f7ed fec3 	bl	8003280 <__retarget_lock_release_recursive>
 80154fa:	e7f3      	b.n	80154e4 <_vfiprintf_r+0x44>
 80154fc:	2300      	movs	r3, #0
 80154fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8015500:	2320      	movs	r3, #32
 8015502:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015506:	f8cd 800c 	str.w	r8, [sp, #12]
 801550a:	2330      	movs	r3, #48	@ 0x30
 801550c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80156bc <_vfiprintf_r+0x21c>
 8015510:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015514:	f04f 0901 	mov.w	r9, #1
 8015518:	4623      	mov	r3, r4
 801551a:	469a      	mov	sl, r3
 801551c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015520:	b10a      	cbz	r2, 8015526 <_vfiprintf_r+0x86>
 8015522:	2a25      	cmp	r2, #37	@ 0x25
 8015524:	d1f9      	bne.n	801551a <_vfiprintf_r+0x7a>
 8015526:	ebba 0b04 	subs.w	fp, sl, r4
 801552a:	d00b      	beq.n	8015544 <_vfiprintf_r+0xa4>
 801552c:	465b      	mov	r3, fp
 801552e:	4622      	mov	r2, r4
 8015530:	4629      	mov	r1, r5
 8015532:	4630      	mov	r0, r6
 8015534:	f7ff ffa2 	bl	801547c <__sfputs_r>
 8015538:	3001      	adds	r0, #1
 801553a:	f000 80a7 	beq.w	801568c <_vfiprintf_r+0x1ec>
 801553e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015540:	445a      	add	r2, fp
 8015542:	9209      	str	r2, [sp, #36]	@ 0x24
 8015544:	f89a 3000 	ldrb.w	r3, [sl]
 8015548:	2b00      	cmp	r3, #0
 801554a:	f000 809f 	beq.w	801568c <_vfiprintf_r+0x1ec>
 801554e:	2300      	movs	r3, #0
 8015550:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015558:	f10a 0a01 	add.w	sl, sl, #1
 801555c:	9304      	str	r3, [sp, #16]
 801555e:	9307      	str	r3, [sp, #28]
 8015560:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015564:	931a      	str	r3, [sp, #104]	@ 0x68
 8015566:	4654      	mov	r4, sl
 8015568:	2205      	movs	r2, #5
 801556a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801556e:	4853      	ldr	r0, [pc, #332]	@ (80156bc <_vfiprintf_r+0x21c>)
 8015570:	f7ea fe56 	bl	8000220 <memchr>
 8015574:	9a04      	ldr	r2, [sp, #16]
 8015576:	b9d8      	cbnz	r0, 80155b0 <_vfiprintf_r+0x110>
 8015578:	06d1      	lsls	r1, r2, #27
 801557a:	bf44      	itt	mi
 801557c:	2320      	movmi	r3, #32
 801557e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015582:	0713      	lsls	r3, r2, #28
 8015584:	bf44      	itt	mi
 8015586:	232b      	movmi	r3, #43	@ 0x2b
 8015588:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801558c:	f89a 3000 	ldrb.w	r3, [sl]
 8015590:	2b2a      	cmp	r3, #42	@ 0x2a
 8015592:	d015      	beq.n	80155c0 <_vfiprintf_r+0x120>
 8015594:	9a07      	ldr	r2, [sp, #28]
 8015596:	4654      	mov	r4, sl
 8015598:	2000      	movs	r0, #0
 801559a:	f04f 0c0a 	mov.w	ip, #10
 801559e:	4621      	mov	r1, r4
 80155a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80155a4:	3b30      	subs	r3, #48	@ 0x30
 80155a6:	2b09      	cmp	r3, #9
 80155a8:	d94b      	bls.n	8015642 <_vfiprintf_r+0x1a2>
 80155aa:	b1b0      	cbz	r0, 80155da <_vfiprintf_r+0x13a>
 80155ac:	9207      	str	r2, [sp, #28]
 80155ae:	e014      	b.n	80155da <_vfiprintf_r+0x13a>
 80155b0:	eba0 0308 	sub.w	r3, r0, r8
 80155b4:	fa09 f303 	lsl.w	r3, r9, r3
 80155b8:	4313      	orrs	r3, r2
 80155ba:	9304      	str	r3, [sp, #16]
 80155bc:	46a2      	mov	sl, r4
 80155be:	e7d2      	b.n	8015566 <_vfiprintf_r+0xc6>
 80155c0:	9b03      	ldr	r3, [sp, #12]
 80155c2:	1d19      	adds	r1, r3, #4
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	9103      	str	r1, [sp, #12]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	bfbb      	ittet	lt
 80155cc:	425b      	neglt	r3, r3
 80155ce:	f042 0202 	orrlt.w	r2, r2, #2
 80155d2:	9307      	strge	r3, [sp, #28]
 80155d4:	9307      	strlt	r3, [sp, #28]
 80155d6:	bfb8      	it	lt
 80155d8:	9204      	strlt	r2, [sp, #16]
 80155da:	7823      	ldrb	r3, [r4, #0]
 80155dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80155de:	d10a      	bne.n	80155f6 <_vfiprintf_r+0x156>
 80155e0:	7863      	ldrb	r3, [r4, #1]
 80155e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80155e4:	d132      	bne.n	801564c <_vfiprintf_r+0x1ac>
 80155e6:	9b03      	ldr	r3, [sp, #12]
 80155e8:	1d1a      	adds	r2, r3, #4
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	9203      	str	r2, [sp, #12]
 80155ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80155f2:	3402      	adds	r4, #2
 80155f4:	9305      	str	r3, [sp, #20]
 80155f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80156cc <_vfiprintf_r+0x22c>
 80155fa:	7821      	ldrb	r1, [r4, #0]
 80155fc:	2203      	movs	r2, #3
 80155fe:	4650      	mov	r0, sl
 8015600:	f7ea fe0e 	bl	8000220 <memchr>
 8015604:	b138      	cbz	r0, 8015616 <_vfiprintf_r+0x176>
 8015606:	9b04      	ldr	r3, [sp, #16]
 8015608:	eba0 000a 	sub.w	r0, r0, sl
 801560c:	2240      	movs	r2, #64	@ 0x40
 801560e:	4082      	lsls	r2, r0
 8015610:	4313      	orrs	r3, r2
 8015612:	3401      	adds	r4, #1
 8015614:	9304      	str	r3, [sp, #16]
 8015616:	f814 1b01 	ldrb.w	r1, [r4], #1
 801561a:	4829      	ldr	r0, [pc, #164]	@ (80156c0 <_vfiprintf_r+0x220>)
 801561c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015620:	2206      	movs	r2, #6
 8015622:	f7ea fdfd 	bl	8000220 <memchr>
 8015626:	2800      	cmp	r0, #0
 8015628:	d03f      	beq.n	80156aa <_vfiprintf_r+0x20a>
 801562a:	4b26      	ldr	r3, [pc, #152]	@ (80156c4 <_vfiprintf_r+0x224>)
 801562c:	bb1b      	cbnz	r3, 8015676 <_vfiprintf_r+0x1d6>
 801562e:	9b03      	ldr	r3, [sp, #12]
 8015630:	3307      	adds	r3, #7
 8015632:	f023 0307 	bic.w	r3, r3, #7
 8015636:	3308      	adds	r3, #8
 8015638:	9303      	str	r3, [sp, #12]
 801563a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801563c:	443b      	add	r3, r7
 801563e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015640:	e76a      	b.n	8015518 <_vfiprintf_r+0x78>
 8015642:	fb0c 3202 	mla	r2, ip, r2, r3
 8015646:	460c      	mov	r4, r1
 8015648:	2001      	movs	r0, #1
 801564a:	e7a8      	b.n	801559e <_vfiprintf_r+0xfe>
 801564c:	2300      	movs	r3, #0
 801564e:	3401      	adds	r4, #1
 8015650:	9305      	str	r3, [sp, #20]
 8015652:	4619      	mov	r1, r3
 8015654:	f04f 0c0a 	mov.w	ip, #10
 8015658:	4620      	mov	r0, r4
 801565a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801565e:	3a30      	subs	r2, #48	@ 0x30
 8015660:	2a09      	cmp	r2, #9
 8015662:	d903      	bls.n	801566c <_vfiprintf_r+0x1cc>
 8015664:	2b00      	cmp	r3, #0
 8015666:	d0c6      	beq.n	80155f6 <_vfiprintf_r+0x156>
 8015668:	9105      	str	r1, [sp, #20]
 801566a:	e7c4      	b.n	80155f6 <_vfiprintf_r+0x156>
 801566c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015670:	4604      	mov	r4, r0
 8015672:	2301      	movs	r3, #1
 8015674:	e7f0      	b.n	8015658 <_vfiprintf_r+0x1b8>
 8015676:	ab03      	add	r3, sp, #12
 8015678:	9300      	str	r3, [sp, #0]
 801567a:	462a      	mov	r2, r5
 801567c:	4b12      	ldr	r3, [pc, #72]	@ (80156c8 <_vfiprintf_r+0x228>)
 801567e:	a904      	add	r1, sp, #16
 8015680:	4630      	mov	r0, r6
 8015682:	f7fd fb55 	bl	8012d30 <_printf_float>
 8015686:	4607      	mov	r7, r0
 8015688:	1c78      	adds	r0, r7, #1
 801568a:	d1d6      	bne.n	801563a <_vfiprintf_r+0x19a>
 801568c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801568e:	07d9      	lsls	r1, r3, #31
 8015690:	d405      	bmi.n	801569e <_vfiprintf_r+0x1fe>
 8015692:	89ab      	ldrh	r3, [r5, #12]
 8015694:	059a      	lsls	r2, r3, #22
 8015696:	d402      	bmi.n	801569e <_vfiprintf_r+0x1fe>
 8015698:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801569a:	f7ed fdf1 	bl	8003280 <__retarget_lock_release_recursive>
 801569e:	89ab      	ldrh	r3, [r5, #12]
 80156a0:	065b      	lsls	r3, r3, #25
 80156a2:	f53f af1f 	bmi.w	80154e4 <_vfiprintf_r+0x44>
 80156a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80156a8:	e71e      	b.n	80154e8 <_vfiprintf_r+0x48>
 80156aa:	ab03      	add	r3, sp, #12
 80156ac:	9300      	str	r3, [sp, #0]
 80156ae:	462a      	mov	r2, r5
 80156b0:	4b05      	ldr	r3, [pc, #20]	@ (80156c8 <_vfiprintf_r+0x228>)
 80156b2:	a904      	add	r1, sp, #16
 80156b4:	4630      	mov	r0, r6
 80156b6:	f7fd fe7d 	bl	80133b4 <_printf_i>
 80156ba:	e7e4      	b.n	8015686 <_vfiprintf_r+0x1e6>
 80156bc:	08016dee 	.word	0x08016dee
 80156c0:	08016df8 	.word	0x08016df8
 80156c4:	08012d31 	.word	0x08012d31
 80156c8:	0801547d 	.word	0x0801547d
 80156cc:	08016df4 	.word	0x08016df4

080156d0 <__ascii_mbtowc>:
 80156d0:	b082      	sub	sp, #8
 80156d2:	b901      	cbnz	r1, 80156d6 <__ascii_mbtowc+0x6>
 80156d4:	a901      	add	r1, sp, #4
 80156d6:	b142      	cbz	r2, 80156ea <__ascii_mbtowc+0x1a>
 80156d8:	b14b      	cbz	r3, 80156ee <__ascii_mbtowc+0x1e>
 80156da:	7813      	ldrb	r3, [r2, #0]
 80156dc:	600b      	str	r3, [r1, #0]
 80156de:	7812      	ldrb	r2, [r2, #0]
 80156e0:	1e10      	subs	r0, r2, #0
 80156e2:	bf18      	it	ne
 80156e4:	2001      	movne	r0, #1
 80156e6:	b002      	add	sp, #8
 80156e8:	4770      	bx	lr
 80156ea:	4610      	mov	r0, r2
 80156ec:	e7fb      	b.n	80156e6 <__ascii_mbtowc+0x16>
 80156ee:	f06f 0001 	mvn.w	r0, #1
 80156f2:	e7f8      	b.n	80156e6 <__ascii_mbtowc+0x16>

080156f4 <_malloc_usable_size_r>:
 80156f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156f8:	1f18      	subs	r0, r3, #4
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	bfbc      	itt	lt
 80156fe:	580b      	ldrlt	r3, [r1, r0]
 8015700:	18c0      	addlt	r0, r0, r3
 8015702:	4770      	bx	lr

08015704 <__swbuf_r>:
 8015704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015706:	460e      	mov	r6, r1
 8015708:	4614      	mov	r4, r2
 801570a:	4605      	mov	r5, r0
 801570c:	b118      	cbz	r0, 8015716 <__swbuf_r+0x12>
 801570e:	6a03      	ldr	r3, [r0, #32]
 8015710:	b90b      	cbnz	r3, 8015716 <__swbuf_r+0x12>
 8015712:	f7fe f827 	bl	8013764 <__sinit>
 8015716:	69a3      	ldr	r3, [r4, #24]
 8015718:	60a3      	str	r3, [r4, #8]
 801571a:	89a3      	ldrh	r3, [r4, #12]
 801571c:	071a      	lsls	r2, r3, #28
 801571e:	d501      	bpl.n	8015724 <__swbuf_r+0x20>
 8015720:	6923      	ldr	r3, [r4, #16]
 8015722:	b943      	cbnz	r3, 8015736 <__swbuf_r+0x32>
 8015724:	4621      	mov	r1, r4
 8015726:	4628      	mov	r0, r5
 8015728:	f000 f82a 	bl	8015780 <__swsetup_r>
 801572c:	b118      	cbz	r0, 8015736 <__swbuf_r+0x32>
 801572e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015732:	4638      	mov	r0, r7
 8015734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015736:	6823      	ldr	r3, [r4, #0]
 8015738:	6922      	ldr	r2, [r4, #16]
 801573a:	1a98      	subs	r0, r3, r2
 801573c:	6963      	ldr	r3, [r4, #20]
 801573e:	b2f6      	uxtb	r6, r6
 8015740:	4283      	cmp	r3, r0
 8015742:	4637      	mov	r7, r6
 8015744:	dc05      	bgt.n	8015752 <__swbuf_r+0x4e>
 8015746:	4621      	mov	r1, r4
 8015748:	4628      	mov	r0, r5
 801574a:	f7ff f9d7 	bl	8014afc <_fflush_r>
 801574e:	2800      	cmp	r0, #0
 8015750:	d1ed      	bne.n	801572e <__swbuf_r+0x2a>
 8015752:	68a3      	ldr	r3, [r4, #8]
 8015754:	3b01      	subs	r3, #1
 8015756:	60a3      	str	r3, [r4, #8]
 8015758:	6823      	ldr	r3, [r4, #0]
 801575a:	1c5a      	adds	r2, r3, #1
 801575c:	6022      	str	r2, [r4, #0]
 801575e:	701e      	strb	r6, [r3, #0]
 8015760:	6962      	ldr	r2, [r4, #20]
 8015762:	1c43      	adds	r3, r0, #1
 8015764:	429a      	cmp	r2, r3
 8015766:	d004      	beq.n	8015772 <__swbuf_r+0x6e>
 8015768:	89a3      	ldrh	r3, [r4, #12]
 801576a:	07db      	lsls	r3, r3, #31
 801576c:	d5e1      	bpl.n	8015732 <__swbuf_r+0x2e>
 801576e:	2e0a      	cmp	r6, #10
 8015770:	d1df      	bne.n	8015732 <__swbuf_r+0x2e>
 8015772:	4621      	mov	r1, r4
 8015774:	4628      	mov	r0, r5
 8015776:	f7ff f9c1 	bl	8014afc <_fflush_r>
 801577a:	2800      	cmp	r0, #0
 801577c:	d0d9      	beq.n	8015732 <__swbuf_r+0x2e>
 801577e:	e7d6      	b.n	801572e <__swbuf_r+0x2a>

08015780 <__swsetup_r>:
 8015780:	b538      	push	{r3, r4, r5, lr}
 8015782:	4b29      	ldr	r3, [pc, #164]	@ (8015828 <__swsetup_r+0xa8>)
 8015784:	4605      	mov	r5, r0
 8015786:	6818      	ldr	r0, [r3, #0]
 8015788:	460c      	mov	r4, r1
 801578a:	b118      	cbz	r0, 8015794 <__swsetup_r+0x14>
 801578c:	6a03      	ldr	r3, [r0, #32]
 801578e:	b90b      	cbnz	r3, 8015794 <__swsetup_r+0x14>
 8015790:	f7fd ffe8 	bl	8013764 <__sinit>
 8015794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015798:	0719      	lsls	r1, r3, #28
 801579a:	d422      	bmi.n	80157e2 <__swsetup_r+0x62>
 801579c:	06da      	lsls	r2, r3, #27
 801579e:	d407      	bmi.n	80157b0 <__swsetup_r+0x30>
 80157a0:	2209      	movs	r2, #9
 80157a2:	602a      	str	r2, [r5, #0]
 80157a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80157a8:	81a3      	strh	r3, [r4, #12]
 80157aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80157ae:	e033      	b.n	8015818 <__swsetup_r+0x98>
 80157b0:	0758      	lsls	r0, r3, #29
 80157b2:	d512      	bpl.n	80157da <__swsetup_r+0x5a>
 80157b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80157b6:	b141      	cbz	r1, 80157ca <__swsetup_r+0x4a>
 80157b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80157bc:	4299      	cmp	r1, r3
 80157be:	d002      	beq.n	80157c6 <__swsetup_r+0x46>
 80157c0:	4628      	mov	r0, r5
 80157c2:	f7fe ff75 	bl	80146b0 <_free_r>
 80157c6:	2300      	movs	r3, #0
 80157c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80157ca:	89a3      	ldrh	r3, [r4, #12]
 80157cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80157d0:	81a3      	strh	r3, [r4, #12]
 80157d2:	2300      	movs	r3, #0
 80157d4:	6063      	str	r3, [r4, #4]
 80157d6:	6923      	ldr	r3, [r4, #16]
 80157d8:	6023      	str	r3, [r4, #0]
 80157da:	89a3      	ldrh	r3, [r4, #12]
 80157dc:	f043 0308 	orr.w	r3, r3, #8
 80157e0:	81a3      	strh	r3, [r4, #12]
 80157e2:	6923      	ldr	r3, [r4, #16]
 80157e4:	b94b      	cbnz	r3, 80157fa <__swsetup_r+0x7a>
 80157e6:	89a3      	ldrh	r3, [r4, #12]
 80157e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80157ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80157f0:	d003      	beq.n	80157fa <__swsetup_r+0x7a>
 80157f2:	4621      	mov	r1, r4
 80157f4:	4628      	mov	r0, r5
 80157f6:	f000 f84c 	bl	8015892 <__smakebuf_r>
 80157fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80157fe:	f013 0201 	ands.w	r2, r3, #1
 8015802:	d00a      	beq.n	801581a <__swsetup_r+0x9a>
 8015804:	2200      	movs	r2, #0
 8015806:	60a2      	str	r2, [r4, #8]
 8015808:	6962      	ldr	r2, [r4, #20]
 801580a:	4252      	negs	r2, r2
 801580c:	61a2      	str	r2, [r4, #24]
 801580e:	6922      	ldr	r2, [r4, #16]
 8015810:	b942      	cbnz	r2, 8015824 <__swsetup_r+0xa4>
 8015812:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015816:	d1c5      	bne.n	80157a4 <__swsetup_r+0x24>
 8015818:	bd38      	pop	{r3, r4, r5, pc}
 801581a:	0799      	lsls	r1, r3, #30
 801581c:	bf58      	it	pl
 801581e:	6962      	ldrpl	r2, [r4, #20]
 8015820:	60a2      	str	r2, [r4, #8]
 8015822:	e7f4      	b.n	801580e <__swsetup_r+0x8e>
 8015824:	2000      	movs	r0, #0
 8015826:	e7f7      	b.n	8015818 <__swsetup_r+0x98>
 8015828:	200000f0 	.word	0x200000f0

0801582c <__ascii_wctomb>:
 801582c:	4603      	mov	r3, r0
 801582e:	4608      	mov	r0, r1
 8015830:	b141      	cbz	r1, 8015844 <__ascii_wctomb+0x18>
 8015832:	2aff      	cmp	r2, #255	@ 0xff
 8015834:	d904      	bls.n	8015840 <__ascii_wctomb+0x14>
 8015836:	228a      	movs	r2, #138	@ 0x8a
 8015838:	601a      	str	r2, [r3, #0]
 801583a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801583e:	4770      	bx	lr
 8015840:	700a      	strb	r2, [r1, #0]
 8015842:	2001      	movs	r0, #1
 8015844:	4770      	bx	lr

08015846 <__swhatbuf_r>:
 8015846:	b570      	push	{r4, r5, r6, lr}
 8015848:	460c      	mov	r4, r1
 801584a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801584e:	2900      	cmp	r1, #0
 8015850:	b096      	sub	sp, #88	@ 0x58
 8015852:	4615      	mov	r5, r2
 8015854:	461e      	mov	r6, r3
 8015856:	da0d      	bge.n	8015874 <__swhatbuf_r+0x2e>
 8015858:	89a3      	ldrh	r3, [r4, #12]
 801585a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801585e:	f04f 0100 	mov.w	r1, #0
 8015862:	bf14      	ite	ne
 8015864:	2340      	movne	r3, #64	@ 0x40
 8015866:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801586a:	2000      	movs	r0, #0
 801586c:	6031      	str	r1, [r6, #0]
 801586e:	602b      	str	r3, [r5, #0]
 8015870:	b016      	add	sp, #88	@ 0x58
 8015872:	bd70      	pop	{r4, r5, r6, pc}
 8015874:	466a      	mov	r2, sp
 8015876:	f000 f849 	bl	801590c <_fstat_r>
 801587a:	2800      	cmp	r0, #0
 801587c:	dbec      	blt.n	8015858 <__swhatbuf_r+0x12>
 801587e:	9901      	ldr	r1, [sp, #4]
 8015880:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015884:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015888:	4259      	negs	r1, r3
 801588a:	4159      	adcs	r1, r3
 801588c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015890:	e7eb      	b.n	801586a <__swhatbuf_r+0x24>

08015892 <__smakebuf_r>:
 8015892:	898b      	ldrh	r3, [r1, #12]
 8015894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015896:	079d      	lsls	r5, r3, #30
 8015898:	4606      	mov	r6, r0
 801589a:	460c      	mov	r4, r1
 801589c:	d507      	bpl.n	80158ae <__smakebuf_r+0x1c>
 801589e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80158a2:	6023      	str	r3, [r4, #0]
 80158a4:	6123      	str	r3, [r4, #16]
 80158a6:	2301      	movs	r3, #1
 80158a8:	6163      	str	r3, [r4, #20]
 80158aa:	b003      	add	sp, #12
 80158ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158ae:	ab01      	add	r3, sp, #4
 80158b0:	466a      	mov	r2, sp
 80158b2:	f7ff ffc8 	bl	8015846 <__swhatbuf_r>
 80158b6:	9f00      	ldr	r7, [sp, #0]
 80158b8:	4605      	mov	r5, r0
 80158ba:	4639      	mov	r1, r7
 80158bc:	4630      	mov	r0, r6
 80158be:	f7fd fc8b 	bl	80131d8 <_malloc_r>
 80158c2:	b948      	cbnz	r0, 80158d8 <__smakebuf_r+0x46>
 80158c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158c8:	059a      	lsls	r2, r3, #22
 80158ca:	d4ee      	bmi.n	80158aa <__smakebuf_r+0x18>
 80158cc:	f023 0303 	bic.w	r3, r3, #3
 80158d0:	f043 0302 	orr.w	r3, r3, #2
 80158d4:	81a3      	strh	r3, [r4, #12]
 80158d6:	e7e2      	b.n	801589e <__smakebuf_r+0xc>
 80158d8:	89a3      	ldrh	r3, [r4, #12]
 80158da:	6020      	str	r0, [r4, #0]
 80158dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80158e0:	81a3      	strh	r3, [r4, #12]
 80158e2:	9b01      	ldr	r3, [sp, #4]
 80158e4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80158e8:	b15b      	cbz	r3, 8015902 <__smakebuf_r+0x70>
 80158ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80158ee:	4630      	mov	r0, r6
 80158f0:	f000 f81e 	bl	8015930 <_isatty_r>
 80158f4:	b128      	cbz	r0, 8015902 <__smakebuf_r+0x70>
 80158f6:	89a3      	ldrh	r3, [r4, #12]
 80158f8:	f023 0303 	bic.w	r3, r3, #3
 80158fc:	f043 0301 	orr.w	r3, r3, #1
 8015900:	81a3      	strh	r3, [r4, #12]
 8015902:	89a3      	ldrh	r3, [r4, #12]
 8015904:	431d      	orrs	r5, r3
 8015906:	81a5      	strh	r5, [r4, #12]
 8015908:	e7cf      	b.n	80158aa <__smakebuf_r+0x18>
	...

0801590c <_fstat_r>:
 801590c:	b538      	push	{r3, r4, r5, lr}
 801590e:	4d07      	ldr	r5, [pc, #28]	@ (801592c <_fstat_r+0x20>)
 8015910:	2300      	movs	r3, #0
 8015912:	4604      	mov	r4, r0
 8015914:	4608      	mov	r0, r1
 8015916:	4611      	mov	r1, r2
 8015918:	602b      	str	r3, [r5, #0]
 801591a:	f7ed fb61 	bl	8002fe0 <_fstat>
 801591e:	1c43      	adds	r3, r0, #1
 8015920:	d102      	bne.n	8015928 <_fstat_r+0x1c>
 8015922:	682b      	ldr	r3, [r5, #0]
 8015924:	b103      	cbz	r3, 8015928 <_fstat_r+0x1c>
 8015926:	6023      	str	r3, [r4, #0]
 8015928:	bd38      	pop	{r3, r4, r5, pc}
 801592a:	bf00      	nop
 801592c:	200016d0 	.word	0x200016d0

08015930 <_isatty_r>:
 8015930:	b538      	push	{r3, r4, r5, lr}
 8015932:	4d06      	ldr	r5, [pc, #24]	@ (801594c <_isatty_r+0x1c>)
 8015934:	2300      	movs	r3, #0
 8015936:	4604      	mov	r4, r0
 8015938:	4608      	mov	r0, r1
 801593a:	602b      	str	r3, [r5, #0]
 801593c:	f7ed fb60 	bl	8003000 <_isatty>
 8015940:	1c43      	adds	r3, r0, #1
 8015942:	d102      	bne.n	801594a <_isatty_r+0x1a>
 8015944:	682b      	ldr	r3, [r5, #0]
 8015946:	b103      	cbz	r3, 801594a <_isatty_r+0x1a>
 8015948:	6023      	str	r3, [r4, #0]
 801594a:	bd38      	pop	{r3, r4, r5, pc}
 801594c:	200016d0 	.word	0x200016d0

08015950 <_raise_r>:
 8015950:	291f      	cmp	r1, #31
 8015952:	b538      	push	{r3, r4, r5, lr}
 8015954:	4605      	mov	r5, r0
 8015956:	460c      	mov	r4, r1
 8015958:	d904      	bls.n	8015964 <_raise_r+0x14>
 801595a:	2316      	movs	r3, #22
 801595c:	6003      	str	r3, [r0, #0]
 801595e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015962:	bd38      	pop	{r3, r4, r5, pc}
 8015964:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015966:	b112      	cbz	r2, 801596e <_raise_r+0x1e>
 8015968:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801596c:	b94b      	cbnz	r3, 8015982 <_raise_r+0x32>
 801596e:	4628      	mov	r0, r5
 8015970:	f000 f830 	bl	80159d4 <_getpid_r>
 8015974:	4622      	mov	r2, r4
 8015976:	4601      	mov	r1, r0
 8015978:	4628      	mov	r0, r5
 801597a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801597e:	f000 b817 	b.w	80159b0 <_kill_r>
 8015982:	2b01      	cmp	r3, #1
 8015984:	d00a      	beq.n	801599c <_raise_r+0x4c>
 8015986:	1c59      	adds	r1, r3, #1
 8015988:	d103      	bne.n	8015992 <_raise_r+0x42>
 801598a:	2316      	movs	r3, #22
 801598c:	6003      	str	r3, [r0, #0]
 801598e:	2001      	movs	r0, #1
 8015990:	e7e7      	b.n	8015962 <_raise_r+0x12>
 8015992:	2100      	movs	r1, #0
 8015994:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015998:	4620      	mov	r0, r4
 801599a:	4798      	blx	r3
 801599c:	2000      	movs	r0, #0
 801599e:	e7e0      	b.n	8015962 <_raise_r+0x12>

080159a0 <raise>:
 80159a0:	4b02      	ldr	r3, [pc, #8]	@ (80159ac <raise+0xc>)
 80159a2:	4601      	mov	r1, r0
 80159a4:	6818      	ldr	r0, [r3, #0]
 80159a6:	f7ff bfd3 	b.w	8015950 <_raise_r>
 80159aa:	bf00      	nop
 80159ac:	200000f0 	.word	0x200000f0

080159b0 <_kill_r>:
 80159b0:	b538      	push	{r3, r4, r5, lr}
 80159b2:	4d07      	ldr	r5, [pc, #28]	@ (80159d0 <_kill_r+0x20>)
 80159b4:	2300      	movs	r3, #0
 80159b6:	4604      	mov	r4, r0
 80159b8:	4608      	mov	r0, r1
 80159ba:	4611      	mov	r1, r2
 80159bc:	602b      	str	r3, [r5, #0]
 80159be:	f7ed facb 	bl	8002f58 <_kill>
 80159c2:	1c43      	adds	r3, r0, #1
 80159c4:	d102      	bne.n	80159cc <_kill_r+0x1c>
 80159c6:	682b      	ldr	r3, [r5, #0]
 80159c8:	b103      	cbz	r3, 80159cc <_kill_r+0x1c>
 80159ca:	6023      	str	r3, [r4, #0]
 80159cc:	bd38      	pop	{r3, r4, r5, pc}
 80159ce:	bf00      	nop
 80159d0:	200016d0 	.word	0x200016d0

080159d4 <_getpid_r>:
 80159d4:	f7ed bab8 	b.w	8002f48 <_getpid>

080159d8 <pow>:
 80159d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159da:	ed2d 8b02 	vpush	{d8}
 80159de:	eeb0 8a40 	vmov.f32	s16, s0
 80159e2:	eef0 8a60 	vmov.f32	s17, s1
 80159e6:	ec55 4b11 	vmov	r4, r5, d1
 80159ea:	f000 f871 	bl	8015ad0 <__ieee754_pow>
 80159ee:	4622      	mov	r2, r4
 80159f0:	462b      	mov	r3, r5
 80159f2:	4620      	mov	r0, r4
 80159f4:	4629      	mov	r1, r5
 80159f6:	ec57 6b10 	vmov	r6, r7, d0
 80159fa:	f7eb f8bf 	bl	8000b7c <__aeabi_dcmpun>
 80159fe:	2800      	cmp	r0, #0
 8015a00:	d13b      	bne.n	8015a7a <pow+0xa2>
 8015a02:	ec51 0b18 	vmov	r0, r1, d8
 8015a06:	2200      	movs	r2, #0
 8015a08:	2300      	movs	r3, #0
 8015a0a:	f7eb f885 	bl	8000b18 <__aeabi_dcmpeq>
 8015a0e:	b1b8      	cbz	r0, 8015a40 <pow+0x68>
 8015a10:	2200      	movs	r2, #0
 8015a12:	2300      	movs	r3, #0
 8015a14:	4620      	mov	r0, r4
 8015a16:	4629      	mov	r1, r5
 8015a18:	f7eb f87e 	bl	8000b18 <__aeabi_dcmpeq>
 8015a1c:	2800      	cmp	r0, #0
 8015a1e:	d146      	bne.n	8015aae <pow+0xd6>
 8015a20:	ec45 4b10 	vmov	d0, r4, r5
 8015a24:	f000 f848 	bl	8015ab8 <finite>
 8015a28:	b338      	cbz	r0, 8015a7a <pow+0xa2>
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	4620      	mov	r0, r4
 8015a30:	4629      	mov	r1, r5
 8015a32:	f7eb f87b 	bl	8000b2c <__aeabi_dcmplt>
 8015a36:	b300      	cbz	r0, 8015a7a <pow+0xa2>
 8015a38:	f7fd ff90 	bl	801395c <__errno>
 8015a3c:	2322      	movs	r3, #34	@ 0x22
 8015a3e:	e01b      	b.n	8015a78 <pow+0xa0>
 8015a40:	ec47 6b10 	vmov	d0, r6, r7
 8015a44:	f000 f838 	bl	8015ab8 <finite>
 8015a48:	b9e0      	cbnz	r0, 8015a84 <pow+0xac>
 8015a4a:	eeb0 0a48 	vmov.f32	s0, s16
 8015a4e:	eef0 0a68 	vmov.f32	s1, s17
 8015a52:	f000 f831 	bl	8015ab8 <finite>
 8015a56:	b1a8      	cbz	r0, 8015a84 <pow+0xac>
 8015a58:	ec45 4b10 	vmov	d0, r4, r5
 8015a5c:	f000 f82c 	bl	8015ab8 <finite>
 8015a60:	b180      	cbz	r0, 8015a84 <pow+0xac>
 8015a62:	4632      	mov	r2, r6
 8015a64:	463b      	mov	r3, r7
 8015a66:	4630      	mov	r0, r6
 8015a68:	4639      	mov	r1, r7
 8015a6a:	f7eb f887 	bl	8000b7c <__aeabi_dcmpun>
 8015a6e:	2800      	cmp	r0, #0
 8015a70:	d0e2      	beq.n	8015a38 <pow+0x60>
 8015a72:	f7fd ff73 	bl	801395c <__errno>
 8015a76:	2321      	movs	r3, #33	@ 0x21
 8015a78:	6003      	str	r3, [r0, #0]
 8015a7a:	ecbd 8b02 	vpop	{d8}
 8015a7e:	ec47 6b10 	vmov	d0, r6, r7
 8015a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a84:	2200      	movs	r2, #0
 8015a86:	2300      	movs	r3, #0
 8015a88:	4630      	mov	r0, r6
 8015a8a:	4639      	mov	r1, r7
 8015a8c:	f7eb f844 	bl	8000b18 <__aeabi_dcmpeq>
 8015a90:	2800      	cmp	r0, #0
 8015a92:	d0f2      	beq.n	8015a7a <pow+0xa2>
 8015a94:	eeb0 0a48 	vmov.f32	s0, s16
 8015a98:	eef0 0a68 	vmov.f32	s1, s17
 8015a9c:	f000 f80c 	bl	8015ab8 <finite>
 8015aa0:	2800      	cmp	r0, #0
 8015aa2:	d0ea      	beq.n	8015a7a <pow+0xa2>
 8015aa4:	ec45 4b10 	vmov	d0, r4, r5
 8015aa8:	f000 f806 	bl	8015ab8 <finite>
 8015aac:	e7c3      	b.n	8015a36 <pow+0x5e>
 8015aae:	4f01      	ldr	r7, [pc, #4]	@ (8015ab4 <pow+0xdc>)
 8015ab0:	2600      	movs	r6, #0
 8015ab2:	e7e2      	b.n	8015a7a <pow+0xa2>
 8015ab4:	3ff00000 	.word	0x3ff00000

08015ab8 <finite>:
 8015ab8:	b082      	sub	sp, #8
 8015aba:	ed8d 0b00 	vstr	d0, [sp]
 8015abe:	9801      	ldr	r0, [sp, #4]
 8015ac0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8015ac4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8015ac8:	0fc0      	lsrs	r0, r0, #31
 8015aca:	b002      	add	sp, #8
 8015acc:	4770      	bx	lr
	...

08015ad0 <__ieee754_pow>:
 8015ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ad4:	b091      	sub	sp, #68	@ 0x44
 8015ad6:	ed8d 1b00 	vstr	d1, [sp]
 8015ada:	e9dd 1900 	ldrd	r1, r9, [sp]
 8015ade:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8015ae2:	ea5a 0001 	orrs.w	r0, sl, r1
 8015ae6:	ec57 6b10 	vmov	r6, r7, d0
 8015aea:	d113      	bne.n	8015b14 <__ieee754_pow+0x44>
 8015aec:	19b3      	adds	r3, r6, r6
 8015aee:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8015af2:	4152      	adcs	r2, r2
 8015af4:	4298      	cmp	r0, r3
 8015af6:	4b98      	ldr	r3, [pc, #608]	@ (8015d58 <__ieee754_pow+0x288>)
 8015af8:	4193      	sbcs	r3, r2
 8015afa:	f080 84ea 	bcs.w	80164d2 <__ieee754_pow+0xa02>
 8015afe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015b02:	4630      	mov	r0, r6
 8015b04:	4639      	mov	r1, r7
 8015b06:	f7ea fbe9 	bl	80002dc <__adddf3>
 8015b0a:	ec41 0b10 	vmov	d0, r0, r1
 8015b0e:	b011      	add	sp, #68	@ 0x44
 8015b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b14:	4a91      	ldr	r2, [pc, #580]	@ (8015d5c <__ieee754_pow+0x28c>)
 8015b16:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8015b1a:	4590      	cmp	r8, r2
 8015b1c:	463d      	mov	r5, r7
 8015b1e:	4633      	mov	r3, r6
 8015b20:	d806      	bhi.n	8015b30 <__ieee754_pow+0x60>
 8015b22:	d101      	bne.n	8015b28 <__ieee754_pow+0x58>
 8015b24:	2e00      	cmp	r6, #0
 8015b26:	d1ea      	bne.n	8015afe <__ieee754_pow+0x2e>
 8015b28:	4592      	cmp	sl, r2
 8015b2a:	d801      	bhi.n	8015b30 <__ieee754_pow+0x60>
 8015b2c:	d10e      	bne.n	8015b4c <__ieee754_pow+0x7c>
 8015b2e:	b169      	cbz	r1, 8015b4c <__ieee754_pow+0x7c>
 8015b30:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8015b34:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8015b38:	431d      	orrs	r5, r3
 8015b3a:	d1e0      	bne.n	8015afe <__ieee754_pow+0x2e>
 8015b3c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015b40:	18db      	adds	r3, r3, r3
 8015b42:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8015b46:	4152      	adcs	r2, r2
 8015b48:	429d      	cmp	r5, r3
 8015b4a:	e7d4      	b.n	8015af6 <__ieee754_pow+0x26>
 8015b4c:	2d00      	cmp	r5, #0
 8015b4e:	46c3      	mov	fp, r8
 8015b50:	da3a      	bge.n	8015bc8 <__ieee754_pow+0xf8>
 8015b52:	4a83      	ldr	r2, [pc, #524]	@ (8015d60 <__ieee754_pow+0x290>)
 8015b54:	4592      	cmp	sl, r2
 8015b56:	d84d      	bhi.n	8015bf4 <__ieee754_pow+0x124>
 8015b58:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8015b5c:	4592      	cmp	sl, r2
 8015b5e:	f240 84c7 	bls.w	80164f0 <__ieee754_pow+0xa20>
 8015b62:	ea4f 522a 	mov.w	r2, sl, asr #20
 8015b66:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8015b6a:	2a14      	cmp	r2, #20
 8015b6c:	dd0f      	ble.n	8015b8e <__ieee754_pow+0xbe>
 8015b6e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8015b72:	fa21 f402 	lsr.w	r4, r1, r2
 8015b76:	fa04 f202 	lsl.w	r2, r4, r2
 8015b7a:	428a      	cmp	r2, r1
 8015b7c:	f040 84b8 	bne.w	80164f0 <__ieee754_pow+0xa20>
 8015b80:	f004 0401 	and.w	r4, r4, #1
 8015b84:	f1c4 0402 	rsb	r4, r4, #2
 8015b88:	2900      	cmp	r1, #0
 8015b8a:	d158      	bne.n	8015c3e <__ieee754_pow+0x16e>
 8015b8c:	e00e      	b.n	8015bac <__ieee754_pow+0xdc>
 8015b8e:	2900      	cmp	r1, #0
 8015b90:	d154      	bne.n	8015c3c <__ieee754_pow+0x16c>
 8015b92:	f1c2 0214 	rsb	r2, r2, #20
 8015b96:	fa4a f402 	asr.w	r4, sl, r2
 8015b9a:	fa04 f202 	lsl.w	r2, r4, r2
 8015b9e:	4552      	cmp	r2, sl
 8015ba0:	f040 84a3 	bne.w	80164ea <__ieee754_pow+0xa1a>
 8015ba4:	f004 0401 	and.w	r4, r4, #1
 8015ba8:	f1c4 0402 	rsb	r4, r4, #2
 8015bac:	4a6d      	ldr	r2, [pc, #436]	@ (8015d64 <__ieee754_pow+0x294>)
 8015bae:	4592      	cmp	sl, r2
 8015bb0:	d12e      	bne.n	8015c10 <__ieee754_pow+0x140>
 8015bb2:	f1b9 0f00 	cmp.w	r9, #0
 8015bb6:	f280 8494 	bge.w	80164e2 <__ieee754_pow+0xa12>
 8015bba:	496a      	ldr	r1, [pc, #424]	@ (8015d64 <__ieee754_pow+0x294>)
 8015bbc:	4632      	mov	r2, r6
 8015bbe:	463b      	mov	r3, r7
 8015bc0:	2000      	movs	r0, #0
 8015bc2:	f7ea fe6b 	bl	800089c <__aeabi_ddiv>
 8015bc6:	e7a0      	b.n	8015b0a <__ieee754_pow+0x3a>
 8015bc8:	2400      	movs	r4, #0
 8015bca:	bbc1      	cbnz	r1, 8015c3e <__ieee754_pow+0x16e>
 8015bcc:	4a63      	ldr	r2, [pc, #396]	@ (8015d5c <__ieee754_pow+0x28c>)
 8015bce:	4592      	cmp	sl, r2
 8015bd0:	d1ec      	bne.n	8015bac <__ieee754_pow+0xdc>
 8015bd2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8015bd6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8015bda:	431a      	orrs	r2, r3
 8015bdc:	f000 8479 	beq.w	80164d2 <__ieee754_pow+0xa02>
 8015be0:	4b61      	ldr	r3, [pc, #388]	@ (8015d68 <__ieee754_pow+0x298>)
 8015be2:	4598      	cmp	r8, r3
 8015be4:	d908      	bls.n	8015bf8 <__ieee754_pow+0x128>
 8015be6:	f1b9 0f00 	cmp.w	r9, #0
 8015bea:	f2c0 8476 	blt.w	80164da <__ieee754_pow+0xa0a>
 8015bee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015bf2:	e78a      	b.n	8015b0a <__ieee754_pow+0x3a>
 8015bf4:	2402      	movs	r4, #2
 8015bf6:	e7e8      	b.n	8015bca <__ieee754_pow+0xfa>
 8015bf8:	f1b9 0f00 	cmp.w	r9, #0
 8015bfc:	f04f 0000 	mov.w	r0, #0
 8015c00:	f04f 0100 	mov.w	r1, #0
 8015c04:	da81      	bge.n	8015b0a <__ieee754_pow+0x3a>
 8015c06:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015c0a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8015c0e:	e77c      	b.n	8015b0a <__ieee754_pow+0x3a>
 8015c10:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8015c14:	d106      	bne.n	8015c24 <__ieee754_pow+0x154>
 8015c16:	4632      	mov	r2, r6
 8015c18:	463b      	mov	r3, r7
 8015c1a:	4630      	mov	r0, r6
 8015c1c:	4639      	mov	r1, r7
 8015c1e:	f7ea fd13 	bl	8000648 <__aeabi_dmul>
 8015c22:	e772      	b.n	8015b0a <__ieee754_pow+0x3a>
 8015c24:	4a51      	ldr	r2, [pc, #324]	@ (8015d6c <__ieee754_pow+0x29c>)
 8015c26:	4591      	cmp	r9, r2
 8015c28:	d109      	bne.n	8015c3e <__ieee754_pow+0x16e>
 8015c2a:	2d00      	cmp	r5, #0
 8015c2c:	db07      	blt.n	8015c3e <__ieee754_pow+0x16e>
 8015c2e:	ec47 6b10 	vmov	d0, r6, r7
 8015c32:	b011      	add	sp, #68	@ 0x44
 8015c34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c38:	f000 bd50 	b.w	80166dc <__ieee754_sqrt>
 8015c3c:	2400      	movs	r4, #0
 8015c3e:	ec47 6b10 	vmov	d0, r6, r7
 8015c42:	9302      	str	r3, [sp, #8]
 8015c44:	f000 fcc4 	bl	80165d0 <fabs>
 8015c48:	9b02      	ldr	r3, [sp, #8]
 8015c4a:	ec51 0b10 	vmov	r0, r1, d0
 8015c4e:	bb53      	cbnz	r3, 8015ca6 <__ieee754_pow+0x1d6>
 8015c50:	4b44      	ldr	r3, [pc, #272]	@ (8015d64 <__ieee754_pow+0x294>)
 8015c52:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8015c56:	429a      	cmp	r2, r3
 8015c58:	d002      	beq.n	8015c60 <__ieee754_pow+0x190>
 8015c5a:	f1b8 0f00 	cmp.w	r8, #0
 8015c5e:	d122      	bne.n	8015ca6 <__ieee754_pow+0x1d6>
 8015c60:	f1b9 0f00 	cmp.w	r9, #0
 8015c64:	da05      	bge.n	8015c72 <__ieee754_pow+0x1a2>
 8015c66:	4602      	mov	r2, r0
 8015c68:	460b      	mov	r3, r1
 8015c6a:	2000      	movs	r0, #0
 8015c6c:	493d      	ldr	r1, [pc, #244]	@ (8015d64 <__ieee754_pow+0x294>)
 8015c6e:	f7ea fe15 	bl	800089c <__aeabi_ddiv>
 8015c72:	2d00      	cmp	r5, #0
 8015c74:	f6bf af49 	bge.w	8015b0a <__ieee754_pow+0x3a>
 8015c78:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8015c7c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8015c80:	ea58 0804 	orrs.w	r8, r8, r4
 8015c84:	d108      	bne.n	8015c98 <__ieee754_pow+0x1c8>
 8015c86:	4602      	mov	r2, r0
 8015c88:	460b      	mov	r3, r1
 8015c8a:	4610      	mov	r0, r2
 8015c8c:	4619      	mov	r1, r3
 8015c8e:	f7ea fb23 	bl	80002d8 <__aeabi_dsub>
 8015c92:	4602      	mov	r2, r0
 8015c94:	460b      	mov	r3, r1
 8015c96:	e794      	b.n	8015bc2 <__ieee754_pow+0xf2>
 8015c98:	2c01      	cmp	r4, #1
 8015c9a:	f47f af36 	bne.w	8015b0a <__ieee754_pow+0x3a>
 8015c9e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015ca2:	4619      	mov	r1, r3
 8015ca4:	e731      	b.n	8015b0a <__ieee754_pow+0x3a>
 8015ca6:	0feb      	lsrs	r3, r5, #31
 8015ca8:	3b01      	subs	r3, #1
 8015caa:	ea53 0204 	orrs.w	r2, r3, r4
 8015cae:	d102      	bne.n	8015cb6 <__ieee754_pow+0x1e6>
 8015cb0:	4632      	mov	r2, r6
 8015cb2:	463b      	mov	r3, r7
 8015cb4:	e7e9      	b.n	8015c8a <__ieee754_pow+0x1ba>
 8015cb6:	3c01      	subs	r4, #1
 8015cb8:	431c      	orrs	r4, r3
 8015cba:	d016      	beq.n	8015cea <__ieee754_pow+0x21a>
 8015cbc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8015d48 <__ieee754_pow+0x278>
 8015cc0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8015cc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015cc8:	f240 8112 	bls.w	8015ef0 <__ieee754_pow+0x420>
 8015ccc:	4b28      	ldr	r3, [pc, #160]	@ (8015d70 <__ieee754_pow+0x2a0>)
 8015cce:	459a      	cmp	sl, r3
 8015cd0:	4b25      	ldr	r3, [pc, #148]	@ (8015d68 <__ieee754_pow+0x298>)
 8015cd2:	d916      	bls.n	8015d02 <__ieee754_pow+0x232>
 8015cd4:	4598      	cmp	r8, r3
 8015cd6:	d80b      	bhi.n	8015cf0 <__ieee754_pow+0x220>
 8015cd8:	f1b9 0f00 	cmp.w	r9, #0
 8015cdc:	da0b      	bge.n	8015cf6 <__ieee754_pow+0x226>
 8015cde:	2000      	movs	r0, #0
 8015ce0:	b011      	add	sp, #68	@ 0x44
 8015ce2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ce6:	f000 bc6b 	b.w	80165c0 <__math_oflow>
 8015cea:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8015d50 <__ieee754_pow+0x280>
 8015cee:	e7e7      	b.n	8015cc0 <__ieee754_pow+0x1f0>
 8015cf0:	f1b9 0f00 	cmp.w	r9, #0
 8015cf4:	dcf3      	bgt.n	8015cde <__ieee754_pow+0x20e>
 8015cf6:	2000      	movs	r0, #0
 8015cf8:	b011      	add	sp, #68	@ 0x44
 8015cfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cfe:	f000 bc57 	b.w	80165b0 <__math_uflow>
 8015d02:	4598      	cmp	r8, r3
 8015d04:	d20c      	bcs.n	8015d20 <__ieee754_pow+0x250>
 8015d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015d0a:	2200      	movs	r2, #0
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	f7ea ff0d 	bl	8000b2c <__aeabi_dcmplt>
 8015d12:	3800      	subs	r0, #0
 8015d14:	bf18      	it	ne
 8015d16:	2001      	movne	r0, #1
 8015d18:	f1b9 0f00 	cmp.w	r9, #0
 8015d1c:	daec      	bge.n	8015cf8 <__ieee754_pow+0x228>
 8015d1e:	e7df      	b.n	8015ce0 <__ieee754_pow+0x210>
 8015d20:	4b10      	ldr	r3, [pc, #64]	@ (8015d64 <__ieee754_pow+0x294>)
 8015d22:	4598      	cmp	r8, r3
 8015d24:	f04f 0200 	mov.w	r2, #0
 8015d28:	d924      	bls.n	8015d74 <__ieee754_pow+0x2a4>
 8015d2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015d2e:	2300      	movs	r3, #0
 8015d30:	f7ea fefc 	bl	8000b2c <__aeabi_dcmplt>
 8015d34:	3800      	subs	r0, #0
 8015d36:	bf18      	it	ne
 8015d38:	2001      	movne	r0, #1
 8015d3a:	f1b9 0f00 	cmp.w	r9, #0
 8015d3e:	dccf      	bgt.n	8015ce0 <__ieee754_pow+0x210>
 8015d40:	e7da      	b.n	8015cf8 <__ieee754_pow+0x228>
 8015d42:	bf00      	nop
 8015d44:	f3af 8000 	nop.w
 8015d48:	00000000 	.word	0x00000000
 8015d4c:	3ff00000 	.word	0x3ff00000
 8015d50:	00000000 	.word	0x00000000
 8015d54:	bff00000 	.word	0xbff00000
 8015d58:	fff00000 	.word	0xfff00000
 8015d5c:	7ff00000 	.word	0x7ff00000
 8015d60:	433fffff 	.word	0x433fffff
 8015d64:	3ff00000 	.word	0x3ff00000
 8015d68:	3fefffff 	.word	0x3fefffff
 8015d6c:	3fe00000 	.word	0x3fe00000
 8015d70:	43f00000 	.word	0x43f00000
 8015d74:	4b5a      	ldr	r3, [pc, #360]	@ (8015ee0 <__ieee754_pow+0x410>)
 8015d76:	f7ea faaf 	bl	80002d8 <__aeabi_dsub>
 8015d7a:	a351      	add	r3, pc, #324	@ (adr r3, 8015ec0 <__ieee754_pow+0x3f0>)
 8015d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d80:	4604      	mov	r4, r0
 8015d82:	460d      	mov	r5, r1
 8015d84:	f7ea fc60 	bl	8000648 <__aeabi_dmul>
 8015d88:	a34f      	add	r3, pc, #316	@ (adr r3, 8015ec8 <__ieee754_pow+0x3f8>)
 8015d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d8e:	4606      	mov	r6, r0
 8015d90:	460f      	mov	r7, r1
 8015d92:	4620      	mov	r0, r4
 8015d94:	4629      	mov	r1, r5
 8015d96:	f7ea fc57 	bl	8000648 <__aeabi_dmul>
 8015d9a:	4b52      	ldr	r3, [pc, #328]	@ (8015ee4 <__ieee754_pow+0x414>)
 8015d9c:	4682      	mov	sl, r0
 8015d9e:	468b      	mov	fp, r1
 8015da0:	2200      	movs	r2, #0
 8015da2:	4620      	mov	r0, r4
 8015da4:	4629      	mov	r1, r5
 8015da6:	f7ea fc4f 	bl	8000648 <__aeabi_dmul>
 8015daa:	4602      	mov	r2, r0
 8015dac:	460b      	mov	r3, r1
 8015dae:	a148      	add	r1, pc, #288	@ (adr r1, 8015ed0 <__ieee754_pow+0x400>)
 8015db0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015db4:	f7ea fa90 	bl	80002d8 <__aeabi_dsub>
 8015db8:	4622      	mov	r2, r4
 8015dba:	462b      	mov	r3, r5
 8015dbc:	f7ea fc44 	bl	8000648 <__aeabi_dmul>
 8015dc0:	4602      	mov	r2, r0
 8015dc2:	460b      	mov	r3, r1
 8015dc4:	2000      	movs	r0, #0
 8015dc6:	4948      	ldr	r1, [pc, #288]	@ (8015ee8 <__ieee754_pow+0x418>)
 8015dc8:	f7ea fa86 	bl	80002d8 <__aeabi_dsub>
 8015dcc:	4622      	mov	r2, r4
 8015dce:	4680      	mov	r8, r0
 8015dd0:	4689      	mov	r9, r1
 8015dd2:	462b      	mov	r3, r5
 8015dd4:	4620      	mov	r0, r4
 8015dd6:	4629      	mov	r1, r5
 8015dd8:	f7ea fc36 	bl	8000648 <__aeabi_dmul>
 8015ddc:	4602      	mov	r2, r0
 8015dde:	460b      	mov	r3, r1
 8015de0:	4640      	mov	r0, r8
 8015de2:	4649      	mov	r1, r9
 8015de4:	f7ea fc30 	bl	8000648 <__aeabi_dmul>
 8015de8:	a33b      	add	r3, pc, #236	@ (adr r3, 8015ed8 <__ieee754_pow+0x408>)
 8015dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dee:	f7ea fc2b 	bl	8000648 <__aeabi_dmul>
 8015df2:	4602      	mov	r2, r0
 8015df4:	460b      	mov	r3, r1
 8015df6:	4650      	mov	r0, sl
 8015df8:	4659      	mov	r1, fp
 8015dfa:	f7ea fa6d 	bl	80002d8 <__aeabi_dsub>
 8015dfe:	4602      	mov	r2, r0
 8015e00:	460b      	mov	r3, r1
 8015e02:	4680      	mov	r8, r0
 8015e04:	4689      	mov	r9, r1
 8015e06:	4630      	mov	r0, r6
 8015e08:	4639      	mov	r1, r7
 8015e0a:	f7ea fa67 	bl	80002dc <__adddf3>
 8015e0e:	2400      	movs	r4, #0
 8015e10:	4632      	mov	r2, r6
 8015e12:	463b      	mov	r3, r7
 8015e14:	4620      	mov	r0, r4
 8015e16:	460d      	mov	r5, r1
 8015e18:	f7ea fa5e 	bl	80002d8 <__aeabi_dsub>
 8015e1c:	4602      	mov	r2, r0
 8015e1e:	460b      	mov	r3, r1
 8015e20:	4640      	mov	r0, r8
 8015e22:	4649      	mov	r1, r9
 8015e24:	f7ea fa58 	bl	80002d8 <__aeabi_dsub>
 8015e28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015e2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015e30:	2300      	movs	r3, #0
 8015e32:	9304      	str	r3, [sp, #16]
 8015e34:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8015e38:	4606      	mov	r6, r0
 8015e3a:	460f      	mov	r7, r1
 8015e3c:	4652      	mov	r2, sl
 8015e3e:	465b      	mov	r3, fp
 8015e40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015e44:	f7ea fa48 	bl	80002d8 <__aeabi_dsub>
 8015e48:	4622      	mov	r2, r4
 8015e4a:	462b      	mov	r3, r5
 8015e4c:	f7ea fbfc 	bl	8000648 <__aeabi_dmul>
 8015e50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015e54:	4680      	mov	r8, r0
 8015e56:	4689      	mov	r9, r1
 8015e58:	4630      	mov	r0, r6
 8015e5a:	4639      	mov	r1, r7
 8015e5c:	f7ea fbf4 	bl	8000648 <__aeabi_dmul>
 8015e60:	4602      	mov	r2, r0
 8015e62:	460b      	mov	r3, r1
 8015e64:	4640      	mov	r0, r8
 8015e66:	4649      	mov	r1, r9
 8015e68:	f7ea fa38 	bl	80002dc <__adddf3>
 8015e6c:	4652      	mov	r2, sl
 8015e6e:	465b      	mov	r3, fp
 8015e70:	4606      	mov	r6, r0
 8015e72:	460f      	mov	r7, r1
 8015e74:	4620      	mov	r0, r4
 8015e76:	4629      	mov	r1, r5
 8015e78:	f7ea fbe6 	bl	8000648 <__aeabi_dmul>
 8015e7c:	460b      	mov	r3, r1
 8015e7e:	4602      	mov	r2, r0
 8015e80:	4680      	mov	r8, r0
 8015e82:	4689      	mov	r9, r1
 8015e84:	4630      	mov	r0, r6
 8015e86:	4639      	mov	r1, r7
 8015e88:	f7ea fa28 	bl	80002dc <__adddf3>
 8015e8c:	4b17      	ldr	r3, [pc, #92]	@ (8015eec <__ieee754_pow+0x41c>)
 8015e8e:	4299      	cmp	r1, r3
 8015e90:	4604      	mov	r4, r0
 8015e92:	460d      	mov	r5, r1
 8015e94:	468a      	mov	sl, r1
 8015e96:	468b      	mov	fp, r1
 8015e98:	f340 82ef 	ble.w	801647a <__ieee754_pow+0x9aa>
 8015e9c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8015ea0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8015ea4:	4303      	orrs	r3, r0
 8015ea6:	f000 81e8 	beq.w	801627a <__ieee754_pow+0x7aa>
 8015eaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015eae:	2200      	movs	r2, #0
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	f7ea fe3b 	bl	8000b2c <__aeabi_dcmplt>
 8015eb6:	3800      	subs	r0, #0
 8015eb8:	bf18      	it	ne
 8015eba:	2001      	movne	r0, #1
 8015ebc:	e710      	b.n	8015ce0 <__ieee754_pow+0x210>
 8015ebe:	bf00      	nop
 8015ec0:	60000000 	.word	0x60000000
 8015ec4:	3ff71547 	.word	0x3ff71547
 8015ec8:	f85ddf44 	.word	0xf85ddf44
 8015ecc:	3e54ae0b 	.word	0x3e54ae0b
 8015ed0:	55555555 	.word	0x55555555
 8015ed4:	3fd55555 	.word	0x3fd55555
 8015ed8:	652b82fe 	.word	0x652b82fe
 8015edc:	3ff71547 	.word	0x3ff71547
 8015ee0:	3ff00000 	.word	0x3ff00000
 8015ee4:	3fd00000 	.word	0x3fd00000
 8015ee8:	3fe00000 	.word	0x3fe00000
 8015eec:	408fffff 	.word	0x408fffff
 8015ef0:	4bd5      	ldr	r3, [pc, #852]	@ (8016248 <__ieee754_pow+0x778>)
 8015ef2:	402b      	ands	r3, r5
 8015ef4:	2200      	movs	r2, #0
 8015ef6:	b92b      	cbnz	r3, 8015f04 <__ieee754_pow+0x434>
 8015ef8:	4bd4      	ldr	r3, [pc, #848]	@ (801624c <__ieee754_pow+0x77c>)
 8015efa:	f7ea fba5 	bl	8000648 <__aeabi_dmul>
 8015efe:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8015f02:	468b      	mov	fp, r1
 8015f04:	ea4f 532b 	mov.w	r3, fp, asr #20
 8015f08:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8015f0c:	4413      	add	r3, r2
 8015f0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015f10:	4bcf      	ldr	r3, [pc, #828]	@ (8016250 <__ieee754_pow+0x780>)
 8015f12:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8015f16:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8015f1a:	459b      	cmp	fp, r3
 8015f1c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8015f20:	dd08      	ble.n	8015f34 <__ieee754_pow+0x464>
 8015f22:	4bcc      	ldr	r3, [pc, #816]	@ (8016254 <__ieee754_pow+0x784>)
 8015f24:	459b      	cmp	fp, r3
 8015f26:	f340 81a5 	ble.w	8016274 <__ieee754_pow+0x7a4>
 8015f2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015f2c:	3301      	adds	r3, #1
 8015f2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015f30:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8015f34:	f04f 0a00 	mov.w	sl, #0
 8015f38:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8015f3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015f3e:	4bc6      	ldr	r3, [pc, #792]	@ (8016258 <__ieee754_pow+0x788>)
 8015f40:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015f44:	ed93 7b00 	vldr	d7, [r3]
 8015f48:	4629      	mov	r1, r5
 8015f4a:	ec53 2b17 	vmov	r2, r3, d7
 8015f4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015f52:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015f56:	f7ea f9bf 	bl	80002d8 <__aeabi_dsub>
 8015f5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015f5e:	4606      	mov	r6, r0
 8015f60:	460f      	mov	r7, r1
 8015f62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015f66:	f7ea f9b9 	bl	80002dc <__adddf3>
 8015f6a:	4602      	mov	r2, r0
 8015f6c:	460b      	mov	r3, r1
 8015f6e:	2000      	movs	r0, #0
 8015f70:	49ba      	ldr	r1, [pc, #744]	@ (801625c <__ieee754_pow+0x78c>)
 8015f72:	f7ea fc93 	bl	800089c <__aeabi_ddiv>
 8015f76:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8015f7a:	4602      	mov	r2, r0
 8015f7c:	460b      	mov	r3, r1
 8015f7e:	4630      	mov	r0, r6
 8015f80:	4639      	mov	r1, r7
 8015f82:	f7ea fb61 	bl	8000648 <__aeabi_dmul>
 8015f86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015f8a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8015f8e:	106d      	asrs	r5, r5, #1
 8015f90:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8015f94:	f04f 0b00 	mov.w	fp, #0
 8015f98:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8015f9c:	4661      	mov	r1, ip
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8015fa4:	4658      	mov	r0, fp
 8015fa6:	46e1      	mov	r9, ip
 8015fa8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8015fac:	4614      	mov	r4, r2
 8015fae:	461d      	mov	r5, r3
 8015fb0:	f7ea fb4a 	bl	8000648 <__aeabi_dmul>
 8015fb4:	4602      	mov	r2, r0
 8015fb6:	460b      	mov	r3, r1
 8015fb8:	4630      	mov	r0, r6
 8015fba:	4639      	mov	r1, r7
 8015fbc:	f7ea f98c 	bl	80002d8 <__aeabi_dsub>
 8015fc0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015fc4:	4606      	mov	r6, r0
 8015fc6:	460f      	mov	r7, r1
 8015fc8:	4620      	mov	r0, r4
 8015fca:	4629      	mov	r1, r5
 8015fcc:	f7ea f984 	bl	80002d8 <__aeabi_dsub>
 8015fd0:	4602      	mov	r2, r0
 8015fd2:	460b      	mov	r3, r1
 8015fd4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015fd8:	f7ea f97e 	bl	80002d8 <__aeabi_dsub>
 8015fdc:	465a      	mov	r2, fp
 8015fde:	464b      	mov	r3, r9
 8015fe0:	f7ea fb32 	bl	8000648 <__aeabi_dmul>
 8015fe4:	4602      	mov	r2, r0
 8015fe6:	460b      	mov	r3, r1
 8015fe8:	4630      	mov	r0, r6
 8015fea:	4639      	mov	r1, r7
 8015fec:	f7ea f974 	bl	80002d8 <__aeabi_dsub>
 8015ff0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8015ff4:	f7ea fb28 	bl	8000648 <__aeabi_dmul>
 8015ff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015ffc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016000:	4610      	mov	r0, r2
 8016002:	4619      	mov	r1, r3
 8016004:	f7ea fb20 	bl	8000648 <__aeabi_dmul>
 8016008:	a37d      	add	r3, pc, #500	@ (adr r3, 8016200 <__ieee754_pow+0x730>)
 801600a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801600e:	4604      	mov	r4, r0
 8016010:	460d      	mov	r5, r1
 8016012:	f7ea fb19 	bl	8000648 <__aeabi_dmul>
 8016016:	a37c      	add	r3, pc, #496	@ (adr r3, 8016208 <__ieee754_pow+0x738>)
 8016018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801601c:	f7ea f95e 	bl	80002dc <__adddf3>
 8016020:	4622      	mov	r2, r4
 8016022:	462b      	mov	r3, r5
 8016024:	f7ea fb10 	bl	8000648 <__aeabi_dmul>
 8016028:	a379      	add	r3, pc, #484	@ (adr r3, 8016210 <__ieee754_pow+0x740>)
 801602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801602e:	f7ea f955 	bl	80002dc <__adddf3>
 8016032:	4622      	mov	r2, r4
 8016034:	462b      	mov	r3, r5
 8016036:	f7ea fb07 	bl	8000648 <__aeabi_dmul>
 801603a:	a377      	add	r3, pc, #476	@ (adr r3, 8016218 <__ieee754_pow+0x748>)
 801603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016040:	f7ea f94c 	bl	80002dc <__adddf3>
 8016044:	4622      	mov	r2, r4
 8016046:	462b      	mov	r3, r5
 8016048:	f7ea fafe 	bl	8000648 <__aeabi_dmul>
 801604c:	a374      	add	r3, pc, #464	@ (adr r3, 8016220 <__ieee754_pow+0x750>)
 801604e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016052:	f7ea f943 	bl	80002dc <__adddf3>
 8016056:	4622      	mov	r2, r4
 8016058:	462b      	mov	r3, r5
 801605a:	f7ea faf5 	bl	8000648 <__aeabi_dmul>
 801605e:	a372      	add	r3, pc, #456	@ (adr r3, 8016228 <__ieee754_pow+0x758>)
 8016060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016064:	f7ea f93a 	bl	80002dc <__adddf3>
 8016068:	4622      	mov	r2, r4
 801606a:	4606      	mov	r6, r0
 801606c:	460f      	mov	r7, r1
 801606e:	462b      	mov	r3, r5
 8016070:	4620      	mov	r0, r4
 8016072:	4629      	mov	r1, r5
 8016074:	f7ea fae8 	bl	8000648 <__aeabi_dmul>
 8016078:	4602      	mov	r2, r0
 801607a:	460b      	mov	r3, r1
 801607c:	4630      	mov	r0, r6
 801607e:	4639      	mov	r1, r7
 8016080:	f7ea fae2 	bl	8000648 <__aeabi_dmul>
 8016084:	465a      	mov	r2, fp
 8016086:	4604      	mov	r4, r0
 8016088:	460d      	mov	r5, r1
 801608a:	464b      	mov	r3, r9
 801608c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016090:	f7ea f924 	bl	80002dc <__adddf3>
 8016094:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016098:	f7ea fad6 	bl	8000648 <__aeabi_dmul>
 801609c:	4622      	mov	r2, r4
 801609e:	462b      	mov	r3, r5
 80160a0:	f7ea f91c 	bl	80002dc <__adddf3>
 80160a4:	465a      	mov	r2, fp
 80160a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80160aa:	464b      	mov	r3, r9
 80160ac:	4658      	mov	r0, fp
 80160ae:	4649      	mov	r1, r9
 80160b0:	f7ea faca 	bl	8000648 <__aeabi_dmul>
 80160b4:	4b6a      	ldr	r3, [pc, #424]	@ (8016260 <__ieee754_pow+0x790>)
 80160b6:	2200      	movs	r2, #0
 80160b8:	4606      	mov	r6, r0
 80160ba:	460f      	mov	r7, r1
 80160bc:	f7ea f90e 	bl	80002dc <__adddf3>
 80160c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80160c4:	f7ea f90a 	bl	80002dc <__adddf3>
 80160c8:	46d8      	mov	r8, fp
 80160ca:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80160ce:	460d      	mov	r5, r1
 80160d0:	465a      	mov	r2, fp
 80160d2:	460b      	mov	r3, r1
 80160d4:	4640      	mov	r0, r8
 80160d6:	4649      	mov	r1, r9
 80160d8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80160dc:	f7ea fab4 	bl	8000648 <__aeabi_dmul>
 80160e0:	465c      	mov	r4, fp
 80160e2:	4680      	mov	r8, r0
 80160e4:	4689      	mov	r9, r1
 80160e6:	4b5e      	ldr	r3, [pc, #376]	@ (8016260 <__ieee754_pow+0x790>)
 80160e8:	2200      	movs	r2, #0
 80160ea:	4620      	mov	r0, r4
 80160ec:	4629      	mov	r1, r5
 80160ee:	f7ea f8f3 	bl	80002d8 <__aeabi_dsub>
 80160f2:	4632      	mov	r2, r6
 80160f4:	463b      	mov	r3, r7
 80160f6:	f7ea f8ef 	bl	80002d8 <__aeabi_dsub>
 80160fa:	4602      	mov	r2, r0
 80160fc:	460b      	mov	r3, r1
 80160fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016102:	f7ea f8e9 	bl	80002d8 <__aeabi_dsub>
 8016106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801610a:	f7ea fa9d 	bl	8000648 <__aeabi_dmul>
 801610e:	4622      	mov	r2, r4
 8016110:	4606      	mov	r6, r0
 8016112:	460f      	mov	r7, r1
 8016114:	462b      	mov	r3, r5
 8016116:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801611a:	f7ea fa95 	bl	8000648 <__aeabi_dmul>
 801611e:	4602      	mov	r2, r0
 8016120:	460b      	mov	r3, r1
 8016122:	4630      	mov	r0, r6
 8016124:	4639      	mov	r1, r7
 8016126:	f7ea f8d9 	bl	80002dc <__adddf3>
 801612a:	4606      	mov	r6, r0
 801612c:	460f      	mov	r7, r1
 801612e:	4602      	mov	r2, r0
 8016130:	460b      	mov	r3, r1
 8016132:	4640      	mov	r0, r8
 8016134:	4649      	mov	r1, r9
 8016136:	f7ea f8d1 	bl	80002dc <__adddf3>
 801613a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801613e:	a33c      	add	r3, pc, #240	@ (adr r3, 8016230 <__ieee754_pow+0x760>)
 8016140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016144:	4658      	mov	r0, fp
 8016146:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801614a:	460d      	mov	r5, r1
 801614c:	f7ea fa7c 	bl	8000648 <__aeabi_dmul>
 8016150:	465c      	mov	r4, fp
 8016152:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016156:	4642      	mov	r2, r8
 8016158:	464b      	mov	r3, r9
 801615a:	4620      	mov	r0, r4
 801615c:	4629      	mov	r1, r5
 801615e:	f7ea f8bb 	bl	80002d8 <__aeabi_dsub>
 8016162:	4602      	mov	r2, r0
 8016164:	460b      	mov	r3, r1
 8016166:	4630      	mov	r0, r6
 8016168:	4639      	mov	r1, r7
 801616a:	f7ea f8b5 	bl	80002d8 <__aeabi_dsub>
 801616e:	a332      	add	r3, pc, #200	@ (adr r3, 8016238 <__ieee754_pow+0x768>)
 8016170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016174:	f7ea fa68 	bl	8000648 <__aeabi_dmul>
 8016178:	a331      	add	r3, pc, #196	@ (adr r3, 8016240 <__ieee754_pow+0x770>)
 801617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801617e:	4606      	mov	r6, r0
 8016180:	460f      	mov	r7, r1
 8016182:	4620      	mov	r0, r4
 8016184:	4629      	mov	r1, r5
 8016186:	f7ea fa5f 	bl	8000648 <__aeabi_dmul>
 801618a:	4602      	mov	r2, r0
 801618c:	460b      	mov	r3, r1
 801618e:	4630      	mov	r0, r6
 8016190:	4639      	mov	r1, r7
 8016192:	f7ea f8a3 	bl	80002dc <__adddf3>
 8016196:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016198:	4b32      	ldr	r3, [pc, #200]	@ (8016264 <__ieee754_pow+0x794>)
 801619a:	4413      	add	r3, r2
 801619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161a0:	f7ea f89c 	bl	80002dc <__adddf3>
 80161a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80161a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80161aa:	f7ea f9e3 	bl	8000574 <__aeabi_i2d>
 80161ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80161b0:	4b2d      	ldr	r3, [pc, #180]	@ (8016268 <__ieee754_pow+0x798>)
 80161b2:	4413      	add	r3, r2
 80161b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80161b8:	4606      	mov	r6, r0
 80161ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80161be:	460f      	mov	r7, r1
 80161c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80161c4:	f7ea f88a 	bl	80002dc <__adddf3>
 80161c8:	4642      	mov	r2, r8
 80161ca:	464b      	mov	r3, r9
 80161cc:	f7ea f886 	bl	80002dc <__adddf3>
 80161d0:	4632      	mov	r2, r6
 80161d2:	463b      	mov	r3, r7
 80161d4:	f7ea f882 	bl	80002dc <__adddf3>
 80161d8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80161dc:	4632      	mov	r2, r6
 80161de:	463b      	mov	r3, r7
 80161e0:	4658      	mov	r0, fp
 80161e2:	460d      	mov	r5, r1
 80161e4:	f7ea f878 	bl	80002d8 <__aeabi_dsub>
 80161e8:	4642      	mov	r2, r8
 80161ea:	464b      	mov	r3, r9
 80161ec:	f7ea f874 	bl	80002d8 <__aeabi_dsub>
 80161f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80161f4:	f7ea f870 	bl	80002d8 <__aeabi_dsub>
 80161f8:	465c      	mov	r4, fp
 80161fa:	4602      	mov	r2, r0
 80161fc:	e036      	b.n	801626c <__ieee754_pow+0x79c>
 80161fe:	bf00      	nop
 8016200:	4a454eef 	.word	0x4a454eef
 8016204:	3fca7e28 	.word	0x3fca7e28
 8016208:	93c9db65 	.word	0x93c9db65
 801620c:	3fcd864a 	.word	0x3fcd864a
 8016210:	a91d4101 	.word	0xa91d4101
 8016214:	3fd17460 	.word	0x3fd17460
 8016218:	518f264d 	.word	0x518f264d
 801621c:	3fd55555 	.word	0x3fd55555
 8016220:	db6fabff 	.word	0xdb6fabff
 8016224:	3fdb6db6 	.word	0x3fdb6db6
 8016228:	33333303 	.word	0x33333303
 801622c:	3fe33333 	.word	0x3fe33333
 8016230:	e0000000 	.word	0xe0000000
 8016234:	3feec709 	.word	0x3feec709
 8016238:	dc3a03fd 	.word	0xdc3a03fd
 801623c:	3feec709 	.word	0x3feec709
 8016240:	145b01f5 	.word	0x145b01f5
 8016244:	be3e2fe0 	.word	0xbe3e2fe0
 8016248:	7ff00000 	.word	0x7ff00000
 801624c:	43400000 	.word	0x43400000
 8016250:	0003988e 	.word	0x0003988e
 8016254:	000bb679 	.word	0x000bb679
 8016258:	08016f88 	.word	0x08016f88
 801625c:	3ff00000 	.word	0x3ff00000
 8016260:	40080000 	.word	0x40080000
 8016264:	08016f68 	.word	0x08016f68
 8016268:	08016f78 	.word	0x08016f78
 801626c:	460b      	mov	r3, r1
 801626e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016272:	e5d7      	b.n	8015e24 <__ieee754_pow+0x354>
 8016274:	f04f 0a01 	mov.w	sl, #1
 8016278:	e65e      	b.n	8015f38 <__ieee754_pow+0x468>
 801627a:	a3b4      	add	r3, pc, #720	@ (adr r3, 801654c <__ieee754_pow+0xa7c>)
 801627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016280:	4630      	mov	r0, r6
 8016282:	4639      	mov	r1, r7
 8016284:	f7ea f82a 	bl	80002dc <__adddf3>
 8016288:	4642      	mov	r2, r8
 801628a:	e9cd 0100 	strd	r0, r1, [sp]
 801628e:	464b      	mov	r3, r9
 8016290:	4620      	mov	r0, r4
 8016292:	4629      	mov	r1, r5
 8016294:	f7ea f820 	bl	80002d8 <__aeabi_dsub>
 8016298:	4602      	mov	r2, r0
 801629a:	460b      	mov	r3, r1
 801629c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80162a0:	f7ea fc62 	bl	8000b68 <__aeabi_dcmpgt>
 80162a4:	2800      	cmp	r0, #0
 80162a6:	f47f ae00 	bne.w	8015eaa <__ieee754_pow+0x3da>
 80162aa:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80162ae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80162b2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80162b6:	fa43 fa0a 	asr.w	sl, r3, sl
 80162ba:	44da      	add	sl, fp
 80162bc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80162c0:	489d      	ldr	r0, [pc, #628]	@ (8016538 <__ieee754_pow+0xa68>)
 80162c2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80162c6:	4108      	asrs	r0, r1
 80162c8:	ea00 030a 	and.w	r3, r0, sl
 80162cc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80162d0:	f1c1 0114 	rsb	r1, r1, #20
 80162d4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80162d8:	fa4a fa01 	asr.w	sl, sl, r1
 80162dc:	f1bb 0f00 	cmp.w	fp, #0
 80162e0:	4640      	mov	r0, r8
 80162e2:	4649      	mov	r1, r9
 80162e4:	f04f 0200 	mov.w	r2, #0
 80162e8:	bfb8      	it	lt
 80162ea:	f1ca 0a00 	rsblt	sl, sl, #0
 80162ee:	f7e9 fff3 	bl	80002d8 <__aeabi_dsub>
 80162f2:	4680      	mov	r8, r0
 80162f4:	4689      	mov	r9, r1
 80162f6:	4632      	mov	r2, r6
 80162f8:	463b      	mov	r3, r7
 80162fa:	4640      	mov	r0, r8
 80162fc:	4649      	mov	r1, r9
 80162fe:	f7e9 ffed 	bl	80002dc <__adddf3>
 8016302:	2400      	movs	r4, #0
 8016304:	a37c      	add	r3, pc, #496	@ (adr r3, 80164f8 <__ieee754_pow+0xa28>)
 8016306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801630a:	4620      	mov	r0, r4
 801630c:	460d      	mov	r5, r1
 801630e:	f7ea f99b 	bl	8000648 <__aeabi_dmul>
 8016312:	4642      	mov	r2, r8
 8016314:	e9cd 0100 	strd	r0, r1, [sp]
 8016318:	464b      	mov	r3, r9
 801631a:	4620      	mov	r0, r4
 801631c:	4629      	mov	r1, r5
 801631e:	f7e9 ffdb 	bl	80002d8 <__aeabi_dsub>
 8016322:	4602      	mov	r2, r0
 8016324:	460b      	mov	r3, r1
 8016326:	4630      	mov	r0, r6
 8016328:	4639      	mov	r1, r7
 801632a:	f7e9 ffd5 	bl	80002d8 <__aeabi_dsub>
 801632e:	a374      	add	r3, pc, #464	@ (adr r3, 8016500 <__ieee754_pow+0xa30>)
 8016330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016334:	f7ea f988 	bl	8000648 <__aeabi_dmul>
 8016338:	a373      	add	r3, pc, #460	@ (adr r3, 8016508 <__ieee754_pow+0xa38>)
 801633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801633e:	4680      	mov	r8, r0
 8016340:	4689      	mov	r9, r1
 8016342:	4620      	mov	r0, r4
 8016344:	4629      	mov	r1, r5
 8016346:	f7ea f97f 	bl	8000648 <__aeabi_dmul>
 801634a:	4602      	mov	r2, r0
 801634c:	460b      	mov	r3, r1
 801634e:	4640      	mov	r0, r8
 8016350:	4649      	mov	r1, r9
 8016352:	f7e9 ffc3 	bl	80002dc <__adddf3>
 8016356:	4604      	mov	r4, r0
 8016358:	460d      	mov	r5, r1
 801635a:	4602      	mov	r2, r0
 801635c:	460b      	mov	r3, r1
 801635e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016362:	f7e9 ffbb 	bl	80002dc <__adddf3>
 8016366:	e9dd 2300 	ldrd	r2, r3, [sp]
 801636a:	4680      	mov	r8, r0
 801636c:	4689      	mov	r9, r1
 801636e:	f7e9 ffb3 	bl	80002d8 <__aeabi_dsub>
 8016372:	4602      	mov	r2, r0
 8016374:	460b      	mov	r3, r1
 8016376:	4620      	mov	r0, r4
 8016378:	4629      	mov	r1, r5
 801637a:	f7e9 ffad 	bl	80002d8 <__aeabi_dsub>
 801637e:	4642      	mov	r2, r8
 8016380:	4606      	mov	r6, r0
 8016382:	460f      	mov	r7, r1
 8016384:	464b      	mov	r3, r9
 8016386:	4640      	mov	r0, r8
 8016388:	4649      	mov	r1, r9
 801638a:	f7ea f95d 	bl	8000648 <__aeabi_dmul>
 801638e:	a360      	add	r3, pc, #384	@ (adr r3, 8016510 <__ieee754_pow+0xa40>)
 8016390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016394:	4604      	mov	r4, r0
 8016396:	460d      	mov	r5, r1
 8016398:	f7ea f956 	bl	8000648 <__aeabi_dmul>
 801639c:	a35e      	add	r3, pc, #376	@ (adr r3, 8016518 <__ieee754_pow+0xa48>)
 801639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163a2:	f7e9 ff99 	bl	80002d8 <__aeabi_dsub>
 80163a6:	4622      	mov	r2, r4
 80163a8:	462b      	mov	r3, r5
 80163aa:	f7ea f94d 	bl	8000648 <__aeabi_dmul>
 80163ae:	a35c      	add	r3, pc, #368	@ (adr r3, 8016520 <__ieee754_pow+0xa50>)
 80163b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163b4:	f7e9 ff92 	bl	80002dc <__adddf3>
 80163b8:	4622      	mov	r2, r4
 80163ba:	462b      	mov	r3, r5
 80163bc:	f7ea f944 	bl	8000648 <__aeabi_dmul>
 80163c0:	a359      	add	r3, pc, #356	@ (adr r3, 8016528 <__ieee754_pow+0xa58>)
 80163c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163c6:	f7e9 ff87 	bl	80002d8 <__aeabi_dsub>
 80163ca:	4622      	mov	r2, r4
 80163cc:	462b      	mov	r3, r5
 80163ce:	f7ea f93b 	bl	8000648 <__aeabi_dmul>
 80163d2:	a357      	add	r3, pc, #348	@ (adr r3, 8016530 <__ieee754_pow+0xa60>)
 80163d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163d8:	f7e9 ff80 	bl	80002dc <__adddf3>
 80163dc:	4622      	mov	r2, r4
 80163de:	462b      	mov	r3, r5
 80163e0:	f7ea f932 	bl	8000648 <__aeabi_dmul>
 80163e4:	4602      	mov	r2, r0
 80163e6:	460b      	mov	r3, r1
 80163e8:	4640      	mov	r0, r8
 80163ea:	4649      	mov	r1, r9
 80163ec:	f7e9 ff74 	bl	80002d8 <__aeabi_dsub>
 80163f0:	4604      	mov	r4, r0
 80163f2:	460d      	mov	r5, r1
 80163f4:	4602      	mov	r2, r0
 80163f6:	460b      	mov	r3, r1
 80163f8:	4640      	mov	r0, r8
 80163fa:	4649      	mov	r1, r9
 80163fc:	f7ea f924 	bl	8000648 <__aeabi_dmul>
 8016400:	2200      	movs	r2, #0
 8016402:	e9cd 0100 	strd	r0, r1, [sp]
 8016406:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801640a:	4620      	mov	r0, r4
 801640c:	4629      	mov	r1, r5
 801640e:	f7e9 ff63 	bl	80002d8 <__aeabi_dsub>
 8016412:	4602      	mov	r2, r0
 8016414:	460b      	mov	r3, r1
 8016416:	e9dd 0100 	ldrd	r0, r1, [sp]
 801641a:	f7ea fa3f 	bl	800089c <__aeabi_ddiv>
 801641e:	4632      	mov	r2, r6
 8016420:	4604      	mov	r4, r0
 8016422:	460d      	mov	r5, r1
 8016424:	463b      	mov	r3, r7
 8016426:	4640      	mov	r0, r8
 8016428:	4649      	mov	r1, r9
 801642a:	f7ea f90d 	bl	8000648 <__aeabi_dmul>
 801642e:	4632      	mov	r2, r6
 8016430:	463b      	mov	r3, r7
 8016432:	f7e9 ff53 	bl	80002dc <__adddf3>
 8016436:	4602      	mov	r2, r0
 8016438:	460b      	mov	r3, r1
 801643a:	4620      	mov	r0, r4
 801643c:	4629      	mov	r1, r5
 801643e:	f7e9 ff4b 	bl	80002d8 <__aeabi_dsub>
 8016442:	4642      	mov	r2, r8
 8016444:	464b      	mov	r3, r9
 8016446:	f7e9 ff47 	bl	80002d8 <__aeabi_dsub>
 801644a:	460b      	mov	r3, r1
 801644c:	4602      	mov	r2, r0
 801644e:	493b      	ldr	r1, [pc, #236]	@ (801653c <__ieee754_pow+0xa6c>)
 8016450:	2000      	movs	r0, #0
 8016452:	f7e9 ff41 	bl	80002d8 <__aeabi_dsub>
 8016456:	ec41 0b10 	vmov	d0, r0, r1
 801645a:	ee10 3a90 	vmov	r3, s1
 801645e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8016462:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016466:	da30      	bge.n	80164ca <__ieee754_pow+0x9fa>
 8016468:	4650      	mov	r0, sl
 801646a:	f000 f8b9 	bl	80165e0 <scalbn>
 801646e:	ec51 0b10 	vmov	r0, r1, d0
 8016472:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016476:	f7ff bbd2 	b.w	8015c1e <__ieee754_pow+0x14e>
 801647a:	4c31      	ldr	r4, [pc, #196]	@ (8016540 <__ieee754_pow+0xa70>)
 801647c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8016480:	42a3      	cmp	r3, r4
 8016482:	d91a      	bls.n	80164ba <__ieee754_pow+0x9ea>
 8016484:	4b2f      	ldr	r3, [pc, #188]	@ (8016544 <__ieee754_pow+0xa74>)
 8016486:	440b      	add	r3, r1
 8016488:	4303      	orrs	r3, r0
 801648a:	d009      	beq.n	80164a0 <__ieee754_pow+0x9d0>
 801648c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016490:	2200      	movs	r2, #0
 8016492:	2300      	movs	r3, #0
 8016494:	f7ea fb4a 	bl	8000b2c <__aeabi_dcmplt>
 8016498:	3800      	subs	r0, #0
 801649a:	bf18      	it	ne
 801649c:	2001      	movne	r0, #1
 801649e:	e42b      	b.n	8015cf8 <__ieee754_pow+0x228>
 80164a0:	4642      	mov	r2, r8
 80164a2:	464b      	mov	r3, r9
 80164a4:	f7e9 ff18 	bl	80002d8 <__aeabi_dsub>
 80164a8:	4632      	mov	r2, r6
 80164aa:	463b      	mov	r3, r7
 80164ac:	f7ea fb52 	bl	8000b54 <__aeabi_dcmpge>
 80164b0:	2800      	cmp	r0, #0
 80164b2:	d1eb      	bne.n	801648c <__ieee754_pow+0x9bc>
 80164b4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8016554 <__ieee754_pow+0xa84>
 80164b8:	e6f7      	b.n	80162aa <__ieee754_pow+0x7da>
 80164ba:	469a      	mov	sl, r3
 80164bc:	4b22      	ldr	r3, [pc, #136]	@ (8016548 <__ieee754_pow+0xa78>)
 80164be:	459a      	cmp	sl, r3
 80164c0:	f63f aef3 	bhi.w	80162aa <__ieee754_pow+0x7da>
 80164c4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80164c8:	e715      	b.n	80162f6 <__ieee754_pow+0x826>
 80164ca:	ec51 0b10 	vmov	r0, r1, d0
 80164ce:	4619      	mov	r1, r3
 80164d0:	e7cf      	b.n	8016472 <__ieee754_pow+0x9a2>
 80164d2:	491a      	ldr	r1, [pc, #104]	@ (801653c <__ieee754_pow+0xa6c>)
 80164d4:	2000      	movs	r0, #0
 80164d6:	f7ff bb18 	b.w	8015b0a <__ieee754_pow+0x3a>
 80164da:	2000      	movs	r0, #0
 80164dc:	2100      	movs	r1, #0
 80164de:	f7ff bb14 	b.w	8015b0a <__ieee754_pow+0x3a>
 80164e2:	4630      	mov	r0, r6
 80164e4:	4639      	mov	r1, r7
 80164e6:	f7ff bb10 	b.w	8015b0a <__ieee754_pow+0x3a>
 80164ea:	460c      	mov	r4, r1
 80164ec:	f7ff bb5e 	b.w	8015bac <__ieee754_pow+0xdc>
 80164f0:	2400      	movs	r4, #0
 80164f2:	f7ff bb49 	b.w	8015b88 <__ieee754_pow+0xb8>
 80164f6:	bf00      	nop
 80164f8:	00000000 	.word	0x00000000
 80164fc:	3fe62e43 	.word	0x3fe62e43
 8016500:	fefa39ef 	.word	0xfefa39ef
 8016504:	3fe62e42 	.word	0x3fe62e42
 8016508:	0ca86c39 	.word	0x0ca86c39
 801650c:	be205c61 	.word	0xbe205c61
 8016510:	72bea4d0 	.word	0x72bea4d0
 8016514:	3e663769 	.word	0x3e663769
 8016518:	c5d26bf1 	.word	0xc5d26bf1
 801651c:	3ebbbd41 	.word	0x3ebbbd41
 8016520:	af25de2c 	.word	0xaf25de2c
 8016524:	3f11566a 	.word	0x3f11566a
 8016528:	16bebd93 	.word	0x16bebd93
 801652c:	3f66c16c 	.word	0x3f66c16c
 8016530:	5555553e 	.word	0x5555553e
 8016534:	3fc55555 	.word	0x3fc55555
 8016538:	fff00000 	.word	0xfff00000
 801653c:	3ff00000 	.word	0x3ff00000
 8016540:	4090cbff 	.word	0x4090cbff
 8016544:	3f6f3400 	.word	0x3f6f3400
 8016548:	3fe00000 	.word	0x3fe00000
 801654c:	652b82fe 	.word	0x652b82fe
 8016550:	3c971547 	.word	0x3c971547
 8016554:	4090cc00 	.word	0x4090cc00

08016558 <with_errno>:
 8016558:	b510      	push	{r4, lr}
 801655a:	ed2d 8b02 	vpush	{d8}
 801655e:	eeb0 8a40 	vmov.f32	s16, s0
 8016562:	eef0 8a60 	vmov.f32	s17, s1
 8016566:	4604      	mov	r4, r0
 8016568:	f7fd f9f8 	bl	801395c <__errno>
 801656c:	eeb0 0a48 	vmov.f32	s0, s16
 8016570:	eef0 0a68 	vmov.f32	s1, s17
 8016574:	ecbd 8b02 	vpop	{d8}
 8016578:	6004      	str	r4, [r0, #0]
 801657a:	bd10      	pop	{r4, pc}

0801657c <xflow>:
 801657c:	4603      	mov	r3, r0
 801657e:	b507      	push	{r0, r1, r2, lr}
 8016580:	ec51 0b10 	vmov	r0, r1, d0
 8016584:	b183      	cbz	r3, 80165a8 <xflow+0x2c>
 8016586:	4602      	mov	r2, r0
 8016588:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801658c:	e9cd 2300 	strd	r2, r3, [sp]
 8016590:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016594:	f7ea f858 	bl	8000648 <__aeabi_dmul>
 8016598:	ec41 0b10 	vmov	d0, r0, r1
 801659c:	2022      	movs	r0, #34	@ 0x22
 801659e:	b003      	add	sp, #12
 80165a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80165a4:	f7ff bfd8 	b.w	8016558 <with_errno>
 80165a8:	4602      	mov	r2, r0
 80165aa:	460b      	mov	r3, r1
 80165ac:	e7ee      	b.n	801658c <xflow+0x10>
	...

080165b0 <__math_uflow>:
 80165b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80165b8 <__math_uflow+0x8>
 80165b4:	f7ff bfe2 	b.w	801657c <xflow>
 80165b8:	00000000 	.word	0x00000000
 80165bc:	10000000 	.word	0x10000000

080165c0 <__math_oflow>:
 80165c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80165c8 <__math_oflow+0x8>
 80165c4:	f7ff bfda 	b.w	801657c <xflow>
 80165c8:	00000000 	.word	0x00000000
 80165cc:	70000000 	.word	0x70000000

080165d0 <fabs>:
 80165d0:	ec51 0b10 	vmov	r0, r1, d0
 80165d4:	4602      	mov	r2, r0
 80165d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80165da:	ec43 2b10 	vmov	d0, r2, r3
 80165de:	4770      	bx	lr

080165e0 <scalbn>:
 80165e0:	b570      	push	{r4, r5, r6, lr}
 80165e2:	ec55 4b10 	vmov	r4, r5, d0
 80165e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80165ea:	4606      	mov	r6, r0
 80165ec:	462b      	mov	r3, r5
 80165ee:	b991      	cbnz	r1, 8016616 <scalbn+0x36>
 80165f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80165f4:	4323      	orrs	r3, r4
 80165f6:	d03d      	beq.n	8016674 <scalbn+0x94>
 80165f8:	4b35      	ldr	r3, [pc, #212]	@ (80166d0 <scalbn+0xf0>)
 80165fa:	4620      	mov	r0, r4
 80165fc:	4629      	mov	r1, r5
 80165fe:	2200      	movs	r2, #0
 8016600:	f7ea f822 	bl	8000648 <__aeabi_dmul>
 8016604:	4b33      	ldr	r3, [pc, #204]	@ (80166d4 <scalbn+0xf4>)
 8016606:	429e      	cmp	r6, r3
 8016608:	4604      	mov	r4, r0
 801660a:	460d      	mov	r5, r1
 801660c:	da0f      	bge.n	801662e <scalbn+0x4e>
 801660e:	a328      	add	r3, pc, #160	@ (adr r3, 80166b0 <scalbn+0xd0>)
 8016610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016614:	e01e      	b.n	8016654 <scalbn+0x74>
 8016616:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801661a:	4291      	cmp	r1, r2
 801661c:	d10b      	bne.n	8016636 <scalbn+0x56>
 801661e:	4622      	mov	r2, r4
 8016620:	4620      	mov	r0, r4
 8016622:	4629      	mov	r1, r5
 8016624:	f7e9 fe5a 	bl	80002dc <__adddf3>
 8016628:	4604      	mov	r4, r0
 801662a:	460d      	mov	r5, r1
 801662c:	e022      	b.n	8016674 <scalbn+0x94>
 801662e:	460b      	mov	r3, r1
 8016630:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8016634:	3936      	subs	r1, #54	@ 0x36
 8016636:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801663a:	4296      	cmp	r6, r2
 801663c:	dd0d      	ble.n	801665a <scalbn+0x7a>
 801663e:	2d00      	cmp	r5, #0
 8016640:	a11d      	add	r1, pc, #116	@ (adr r1, 80166b8 <scalbn+0xd8>)
 8016642:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016646:	da02      	bge.n	801664e <scalbn+0x6e>
 8016648:	a11d      	add	r1, pc, #116	@ (adr r1, 80166c0 <scalbn+0xe0>)
 801664a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801664e:	a31a      	add	r3, pc, #104	@ (adr r3, 80166b8 <scalbn+0xd8>)
 8016650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016654:	f7e9 fff8 	bl	8000648 <__aeabi_dmul>
 8016658:	e7e6      	b.n	8016628 <scalbn+0x48>
 801665a:	1872      	adds	r2, r6, r1
 801665c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8016660:	428a      	cmp	r2, r1
 8016662:	dcec      	bgt.n	801663e <scalbn+0x5e>
 8016664:	2a00      	cmp	r2, #0
 8016666:	dd08      	ble.n	801667a <scalbn+0x9a>
 8016668:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801666c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8016670:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016674:	ec45 4b10 	vmov	d0, r4, r5
 8016678:	bd70      	pop	{r4, r5, r6, pc}
 801667a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801667e:	da08      	bge.n	8016692 <scalbn+0xb2>
 8016680:	2d00      	cmp	r5, #0
 8016682:	a10b      	add	r1, pc, #44	@ (adr r1, 80166b0 <scalbn+0xd0>)
 8016684:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016688:	dac1      	bge.n	801660e <scalbn+0x2e>
 801668a:	a10f      	add	r1, pc, #60	@ (adr r1, 80166c8 <scalbn+0xe8>)
 801668c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016690:	e7bd      	b.n	801660e <scalbn+0x2e>
 8016692:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016696:	3236      	adds	r2, #54	@ 0x36
 8016698:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801669c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80166a0:	4620      	mov	r0, r4
 80166a2:	4b0d      	ldr	r3, [pc, #52]	@ (80166d8 <scalbn+0xf8>)
 80166a4:	4629      	mov	r1, r5
 80166a6:	2200      	movs	r2, #0
 80166a8:	e7d4      	b.n	8016654 <scalbn+0x74>
 80166aa:	bf00      	nop
 80166ac:	f3af 8000 	nop.w
 80166b0:	c2f8f359 	.word	0xc2f8f359
 80166b4:	01a56e1f 	.word	0x01a56e1f
 80166b8:	8800759c 	.word	0x8800759c
 80166bc:	7e37e43c 	.word	0x7e37e43c
 80166c0:	8800759c 	.word	0x8800759c
 80166c4:	fe37e43c 	.word	0xfe37e43c
 80166c8:	c2f8f359 	.word	0xc2f8f359
 80166cc:	81a56e1f 	.word	0x81a56e1f
 80166d0:	43500000 	.word	0x43500000
 80166d4:	ffff3cb0 	.word	0xffff3cb0
 80166d8:	3c900000 	.word	0x3c900000

080166dc <__ieee754_sqrt>:
 80166dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166e0:	4a68      	ldr	r2, [pc, #416]	@ (8016884 <__ieee754_sqrt+0x1a8>)
 80166e2:	ec55 4b10 	vmov	r4, r5, d0
 80166e6:	43aa      	bics	r2, r5
 80166e8:	462b      	mov	r3, r5
 80166ea:	4621      	mov	r1, r4
 80166ec:	d110      	bne.n	8016710 <__ieee754_sqrt+0x34>
 80166ee:	4622      	mov	r2, r4
 80166f0:	4620      	mov	r0, r4
 80166f2:	4629      	mov	r1, r5
 80166f4:	f7e9 ffa8 	bl	8000648 <__aeabi_dmul>
 80166f8:	4602      	mov	r2, r0
 80166fa:	460b      	mov	r3, r1
 80166fc:	4620      	mov	r0, r4
 80166fe:	4629      	mov	r1, r5
 8016700:	f7e9 fdec 	bl	80002dc <__adddf3>
 8016704:	4604      	mov	r4, r0
 8016706:	460d      	mov	r5, r1
 8016708:	ec45 4b10 	vmov	d0, r4, r5
 801670c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016710:	2d00      	cmp	r5, #0
 8016712:	dc0e      	bgt.n	8016732 <__ieee754_sqrt+0x56>
 8016714:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8016718:	4322      	orrs	r2, r4
 801671a:	d0f5      	beq.n	8016708 <__ieee754_sqrt+0x2c>
 801671c:	b19d      	cbz	r5, 8016746 <__ieee754_sqrt+0x6a>
 801671e:	4622      	mov	r2, r4
 8016720:	4620      	mov	r0, r4
 8016722:	4629      	mov	r1, r5
 8016724:	f7e9 fdd8 	bl	80002d8 <__aeabi_dsub>
 8016728:	4602      	mov	r2, r0
 801672a:	460b      	mov	r3, r1
 801672c:	f7ea f8b6 	bl	800089c <__aeabi_ddiv>
 8016730:	e7e8      	b.n	8016704 <__ieee754_sqrt+0x28>
 8016732:	152a      	asrs	r2, r5, #20
 8016734:	d115      	bne.n	8016762 <__ieee754_sqrt+0x86>
 8016736:	2000      	movs	r0, #0
 8016738:	e009      	b.n	801674e <__ieee754_sqrt+0x72>
 801673a:	0acb      	lsrs	r3, r1, #11
 801673c:	3a15      	subs	r2, #21
 801673e:	0549      	lsls	r1, r1, #21
 8016740:	2b00      	cmp	r3, #0
 8016742:	d0fa      	beq.n	801673a <__ieee754_sqrt+0x5e>
 8016744:	e7f7      	b.n	8016736 <__ieee754_sqrt+0x5a>
 8016746:	462a      	mov	r2, r5
 8016748:	e7fa      	b.n	8016740 <__ieee754_sqrt+0x64>
 801674a:	005b      	lsls	r3, r3, #1
 801674c:	3001      	adds	r0, #1
 801674e:	02dc      	lsls	r4, r3, #11
 8016750:	d5fb      	bpl.n	801674a <__ieee754_sqrt+0x6e>
 8016752:	1e44      	subs	r4, r0, #1
 8016754:	1b12      	subs	r2, r2, r4
 8016756:	f1c0 0420 	rsb	r4, r0, #32
 801675a:	fa21 f404 	lsr.w	r4, r1, r4
 801675e:	4323      	orrs	r3, r4
 8016760:	4081      	lsls	r1, r0
 8016762:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016766:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801676a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801676e:	07d2      	lsls	r2, r2, #31
 8016770:	bf5c      	itt	pl
 8016772:	005b      	lslpl	r3, r3, #1
 8016774:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8016778:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801677c:	bf58      	it	pl
 801677e:	0049      	lslpl	r1, r1, #1
 8016780:	2600      	movs	r6, #0
 8016782:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8016786:	106d      	asrs	r5, r5, #1
 8016788:	0049      	lsls	r1, r1, #1
 801678a:	2016      	movs	r0, #22
 801678c:	4632      	mov	r2, r6
 801678e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8016792:	1917      	adds	r7, r2, r4
 8016794:	429f      	cmp	r7, r3
 8016796:	bfde      	ittt	le
 8016798:	193a      	addle	r2, r7, r4
 801679a:	1bdb      	suble	r3, r3, r7
 801679c:	1936      	addle	r6, r6, r4
 801679e:	0fcf      	lsrs	r7, r1, #31
 80167a0:	3801      	subs	r0, #1
 80167a2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80167a6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80167aa:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80167ae:	d1f0      	bne.n	8016792 <__ieee754_sqrt+0xb6>
 80167b0:	4604      	mov	r4, r0
 80167b2:	2720      	movs	r7, #32
 80167b4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80167b8:	429a      	cmp	r2, r3
 80167ba:	eb00 0e0c 	add.w	lr, r0, ip
 80167be:	db02      	blt.n	80167c6 <__ieee754_sqrt+0xea>
 80167c0:	d113      	bne.n	80167ea <__ieee754_sqrt+0x10e>
 80167c2:	458e      	cmp	lr, r1
 80167c4:	d811      	bhi.n	80167ea <__ieee754_sqrt+0x10e>
 80167c6:	f1be 0f00 	cmp.w	lr, #0
 80167ca:	eb0e 000c 	add.w	r0, lr, ip
 80167ce:	da42      	bge.n	8016856 <__ieee754_sqrt+0x17a>
 80167d0:	2800      	cmp	r0, #0
 80167d2:	db40      	blt.n	8016856 <__ieee754_sqrt+0x17a>
 80167d4:	f102 0801 	add.w	r8, r2, #1
 80167d8:	1a9b      	subs	r3, r3, r2
 80167da:	458e      	cmp	lr, r1
 80167dc:	bf88      	it	hi
 80167de:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80167e2:	eba1 010e 	sub.w	r1, r1, lr
 80167e6:	4464      	add	r4, ip
 80167e8:	4642      	mov	r2, r8
 80167ea:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80167ee:	3f01      	subs	r7, #1
 80167f0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80167f4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80167f8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80167fc:	d1dc      	bne.n	80167b8 <__ieee754_sqrt+0xdc>
 80167fe:	4319      	orrs	r1, r3
 8016800:	d01b      	beq.n	801683a <__ieee754_sqrt+0x15e>
 8016802:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8016888 <__ieee754_sqrt+0x1ac>
 8016806:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801688c <__ieee754_sqrt+0x1b0>
 801680a:	e9da 0100 	ldrd	r0, r1, [sl]
 801680e:	e9db 2300 	ldrd	r2, r3, [fp]
 8016812:	f7e9 fd61 	bl	80002d8 <__aeabi_dsub>
 8016816:	e9da 8900 	ldrd	r8, r9, [sl]
 801681a:	4602      	mov	r2, r0
 801681c:	460b      	mov	r3, r1
 801681e:	4640      	mov	r0, r8
 8016820:	4649      	mov	r1, r9
 8016822:	f7ea f98d 	bl	8000b40 <__aeabi_dcmple>
 8016826:	b140      	cbz	r0, 801683a <__ieee754_sqrt+0x15e>
 8016828:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801682c:	e9da 0100 	ldrd	r0, r1, [sl]
 8016830:	e9db 2300 	ldrd	r2, r3, [fp]
 8016834:	d111      	bne.n	801685a <__ieee754_sqrt+0x17e>
 8016836:	3601      	adds	r6, #1
 8016838:	463c      	mov	r4, r7
 801683a:	1072      	asrs	r2, r6, #1
 801683c:	0863      	lsrs	r3, r4, #1
 801683e:	07f1      	lsls	r1, r6, #31
 8016840:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8016844:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8016848:	bf48      	it	mi
 801684a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801684e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8016852:	4618      	mov	r0, r3
 8016854:	e756      	b.n	8016704 <__ieee754_sqrt+0x28>
 8016856:	4690      	mov	r8, r2
 8016858:	e7be      	b.n	80167d8 <__ieee754_sqrt+0xfc>
 801685a:	f7e9 fd3f 	bl	80002dc <__adddf3>
 801685e:	e9da 8900 	ldrd	r8, r9, [sl]
 8016862:	4602      	mov	r2, r0
 8016864:	460b      	mov	r3, r1
 8016866:	4640      	mov	r0, r8
 8016868:	4649      	mov	r1, r9
 801686a:	f7ea f95f 	bl	8000b2c <__aeabi_dcmplt>
 801686e:	b120      	cbz	r0, 801687a <__ieee754_sqrt+0x19e>
 8016870:	1ca0      	adds	r0, r4, #2
 8016872:	bf08      	it	eq
 8016874:	3601      	addeq	r6, #1
 8016876:	3402      	adds	r4, #2
 8016878:	e7df      	b.n	801683a <__ieee754_sqrt+0x15e>
 801687a:	1c63      	adds	r3, r4, #1
 801687c:	f023 0401 	bic.w	r4, r3, #1
 8016880:	e7db      	b.n	801683a <__ieee754_sqrt+0x15e>
 8016882:	bf00      	nop
 8016884:	7ff00000 	.word	0x7ff00000
 8016888:	200002b8 	.word	0x200002b8
 801688c:	200002b0 	.word	0x200002b0

08016890 <_init>:
 8016890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016892:	bf00      	nop
 8016894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016896:	bc08      	pop	{r3}
 8016898:	469e      	mov	lr, r3
 801689a:	4770      	bx	lr

0801689c <_fini>:
 801689c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801689e:	bf00      	nop
 80168a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80168a2:	bc08      	pop	{r3}
 80168a4:	469e      	mov	lr, r3
 80168a6:	4770      	bx	lr
