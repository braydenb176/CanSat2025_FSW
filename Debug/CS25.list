
CS25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015510  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  080156f0  080156f0  000166f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015c70  08015c70  000172b8  2**0
                  CONTENTS
  4 .ARM          00000008  08015c70  08015c70  00016c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015c78  08015c78  000172b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015c78  08015c78  00016c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015c7c  08015c7c  00016c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b8  20000000  08015c80  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001454  200002b8  08015f38  000172b8  2**2
                  ALLOC
 10 ._user_heap_stack 00001504  2000170c  08015f38  0001770c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000172b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003393f  00000000  00000000  000172e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006dee  00000000  00000000  0004ac27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b28  00000000  00000000  00051a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000213d  00000000  00000000  00054540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a75d  00000000  00000000  0005667d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036773  00000000  00000000  00060dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100343  00000000  00000000  0009754d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00197890  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cab0  00000000  00000000  001978d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001a4384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002b8 	.word	0x200002b8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080156d8 	.word	0x080156d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002bc 	.word	0x200002bc
 800021c:	080156d8 	.word	0x080156d8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <init_mission_data>:
volatile uint8_t simulation_enable = 0;

Mission_Data global_mission_data = {0};

void init_mission_data(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	memset(&global_mission_data, 0, sizeof(global_mission_data));
 8000f8c:	226c      	movs	r2, #108	@ 0x6c
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4829      	ldr	r0, [pc, #164]	@ (8001038 <init_mission_data+0xb0>)
 8000f92:	f011 fbef 	bl	8012774 <memset>

	global_mission_data.TEAM_ID = 3174;
 8000f96:	4b28      	ldr	r3, [pc, #160]	@ (8001038 <init_mission_data+0xb0>)
 8000f98:	f640 4266 	movw	r2, #3174	@ 0xc66
 8000f9c:	801a      	strh	r2, [r3, #0]
	strcpy(global_mission_data.MISSION_TIME, "XX:XX:XX"); // TEMP
 8000f9e:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <init_mission_data+0xb0>)
 8000fa0:	4926      	ldr	r1, [pc, #152]	@ (800103c <init_mission_data+0xb4>)
 8000fa2:	1c9a      	adds	r2, r3, #2
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	cb03      	ldmia	r3!, {r0, r1}
 8000fa8:	6010      	str	r0, [r2, #0]
 8000faa:	6051      	str	r1, [r2, #4]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	7213      	strb	r3, [r2, #8]
	global_mission_data.PACKET_COUNT = 0;				  // TEMP
 8000fb0:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <init_mission_data+0xb0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
	global_mission_data.MODE = 'F';
 8000fb6:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <init_mission_data+0xb0>)
 8000fb8:	2246      	movs	r2, #70	@ 0x46
 8000fba:	741a      	strb	r2, [r3, #16]
	strcpy(global_mission_data.STATE, "LAUNCH_PAD");
 8000fbc:	4a20      	ldr	r2, [pc, #128]	@ (8001040 <init_mission_data+0xb8>)
 8000fbe:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <init_mission_data+0xbc>)
 8000fc0:	cb03      	ldmia	r3!, {r0, r1}
 8000fc2:	6010      	str	r0, [r2, #0]
 8000fc4:	6051      	str	r1, [r2, #4]
 8000fc6:	8819      	ldrh	r1, [r3, #0]
 8000fc8:	789b      	ldrb	r3, [r3, #2]
 8000fca:	8111      	strh	r1, [r2, #8]
 8000fcc:	7293      	strb	r3, [r2, #10]
	global_mission_data.ALTITUDE = 0.0;				  // temp
 8000fce:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <init_mission_data+0xb0>)
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
	global_mission_data.MAG_R = 0.0;				  // TEMP
 8000fd6:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <init_mission_data+0xb0>)
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	63da      	str	r2, [r3, #60]	@ 0x3c
	global_mission_data.MAG_P = 0.0;				  // TEMP
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <init_mission_data+0xb0>)
 8000fe0:	f04f 0200 	mov.w	r2, #0
 8000fe4:	641a      	str	r2, [r3, #64]	@ 0x40
	global_mission_data.MAG_Y = 0.0;				  // TEMP
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <init_mission_data+0xb0>)
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	645a      	str	r2, [r3, #68]	@ 0x44
	global_mission_data.AUTO_GYRO_ROTATION_RATE = 0;  // TEMP
 8000fee:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <init_mission_data+0xb0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	strcpy(global_mission_data.GPS_TIME, "XX:XX:XX"); // TEMP
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <init_mission_data+0xb0>)
 8000ff8:	4910      	ldr	r1, [pc, #64]	@ (800103c <init_mission_data+0xb4>)
 8000ffa:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 8000ffe:	460b      	mov	r3, r1
 8001000:	cb03      	ldmia	r3!, {r0, r1}
 8001002:	6010      	str	r0, [r2, #0]
 8001004:	6051      	str	r1, [r2, #4]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	7213      	strb	r3, [r2, #8]
	global_mission_data.GPS_ALTITUDE = 0.0;			  // TEMP
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <init_mission_data+0xb0>)
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	655a      	str	r2, [r3, #84]	@ 0x54
	global_mission_data.GPS_LATITUDE = 0.0;			  // TEMP
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <init_mission_data+0xb0>)
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	659a      	str	r2, [r3, #88]	@ 0x58
	global_mission_data.GPS_LONGITUDE = 0.0;		  // TEMP
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <init_mission_data+0xb0>)
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	65da      	str	r2, [r3, #92]	@ 0x5c
	global_mission_data.GPS_SATS = 0;				  // TEMP
 8001022:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <init_mission_data+0xb0>)
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
	strcpy(global_mission_data.CMD_ECHO, "CMD");	  // TEMP
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <init_mission_data+0xc0>)
 800102c:	4a07      	ldr	r2, [pc, #28]	@ (800104c <init_mission_data+0xc4>)
 800102e:	6810      	ldr	r0, [r2, #0]
 8001030:	6018      	str	r0, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200002d4 	.word	0x200002d4
 800103c:	080156f0 	.word	0x080156f0
 8001040:	200002e5 	.word	0x200002e5
 8001044:	080156fc 	.word	0x080156fc
 8001048:	20000335 	.word	0x20000335
 800104c:	08015708 	.word	0x08015708

08001050 <_write>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int fd, char *ptr, int len)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  // ignore fd, just send to UART3
  HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	b29a      	uxth	r2, r3
 8001060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	4804      	ldr	r0, [pc, #16]	@ (8001078 <_write+0x28>)
 8001068:	f00b f93b 	bl	800c2e2 <HAL_UART_Transmit>
  return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000075c 	.word	0x2000075c

0800107c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800107c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001080:	b0f1      	sub	sp, #452	@ 0x1c4
 8001082:	af12      	add	r7, sp, #72	@ 0x48

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 8001084:	f003 f8aa 	bl	80041dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001088:	f000 fa1c 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108c:	f000 ffdc 	bl	8002048 <MX_GPIO_Init>
  MX_DMA_Init();
 8001090:	f000 ffb0 	bl	8001ff4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001094:	f000 faa8 	bl	80015e8 <MX_ADC1_Init>
  MX_I2C3_Init();
 8001098:	f000 fb46 	bl	8001728 <MX_I2C3_Init>
  MX_IRTIM_Init();
 800109c:	f000 fb84 	bl	80017a8 <MX_IRTIM_Init>
  MX_RTC_Init();
 80010a0:	f000 fba0 	bl	80017e4 <MX_RTC_Init>
  MX_SPI2_Init();
 80010a4:	f000 fbd2 	bl	800184c <MX_SPI2_Init>
  MX_TIM1_Init();
 80010a8:	f000 fc0e 	bl	80018c8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80010ac:	f000 fc86 	bl	80019bc <MX_TIM3_Init>
  MX_TIM8_Init();
 80010b0:	f000 fd1c 	bl	8001aec <MX_TIM8_Init>
  MX_TIM15_Init();
 80010b4:	f000 fd94 	bl	8001be0 <MX_TIM15_Init>
  MX_TIM16_Init();
 80010b8:	f000 fe18 	bl	8001cec <MX_TIM16_Init>
  MX_TIM17_Init();
 80010bc:	f000 fe8c 	bl	8001dd8 <MX_TIM17_Init>
  MX_UART5_Init();
 80010c0:	f000 ff00 	bl	8001ec4 <MX_UART5_Init>
  MX_RNG_Init();
 80010c4:	f000 fb78 	bl	80017b8 <MX_RNG_Init>
  MX_USB_Device_Init();
 80010c8:	f010 f8a0 	bl	801120c <MX_USB_Device_Init>
  MX_USART3_UART_Init();
 80010cc:	f000 ff46 	bl	8001f5c <MX_USART3_UART_Init>
  MX_CORDIC_Init();
 80010d0:	f000 fb02 	bl	80016d8 <MX_CORDIC_Init>
  MX_FMAC_Init();
 80010d4:	f000 fb14 	bl	8001700 <MX_FMAC_Init>
  /* USER CODE BEGIN 2 */
  // Feedback LED
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2180      	movs	r1, #128	@ 0x80
 80010dc:	48bb      	ldr	r0, [pc, #748]	@ (80013cc <main+0x350>)
 80010de:	f004 ff89 	bl	8005ff4 <HAL_GPIO_WritePin>

  // Enable GPS and XBEE
  HAL_GPIO_WritePin(XBEE_RST_GPIO_Port, XBEE_RST_Pin, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ec:	f004 ff82 	bl	8005ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2120      	movs	r1, #32
 80010f4:	48b5      	ldr	r0, [pc, #724]	@ (80013cc <main+0x350>)
 80010f6:	f004 ff7d 	bl	8005ff4 <HAL_GPIO_WritePin>
  HAL_Delay(3000); // wait for the Xbee to get brought back up again
 80010fa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80010fe:	f003 f8a3 	bl	8004248 <HAL_Delay>

  // Disable ALL chip selects
  HAL_GPIO_WritePin(IMU_nCS_GPIO_Port, IMU_nCS_Pin, GPIO_PIN_SET);
 8001102:	2201      	movs	r2, #1
 8001104:	2104      	movs	r1, #4
 8001106:	48b1      	ldr	r0, [pc, #708]	@ (80013cc <main+0x350>)
 8001108:	f004 ff74 	bl	8005ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BMP_nCS_GPIO_Port, BMP_nCS_Pin, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001112:	48ae      	ldr	r0, [pc, #696]	@ (80013cc <main+0x350>)
 8001114:	f004 ff6e 	bl	8005ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MAG_nCS_GPIO_Port, MAG_nCS_Pin, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800111e:	48ab      	ldr	r0, [pc, #684]	@ (80013cc <main+0x350>)
 8001120:	f004 ff68 	bl	8005ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MAGEXT_nCS_GPIO_Port, MAGEXT_nCS_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800112a:	48a8      	ldr	r0, [pc, #672]	@ (80013cc <main+0x350>)
 800112c:	f004 ff62 	bl	8005ff4 <HAL_GPIO_WritePin>

  // Initialize IMU
  ICM42688P_init(&hspi2, IMU_nCS_GPIO_Port, IMU_nCS_Pin);
 8001130:	2204      	movs	r2, #4
 8001132:	49a6      	ldr	r1, [pc, #664]	@ (80013cc <main+0x350>)
 8001134:	48a6      	ldr	r0, [pc, #664]	@ (80013d0 <main+0x354>)
 8001136:	f002 fa75 	bl	8003624 <ICM42688P_init>

  // Initialize MS5607
  MS5607_Init(&hspi2, BMP_nCS_GPIO_Port, BMP_nCS_Pin);
 800113a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800113e:	49a3      	ldr	r1, [pc, #652]	@ (80013cc <main+0x350>)
 8001140:	48a3      	ldr	r0, [pc, #652]	@ (80013d0 <main+0x354>)
 8001142:	f002 fb8d 	bl	8003860 <MS5607_Init>

  // Initialize BMM150
  struct bmm150_dev bmm150 = BMM150_spi_init(&hspi2, MAG_nCS_GPIO_Port, MAG_nCS_Pin);
 8001146:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800114a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800114e:	4a9f      	ldr	r2, [pc, #636]	@ (80013cc <main+0x350>)
 8001150:	499f      	ldr	r1, [pc, #636]	@ (80013d0 <main+0x354>)
 8001152:	f002 f82d 	bl	80031b0 <BMM150_spi_init>

  // Initialize LC76G
  LC76G_init();
 8001156:	f002 fb2d 	bl	80037b4 <LC76G_init>

  // Initializing AMT10E2
  QENC_Init_Encoder0();
 800115a:	f001 ff53 	bl	8003004 <QENC_Init_Encoder0>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
  int strlen = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
  MS5607Readings bmp_data;
  ICM42688P_AccelData imu_data;
  BMM150_mag_data mag_data;
  LC76G_gps_data gps_data;

  uint8_t calibrated = 1;
 800116a:	2301      	movs	r3, #1
 800116c:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177

  init_mission_data();
 8001170:	f7ff ff0a 	bl	8000f88 <init_mission_data>

  while (1)
  {
    bmp_data = MS5607ReadValues();
 8001174:	f002 ff54 	bl	8004020 <MS5607ReadValues>
 8001178:	eeb0 6a40 	vmov.f32	s12, s0
 800117c:	eef0 6a60 	vmov.f32	s13, s1
 8001180:	eeb0 7a41 	vmov.f32	s14, s2
 8001184:	eef0 7a61 	vmov.f32	s15, s3
 8001188:	ed87 6b4c 	vstr	d6, [r7, #304]	@ 0x130
 800118c:	ed87 7b4e 	vstr	d7, [r7, #312]	@ 0x138
    imu_data = ICM42688P_read_data();
 8001190:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001194:	4618      	mov	r0, r3
 8001196:	f002 fa6f 	bl	8003678 <ICM42688P_read_data>
    gps_data = LC76G_read_data();
 800119a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 fb36 	bl	8003810 <LC76G_read_data>

	global_mission_data.ALTITUDE = calculateAltitude(bmp_data.pressure_kPa, calibrated);
 80011a4:	ed97 7b4c 	vldr	d7, [r7, #304]	@ 0x130
 80011a8:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
 80011ac:	4618      	mov	r0, r3
 80011ae:	eeb0 0a47 	vmov.f32	s0, s14
 80011b2:	eef0 0a67 	vmov.f32	s1, s15
 80011b6:	f002 ff8f 	bl	80040d8 <calculateAltitude>
 80011ba:	eef0 7a40 	vmov.f32	s15, s0
 80011be:	4b85      	ldr	r3, [pc, #532]	@ (80013d4 <main+0x358>)
 80011c0:	edc3 7a08 	vstr	s15, [r3, #32]
	calibrated = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177

    global_mission_data.TEMPERATURE = bmp_data.temperature_C;
 80011ca:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fd11 	bl	8000bf8 <__aeabi_d2f>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a7e      	ldr	r2, [pc, #504]	@ (80013d4 <main+0x358>)
 80011da:	6253      	str	r3, [r2, #36]	@ 0x24
    global_mission_data.PRESSURE = bmp_data.pressure_kPa;
 80011dc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fd08 	bl	8000bf8 <__aeabi_d2f>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a7a      	ldr	r2, [pc, #488]	@ (80013d4 <main+0x358>)
 80011ec:	6293      	str	r3, [r2, #40]	@ 0x28
    // global_mission_data.VOLTAGE = (7.62 + (0.0002 * (float)(uint8_t)rand()));
    uint16_t battery_mV = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
    BQ28Z610_ReadVoltage(&hi2c3, &battery_mV); // global_mission_data.VOLTAGE = BQ28Z610_ReadVoltage(&hi2c2, )
 80011f4:	f107 03ee 	add.w	r3, r7, #238	@ 0xee
 80011f8:	4619      	mov	r1, r3
 80011fa:	4877      	ldr	r0, [pc, #476]	@ (80013d8 <main+0x35c>)
 80011fc:	f002 f9a9 	bl	8003552 <BQ28Z610_ReadVoltage>
    global_mission_data.VOLTAGE = (float)(battery_mV) / 1000.0;
 8001200:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8001204:	ee07 3a90 	vmov	s15, r3
 8001208:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800120c:	eddf 6a73 	vldr	s13, [pc, #460]	@ 80013dc <main+0x360>
 8001210:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001214:	4b6f      	ldr	r3, [pc, #444]	@ (80013d4 <main+0x358>)
 8001216:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    global_mission_data.GYRO_R = imu_data.gyro_z;
 800121a:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 800121e:	b21a      	sxth	r2, r3
 8001220:	4b6c      	ldr	r3, [pc, #432]	@ (80013d4 <main+0x358>)
 8001222:	861a      	strh	r2, [r3, #48]	@ 0x30
    global_mission_data.GYRO_P = imu_data.gyro_x;
 8001224:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001228:	b21a      	sxth	r2, r3
 800122a:	4b6a      	ldr	r3, [pc, #424]	@ (80013d4 <main+0x358>)
 800122c:	865a      	strh	r2, [r3, #50]	@ 0x32
    global_mission_data.GYRO_Y = imu_data.gyro_y;
 800122e:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8001232:	b21a      	sxth	r2, r3
 8001234:	4b67      	ldr	r3, [pc, #412]	@ (80013d4 <main+0x358>)
 8001236:	869a      	strh	r2, [r3, #52]	@ 0x34
    global_mission_data.AUTO_GYRO_ROTATION_RATE = QENC_Get_Encoder0_Count();
 8001238:	f001 ff20 	bl	800307c <QENC_Get_Encoder0_Count>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b64      	ldr	r3, [pc, #400]	@ (80013d4 <main+0x358>)
 8001242:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

    // needs to be updated
    global_mission_data.ACCEL_R = imu_data.accel_z;
 8001246:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800124a:	b21a      	sxth	r2, r3
 800124c:	4b61      	ldr	r3, [pc, #388]	@ (80013d4 <main+0x358>)
 800124e:	86da      	strh	r2, [r3, #54]	@ 0x36
    global_mission_data.ACCEL_P = imu_data.accel_x;
 8001250:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8001254:	b21a      	sxth	r2, r3
 8001256:	4b5f      	ldr	r3, [pc, #380]	@ (80013d4 <main+0x358>)
 8001258:	871a      	strh	r2, [r3, #56]	@ 0x38
    global_mission_data.ACCEL_Y = imu_data.accel_y;
 800125a:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 800125e:	b21a      	sxth	r2, r3
 8001260:	4b5c      	ldr	r3, [pc, #368]	@ (80013d4 <main+0x358>)
 8001262:	875a      	strh	r2, [r3, #58]	@ 0x3a

    strlen = sprintf(global_mission_data.GPS_TIME, "%d:%d:%d",
                     gps_data.time_H,
 8001264:	f897 30f0 	ldrb.w	r3, [r7, #240]	@ 0xf0
    strlen = sprintf(global_mission_data.GPS_TIME, "%d:%d:%d",
 8001268:	461a      	mov	r2, r3
                     gps_data.time_M,
 800126a:	f897 30f1 	ldrb.w	r3, [r7, #241]	@ 0xf1
    strlen = sprintf(global_mission_data.GPS_TIME, "%d:%d:%d",
 800126e:	4619      	mov	r1, r3
                     gps_data.time_S);
 8001270:	f897 30f2 	ldrb.w	r3, [r7, #242]	@ 0xf2
    strlen = sprintf(global_mission_data.GPS_TIME, "%d:%d:%d",
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	460b      	mov	r3, r1
 8001278:	4959      	ldr	r1, [pc, #356]	@ (80013e0 <main+0x364>)
 800127a:	485a      	ldr	r0, [pc, #360]	@ (80013e4 <main+0x368>)
 800127c:	f011 f998 	bl	80125b0 <siprintf>
 8001280:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
    global_mission_data.GPS_ALTITUDE = gps_data.altitude;
 8001284:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fcb4 	bl	8000bf8 <__aeabi_d2f>
 8001290:	4603      	mov	r3, r0
 8001292:	4a50      	ldr	r2, [pc, #320]	@ (80013d4 <main+0x358>)
 8001294:	6553      	str	r3, [r2, #84]	@ 0x54
    global_mission_data.GPS_LATITUDE = gps_data.lat;
 8001296:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	@ 0xf8
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff fcab 	bl	8000bf8 <__aeabi_d2f>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4a4b      	ldr	r2, [pc, #300]	@ (80013d4 <main+0x358>)
 80012a6:	6593      	str	r3, [r2, #88]	@ 0x58
    global_mission_data.GPS_LONGITUDE = gps_data.lon;
 80012a8:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff fca2 	bl	8000bf8 <__aeabi_d2f>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4a47      	ldr	r2, [pc, #284]	@ (80013d4 <main+0x358>)
 80012b8:	65d3      	str	r3, [r2, #92]	@ 0x5c
    global_mission_data.GPS_SATS = gps_data.num_sat_used;
 80012ba:	f897 2110 	ldrb.w	r2, [r7, #272]	@ 0x110
 80012be:	4b45      	ldr	r3, [pc, #276]	@ (80013d4 <main+0x358>)
 80012c0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

    // model packet
    char telemetry_string[200];
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
                     global_mission_data.TEAM_ID,      // team id
 80012c4:	4b43      	ldr	r3, [pc, #268]	@ (80013d4 <main+0x358>)
 80012c6:	f9b3 3000 	ldrsh.w	r3, [r3]
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	4b41      	ldr	r3, [pc, #260]	@ (80013d4 <main+0x358>)
 80012ce:	68de      	ldr	r6, [r3, #12]
                     global_mission_data.MISSION_TIME, // temp; mission time
                     global_mission_data.PACKET_COUNT, // temp; packet count
                     global_mission_data.MODE,         // mode
 80012d0:	4b40      	ldr	r3, [pc, #256]	@ (80013d4 <main+0x358>)
 80012d2:	7c1b      	ldrb	r3, [r3, #16]
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 80012d4:	61bb      	str	r3, [r7, #24]
                     global_mission_data.STATE,        // state
                     global_mission_data.ALTITUDE,     // temp; altitude
 80012d6:	4b3f      	ldr	r3, [pc, #252]	@ (80013d4 <main+0x358>)
 80012d8:	6a1b      	ldr	r3, [r3, #32]
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f95c 	bl	8000598 <__aeabi_f2d>
 80012e0:	4604      	mov	r4, r0
 80012e2:	460d      	mov	r5, r1
                     global_mission_data.TEMPERATURE,  // temperature
 80012e4:	4b3b      	ldr	r3, [pc, #236]	@ (80013d4 <main+0x358>)
 80012e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f955 	bl	8000598 <__aeabi_f2d>
 80012ee:	4680      	mov	r8, r0
 80012f0:	4689      	mov	r9, r1
                     global_mission_data.PRESSURE,     // pressure
 80012f2:	4b38      	ldr	r3, [pc, #224]	@ (80013d4 <main+0x358>)
 80012f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f94e 	bl	8000598 <__aeabi_f2d>
 80012fc:	4682      	mov	sl, r0
 80012fe:	468b      	mov	fp, r1
                     global_mission_data.VOLTAGE,
 8001300:	4b34      	ldr	r3, [pc, #208]	@ (80013d4 <main+0x358>)
 8001302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f947 	bl	8000598 <__aeabi_f2d>
 800130a:	460a      	mov	r2, r1
 800130c:	4601      	mov	r1, r0
                     global_mission_data.GYRO_R, // gyro_r
 800130e:	4b31      	ldr	r3, [pc, #196]	@ (80013d4 <main+0x358>)
 8001310:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 8001314:	617b      	str	r3, [r7, #20]
                     global_mission_data.GYRO_P, // gyro_p
 8001316:	4b2f      	ldr	r3, [pc, #188]	@ (80013d4 <main+0x358>)
 8001318:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 800131c:	60bb      	str	r3, [r7, #8]
                     global_mission_data.GYRO_Y
 800131e:	4b2d      	ldr	r3, [pc, #180]	@ (80013d4 <main+0x358>)
 8001320:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 8001324:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001328:	930e      	str	r3, [sp, #56]	@ 0x38
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	930d      	str	r3, [sp, #52]	@ 0x34
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	930c      	str	r3, [sp, #48]	@ 0x30
 8001332:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8001336:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800133a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800133e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001342:	4b29      	ldr	r3, [pc, #164]	@ (80013e8 <main+0x36c>)
 8001344:	9302      	str	r3, [sp, #8]
 8001346:	69b9      	ldr	r1, [r7, #24]
 8001348:	9101      	str	r1, [sp, #4]
 800134a:	9600      	str	r6, [sp, #0]
 800134c:	4b27      	ldr	r3, [pc, #156]	@ (80013ec <main+0x370>)
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	4927      	ldr	r1, [pc, #156]	@ (80013f0 <main+0x374>)
 8001352:	f011 f92d 	bl	80125b0 <siprintf>
 8001356:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
                     // gyro_y
    );
    // strlen = sizeof(telemetry_string);
    HAL_UART_Transmit(&huart3, telemetry_string, strlen, HAL_MAX_DELAY);
 800135a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800135e:	b29a      	uxth	r2, r3
 8001360:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001364:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001368:	4822      	ldr	r0, [pc, #136]	@ (80013f4 <main+0x378>)
 800136a:	f00a ffba 	bl	800c2e2 <HAL_UART_Transmit>
    memset(telemetry_string, 0, sizeof(telemetry_string)); // flush array
 800136e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001372:	22c8      	movs	r2, #200	@ 0xc8
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f011 f9fc 	bl	8012774 <memset>
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
                     global_mission_data.ACCEL_R, // accel_r
 800137c:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <main+0x358>)
 800137e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001382:	61fb      	str	r3, [r7, #28]
                     global_mission_data.ACCEL_P, // accel_p
 8001384:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <main+0x358>)
 8001386:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 800138a:	61bb      	str	r3, [r7, #24]
                     global_mission_data.ACCEL_Y,
 800138c:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <main+0x358>)
 800138e:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	@ 0x3a
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001392:	617b      	str	r3, [r7, #20]
                     global_mission_data.MAG_R,                   // temp; mag_r
 8001394:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <main+0x358>)
 8001396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f8fd 	bl	8000598 <__aeabi_f2d>
 800139e:	4605      	mov	r5, r0
 80013a0:	460e      	mov	r6, r1
                     global_mission_data.MAG_P,                   // temp; mag_p
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <main+0x358>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8f6 	bl	8000598 <__aeabi_f2d>
 80013ac:	e9c7 0102 	strd	r0, r1, [r7, #8]
                     global_mission_data.MAG_Y,                   // temp; mag_y
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <main+0x358>)
 80013b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f8ef 	bl	8000598 <__aeabi_f2d>
 80013ba:	e9c7 0100 	strd	r0, r1, [r7]
                     global_mission_data.AUTO_GYRO_ROTATION_RATE, // temp; auto-gyro rotation rate
 80013be:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <main+0x358>)
 80013c0:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80013c4:	613b      	str	r3, [r7, #16]
                     global_mission_data.GPS_TIME,                // temp; gps time
                     global_mission_data.GPS_ALTITUDE,            // temp; gps altitude
 80013c6:	4b03      	ldr	r3, [pc, #12]	@ (80013d4 <main+0x358>)
 80013c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ca:	e015      	b.n	80013f8 <main+0x37c>
 80013cc:	48000400 	.word	0x48000400
 80013d0:	2000049c 	.word	0x2000049c
 80013d4:	200002d4 	.word	0x200002d4
 80013d8:	2000040c 	.word	0x2000040c
 80013dc:	447a0000 	.word	0x447a0000
 80013e0:	0801570c 	.word	0x0801570c
 80013e4:	2000031e 	.word	0x2000031e
 80013e8:	200002e5 	.word	0x200002e5
 80013ec:	200002d6 	.word	0x200002d6
 80013f0:	08015718 	.word	0x08015718
 80013f4:	2000075c 	.word	0x2000075c
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f8cd 	bl	8000598 <__aeabi_f2d>
 80013fe:	4682      	mov	sl, r0
 8001400:	468b      	mov	fp, r1
                     global_mission_data.GPS_LATITUDE,            // temp; gps latitude
 8001402:	4b2a      	ldr	r3, [pc, #168]	@ (80014ac <main+0x430>)
 8001404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f8c6 	bl	8000598 <__aeabi_f2d>
 800140c:	4680      	mov	r8, r0
 800140e:	4689      	mov	r9, r1
                     global_mission_data.GPS_LONGITUDE,           // temp; gps longitude
 8001410:	4b26      	ldr	r3, [pc, #152]	@ (80014ac <main+0x430>)
 8001412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f8bf 	bl	8000598 <__aeabi_f2d>
                     global_mission_data.GPS_SATS,                // temp; # of gps satellites
 800141a:	4b24      	ldr	r3, [pc, #144]	@ (80014ac <main+0x430>)
 800141c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001420:	461a      	mov	r2, r3
 8001422:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001426:	4b22      	ldr	r3, [pc, #136]	@ (80014b0 <main+0x434>)
 8001428:	9311      	str	r3, [sp, #68]	@ 0x44
 800142a:	9210      	str	r2, [sp, #64]	@ 0x40
 800142c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8001430:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 8001434:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8001438:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <main+0x438>)
 800143a:	9309      	str	r3, [sp, #36]	@ 0x24
 800143c:	6939      	ldr	r1, [r7, #16]
 800143e:	9108      	str	r1, [sp, #32]
 8001440:	ed97 7b00 	vldr	d7, [r7]
 8001444:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001448:	ed97 7b02 	vldr	d7, [r7, #8]
 800144c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001450:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8001454:	6979      	ldr	r1, [r7, #20]
 8001456:	9100      	str	r1, [sp, #0]
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	4916      	ldr	r1, [pc, #88]	@ (80014b8 <main+0x43c>)
 800145e:	4620      	mov	r0, r4
 8001460:	f011 f8a6 	bl	80125b0 <siprintf>
 8001464:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
                     global_mission_data.CMD_ECHO);
    HAL_UART_Transmit(&huart3, telemetry_string, strlen, HAL_MAX_DELAY);
 8001468:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800146c:	b29a      	uxth	r2, r3
 800146e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001472:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001476:	4811      	ldr	r0, [pc, #68]	@ (80014bc <main+0x440>)
 8001478:	f00a ff33 	bl	800c2e2 <HAL_UART_Transmit>

    global_mission_data.PACKET_COUNT = global_mission_data.PACKET_COUNT + 1;
 800147c:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <main+0x430>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	3301      	adds	r3, #1
 8001482:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <main+0x430>)
 8001484:	60d3      	str	r3, [r2, #12]

    HAL_Delay(1000);
 8001486:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800148a:	f002 fedd 	bl	8004248 <HAL_Delay>

    HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2180      	movs	r1, #128	@ 0x80
 8001492:	480b      	ldr	r0, [pc, #44]	@ (80014c0 <main+0x444>)
 8001494:	f004 fdae 	bl	8005ff4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001498:	2064      	movs	r0, #100	@ 0x64
 800149a:	f002 fed5 	bl	8004248 <HAL_Delay>
    HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_SET);
 800149e:	2201      	movs	r2, #1
 80014a0:	2180      	movs	r1, #128	@ 0x80
 80014a2:	4807      	ldr	r0, [pc, #28]	@ (80014c0 <main+0x444>)
 80014a4:	f004 fda6 	bl	8005ff4 <HAL_GPIO_WritePin>
  {
 80014a8:	bf00      	nop
 80014aa:	e663      	b.n	8001174 <main+0xf8>
 80014ac:	200002d4 	.word	0x200002d4
 80014b0:	20000335 	.word	0x20000335
 80014b4:	2000031e 	.word	0x2000031e
 80014b8:	08015748 	.word	0x08015748
 80014bc:	2000075c 	.word	0x2000075c
 80014c0:	48000400 	.word	0x48000400

080014c4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b09a      	sub	sp, #104	@ 0x68
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014ce:	2238      	movs	r2, #56	@ 0x38
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f011 f94e 	bl	8012774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  RCC_CRSInitTypeDef pInit = {0};
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]
 80014f6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014fc:	f007 f87a 	bl	80085f4 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 8001500:	f006 ffe8 	bl	80084d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001504:	4b37      	ldr	r3, [pc, #220]	@ (80015e4 <SystemClock_Config+0x120>)
 8001506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800150a:	4a36      	ldr	r2, [pc, #216]	@ (80015e4 <SystemClock_Config+0x120>)
 800150c:	f023 0318 	bic.w	r3, r3, #24
 8001510:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 8001514:	232e      	movs	r3, #46	@ 0x2e
 8001516:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001518:	2301      	movs	r3, #1
 800151a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800151c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001520:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001522:	2340      	movs	r3, #64	@ 0x40
 8001524:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001526:	2301      	movs	r3, #1
 8001528:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800152a:	2301      	movs	r3, #1
 800152c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152e:	2302      	movs	r3, #2
 8001530:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001532:	2302      	movs	r3, #2
 8001534:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001536:	2301      	movs	r3, #1
 8001538:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 800153a:	2308      	movs	r3, #8
 800153c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800153e:	2302      	movs	r3, #2
 8001540:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001542:	2302      	movs	r3, #2
 8001544:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001546:	2302      	movs	r3, #2
 8001548:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800154e:	4618      	mov	r0, r3
 8001550:	f007 f904 	bl	800875c <HAL_RCC_OscConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800155a:	f000 fe79 	bl	8002250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800155e:	230f      	movs	r3, #15
 8001560:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001562:	2303      	movs	r3, #3
 8001564:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	2102      	movs	r1, #2
 8001578:	4618      	mov	r0, r3
 800157a:	f007 fc01 	bl	8008d80 <HAL_RCC_ClockConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001584:	f000 fe64 	bl	8002250 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001588:	2200      	movs	r2, #0
 800158a:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 800158e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001592:	f007 fd31 	bl	8008ff8 <HAL_RCC_MCOConfig>
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSE);
 8001596:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800159a:	f008 f8c1 	bl	8009720 <HAL_RCCEx_EnableLSCO>

  /** Enable the SYSCFG APB clock
   */
  __HAL_RCC_CRS_CLK_ENABLE();
 800159e:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <SystemClock_Config+0x120>)
 80015a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a2:	4a10      	ldr	r2, [pc, #64]	@ (80015e4 <SystemClock_Config+0x120>)
 80015a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <SystemClock_Config+0x120>)
 80015ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]

  /** Configures CRS
   */
  pInit.Prescaler = RCC_CRS_SYNC_DIV1;
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
  pInit.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80015ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80015be:	60bb      	str	r3, [r7, #8]
  pInit.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  pInit.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 32768);
 80015c4:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 80015c8:	613b      	str	r3, [r7, #16]
  pInit.ErrorLimitValue = 34;
 80015ca:	2322      	movs	r3, #34	@ 0x22
 80015cc:	617b      	str	r3, [r7, #20]
  pInit.HSI48CalibrationValue = 32;
 80015ce:	2320      	movs	r3, #32
 80015d0:	61bb      	str	r3, [r7, #24]

  HAL_RCCEx_CRSConfig(&pInit);
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	4618      	mov	r0, r3
 80015d6:	f008 f90d 	bl	80097f4 <HAL_RCCEx_CRSConfig>
}
 80015da:	bf00      	nop
 80015dc:	3768      	adds	r7, #104	@ 0x68
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000

080015e8 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	@ 0x30
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80015ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2220      	movs	r2, #32
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f011 f8b7 	bl	8012774 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 8001606:	4b32      	ldr	r3, [pc, #200]	@ (80016d0 <MX_ADC1_Init+0xe8>)
 8001608:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800160c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800160e:	4b30      	ldr	r3, [pc, #192]	@ (80016d0 <MX_ADC1_Init+0xe8>)
 8001610:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001616:	4b2e      	ldr	r3, [pc, #184]	@ (80016d0 <MX_ADC1_Init+0xe8>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800161c:	4b2c      	ldr	r3, [pc, #176]	@ (80016d0 <MX_ADC1_Init+0xe8>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001622:	4b2b      	ldr	r3, [pc, #172]	@ (80016d0 <MX_ADC1_Init+0xe8>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001628:	4b29      	ldr	r3, [pc, #164]	@ (80016d0 <MX_ADC1_Init+0xe8>)
 800162a:	2200      	movs	r2, #0
 800162c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800162e:	4b28      	ldr	r3, [pc, #160]	@ (80016d0 <MX_ADC1_Init+0xe8>)
 8001630:	2204      	movs	r2, #4
 8001632:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001634:	4b26      	ldr	r3, [pc, #152]	@ (80016d0 <MX_ADC1_Init+0xe8>)
 8001636:	2200      	movs	r2, #0
 8001638:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800163a:	4b25      	ldr	r3, [pc, #148]	@ (80016d0 <MX_ADC1_Init+0xe8>)
 800163c:	2200      	movs	r2, #0
 800163e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001640:	4b23      	ldr	r3, [pc, #140]	@ (80016d0 <MX_ADC1_Init+0xe8>)
 8001642:	2201      	movs	r2, #1
 8001644:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001646:	4b22      	ldr	r3, [pc, #136]	@ (80016d0 <MX_ADC1_Init+0xe8>)
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800164e:	4b20      	ldr	r3, [pc, #128]	@ (80016d0 <MX_ADC1_Init+0xe8>)
 8001650:	2200      	movs	r2, #0
 8001652:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001654:	4b1e      	ldr	r3, [pc, #120]	@ (80016d0 <MX_ADC1_Init+0xe8>)
 8001656:	2200      	movs	r2, #0
 8001658:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800165a:	4b1d      	ldr	r3, [pc, #116]	@ (80016d0 <MX_ADC1_Init+0xe8>)
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001662:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <MX_ADC1_Init+0xe8>)
 8001664:	2200      	movs	r2, #0
 8001666:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001668:	4b19      	ldr	r3, [pc, #100]	@ (80016d0 <MX_ADC1_Init+0xe8>)
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001670:	4817      	ldr	r0, [pc, #92]	@ (80016d0 <MX_ADC1_Init+0xe8>)
 8001672:	f003 f805 	bl	8004680 <HAL_ADC_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800167c:	f000 fde8 	bl	8002250 <Error_Handler>
  }

  /** Configure the ADC multi-mode
   */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001688:	4619      	mov	r1, r3
 800168a:	4811      	ldr	r0, [pc, #68]	@ (80016d0 <MX_ADC1_Init+0xe8>)
 800168c:	f003 fdf8 	bl	8005280 <HAL_ADCEx_MultiModeConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001696:	f000 fddb 	bl	8002250 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_9;
 800169a:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <MX_ADC1_Init+0xec>)
 800169c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800169e:	2306      	movs	r3, #6
 80016a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016a6:	237f      	movs	r3, #127	@ 0x7f
 80016a8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016aa:	2304      	movs	r3, #4
 80016ac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	4619      	mov	r1, r3
 80016b6:	4806      	ldr	r0, [pc, #24]	@ (80016d0 <MX_ADC1_Init+0xe8>)
 80016b8:	f003 f990 	bl	80049dc <HAL_ADC_ConfigChannel>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80016c2:	f000 fdc5 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80016c6:	bf00      	nop
 80016c8:	3730      	adds	r7, #48	@ 0x30
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000340 	.word	0x20000340
 80016d4:	25b00200 	.word	0x25b00200

080016d8 <MX_CORDIC_Init>:
 * @brief CORDIC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CORDIC_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <MX_CORDIC_Init+0x20>)
 80016de:	4a07      	ldr	r2, [pc, #28]	@ (80016fc <MX_CORDIC_Init+0x24>)
 80016e0:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80016e2:	4805      	ldr	r0, [pc, #20]	@ (80016f8 <MX_CORDIC_Init+0x20>)
 80016e4:	f003 feb4 	bl	8005450 <HAL_CORDIC_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80016ee:	f000 fdaf 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200003ac 	.word	0x200003ac
 80016fc:	40020c00 	.word	0x40020c00

08001700 <MX_FMAC_Init>:
 * @brief FMAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_FMAC_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <MX_FMAC_Init+0x20>)
 8001706:	4a07      	ldr	r2, [pc, #28]	@ (8001724 <MX_FMAC_Init+0x24>)
 8001708:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	@ (8001720 <MX_FMAC_Init+0x20>)
 800170c:	f004 fa2c 	bl	8005b68 <HAL_FMAC_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8001716:	f000 fd9b 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200003d4 	.word	0x200003d4
 8001724:	40021400 	.word	0x40021400

08001728 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800172c:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <MX_I2C3_Init+0x74>)
 800172e:	4a1c      	ldr	r2, [pc, #112]	@ (80017a0 <MX_I2C3_Init+0x78>)
 8001730:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10B17DB5;
 8001732:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <MX_I2C3_Init+0x74>)
 8001734:	4a1b      	ldr	r2, [pc, #108]	@ (80017a4 <MX_I2C3_Init+0x7c>)
 8001736:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001738:	4b18      	ldr	r3, [pc, #96]	@ (800179c <MX_I2C3_Init+0x74>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800173e:	4b17      	ldr	r3, [pc, #92]	@ (800179c <MX_I2C3_Init+0x74>)
 8001740:	2201      	movs	r2, #1
 8001742:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001744:	4b15      	ldr	r3, [pc, #84]	@ (800179c <MX_I2C3_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800174a:	4b14      	ldr	r3, [pc, #80]	@ (800179c <MX_I2C3_Init+0x74>)
 800174c:	2200      	movs	r2, #0
 800174e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001750:	4b12      	ldr	r3, [pc, #72]	@ (800179c <MX_I2C3_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001756:	4b11      	ldr	r3, [pc, #68]	@ (800179c <MX_I2C3_Init+0x74>)
 8001758:	2200      	movs	r2, #0
 800175a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800175c:	4b0f      	ldr	r3, [pc, #60]	@ (800179c <MX_I2C3_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001762:	480e      	ldr	r0, [pc, #56]	@ (800179c <MX_I2C3_Init+0x74>)
 8001764:	f004 fc5e 	bl	8006024 <HAL_I2C_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800176e:	f000 fd6f 	bl	8002250 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001772:	2100      	movs	r1, #0
 8001774:	4809      	ldr	r0, [pc, #36]	@ (800179c <MX_I2C3_Init+0x74>)
 8001776:	f005 f879 	bl	800686c <HAL_I2CEx_ConfigAnalogFilter>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001780:	f000 fd66 	bl	8002250 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001784:	2100      	movs	r1, #0
 8001786:	4805      	ldr	r0, [pc, #20]	@ (800179c <MX_I2C3_Init+0x74>)
 8001788:	f005 f8bb 	bl	8006902 <HAL_I2CEx_ConfigDigitalFilter>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001792:	f000 fd5d 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000040c 	.word	0x2000040c
 80017a0:	40007800 	.word	0x40007800
 80017a4:	10b17db5 	.word	0x10b17db5

080017a8 <MX_IRTIM_Init>:
 * @brief IRTIM Initialization Function
 * @param None
 * @retval None
 */
static void MX_IRTIM_Init(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END IRTIM_Init 1 */
  /* USER CODE BEGIN IRTIM_Init 2 */

  /* USER CODE END IRTIM_Init 2 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <MX_RNG_Init>:
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80017bc:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <MX_RNG_Init+0x24>)
 80017be:	4a08      	ldr	r2, [pc, #32]	@ (80017e0 <MX_RNG_Init+0x28>)
 80017c0:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <MX_RNG_Init+0x24>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80017c8:	4804      	ldr	r0, [pc, #16]	@ (80017dc <MX_RNG_Init+0x24>)
 80017ca:	f008 f855 	bl	8009878 <HAL_RNG_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80017d4:	f000 fd3c 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000460 	.word	0x20000460
 80017e0:	50060800 	.word	0x50060800

080017e4 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 80017e8:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <MX_RTC_Init+0x60>)
 80017ea:	4a17      	ldr	r2, [pc, #92]	@ (8001848 <MX_RTC_Init+0x64>)
 80017ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017ee:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <MX_RTC_Init+0x60>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80017f4:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <MX_RTC_Init+0x60>)
 80017f6:	227f      	movs	r2, #127	@ 0x7f
 80017f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80017fa:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <MX_RTC_Init+0x60>)
 80017fc:	22ff      	movs	r2, #255	@ 0xff
 80017fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001800:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <MX_RTC_Init+0x60>)
 8001802:	2200      	movs	r2, #0
 8001804:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001806:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <MX_RTC_Init+0x60>)
 8001808:	2200      	movs	r2, #0
 800180a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800180c:	4b0d      	ldr	r3, [pc, #52]	@ (8001844 <MX_RTC_Init+0x60>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001812:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <MX_RTC_Init+0x60>)
 8001814:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001818:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800181a:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <MX_RTC_Init+0x60>)
 800181c:	2200      	movs	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001820:	4808      	ldr	r0, [pc, #32]	@ (8001844 <MX_RTC_Init+0x60>)
 8001822:	f008 f85e 	bl	80098e2 <HAL_RTC_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 800182c:	f000 fd10 	bl	8002250 <Error_Handler>
  }

  /** Enable the reference Clock input
   */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8001830:	4804      	ldr	r0, [pc, #16]	@ (8001844 <MX_RTC_Init+0x60>)
 8001832:	f008 f972 	bl	8009b1a <HAL_RTCEx_SetRefClock>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 800183c:	f000 fd08 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000474 	.word	0x20000474
 8001848:	40002800 	.word	0x40002800

0800184c <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001850:	4b1b      	ldr	r3, [pc, #108]	@ (80018c0 <MX_SPI2_Init+0x74>)
 8001852:	4a1c      	ldr	r2, [pc, #112]	@ (80018c4 <MX_SPI2_Init+0x78>)
 8001854:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001856:	4b1a      	ldr	r3, [pc, #104]	@ (80018c0 <MX_SPI2_Init+0x74>)
 8001858:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800185c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800185e:	4b18      	ldr	r3, [pc, #96]	@ (80018c0 <MX_SPI2_Init+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001864:	4b16      	ldr	r3, [pc, #88]	@ (80018c0 <MX_SPI2_Init+0x74>)
 8001866:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800186a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800186c:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <MX_SPI2_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001872:	4b13      	ldr	r3, [pc, #76]	@ (80018c0 <MX_SPI2_Init+0x74>)
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001878:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <MX_SPI2_Init+0x74>)
 800187a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800187e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001880:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <MX_SPI2_Init+0x74>)
 8001882:	2210      	movs	r2, #16
 8001884:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001886:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <MX_SPI2_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800188c:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <MX_SPI2_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001892:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <MX_SPI2_Init+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001898:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <MX_SPI2_Init+0x74>)
 800189a:	2207      	movs	r2, #7
 800189c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800189e:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <MX_SPI2_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <MX_SPI2_Init+0x74>)
 80018a6:	2208      	movs	r2, #8
 80018a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018aa:	4805      	ldr	r0, [pc, #20]	@ (80018c0 <MX_SPI2_Init+0x74>)
 80018ac:	f008 f979 	bl	8009ba2 <HAL_SPI_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80018b6:	f000 fccb 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	2000049c 	.word	0x2000049c
 80018c4:	40003800 	.word	0x40003800

080018c8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b092      	sub	sp, #72	@ 0x48
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d2:	2224      	movs	r2, #36	@ 0x24
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f010 ff4c 	bl	8012774 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	f107 0318 	add.w	r3, r7, #24
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 80018e8:	463b      	mov	r3, r7
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	611a      	str	r2, [r3, #16]
 80018f6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018f8:	4b2e      	ldr	r3, [pc, #184]	@ (80019b4 <MX_TIM1_Init+0xec>)
 80018fa:	4a2f      	ldr	r2, [pc, #188]	@ (80019b8 <MX_TIM1_Init+0xf0>)
 80018fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018fe:	4b2d      	ldr	r3, [pc, #180]	@ (80019b4 <MX_TIM1_Init+0xec>)
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001904:	4b2b      	ldr	r3, [pc, #172]	@ (80019b4 <MX_TIM1_Init+0xec>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800190a:	4b2a      	ldr	r3, [pc, #168]	@ (80019b4 <MX_TIM1_Init+0xec>)
 800190c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001910:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001912:	4b28      	ldr	r3, [pc, #160]	@ (80019b4 <MX_TIM1_Init+0xec>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001918:	4b26      	ldr	r3, [pc, #152]	@ (80019b4 <MX_TIM1_Init+0xec>)
 800191a:	2200      	movs	r2, #0
 800191c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191e:	4b25      	ldr	r3, [pc, #148]	@ (80019b4 <MX_TIM1_Init+0xec>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001924:	2301      	movs	r3, #1
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001928:	2300      	movs	r3, #0
 800192a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800192c:	2301      	movs	r3, #1
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001930:	2300      	movs	r3, #0
 8001932:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001938:	2300      	movs	r3, #0
 800193a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800193c:	2301      	movs	r3, #1
 800193e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001940:	2300      	movs	r3, #0
 8001942:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800194c:	4619      	mov	r1, r3
 800194e:	4819      	ldr	r0, [pc, #100]	@ (80019b4 <MX_TIM1_Init+0xec>)
 8001950:	f009 f97b 	bl	800ac4a <HAL_TIM_Encoder_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800195a:	f000 fc79 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800196a:	f107 0318 	add.w	r3, r7, #24
 800196e:	4619      	mov	r1, r3
 8001970:	4810      	ldr	r0, [pc, #64]	@ (80019b4 <MX_TIM1_Init+0xec>)
 8001972:	f00a fac3 	bl	800befc <HAL_TIMEx_MasterConfigSynchronization>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 800197c:	f000 fc68 	bl	8002250 <Error_Handler>
  }
  sEncoderIndexConfig.Polarity = TIM_ENCODERINDEX_POLARITY_NONINVERTED;
 8001980:	2300      	movs	r3, #0
 8001982:	603b      	str	r3, [r7, #0]
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 8001984:	2300      	movs	r3, #0
 8001986:	607b      	str	r3, [r7, #4]
  sEncoderIndexConfig.Filter = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	733b      	strb	r3, [r7, #12]
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_00;
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_ConfigEncoderIndex(&htim1, &sEncoderIndexConfig) != HAL_OK)
 8001998:	463b      	mov	r3, r7
 800199a:	4619      	mov	r1, r3
 800199c:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <MX_TIM1_Init+0xec>)
 800199e:	f00a fbcf 	bl	800c140 <HAL_TIMEx_ConfigEncoderIndex>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80019a8:	f000 fc52 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
}
 80019ac:	bf00      	nop
 80019ae:	3748      	adds	r7, #72	@ 0x48
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000500 	.word	0x20000500
 80019b8:	40012c00 	.word	0x40012c00

080019bc <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08e      	sub	sp, #56	@ 0x38
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019dc:	463b      	mov	r3, r7
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	611a      	str	r2, [r3, #16]
 80019ea:	615a      	str	r2, [r3, #20]
 80019ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019ee:	4b3d      	ldr	r3, [pc, #244]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 80019f0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ae8 <MX_TIM3_Init+0x12c>)
 80019f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019f4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fa:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a00:	4b38      	ldr	r3, [pc, #224]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001a02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a08:	4b36      	ldr	r3, [pc, #216]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0e:	4b35      	ldr	r3, [pc, #212]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a14:	4833      	ldr	r0, [pc, #204]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001a16:	f008 fff9 	bl	800aa0c <HAL_TIM_Base_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001a20:	f000 fc16 	bl	8002250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a2e:	4619      	mov	r1, r3
 8001a30:	482c      	ldr	r0, [pc, #176]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001a32:	f009 fca1 	bl	800b378 <HAL_TIM_ConfigClockSource>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001a3c:	f000 fc08 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a40:	4828      	ldr	r0, [pc, #160]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001a42:	f009 f8ab 	bl	800ab9c <HAL_TIM_PWM_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001a4c:	f000 fc00 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4821      	ldr	r0, [pc, #132]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001a60:	f00a fa4c 	bl	800befc <HAL_TIMEx_MasterConfigSynchronization>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001a6a:	f000 fbf1 	bl	8002250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a6e:	2360      	movs	r3, #96	@ 0x60
 8001a70:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a7e:	463b      	mov	r3, r7
 8001a80:	2200      	movs	r2, #0
 8001a82:	4619      	mov	r1, r3
 8001a84:	4817      	ldr	r0, [pc, #92]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001a86:	f009 fb63 	bl	800b150 <HAL_TIM_PWM_ConfigChannel>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001a90:	f000 fbde 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a94:	463b      	mov	r3, r7
 8001a96:	2204      	movs	r2, #4
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4812      	ldr	r0, [pc, #72]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001a9c:	f009 fb58 	bl	800b150 <HAL_TIM_PWM_ConfigChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001aa6:	f000 fbd3 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aaa:	463b      	mov	r3, r7
 8001aac:	2208      	movs	r2, #8
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480c      	ldr	r0, [pc, #48]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001ab2:	f009 fb4d 	bl	800b150 <HAL_TIM_PWM_ConfigChannel>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001abc:	f000 fbc8 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4807      	ldr	r0, [pc, #28]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001ac8:	f009 fb42 	bl	800b150 <HAL_TIM_PWM_ConfigChannel>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001ad2:	f000 fbbd 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ad6:	4803      	ldr	r0, [pc, #12]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001ad8:	f000 feb8 	bl	800284c <HAL_TIM_MspPostInit>
}
 8001adc:	bf00      	nop
 8001ade:	3738      	adds	r7, #56	@ 0x38
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	2000054c 	.word	0x2000054c
 8001ae8:	40000400 	.word	0x40000400

08001aec <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b092      	sub	sp, #72	@ 0x48
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001af2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af6:	2224      	movs	r2, #36	@ 0x24
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f010 fe3a 	bl	8012774 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b00:	f107 0318 	add.w	r3, r7, #24
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]
 8001b1a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd8 <MX_TIM8_Init+0xec>)
 8001b1e:	4a2f      	ldr	r2, [pc, #188]	@ (8001bdc <MX_TIM8_Init+0xf0>)
 8001b20:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b22:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd8 <MX_TIM8_Init+0xec>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b28:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd8 <MX_TIM8_Init+0xec>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd8 <MX_TIM8_Init+0xec>)
 8001b30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b34:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b36:	4b28      	ldr	r3, [pc, #160]	@ (8001bd8 <MX_TIM8_Init+0xec>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b3c:	4b26      	ldr	r3, [pc, #152]	@ (8001bd8 <MX_TIM8_Init+0xec>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b42:	4b25      	ldr	r3, [pc, #148]	@ (8001bd8 <MX_TIM8_Init+0xec>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b50:	2301      	movs	r3, #1
 8001b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b54:	2300      	movs	r3, #0
 8001b56:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b60:	2301      	movs	r3, #1
 8001b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b64:	2300      	movs	r3, #0
 8001b66:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001b6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b70:	4619      	mov	r1, r3
 8001b72:	4819      	ldr	r0, [pc, #100]	@ (8001bd8 <MX_TIM8_Init+0xec>)
 8001b74:	f009 f869 	bl	800ac4a <HAL_TIM_Encoder_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001b7e:	f000 fb67 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b8e:	f107 0318 	add.w	r3, r7, #24
 8001b92:	4619      	mov	r1, r3
 8001b94:	4810      	ldr	r0, [pc, #64]	@ (8001bd8 <MX_TIM8_Init+0xec>)
 8001b96:	f00a f9b1 	bl	800befc <HAL_TIMEx_MasterConfigSynchronization>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8001ba0:	f000 fb56 	bl	8002250 <Error_Handler>
  }
  sEncoderIndexConfig.Polarity = TIM_ENCODERINDEX_POLARITY_NONINVERTED;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	603b      	str	r3, [r7, #0]
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	607b      	str	r3, [r7, #4]
  sEncoderIndexConfig.Filter = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	733b      	strb	r3, [r7, #12]
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_00;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_ConfigEncoderIndex(&htim8, &sEncoderIndexConfig) != HAL_OK)
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4805      	ldr	r0, [pc, #20]	@ (8001bd8 <MX_TIM8_Init+0xec>)
 8001bc2:	f00a fabd 	bl	800c140 <HAL_TIMEx_ConfigEncoderIndex>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM8_Init+0xe4>
  {
    Error_Handler();
 8001bcc:	f000 fb40 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
}
 8001bd0:	bf00      	nop
 8001bd2:	3748      	adds	r7, #72	@ 0x48
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000598 	.word	0x20000598
 8001bdc:	40013400 	.word	0x40013400

08001be0 <MX_TIM15_Init>:
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b098      	sub	sp, #96	@ 0x60
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	615a      	str	r2, [r3, #20]
 8001c04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	2234      	movs	r2, #52	@ 0x34
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f010 fdb1 	bl	8012774 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001c12:	4b34      	ldr	r3, [pc, #208]	@ (8001ce4 <MX_TIM15_Init+0x104>)
 8001c14:	4a34      	ldr	r2, [pc, #208]	@ (8001ce8 <MX_TIM15_Init+0x108>)
 8001c16:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001c18:	4b32      	ldr	r3, [pc, #200]	@ (8001ce4 <MX_TIM15_Init+0x104>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1e:	4b31      	ldr	r3, [pc, #196]	@ (8001ce4 <MX_TIM15_Init+0x104>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001c24:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce4 <MX_TIM15_Init+0x104>)
 8001c26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c2a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce4 <MX_TIM15_Init+0x104>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001c32:	4b2c      	ldr	r3, [pc, #176]	@ (8001ce4 <MX_TIM15_Init+0x104>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce4 <MX_TIM15_Init+0x104>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001c3e:	4829      	ldr	r0, [pc, #164]	@ (8001ce4 <MX_TIM15_Init+0x104>)
 8001c40:	f008 ffac 	bl	800ab9c <HAL_TIM_PWM_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001c4a:	f000 fb01 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001c56:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4821      	ldr	r0, [pc, #132]	@ (8001ce4 <MX_TIM15_Init+0x104>)
 8001c5e:	f00a f94d 	bl	800befc <HAL_TIMEx_MasterConfigSynchronization>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001c68:	f000 faf2 	bl	8002250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c6c:	2360      	movs	r3, #96	@ 0x60
 8001c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c74:	2300      	movs	r3, #0
 8001c76:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c80:	2300      	movs	r3, #0
 8001c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c84:	2300      	movs	r3, #0
 8001c86:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c88:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4814      	ldr	r0, [pc, #80]	@ (8001ce4 <MX_TIM15_Init+0x104>)
 8001c92:	f009 fa5d 	bl	800b150 <HAL_TIM_PWM_ConfigChannel>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001c9c:	f000 fad8 	bl	8002250 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cb8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4807      	ldr	r0, [pc, #28]	@ (8001ce4 <MX_TIM15_Init+0x104>)
 8001cc8:	f00a f9a6 	bl	800c018 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001cd2:	f000 fabd 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001cd6:	4803      	ldr	r0, [pc, #12]	@ (8001ce4 <MX_TIM15_Init+0x104>)
 8001cd8:	f000 fdb8 	bl	800284c <HAL_TIM_MspPostInit>
}
 8001cdc:	bf00      	nop
 8001cde:	3760      	adds	r7, #96	@ 0x60
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	200005e4 	.word	0x200005e4
 8001ce8:	40014000 	.word	0x40014000

08001cec <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b094      	sub	sp, #80	@ 0x50
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cf2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
 8001d00:	611a      	str	r2, [r3, #16]
 8001d02:	615a      	str	r2, [r3, #20]
 8001d04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d06:	463b      	mov	r3, r7
 8001d08:	2234      	movs	r2, #52	@ 0x34
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f010 fd31 	bl	8012774 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d12:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd0 <MX_TIM16_Init+0xe4>)
 8001d14:	4a2f      	ldr	r2, [pc, #188]	@ (8001dd4 <MX_TIM16_Init+0xe8>)
 8001d16:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001d18:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd0 <MX_TIM16_Init+0xe4>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd0 <MX_TIM16_Init+0xe4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001d24:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd0 <MX_TIM16_Init+0xe4>)
 8001d26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d2a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2c:	4b28      	ldr	r3, [pc, #160]	@ (8001dd0 <MX_TIM16_Init+0xe4>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d32:	4b27      	ldr	r3, [pc, #156]	@ (8001dd0 <MX_TIM16_Init+0xe4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d38:	4b25      	ldr	r3, [pc, #148]	@ (8001dd0 <MX_TIM16_Init+0xe4>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001d3e:	4824      	ldr	r0, [pc, #144]	@ (8001dd0 <MX_TIM16_Init+0xe4>)
 8001d40:	f008 fe64 	bl	800aa0c <HAL_TIM_Base_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001d4a:	f000 fa81 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001d4e:	4820      	ldr	r0, [pc, #128]	@ (8001dd0 <MX_TIM16_Init+0xe4>)
 8001d50:	f008 ff24 	bl	800ab9c <HAL_TIM_PWM_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001d5a:	f000 fa79 	bl	8002250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d5e:	2360      	movs	r3, #96	@ 0x60
 8001d60:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d66:	2300      	movs	r3, #0
 8001d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d7a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d7e:	2200      	movs	r2, #0
 8001d80:	4619      	mov	r1, r3
 8001d82:	4813      	ldr	r0, [pc, #76]	@ (8001dd0 <MX_TIM16_Init+0xe4>)
 8001d84:	f009 f9e4 	bl	800b150 <HAL_TIM_PWM_ConfigChannel>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001d8e:	f000 fa5f 	bl	8002250 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001da6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001daa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001db4:	463b      	mov	r3, r7
 8001db6:	4619      	mov	r1, r3
 8001db8:	4805      	ldr	r0, [pc, #20]	@ (8001dd0 <MX_TIM16_Init+0xe4>)
 8001dba:	f00a f92d 	bl	800c018 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001dc4:	f000 fa44 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 8001dc8:	bf00      	nop
 8001dca:	3750      	adds	r7, #80	@ 0x50
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000630 	.word	0x20000630
 8001dd4:	40014400 	.word	0x40014400

08001dd8 <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b094      	sub	sp, #80	@ 0x50
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dde:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]
 8001dee:	615a      	str	r2, [r3, #20]
 8001df0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001df2:	463b      	mov	r3, r7
 8001df4:	2234      	movs	r2, #52	@ 0x34
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f010 fcbb 	bl	8012774 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8001ebc <MX_TIM17_Init+0xe4>)
 8001e00:	4a2f      	ldr	r2, [pc, #188]	@ (8001ec0 <MX_TIM17_Init+0xe8>)
 8001e02:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001e04:	4b2d      	ldr	r3, [pc, #180]	@ (8001ebc <MX_TIM17_Init+0xe4>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ebc <MX_TIM17_Init+0xe4>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001e10:	4b2a      	ldr	r3, [pc, #168]	@ (8001ebc <MX_TIM17_Init+0xe4>)
 8001e12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e16:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e18:	4b28      	ldr	r3, [pc, #160]	@ (8001ebc <MX_TIM17_Init+0xe4>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001e1e:	4b27      	ldr	r3, [pc, #156]	@ (8001ebc <MX_TIM17_Init+0xe4>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e24:	4b25      	ldr	r3, [pc, #148]	@ (8001ebc <MX_TIM17_Init+0xe4>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001e2a:	4824      	ldr	r0, [pc, #144]	@ (8001ebc <MX_TIM17_Init+0xe4>)
 8001e2c:	f008 fdee 	bl	800aa0c <HAL_TIM_Base_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001e36:	f000 fa0b 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001e3a:	4820      	ldr	r0, [pc, #128]	@ (8001ebc <MX_TIM17_Init+0xe4>)
 8001e3c:	f008 feae 	bl	800ab9c <HAL_TIM_PWM_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001e46:	f000 fa03 	bl	8002250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e4a:	2360      	movs	r3, #96	@ 0x60
 8001e4c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e52:	2300      	movs	r3, #0
 8001e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e56:	2300      	movs	r3, #0
 8001e58:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e66:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4813      	ldr	r0, [pc, #76]	@ (8001ebc <MX_TIM17_Init+0xe4>)
 8001e70:	f009 f96e 	bl	800b150 <HAL_TIM_PWM_ConfigChannel>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001e7a:	f000 f9e9 	bl	8002250 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4805      	ldr	r0, [pc, #20]	@ (8001ebc <MX_TIM17_Init+0xe4>)
 8001ea6:	f00a f8b7 	bl	800c018 <HAL_TIMEx_ConfigBreakDeadTime>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001eb0:	f000 f9ce 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
}
 8001eb4:	bf00      	nop
 8001eb6:	3750      	adds	r7, #80	@ 0x50
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	2000067c 	.word	0x2000067c
 8001ec0:	40014800 	.word	0x40014800

08001ec4 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001ec8:	4b22      	ldr	r3, [pc, #136]	@ (8001f54 <MX_UART5_Init+0x90>)
 8001eca:	4a23      	ldr	r2, [pc, #140]	@ (8001f58 <MX_UART5_Init+0x94>)
 8001ecc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001ece:	4b21      	ldr	r3, [pc, #132]	@ (8001f54 <MX_UART5_Init+0x90>)
 8001ed0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ed4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f54 <MX_UART5_Init+0x90>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001edc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f54 <MX_UART5_Init+0x90>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f54 <MX_UART5_Init+0x90>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f54 <MX_UART5_Init+0x90>)
 8001eea:	220c      	movs	r2, #12
 8001eec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eee:	4b19      	ldr	r3, [pc, #100]	@ (8001f54 <MX_UART5_Init+0x90>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef4:	4b17      	ldr	r3, [pc, #92]	@ (8001f54 <MX_UART5_Init+0x90>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001efa:	4b16      	ldr	r3, [pc, #88]	@ (8001f54 <MX_UART5_Init+0x90>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f00:	4b14      	ldr	r3, [pc, #80]	@ (8001f54 <MX_UART5_Init+0x90>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f06:	4b13      	ldr	r3, [pc, #76]	@ (8001f54 <MX_UART5_Init+0x90>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f0c:	4811      	ldr	r0, [pc, #68]	@ (8001f54 <MX_UART5_Init+0x90>)
 8001f0e:	f00a f998 	bl	800c242 <HAL_UART_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001f18:	f000 f99a 	bl	8002250 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	480d      	ldr	r0, [pc, #52]	@ (8001f54 <MX_UART5_Init+0x90>)
 8001f20:	f00b fc47 	bl	800d7b2 <HAL_UARTEx_SetTxFifoThreshold>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001f2a:	f000 f991 	bl	8002250 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4808      	ldr	r0, [pc, #32]	@ (8001f54 <MX_UART5_Init+0x90>)
 8001f32:	f00b fc7c 	bl	800d82e <HAL_UARTEx_SetRxFifoThreshold>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001f3c:	f000 f988 	bl	8002250 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001f40:	4804      	ldr	r0, [pc, #16]	@ (8001f54 <MX_UART5_Init+0x90>)
 8001f42:	f00b fbfd 	bl	800d740 <HAL_UARTEx_DisableFifoMode>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001f4c:	f000 f980 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	200006c8 	.word	0x200006c8
 8001f58:	40005000 	.word	0x40005000

08001f5c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f60:	4b22      	ldr	r3, [pc, #136]	@ (8001fec <MX_USART3_UART_Init+0x90>)
 8001f62:	4a23      	ldr	r2, [pc, #140]	@ (8001ff0 <MX_USART3_UART_Init+0x94>)
 8001f64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8001f66:	4b21      	ldr	r3, [pc, #132]	@ (8001fec <MX_USART3_UART_Init+0x90>)
 8001f68:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001f6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fec <MX_USART3_UART_Init+0x90>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f74:	4b1d      	ldr	r3, [pc, #116]	@ (8001fec <MX_USART3_UART_Init+0x90>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fec <MX_USART3_UART_Init+0x90>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f80:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <MX_USART3_UART_Init+0x90>)
 8001f82:	220c      	movs	r2, #12
 8001f84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f86:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <MX_USART3_UART_Init+0x90>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f8c:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <MX_USART3_UART_Init+0x90>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f92:	4b16      	ldr	r3, [pc, #88]	@ (8001fec <MX_USART3_UART_Init+0x90>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f98:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <MX_USART3_UART_Init+0x90>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f9e:	4b13      	ldr	r3, [pc, #76]	@ (8001fec <MX_USART3_UART_Init+0x90>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fa4:	4811      	ldr	r0, [pc, #68]	@ (8001fec <MX_USART3_UART_Init+0x90>)
 8001fa6:	f00a f94c 	bl	800c242 <HAL_UART_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001fb0:	f000 f94e 	bl	8002250 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	480d      	ldr	r0, [pc, #52]	@ (8001fec <MX_USART3_UART_Init+0x90>)
 8001fb8:	f00b fbfb 	bl	800d7b2 <HAL_UARTEx_SetTxFifoThreshold>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001fc2:	f000 f945 	bl	8002250 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4808      	ldr	r0, [pc, #32]	@ (8001fec <MX_USART3_UART_Init+0x90>)
 8001fca:	f00b fc30 	bl	800d82e <HAL_UARTEx_SetRxFifoThreshold>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001fd4:	f000 f93c 	bl	8002250 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001fd8:	4804      	ldr	r0, [pc, #16]	@ (8001fec <MX_USART3_UART_Init+0x90>)
 8001fda:	f00b fbb1 	bl	800d740 <HAL_UARTEx_DisableFifoMode>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001fe4:	f000 f934 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	2000075c 	.word	0x2000075c
 8001ff0:	40004800 	.word	0x40004800

08001ff4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ffa:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <MX_DMA_Init+0x50>)
 8001ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffe:	4a11      	ldr	r2, [pc, #68]	@ (8002044 <MX_DMA_Init+0x50>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	6493      	str	r3, [r2, #72]	@ 0x48
 8002006:	4b0f      	ldr	r3, [pc, #60]	@ (8002044 <MX_DMA_Init+0x50>)
 8002008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002012:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <MX_DMA_Init+0x50>)
 8002014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002016:	4a0b      	ldr	r2, [pc, #44]	@ (8002044 <MX_DMA_Init+0x50>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6493      	str	r3, [r2, #72]	@ 0x48
 800201e:	4b09      	ldr	r3, [pc, #36]	@ (8002044 <MX_DMA_Init+0x50>)
 8002020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2100      	movs	r1, #0
 800202e:	200d      	movs	r0, #13
 8002030:	f003 faf8 	bl	8005624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002034:	200d      	movs	r0, #13
 8002036:	f003 fb0f 	bl	8005658 <HAL_NVIC_EnableIRQ>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000

08002048 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	@ 0x28
 800204c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]
 800205c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800205e:	4b6e      	ldr	r3, [pc, #440]	@ (8002218 <MX_GPIO_Init+0x1d0>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002062:	4a6d      	ldr	r2, [pc, #436]	@ (8002218 <MX_GPIO_Init+0x1d0>)
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800206a:	4b6b      	ldr	r3, [pc, #428]	@ (8002218 <MX_GPIO_Init+0x1d0>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002076:	4b68      	ldr	r3, [pc, #416]	@ (8002218 <MX_GPIO_Init+0x1d0>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207a:	4a67      	ldr	r2, [pc, #412]	@ (8002218 <MX_GPIO_Init+0x1d0>)
 800207c:	f043 0320 	orr.w	r3, r3, #32
 8002080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002082:	4b65      	ldr	r3, [pc, #404]	@ (8002218 <MX_GPIO_Init+0x1d0>)
 8002084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	4b62      	ldr	r3, [pc, #392]	@ (8002218 <MX_GPIO_Init+0x1d0>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002092:	4a61      	ldr	r2, [pc, #388]	@ (8002218 <MX_GPIO_Init+0x1d0>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800209a:	4b5f      	ldr	r3, [pc, #380]	@ (8002218 <MX_GPIO_Init+0x1d0>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a6:	4b5c      	ldr	r3, [pc, #368]	@ (8002218 <MX_GPIO_Init+0x1d0>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002218 <MX_GPIO_Init+0x1d0>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020b2:	4b59      	ldr	r3, [pc, #356]	@ (8002218 <MX_GPIO_Init+0x1d0>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020be:	4b56      	ldr	r3, [pc, #344]	@ (8002218 <MX_GPIO_Init+0x1d0>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c2:	4a55      	ldr	r2, [pc, #340]	@ (8002218 <MX_GPIO_Init+0x1d0>)
 80020c4:	f043 0308 	orr.w	r3, r3, #8
 80020c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ca:	4b53      	ldr	r3, [pc, #332]	@ (8002218 <MX_GPIO_Init+0x1d0>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STAT_BKUP_Pin | EN_5V_Pin | CAM1_CTRL_Pin, GPIO_PIN_RESET);
 80020d6:	2200      	movs	r2, #0
 80020d8:	f242 0124 	movw	r1, #8228	@ 0x2024
 80020dc:	484f      	ldr	r0, [pc, #316]	@ (800221c <MX_GPIO_Init+0x1d4>)
 80020de:	f003 ff89 	bl	8005ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRV_DIR_Pin | CAM0_CTRL_Pin | XBEE_RST_Pin, GPIO_PIN_RESET);
 80020e2:	2200      	movs	r2, #0
 80020e4:	f248 0130 	movw	r1, #32816	@ 0x8030
 80020e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ec:	f003 ff82 	bl	8005ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_nCS_Pin | MAGEXT_nCS_Pin | MAG_nCS_Pin | BMP_nCS_Pin | GPS_RST_Pin | USR_LED_Pin, GPIO_PIN_RESET);
 80020f0:	2200      	movs	r2, #0
 80020f2:	f641 41a4 	movw	r1, #7332	@ 0x1ca4
 80020f6:	484a      	ldr	r0, [pc, #296]	@ (8002220 <MX_GPIO_Init+0x1d8>)
 80020f8:	f003 ff7c 	bl	8005ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STAT_BKUP_Pin EN_5V_Pin CAM1_CTRL_Pin */
  GPIO_InitStruct.Pin = STAT_BKUP_Pin | EN_5V_Pin | CAM1_CTRL_Pin;
 80020fc:	f242 0324 	movw	r3, #8228	@ 0x2024
 8002100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002102:	2301      	movs	r3, #1
 8002104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	4619      	mov	r1, r3
 8002114:	4841      	ldr	r0, [pc, #260]	@ (800221c <MX_GPIO_Init+0x1d4>)
 8002116:	f003 fdd3 	bl	8005cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_STAT2_Pin CHG_STAT1_Pin */
  GPIO_InitStruct.Pin = CHG_STAT2_Pin | CHG_STAT1_Pin;
 800211a:	2303      	movs	r3, #3
 800211c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800211e:	2300      	movs	r3, #0
 8002120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	4619      	mov	r1, r3
 800212c:	483d      	ldr	r0, [pc, #244]	@ (8002224 <MX_GPIO_Init+0x1dc>)
 800212e:	f003 fdc7 	bl	8005cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_32K_Pin */
  GPIO_InitStruct.Pin = CLK_32K_Pin;
 8002132:	2304      	movs	r3, #4
 8002134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002136:	2303      	movs	r3, #3
 8002138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CLK_32K_GPIO_Port, &GPIO_InitStruct);
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	4619      	mov	r1, r3
 8002144:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002148:	f003 fdba 	bl	8005cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRV_DIR_Pin CAM0_CTRL_Pin XBEE_RST_Pin */
  GPIO_InitStruct.Pin = DRV_DIR_Pin | CAM0_CTRL_Pin | XBEE_RST_Pin;
 800214c:	f248 0330 	movw	r3, #32816	@ 0x8030
 8002150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002152:	2301      	movs	r3, #1
 8002154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	4619      	mov	r1, r3
 8002164:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002168:	f003 fdaa 	bl	8005cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_nCS_Pin MAGEXT_nCS_Pin MAG_nCS_Pin BMP_nCS_Pin
                           USR_LED_Pin */
  GPIO_InitStruct.Pin = IMU_nCS_Pin | MAGEXT_nCS_Pin | MAG_nCS_Pin | BMP_nCS_Pin | USR_LED_Pin;
 800216c:	f641 4384 	movw	r3, #7300	@ 0x1c84
 8002170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002172:	2301      	movs	r3, #1
 8002174:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2300      	movs	r3, #0
 800217c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	4826      	ldr	r0, [pc, #152]	@ (8002220 <MX_GPIO_Init+0x1d8>)
 8002186:	f003 fd9b 	bl	8005cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800218a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800218e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800219c:	2300      	movs	r3, #0
 800219e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	4619      	mov	r1, r3
 80021a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021aa:	f003 fd89 	bl	8005cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
 80021ae:	2350      	movs	r3, #80	@ 0x50
 80021b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b2:	2303      	movs	r3, #3
 80021b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	4817      	ldr	r0, [pc, #92]	@ (8002220 <MX_GPIO_Init+0x1d8>)
 80021c2:	f003 fd7d 	bl	8005cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 80021c6:	2320      	movs	r3, #32
 80021c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80021ca:	2311      	movs	r3, #17
 80021cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	4810      	ldr	r0, [pc, #64]	@ (8002220 <MX_GPIO_Init+0x1d8>)
 80021de:	f003 fd6f 	bl	8005cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80021e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_IR;
 80021f4:	2306      	movs	r3, #6
 80021f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4619      	mov	r1, r3
 80021fe:	4808      	ldr	r0, [pc, #32]	@ (8002220 <MX_GPIO_Init+0x1d8>)
 8002200:	f003 fd5e 	bl	8005cc0 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8002204:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <MX_GPIO_Init+0x1e0>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4a07      	ldr	r2, [pc, #28]	@ (8002228 <MX_GPIO_Init+0x1e0>)
 800220a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800220e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002210:	bf00      	nop
 8002212:	3728      	adds	r7, #40	@ 0x28
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	48000800 	.word	0x48000800
 8002220:	48000400 	.word	0x48000400
 8002224:	48001400 	.word	0x48001400
 8002228:	40010000 	.word	0x40010000

0800222c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a04      	ldr	r2, [pc, #16]	@ (800224c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d101      	bne.n	8002242 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800223e:	f001 ffe5 	bl	800420c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40001000 	.word	0x40001000

08002250 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002254:	b672      	cpsid	i
}
 8002256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <Error_Handler+0x8>

0800225c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8002262:	f107 0308 	add.w	r3, r7, #8
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226c:	4b16      	ldr	r3, [pc, #88]	@ (80022c8 <HAL_MspInit+0x6c>)
 800226e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002270:	4a15      	ldr	r2, [pc, #84]	@ (80022c8 <HAL_MspInit+0x6c>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6613      	str	r3, [r2, #96]	@ 0x60
 8002278:	4b13      	ldr	r3, [pc, #76]	@ (80022c8 <HAL_MspInit+0x6c>)
 800227a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002284:	4b10      	ldr	r3, [pc, #64]	@ (80022c8 <HAL_MspInit+0x6c>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002288:	4a0f      	ldr	r2, [pc, #60]	@ (80022c8 <HAL_MspInit+0x6c>)
 800228a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800228e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002290:	4b0d      	ldr	r3, [pc, #52]	@ (80022c8 <HAL_MspInit+0x6c>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002298:	603b      	str	r3, [r7, #0]
 800229a:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800229c:	2300      	movs	r3, #0
 800229e:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80022a4:	f107 0308 	add.w	r3, r7, #8
 80022a8:	4618      	mov	r0, r3
 80022aa:	f006 f933 	bl	8008514 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80022ae:	f006 f991 	bl	80085d4 <HAL_PWR_EnablePVD>

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80022b2:	f001 ffff 	bl	80042b4 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80022b6:	2002      	movs	r0, #2
 80022b8:	f001 ffe8 	bl	800428c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80022bc:	f006 fa3e 	bl	800873c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000

080022cc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b09e      	sub	sp, #120	@ 0x78
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	2250      	movs	r2, #80	@ 0x50
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f010 fa41 	bl	8012774 <memset>
  if(hadc->Instance==ADC1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022fa:	d133      	bne.n	8002364 <HAL_ADC_MspInit+0x98>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80022fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002300:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002302:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002306:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4618      	mov	r0, r3
 800230e:	f006 ffcb 	bl	80092a8 <HAL_RCCEx_PeriphCLKConfig>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002318:	f7ff ff9a 	bl	8002250 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800231c:	4b13      	ldr	r3, [pc, #76]	@ (800236c <HAL_ADC_MspInit+0xa0>)
 800231e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002320:	4a12      	ldr	r2, [pc, #72]	@ (800236c <HAL_ADC_MspInit+0xa0>)
 8002322:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002326:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002328:	4b10      	ldr	r3, [pc, #64]	@ (800236c <HAL_ADC_MspInit+0xa0>)
 800232a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002334:	4b0d      	ldr	r3, [pc, #52]	@ (800236c <HAL_ADC_MspInit+0xa0>)
 8002336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002338:	4a0c      	ldr	r2, [pc, #48]	@ (800236c <HAL_ADC_MspInit+0xa0>)
 800233a:	f043 0304 	orr.w	r3, r3, #4
 800233e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002340:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <HAL_ADC_MspInit+0xa0>)
 8002342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VUSB_Pin;
 800234c:	2308      	movs	r3, #8
 800234e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002350:	2303      	movs	r3, #3
 8002352:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(VUSB_GPIO_Port, &GPIO_InitStruct);
 8002358:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800235c:	4619      	mov	r1, r3
 800235e:	4804      	ldr	r0, [pc, #16]	@ (8002370 <HAL_ADC_MspInit+0xa4>)
 8002360:	f003 fcae 	bl	8005cc0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002364:	bf00      	nop
 8002366:	3778      	adds	r7, #120	@ 0x78
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	48000800 	.word	0x48000800

08002374 <HAL_CORDIC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcordic: CORDIC handle pointer
  * @retval None
  */
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0a      	ldr	r2, [pc, #40]	@ (80023ac <HAL_CORDIC_MspInit+0x38>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d10b      	bne.n	800239e <HAL_CORDIC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CORDIC_MspInit 0 */

    /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8002386:	4b0a      	ldr	r3, [pc, #40]	@ (80023b0 <HAL_CORDIC_MspInit+0x3c>)
 8002388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800238a:	4a09      	ldr	r2, [pc, #36]	@ (80023b0 <HAL_CORDIC_MspInit+0x3c>)
 800238c:	f043 0308 	orr.w	r3, r3, #8
 8002390:	6493      	str	r3, [r2, #72]	@ 0x48
 8002392:	4b07      	ldr	r3, [pc, #28]	@ (80023b0 <HAL_CORDIC_MspInit+0x3c>)
 8002394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CORDIC_MspInit 1 */

  }

}
 800239e:	bf00      	nop
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40020c00 	.word	0x40020c00
 80023b0:	40021000 	.word	0x40021000

080023b4 <HAL_FMAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfmac: FMAC handle pointer
  * @retval None
  */
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0a      	ldr	r2, [pc, #40]	@ (80023ec <HAL_FMAC_MspInit+0x38>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d10b      	bne.n	80023de <HAL_FMAC_MspInit+0x2a>
  {
    /* USER CODE BEGIN FMAC_MspInit 0 */

    /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80023c6:	4b0a      	ldr	r3, [pc, #40]	@ (80023f0 <HAL_FMAC_MspInit+0x3c>)
 80023c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ca:	4a09      	ldr	r2, [pc, #36]	@ (80023f0 <HAL_FMAC_MspInit+0x3c>)
 80023cc:	f043 0310 	orr.w	r3, r3, #16
 80023d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80023d2:	4b07      	ldr	r3, [pc, #28]	@ (80023f0 <HAL_FMAC_MspInit+0x3c>)
 80023d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END FMAC_MspInit 1 */

  }

}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40021400 	.word	0x40021400
 80023f0:	40021000 	.word	0x40021000

080023f4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b09e      	sub	sp, #120	@ 0x78
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	2250      	movs	r2, #80	@ 0x50
 8002412:	2100      	movs	r1, #0
 8002414:	4618      	mov	r0, r3
 8002416:	f010 f9ad 	bl	8012774 <memset>
  if(hi2c->Instance==I2C3)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a1f      	ldr	r2, [pc, #124]	@ (800249c <HAL_I2C_MspInit+0xa8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d137      	bne.n	8002494 <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002424:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002428:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800242a:	2300      	movs	r3, #0
 800242c:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800242e:	f107 0314 	add.w	r3, r7, #20
 8002432:	4618      	mov	r0, r3
 8002434:	f006 ff38 	bl	80092a8 <HAL_RCCEx_PeriphCLKConfig>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800243e:	f7ff ff07 	bl	8002250 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002442:	4b17      	ldr	r3, [pc, #92]	@ (80024a0 <HAL_I2C_MspInit+0xac>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002446:	4a16      	ldr	r2, [pc, #88]	@ (80024a0 <HAL_I2C_MspInit+0xac>)
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800244e:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <HAL_I2C_MspInit+0xac>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800245a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800245e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002460:	2312      	movs	r3, #18
 8002462:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800246c:	2308      	movs	r3, #8
 800246e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002470:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002474:	4619      	mov	r1, r3
 8002476:	480b      	ldr	r0, [pc, #44]	@ (80024a4 <HAL_I2C_MspInit+0xb0>)
 8002478:	f003 fc22 	bl	8005cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800247c:	4b08      	ldr	r3, [pc, #32]	@ (80024a0 <HAL_I2C_MspInit+0xac>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002480:	4a07      	ldr	r2, [pc, #28]	@ (80024a0 <HAL_I2C_MspInit+0xac>)
 8002482:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002486:	6593      	str	r3, [r2, #88]	@ 0x58
 8002488:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <HAL_I2C_MspInit+0xac>)
 800248a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002494:	bf00      	nop
 8002496:	3778      	adds	r7, #120	@ 0x78
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40007800 	.word	0x40007800
 80024a0:	40021000 	.word	0x40021000
 80024a4:	48000800 	.word	0x48000800

080024a8 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b098      	sub	sp, #96	@ 0x60
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	2250      	movs	r2, #80	@ 0x50
 80024b6:	2100      	movs	r1, #0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f010 f95b 	bl	8012774 <memset>
  if(hrng->Instance==RNG)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a11      	ldr	r2, [pc, #68]	@ (8002508 <HAL_RNG_MspInit+0x60>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d11a      	bne.n	80024fe <HAL_RNG_MspInit+0x56>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80024c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024cc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80024ce:	2300      	movs	r3, #0
 80024d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024d2:	f107 0310 	add.w	r3, r7, #16
 80024d6:	4618      	mov	r0, r3
 80024d8:	f006 fee6 	bl	80092a8 <HAL_RCCEx_PeriphCLKConfig>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_RNG_MspInit+0x3e>
    {
      Error_Handler();
 80024e2:	f7ff feb5 	bl	8002250 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80024e6:	4b09      	ldr	r3, [pc, #36]	@ (800250c <HAL_RNG_MspInit+0x64>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ea:	4a08      	ldr	r2, [pc, #32]	@ (800250c <HAL_RNG_MspInit+0x64>)
 80024ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_RNG_MspInit+0x64>)
 80024f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 80024fe:	bf00      	nop
 8002500:	3760      	adds	r7, #96	@ 0x60
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	50060800 	.word	0x50060800
 800250c:	40021000 	.word	0x40021000

08002510 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b09e      	sub	sp, #120	@ 0x78
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	2250      	movs	r2, #80	@ 0x50
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f010 f91f 	bl	8012774 <memset>
  if(hrtc->Instance==RTC)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a24      	ldr	r2, [pc, #144]	@ (80025cc <HAL_RTC_MspInit+0xbc>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d140      	bne.n	80025c2 <HAL_RTC_MspInit+0xb2>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002540:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002544:	617b      	str	r3, [r7, #20]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002546:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800254a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	4618      	mov	r0, r3
 8002552:	f006 fea9 	bl	80092a8 <HAL_RCCEx_PeriphCLKConfig>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 800255c:	f7ff fe78 	bl	8002250 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002560:	4b1b      	ldr	r3, [pc, #108]	@ (80025d0 <HAL_RTC_MspInit+0xc0>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002566:	4a1a      	ldr	r2, [pc, #104]	@ (80025d0 <HAL_RTC_MspInit+0xc0>)
 8002568:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800256c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002570:	4b17      	ldr	r3, [pc, #92]	@ (80025d0 <HAL_RTC_MspInit+0xc0>)
 8002572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002574:	4a16      	ldr	r2, [pc, #88]	@ (80025d0 <HAL_RTC_MspInit+0xc0>)
 8002576:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800257a:	6593      	str	r3, [r2, #88]	@ 0x58
 800257c:	4b14      	ldr	r3, [pc, #80]	@ (80025d0 <HAL_RTC_MspInit+0xc0>)
 800257e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002588:	4b11      	ldr	r3, [pc, #68]	@ (80025d0 <HAL_RTC_MspInit+0xc0>)
 800258a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258c:	4a10      	ldr	r2, [pc, #64]	@ (80025d0 <HAL_RTC_MspInit+0xc0>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002594:	4b0e      	ldr	r3, [pc, #56]	@ (80025d0 <HAL_RTC_MspInit+0xc0>)
 8002596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PA1     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 80025a0:	2302      	movs	r3, #2
 80025a2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2300      	movs	r3, #0
 80025ae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 80025b0:	2300      	movs	r3, #0
 80025b2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 80025b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025b8:	4619      	mov	r1, r3
 80025ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025be:	f003 fb7f 	bl	8005cc0 <HAL_GPIO_Init>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80025c2:	bf00      	nop
 80025c4:	3778      	adds	r7, #120	@ 0x78
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40002800 	.word	0x40002800
 80025d0:	40021000 	.word	0x40021000

080025d4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	@ 0x28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 0314 	add.w	r3, r7, #20
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a17      	ldr	r2, [pc, #92]	@ (8002650 <HAL_SPI_MspInit+0x7c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d128      	bne.n	8002648 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025f6:	4b17      	ldr	r3, [pc, #92]	@ (8002654 <HAL_SPI_MspInit+0x80>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fa:	4a16      	ldr	r2, [pc, #88]	@ (8002654 <HAL_SPI_MspInit+0x80>)
 80025fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002600:	6593      	str	r3, [r2, #88]	@ 0x58
 8002602:	4b14      	ldr	r3, [pc, #80]	@ (8002654 <HAL_SPI_MspInit+0x80>)
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260e:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <HAL_SPI_MspInit+0x80>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002612:	4a10      	ldr	r2, [pc, #64]	@ (8002654 <HAL_SPI_MspInit+0x80>)
 8002614:	f043 0302 	orr.w	r3, r3, #2
 8002618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800261a:	4b0e      	ldr	r3, [pc, #56]	@ (8002654 <HAL_SPI_MspInit+0x80>)
 800261c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002626:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800262a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262c:	2302      	movs	r3, #2
 800262e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002634:	2300      	movs	r3, #0
 8002636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002638:	2305      	movs	r3, #5
 800263a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	4619      	mov	r1, r3
 8002642:	4805      	ldr	r0, [pc, #20]	@ (8002658 <HAL_SPI_MspInit+0x84>)
 8002644:	f003 fb3c 	bl	8005cc0 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002648:	bf00      	nop
 800264a:	3728      	adds	r7, #40	@ 0x28
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40003800 	.word	0x40003800
 8002654:	40021000 	.word	0x40021000
 8002658:	48000400 	.word	0x48000400

0800265c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08c      	sub	sp, #48	@ 0x30
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002664:	f107 031c 	add.w	r3, r7, #28
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a3c      	ldr	r2, [pc, #240]	@ (800276c <HAL_TIM_Encoder_MspInit+0x110>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d128      	bne.n	80026d0 <HAL_TIM_Encoder_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800267e:	4b3c      	ldr	r3, [pc, #240]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x114>)
 8002680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002682:	4a3b      	ldr	r2, [pc, #236]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x114>)
 8002684:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002688:	6613      	str	r3, [r2, #96]	@ 0x60
 800268a:	4b39      	ldr	r3, [pc, #228]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x114>)
 800268c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800268e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002696:	4b36      	ldr	r3, [pc, #216]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x114>)
 8002698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269a:	4a35      	ldr	r2, [pc, #212]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x114>)
 800269c:	f043 0304 	orr.w	r3, r3, #4
 80026a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026a2:	4b33      	ldr	r3, [pc, #204]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x114>)
 80026a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC4     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = ENC0_A_Pin|ENC0_B_Pin|ENC0_Z_Pin;
 80026ae:	2313      	movs	r3, #19
 80026b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ba:	2300      	movs	r3, #0
 80026bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80026be:	2302      	movs	r3, #2
 80026c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026c2:	f107 031c 	add.w	r3, r7, #28
 80026c6:	4619      	mov	r1, r3
 80026c8:	482a      	ldr	r0, [pc, #168]	@ (8002774 <HAL_TIM_Encoder_MspInit+0x118>)
 80026ca:	f003 faf9 	bl	8005cc0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80026ce:	e049      	b.n	8002764 <HAL_TIM_Encoder_MspInit+0x108>
  else if(htim_encoder->Instance==TIM8)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a28      	ldr	r2, [pc, #160]	@ (8002778 <HAL_TIM_Encoder_MspInit+0x11c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d144      	bne.n	8002764 <HAL_TIM_Encoder_MspInit+0x108>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026da:	4b25      	ldr	r3, [pc, #148]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x114>)
 80026dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026de:	4a24      	ldr	r2, [pc, #144]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x114>)
 80026e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80026e6:	4b22      	ldr	r3, [pc, #136]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x114>)
 80026e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x114>)
 80026f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x114>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x114>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800270a:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x114>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270e:	4a18      	ldr	r2, [pc, #96]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x114>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002716:	4b16      	ldr	r3, [pc, #88]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x114>)
 8002718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC1_Z_Pin;
 8002722:	2301      	movs	r3, #1
 8002724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	2302      	movs	r3, #2
 8002728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272e:	2300      	movs	r3, #0
 8002730:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002732:	230a      	movs	r3, #10
 8002734:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ENC1_Z_GPIO_Port, &GPIO_InitStruct);
 8002736:	f107 031c 	add.w	r3, r7, #28
 800273a:	4619      	mov	r1, r3
 800273c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002740:	f003 fabe 	bl	8005cc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 8002744:	23c0      	movs	r3, #192	@ 0xc0
 8002746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002754:	2304      	movs	r3, #4
 8002756:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002758:	f107 031c 	add.w	r3, r7, #28
 800275c:	4619      	mov	r1, r3
 800275e:	4805      	ldr	r0, [pc, #20]	@ (8002774 <HAL_TIM_Encoder_MspInit+0x118>)
 8002760:	f003 faae 	bl	8005cc0 <HAL_GPIO_Init>
}
 8002764:	bf00      	nop
 8002766:	3730      	adds	r7, #48	@ 0x30
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40012c00 	.word	0x40012c00
 8002770:	40021000 	.word	0x40021000
 8002774:	48000800 	.word	0x48000800
 8002778:	40013400 	.word	0x40013400

0800277c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a1c      	ldr	r2, [pc, #112]	@ (80027fc <HAL_TIM_Base_MspInit+0x80>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d10c      	bne.n	80027a8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800278e:	4b1c      	ldr	r3, [pc, #112]	@ (8002800 <HAL_TIM_Base_MspInit+0x84>)
 8002790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002792:	4a1b      	ldr	r2, [pc, #108]	@ (8002800 <HAL_TIM_Base_MspInit+0x84>)
 8002794:	f043 0302 	orr.w	r3, r3, #2
 8002798:	6593      	str	r3, [r2, #88]	@ 0x58
 800279a:	4b19      	ldr	r3, [pc, #100]	@ (8002800 <HAL_TIM_Base_MspInit+0x84>)
 800279c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 80027a6:	e022      	b.n	80027ee <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a15      	ldr	r2, [pc, #84]	@ (8002804 <HAL_TIM_Base_MspInit+0x88>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d10c      	bne.n	80027cc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80027b2:	4b13      	ldr	r3, [pc, #76]	@ (8002800 <HAL_TIM_Base_MspInit+0x84>)
 80027b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027b6:	4a12      	ldr	r2, [pc, #72]	@ (8002800 <HAL_TIM_Base_MspInit+0x84>)
 80027b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80027be:	4b10      	ldr	r3, [pc, #64]	@ (8002800 <HAL_TIM_Base_MspInit+0x84>)
 80027c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]
}
 80027ca:	e010      	b.n	80027ee <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM17)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002808 <HAL_TIM_Base_MspInit+0x8c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d10b      	bne.n	80027ee <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80027d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002800 <HAL_TIM_Base_MspInit+0x84>)
 80027d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027da:	4a09      	ldr	r2, [pc, #36]	@ (8002800 <HAL_TIM_Base_MspInit+0x84>)
 80027dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80027e2:	4b07      	ldr	r3, [pc, #28]	@ (8002800 <HAL_TIM_Base_MspInit+0x84>)
 80027e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
}
 80027ee:	bf00      	nop
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40000400 	.word	0x40000400
 8002800:	40021000 	.word	0x40021000
 8002804:	40014400 	.word	0x40014400
 8002808:	40014800 	.word	0x40014800

0800280c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a0a      	ldr	r2, [pc, #40]	@ (8002844 <HAL_TIM_PWM_MspInit+0x38>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d10b      	bne.n	8002836 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM15_MspInit 0 */

    /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800281e:	4b0a      	ldr	r3, [pc, #40]	@ (8002848 <HAL_TIM_PWM_MspInit+0x3c>)
 8002820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002822:	4a09      	ldr	r2, [pc, #36]	@ (8002848 <HAL_TIM_PWM_MspInit+0x3c>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002828:	6613      	str	r3, [r2, #96]	@ 0x60
 800282a:	4b07      	ldr	r3, [pc, #28]	@ (8002848 <HAL_TIM_PWM_MspInit+0x3c>)
 800282c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800282e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM15_MspInit 1 */

  }

}
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40014000 	.word	0x40014000
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	@ 0x28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a31      	ldr	r2, [pc, #196]	@ (8002930 <HAL_TIM_MspPostInit+0xe4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d139      	bne.n	80028e2 <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286e:	4b31      	ldr	r3, [pc, #196]	@ (8002934 <HAL_TIM_MspPostInit+0xe8>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002872:	4a30      	ldr	r2, [pc, #192]	@ (8002934 <HAL_TIM_MspPostInit+0xe8>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800287a:	4b2e      	ldr	r3, [pc, #184]	@ (8002934 <HAL_TIM_MspPostInit+0xe8>)
 800287c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002886:	4b2b      	ldr	r3, [pc, #172]	@ (8002934 <HAL_TIM_MspPostInit+0xe8>)
 8002888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800288a:	4a2a      	ldr	r2, [pc, #168]	@ (8002934 <HAL_TIM_MspPostInit+0xe8>)
 800288c:	f043 0302 	orr.w	r3, r3, #2
 8002890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002892:	4b28      	ldr	r3, [pc, #160]	@ (8002934 <HAL_TIM_MspPostInit+0xe8>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = SERVO_PWM0_Pin|SERVO_PWM1_Pin;
 800289e:	23c0      	movs	r3, #192	@ 0xc0
 80028a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a2:	2302      	movs	r3, #2
 80028a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028aa:	2300      	movs	r3, #0
 80028ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028ae:	2302      	movs	r3, #2
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b2:	f107 0314 	add.w	r3, r7, #20
 80028b6:	4619      	mov	r1, r3
 80028b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028bc:	f003 fa00 	bl	8005cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SERVO_PWM2_Pin|SERVO_PWM3_Pin;
 80028c0:	2303      	movs	r3, #3
 80028c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028cc:	2300      	movs	r3, #0
 80028ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028d0:	2302      	movs	r3, #2
 80028d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	4619      	mov	r1, r3
 80028da:	4817      	ldr	r0, [pc, #92]	@ (8002938 <HAL_TIM_MspPostInit+0xec>)
 80028dc:	f003 f9f0 	bl	8005cc0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80028e0:	e021      	b.n	8002926 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM15)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a15      	ldr	r2, [pc, #84]	@ (800293c <HAL_TIM_MspPostInit+0xf0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d11c      	bne.n	8002926 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ec:	4b11      	ldr	r3, [pc, #68]	@ (8002934 <HAL_TIM_MspPostInit+0xe8>)
 80028ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f0:	4a10      	ldr	r2, [pc, #64]	@ (8002934 <HAL_TIM_MspPostInit+0xe8>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002934 <HAL_TIM_MspPostInit+0xe8>)
 80028fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DRV_PWM_Pin;
 8002904:	2308      	movs	r3, #8
 8002906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002910:	2300      	movs	r3, #0
 8002912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002914:	2309      	movs	r3, #9
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DRV_PWM_GPIO_Port, &GPIO_InitStruct);
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	4619      	mov	r1, r3
 800291e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002922:	f003 f9cd 	bl	8005cc0 <HAL_GPIO_Init>
}
 8002926:	bf00      	nop
 8002928:	3728      	adds	r7, #40	@ 0x28
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40000400 	.word	0x40000400
 8002934:	40021000 	.word	0x40021000
 8002938:	48000400 	.word	0x48000400
 800293c:	40014000 	.word	0x40014000

08002940 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b0a0      	sub	sp, #128	@ 0x80
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002958:	f107 031c 	add.w	r3, r7, #28
 800295c:	2250      	movs	r2, #80	@ 0x50
 800295e:	2100      	movs	r1, #0
 8002960:	4618      	mov	r0, r3
 8002962:	f00f ff07 	bl	8012774 <memset>
  if(huart->Instance==UART5)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a64      	ldr	r2, [pc, #400]	@ (8002afc <HAL_UART_MspInit+0x1bc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d153      	bne.n	8002a18 <HAL_UART_MspInit+0xd8>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002970:	2310      	movs	r3, #16
 8002972:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002974:	2300      	movs	r3, #0
 8002976:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002978:	f107 031c 	add.w	r3, r7, #28
 800297c:	4618      	mov	r0, r3
 800297e:	f006 fc93 	bl	80092a8 <HAL_RCCEx_PeriphCLKConfig>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002988:	f7ff fc62 	bl	8002250 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800298c:	4b5c      	ldr	r3, [pc, #368]	@ (8002b00 <HAL_UART_MspInit+0x1c0>)
 800298e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002990:	4a5b      	ldr	r2, [pc, #364]	@ (8002b00 <HAL_UART_MspInit+0x1c0>)
 8002992:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002996:	6593      	str	r3, [r2, #88]	@ 0x58
 8002998:	4b59      	ldr	r3, [pc, #356]	@ (8002b00 <HAL_UART_MspInit+0x1c0>)
 800299a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a4:	4b56      	ldr	r3, [pc, #344]	@ (8002b00 <HAL_UART_MspInit+0x1c0>)
 80029a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a8:	4a55      	ldr	r2, [pc, #340]	@ (8002b00 <HAL_UART_MspInit+0x1c0>)
 80029aa:	f043 0304 	orr.w	r3, r3, #4
 80029ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029b0:	4b53      	ldr	r3, [pc, #332]	@ (8002b00 <HAL_UART_MspInit+0x1c0>)
 80029b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029bc:	4b50      	ldr	r3, [pc, #320]	@ (8002b00 <HAL_UART_MspInit+0x1c0>)
 80029be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002b00 <HAL_UART_MspInit+0x1c0>)
 80029c2:	f043 0308 	orr.w	r3, r3, #8
 80029c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002b00 <HAL_UART_MspInit+0x1c0>)
 80029ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 80029d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e2:	2300      	movs	r3, #0
 80029e4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80029e6:	2305      	movs	r3, #5
 80029e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 80029ea:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80029ee:	4619      	mov	r1, r3
 80029f0:	4844      	ldr	r0, [pc, #272]	@ (8002b04 <HAL_UART_MspInit+0x1c4>)
 80029f2:	f003 f965 	bl	8005cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_TX_Pin;
 80029f6:	2304      	movs	r3, #4
 80029f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fa:	2302      	movs	r3, #2
 80029fc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	2300      	movs	r3, #0
 8002a04:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002a06:	2305      	movs	r3, #5
 8002a08:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 8002a0a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002a0e:	4619      	mov	r1, r3
 8002a10:	483d      	ldr	r0, [pc, #244]	@ (8002b08 <HAL_UART_MspInit+0x1c8>)
 8002a12:	f003 f955 	bl	8005cc0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a16:	e06c      	b.n	8002af2 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a3b      	ldr	r2, [pc, #236]	@ (8002b0c <HAL_UART_MspInit+0x1cc>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d167      	bne.n	8002af2 <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a22:	2304      	movs	r3, #4
 8002a24:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002a26:	2300      	movs	r3, #0
 8002a28:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a2a:	f107 031c 	add.w	r3, r7, #28
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f006 fc3a 	bl	80092a8 <HAL_RCCEx_PeriphCLKConfig>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8002a3a:	f7ff fc09 	bl	8002250 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a3e:	4b30      	ldr	r3, [pc, #192]	@ (8002b00 <HAL_UART_MspInit+0x1c0>)
 8002a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a42:	4a2f      	ldr	r2, [pc, #188]	@ (8002b00 <HAL_UART_MspInit+0x1c0>)
 8002a44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a48:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b00 <HAL_UART_MspInit+0x1c0>)
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a56:	4b2a      	ldr	r3, [pc, #168]	@ (8002b00 <HAL_UART_MspInit+0x1c0>)
 8002a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5a:	4a29      	ldr	r2, [pc, #164]	@ (8002b00 <HAL_UART_MspInit+0x1c0>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a62:	4b27      	ldr	r3, [pc, #156]	@ (8002b00 <HAL_UART_MspInit+0x1c0>)
 8002a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a6e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002a72:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a74:	2302      	movs	r3, #2
 8002a76:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a80:	2307      	movs	r3, #7
 8002a82:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a84:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002a88:	4619      	mov	r1, r3
 8002a8a:	481e      	ldr	r0, [pc, #120]	@ (8002b04 <HAL_UART_MspInit+0x1c4>)
 8002a8c:	f003 f918 	bl	8005cc0 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel3;
 8002a90:	4b1f      	ldr	r3, [pc, #124]	@ (8002b10 <HAL_UART_MspInit+0x1d0>)
 8002a92:	4a20      	ldr	r2, [pc, #128]	@ (8002b14 <HAL_UART_MspInit+0x1d4>)
 8002a94:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002a96:	4b1e      	ldr	r3, [pc, #120]	@ (8002b10 <HAL_UART_MspInit+0x1d0>)
 8002a98:	221d      	movs	r2, #29
 8002a9a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002b10 <HAL_UART_MspInit+0x1d0>)
 8002a9e:	2210      	movs	r2, #16
 8002aa0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b10 <HAL_UART_MspInit+0x1d0>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002aa8:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <HAL_UART_MspInit+0x1d0>)
 8002aaa:	2280      	movs	r2, #128	@ 0x80
 8002aac:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aae:	4b18      	ldr	r3, [pc, #96]	@ (8002b10 <HAL_UART_MspInit+0x1d0>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ab4:	4b16      	ldr	r3, [pc, #88]	@ (8002b10 <HAL_UART_MspInit+0x1d0>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002aba:	4b15      	ldr	r3, [pc, #84]	@ (8002b10 <HAL_UART_MspInit+0x1d0>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ac0:	4b13      	ldr	r3, [pc, #76]	@ (8002b10 <HAL_UART_MspInit+0x1d0>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002ac6:	4812      	ldr	r0, [pc, #72]	@ (8002b10 <HAL_UART_MspInit+0x1d0>)
 8002ac8:	f002 fdd4 	bl	8005674 <HAL_DMA_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_UART_MspInit+0x196>
      Error_Handler();
 8002ad2:	f7ff fbbd 	bl	8002250 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b10 <HAL_UART_MspInit+0x1d0>)
 8002ada:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002adc:	4a0c      	ldr	r2, [pc, #48]	@ (8002b10 <HAL_UART_MspInit+0x1d0>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 14, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	210e      	movs	r1, #14
 8002ae6:	2027      	movs	r0, #39	@ 0x27
 8002ae8:	f002 fd9c 	bl	8005624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002aec:	2027      	movs	r0, #39	@ 0x27
 8002aee:	f002 fdb3 	bl	8005658 <HAL_NVIC_EnableIRQ>
}
 8002af2:	bf00      	nop
 8002af4:	3780      	adds	r7, #128	@ 0x80
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40005000 	.word	0x40005000
 8002b00:	40021000 	.word	0x40021000
 8002b04:	48000800 	.word	0x48000800
 8002b08:	48000c00 	.word	0x48000c00
 8002b0c:	40004800 	.word	0x40004800
 8002b10:	200007f0 	.word	0x200007f0
 8002b14:	40020030 	.word	0x40020030

08002b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08c      	sub	sp, #48	@ 0x30
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b28:	4b2c      	ldr	r3, [pc, #176]	@ (8002bdc <HAL_InitTick+0xc4>)
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002bdc <HAL_InitTick+0xc4>)
 8002b2e:	f043 0310 	orr.w	r3, r3, #16
 8002b32:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b34:	4b29      	ldr	r3, [pc, #164]	@ (8002bdc <HAL_InitTick+0xc4>)
 8002b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b40:	f107 020c 	add.w	r2, r7, #12
 8002b44:	f107 0310 	add.w	r3, r7, #16
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f006 fb34 	bl	80091b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b50:	f006 fb06 	bl	8009160 <HAL_RCC_GetPCLK1Freq>
 8002b54:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b58:	4a21      	ldr	r2, [pc, #132]	@ (8002be0 <HAL_InitTick+0xc8>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	0c9b      	lsrs	r3, r3, #18
 8002b60:	3b01      	subs	r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b64:	4b1f      	ldr	r3, [pc, #124]	@ (8002be4 <HAL_InitTick+0xcc>)
 8002b66:	4a20      	ldr	r2, [pc, #128]	@ (8002be8 <HAL_InitTick+0xd0>)
 8002b68:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002be4 <HAL_InitTick+0xcc>)
 8002b6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b70:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002b72:	4a1c      	ldr	r2, [pc, #112]	@ (8002be4 <HAL_InitTick+0xcc>)
 8002b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b76:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002b78:	4b1a      	ldr	r3, [pc, #104]	@ (8002be4 <HAL_InitTick+0xcc>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7e:	4b19      	ldr	r3, [pc, #100]	@ (8002be4 <HAL_InitTick+0xcc>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002b84:	4817      	ldr	r0, [pc, #92]	@ (8002be4 <HAL_InitTick+0xcc>)
 8002b86:	f007 ff41 	bl	800aa0c <HAL_TIM_Base_Init>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002b90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d11b      	bne.n	8002bd0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002b98:	4812      	ldr	r0, [pc, #72]	@ (8002be4 <HAL_InitTick+0xcc>)
 8002b9a:	f007 ff8f 	bl	800aabc <HAL_TIM_Base_Start_IT>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002ba4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d111      	bne.n	8002bd0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002bac:	2036      	movs	r0, #54	@ 0x36
 8002bae:	f002 fd53 	bl	8005658 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b0f      	cmp	r3, #15
 8002bb6:	d808      	bhi.n	8002bca <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	2036      	movs	r0, #54	@ 0x36
 8002bbe:	f002 fd31 	bl	8005624 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bec <HAL_InitTick+0xd4>)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	e002      	b.n	8002bd0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002bd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3730      	adds	r7, #48	@ 0x30
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	431bde83 	.word	0x431bde83
 8002be4:	20000850 	.word	0x20000850
 8002be8:	40001000 	.word	0x40001000
 8002bec:	20000004 	.word	0x20000004

08002bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bf4:	bf00      	nop
 8002bf6:	e7fd      	b.n	8002bf4 <NMI_Handler+0x4>

08002bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <HardFault_Handler+0x4>

08002c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c04:	bf00      	nop
 8002c06:	e7fd      	b.n	8002c04 <MemManage_Handler+0x4>

08002c08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c0c:	bf00      	nop
 8002c0e:	e7fd      	b.n	8002c0c <BusFault_Handler+0x4>

08002c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c14:	bf00      	nop
 8002c16:	e7fd      	b.n	8002c14 <UsageFault_Handler+0x4>

08002c18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002c54:	4802      	ldr	r0, [pc, #8]	@ (8002c60 <DMA1_Channel3_IRQHandler+0x10>)
 8002c56:	f002 fe75 	bl	8005944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	200007f0 	.word	0x200007f0

08002c64 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c68:	4802      	ldr	r0, [pc, #8]	@ (8002c74 <USB_LP_IRQHandler+0x10>)
 8002c6a:	f003 ffa8 	bl	8006bbe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000ec8 	.word	0x20000ec8

08002c78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c7c:	4802      	ldr	r0, [pc, #8]	@ (8002c88 <USART3_IRQHandler+0x10>)
 8002c7e:	f009 fc87 	bl	800c590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	2000075c 	.word	0x2000075c

08002c8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c90:	4802      	ldr	r0, [pc, #8]	@ (8002c9c <TIM6_DAC_IRQHandler+0x10>)
 8002c92:	f008 f90e 	bl	800aeb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000850 	.word	0x20000850

08002ca0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return 1;
 8002ca4:	2301      	movs	r3, #1
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <_kill>:

int _kill(int pid, int sig)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cba:	f00f fd77 	bl	80127ac <__errno>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2216      	movs	r2, #22
 8002cc2:	601a      	str	r2, [r3, #0]
  return -1;
 8002cc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <_exit>:

void _exit (int status)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff ffe7 	bl	8002cb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ce2:	bf00      	nop
 8002ce4:	e7fd      	b.n	8002ce2 <_exit+0x12>

08002ce6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	e00a      	b.n	8002d0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cf8:	f3af 8000 	nop.w
 8002cfc:	4601      	mov	r1, r0
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	60ba      	str	r2, [r7, #8]
 8002d04:	b2ca      	uxtb	r2, r1
 8002d06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	dbf0      	blt.n	8002cf8 <_read+0x12>
  }

  return len;
 8002d16:	687b      	ldr	r3, [r7, #4]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d48:	605a      	str	r2, [r3, #4]
  return 0;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <_isatty>:

int _isatty(int file)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d60:	2301      	movs	r3, #1
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b085      	sub	sp, #20
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d90:	4a14      	ldr	r2, [pc, #80]	@ (8002de4 <_sbrk+0x5c>)
 8002d92:	4b15      	ldr	r3, [pc, #84]	@ (8002de8 <_sbrk+0x60>)
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d9c:	4b13      	ldr	r3, [pc, #76]	@ (8002dec <_sbrk+0x64>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d102      	bne.n	8002daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002da4:	4b11      	ldr	r3, [pc, #68]	@ (8002dec <_sbrk+0x64>)
 8002da6:	4a12      	ldr	r2, [pc, #72]	@ (8002df0 <_sbrk+0x68>)
 8002da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002daa:	4b10      	ldr	r3, [pc, #64]	@ (8002dec <_sbrk+0x64>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4413      	add	r3, r2
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d207      	bcs.n	8002dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002db8:	f00f fcf8 	bl	80127ac <__errno>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	220c      	movs	r2, #12
 8002dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dc6:	e009      	b.n	8002ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dc8:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <_sbrk+0x64>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dce:	4b07      	ldr	r3, [pc, #28]	@ (8002dec <_sbrk+0x64>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	4a05      	ldr	r2, [pc, #20]	@ (8002dec <_sbrk+0x64>)
 8002dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dda:	68fb      	ldr	r3, [r7, #12]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	2001c000 	.word	0x2001c000
 8002de8:	00000600 	.word	0x00000600
 8002dec:	2000089c 	.word	0x2000089c
 8002df0:	20001710 	.word	0x20001710

08002df4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002df8:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <SystemInit+0x20>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfe:	4a05      	ldr	r2, [pc, #20]	@ (8002e14 <SystemInit+0x20>)
 8002e00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e18:	480d      	ldr	r0, [pc, #52]	@ (8002e50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e1a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e1c:	f7ff ffea 	bl	8002df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e20:	480c      	ldr	r0, [pc, #48]	@ (8002e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e22:	490d      	ldr	r1, [pc, #52]	@ (8002e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e24:	4a0d      	ldr	r2, [pc, #52]	@ (8002e5c <LoopForever+0xe>)
  movs r3, #0
 8002e26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002e28:	e002      	b.n	8002e30 <LoopCopyDataInit>

08002e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e2e:	3304      	adds	r3, #4

08002e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e34:	d3f9      	bcc.n	8002e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e36:	4a0a      	ldr	r2, [pc, #40]	@ (8002e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e38:	4c0a      	ldr	r4, [pc, #40]	@ (8002e64 <LoopForever+0x16>)
  movs r3, #0
 8002e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e3c:	e001      	b.n	8002e42 <LoopFillZerobss>

08002e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e40:	3204      	adds	r2, #4

08002e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e44:	d3fb      	bcc.n	8002e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e46:	f00f fcb7 	bl	80127b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e4a:	f7fe f917 	bl	800107c <main>

08002e4e <LoopForever>:

LoopForever:
    b LoopForever
 8002e4e:	e7fe      	b.n	8002e4e <LoopForever>
  ldr   r0, =_estack
 8002e50:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e58:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8002e5c:	08015c80 	.word	0x08015c80
  ldr r2, =_sbss
 8002e60:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8002e64:	2000170c 	.word	0x2000170c

08002e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e68:	e7fe      	b.n	8002e68 <ADC1_2_IRQHandler>

08002e6a <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d105      	bne.n	8002e84 <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002e78:	b672      	cpsid	i
}
 8002e7a:	bf00      	nop
 8002e7c:	f7ff f9e8 	bl	8002250 <Error_Handler>
 8002e80:	bf00      	nop
 8002e82:	e7fd      	b.n	8002e80 <stm32_lock_init+0x16>
  lock->flag = 0;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	705a      	strb	r2, [r3, #1]
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb0:	b672      	cpsid	i
}
 8002eb2:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002eb4:	f3bf 8f4f 	dsb	sy
}
 8002eb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002eba:	f3bf 8f6f 	isb	sy
}
 8002ebe:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d105      	bne.n	8002ed2 <stm32_lock_acquire+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002ec6:	b672      	cpsid	i
}
 8002ec8:	bf00      	nop
 8002eca:	f7ff f9c1 	bl	8002250 <Error_Handler>
 8002ece:	bf00      	nop
 8002ed0:	e7fd      	b.n	8002ece <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	785b      	ldrb	r3, [r3, #1]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d103      	bne.n	8002ee2 <stm32_lock_acquire+0x4a>
  {
    lock->flag = flag;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	7bfa      	ldrb	r2, [r7, #15]
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e009      	b.n	8002ef6 <stm32_lock_acquire+0x5e>
  }
  else if (lock->counter == UINT8_MAX)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	785b      	ldrb	r3, [r3, #1]
 8002ee6:	2bff      	cmp	r3, #255	@ 0xff
 8002ee8:	d105      	bne.n	8002ef6 <stm32_lock_acquire+0x5e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002eea:	b672      	cpsid	i
}
 8002eec:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8002eee:	f7ff f9af 	bl	8002250 <Error_Handler>
 8002ef2:	bf00      	nop
 8002ef4:	e7fd      	b.n	8002ef2 <stm32_lock_acquire+0x5a>
  }
  lock->counter++;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	785b      	ldrb	r3, [r3, #1]
 8002efa:	3301      	adds	r3, #1
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	705a      	strb	r2, [r3, #1]
}
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d105      	bne.n	8002f24 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f18:	b672      	cpsid	i
}
 8002f1a:	bf00      	nop
 8002f1c:	f7ff f998 	bl	8002250 <Error_Handler>
 8002f20:	bf00      	nop
 8002f22:	e7fd      	b.n	8002f20 <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	785b      	ldrb	r3, [r3, #1]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d105      	bne.n	8002f38 <stm32_lock_release+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f2c:	b672      	cpsid	i
}
 8002f2e:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8002f30:	f7ff f98e 	bl	8002250 <Error_Handler>
 8002f34:	bf00      	nop
 8002f36:	e7fd      	b.n	8002f34 <stm32_lock_release+0x2a>
  }
  lock->counter--;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	785b      	ldrb	r3, [r3, #1]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	785b      	ldrb	r3, [r3, #1]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d105      	bne.n	8002f58 <stm32_lock_release+0x4e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <stm32_lock_release+0x4e>
  __ASM volatile ("cpsie i" : : : "memory");
 8002f54:	b662      	cpsie	i
}
 8002f56:	bf00      	nop
  {
    __enable_irq();
  }
}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d105      	bne.n	8002f7a <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8002f6e:	f00f fc1d 	bl	80127ac <__errno>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2216      	movs	r2, #22
 8002f76:	601a      	str	r2, [r3, #0]
    return;
 8002f78:	e016      	b.n	8002fa8 <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002f7a:	2002      	movs	r0, #2
 8002f7c:	f00f f8d4 	bl	8012128 <malloc>
 8002f80:	4603      	mov	r3, r0
 8002f82:	461a      	mov	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff68 	bl	8002e6a <stm32_lock_init>
    return;
 8002f9a:	e005      	b.n	8002fa8 <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f9c:	b672      	cpsid	i
}
 8002f9e:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8002fa0:	f7ff f956 	bl	8002250 <Error_Handler>
 8002fa4:	bf00      	nop
 8002fa6:	e7fd      	b.n	8002fa4 <__retarget_lock_init_recursive+0x44>
}
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d105      	bne.n	8002fc8 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002fbc:	b672      	cpsid	i
}
 8002fbe:	bf00      	nop
 8002fc0:	f7ff f946 	bl	8002250 <Error_Handler>
 8002fc4:	bf00      	nop
 8002fc6:	e7fd      	b.n	8002fc4 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff ff64 	bl	8002e98 <stm32_lock_acquire>
}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d105      	bne.n	8002ff2 <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe6:	b672      	cpsid	i
}
 8002fe8:	bf00      	nop
 8002fea:	f7ff f931 	bl	8002250 <Error_Handler>
 8002fee:	bf00      	nop
 8002ff0:	e7fd      	b.n	8002fee <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff ff88 	bl	8002f0a <stm32_lock_release>
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <QENC_Init_Encoder0>:
#include "AMT10E2.h"

// Initialize encoder interface on TIM1
void QENC_Init_Encoder0(void) {
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	@ 0x28
 8003008:	af00      	add	r7, sp, #0
    TIM_Encoder_InitTypeDef encoderConfig = {0};
 800300a:	1d3b      	adds	r3, r7, #4
 800300c:	2224      	movs	r2, #36	@ 0x24
 800300e:	2100      	movs	r1, #0
 8003010:	4618      	mov	r0, r3
 8003012:	f00f fbaf 	bl	8012774 <memset>

    encoderConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003016:	2303      	movs	r3, #3
 8003018:	607b      	str	r3, [r7, #4]
    encoderConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
    encoderConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800301e:	2301      	movs	r3, #1
 8003020:	60fb      	str	r3, [r7, #12]
    encoderConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003022:	2300      	movs	r3, #0
 8003024:	613b      	str	r3, [r7, #16]
    encoderConfig.IC1Filter = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]

    encoderConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
    encoderConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800302e:	2301      	movs	r3, #1
 8003030:	61fb      	str	r3, [r7, #28]
    encoderConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003032:	2300      	movs	r3, #0
 8003034:	623b      	str	r3, [r7, #32]
    encoderConfig.IC2Filter = 0;
 8003036:	2300      	movs	r3, #0
 8003038:	627b      	str	r3, [r7, #36]	@ 0x24

    htim1.Instance = TIM1;
 800303a:	4b0e      	ldr	r3, [pc, #56]	@ (8003074 <QENC_Init_Encoder0+0x70>)
 800303c:	4a0e      	ldr	r2, [pc, #56]	@ (8003078 <QENC_Init_Encoder0+0x74>)
 800303e:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 0;
 8003040:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <QENC_Init_Encoder0+0x70>)
 8003042:	2200      	movs	r2, #0
 8003044:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003046:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <QENC_Init_Encoder0+0x70>)
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 0xFFFF;
 800304c:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <QENC_Init_Encoder0+0x70>)
 800304e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003052:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003054:	4b07      	ldr	r3, [pc, #28]	@ (8003074 <QENC_Init_Encoder0+0x70>)
 8003056:	2200      	movs	r2, #0
 8003058:	611a      	str	r2, [r3, #16]

    HAL_TIM_Encoder_Init(&htim1, &encoderConfig);
 800305a:	1d3b      	adds	r3, r7, #4
 800305c:	4619      	mov	r1, r3
 800305e:	4805      	ldr	r0, [pc, #20]	@ (8003074 <QENC_Init_Encoder0+0x70>)
 8003060:	f007 fdf3 	bl	800ac4a <HAL_TIM_Encoder_Init>
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8003064:	213c      	movs	r1, #60	@ 0x3c
 8003066:	4803      	ldr	r0, [pc, #12]	@ (8003074 <QENC_Init_Encoder0+0x70>)
 8003068:	f007 fe95 	bl	800ad96 <HAL_TIM_Encoder_Start>
}
 800306c:	bf00      	nop
 800306e:	3728      	adds	r7, #40	@ 0x28
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	20000500 	.word	0x20000500
 8003078:	40012c00 	.word	0x40012c00

0800307c <QENC_Get_Encoder0_Count>:
    HAL_TIM_Encoder_Init(&htim8, &encoderConfig);
    HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
}

// Get signed count from Encoder 0
int16_t QENC_Get_Encoder0_Count(void) {
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
    return (int16_t)__HAL_TIM_GET_COUNTER(&htim1);
 8003080:	4b04      	ldr	r3, [pc, #16]	@ (8003094 <QENC_Get_Encoder0_Count+0x18>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003086:	b21b      	sxth	r3, r3
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000500 	.word	0x20000500

08003098 <BMM150_enable_chip_select>:
	GPIO_TypeDef* chip_select_port;
	uint16_t chip_select_pin;
};

void BMM150_enable_chip_select(GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(cs_port, cs_gpio_pin, GPIO_PIN_RESET);
 80030a4:	887b      	ldrh	r3, [r7, #2]
 80030a6:	2200      	movs	r2, #0
 80030a8:	4619      	mov	r1, r3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f002 ffa2 	bl	8005ff4 <HAL_GPIO_WritePin>
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <BMM150_disable_chip_select>:

void BMM150_disable_chip_select(GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(cs_port, cs_gpio_pin, GPIO_PIN_SET);
 80030c4:	887b      	ldrh	r3, [r7, #2]
 80030c6:	2201      	movs	r2, #1
 80030c8:	4619      	mov	r1, r3
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f002 ff92 	bl	8005ff4 <HAL_GPIO_WritePin>
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <BMM150_SPI_read>:
	osDelay(period_in_micro_s / tick_amount);
}
*/

BMM150_INTF_RET_TYPE BMM150_SPI_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	603b      	str	r3, [r7, #0]
 80030e4:	4603      	mov	r3, r0
 80030e6:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	75fb      	strb	r3, [r7, #23]
	struct spi_interface *spi = (struct spi_interface *)intf_ptr;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	613b      	str	r3, [r7, #16]

	BMM150_enable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	891b      	ldrh	r3, [r3, #8]
 80030f8:	4619      	mov	r1, r3
 80030fa:	4610      	mov	r0, r2
 80030fc:	f7ff ffcc 	bl	8003098 <BMM150_enable_chip_select>

	status = HAL_SPI_Transmit(spi->spi_handle, reg_addr, sizeof(reg_addr), BMM150_TIMEOUT_DURATION);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	4619      	mov	r1, r3
 8003108:	230a      	movs	r3, #10
 800310a:	2201      	movs	r2, #1
 800310c:	f006 fdf4 	bl	8009cf8 <HAL_SPI_Transmit>
 8003110:	4603      	mov	r3, r0
 8003112:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(spi->spi_handle, reg_data, length, BMM150_TIMEOUT_DURATION);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	b29a      	uxth	r2, r3
 800311c:	230a      	movs	r3, #10
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	f006 ff60 	bl	8009fe4 <HAL_SPI_Receive>
 8003124:	4603      	mov	r3, r0
 8003126:	75fb      	strb	r3, [r7, #23]

	BMM150_disable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	891b      	ldrh	r3, [r3, #8]
 8003130:	4619      	mov	r1, r3
 8003132:	4610      	mov	r0, r2
 8003134:	f7ff ffc0 	bl	80030b8 <BMM150_disable_chip_select>


	return (BMM150_INTF_RET_TYPE)status;
 8003138:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <BMM150_SPI_write>:

BMM150_INTF_RET_TYPE BMM150_SPI_write(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	4603      	mov	r3, r0
 8003152:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	75fb      	strb	r3, [r7, #23]
	struct spi_interface *spi = (struct spi_interface *)intf_ptr;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	613b      	str	r3, [r7, #16]

	BMM150_enable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	891b      	ldrh	r3, [r3, #8]
 8003164:	4619      	mov	r1, r3
 8003166:	4610      	mov	r0, r2
 8003168:	f7ff ff96 	bl	8003098 <BMM150_enable_chip_select>

	status = HAL_SPI_Transmit(spi->spi_handle, reg_addr, sizeof(reg_addr), BMM150_TIMEOUT_DURATION);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	7bfb      	ldrb	r3, [r7, #15]
 8003172:	4619      	mov	r1, r3
 8003174:	230a      	movs	r3, #10
 8003176:	2201      	movs	r2, #1
 8003178:	f006 fdbe 	bl	8009cf8 <HAL_SPI_Transmit>
 800317c:	4603      	mov	r3, r0
 800317e:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Transmit(spi->spi_handle, reg_data, length, BMM150_TIMEOUT_DURATION);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	b29a      	uxth	r2, r3
 8003188:	230a      	movs	r3, #10
 800318a:	68b9      	ldr	r1, [r7, #8]
 800318c:	f006 fdb4 	bl	8009cf8 <HAL_SPI_Transmit>
 8003190:	4603      	mov	r3, r0
 8003192:	75fb      	strb	r3, [r7, #23]

	BMM150_disable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	891b      	ldrh	r3, [r3, #8]
 800319c:	4619      	mov	r1, r3
 800319e:	4610      	mov	r0, r2
 80031a0:	f7ff ff8a 	bl	80030b8 <BMM150_disable_chip_select>

	return (BMM150_INTF_RET_TYPE)status;
 80031a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <BMM150_spi_init>:

struct bmm150_dev BMM150_spi_init(SPI_HandleTypeDef *spi_handle, GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 80031b0:	b5b0      	push	{r4, r5, r7, lr}
 80031b2:	b09e      	sub	sp, #120	@ 0x78
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	807b      	strh	r3, [r7, #2]
	struct bmm150_dev bmm150 = (struct bmm150_dev){ 0 };
 80031be:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80031c2:	222c      	movs	r2, #44	@ 0x2c
 80031c4:	2100      	movs	r1, #0
 80031c6:	4618      	mov	r0, r3
 80031c8:	f00f fad4 	bl	8012774 <memset>

	if (spi_handle == NULL)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10f      	bne.n	80031f2 <BMM150_spi_init+0x42>
	{
		bmm150.intf_rslt = BMM150_E_NULL_PTR;
 80031d2:	23ff      	movs	r3, #255	@ 0xff
 80031d4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
		return bmm150;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	461d      	mov	r5, r3
 80031dc:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 80031e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031e8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80031ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80031f0:	e026      	b.n	8003240 <BMM150_spi_init+0x90>
	}

	struct spi_interface my_spi = {
 80031f2:	f107 0308 	add.w	r3, r7, #8
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	1d3b      	adds	r3, r7, #4
 80031fa:	61bb      	str	r3, [r7, #24]
 80031fc:	887b      	ldrh	r3, [r7, #2]
 80031fe:	83bb      	strh	r3, [r7, #28]
		.spi_handle = &spi_handle,
		.chip_select_port = &cs_port,
		.chip_select_pin = cs_gpio_pin
	};

	bmm150.intf = BMM150_SPI_INTF;
 8003200:	2300      	movs	r3, #0
 8003202:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	bmm150.read = BMM150_SPI_read;
 8003206:	4b10      	ldr	r3, [pc, #64]	@ (8003248 <BMM150_spi_init+0x98>)
 8003208:	65bb      	str	r3, [r7, #88]	@ 0x58
	bmm150.write = BMM150_SPI_write;
 800320a:	4b10      	ldr	r3, [pc, #64]	@ (800324c <BMM150_spi_init+0x9c>)
 800320c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	bmm150.delay_us = HAL_Delay;
 800320e:	4b10      	ldr	r3, [pc, #64]	@ (8003250 <BMM150_spi_init+0xa0>)
 8003210:	663b      	str	r3, [r7, #96]	@ 0x60
	bmm150.intf_ptr = &my_spi;
 8003212:	f107 0314 	add.w	r3, r7, #20
 8003216:	653b      	str	r3, [r7, #80]	@ 0x50

	//NOTE: Potential error: is chip id initialized properly?
	bmm150.intf_rslt = bmm150_init(&bmm150);
 8003218:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800321c:	4618      	mov	r0, r3
 800321e:	f000 f819 	bl	8003254 <bmm150_init>
 8003222:	4603      	mov	r3, r0
 8003224:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	return bmm150;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	461d      	mov	r5, r3
 800322c:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8003230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003238:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800323c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	3778      	adds	r7, #120	@ 0x78
 8003244:	46bd      	mov	sp, r7
 8003246:	bdb0      	pop	{r4, r5, r7, pc}
 8003248:	080030d9 	.word	0x080030d9
 800324c:	08003145 	.word	0x08003145
 8003250:	08004249 	.word	0x08004249

08003254 <bmm150_init>:
 *  @brief This API is the entry point, Call this API before using other APIs.
 *  This API reads the chip-id of the sensor which is the first step to
 *  verify the sensor and updates the trim parameters of the sensor.
 */
int8_t bmm150_init(struct bmm150_dev *dev)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	73bb      	strb	r3, [r7, #14]

    /* Power up the sensor from suspend to sleep mode */
    rslt = set_power_control_bit(BMM150_POWER_CNTRL_ENABLE, dev);
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	2001      	movs	r0, #1
 8003264:	f000 f8ac 	bl	80033c0 <set_power_control_bit>
 8003268:	4603      	mov	r3, r0
 800326a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800326c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d11e      	bne.n	80032b2 <bmm150_init+0x5e>
    {
        /* Start-up time delay of 3ms */
        dev->delay_us(BMM150_START_UP_TIME, dev->intf_ptr);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6852      	ldr	r2, [r2, #4]
 800327c:	4611      	mov	r1, r2
 800327e:	2003      	movs	r0, #3
 8003280:	4798      	blx	r3

        /* Chip ID of the sensor is read */
        rslt = bmm150_get_regs(BMM150_REG_CHIP_ID, &chip_id, 1, dev);
 8003282:	f107 010e 	add.w	r1, r7, #14
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	2040      	movs	r0, #64	@ 0x40
 800328c:	f000 f843 	bl	8003316 <bmm150_get_regs>
 8003290:	4603      	mov	r3, r0
 8003292:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMM150_OK)
 8003294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <bmm150_init+0x5e>
        {
            /* Check for chip id validity */
            if (chip_id == BMM150_CHIP_ID)
 800329c:	7bbb      	ldrb	r3, [r7, #14]
 800329e:	2b32      	cmp	r3, #50	@ 0x32
 80032a0:	d107      	bne.n	80032b2 <bmm150_init+0x5e>
            {
                dev->chip_id = chip_id;
 80032a2:	7bba      	ldrb	r2, [r7, #14]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	701a      	strb	r2, [r3, #0]

                /* Function to update trim values */
                rslt = read_trim_registers(dev);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f8c3 	bl	8003434 <read_trim_registers>
 80032ae:	4603      	mov	r3, r0
 80032b0:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80032b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <bmm150_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmm150_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 80032be:	b590      	push	{r4, r7, lr}
 80032c0:	b087      	sub	sp, #28
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	603b      	str	r3, [r7, #0]
 80032ca:	4603      	mov	r3, r0
 80032cc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80032ce:	6838      	ldr	r0, [r7, #0]
 80032d0:	f000 f852 	bl	8003378 <null_ptr_check>
 80032d4:	4603      	mov	r3, r0
 80032d6:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL) && (len != 0))
 80032d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d112      	bne.n	8003306 <bmm150_set_regs+0x48>
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00f      	beq.n	8003306 <bmm150_set_regs+0x48>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00c      	beq.n	8003306 <bmm150_set_regs+0x48>
        /* Write the data to the reg_addr */

        /* SPI write requires to set The MSB of reg_addr as 0
         * but in default the MSB is always 0
         */
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	691c      	ldr	r4, [r3, #16]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	7bf8      	ldrb	r0, [r7, #15]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	47a0      	blx	r4
 80032fc:	4603      	mov	r3, r0
 80032fe:	461a      	mov	r2, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	721a      	strb	r2, [r3, #8]
 8003304:	e001      	b.n	800330a <bmm150_set_regs+0x4c>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 8003306:	23ff      	movs	r3, #255	@ 0xff
 8003308:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800330a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800330e:	4618      	mov	r0, r3
 8003310:	371c      	adds	r7, #28
 8003312:	46bd      	mov	sp, r7
 8003314:	bd90      	pop	{r4, r7, pc}

08003316 <bmm150_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmm150_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 8003316:	b590      	push	{r4, r7, lr}
 8003318:	b087      	sub	sp, #28
 800331a:	af00      	add	r7, sp, #0
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
 8003322:	4603      	mov	r3, r0
 8003324:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8003326:	6838      	ldr	r0, [r7, #0]
 8003328:	f000 f826 	bl	8003378 <null_ptr_check>
 800332c:	4603      	mov	r3, r0
 800332e:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL))
 8003330:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d117      	bne.n	8003368 <bmm150_get_regs+0x52>
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d014      	beq.n	8003368 <bmm150_get_regs+0x52>
    {
        if (dev->intf != BMM150_I2C_INTF)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	785b      	ldrb	r3, [r3, #1]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d003      	beq.n	800334e <bmm150_get_regs+0x38>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | 0x80;
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800334c:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68dc      	ldr	r4, [r3, #12]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	7bf8      	ldrb	r0, [r7, #15]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	68b9      	ldr	r1, [r7, #8]
 800335c:	47a0      	blx	r4
 800335e:	4603      	mov	r3, r0
 8003360:	461a      	mov	r2, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	721a      	strb	r2, [r3, #8]
 8003366:	e001      	b.n	800336c <bmm150_get_regs+0x56>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 8003368:	23ff      	movs	r3, #255	@ 0xff
 800336a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800336c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003370:	4618      	mov	r0, r3
 8003372:	371c      	adds	r7, #28
 8003374:	46bd      	mov	sp, r7
 8003376:	bd90      	pop	{r4, r7, pc}

08003378 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmm150_dev *dev)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00f      	beq.n	80033a6 <null_ptr_check+0x2e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00b      	beq.n	80033a6 <null_ptr_check+0x2e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d007      	beq.n	80033a6 <null_ptr_check+0x2e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d102      	bne.n	80033ac <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMM150_E_NULL_PTR;
 80033a6:	23ff      	movs	r3, #255	@ 0xff
 80033a8:	73fb      	strb	r3, [r7, #15]
 80033aa:	e001      	b.n	80033b0 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMM150_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80033b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <set_power_control_bit>:

/*!
 * @brief This internal API sets/resets the power control bit of 0x4B register.
 */
static int8_t set_power_control_bit(uint8_t pwrcntrl_bit, struct bmm150_dev *dev)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	6039      	str	r1, [r7, #0]
 80033ca:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	73bb      	strb	r3, [r7, #14]

    /* Power control register 0x4B is read */
    rslt = bmm150_get_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 80033d0:	f107 010e 	add.w	r1, r7, #14
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	2201      	movs	r2, #1
 80033d8:	204b      	movs	r0, #75	@ 0x4b
 80033da:	f7ff ff9c 	bl	8003316 <bmm150_get_regs>
 80033de:	4603      	mov	r3, r0
 80033e0:	73fb      	strb	r3, [r7, #15]

    /* Proceed if everything is fine until now */
    if (rslt == BMM150_OK)
 80033e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d11e      	bne.n	8003428 <set_power_control_bit+0x68>
    {
        /* Sets the value of power control bit */
        reg_data = BMM150_SET_BITS_POS_0(reg_data, BMM150_PWR_CNTRL, pwrcntrl_bit);
 80033ea:	7bbb      	ldrb	r3, [r7, #14]
 80033ec:	b25b      	sxtb	r3, r3
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	b25a      	sxtb	r2, r3
 80033f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	b25b      	sxtb	r3, r3
 80033fe:	4313      	orrs	r3, r2
 8003400:	b25b      	sxtb	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 8003406:	f107 010e 	add.w	r1, r7, #14
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2201      	movs	r2, #1
 800340e:	204b      	movs	r0, #75	@ 0x4b
 8003410:	f7ff ff55 	bl	80032be <bmm150_set_regs>
 8003414:	4603      	mov	r3, r0
 8003416:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMM150_OK)
 8003418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d103      	bne.n	8003428 <set_power_control_bit+0x68>
        {
            /* Store the power control bit
             * value in dev structure
             */
            dev->pwr_cntrl_bit = pwrcntrl_bit;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	79fa      	ldrb	r2, [r7, #7]
 8003424:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        }
    }

    return rslt;
 8003428:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <read_trim_registers>:
/*!
 * @brief This internal API reads the trim registers of the sensor and stores
 * the trim values in the "trim_data" of device structure.
 */
static int8_t read_trim_registers(struct bmm150_dev *dev)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t trim_x1y1[2] = { 0 };
 800343c:	2300      	movs	r3, #0
 800343e:	833b      	strh	r3, [r7, #24]
    uint8_t trim_xyz_data[4] = { 0 };
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
    uint8_t trim_xy1xy2[10] = { 0 };
 8003444:	2300      	movs	r3, #0
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	f107 030c 	add.w	r3, r7, #12
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	809a      	strh	r2, [r3, #4]
    uint16_t temp_msb = 0;
 8003452:	2300      	movs	r3, #0
 8003454:	83bb      	strh	r3, [r7, #28]

    /* Trim register value is read */
    rslt = bmm150_get_regs(BMM150_DIG_X1, trim_x1y1, 2, dev);
 8003456:	f107 0118 	add.w	r1, r7, #24
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2202      	movs	r2, #2
 800345e:	205d      	movs	r0, #93	@ 0x5d
 8003460:	f7ff ff59 	bl	8003316 <bmm150_get_regs>
 8003464:	4603      	mov	r3, r0
 8003466:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 8003468:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d16a      	bne.n	8003546 <read_trim_registers+0x112>
    {
        rslt = bmm150_get_regs(BMM150_DIG_Z4_LSB, trim_xyz_data, 4, dev);
 8003470:	f107 0114 	add.w	r1, r7, #20
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2204      	movs	r2, #4
 8003478:	2062      	movs	r0, #98	@ 0x62
 800347a:	f7ff ff4c 	bl	8003316 <bmm150_get_regs>
 800347e:	4603      	mov	r3, r0
 8003480:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMM150_OK)
 8003482:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d15d      	bne.n	8003546 <read_trim_registers+0x112>
        {
            rslt = bmm150_get_regs(BMM150_DIG_Z2_LSB, trim_xy1xy2, 10, dev);
 800348a:	f107 0108 	add.w	r1, r7, #8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	220a      	movs	r2, #10
 8003492:	2068      	movs	r0, #104	@ 0x68
 8003494:	f7ff ff3f 	bl	8003316 <bmm150_get_regs>
 8003498:	4603      	mov	r3, r0
 800349a:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMM150_OK)
 800349c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d150      	bne.n	8003546 <read_trim_registers+0x112>
            {
                /* Trim data which is read is updated
                 * in the device structure
                 */
                dev->trim_data.dig_x1 = (int8_t)trim_x1y1[0];
 80034a4:	7e3b      	ldrb	r3, [r7, #24]
 80034a6:	b25a      	sxtb	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	761a      	strb	r2, [r3, #24]
                dev->trim_data.dig_y1 = (int8_t)trim_x1y1[1];
 80034ac:	7e7b      	ldrb	r3, [r7, #25]
 80034ae:	b25a      	sxtb	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	765a      	strb	r2, [r3, #25]
                dev->trim_data.dig_x2 = (int8_t)trim_xyz_data[2];
 80034b4:	7dbb      	ldrb	r3, [r7, #22]
 80034b6:	b25a      	sxtb	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	769a      	strb	r2, [r3, #26]
                dev->trim_data.dig_y2 = (int8_t)trim_xyz_data[3];
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	b25a      	sxtb	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	76da      	strb	r2, [r3, #27]
                temp_msb = ((uint16_t)trim_xy1xy2[3]) << 8;
 80034c4:	7afb      	ldrb	r3, [r7, #11]
 80034c6:	021b      	lsls	r3, r3, #8
 80034c8:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z1 = (uint16_t)(temp_msb | trim_xy1xy2[2]);
 80034ca:	7abb      	ldrb	r3, [r7, #10]
 80034cc:	461a      	mov	r2, r3
 80034ce:	8bbb      	ldrh	r3, [r7, #28]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	839a      	strh	r2, [r3, #28]
                temp_msb = ((uint16_t)trim_xy1xy2[1]) << 8;
 80034d8:	7a7b      	ldrb	r3, [r7, #9]
 80034da:	021b      	lsls	r3, r3, #8
 80034dc:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z2 = (int16_t)(temp_msb | trim_xy1xy2[0]);
 80034de:	7a3b      	ldrb	r3, [r7, #8]
 80034e0:	461a      	mov	r2, r3
 80034e2:	8bbb      	ldrh	r3, [r7, #28]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	b21a      	sxth	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	83da      	strh	r2, [r3, #30]
                temp_msb = ((uint16_t)trim_xy1xy2[7]) << 8;
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	021b      	lsls	r3, r3, #8
 80034f2:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z3 = (int16_t)(temp_msb | trim_xy1xy2[6]);
 80034f4:	7bbb      	ldrb	r3, [r7, #14]
 80034f6:	461a      	mov	r2, r3
 80034f8:	8bbb      	ldrh	r3, [r7, #28]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	b21a      	sxth	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	841a      	strh	r2, [r3, #32]
                temp_msb = ((uint16_t)trim_xyz_data[1]) << 8;
 8003504:	7d7b      	ldrb	r3, [r7, #21]
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z4 = (int16_t)(temp_msb | trim_xyz_data[0]);
 800350a:	7d3b      	ldrb	r3, [r7, #20]
 800350c:	461a      	mov	r2, r3
 800350e:	8bbb      	ldrh	r3, [r7, #28]
 8003510:	4313      	orrs	r3, r2
 8003512:	b29b      	uxth	r3, r3
 8003514:	b21a      	sxth	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	845a      	strh	r2, [r3, #34]	@ 0x22
                dev->trim_data.dig_xy1 = trim_xy1xy2[9];
 800351a:	7c7a      	ldrb	r2, [r7, #17]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                dev->trim_data.dig_xy2 = (int8_t)trim_xy1xy2[8];
 8003522:	7c3b      	ldrb	r3, [r7, #16]
 8003524:	b25a      	sxtb	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
 800352c:	7b7b      	ldrb	r3, [r7, #13]
 800352e:	021b      	lsls	r3, r3, #8
 8003530:	b29b      	uxth	r3, r3
 8003532:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8003536:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
 8003538:	7b3b      	ldrb	r3, [r7, #12]
 800353a:	461a      	mov	r2, r3
 800353c:	8bbb      	ldrh	r3, [r7, #28]
 800353e:	4313      	orrs	r3, r2
 8003540:	b29a      	uxth	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	84da      	strh	r2, [r3, #38]	@ 0x26
            }
        }
    }

    return rslt;
 8003546:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <BQ28Z610_ReadVoltage>:

#define CMD_VOLTAGE 0x08
#define BQ28Z610_I2C_ADDR (0x55 << 1)

HAL_StatusTypeDef BQ28Z610_ReadVoltage(I2C_HandleTypeDef *hi2c, uint16_t *voltage)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b088      	sub	sp, #32
 8003556:	af04      	add	r7, sp, #16
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	6039      	str	r1, [r7, #0]
	uint8_t rx[2];
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, BQ28Z610_I2C_ADDR, CMD_VOLTAGE, I2C_MEMADD_SIZE_8BIT, rx, 2, HAL_MAX_DELAY);
 800355c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003560:	9302      	str	r3, [sp, #8]
 8003562:	2302      	movs	r3, #2
 8003564:	9301      	str	r3, [sp, #4]
 8003566:	f107 0308 	add.w	r3, r7, #8
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	2301      	movs	r3, #1
 800356e:	2208      	movs	r2, #8
 8003570:	21aa      	movs	r1, #170	@ 0xaa
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f002 fdf2 	bl	800615c <HAL_I2C_Mem_Read>
 8003578:	4603      	mov	r3, r0
 800357a:	73fb      	strb	r3, [r7, #15]

	if (status == HAL_OK)
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10a      	bne.n	8003598 <BQ28Z610_ReadVoltage+0x46>
	{
		uint16_t shifted = rx[1] << 8;
 8003582:	7a7b      	ldrb	r3, [r7, #9]
 8003584:	021b      	lsls	r3, r3, #8
 8003586:	81bb      	strh	r3, [r7, #12]
		uint16_t lower = rx[0];
 8003588:	7a3b      	ldrb	r3, [r7, #8]
 800358a:	817b      	strh	r3, [r7, #10]
		*voltage = shifted | lower;
 800358c:	89ba      	ldrh	r2, [r7, #12]
 800358e:	897b      	ldrh	r3, [r7, #10]
 8003590:	4313      	orrs	r3, r2
 8003592:	b29a      	uxth	r2, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	801a      	strh	r2, [r3, #0]
	}
	return status;
 8003598:	7bfb      	ldrb	r3, [r7, #15]
};
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <ICM42688P_disable_chip_select>:
/* Private GPIO CS Pin Variables */
static GPIO_TypeDef *ChipSelect_GPIO_Port;
static uint16_t ChipSelect_Pin;

static void ICM42688P_disable_chip_select()
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_RESET);
 80035a8:	4b04      	ldr	r3, [pc, #16]	@ (80035bc <ICM42688P_disable_chip_select+0x18>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a04      	ldr	r2, [pc, #16]	@ (80035c0 <ICM42688P_disable_chip_select+0x1c>)
 80035ae:	8811      	ldrh	r1, [r2, #0]
 80035b0:	2200      	movs	r2, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f002 fd1e 	bl	8005ff4 <HAL_GPIO_WritePin>
}
 80035b8:	bf00      	nop
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	200008ac 	.word	0x200008ac
 80035c0:	200008b0 	.word	0x200008b0

080035c4 <ICM42688P_enable_chip_select>:

static void ICM42688P_enable_chip_select()
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_SET);
 80035c8:	4b04      	ldr	r3, [pc, #16]	@ (80035dc <ICM42688P_enable_chip_select+0x18>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a04      	ldr	r2, [pc, #16]	@ (80035e0 <ICM42688P_enable_chip_select+0x1c>)
 80035ce:	8811      	ldrh	r1, [r2, #0]
 80035d0:	2201      	movs	r2, #1
 80035d2:	4618      	mov	r0, r3
 80035d4:	f002 fd0e 	bl	8005ff4 <HAL_GPIO_WritePin>
}
 80035d8:	bf00      	nop
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	200008ac 	.word	0x200008ac
 80035e0:	200008b0 	.word	0x200008b0

080035e4 <ICM42688P_write_reg>:

static HAL_StatusTypeDef ICM42688P_write_reg(uint8_t reg, uint8_t data)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	460a      	mov	r2, r1
 80035ee:	71fb      	strb	r3, [r7, #7]
 80035f0:	4613      	mov	r3, r2
 80035f2:	71bb      	strb	r3, [r7, #6]
    uint8_t tx[2] = {reg, data};
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	733b      	strb	r3, [r7, #12]
 80035f8:	79bb      	ldrb	r3, [r7, #6]
 80035fa:	737b      	strb	r3, [r7, #13]
    ICM42688P_disable_chip_select();
 80035fc:	f7ff ffd2 	bl	80035a4 <ICM42688P_disable_chip_select>
    HAL_SPI_Transmit(hspi, tx, 2, HAL_MAX_DELAY);
 8003600:	4b07      	ldr	r3, [pc, #28]	@ (8003620 <ICM42688P_write_reg+0x3c>)
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	f107 010c 	add.w	r1, r7, #12
 8003608:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800360c:	2202      	movs	r2, #2
 800360e:	f006 fb73 	bl	8009cf8 <HAL_SPI_Transmit>
    ICM42688P_enable_chip_select();
 8003612:	f7ff ffd7 	bl	80035c4 <ICM42688P_enable_chip_select>
    return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	200008a8 	.word	0x200008a8

08003624 <ICM42688P_init>:
    ICM42688P_enable_chip_select();
    return rx;
}

uint8_t ICM42688P_init(SPI_TypeDef *spi_handle, GPIO_TypeDef *chip_select_port, uint16_t chip_select_gpio_pin)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	4613      	mov	r3, r2
 8003630:	80fb      	strh	r3, [r7, #6]
    hspi = spi_handle;
 8003632:	4a0e      	ldr	r2, [pc, #56]	@ (800366c <ICM42688P_init+0x48>)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6013      	str	r3, [r2, #0]
    ChipSelect_GPIO_Port = chip_select_port;
 8003638:	4a0d      	ldr	r2, [pc, #52]	@ (8003670 <ICM42688P_init+0x4c>)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	6013      	str	r3, [r2, #0]
    ChipSelect_Pin = chip_select_gpio_pin;
 800363e:	4a0d      	ldr	r2, [pc, #52]	@ (8003674 <ICM42688P_init+0x50>)
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	8013      	strh	r3, [r2, #0]
    HAL_Delay(100);
    ICM42688P_write_reg(0x11, 0x00);  // Power management
    ICM42688P_write_reg(0x10, 0x0F);  // Gyro and accel config
    */

    ICM42688P_write_reg(0x11, 0x01); // Reset Device
 8003644:	2101      	movs	r1, #1
 8003646:	2011      	movs	r0, #17
 8003648:	f7ff ffcc 	bl	80035e4 <ICM42688P_write_reg>
    HAL_Delay(100);
 800364c:	2064      	movs	r0, #100	@ 0x64
 800364e:	f000 fdfb 	bl	8004248 <HAL_Delay>
    ICM42688P_write_reg(0x4E, (0b11 << 2) | (0b11 << 0)); // Enable gyro & accelerometer
 8003652:	210f      	movs	r1, #15
 8003654:	204e      	movs	r0, #78	@ 0x4e
 8003656:	f7ff ffc5 	bl	80035e4 <ICM42688P_write_reg>
    ICM42688P_write_reg(0x7B, (0b10 << 1));               // Enable CLKIN
 800365a:	2104      	movs	r1, #4
 800365c:	207b      	movs	r0, #123	@ 0x7b
 800365e:	f7ff ffc1 	bl	80035e4 <ICM42688P_write_reg>

    return 0;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	200008a8 	.word	0x200008a8
 8003670:	200008ac 	.word	0x200008ac
 8003674:	200008b0 	.word	0x200008b0

08003678 <ICM42688P_read_data>:

ICM42688P_AccelData ICM42688P_read_data()
{
 8003678:	b590      	push	{r4, r7, lr}
 800367a:	b08b      	sub	sp, #44	@ 0x2c
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
    ICM42688P_AccelData data = {0};
 8003680:	f107 0318 	add.w	r3, r7, #24
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	605a      	str	r2, [r3, #4]
 800368a:	609a      	str	r2, [r3, #8]

    uint8_t buffer[12];
    ICM42688P_disable_chip_select();
 800368c:	f7ff ff8a 	bl	80035a4 <ICM42688P_disable_chip_select>
    // This register should be correct
    uint8_t reg = 0x1F | (1 << 7);
 8003690:	239f      	movs	r3, #159	@ 0x9f
 8003692:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(hspi, &reg, 1, HAL_MAX_DELAY);
 8003694:	4b32      	ldr	r3, [pc, #200]	@ (8003760 <ICM42688P_read_data+0xe8>)
 8003696:	6818      	ldr	r0, [r3, #0]
 8003698:	f107 010b 	add.w	r1, r7, #11
 800369c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036a0:	2201      	movs	r2, #1
 80036a2:	f006 fb29 	bl	8009cf8 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, buffer, sizeof(buffer) / sizeof(buffer[0]), HAL_MAX_DELAY);
 80036a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003760 <ICM42688P_read_data+0xe8>)
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	f107 010c 	add.w	r1, r7, #12
 80036ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036b2:	220c      	movs	r2, #12
 80036b4:	f006 fc96 	bl	8009fe4 <HAL_SPI_Receive>
    ICM42688P_enable_chip_select();
 80036b8:	f7ff ff84 	bl	80035c4 <ICM42688P_enable_chip_select>

    data.accel_x = (buffer[0] << 8) | buffer[1];
 80036bc:	7b3b      	ldrb	r3, [r7, #12]
 80036be:	021b      	lsls	r3, r3, #8
 80036c0:	b21a      	sxth	r2, r3
 80036c2:	7b7b      	ldrb	r3, [r7, #13]
 80036c4:	b21b      	sxth	r3, r3
 80036c6:	4313      	orrs	r3, r2
 80036c8:	b21b      	sxth	r3, r3
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	833b      	strh	r3, [r7, #24]
    data.accel_y = (buffer[2] << 8) | buffer[3];
 80036ce:	7bbb      	ldrb	r3, [r7, #14]
 80036d0:	021b      	lsls	r3, r3, #8
 80036d2:	b21a      	sxth	r2, r3
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	b21b      	sxth	r3, r3
 80036d8:	4313      	orrs	r3, r2
 80036da:	b21b      	sxth	r3, r3
 80036dc:	b29b      	uxth	r3, r3
 80036de:	837b      	strh	r3, [r7, #26]
    data.accel_z = ((buffer[4] << 8) | buffer[5]) * -1;
 80036e0:	7c3b      	ldrb	r3, [r7, #16]
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	b21a      	sxth	r2, r3
 80036e6:	7c7b      	ldrb	r3, [r7, #17]
 80036e8:	b21b      	sxth	r3, r3
 80036ea:	4313      	orrs	r3, r2
 80036ec:	b21b      	sxth	r3, r3
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	425b      	negs	r3, r3
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	83bb      	strh	r3, [r7, #28]

    // Get new information.
    uint32_t time = HAL_GetTick();
 80036f6:	f000 fd9b 	bl	8004230 <HAL_GetTick>
 80036fa:	6278      	str	r0, [r7, #36]	@ 0x24
    data.gyro_x = (buffer[6] << 8) | buffer[7];
 80036fc:	7cbb      	ldrb	r3, [r7, #18]
 80036fe:	021b      	lsls	r3, r3, #8
 8003700:	b21a      	sxth	r2, r3
 8003702:	7cfb      	ldrb	r3, [r7, #19]
 8003704:	b21b      	sxth	r3, r3
 8003706:	4313      	orrs	r3, r2
 8003708:	b21b      	sxth	r3, r3
 800370a:	b29b      	uxth	r3, r3
 800370c:	83fb      	strh	r3, [r7, #30]
    data.gyro_y = (buffer[8] << 8) | buffer[9];
 800370e:	7d3b      	ldrb	r3, [r7, #20]
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	b21a      	sxth	r2, r3
 8003714:	7d7b      	ldrb	r3, [r7, #21]
 8003716:	b21b      	sxth	r3, r3
 8003718:	4313      	orrs	r3, r2
 800371a:	b21b      	sxth	r3, r3
 800371c:	b29b      	uxth	r3, r3
 800371e:	843b      	strh	r3, [r7, #32]
    data.gyro_z = ((buffer[10] << 8) | buffer[11]) * -1;
 8003720:	7dbb      	ldrb	r3, [r7, #22]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	b21a      	sxth	r2, r3
 8003726:	7dfb      	ldrb	r3, [r7, #23]
 8003728:	b21b      	sxth	r3, r3
 800372a:	4313      	orrs	r3, r2
 800372c:	b21b      	sxth	r3, r3
 800372e:	b29b      	uxth	r3, r3
 8003730:	425b      	negs	r3, r3
 8003732:	b29b      	uxth	r3, r3
 8003734:	847b      	strh	r3, [r7, #34]	@ 0x22
    // Calculate acceraltion from two gyro data points / time difference.
    // data.accel_x = Get_Accel_X(data.gyro_x, time);
    // data.accel_y = Get_Accel_Y(data.gyro_y, time);
    // data.accel_z = Get_Accel_Z(data.gyro_z, time);

    Transfer_Data(data.gyro_x, data.gyro_y, data.gyro_z, time);
 8003736:	8bfb      	ldrh	r3, [r7, #30]
 8003738:	4618      	mov	r0, r3
 800373a:	8c3b      	ldrh	r3, [r7, #32]
 800373c:	4619      	mov	r1, r3
 800373e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003740:	461a      	mov	r2, r3
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	f000 f80e 	bl	8003764 <Transfer_Data>

    return data;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	461c      	mov	r4, r3
 800374c:	f107 0318 	add.w	r3, r7, #24
 8003750:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003752:	6020      	str	r0, [r4, #0]
 8003754:	6061      	str	r1, [r4, #4]
 8003756:	60a2      	str	r2, [r4, #8]
}
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	372c      	adds	r7, #44	@ 0x2c
 800375c:	46bd      	mov	sp, r7
 800375e:	bd90      	pop	{r4, r7, pc}
 8003760:	200008a8 	.word	0x200008a8

08003764 <Transfer_Data>:
int16_t gyro_old_y = 0;
int16_t gyro_old_z = 0;
int32_t old_time = 0; // Might need to reinitialized to actual start.

void Transfer_Data(uint16_t x, uint16_t y, uint16_t z, uint32_t time)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	607b      	str	r3, [r7, #4]
 800376c:	4603      	mov	r3, r0
 800376e:	81fb      	strh	r3, [r7, #14]
 8003770:	460b      	mov	r3, r1
 8003772:	81bb      	strh	r3, [r7, #12]
 8003774:	4613      	mov	r3, r2
 8003776:	817b      	strh	r3, [r7, #10]
    gyro_old_x = x;
 8003778:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800377c:	4b09      	ldr	r3, [pc, #36]	@ (80037a4 <Transfer_Data+0x40>)
 800377e:	801a      	strh	r2, [r3, #0]
    gyro_old_y = y;
 8003780:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003784:	4b08      	ldr	r3, [pc, #32]	@ (80037a8 <Transfer_Data+0x44>)
 8003786:	801a      	strh	r2, [r3, #0]
    gyro_old_z = z;
 8003788:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800378c:	4b07      	ldr	r3, [pc, #28]	@ (80037ac <Transfer_Data+0x48>)
 800378e:	801a      	strh	r2, [r3, #0]
    old_time = time;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a07      	ldr	r2, [pc, #28]	@ (80037b0 <Transfer_Data+0x4c>)
 8003794:	6013      	str	r3, [r2, #0]
}
 8003796:	bf00      	nop
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	200008b2 	.word	0x200008b2
 80037a8:	200008b4 	.word	0x200008b4
 80037ac:	200008b6 	.word	0x200008b6
 80037b0:	200008b8 	.word	0x200008b8

080037b4 <LC76G_init>:
#include "LC76G.h"

void LC76G_init()
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart5,LC76G_ENABLE_GGA_FORMAT, strlen(LC76G_ENABLE_GGA_FORMAT), TIMEOUT);
    HAL_Delay(100);
    */

    // Ensure that there is a GPS fix
    char buf[2] = {0};
 80037ba:	2300      	movs	r3, #0
 80037bc:	80bb      	strh	r3, [r7, #4]
    uint16_t num_iters = 1;
 80037be:	2301      	movs	r3, #1
 80037c0:	80fb      	strh	r3, [r7, #6]
    while (buf == '\0' || num_iters == 0)
 80037c2:	e01a      	b.n	80037fa <LC76G_init+0x46>
    {
        // Skip everything before <Quality> field
        HAL_UART_Receive(&huart5, NULL, 41, TIMEOUT);
 80037c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037c8:	2229      	movs	r2, #41	@ 0x29
 80037ca:	2100      	movs	r1, #0
 80037cc:	480f      	ldr	r0, [pc, #60]	@ (800380c <LC76G_init+0x58>)
 80037ce:	f008 fe16 	bl	800c3fe <HAL_UART_Receive>
        HAL_UART_Receive(&huart5, buf, 1, TIMEOUT);
 80037d2:	1d39      	adds	r1, r7, #4
 80037d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037d8:	2201      	movs	r2, #1
 80037da:	480c      	ldr	r0, [pc, #48]	@ (800380c <LC76G_init+0x58>)
 80037dc:	f008 fe0f 	bl	800c3fe <HAL_UART_Receive>
        // Skip everything after <Quality> field
        HAL_UART_Receive(&huart5, NULL, 31, TIMEOUT);
 80037e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037e4:	221f      	movs	r2, #31
 80037e6:	2100      	movs	r1, #0
 80037e8:	4808      	ldr	r0, [pc, #32]	@ (800380c <LC76G_init+0x58>)
 80037ea:	f008 fe08 	bl	800c3fe <HAL_UART_Receive>
        HAL_Delay(100);
 80037ee:	2064      	movs	r0, #100	@ 0x64
 80037f0:	f000 fd2a 	bl	8004248 <HAL_Delay>

        // If this value overflows then we've been in this loop far too long
        num_iters++;
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	3301      	adds	r3, #1
 80037f8:	80fb      	strh	r3, [r7, #6]
    while (buf == '\0' || num_iters == 0)
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0e1      	beq.n	80037c4 <LC76G_init+0x10>
    }

    // Inform caller that a GPS fix was not acquired
    //  if (num_iters == 0)
    //  handle error
}
 8003800:	bf00      	nop
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	200006c8 	.word	0x200006c8

08003810 <LC76G_read_data>:

LC76G_gps_data LC76G_read_data()
{
 8003810:	b5b0      	push	{r4, r5, r7, lr}
 8003812:	b0a0      	sub	sp, #128	@ 0x80
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
    LC76G_gps_data gps_data;

    // Zero-initalized buffer
    char buf[80] = {0};
 8003818:	2300      	movs	r3, #0
 800381a:	60bb      	str	r3, [r7, #8]
 800381c:	f107 030c 	add.w	r3, r7, #12
 8003820:	224c      	movs	r2, #76	@ 0x4c
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f00e ffa5 	bl	8012774 <memset>

    Example:
    GNGGA,040143.000,3149.334166,N,11706.941670,E,2,36,0.48,61.496,M,-0.335,M,,*58
    */

    HAL_UART_Receive(&huart5, buf, 79, TIMEOUT);
 800382a:	f107 0108 	add.w	r1, r7, #8
 800382e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003832:	224f      	movs	r2, #79	@ 0x4f
 8003834:	4809      	ldr	r0, [pc, #36]	@ (800385c <LC76G_read_data+0x4c>)
 8003836:	f008 fde2 	bl	800c3fe <HAL_UART_Receive>

    // Skip the rest of the transmission:
    // (,M,<Sep>,M,<DiffAge>,<DiffStation>*<Checksum><CR><LF>)
    HAL_UART_Receive(&huart5, NULL, 16, TIMEOUT);
    */
    return gps_data;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	461d      	mov	r5, r3
 800383e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8003842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003848:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800384a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800384e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	3780      	adds	r7, #128	@ 0x80
 8003856:	46bd      	mov	sp, r7
 8003858:	bdb0      	pop	{r4, r5, r7, pc}
 800385a:	bf00      	nop
 800385c:	200006c8 	.word	0x200006c8

08003860 <MS5607_Init>:
/** Reset and prepare for general usage.
 * This will reset the device and perform the PROM reading to find the conversion values and if
 * the communication is working.
 */
MS5607StateTypeDef MS5607_Init(SPI_HandleTypeDef *spi_handle, GPIO_TypeDef *chip_select_port, uint16_t chip_select_gpio_pin)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	4613      	mov	r3, r2
 800386c:	80fb      	strh	r3, [r7, #6]
  hspi = spi_handle;
 800386e:	4a16      	ldr	r2, [pc, #88]	@ (80038c8 <MS5607_Init+0x68>)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6013      	str	r3, [r2, #0]
  ChipSelect_GPIO_Port = chip_select_port;
 8003874:	4a15      	ldr	r2, [pc, #84]	@ (80038cc <MS5607_Init+0x6c>)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	6013      	str	r3, [r2, #0]
  ChipSelect_Pin = chip_select_gpio_pin;
 800387a:	4a15      	ldr	r2, [pc, #84]	@ (80038d0 <MS5607_Init+0x70>)
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	8013      	strh	r3, [r2, #0]

  enableCSB();
 8003880:	f000 fc0a 	bl	8004098 <enableCSB>
  SPITransmitData = RESET_COMMAND;
 8003884:	4b13      	ldr	r3, [pc, #76]	@ (80038d4 <MS5607_Init+0x74>)
 8003886:	221e      	movs	r2, #30
 8003888:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 800388a:	4b0f      	ldr	r3, [pc, #60]	@ (80038c8 <MS5607_Init+0x68>)
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	230a      	movs	r3, #10
 8003890:	2201      	movs	r2, #1
 8003892:	4910      	ldr	r1, [pc, #64]	@ (80038d4 <MS5607_Init+0x74>)
 8003894:	f006 fa30 	bl	8009cf8 <HAL_SPI_Transmit>
  HAL_Delay(3);
 8003898:	2003      	movs	r0, #3
 800389a:	f000 fcd5 	bl	8004248 <HAL_Delay>
  disableCSB();
 800389e:	f000 fc0b 	bl	80040b8 <disableCSB>

  MS5607PromRead(&promData);
 80038a2:	480d      	ldr	r0, [pc, #52]	@ (80038d8 <MS5607_Init+0x78>)
 80038a4:	f000 f81a 	bl	80038dc <MS5607PromRead>

  if (promData.reserved == 0x00 || promData.reserved == 0xff)
 80038a8:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <MS5607_Init+0x78>)
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <MS5607_Init+0x58>
 80038b0:	4b09      	ldr	r3, [pc, #36]	@ (80038d8 <MS5607_Init+0x78>)
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	2bff      	cmp	r3, #255	@ 0xff
 80038b6:	d101      	bne.n	80038bc <MS5607_Init+0x5c>
    return MS5607_STATE_FAILED;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e000      	b.n	80038be <MS5607_Init+0x5e>
  else
    return MS5607_STATE_READY;
 80038bc:	2301      	movs	r3, #1
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	200008bc 	.word	0x200008bc
 80038cc:	200008c0 	.word	0x200008c0
 80038d0:	200008c4 	.word	0x200008c4
 80038d4:	200008c6 	.word	0x200008c6
 80038d8:	200008cc 	.word	0x200008cc

080038dc <MS5607PromRead>:

/* Performs a reading on the devices PROM. */
void MS5607PromRead(struct promData *prom)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint8_t address;
  uint16_t *structPointer;

  /* As the PROM is made of 8 16bit addresses I used a pointer for accessing the data structure */
  structPointer = (uint16_t *)prom;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	613b      	str	r3, [r7, #16]

  for (address = 0; address < 8; address++)
 80038e8:	2300      	movs	r3, #0
 80038ea:	75fb      	strb	r3, [r7, #23]
 80038ec:	e020      	b.n	8003930 <MS5607PromRead+0x54>
  {
    SPITransmitData = PROM_READ(address);
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	b25b      	sxtb	r3, r3
 80038f4:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 80038f8:	b25b      	sxtb	r3, r3
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003978 <MS5607PromRead+0x9c>)
 80038fe:	701a      	strb	r2, [r3, #0]
    enableCSB();
 8003900:	f000 fbca 	bl	8004098 <enableCSB>
    HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003904:	4b1d      	ldr	r3, [pc, #116]	@ (800397c <MS5607PromRead+0xa0>)
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	230a      	movs	r3, #10
 800390a:	2201      	movs	r2, #1
 800390c:	491a      	ldr	r1, [pc, #104]	@ (8003978 <MS5607PromRead+0x9c>)
 800390e:	f006 f9f3 	bl	8009cf8 <HAL_SPI_Transmit>
    /* Receive two bytes at once and stores it directly at the structure */
    HAL_SPI_Receive(hspi, structPointer, 2, 10);
 8003912:	4b1a      	ldr	r3, [pc, #104]	@ (800397c <MS5607PromRead+0xa0>)
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	230a      	movs	r3, #10
 8003918:	2202      	movs	r2, #2
 800391a:	6939      	ldr	r1, [r7, #16]
 800391c:	f006 fb62 	bl	8009fe4 <HAL_SPI_Receive>
    disableCSB();
 8003920:	f000 fbca 	bl	80040b8 <disableCSB>
    structPointer++;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	3302      	adds	r3, #2
 8003928:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 800392a:	7dfb      	ldrb	r3, [r7, #23]
 800392c:	3301      	adds	r3, #1
 800392e:	75fb      	strb	r3, [r7, #23]
 8003930:	7dfb      	ldrb	r3, [r7, #23]
 8003932:	2b07      	cmp	r3, #7
 8003934:	d9db      	bls.n	80038ee <MS5607PromRead+0x12>
  }

  /* Byte swap on 16bit integers*/
  structPointer = (uint16_t *)prom;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 800393a:	2300      	movs	r3, #0
 800393c:	75fb      	strb	r3, [r7, #23]
 800393e:	e012      	b.n	8003966 <MS5607PromRead+0x8a>
  {
    uint8_t *toSwap = (uint8_t *)structPointer;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	60fb      	str	r3, [r7, #12]
    uint8_t secondByte = toSwap[0];
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	72fb      	strb	r3, [r7, #11]
    toSwap[0] = toSwap[1];
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	785a      	ldrb	r2, [r3, #1]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	701a      	strb	r2, [r3, #0]
    toSwap[1] = secondByte;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3301      	adds	r3, #1
 8003956:	7afa      	ldrb	r2, [r7, #11]
 8003958:	701a      	strb	r2, [r3, #0]
    structPointer++;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	3302      	adds	r3, #2
 800395e:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 8003960:	7dfb      	ldrb	r3, [r7, #23]
 8003962:	3301      	adds	r3, #1
 8003964:	75fb      	strb	r3, [r7, #23]
 8003966:	7dfb      	ldrb	r3, [r7, #23]
 8003968:	2b07      	cmp	r3, #7
 800396a:	d9e9      	bls.n	8003940 <MS5607PromRead+0x64>
  }
}
 800396c:	bf00      	nop
 800396e:	bf00      	nop
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	200008c6 	.word	0x200008c6
 800397c:	200008bc 	.word	0x200008bc

08003980 <MS5607UncompensatedRead>:

/* Performs a reading on the devices PROM. */
void MS5607UncompensatedRead(struct MS5607UncompensatedValues *uncompValues)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

  /*Sensor reply data buffer*/
  uint8_t reply[3];

  enableCSB();
 8003988:	f000 fb86 	bl	8004098 <enableCSB>
  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D1_COMMAND | Pressure_OSR;
 800398c:	4b54      	ldr	r3, [pc, #336]	@ (8003ae0 <MS5607UncompensatedRead+0x160>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4b53      	ldr	r3, [pc, #332]	@ (8003ae4 <MS5607UncompensatedRead+0x164>)
 8003998:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 800399a:	4b53      	ldr	r3, [pc, #332]	@ (8003ae8 <MS5607UncompensatedRead+0x168>)
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	230a      	movs	r3, #10
 80039a0:	2201      	movs	r2, #1
 80039a2:	4950      	ldr	r1, [pc, #320]	@ (8003ae4 <MS5607UncompensatedRead+0x164>)
 80039a4:	f006 f9a8 	bl	8009cf8 <HAL_SPI_Transmit>

  if (Pressure_OSR == 0x00)
 80039a8:	4b4d      	ldr	r3, [pc, #308]	@ (8003ae0 <MS5607UncompensatedRead+0x160>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d103      	bne.n	80039b8 <MS5607UncompensatedRead+0x38>
    HAL_Delay(1);
 80039b0:	2001      	movs	r0, #1
 80039b2:	f000 fc49 	bl	8004248 <HAL_Delay>
 80039b6:	e01a      	b.n	80039ee <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x02)
 80039b8:	4b49      	ldr	r3, [pc, #292]	@ (8003ae0 <MS5607UncompensatedRead+0x160>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d103      	bne.n	80039c8 <MS5607UncompensatedRead+0x48>
    HAL_Delay(2);
 80039c0:	2002      	movs	r0, #2
 80039c2:	f000 fc41 	bl	8004248 <HAL_Delay>
 80039c6:	e012      	b.n	80039ee <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x04)
 80039c8:	4b45      	ldr	r3, [pc, #276]	@ (8003ae0 <MS5607UncompensatedRead+0x160>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d103      	bne.n	80039d8 <MS5607UncompensatedRead+0x58>
    HAL_Delay(3);
 80039d0:	2003      	movs	r0, #3
 80039d2:	f000 fc39 	bl	8004248 <HAL_Delay>
 80039d6:	e00a      	b.n	80039ee <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x06)
 80039d8:	4b41      	ldr	r3, [pc, #260]	@ (8003ae0 <MS5607UncompensatedRead+0x160>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b06      	cmp	r3, #6
 80039de:	d103      	bne.n	80039e8 <MS5607UncompensatedRead+0x68>
    HAL_Delay(5);
 80039e0:	2005      	movs	r0, #5
 80039e2:	f000 fc31 	bl	8004248 <HAL_Delay>
 80039e6:	e002      	b.n	80039ee <MS5607UncompensatedRead+0x6e>
  else
    HAL_Delay(10);
 80039e8:	200a      	movs	r0, #10
 80039ea:	f000 fc2d 	bl	8004248 <HAL_Delay>

  disableCSB();
 80039ee:	f000 fb63 	bl	80040b8 <disableCSB>

  /* Performs the reading of the 24 bits from the ADC */

  enableCSB();
 80039f2:	f000 fb51 	bl	8004098 <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 80039f6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ae4 <MS5607UncompensatedRead+0x164>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 80039fc:	4b3a      	ldr	r3, [pc, #232]	@ (8003ae8 <MS5607UncompensatedRead+0x168>)
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	230a      	movs	r3, #10
 8003a02:	2201      	movs	r2, #1
 8003a04:	4937      	ldr	r1, [pc, #220]	@ (8003ae4 <MS5607UncompensatedRead+0x164>)
 8003a06:	f006 f977 	bl	8009cf8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, reply, 3, 10);
 8003a0a:	4b37      	ldr	r3, [pc, #220]	@ (8003ae8 <MS5607UncompensatedRead+0x168>)
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	f107 010c 	add.w	r1, r7, #12
 8003a12:	230a      	movs	r3, #10
 8003a14:	2203      	movs	r2, #3
 8003a16:	f006 fae5 	bl	8009fe4 <HAL_SPI_Receive>

  disableCSB();
 8003a1a:	f000 fb4d 	bl	80040b8 <disableCSB>

  /* Tranfer the 24bits read into a 32bit int */
  uncompValues->pressure = ((uint32_t)reply[0] << 16) | ((uint32_t)reply[1] << 8) | (uint32_t)reply[2];
 8003a1e:	7b3b      	ldrb	r3, [r7, #12]
 8003a20:	041a      	lsls	r2, r3, #16
 8003a22:	7b7b      	ldrb	r3, [r7, #13]
 8003a24:	021b      	lsls	r3, r3, #8
 8003a26:	4313      	orrs	r3, r2
 8003a28:	7bba      	ldrb	r2, [r7, #14]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	601a      	str	r2, [r3, #0]

  enableCSB();
 8003a30:	f000 fb32 	bl	8004098 <enableCSB>

  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D2_COMMAND | Temperature_OSR;
 8003a34:	4b2d      	ldr	r3, [pc, #180]	@ (8003aec <MS5607UncompensatedRead+0x16c>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	4b29      	ldr	r3, [pc, #164]	@ (8003ae4 <MS5607UncompensatedRead+0x164>)
 8003a40:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003a42:	4b29      	ldr	r3, [pc, #164]	@ (8003ae8 <MS5607UncompensatedRead+0x168>)
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	230a      	movs	r3, #10
 8003a48:	2201      	movs	r2, #1
 8003a4a:	4926      	ldr	r1, [pc, #152]	@ (8003ae4 <MS5607UncompensatedRead+0x164>)
 8003a4c:	f006 f954 	bl	8009cf8 <HAL_SPI_Transmit>

  if (Temperature_OSR == 0x00)
 8003a50:	4b26      	ldr	r3, [pc, #152]	@ (8003aec <MS5607UncompensatedRead+0x16c>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d103      	bne.n	8003a60 <MS5607UncompensatedRead+0xe0>
    HAL_Delay(1);
 8003a58:	2001      	movs	r0, #1
 8003a5a:	f000 fbf5 	bl	8004248 <HAL_Delay>
 8003a5e:	e01a      	b.n	8003a96 <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x02)
 8003a60:	4b22      	ldr	r3, [pc, #136]	@ (8003aec <MS5607UncompensatedRead+0x16c>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d103      	bne.n	8003a70 <MS5607UncompensatedRead+0xf0>
    HAL_Delay(2);
 8003a68:	2002      	movs	r0, #2
 8003a6a:	f000 fbed 	bl	8004248 <HAL_Delay>
 8003a6e:	e012      	b.n	8003a96 <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x04)
 8003a70:	4b1e      	ldr	r3, [pc, #120]	@ (8003aec <MS5607UncompensatedRead+0x16c>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d103      	bne.n	8003a80 <MS5607UncompensatedRead+0x100>
    HAL_Delay(3);
 8003a78:	2003      	movs	r0, #3
 8003a7a:	f000 fbe5 	bl	8004248 <HAL_Delay>
 8003a7e:	e00a      	b.n	8003a96 <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x06)
 8003a80:	4b1a      	ldr	r3, [pc, #104]	@ (8003aec <MS5607UncompensatedRead+0x16c>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b06      	cmp	r3, #6
 8003a86:	d103      	bne.n	8003a90 <MS5607UncompensatedRead+0x110>
    HAL_Delay(5);
 8003a88:	2005      	movs	r0, #5
 8003a8a:	f000 fbdd 	bl	8004248 <HAL_Delay>
 8003a8e:	e002      	b.n	8003a96 <MS5607UncompensatedRead+0x116>
  else
    HAL_Delay(10);
 8003a90:	200a      	movs	r0, #10
 8003a92:	f000 fbd9 	bl	8004248 <HAL_Delay>

  disableCSB();
 8003a96:	f000 fb0f 	bl	80040b8 <disableCSB>

  enableCSB();
 8003a9a:	f000 fafd 	bl	8004098 <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 8003a9e:	4b11      	ldr	r3, [pc, #68]	@ (8003ae4 <MS5607UncompensatedRead+0x164>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003aa4:	4b10      	ldr	r3, [pc, #64]	@ (8003ae8 <MS5607UncompensatedRead+0x168>)
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	230a      	movs	r3, #10
 8003aaa:	2201      	movs	r2, #1
 8003aac:	490d      	ldr	r1, [pc, #52]	@ (8003ae4 <MS5607UncompensatedRead+0x164>)
 8003aae:	f006 f923 	bl	8009cf8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, reply, 3, 10);
 8003ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae8 <MS5607UncompensatedRead+0x168>)
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	f107 010c 	add.w	r1, r7, #12
 8003aba:	230a      	movs	r3, #10
 8003abc:	2203      	movs	r2, #3
 8003abe:	f006 fa91 	bl	8009fe4 <HAL_SPI_Receive>

  disableCSB();
 8003ac2:	f000 faf9 	bl	80040b8 <disableCSB>

  /* Assemble the conversion command based on previously set OSR */
  uncompValues->temperature = ((uint32_t)reply[0] << 16) | ((uint32_t)reply[1] << 8) | (uint32_t)reply[2];
 8003ac6:	7b3b      	ldrb	r3, [r7, #12]
 8003ac8:	041a      	lsls	r2, r3, #16
 8003aca:	7b7b      	ldrb	r3, [r7, #13]
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	7bba      	ldrb	r2, [r7, #14]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	605a      	str	r2, [r3, #4]
}
 8003ad8:	bf00      	nop
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	200008c7 	.word	0x200008c7
 8003ae4:	200008c6 	.word	0x200008c6
 8003ae8:	200008bc 	.word	0x200008bc
 8003aec:	200008c8 	.word	0x200008c8

08003af0 <MS5607Convert>:

/* Performs the data conversion according to the MS5607 datasheet */
void MS5607Convert(struct MS5607UncompensatedValues *sample, struct MS5607IntReadings *value)
{
 8003af0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003af4:	b0d7      	sub	sp, #348	@ 0x15c
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8003afc:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
  int32_t dT;
  int32_t TEMP;
  int64_t OFF;
  int64_t SENS;

  dT = sample->temperature - ((int32_t)(promData.tref << 8));
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	4bda      	ldr	r3, [pc, #872]	@ (8003e70 <MS5607Convert+0x380>)
 8003b08:	895b      	ldrh	r3, [r3, #10]
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

  TEMP = 2000 + (((int64_t)dT * promData.tempsens) >> 23);
 8003b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003b16:	17da      	asrs	r2, r3, #31
 8003b18:	469a      	mov	sl, r3
 8003b1a:	4693      	mov	fp, r2
 8003b1c:	4bd4      	ldr	r3, [pc, #848]	@ (8003e70 <MS5607Convert+0x380>)
 8003b1e:	899b      	ldrh	r3, [r3, #12]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2200      	movs	r2, #0
 8003b24:	4698      	mov	r8, r3
 8003b26:	4691      	mov	r9, r2
 8003b28:	fb08 f20b 	mul.w	r2, r8, fp
 8003b2c:	fb0a f309 	mul.w	r3, sl, r9
 8003b30:	4413      	add	r3, r2
 8003b32:	fbaa 4508 	umull	r4, r5, sl, r8
 8003b36:	442b      	add	r3, r5
 8003b38:	461d      	mov	r5, r3
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	0de2      	lsrs	r2, r4, #23
 8003b44:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 8003b48:	15eb      	asrs	r3, r5, #23
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003b50:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

  OFF = ((int64_t)promData.off << 17) + (((int64_t)promData.tco * dT) >> 6);
 8003b54:	4bc6      	ldr	r3, [pc, #792]	@ (8003e70 <MS5607Convert+0x380>)
 8003b56:	889b      	ldrh	r3, [r3, #4]
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b60:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b64:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b68:	460b      	mov	r3, r1
 8003b6a:	0bdb      	lsrs	r3, r3, #15
 8003b6c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003b70:	460b      	mov	r3, r1
 8003b72:	045b      	lsls	r3, r3, #17
 8003b74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b78:	4bbd      	ldr	r3, [pc, #756]	@ (8003e70 <MS5607Convert+0x380>)
 8003b7a:	891b      	ldrh	r3, [r3, #8]
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b84:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8003b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003b8c:	17da      	asrs	r2, r3, #31
 8003b8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b92:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b96:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8003b9a:	462b      	mov	r3, r5
 8003b9c:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8003ba0:	4642      	mov	r2, r8
 8003ba2:	fb02 f203 	mul.w	r2, r2, r3
 8003ba6:	464b      	mov	r3, r9
 8003ba8:	4621      	mov	r1, r4
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	4622      	mov	r2, r4
 8003bb2:	4641      	mov	r1, r8
 8003bb4:	fba2 1201 	umull	r1, r2, r2, r1
 8003bb8:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8003bbc:	460a      	mov	r2, r1
 8003bbe:	f8c7 2108 	str.w	r2, [r7, #264]	@ 0x108
 8003bc2:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8003bd8:	4621      	mov	r1, r4
 8003bda:	098a      	lsrs	r2, r1, #6
 8003bdc:	4629      	mov	r1, r5
 8003bde:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8003be2:	4629      	mov	r1, r5
 8003be4:	118b      	asrs	r3, r1, #6
 8003be6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8003bea:	4621      	mov	r1, r4
 8003bec:	1889      	adds	r1, r1, r2
 8003bee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	eb43 0101 	adc.w	r1, r3, r1
 8003bf6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8003bf8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8003bfc:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
  SENS = ((int64_t)promData.sens << 16) + (((int64_t)promData.tcs * dT) >> 7);
 8003c00:	4b9b      	ldr	r3, [pc, #620]	@ (8003e70 <MS5607Convert+0x380>)
 8003c02:	885b      	ldrh	r3, [r3, #2]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2200      	movs	r2, #0
 8003c08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c10:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003c14:	460b      	mov	r3, r1
 8003c16:	0c1b      	lsrs	r3, r3, #16
 8003c18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	041b      	lsls	r3, r3, #16
 8003c20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c24:	4b92      	ldr	r3, [pc, #584]	@ (8003e70 <MS5607Convert+0x380>)
 8003c26:	88db      	ldrh	r3, [r3, #6]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003c38:	17da      	asrs	r2, r3, #31
 8003c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c42:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8003c46:	462b      	mov	r3, r5
 8003c48:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c4c:	4642      	mov	r2, r8
 8003c4e:	fb02 f203 	mul.w	r2, r2, r3
 8003c52:	464b      	mov	r3, r9
 8003c54:	4621      	mov	r1, r4
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	4622      	mov	r2, r4
 8003c5e:	4641      	mov	r1, r8
 8003c60:	fba2 1201 	umull	r1, r2, r2, r1
 8003c64:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8003c68:	460a      	mov	r2, r1
 8003c6a:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8003c6e:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8003c72:	4413      	add	r3, r2
 8003c74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8003c84:	4621      	mov	r1, r4
 8003c86:	09ca      	lsrs	r2, r1, #7
 8003c88:	4629      	mov	r1, r5
 8003c8a:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8003c8e:	4629      	mov	r1, r5
 8003c90:	11cb      	asrs	r3, r1, #7
 8003c92:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8003c96:	4621      	mov	r1, r4
 8003c98:	1889      	adds	r1, r1, r2
 8003c9a:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	eb43 0101 	adc.w	r1, r3, r1
 8003ca2:	6379      	str	r1, [r7, #52]	@ 0x34
 8003ca4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003ca8:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140

  /**/
  if (TEMP < 2000)
 8003cac:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003cb0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003cb4:	f280 8152 	bge.w	8003f5c <MS5607Convert+0x46c>
  {
    int32_t T2 = ((int64_t)dT * (int64_t)dT) >> 31;
 8003cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003cbc:	17da      	asrs	r2, r3, #31
 8003cbe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cc2:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003cca:	17da      	asrs	r2, r3, #31
 8003ccc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cd0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cd4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8003cd8:	462b      	mov	r3, r5
 8003cda:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8003cde:	4642      	mov	r2, r8
 8003ce0:	fb02 f203 	mul.w	r2, r2, r3
 8003ce4:	464b      	mov	r3, r9
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	fb01 f303 	mul.w	r3, r1, r3
 8003cec:	4413      	add	r3, r2
 8003cee:	4622      	mov	r2, r4
 8003cf0:	4641      	mov	r1, r8
 8003cf2:	fba2 1201 	umull	r1, r2, r2, r1
 8003cf6:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8003cfa:	460a      	mov	r2, r1
 8003cfc:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8003d00:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8003d04:	4413      	add	r3, r2
 8003d06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8003d16:	4621      	mov	r1, r4
 8003d18:	0fca      	lsrs	r2, r1, #31
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003d20:	4629      	mov	r1, r5
 8003d22:	17cb      	asrs	r3, r1, #31
 8003d24:	4613      	mov	r3, r2
 8003d26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    int32_t TEMPM = TEMP - 2000;
 8003d2a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003d2e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8003d32:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    int64_t OFF2 = (61 * (int64_t)TEMPM * (int64_t)TEMPM) >> 4;
 8003d36:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003d3a:	17da      	asrs	r2, r3, #31
 8003d3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d44:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003d48:	17da      	asrs	r2, r3, #31
 8003d4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d4e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003d52:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8003d56:	462b      	mov	r3, r5
 8003d58:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8003d5c:	4642      	mov	r2, r8
 8003d5e:	fb02 f203 	mul.w	r2, r2, r3
 8003d62:	464b      	mov	r3, r9
 8003d64:	4621      	mov	r1, r4
 8003d66:	fb01 f303 	mul.w	r3, r1, r3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	4622      	mov	r2, r4
 8003d6e:	4641      	mov	r1, r8
 8003d70:	fba2 1201 	umull	r1, r2, r2, r1
 8003d74:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003d78:	460a      	mov	r2, r1
 8003d7a:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8003d7e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8003d82:	4413      	add	r3, r2
 8003d84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003d88:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8003d8c:	4622      	mov	r2, r4
 8003d8e:	462b      	mov	r3, r5
 8003d90:	f04f 0000 	mov.w	r0, #0
 8003d94:	f04f 0100 	mov.w	r1, #0
 8003d98:	0119      	lsls	r1, r3, #4
 8003d9a:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8003d9e:	0110      	lsls	r0, r2, #4
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4621      	mov	r1, r4
 8003da6:	1a51      	subs	r1, r2, r1
 8003da8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003daa:	4629      	mov	r1, r5
 8003dac:	eb63 0301 	sbc.w	r3, r3, r1
 8003db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003dbe:	4649      	mov	r1, r9
 8003dc0:	008b      	lsls	r3, r1, #2
 8003dc2:	4641      	mov	r1, r8
 8003dc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dc8:	4641      	mov	r1, r8
 8003dca:	008a      	lsls	r2, r1, #2
 8003dcc:	4610      	mov	r0, r2
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	189b      	adds	r3, r3, r2
 8003dd6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dd8:	462b      	mov	r3, r5
 8003dda:	460a      	mov	r2, r1
 8003ddc:	eb42 0303 	adc.w	r3, r2, r3
 8003de0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003dee:	4621      	mov	r1, r4
 8003df0:	090a      	lsrs	r2, r1, #4
 8003df2:	4629      	mov	r1, r5
 8003df4:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8003df8:	4629      	mov	r1, r5
 8003dfa:	110b      	asrs	r3, r1, #4
 8003dfc:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    int64_t SENS2 = 2 * (int64_t)TEMPM * (int64_t)TEMPM;
 8003e00:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003e04:	17da      	asrs	r2, r3, #31
 8003e06:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e08:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e0a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003e0e:	17da      	asrs	r2, r3, #31
 8003e10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e14:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8003e18:	462b      	mov	r3, r5
 8003e1a:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8003e1e:	4642      	mov	r2, r8
 8003e20:	fb02 f203 	mul.w	r2, r2, r3
 8003e24:	464b      	mov	r3, r9
 8003e26:	4621      	mov	r1, r4
 8003e28:	fb01 f303 	mul.w	r3, r1, r3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	4622      	mov	r2, r4
 8003e30:	4641      	mov	r1, r8
 8003e32:	fba2 1201 	umull	r1, r2, r2, r1
 8003e36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e3a:	460a      	mov	r2, r1
 8003e3c:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8003e40:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003e44:	4413      	add	r3, r2
 8003e46:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003e4a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003e4e:	460b      	mov	r3, r1
 8003e50:	18db      	adds	r3, r3, r3
 8003e52:	623b      	str	r3, [r7, #32]
 8003e54:	4613      	mov	r3, r2
 8003e56:	eb42 0303 	adc.w	r3, r2, r3
 8003e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e5c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003e60:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    if (TEMP < -1500)
 8003e64:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8003e68:	4b02      	ldr	r3, [pc, #8]	@ (8003e74 <MS5607Convert+0x384>)
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	da55      	bge.n	8003f1a <MS5607Convert+0x42a>
 8003e6e:	e003      	b.n	8003e78 <MS5607Convert+0x388>
 8003e70:	200008cc 	.word	0x200008cc
 8003e74:	fffffa24 	.word	0xfffffa24
    {
      int32_t TEMPP = TEMP + 1500;
 8003e78:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003e7c:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8003e80:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      int32_t TEMPP2 = TEMPP * TEMPP;
 8003e84:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e88:	fb03 f303 	mul.w	r3, r3, r3
 8003e8c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
      OFF2 = OFF2 + (int64_t)15 * TEMPP2;
 8003e90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e94:	17da      	asrs	r2, r3, #31
 8003e96:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e98:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e9a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003e9e:	4622      	mov	r2, r4
 8003ea0:	462b      	mov	r3, r5
 8003ea2:	f04f 0000 	mov.w	r0, #0
 8003ea6:	f04f 0100 	mov.w	r1, #0
 8003eaa:	0119      	lsls	r1, r3, #4
 8003eac:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8003eb0:	0110      	lsls	r0, r2, #4
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	1a51      	subs	r1, r2, r1
 8003eba:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8003ec2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ec4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8003ec8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8003ecc:	4621      	mov	r1, r4
 8003ece:	1851      	adds	r1, r2, r1
 8003ed0:	61b9      	str	r1, [r7, #24]
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	eb43 0101 	adc.w	r1, r3, r1
 8003ed8:	61f9      	str	r1, [r7, #28]
 8003eda:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003ede:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
      SENS2 = SENS2 + (int64_t)8 * TEMPP2;
 8003ee2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ee6:	17da      	asrs	r2, r3, #31
 8003ee8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003eea:	657a      	str	r2, [r7, #84]	@ 0x54
 8003eec:	f04f 0000 	mov.w	r0, #0
 8003ef0:	f04f 0100 	mov.w	r1, #0
 8003ef4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8003ef8:	462b      	mov	r3, r5
 8003efa:	00d9      	lsls	r1, r3, #3
 8003efc:	4623      	mov	r3, r4
 8003efe:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8003f02:	4623      	mov	r3, r4
 8003f04:	00d8      	lsls	r0, r3, #3
 8003f06:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8003f0a:	1814      	adds	r4, r2, r0
 8003f0c:	613c      	str	r4, [r7, #16]
 8003f0e:	414b      	adcs	r3, r1
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003f16:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    }
    TEMP -= T2;
 8003f1a:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8003f1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    OFF -= OFF2;
 8003f28:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8003f2c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8003f30:	1a84      	subs	r4, r0, r2
 8003f32:	60bc      	str	r4, [r7, #8]
 8003f34:	eb61 0303 	sbc.w	r3, r1, r3
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003f3e:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
    SENS -= SENS2;
 8003f42:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8003f46:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8003f4a:	1a84      	subs	r4, r0, r2
 8003f4c:	603c      	str	r4, [r7, #0]
 8003f4e:	eb61 0303 	sbc.w	r3, r1, r3
 8003f52:	607b      	str	r3, [r7, #4]
 8003f54:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003f58:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
  }

  value->pressure = ((((int64_t)sample->pressure * SENS) >> 21) - OFF) >> 15;
 8003f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2200      	movs	r2, #0
 8003f64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f66:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003f68:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003f6c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003f70:	462a      	mov	r2, r5
 8003f72:	fb02 f203 	mul.w	r2, r2, r3
 8003f76:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	fb01 f303 	mul.w	r3, r1, r3
 8003f80:	4413      	add	r3, r2
 8003f82:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8003f86:	4621      	mov	r1, r4
 8003f88:	fba2 1201 	umull	r1, r2, r2, r1
 8003f8c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8003f90:	460a      	mov	r2, r1
 8003f92:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8003f96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8003fac:	4621      	mov	r1, r4
 8003fae:	0d4a      	lsrs	r2, r1, #21
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8003fb6:	4629      	mov	r1, r5
 8003fb8:	154b      	asrs	r3, r1, #21
 8003fba:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8003fbe:	1a14      	subs	r4, r2, r0
 8003fc0:	643c      	str	r4, [r7, #64]	@ 0x40
 8003fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003fc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	0bca      	lsrs	r2, r1, #15
 8003fd8:	4629      	mov	r1, r5
 8003fda:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8003fde:	4629      	mov	r1, r5
 8003fe0:	13cb      	asrs	r3, r1, #15
 8003fe2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003fe6:	601a      	str	r2, [r3, #0]
  value->temperature = TEMP;
 8003fe8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003fec:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8003ff0:	605a      	str	r2, [r3, #4]
}
 8003ff2:	bf00      	nop
 8003ff4:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003ffe:	4770      	bx	lr

08004000 <MS5607Update>:

/* Performs the sensor reading updating the data structures */
void MS5607Update(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  MS5607UncompensatedRead(&uncompValues);
 8004004:	4804      	ldr	r0, [pc, #16]	@ (8004018 <MS5607Update+0x18>)
 8004006:	f7ff fcbb 	bl	8003980 <MS5607UncompensatedRead>
  MS5607Convert(&uncompValues, &readings);
 800400a:	4904      	ldr	r1, [pc, #16]	@ (800401c <MS5607Update+0x1c>)
 800400c:	4802      	ldr	r0, [pc, #8]	@ (8004018 <MS5607Update+0x18>)
 800400e:	f7ff fd6f 	bl	8003af0 <MS5607Convert>
}
 8004012:	bf00      	nop
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	200008dc 	.word	0x200008dc
 800401c:	200008e4 	.word	0x200008e4

08004020 <MS5607ReadValues>:

MS5607Readings MS5607ReadValues(void)
{
 8004020:	b5b0      	push	{r4, r5, r7, lr}
 8004022:	b08c      	sub	sp, #48	@ 0x30
 8004024:	af00      	add	r7, sp, #0
  MS5607Update();
 8004026:	f7ff ffeb 	bl	8004000 <MS5607Update>
  return (MS5607Readings){.pressure_kPa = readings.pressure / 1000.0, .temperature_C = readings.temperature / 100.0};
 800402a:	4b18      	ldr	r3, [pc, #96]	@ (800408c <MS5607ReadValues+0x6c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7fc faa0 	bl	8000574 <__aeabi_i2d>
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	4b15      	ldr	r3, [pc, #84]	@ (8004090 <MS5607ReadValues+0x70>)
 800403a:	f7fc fc2f 	bl	800089c <__aeabi_ddiv>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4614      	mov	r4, r2
 8004044:	461d      	mov	r5, r3
 8004046:	4b11      	ldr	r3, [pc, #68]	@ (800408c <MS5607ReadValues+0x6c>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	4618      	mov	r0, r3
 800404c:	f7fc fa92 	bl	8000574 <__aeabi_i2d>
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	4b0f      	ldr	r3, [pc, #60]	@ (8004094 <MS5607ReadValues+0x74>)
 8004056:	f7fc fc21 	bl	800089c <__aeabi_ddiv>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	e9c7 4508 	strd	r4, r5, [r7, #32]
 8004062:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8004066:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800406a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800406e:	ec41 0b16 	vmov	d6, r0, r1
 8004072:	ec43 2b17 	vmov	d7, r2, r3
}
 8004076:	eeb0 0a46 	vmov.f32	s0, s12
 800407a:	eef0 0a66 	vmov.f32	s1, s13
 800407e:	eeb0 1a47 	vmov.f32	s2, s14
 8004082:	eef0 1a67 	vmov.f32	s3, s15
 8004086:	3730      	adds	r7, #48	@ 0x30
 8004088:	46bd      	mov	sp, r7
 800408a:	bdb0      	pop	{r4, r5, r7, pc}
 800408c:	200008e4 	.word	0x200008e4
 8004090:	408f4000 	.word	0x408f4000
 8004094:	40590000 	.word	0x40590000

08004098 <enableCSB>:
  return readings.pressure / 1000.0;
}

/* Sets the CS pin */
void enableCSB(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_RESET);
 800409c:	4b04      	ldr	r3, [pc, #16]	@ (80040b0 <enableCSB+0x18>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a04      	ldr	r2, [pc, #16]	@ (80040b4 <enableCSB+0x1c>)
 80040a2:	8811      	ldrh	r1, [r2, #0]
 80040a4:	2200      	movs	r2, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f001 ffa4 	bl	8005ff4 <HAL_GPIO_WritePin>
}
 80040ac:	bf00      	nop
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	200008c0 	.word	0x200008c0
 80040b4:	200008c4 	.word	0x200008c4

080040b8 <disableCSB>:

/* Sets the CS pin */
void disableCSB(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_SET);
 80040bc:	4b04      	ldr	r3, [pc, #16]	@ (80040d0 <disableCSB+0x18>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a04      	ldr	r2, [pc, #16]	@ (80040d4 <disableCSB+0x1c>)
 80040c2:	8811      	ldrh	r1, [r2, #0]
 80040c4:	2201      	movs	r2, #1
 80040c6:	4618      	mov	r0, r3
 80040c8:	f001 ff94 	bl	8005ff4 <HAL_GPIO_WritePin>
}
 80040cc:	bf00      	nop
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	200008c0 	.word	0x200008c0
 80040d4:	200008c4 	.word	0x200008c4

080040d8 <calculateAltitude>:
float const alt_offset_height = 20.00;
float const accel_tolerance = 0.1;

float calibrated_altitude = 0.00;

float calculateAltitude(double pressure, int calibrating) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
 80040de:	ed87 0b02 	vstr	d0, [r7, #8]
 80040e2:	6078      	str	r0, [r7, #4]
	double pressure_mb = 33.8639 * (0.2953 * pressure);
 80040e4:	a337      	add	r3, pc, #220	@ (adr r3, 80041c4 <calculateAltitude+0xec>)
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040ee:	f7fc faab 	bl	8000648 <__aeabi_dmul>
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4610      	mov	r0, r2
 80040f8:	4619      	mov	r1, r3
 80040fa:	a334      	add	r3, pc, #208	@ (adr r3, 80041cc <calculateAltitude+0xf4>)
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004100:	f7fc faa2 	bl	8000648 <__aeabi_dmul>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	e9c7 2306 	strd	r2, r3, [r7, #24]
	float h_meter = 0.3048 * (1 - pow((pressure_mb / 1013.25), 0.190284)) * 145366.54;
 800410c:	a331      	add	r3, pc, #196	@ (adr r3, 80041d4 <calculateAltitude+0xfc>)
 800410e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004112:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004116:	f7fc fbc1 	bl	800089c <__aeabi_ddiv>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	ec43 2b17 	vmov	d7, r2, r3
 8004122:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 80041a0 <calculateAltitude+0xc8>
 8004126:	eeb0 0a47 	vmov.f32	s0, s14
 800412a:	eef0 0a67 	vmov.f32	s1, s15
 800412e:	f010 fb75 	bl	801481c <pow>
 8004132:	ec53 2b10 	vmov	r2, r3, d0
 8004136:	f04f 0000 	mov.w	r0, #0
 800413a:	491f      	ldr	r1, [pc, #124]	@ (80041b8 <calculateAltitude+0xe0>)
 800413c:	f7fc f8cc 	bl	80002d8 <__aeabi_dsub>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4610      	mov	r0, r2
 8004146:	4619      	mov	r1, r3
 8004148:	a317      	add	r3, pc, #92	@ (adr r3, 80041a8 <calculateAltitude+0xd0>)
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	f7fc fa7b 	bl	8000648 <__aeabi_dmul>
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4610      	mov	r0, r2
 8004158:	4619      	mov	r1, r3
 800415a:	a315      	add	r3, pc, #84	@ (adr r3, 80041b0 <calculateAltitude+0xd8>)
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	f7fc fa72 	bl	8000648 <__aeabi_dmul>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4610      	mov	r0, r2
 800416a:	4619      	mov	r1, r3
 800416c:	f7fc fd44 	bl	8000bf8 <__aeabi_d2f>
 8004170:	4603      	mov	r3, r0
 8004172:	617b      	str	r3, [r7, #20]
	if (calibrating == 1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d105      	bne.n	8004186 <calculateAltitude+0xae>
	{
		// Absolute Altitude of the ground station
	    calibrated_altitude = h_meter;
 800417a:	4a10      	ldr	r2, [pc, #64]	@ (80041bc <calculateAltitude+0xe4>)
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	6013      	str	r3, [r2, #0]
	    // Relative Altitude of GCS
	    return 0;
 8004180:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80041c0 <calculateAltitude+0xe8>
 8004184:	e006      	b.n	8004194 <calculateAltitude+0xbc>
	}
	else
	{
	      // Relative Altitude of CanSat
	   return h_meter - calibrated_altitude;
 8004186:	4b0d      	ldr	r3, [pc, #52]	@ (80041bc <calculateAltitude+0xe4>)
 8004188:	edd3 7a00 	vldr	s15, [r3]
 800418c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004190:	ee77 7a67 	vsub.f32	s15, s14, s15
	}
	//return 100.0;
}
 8004194:	eeb0 0a67 	vmov.f32	s0, s15
 8004198:	3720      	adds	r7, #32
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	e279dd3c 	.word	0xe279dd3c
 80041a4:	3fc85b39 	.word	0x3fc85b39
 80041a8:	dbf487fd 	.word	0xdbf487fd
 80041ac:	3fd381d7 	.word	0x3fd381d7
 80041b0:	51eb851f 	.word	0x51eb851f
 80041b4:	4101beb4 	.word	0x4101beb4
 80041b8:	3ff00000 	.word	0x3ff00000
 80041bc:	200008ec 	.word	0x200008ec
 80041c0:	00000000 	.word	0x00000000
 80041c4:	f8a0902e 	.word	0xf8a0902e
 80041c8:	3fd2e631 	.word	0x3fd2e631
 80041cc:	467381d8 	.word	0x467381d8
 80041d0:	4040ee94 	.word	0x4040ee94
 80041d4:	00000000 	.word	0x00000000
 80041d8:	408faa00 	.word	0x408faa00

080041dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041e6:	2003      	movs	r0, #3
 80041e8:	f001 fa11 	bl	800560e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041ec:	200f      	movs	r0, #15
 80041ee:	f7fe fc93 	bl	8002b18 <HAL_InitTick>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	71fb      	strb	r3, [r7, #7]
 80041fc:	e001      	b.n	8004202 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80041fe:	f7fe f82d 	bl	800225c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004202:	79fb      	ldrb	r3, [r7, #7]

}
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004210:	4b05      	ldr	r3, [pc, #20]	@ (8004228 <HAL_IncTick+0x1c>)
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4b05      	ldr	r3, [pc, #20]	@ (800422c <HAL_IncTick+0x20>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4413      	add	r3, r2
 800421a:	4a03      	ldr	r2, [pc, #12]	@ (8004228 <HAL_IncTick+0x1c>)
 800421c:	6013      	str	r3, [r2, #0]
}
 800421e:	bf00      	nop
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	200008f0 	.word	0x200008f0
 800422c:	20000008 	.word	0x20000008

08004230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return uwTick;
 8004234:	4b03      	ldr	r3, [pc, #12]	@ (8004244 <HAL_GetTick+0x14>)
 8004236:	681b      	ldr	r3, [r3, #0]
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	200008f0 	.word	0x200008f0

08004248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004250:	f7ff ffee 	bl	8004230 <HAL_GetTick>
 8004254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004260:	d004      	beq.n	800426c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004262:	4b09      	ldr	r3, [pc, #36]	@ (8004288 <HAL_Delay+0x40>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4413      	add	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800426c:	bf00      	nop
 800426e:	f7ff ffdf 	bl	8004230 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	429a      	cmp	r2, r3
 800427c:	d8f7      	bhi.n	800426e <HAL_Delay+0x26>
  {
  }
}
 800427e:	bf00      	nop
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000008 	.word	0x20000008

0800428c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8004294:	4b06      	ldr	r3, [pc, #24]	@ (80042b0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f023 0202 	bic.w	r2, r3, #2
 800429c:	4904      	ldr	r1, [pc, #16]	@ (80042b0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	600b      	str	r3, [r1, #0]
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	40010030 	.word	0x40010030

080042b4 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80042b8:	4b05      	ldr	r3, [pc, #20]	@ (80042d0 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a04      	ldr	r2, [pc, #16]	@ (80042d0 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80042be:	f023 0301 	bic.w	r3, r3, #1
 80042c2:	6013      	str	r3, [r2, #0]
}
 80042c4:	bf00      	nop
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40010030 	.word	0x40010030

080042d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	609a      	str	r2, [r3, #8]
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	609a      	str	r2, [r3, #8]
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3360      	adds	r3, #96	@ 0x60
 800434e:	461a      	mov	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	4b08      	ldr	r3, [pc, #32]	@ (8004380 <LL_ADC_SetOffset+0x44>)
 800435e:	4013      	ands	r3, r2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	4313      	orrs	r3, r2
 800436c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004374:	bf00      	nop
 8004376:	371c      	adds	r7, #28
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	03fff000 	.word	0x03fff000

08004384 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3360      	adds	r3, #96	@ 0x60
 8004392:	461a      	mov	r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3360      	adds	r3, #96	@ 0x60
 80043c0:	461a      	mov	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	431a      	orrs	r2, r3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b087      	sub	sp, #28
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3360      	adds	r3, #96	@ 0x60
 80043f6:	461a      	mov	r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	431a      	orrs	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004410:	bf00      	nop
 8004412:	371c      	adds	r7, #28
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3360      	adds	r3, #96	@ 0x60
 800442c:	461a      	mov	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	431a      	orrs	r2, r3
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004446:	bf00      	nop
 8004448:	371c      	adds	r7, #28
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	615a      	str	r2, [r3, #20]
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3330      	adds	r3, #48	@ 0x30
 8004488:	461a      	mov	r2, r3
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	0a1b      	lsrs	r3, r3, #8
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	f003 030c 	and.w	r3, r3, #12
 8004494:	4413      	add	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 031f 	and.w	r3, r3, #31
 80044a2:	211f      	movs	r1, #31
 80044a4:	fa01 f303 	lsl.w	r3, r1, r3
 80044a8:	43db      	mvns	r3, r3
 80044aa:	401a      	ands	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	0e9b      	lsrs	r3, r3, #26
 80044b0:	f003 011f 	and.w	r1, r3, #31
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f003 031f 	and.w	r3, r3, #31
 80044ba:	fa01 f303 	lsl.w	r3, r1, r3
 80044be:	431a      	orrs	r2, r3
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80044c4:	bf00      	nop
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3314      	adds	r3, #20
 80044e0:	461a      	mov	r2, r3
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	0e5b      	lsrs	r3, r3, #25
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	4413      	add	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	0d1b      	lsrs	r3, r3, #20
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	2107      	movs	r1, #7
 80044fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004502:	43db      	mvns	r3, r3
 8004504:	401a      	ands	r2, r3
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	0d1b      	lsrs	r3, r3, #20
 800450a:	f003 031f 	and.w	r3, r3, #31
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	fa01 f303 	lsl.w	r3, r1, r3
 8004514:	431a      	orrs	r2, r3
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800451a:	bf00      	nop
 800451c:	371c      	adds	r7, #28
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
	...

08004528 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004540:	43db      	mvns	r3, r3
 8004542:	401a      	ands	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f003 0318 	and.w	r3, r3, #24
 800454a:	4908      	ldr	r1, [pc, #32]	@ (800456c <LL_ADC_SetChannelSingleDiff+0x44>)
 800454c:	40d9      	lsrs	r1, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	400b      	ands	r3, r1
 8004552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004556:	431a      	orrs	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	0007ffff 	.word	0x0007ffff

08004570 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004580:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6093      	str	r3, [r2, #8]
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045a8:	d101      	bne.n	80045ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80045cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80045d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045f8:	d101      	bne.n	80045fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <LL_ADC_IsEnabled+0x18>
 8004620:	2301      	movs	r3, #1
 8004622:	e000      	b.n	8004626 <LL_ADC_IsEnabled+0x1a>
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b04      	cmp	r3, #4
 8004644:	d101      	bne.n	800464a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b08      	cmp	r3, #8
 800466a:	d101      	bne.n	8004670 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800466c:	2301      	movs	r3, #1
 800466e:	e000      	b.n	8004672 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
	...

08004680 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004680:	b590      	push	{r4, r7, lr}
 8004682:	b089      	sub	sp, #36	@ 0x24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e19b      	b.n	80049d2 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d109      	bne.n	80046bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7fd fe0f 	bl	80022cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff ff67 	bl	8004594 <LL_ADC_IsDeepPowerDownEnabled>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d004      	beq.n	80046d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff ff4d 	bl	8004570 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff ff82 	bl	80045e4 <LL_ADC_IsInternalRegulatorEnabled>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d115      	bne.n	8004712 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff ff66 	bl	80045bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046f0:	4b97      	ldr	r3, [pc, #604]	@ (8004950 <HAL_ADC_Init+0x2d0>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	099b      	lsrs	r3, r3, #6
 80046f6:	4a97      	ldr	r2, [pc, #604]	@ (8004954 <HAL_ADC_Init+0x2d4>)
 80046f8:	fba2 2303 	umull	r2, r3, r2, r3
 80046fc:	099b      	lsrs	r3, r3, #6
 80046fe:	3301      	adds	r3, #1
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004704:	e002      	b.n	800470c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3b01      	subs	r3, #1
 800470a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f9      	bne.n	8004706 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff ff64 	bl	80045e4 <LL_ADC_IsInternalRegulatorEnabled>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10d      	bne.n	800473e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004726:	f043 0210 	orr.w	r2, r3, #16
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004732:	f043 0201 	orr.w	r2, r3, #1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff ff75 	bl	8004632 <LL_ADC_REG_IsConversionOngoing>
 8004748:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	2b00      	cmp	r3, #0
 8004754:	f040 8134 	bne.w	80049c0 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2b00      	cmp	r3, #0
 800475c:	f040 8130 	bne.w	80049c0 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004764:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004768:	f043 0202 	orr.w	r2, r3, #2
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff ff49 	bl	800460c <LL_ADC_IsEnabled>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d137      	bne.n	80047f0 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004788:	d004      	beq.n	8004794 <HAL_ADC_Init+0x114>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a72      	ldr	r2, [pc, #456]	@ (8004958 <HAL_ADC_Init+0x2d8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d10f      	bne.n	80047b4 <HAL_ADC_Init+0x134>
 8004794:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004798:	f7ff ff38 	bl	800460c <LL_ADC_IsEnabled>
 800479c:	4604      	mov	r4, r0
 800479e:	486e      	ldr	r0, [pc, #440]	@ (8004958 <HAL_ADC_Init+0x2d8>)
 80047a0:	f7ff ff34 	bl	800460c <LL_ADC_IsEnabled>
 80047a4:	4603      	mov	r3, r0
 80047a6:	4323      	orrs	r3, r4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	bf0c      	ite	eq
 80047ac:	2301      	moveq	r3, #1
 80047ae:	2300      	movne	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	e008      	b.n	80047c6 <HAL_ADC_Init+0x146>
 80047b4:	4869      	ldr	r0, [pc, #420]	@ (800495c <HAL_ADC_Init+0x2dc>)
 80047b6:	f7ff ff29 	bl	800460c <LL_ADC_IsEnabled>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	bf0c      	ite	eq
 80047c0:	2301      	moveq	r3, #1
 80047c2:	2300      	movne	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d012      	beq.n	80047f0 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047d2:	d004      	beq.n	80047de <HAL_ADC_Init+0x15e>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a5f      	ldr	r2, [pc, #380]	@ (8004958 <HAL_ADC_Init+0x2d8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d101      	bne.n	80047e2 <HAL_ADC_Init+0x162>
 80047de:	4a60      	ldr	r2, [pc, #384]	@ (8004960 <HAL_ADC_Init+0x2e0>)
 80047e0:	e000      	b.n	80047e4 <HAL_ADC_Init+0x164>
 80047e2:	4a60      	ldr	r2, [pc, #384]	@ (8004964 <HAL_ADC_Init+0x2e4>)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f7ff fd72 	bl	80042d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	7f5b      	ldrb	r3, [r3, #29]
 80047f4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80047fa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004800:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004806:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800480e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004810:	4313      	orrs	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800481a:	2b01      	cmp	r3, #1
 800481c:	d106      	bne.n	800482c <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004822:	3b01      	subs	r3, #1
 8004824:	045b      	lsls	r3, r3, #17
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4313      	orrs	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004830:	2b00      	cmp	r3, #0
 8004832:	d009      	beq.n	8004848 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004838:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004840:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	4313      	orrs	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	4b46      	ldr	r3, [pc, #280]	@ (8004968 <HAL_ADC_Init+0x2e8>)
 8004850:	4013      	ands	r3, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6812      	ldr	r2, [r2, #0]
 8004856:	69b9      	ldr	r1, [r7, #24]
 8004858:	430b      	orrs	r3, r1
 800485a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff feee 	bl	8004658 <LL_ADC_INJ_IsConversionOngoing>
 800487c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d17b      	bne.n	800497c <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d178      	bne.n	800497c <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800488e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004896:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004898:	4313      	orrs	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048a6:	f023 0302 	bic.w	r3, r3, #2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6812      	ldr	r2, [r2, #0]
 80048ae:	69b9      	ldr	r1, [r7, #24]
 80048b0:	430b      	orrs	r3, r1
 80048b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d017      	beq.n	80048ec <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80048ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80048d4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80048d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6911      	ldr	r1, [r2, #16]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6812      	ldr	r2, [r2, #0]
 80048e4:	430b      	orrs	r3, r1
 80048e6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80048ea:	e013      	b.n	8004914 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691a      	ldr	r2, [r3, #16]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80048fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6812      	ldr	r2, [r2, #0]
 8004908:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800490c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004910:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800491a:	2b01      	cmp	r3, #1
 800491c:	d126      	bne.n	800496c <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004928:	f023 0304 	bic.w	r3, r3, #4
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004934:	4311      	orrs	r1, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800493a:	4311      	orrs	r1, r2
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004940:	430a      	orrs	r2, r1
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0201 	orr.w	r2, r2, #1
 800494c:	611a      	str	r2, [r3, #16]
 800494e:	e015      	b.n	800497c <HAL_ADC_Init+0x2fc>
 8004950:	20000000 	.word	0x20000000
 8004954:	053e2d63 	.word	0x053e2d63
 8004958:	50000100 	.word	0x50000100
 800495c:	50000400 	.word	0x50000400
 8004960:	50000300 	.word	0x50000300
 8004964:	50000700 	.word	0x50000700
 8004968:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691a      	ldr	r2, [r3, #16]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0201 	bic.w	r2, r2, #1
 800497a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d10c      	bne.n	800499e <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498a:	f023 010f 	bic.w	r1, r3, #15
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	1e5a      	subs	r2, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	631a      	str	r2, [r3, #48]	@ 0x30
 800499c:	e007      	b.n	80049ae <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 020f 	bic.w	r2, r2, #15
 80049ac:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b2:	f023 0303 	bic.w	r3, r3, #3
 80049b6:	f043 0201 	orr.w	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049be:	e007      	b.n	80049d0 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c4:	f043 0210 	orr.w	r2, r3, #16
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80049d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3724      	adds	r7, #36	@ 0x24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd90      	pop	{r4, r7, pc}
 80049da:	bf00      	nop

080049dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b0b6      	sub	sp, #216	@ 0xd8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d102      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x24>
 80049fa:	2302      	movs	r3, #2
 80049fc:	f000 bc04 	b.w	8005208 <HAL_ADC_ConfigChannel+0x82c>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff fe10 	bl	8004632 <LL_ADC_REG_IsConversionOngoing>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f040 83e8 	bne.w	80051ea <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6859      	ldr	r1, [r3, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	f7ff fd26 	bl	8004478 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff fdfe 	bl	8004632 <LL_ADC_REG_IsConversionOngoing>
 8004a36:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff fe0a 	bl	8004658 <LL_ADC_INJ_IsConversionOngoing>
 8004a44:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f040 81d9 	bne.w	8004e04 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f040 81d4 	bne.w	8004e04 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a64:	d10f      	bne.n	8004a86 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	4619      	mov	r1, r3
 8004a72:	f7ff fd2d 	bl	80044d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff fce7 	bl	8004452 <LL_ADC_SetSamplingTimeCommonConfig>
 8004a84:	e00e      	b.n	8004aa4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	6819      	ldr	r1, [r3, #0]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	461a      	mov	r2, r3
 8004a94:	f7ff fd1c 	bl	80044d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fcd7 	bl	8004452 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	695a      	ldr	r2, [r3, #20]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	08db      	lsrs	r3, r3, #3
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d022      	beq.n	8004b0c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6818      	ldr	r0, [r3, #0]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	6919      	ldr	r1, [r3, #16]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ad6:	f7ff fc31 	bl	800433c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	6919      	ldr	r1, [r3, #16]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f7ff fc7d 	bl	80043e6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d102      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x126>
 8004afc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b00:	e000      	b.n	8004b04 <HAL_ADC_ConfigChannel+0x128>
 8004b02:	2300      	movs	r3, #0
 8004b04:	461a      	mov	r2, r3
 8004b06:	f7ff fc89 	bl	800441c <LL_ADC_SetOffsetSaturation>
 8004b0a:	e17b      	b.n	8004e04 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2100      	movs	r1, #0
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff fc36 	bl	8004384 <LL_ADC_GetOffsetChannel>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10a      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0x15c>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2100      	movs	r1, #0
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff fc2b 	bl	8004384 <LL_ADC_GetOffsetChannel>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	0e9b      	lsrs	r3, r3, #26
 8004b32:	f003 021f 	and.w	r2, r3, #31
 8004b36:	e01e      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x19a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff fc20 	bl	8004384 <LL_ADC_GetOffsetChannel>
 8004b44:	4603      	mov	r3, r0
 8004b46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004b4e:	fa93 f3a3 	rbit	r3, r3
 8004b52:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004b5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004b66:	2320      	movs	r3, #32
 8004b68:	e004      	b.n	8004b74 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004b6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b6e:	fab3 f383 	clz	r3, r3
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d105      	bne.n	8004b8e <HAL_ADC_ConfigChannel+0x1b2>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	0e9b      	lsrs	r3, r3, #26
 8004b88:	f003 031f 	and.w	r3, r3, #31
 8004b8c:	e018      	b.n	8004bc0 <HAL_ADC_ConfigChannel+0x1e4>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004b9a:	fa93 f3a3 	rbit	r3, r3
 8004b9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ba6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004baa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004bb2:	2320      	movs	r3, #32
 8004bb4:	e004      	b.n	8004bc0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004bb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004bba:	fab3 f383 	clz	r3, r3
 8004bbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d106      	bne.n	8004bd2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2100      	movs	r1, #0
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff fbef 	bl	80043b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff fbd3 	bl	8004384 <LL_ADC_GetOffsetChannel>
 8004bde:	4603      	mov	r3, r0
 8004be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10a      	bne.n	8004bfe <HAL_ADC_ConfigChannel+0x222>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2101      	movs	r1, #1
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff fbc8 	bl	8004384 <LL_ADC_GetOffsetChannel>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	0e9b      	lsrs	r3, r3, #26
 8004bf8:	f003 021f 	and.w	r2, r3, #31
 8004bfc:	e01e      	b.n	8004c3c <HAL_ADC_ConfigChannel+0x260>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2101      	movs	r1, #1
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff fbbd 	bl	8004384 <LL_ADC_GetOffsetChannel>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c14:	fa93 f3a3 	rbit	r3, r3
 8004c18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004c1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004c24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004c2c:	2320      	movs	r3, #32
 8004c2e:	e004      	b.n	8004c3a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004c30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c34:	fab3 f383 	clz	r3, r3
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d105      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x278>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	0e9b      	lsrs	r3, r3, #26
 8004c4e:	f003 031f 	and.w	r3, r3, #31
 8004c52:	e018      	b.n	8004c86 <HAL_ADC_ConfigChannel+0x2aa>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c60:	fa93 f3a3 	rbit	r3, r3
 8004c64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004c68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004c70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004c78:	2320      	movs	r3, #32
 8004c7a:	e004      	b.n	8004c86 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c80:	fab3 f383 	clz	r3, r3
 8004c84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d106      	bne.n	8004c98 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	2101      	movs	r1, #1
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff fb8c 	bl	80043b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2102      	movs	r1, #2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff fb70 	bl	8004384 <LL_ADC_GetOffsetChannel>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10a      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x2e8>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2102      	movs	r1, #2
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff fb65 	bl	8004384 <LL_ADC_GetOffsetChannel>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	0e9b      	lsrs	r3, r3, #26
 8004cbe:	f003 021f 	and.w	r2, r3, #31
 8004cc2:	e01e      	b.n	8004d02 <HAL_ADC_ConfigChannel+0x326>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2102      	movs	r1, #2
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff fb5a 	bl	8004384 <LL_ADC_GetOffsetChannel>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cda:	fa93 f3a3 	rbit	r3, r3
 8004cde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004ce2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ce6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004cea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004cf2:	2320      	movs	r3, #32
 8004cf4:	e004      	b.n	8004d00 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004cf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004cfa:	fab3 f383 	clz	r3, r3
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d105      	bne.n	8004d1a <HAL_ADC_ConfigChannel+0x33e>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	0e9b      	lsrs	r3, r3, #26
 8004d14:	f003 031f 	and.w	r3, r3, #31
 8004d18:	e016      	b.n	8004d48 <HAL_ADC_ConfigChannel+0x36c>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d22:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d26:	fa93 f3a3 	rbit	r3, r3
 8004d2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004d2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004d32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004d3a:	2320      	movs	r3, #32
 8004d3c:	e004      	b.n	8004d48 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004d3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d42:	fab3 f383 	clz	r3, r3
 8004d46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d106      	bne.n	8004d5a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2200      	movs	r2, #0
 8004d52:	2102      	movs	r1, #2
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff fb2b 	bl	80043b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2103      	movs	r1, #3
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff fb0f 	bl	8004384 <LL_ADC_GetOffsetChannel>
 8004d66:	4603      	mov	r3, r0
 8004d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10a      	bne.n	8004d86 <HAL_ADC_ConfigChannel+0x3aa>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2103      	movs	r1, #3
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff fb04 	bl	8004384 <LL_ADC_GetOffsetChannel>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	0e9b      	lsrs	r3, r3, #26
 8004d80:	f003 021f 	and.w	r2, r3, #31
 8004d84:	e017      	b.n	8004db6 <HAL_ADC_ConfigChannel+0x3da>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2103      	movs	r1, #3
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff faf9 	bl	8004384 <LL_ADC_GetOffsetChannel>
 8004d92:	4603      	mov	r3, r0
 8004d94:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d98:	fa93 f3a3 	rbit	r3, r3
 8004d9c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004d9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004da0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004da2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004da8:	2320      	movs	r3, #32
 8004daa:	e003      	b.n	8004db4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004dac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004dae:	fab3 f383 	clz	r3, r3
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d105      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x3f2>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	0e9b      	lsrs	r3, r3, #26
 8004dc8:	f003 031f 	and.w	r3, r3, #31
 8004dcc:	e011      	b.n	8004df2 <HAL_ADC_ConfigChannel+0x416>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dd6:	fa93 f3a3 	rbit	r3, r3
 8004dda:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004ddc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dde:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004de0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004de6:	2320      	movs	r3, #32
 8004de8:	e003      	b.n	8004df2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004dea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dec:	fab3 f383 	clz	r3, r3
 8004df0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d106      	bne.n	8004e04 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2103      	movs	r1, #3
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff fad6 	bl	80043b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff fbff 	bl	800460c <LL_ADC_IsEnabled>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f040 813d 	bne.w	8005090 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	6819      	ldr	r1, [r3, #0]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	461a      	mov	r2, r3
 8004e24:	f7ff fb80 	bl	8004528 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	4aa2      	ldr	r2, [pc, #648]	@ (80050b8 <HAL_ADC_ConfigChannel+0x6dc>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	f040 812e 	bne.w	8005090 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10b      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0x480>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	0e9b      	lsrs	r3, r3, #26
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	f003 031f 	and.w	r3, r3, #31
 8004e50:	2b09      	cmp	r3, #9
 8004e52:	bf94      	ite	ls
 8004e54:	2301      	movls	r3, #1
 8004e56:	2300      	movhi	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	e019      	b.n	8004e90 <HAL_ADC_ConfigChannel+0x4b4>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e64:	fa93 f3a3 	rbit	r3, r3
 8004e68:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004e6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e6c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004e6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004e74:	2320      	movs	r3, #32
 8004e76:	e003      	b.n	8004e80 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004e78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e7a:	fab3 f383 	clz	r3, r3
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	3301      	adds	r3, #1
 8004e82:	f003 031f 	and.w	r3, r3, #31
 8004e86:	2b09      	cmp	r3, #9
 8004e88:	bf94      	ite	ls
 8004e8a:	2301      	movls	r3, #1
 8004e8c:	2300      	movhi	r3, #0
 8004e8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d079      	beq.n	8004f88 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d107      	bne.n	8004eb0 <HAL_ADC_ConfigChannel+0x4d4>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	0e9b      	lsrs	r3, r3, #26
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	069b      	lsls	r3, r3, #26
 8004eaa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004eae:	e015      	b.n	8004edc <HAL_ADC_ConfigChannel+0x500>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004eb8:	fa93 f3a3 	rbit	r3, r3
 8004ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004ebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ec0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004ec8:	2320      	movs	r3, #32
 8004eca:	e003      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004ecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ece:	fab3 f383 	clz	r3, r3
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	069b      	lsls	r3, r3, #26
 8004ed8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d109      	bne.n	8004efc <HAL_ADC_ConfigChannel+0x520>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	0e9b      	lsrs	r3, r3, #26
 8004eee:	3301      	adds	r3, #1
 8004ef0:	f003 031f 	and.w	r3, r3, #31
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8004efa:	e017      	b.n	8004f2c <HAL_ADC_ConfigChannel+0x550>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f04:	fa93 f3a3 	rbit	r3, r3
 8004f08:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004f0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004f0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004f14:	2320      	movs	r3, #32
 8004f16:	e003      	b.n	8004f20 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004f18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f1a:	fab3 f383 	clz	r3, r3
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	3301      	adds	r3, #1
 8004f22:	f003 031f 	and.w	r3, r3, #31
 8004f26:	2101      	movs	r1, #1
 8004f28:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2c:	ea42 0103 	orr.w	r1, r2, r3
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10a      	bne.n	8004f52 <HAL_ADC_ConfigChannel+0x576>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	0e9b      	lsrs	r3, r3, #26
 8004f42:	3301      	adds	r3, #1
 8004f44:	f003 021f 	and.w	r2, r3, #31
 8004f48:	4613      	mov	r3, r2
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	4413      	add	r3, r2
 8004f4e:	051b      	lsls	r3, r3, #20
 8004f50:	e018      	b.n	8004f84 <HAL_ADC_ConfigChannel+0x5a8>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5a:	fa93 f3a3 	rbit	r3, r3
 8004f5e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004f6a:	2320      	movs	r3, #32
 8004f6c:	e003      	b.n	8004f76 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f70:	fab3 f383 	clz	r3, r3
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	3301      	adds	r3, #1
 8004f78:	f003 021f 	and.w	r2, r3, #31
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	4413      	add	r3, r2
 8004f82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f84:	430b      	orrs	r3, r1
 8004f86:	e07e      	b.n	8005086 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d107      	bne.n	8004fa4 <HAL_ADC_ConfigChannel+0x5c8>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	0e9b      	lsrs	r3, r3, #26
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	069b      	lsls	r3, r3, #26
 8004f9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004fa2:	e015      	b.n	8004fd0 <HAL_ADC_ConfigChannel+0x5f4>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fac:	fa93 f3a3 	rbit	r3, r3
 8004fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004fbc:	2320      	movs	r3, #32
 8004fbe:	e003      	b.n	8004fc8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc2:	fab3 f383 	clz	r3, r3
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	3301      	adds	r3, #1
 8004fca:	069b      	lsls	r3, r3, #26
 8004fcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d109      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x614>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	0e9b      	lsrs	r3, r3, #26
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	f003 031f 	and.w	r3, r3, #31
 8004fe8:	2101      	movs	r1, #1
 8004fea:	fa01 f303 	lsl.w	r3, r1, r3
 8004fee:	e017      	b.n	8005020 <HAL_ADC_ConfigChannel+0x644>
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	fa93 f3a3 	rbit	r3, r3
 8004ffc:	61fb      	str	r3, [r7, #28]
  return result;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005008:	2320      	movs	r3, #32
 800500a:	e003      	b.n	8005014 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	fab3 f383 	clz	r3, r3
 8005012:	b2db      	uxtb	r3, r3
 8005014:	3301      	adds	r3, #1
 8005016:	f003 031f 	and.w	r3, r3, #31
 800501a:	2101      	movs	r1, #1
 800501c:	fa01 f303 	lsl.w	r3, r1, r3
 8005020:	ea42 0103 	orr.w	r1, r2, r3
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10d      	bne.n	800504c <HAL_ADC_ConfigChannel+0x670>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	0e9b      	lsrs	r3, r3, #26
 8005036:	3301      	adds	r3, #1
 8005038:	f003 021f 	and.w	r2, r3, #31
 800503c:	4613      	mov	r3, r2
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	4413      	add	r3, r2
 8005042:	3b1e      	subs	r3, #30
 8005044:	051b      	lsls	r3, r3, #20
 8005046:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800504a:	e01b      	b.n	8005084 <HAL_ADC_ConfigChannel+0x6a8>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	fa93 f3a3 	rbit	r3, r3
 8005058:	613b      	str	r3, [r7, #16]
  return result;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005064:	2320      	movs	r3, #32
 8005066:	e003      	b.n	8005070 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	fab3 f383 	clz	r3, r3
 800506e:	b2db      	uxtb	r3, r3
 8005070:	3301      	adds	r3, #1
 8005072:	f003 021f 	and.w	r2, r3, #31
 8005076:	4613      	mov	r3, r2
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	4413      	add	r3, r2
 800507c:	3b1e      	subs	r3, #30
 800507e:	051b      	lsls	r3, r3, #20
 8005080:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005084:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800508a:	4619      	mov	r1, r3
 800508c:	f7ff fa20 	bl	80044d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	4b09      	ldr	r3, [pc, #36]	@ (80050bc <HAL_ADC_ConfigChannel+0x6e0>)
 8005096:	4013      	ands	r3, r2
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80af 	beq.w	80051fc <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050a6:	d004      	beq.n	80050b2 <HAL_ADC_ConfigChannel+0x6d6>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a04      	ldr	r2, [pc, #16]	@ (80050c0 <HAL_ADC_ConfigChannel+0x6e4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d10a      	bne.n	80050c8 <HAL_ADC_ConfigChannel+0x6ec>
 80050b2:	4b04      	ldr	r3, [pc, #16]	@ (80050c4 <HAL_ADC_ConfigChannel+0x6e8>)
 80050b4:	e009      	b.n	80050ca <HAL_ADC_ConfigChannel+0x6ee>
 80050b6:	bf00      	nop
 80050b8:	407f0000 	.word	0x407f0000
 80050bc:	80080000 	.word	0x80080000
 80050c0:	50000100 	.word	0x50000100
 80050c4:	50000300 	.word	0x50000300
 80050c8:	4b51      	ldr	r3, [pc, #324]	@ (8005210 <HAL_ADC_ConfigChannel+0x834>)
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7ff f928 	bl	8004320 <LL_ADC_GetCommonPathInternalCh>
 80050d0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a4e      	ldr	r2, [pc, #312]	@ (8005214 <HAL_ADC_ConfigChannel+0x838>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <HAL_ADC_ConfigChannel+0x70c>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a4d      	ldr	r2, [pc, #308]	@ (8005218 <HAL_ADC_ConfigChannel+0x83c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d134      	bne.n	8005152 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80050ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d12e      	bne.n	8005152 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050fc:	d17e      	bne.n	80051fc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005106:	d004      	beq.n	8005112 <HAL_ADC_ConfigChannel+0x736>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a43      	ldr	r2, [pc, #268]	@ (800521c <HAL_ADC_ConfigChannel+0x840>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d101      	bne.n	8005116 <HAL_ADC_ConfigChannel+0x73a>
 8005112:	4a43      	ldr	r2, [pc, #268]	@ (8005220 <HAL_ADC_ConfigChannel+0x844>)
 8005114:	e000      	b.n	8005118 <HAL_ADC_ConfigChannel+0x73c>
 8005116:	4a3e      	ldr	r2, [pc, #248]	@ (8005210 <HAL_ADC_ConfigChannel+0x834>)
 8005118:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800511c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005120:	4619      	mov	r1, r3
 8005122:	4610      	mov	r0, r2
 8005124:	f7ff f8e9 	bl	80042fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005128:	4b3e      	ldr	r3, [pc, #248]	@ (8005224 <HAL_ADC_ConfigChannel+0x848>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	099b      	lsrs	r3, r3, #6
 800512e:	4a3e      	ldr	r2, [pc, #248]	@ (8005228 <HAL_ADC_ConfigChannel+0x84c>)
 8005130:	fba2 2303 	umull	r2, r3, r2, r3
 8005134:	099b      	lsrs	r3, r3, #6
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	4613      	mov	r3, r2
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	4413      	add	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005142:	e002      	b.n	800514a <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	3b01      	subs	r3, #1
 8005148:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1f9      	bne.n	8005144 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005150:	e054      	b.n	80051fc <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a35      	ldr	r2, [pc, #212]	@ (800522c <HAL_ADC_ConfigChannel+0x850>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d120      	bne.n	800519e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800515c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005160:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d11a      	bne.n	800519e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005170:	d144      	bne.n	80051fc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800517a:	d004      	beq.n	8005186 <HAL_ADC_ConfigChannel+0x7aa>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a26      	ldr	r2, [pc, #152]	@ (800521c <HAL_ADC_ConfigChannel+0x840>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d101      	bne.n	800518a <HAL_ADC_ConfigChannel+0x7ae>
 8005186:	4a26      	ldr	r2, [pc, #152]	@ (8005220 <HAL_ADC_ConfigChannel+0x844>)
 8005188:	e000      	b.n	800518c <HAL_ADC_ConfigChannel+0x7b0>
 800518a:	4a21      	ldr	r2, [pc, #132]	@ (8005210 <HAL_ADC_ConfigChannel+0x834>)
 800518c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005190:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005194:	4619      	mov	r1, r3
 8005196:	4610      	mov	r0, r2
 8005198:	f7ff f8af 	bl	80042fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800519c:	e02e      	b.n	80051fc <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a23      	ldr	r2, [pc, #140]	@ (8005230 <HAL_ADC_ConfigChannel+0x854>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d129      	bne.n	80051fc <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80051a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80051ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d123      	bne.n	80051fc <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a18      	ldr	r2, [pc, #96]	@ (800521c <HAL_ADC_ConfigChannel+0x840>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d01e      	beq.n	80051fc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051c6:	d004      	beq.n	80051d2 <HAL_ADC_ConfigChannel+0x7f6>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a13      	ldr	r2, [pc, #76]	@ (800521c <HAL_ADC_ConfigChannel+0x840>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d101      	bne.n	80051d6 <HAL_ADC_ConfigChannel+0x7fa>
 80051d2:	4a13      	ldr	r2, [pc, #76]	@ (8005220 <HAL_ADC_ConfigChannel+0x844>)
 80051d4:	e000      	b.n	80051d8 <HAL_ADC_ConfigChannel+0x7fc>
 80051d6:	4a0e      	ldr	r2, [pc, #56]	@ (8005210 <HAL_ADC_ConfigChannel+0x834>)
 80051d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80051dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80051e0:	4619      	mov	r1, r3
 80051e2:	4610      	mov	r0, r2
 80051e4:	f7ff f889 	bl	80042fa <LL_ADC_SetCommonPathInternalCh>
 80051e8:	e008      	b.n	80051fc <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ee:	f043 0220 	orr.w	r2, r3, #32
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005204:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005208:	4618      	mov	r0, r3
 800520a:	37d8      	adds	r7, #216	@ 0xd8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	50000700 	.word	0x50000700
 8005214:	c3210000 	.word	0xc3210000
 8005218:	90c00010 	.word	0x90c00010
 800521c:	50000100 	.word	0x50000100
 8005220:	50000300 	.word	0x50000300
 8005224:	20000000 	.word	0x20000000
 8005228:	053e2d63 	.word	0x053e2d63
 800522c:	c7520000 	.word	0xc7520000
 8005230:	cb840000 	.word	0xcb840000

08005234 <LL_ADC_IsEnabled>:
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <LL_ADC_IsEnabled+0x18>
 8005248:	2301      	movs	r3, #1
 800524a:	e000      	b.n	800524e <LL_ADC_IsEnabled+0x1a>
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <LL_ADC_REG_IsConversionOngoing>:
{
 800525a:	b480      	push	{r7}
 800525c:	b083      	sub	sp, #12
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b04      	cmp	r3, #4
 800526c:	d101      	bne.n	8005272 <LL_ADC_REG_IsConversionOngoing+0x18>
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005280:	b590      	push	{r4, r7, lr}
 8005282:	b0a1      	sub	sp, #132	@ 0x84
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005296:	2b01      	cmp	r3, #1
 8005298:	d101      	bne.n	800529e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800529a:	2302      	movs	r3, #2
 800529c:	e0cb      	b.n	8005436 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80052a6:	2300      	movs	r3, #0
 80052a8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80052aa:	2300      	movs	r3, #0
 80052ac:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052b6:	d102      	bne.n	80052be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80052b8:	4b61      	ldr	r3, [pc, #388]	@ (8005440 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80052ba:	60bb      	str	r3, [r7, #8]
 80052bc:	e001      	b.n	80052c2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80052be:	2300      	movs	r3, #0
 80052c0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10b      	bne.n	80052e0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052cc:	f043 0220 	orr.w	r2, r3, #32
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0aa      	b.n	8005436 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff ffb9 	bl	800525a <LL_ADC_REG_IsConversionOngoing>
 80052e8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff ffb3 	bl	800525a <LL_ADC_REG_IsConversionOngoing>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f040 808c 	bne.w	8005414 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80052fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f040 8088 	bne.w	8005414 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800530c:	d004      	beq.n	8005318 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a4b      	ldr	r2, [pc, #300]	@ (8005440 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d101      	bne.n	800531c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8005318:	4b4a      	ldr	r3, [pc, #296]	@ (8005444 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 800531a:	e000      	b.n	800531e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800531c:	4b4a      	ldr	r3, [pc, #296]	@ (8005448 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 800531e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d041      	beq.n	80053ac <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005328:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	6859      	ldr	r1, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800533a:	035b      	lsls	r3, r3, #13
 800533c:	430b      	orrs	r3, r1
 800533e:	431a      	orrs	r2, r3
 8005340:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005342:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800534c:	d004      	beq.n	8005358 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a3b      	ldr	r2, [pc, #236]	@ (8005440 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d10f      	bne.n	8005378 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8005358:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800535c:	f7ff ff6a 	bl	8005234 <LL_ADC_IsEnabled>
 8005360:	4604      	mov	r4, r0
 8005362:	4837      	ldr	r0, [pc, #220]	@ (8005440 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005364:	f7ff ff66 	bl	8005234 <LL_ADC_IsEnabled>
 8005368:	4603      	mov	r3, r0
 800536a:	4323      	orrs	r3, r4
 800536c:	2b00      	cmp	r3, #0
 800536e:	bf0c      	ite	eq
 8005370:	2301      	moveq	r3, #1
 8005372:	2300      	movne	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	e008      	b.n	800538a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8005378:	4834      	ldr	r0, [pc, #208]	@ (800544c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800537a:	f7ff ff5b 	bl	8005234 <LL_ADC_IsEnabled>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	bf0c      	ite	eq
 8005384:	2301      	moveq	r3, #1
 8005386:	2300      	movne	r3, #0
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d04c      	beq.n	8005428 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800538e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005396:	f023 030f 	bic.w	r3, r3, #15
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	6811      	ldr	r1, [r2, #0]
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	6892      	ldr	r2, [r2, #8]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	431a      	orrs	r2, r3
 80053a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053a8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80053aa:	e03d      	b.n	8005428 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80053ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053b6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053c0:	d004      	beq.n	80053cc <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005440 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d10f      	bne.n	80053ec <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80053cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80053d0:	f7ff ff30 	bl	8005234 <LL_ADC_IsEnabled>
 80053d4:	4604      	mov	r4, r0
 80053d6:	481a      	ldr	r0, [pc, #104]	@ (8005440 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80053d8:	f7ff ff2c 	bl	8005234 <LL_ADC_IsEnabled>
 80053dc:	4603      	mov	r3, r0
 80053de:	4323      	orrs	r3, r4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	bf0c      	ite	eq
 80053e4:	2301      	moveq	r3, #1
 80053e6:	2300      	movne	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	e008      	b.n	80053fe <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 80053ec:	4817      	ldr	r0, [pc, #92]	@ (800544c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80053ee:	f7ff ff21 	bl	8005234 <LL_ADC_IsEnabled>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	bf0c      	ite	eq
 80053f8:	2301      	moveq	r3, #1
 80053fa:	2300      	movne	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d012      	beq.n	8005428 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005402:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800540a:	f023 030f 	bic.w	r3, r3, #15
 800540e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005410:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005412:	e009      	b.n	8005428 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005418:	f043 0220 	orr.w	r2, r3, #32
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005426:	e000      	b.n	800542a <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005428:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005432:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005436:	4618      	mov	r0, r3
 8005438:	3784      	adds	r7, #132	@ 0x84
 800543a:	46bd      	mov	sp, r7
 800543c:	bd90      	pop	{r4, r7, pc}
 800543e:	bf00      	nop
 8005440:	50000100 	.word	0x50000100
 8005444:	50000300 	.word	0x50000300
 8005448:	50000700 	.word	0x50000700
 800544c:	50000400 	.word	0x50000400

08005450 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e023      	b.n	80054aa <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7fc ff7c 	bl	8002374 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f003 0307 	and.w	r3, r3, #7
 80054c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054c4:	4b0c      	ldr	r3, [pc, #48]	@ (80054f8 <__NVIC_SetPriorityGrouping+0x44>)
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80054d0:	4013      	ands	r3, r2
 80054d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80054e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054e6:	4a04      	ldr	r2, [pc, #16]	@ (80054f8 <__NVIC_SetPriorityGrouping+0x44>)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	60d3      	str	r3, [r2, #12]
}
 80054ec:	bf00      	nop
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	e000ed00 	.word	0xe000ed00

080054fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005500:	4b04      	ldr	r3, [pc, #16]	@ (8005514 <__NVIC_GetPriorityGrouping+0x18>)
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	0a1b      	lsrs	r3, r3, #8
 8005506:	f003 0307 	and.w	r3, r3, #7
}
 800550a:	4618      	mov	r0, r3
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	e000ed00 	.word	0xe000ed00

08005518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	4603      	mov	r3, r0
 8005520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005526:	2b00      	cmp	r3, #0
 8005528:	db0b      	blt.n	8005542 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	f003 021f 	and.w	r2, r3, #31
 8005530:	4907      	ldr	r1, [pc, #28]	@ (8005550 <__NVIC_EnableIRQ+0x38>)
 8005532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005536:	095b      	lsrs	r3, r3, #5
 8005538:	2001      	movs	r0, #1
 800553a:	fa00 f202 	lsl.w	r2, r0, r2
 800553e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	e000e100 	.word	0xe000e100

08005554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	4603      	mov	r3, r0
 800555c:	6039      	str	r1, [r7, #0]
 800555e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005564:	2b00      	cmp	r3, #0
 8005566:	db0a      	blt.n	800557e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	b2da      	uxtb	r2, r3
 800556c:	490c      	ldr	r1, [pc, #48]	@ (80055a0 <__NVIC_SetPriority+0x4c>)
 800556e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005572:	0112      	lsls	r2, r2, #4
 8005574:	b2d2      	uxtb	r2, r2
 8005576:	440b      	add	r3, r1
 8005578:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800557c:	e00a      	b.n	8005594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	b2da      	uxtb	r2, r3
 8005582:	4908      	ldr	r1, [pc, #32]	@ (80055a4 <__NVIC_SetPriority+0x50>)
 8005584:	79fb      	ldrb	r3, [r7, #7]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	3b04      	subs	r3, #4
 800558c:	0112      	lsls	r2, r2, #4
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	440b      	add	r3, r1
 8005592:	761a      	strb	r2, [r3, #24]
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	e000e100 	.word	0xe000e100
 80055a4:	e000ed00 	.word	0xe000ed00

080055a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b089      	sub	sp, #36	@ 0x24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f1c3 0307 	rsb	r3, r3, #7
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	bf28      	it	cs
 80055c6:	2304      	movcs	r3, #4
 80055c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	3304      	adds	r3, #4
 80055ce:	2b06      	cmp	r3, #6
 80055d0:	d902      	bls.n	80055d8 <NVIC_EncodePriority+0x30>
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	3b03      	subs	r3, #3
 80055d6:	e000      	b.n	80055da <NVIC_EncodePriority+0x32>
 80055d8:	2300      	movs	r3, #0
 80055da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	fa02 f303 	lsl.w	r3, r2, r3
 80055e6:	43da      	mvns	r2, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	401a      	ands	r2, r3
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	fa01 f303 	lsl.w	r3, r1, r3
 80055fa:	43d9      	mvns	r1, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005600:	4313      	orrs	r3, r2
         );
}
 8005602:	4618      	mov	r0, r3
 8005604:	3724      	adds	r7, #36	@ 0x24
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b082      	sub	sp, #8
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff ff4c 	bl	80054b4 <__NVIC_SetPriorityGrouping>
}
 800561c:	bf00      	nop
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	4603      	mov	r3, r0
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005632:	f7ff ff63 	bl	80054fc <__NVIC_GetPriorityGrouping>
 8005636:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	68b9      	ldr	r1, [r7, #8]
 800563c:	6978      	ldr	r0, [r7, #20]
 800563e:	f7ff ffb3 	bl	80055a8 <NVIC_EncodePriority>
 8005642:	4602      	mov	r2, r0
 8005644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005648:	4611      	mov	r1, r2
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff ff82 	bl	8005554 <__NVIC_SetPriority>
}
 8005650:	bf00      	nop
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	4603      	mov	r3, r0
 8005660:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff ff56 	bl	8005518 <__NVIC_EnableIRQ>
}
 800566c:	bf00      	nop
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e08d      	b.n	80057a2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	4b47      	ldr	r3, [pc, #284]	@ (80057ac <HAL_DMA_Init+0x138>)
 800568e:	429a      	cmp	r2, r3
 8005690:	d80f      	bhi.n	80056b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	4b45      	ldr	r3, [pc, #276]	@ (80057b0 <HAL_DMA_Init+0x13c>)
 800569a:	4413      	add	r3, r2
 800569c:	4a45      	ldr	r2, [pc, #276]	@ (80057b4 <HAL_DMA_Init+0x140>)
 800569e:	fba2 2303 	umull	r2, r3, r2, r3
 80056a2:	091b      	lsrs	r3, r3, #4
 80056a4:	009a      	lsls	r2, r3, #2
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a42      	ldr	r2, [pc, #264]	@ (80057b8 <HAL_DMA_Init+0x144>)
 80056ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80056b0:	e00e      	b.n	80056d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	4b40      	ldr	r3, [pc, #256]	@ (80057bc <HAL_DMA_Init+0x148>)
 80056ba:	4413      	add	r3, r2
 80056bc:	4a3d      	ldr	r2, [pc, #244]	@ (80057b4 <HAL_DMA_Init+0x140>)
 80056be:	fba2 2303 	umull	r2, r3, r2, r3
 80056c2:	091b      	lsrs	r3, r3, #4
 80056c4:	009a      	lsls	r2, r3, #2
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a3c      	ldr	r2, [pc, #240]	@ (80057c0 <HAL_DMA_Init+0x14c>)
 80056ce:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80056e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80056f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005700:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800570c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f9be 	bl	8005aa4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005730:	d102      	bne.n	8005738 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005740:	b2d2      	uxtb	r2, r2
 8005742:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800574c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d010      	beq.n	8005778 <HAL_DMA_Init+0x104>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b04      	cmp	r3, #4
 800575c:	d80c      	bhi.n	8005778 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f9de 	bl	8005b20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005774:	605a      	str	r2, [r3, #4]
 8005776:	e008      	b.n	800578a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	40020407 	.word	0x40020407
 80057b0:	bffdfff8 	.word	0xbffdfff8
 80057b4:	cccccccd 	.word	0xcccccccd
 80057b8:	40020000 	.word	0x40020000
 80057bc:	bffdfbf8 	.word	0xbffdfbf8
 80057c0:	40020400 	.word	0x40020400

080057c4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057cc:	2300      	movs	r3, #0
 80057ce:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d005      	beq.n	80057e8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2204      	movs	r2, #4
 80057e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	73fb      	strb	r3, [r7, #15]
 80057e6:	e037      	b.n	8005858 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 020e 	bic.w	r2, r2, #14
 80057f6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005802:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005806:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0201 	bic.w	r2, r2, #1
 8005816:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581c:	f003 021f 	and.w	r2, r3, #31
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005824:	2101      	movs	r1, #1
 8005826:	fa01 f202 	lsl.w	r2, r1, r2
 800582a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005834:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00c      	beq.n	8005858 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005848:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800584c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005856:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005868:	7bfb      	ldrb	r3, [r7, #15]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d00d      	beq.n	80058aa <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2204      	movs	r2, #4
 8005892:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	73fb      	strb	r3, [r7, #15]
 80058a8:	e047      	b.n	800593a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 020e 	bic.w	r2, r2, #14
 80058b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0201 	bic.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058de:	f003 021f 	and.w	r2, r3, #31
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e6:	2101      	movs	r1, #1
 80058e8:	fa01 f202 	lsl.w	r2, r1, r2
 80058ec:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80058f6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00c      	beq.n	800591a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800590a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800590e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005918:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	4798      	blx	r3
    }
  }
  return status;
 800593a:	7bfb      	ldrb	r3, [r7, #15]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005960:	f003 031f 	and.w	r3, r3, #31
 8005964:	2204      	movs	r2, #4
 8005966:	409a      	lsls	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4013      	ands	r3, r2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d026      	beq.n	80059be <HAL_DMA_IRQHandler+0x7a>
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f003 0304 	and.w	r3, r3, #4
 8005976:	2b00      	cmp	r3, #0
 8005978:	d021      	beq.n	80059be <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b00      	cmp	r3, #0
 8005986:	d107      	bne.n	8005998 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0204 	bic.w	r2, r2, #4
 8005996:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599c:	f003 021f 	and.w	r2, r3, #31
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a4:	2104      	movs	r1, #4
 80059a6:	fa01 f202 	lsl.w	r2, r1, r2
 80059aa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d071      	beq.n	8005a98 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80059bc:	e06c      	b.n	8005a98 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c2:	f003 031f 	and.w	r3, r3, #31
 80059c6:	2202      	movs	r2, #2
 80059c8:	409a      	lsls	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4013      	ands	r3, r2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d02e      	beq.n	8005a30 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d029      	beq.n	8005a30 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10b      	bne.n	8005a02 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 020a 	bic.w	r2, r2, #10
 80059f8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a06:	f003 021f 	and.w	r2, r3, #31
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0e:	2102      	movs	r1, #2
 8005a10:	fa01 f202 	lsl.w	r2, r1, r2
 8005a14:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d038      	beq.n	8005a98 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005a2e:	e033      	b.n	8005a98 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a34:	f003 031f 	and.w	r3, r3, #31
 8005a38:	2208      	movs	r2, #8
 8005a3a:	409a      	lsls	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d02a      	beq.n	8005a9a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f003 0308 	and.w	r3, r3, #8
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d025      	beq.n	8005a9a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 020e 	bic.w	r2, r2, #14
 8005a5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a62:	f003 021f 	and.w	r2, r3, #31
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a70:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d004      	beq.n	8005a9a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a98:	bf00      	nop
 8005a9a:	bf00      	nop
}
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
	...

08005aa4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	4b16      	ldr	r3, [pc, #88]	@ (8005b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d802      	bhi.n	8005abe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005ab8:	4b15      	ldr	r3, [pc, #84]	@ (8005b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	e001      	b.n	8005ac2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005abe:	4b15      	ldr	r3, [pc, #84]	@ (8005b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005ac0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	3b08      	subs	r3, #8
 8005ace:	4a12      	ldr	r2, [pc, #72]	@ (8005b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad4:	091b      	lsrs	r3, r3, #4
 8005ad6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005adc:	089b      	lsrs	r3, r3, #2
 8005ade:	009a      	lsls	r2, r3, #2
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a0b      	ldr	r2, [pc, #44]	@ (8005b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005aee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f003 031f 	and.w	r3, r3, #31
 8005af6:	2201      	movs	r2, #1
 8005af8:	409a      	lsls	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40020407 	.word	0x40020407
 8005b10:	40020800 	.word	0x40020800
 8005b14:	40020820 	.word	0x40020820
 8005b18:	cccccccd 	.word	0xcccccccd
 8005b1c:	40020880 	.word	0x40020880

08005b20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4b0b      	ldr	r3, [pc, #44]	@ (8005b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005b34:	4413      	add	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	461a      	mov	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a08      	ldr	r2, [pc, #32]	@ (8005b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005b42:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	f003 031f 	and.w	r3, r3, #31
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	409a      	lsls	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005b54:	bf00      	nop
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	1000823f 	.word	0x1000823f
 8005b64:	40020940 	.word	0x40020940

08005b68 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e033      	b.n	8005be2 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fc fc10 	bl	80023b4 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f854 	bl	8005c48 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f822 	bl	8005bea <FMAC_Reset>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d10c      	bne.n	8005bc6 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bb0:	f043 0210 	orr.w	r2, r3, #16
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	22a0      	movs	r2, #160	@ 0xa0
 8005bbc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	73fb      	strb	r3, [r7, #15]
 8005bc4:	e008      	b.n	8005bd8 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bf2:	f7fe fb1d 	bl	8004230 <HAL_GetTick>
 8005bf6:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	691a      	ldr	r2, [r3, #16]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005c06:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8005c08:	e00f      	b.n	8005c2a <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8005c0a:	f7fe fb11 	bl	8004230 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005c18:	d907      	bls.n	8005c2a <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c1e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e00a      	b.n	8005c40 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1e8      	bne.n	8005c0a <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f807 	bl	8005c64 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f81b 	bl	8005c92 <FMAC_ResetOutputStateAndDataPointers>
}
 8005c5c:	bf00      	nop
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005cce:	e15a      	b.n	8005f86 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cdc:	4013      	ands	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 814c 	beq.w	8005f80 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f003 0303 	and.w	r3, r3, #3
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d005      	beq.n	8005d00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d130      	bne.n	8005d62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	2203      	movs	r2, #3
 8005d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d10:	43db      	mvns	r3, r3
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	4013      	ands	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d36:	2201      	movs	r2, #1
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	43db      	mvns	r3, r3
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4013      	ands	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	091b      	lsrs	r3, r3, #4
 8005d4c:	f003 0201 	and.w	r2, r3, #1
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	fa02 f303 	lsl.w	r3, r2, r3
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d017      	beq.n	8005d9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	2203      	movs	r2, #3
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4013      	ands	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d123      	bne.n	8005df2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	08da      	lsrs	r2, r3, #3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	3208      	adds	r2, #8
 8005db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	220f      	movs	r2, #15
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	691a      	ldr	r2, [r3, #16]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	08da      	lsrs	r2, r3, #3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3208      	adds	r2, #8
 8005dec:	6939      	ldr	r1, [r7, #16]
 8005dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	2203      	movs	r2, #3
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	43db      	mvns	r3, r3
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4013      	ands	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f003 0203 	and.w	r2, r3, #3
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 80a6 	beq.w	8005f80 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e34:	4b5b      	ldr	r3, [pc, #364]	@ (8005fa4 <HAL_GPIO_Init+0x2e4>)
 8005e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e38:	4a5a      	ldr	r2, [pc, #360]	@ (8005fa4 <HAL_GPIO_Init+0x2e4>)
 8005e3a:	f043 0301 	orr.w	r3, r3, #1
 8005e3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005e40:	4b58      	ldr	r3, [pc, #352]	@ (8005fa4 <HAL_GPIO_Init+0x2e4>)
 8005e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	60bb      	str	r3, [r7, #8]
 8005e4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e4c:	4a56      	ldr	r2, [pc, #344]	@ (8005fa8 <HAL_GPIO_Init+0x2e8>)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	089b      	lsrs	r3, r3, #2
 8005e52:	3302      	adds	r3, #2
 8005e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f003 0303 	and.w	r3, r3, #3
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	220f      	movs	r2, #15
 8005e64:	fa02 f303 	lsl.w	r3, r2, r3
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005e76:	d01f      	beq.n	8005eb8 <HAL_GPIO_Init+0x1f8>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a4c      	ldr	r2, [pc, #304]	@ (8005fac <HAL_GPIO_Init+0x2ec>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d019      	beq.n	8005eb4 <HAL_GPIO_Init+0x1f4>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a4b      	ldr	r2, [pc, #300]	@ (8005fb0 <HAL_GPIO_Init+0x2f0>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d013      	beq.n	8005eb0 <HAL_GPIO_Init+0x1f0>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a4a      	ldr	r2, [pc, #296]	@ (8005fb4 <HAL_GPIO_Init+0x2f4>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00d      	beq.n	8005eac <HAL_GPIO_Init+0x1ec>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a49      	ldr	r2, [pc, #292]	@ (8005fb8 <HAL_GPIO_Init+0x2f8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d007      	beq.n	8005ea8 <HAL_GPIO_Init+0x1e8>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a48      	ldr	r2, [pc, #288]	@ (8005fbc <HAL_GPIO_Init+0x2fc>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d101      	bne.n	8005ea4 <HAL_GPIO_Init+0x1e4>
 8005ea0:	2305      	movs	r3, #5
 8005ea2:	e00a      	b.n	8005eba <HAL_GPIO_Init+0x1fa>
 8005ea4:	2306      	movs	r3, #6
 8005ea6:	e008      	b.n	8005eba <HAL_GPIO_Init+0x1fa>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	e006      	b.n	8005eba <HAL_GPIO_Init+0x1fa>
 8005eac:	2303      	movs	r3, #3
 8005eae:	e004      	b.n	8005eba <HAL_GPIO_Init+0x1fa>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e002      	b.n	8005eba <HAL_GPIO_Init+0x1fa>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e000      	b.n	8005eba <HAL_GPIO_Init+0x1fa>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	f002 0203 	and.w	r2, r2, #3
 8005ec0:	0092      	lsls	r2, r2, #2
 8005ec2:	4093      	lsls	r3, r2
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005eca:	4937      	ldr	r1, [pc, #220]	@ (8005fa8 <HAL_GPIO_Init+0x2e8>)
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	089b      	lsrs	r3, r3, #2
 8005ed0:	3302      	adds	r3, #2
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ed8:	4b39      	ldr	r3, [pc, #228]	@ (8005fc0 <HAL_GPIO_Init+0x300>)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	43db      	mvns	r3, r3
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005efc:	4a30      	ldr	r2, [pc, #192]	@ (8005fc0 <HAL_GPIO_Init+0x300>)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f02:	4b2f      	ldr	r3, [pc, #188]	@ (8005fc0 <HAL_GPIO_Init+0x300>)
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	43db      	mvns	r3, r3
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4013      	ands	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f26:	4a26      	ldr	r2, [pc, #152]	@ (8005fc0 <HAL_GPIO_Init+0x300>)
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005f2c:	4b24      	ldr	r3, [pc, #144]	@ (8005fc0 <HAL_GPIO_Init+0x300>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	43db      	mvns	r3, r3
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f50:	4a1b      	ldr	r2, [pc, #108]	@ (8005fc0 <HAL_GPIO_Init+0x300>)
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005f56:	4b1a      	ldr	r3, [pc, #104]	@ (8005fc0 <HAL_GPIO_Init+0x300>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	43db      	mvns	r3, r3
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4013      	ands	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f7a:	4a11      	ldr	r2, [pc, #68]	@ (8005fc0 <HAL_GPIO_Init+0x300>)
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	3301      	adds	r3, #1
 8005f84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f47f ae9d 	bne.w	8005cd0 <HAL_GPIO_Init+0x10>
  }
}
 8005f96:	bf00      	nop
 8005f98:	bf00      	nop
 8005f9a:	371c      	adds	r7, #28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	40021000 	.word	0x40021000
 8005fa8:	40010000 	.word	0x40010000
 8005fac:	48000400 	.word	0x48000400
 8005fb0:	48000800 	.word	0x48000800
 8005fb4:	48000c00 	.word	0x48000c00
 8005fb8:	48001000 	.word	0x48001000
 8005fbc:	48001400 	.word	0x48001400
 8005fc0:	40010400 	.word	0x40010400

08005fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	460b      	mov	r3, r1
 8005fce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	887b      	ldrh	r3, [r7, #2]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d002      	beq.n	8005fe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	73fb      	strb	r3, [r7, #15]
 8005fe0:	e001      	b.n	8005fe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	807b      	strh	r3, [r7, #2]
 8006000:	4613      	mov	r3, r2
 8006002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006004:	787b      	ldrb	r3, [r7, #1]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800600a:	887a      	ldrh	r2, [r7, #2]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006010:	e002      	b.n	8006018 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006012:	887a      	ldrh	r2, [r7, #2]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e08d      	b.n	8006152 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d106      	bne.n	8006050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7fc f9d2 	bl	80023f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2224      	movs	r2, #36	@ 0x24
 8006054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0201 	bic.w	r2, r2, #1
 8006066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006074:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006084:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d107      	bne.n	800609e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800609a:	609a      	str	r2, [r3, #8]
 800609c:	e006      	b.n	80060ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689a      	ldr	r2, [r3, #8]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80060aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d108      	bne.n	80060c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060c2:	605a      	str	r2, [r3, #4]
 80060c4:	e007      	b.n	80060d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6812      	ldr	r2, [r2, #0]
 80060e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80060e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	691a      	ldr	r2, [r3, #16]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	69d9      	ldr	r1, [r3, #28]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a1a      	ldr	r2, [r3, #32]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0201 	orr.w	r2, r2, #1
 8006132:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
	...

0800615c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b088      	sub	sp, #32
 8006160:	af02      	add	r7, sp, #8
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	4608      	mov	r0, r1
 8006166:	4611      	mov	r1, r2
 8006168:	461a      	mov	r2, r3
 800616a:	4603      	mov	r3, r0
 800616c:	817b      	strh	r3, [r7, #10]
 800616e:	460b      	mov	r3, r1
 8006170:	813b      	strh	r3, [r7, #8]
 8006172:	4613      	mov	r3, r2
 8006174:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b20      	cmp	r3, #32
 8006180:	f040 80fd 	bne.w	800637e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <HAL_I2C_Mem_Read+0x34>
 800618a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800618c:	2b00      	cmp	r3, #0
 800618e:	d105      	bne.n	800619c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006196:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e0f1      	b.n	8006380 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_I2C_Mem_Read+0x4e>
 80061a6:	2302      	movs	r3, #2
 80061a8:	e0ea      	b.n	8006380 <HAL_I2C_Mem_Read+0x224>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80061b2:	f7fe f83d 	bl	8004230 <HAL_GetTick>
 80061b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	2319      	movs	r3, #25
 80061be:	2201      	movs	r2, #1
 80061c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 f95b 	bl	8006480 <I2C_WaitOnFlagUntilTimeout>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e0d5      	b.n	8006380 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2222      	movs	r2, #34	@ 0x22
 80061d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2240      	movs	r2, #64	@ 0x40
 80061e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a3a      	ldr	r2, [r7, #32]
 80061ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80061f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80061fc:	88f8      	ldrh	r0, [r7, #6]
 80061fe:	893a      	ldrh	r2, [r7, #8]
 8006200:	8979      	ldrh	r1, [r7, #10]
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	4603      	mov	r3, r0
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 f8bf 	bl	8006390 <I2C_RequestMemoryRead>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d005      	beq.n	8006224 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e0ad      	b.n	8006380 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006228:	b29b      	uxth	r3, r3
 800622a:	2bff      	cmp	r3, #255	@ 0xff
 800622c:	d90e      	bls.n	800624c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	22ff      	movs	r2, #255	@ 0xff
 8006232:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006238:	b2da      	uxtb	r2, r3
 800623a:	8979      	ldrh	r1, [r7, #10]
 800623c:	4b52      	ldr	r3, [pc, #328]	@ (8006388 <HAL_I2C_Mem_Read+0x22c>)
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f000 fadf 	bl	8006808 <I2C_TransferConfig>
 800624a:	e00f      	b.n	800626c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800625a:	b2da      	uxtb	r2, r3
 800625c:	8979      	ldrh	r1, [r7, #10]
 800625e:	4b4a      	ldr	r3, [pc, #296]	@ (8006388 <HAL_I2C_Mem_Read+0x22c>)
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 face 	bl	8006808 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006272:	2200      	movs	r2, #0
 8006274:	2104      	movs	r1, #4
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 f902 	bl	8006480 <I2C_WaitOnFlagUntilTimeout>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e07c      	b.n	8006380 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	3b01      	subs	r3, #1
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d034      	beq.n	800632c <HAL_I2C_Mem_Read+0x1d0>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d130      	bne.n	800632c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d0:	2200      	movs	r2, #0
 80062d2:	2180      	movs	r1, #128	@ 0x80
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 f8d3 	bl	8006480 <I2C_WaitOnFlagUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e04d      	b.n	8006380 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2bff      	cmp	r3, #255	@ 0xff
 80062ec:	d90e      	bls.n	800630c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	22ff      	movs	r2, #255	@ 0xff
 80062f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	8979      	ldrh	r1, [r7, #10]
 80062fc:	2300      	movs	r3, #0
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 fa7f 	bl	8006808 <I2C_TransferConfig>
 800630a:	e00f      	b.n	800632c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006310:	b29a      	uxth	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800631a:	b2da      	uxtb	r2, r3
 800631c:	8979      	ldrh	r1, [r7, #10]
 800631e:	2300      	movs	r3, #0
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f000 fa6e 	bl	8006808 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006330:	b29b      	uxth	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d19a      	bne.n	800626c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 f940 	bl	80065c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e01a      	b.n	8006380 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2220      	movs	r2, #32
 8006350:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6859      	ldr	r1, [r3, #4]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	4b0b      	ldr	r3, [pc, #44]	@ (800638c <HAL_I2C_Mem_Read+0x230>)
 800635e:	400b      	ands	r3, r1
 8006360:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2220      	movs	r2, #32
 8006366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	e000      	b.n	8006380 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800637e:	2302      	movs	r3, #2
  }
}
 8006380:	4618      	mov	r0, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	80002400 	.word	0x80002400
 800638c:	fe00e800 	.word	0xfe00e800

08006390 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af02      	add	r7, sp, #8
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	4608      	mov	r0, r1
 800639a:	4611      	mov	r1, r2
 800639c:	461a      	mov	r2, r3
 800639e:	4603      	mov	r3, r0
 80063a0:	817b      	strh	r3, [r7, #10]
 80063a2:	460b      	mov	r3, r1
 80063a4:	813b      	strh	r3, [r7, #8]
 80063a6:	4613      	mov	r3, r2
 80063a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80063aa:	88fb      	ldrh	r3, [r7, #6]
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	8979      	ldrh	r1, [r7, #10]
 80063b0:	4b20      	ldr	r3, [pc, #128]	@ (8006434 <I2C_RequestMemoryRead+0xa4>)
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	2300      	movs	r3, #0
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 fa26 	bl	8006808 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063bc:	69fa      	ldr	r2, [r7, #28]
 80063be:	69b9      	ldr	r1, [r7, #24]
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 f8b6 	bl	8006532 <I2C_WaitOnTXISFlagUntilTimeout>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e02c      	b.n	800642a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063d0:	88fb      	ldrh	r3, [r7, #6]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d105      	bne.n	80063e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063d6:	893b      	ldrh	r3, [r7, #8]
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	629a      	str	r2, [r3, #40]	@ 0x28
 80063e0:	e015      	b.n	800640e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80063e2:	893b      	ldrh	r3, [r7, #8]
 80063e4:	0a1b      	lsrs	r3, r3, #8
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063f0:	69fa      	ldr	r2, [r7, #28]
 80063f2:	69b9      	ldr	r1, [r7, #24]
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 f89c 	bl	8006532 <I2C_WaitOnTXISFlagUntilTimeout>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e012      	b.n	800642a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006404:	893b      	ldrh	r3, [r7, #8]
 8006406:	b2da      	uxtb	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	2200      	movs	r2, #0
 8006416:	2140      	movs	r1, #64	@ 0x40
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 f831 	bl	8006480 <I2C_WaitOnFlagUntilTimeout>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e000      	b.n	800642a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	80002000 	.word	0x80002000

08006438 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b02      	cmp	r3, #2
 800644c:	d103      	bne.n	8006456 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2200      	movs	r2, #0
 8006454:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b01      	cmp	r3, #1
 8006462:	d007      	beq.n	8006474 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699a      	ldr	r2, [r3, #24]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0201 	orr.w	r2, r2, #1
 8006472:	619a      	str	r2, [r3, #24]
  }
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	603b      	str	r3, [r7, #0]
 800648c:	4613      	mov	r3, r2
 800648e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006490:	e03b      	b.n	800650a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 f8d6 	bl	8006648 <I2C_IsErrorOccurred>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e041      	b.n	800652a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064ac:	d02d      	beq.n	800650a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ae:	f7fd febf 	bl	8004230 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d302      	bcc.n	80064c4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d122      	bne.n	800650a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699a      	ldr	r2, [r3, #24]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	4013      	ands	r3, r2
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	bf0c      	ite	eq
 80064d4:	2301      	moveq	r3, #1
 80064d6:	2300      	movne	r3, #0
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	461a      	mov	r2, r3
 80064dc:	79fb      	ldrb	r3, [r7, #7]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d113      	bne.n	800650a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064e6:	f043 0220 	orr.w	r2, r3, #32
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e00f      	b.n	800652a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699a      	ldr	r2, [r3, #24]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	4013      	ands	r3, r2
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	429a      	cmp	r2, r3
 8006518:	bf0c      	ite	eq
 800651a:	2301      	moveq	r3, #1
 800651c:	2300      	movne	r3, #0
 800651e:	b2db      	uxtb	r3, r3
 8006520:	461a      	mov	r2, r3
 8006522:	79fb      	ldrb	r3, [r7, #7]
 8006524:	429a      	cmp	r2, r3
 8006526:	d0b4      	beq.n	8006492 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b084      	sub	sp, #16
 8006536:	af00      	add	r7, sp, #0
 8006538:	60f8      	str	r0, [r7, #12]
 800653a:	60b9      	str	r1, [r7, #8]
 800653c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800653e:	e033      	b.n	80065a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	68b9      	ldr	r1, [r7, #8]
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f87f 	bl	8006648 <I2C_IsErrorOccurred>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e031      	b.n	80065b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800655a:	d025      	beq.n	80065a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655c:	f7fd fe68 	bl	8004230 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	429a      	cmp	r2, r3
 800656a:	d302      	bcc.n	8006572 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d11a      	bne.n	80065a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b02      	cmp	r3, #2
 800657e:	d013      	beq.n	80065a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006584:	f043 0220 	orr.w	r2, r3, #32
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e007      	b.n	80065b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d1c4      	bne.n	8006540 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065cc:	e02f      	b.n	800662e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 f838 	bl	8006648 <I2C_IsErrorOccurred>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e02d      	b.n	800663e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065e2:	f7fd fe25 	bl	8004230 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d302      	bcc.n	80065f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d11a      	bne.n	800662e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	f003 0320 	and.w	r3, r3, #32
 8006602:	2b20      	cmp	r3, #32
 8006604:	d013      	beq.n	800662e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800660a:	f043 0220 	orr.w	r2, r3, #32
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2220      	movs	r2, #32
 8006616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e007      	b.n	800663e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	f003 0320 	and.w	r3, r3, #32
 8006638:	2b20      	cmp	r3, #32
 800663a:	d1c8      	bne.n	80065ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08a      	sub	sp, #40	@ 0x28
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006654:	2300      	movs	r3, #0
 8006656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	f003 0310 	and.w	r3, r3, #16
 8006670:	2b00      	cmp	r3, #0
 8006672:	d068      	beq.n	8006746 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2210      	movs	r2, #16
 800667a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800667c:	e049      	b.n	8006712 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006684:	d045      	beq.n	8006712 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006686:	f7fd fdd3 	bl	8004230 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	429a      	cmp	r2, r3
 8006694:	d302      	bcc.n	800669c <I2C_IsErrorOccurred+0x54>
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d13a      	bne.n	8006712 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066be:	d121      	bne.n	8006704 <I2C_IsErrorOccurred+0xbc>
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066c6:	d01d      	beq.n	8006704 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80066c8:	7cfb      	ldrb	r3, [r7, #19]
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	d01a      	beq.n	8006704 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80066de:	f7fd fda7 	bl	8004230 <HAL_GetTick>
 80066e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066e4:	e00e      	b.n	8006704 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80066e6:	f7fd fda3 	bl	8004230 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	2b19      	cmp	r3, #25
 80066f2:	d907      	bls.n	8006704 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	f043 0320 	orr.w	r3, r3, #32
 80066fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006702:	e006      	b.n	8006712 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	f003 0320 	and.w	r3, r3, #32
 800670e:	2b20      	cmp	r3, #32
 8006710:	d1e9      	bne.n	80066e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	f003 0320 	and.w	r3, r3, #32
 800671c:	2b20      	cmp	r3, #32
 800671e:	d003      	beq.n	8006728 <I2C_IsErrorOccurred+0xe0>
 8006720:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006724:	2b00      	cmp	r3, #0
 8006726:	d0aa      	beq.n	800667e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006728:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800672c:	2b00      	cmp	r3, #0
 800672e:	d103      	bne.n	8006738 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2220      	movs	r2, #32
 8006736:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006738:	6a3b      	ldr	r3, [r7, #32]
 800673a:	f043 0304 	orr.w	r3, r3, #4
 800673e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00b      	beq.n	8006770 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	f043 0301 	orr.w	r3, r3, #1
 800675e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006768:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00b      	beq.n	8006792 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	f043 0308 	orr.w	r3, r3, #8
 8006780:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800678a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00b      	beq.n	80067b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	f043 0302 	orr.w	r3, r3, #2
 80067a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80067b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d01c      	beq.n	80067f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f7ff fe3b 	bl	8006438 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6859      	ldr	r1, [r3, #4]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006804 <I2C_IsErrorOccurred+0x1bc>)
 80067ce:	400b      	ands	r3, r1
 80067d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	431a      	orrs	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2220      	movs	r2, #32
 80067e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80067f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3728      	adds	r7, #40	@ 0x28
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	fe00e800 	.word	0xfe00e800

08006808 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	607b      	str	r3, [r7, #4]
 8006812:	460b      	mov	r3, r1
 8006814:	817b      	strh	r3, [r7, #10]
 8006816:	4613      	mov	r3, r2
 8006818:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800681a:	897b      	ldrh	r3, [r7, #10]
 800681c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006820:	7a7b      	ldrb	r3, [r7, #9]
 8006822:	041b      	lsls	r3, r3, #16
 8006824:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006828:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	4313      	orrs	r3, r2
 8006832:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006836:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	0d5b      	lsrs	r3, r3, #21
 8006842:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006846:	4b08      	ldr	r3, [pc, #32]	@ (8006868 <I2C_TransferConfig+0x60>)
 8006848:	430b      	orrs	r3, r1
 800684a:	43db      	mvns	r3, r3
 800684c:	ea02 0103 	and.w	r1, r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	430a      	orrs	r2, r1
 8006858:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800685a:	bf00      	nop
 800685c:	371c      	adds	r7, #28
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	03ff63ff 	.word	0x03ff63ff

0800686c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b20      	cmp	r3, #32
 8006880:	d138      	bne.n	80068f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006888:	2b01      	cmp	r3, #1
 800688a:	d101      	bne.n	8006890 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800688c:	2302      	movs	r3, #2
 800688e:	e032      	b.n	80068f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2224      	movs	r2, #36	@ 0x24
 800689c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0201 	bic.w	r2, r2, #1
 80068ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80068be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6819      	ldr	r1, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0201 	orr.w	r2, r2, #1
 80068de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80068f0:	2300      	movs	r3, #0
 80068f2:	e000      	b.n	80068f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80068f4:	2302      	movs	r3, #2
  }
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006902:	b480      	push	{r7}
 8006904:	b085      	sub	sp, #20
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b20      	cmp	r3, #32
 8006916:	d139      	bne.n	800698c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800691e:	2b01      	cmp	r3, #1
 8006920:	d101      	bne.n	8006926 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006922:	2302      	movs	r3, #2
 8006924:	e033      	b.n	800698e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2224      	movs	r2, #36	@ 0x24
 8006932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0201 	bic.w	r2, r2, #1
 8006944:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006954:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	021b      	lsls	r3, r3, #8
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0201 	orr.w	r2, r2, #1
 8006976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2220      	movs	r2, #32
 800697c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	e000      	b.n	800698e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800698c:	2302      	movs	r3, #2
  }
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b084      	sub	sp, #16
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e0c0      	b.n	8006b2e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d106      	bne.n	80069c6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f00a fda9 	bl	8011518 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2203      	movs	r2, #3
 80069ca:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f006 ffcf 	bl	800d976 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069d8:	2300      	movs	r3, #0
 80069da:	73fb      	strb	r3, [r7, #15]
 80069dc:	e03e      	b.n	8006a5c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80069de:	7bfa      	ldrb	r2, [r7, #15]
 80069e0:	6879      	ldr	r1, [r7, #4]
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	440b      	add	r3, r1
 80069ec:	3311      	adds	r3, #17
 80069ee:	2201      	movs	r2, #1
 80069f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80069f2:	7bfa      	ldrb	r2, [r7, #15]
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	00db      	lsls	r3, r3, #3
 80069fe:	440b      	add	r3, r1
 8006a00:	3310      	adds	r3, #16
 8006a02:	7bfa      	ldrb	r2, [r7, #15]
 8006a04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006a06:	7bfa      	ldrb	r2, [r7, #15]
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	00db      	lsls	r3, r3, #3
 8006a12:	440b      	add	r3, r1
 8006a14:	3313      	adds	r3, #19
 8006a16:	2200      	movs	r2, #0
 8006a18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006a1a:	7bfa      	ldrb	r2, [r7, #15]
 8006a1c:	6879      	ldr	r1, [r7, #4]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	00db      	lsls	r3, r3, #3
 8006a26:	440b      	add	r3, r1
 8006a28:	3320      	adds	r3, #32
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006a2e:	7bfa      	ldrb	r2, [r7, #15]
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	440b      	add	r3, r1
 8006a3c:	3324      	adds	r3, #36	@ 0x24
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	4613      	mov	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	440b      	add	r3, r1
 8006a52:	2200      	movs	r2, #0
 8006a54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	73fb      	strb	r3, [r7, #15]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	791b      	ldrb	r3, [r3, #4]
 8006a60:	7bfa      	ldrb	r2, [r7, #15]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d3bb      	bcc.n	80069de <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a66:	2300      	movs	r3, #0
 8006a68:	73fb      	strb	r3, [r7, #15]
 8006a6a:	e044      	b.n	8006af6 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006a6c:	7bfa      	ldrb	r2, [r7, #15]
 8006a6e:	6879      	ldr	r1, [r7, #4]
 8006a70:	4613      	mov	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	440b      	add	r3, r1
 8006a7a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006a7e:	2200      	movs	r2, #0
 8006a80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006a82:	7bfa      	ldrb	r2, [r7, #15]
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	4613      	mov	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	00db      	lsls	r3, r3, #3
 8006a8e:	440b      	add	r3, r1
 8006a90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a94:	7bfa      	ldrb	r2, [r7, #15]
 8006a96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006a98:	7bfa      	ldrb	r2, [r7, #15]
 8006a9a:	6879      	ldr	r1, [r7, #4]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	440b      	add	r3, r1
 8006aa6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006aaa:	2200      	movs	r2, #0
 8006aac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006aae:	7bfa      	ldrb	r2, [r7, #15]
 8006ab0:	6879      	ldr	r1, [r7, #4]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	440b      	add	r3, r1
 8006abc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006ac4:	7bfa      	ldrb	r2, [r7, #15]
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	440b      	add	r3, r1
 8006ad2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006ada:	7bfa      	ldrb	r2, [r7, #15]
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	440b      	add	r3, r1
 8006ae8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006aec:	2200      	movs	r2, #0
 8006aee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	3301      	adds	r3, #1
 8006af4:	73fb      	strb	r3, [r7, #15]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	791b      	ldrb	r3, [r3, #4]
 8006afa:	7bfa      	ldrb	r2, [r7, #15]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d3b5      	bcc.n	8006a6c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6818      	ldr	r0, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	3304      	adds	r3, #4
 8006b08:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006b0c:	f006 ff4e 	bl	800d9ac <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	7a9b      	ldrb	r3, [r3, #10]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d102      	bne.n	8006b2c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 fcaa 	bl	8008480 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b082      	sub	sp, #8
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d101      	bne.n	8006b4c <HAL_PCD_Start+0x16>
 8006b48:	2302      	movs	r3, #2
 8006b4a:	e012      	b.n	8006b72 <HAL_PCD_Start+0x3c>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f006 fef5 	bl	800d948 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f008 fae5 	bl	800f132 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_PCD_Stop+0x16>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e012      	b.n	8006bb6 <HAL_PCD_Stop+0x3c>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f006 feea 	bl	800d976 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f008 fada 	bl	800f160 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f008 fadd 	bl	800f18a <USB_ReadInterrupts>
 8006bd0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 faa6 	bl	800712e <PCD_EP_ISR_Handler>

    return;
 8006be2:	e110      	b.n	8006e06 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d013      	beq.n	8006c16 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c00:	b292      	uxth	r2, r2
 8006c02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f00a fd17 	bl	801163a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f8fc 	bl	8006e0c <HAL_PCD_SetAddress>

    return;
 8006c14:	e0f7      	b.n	8006e06 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00c      	beq.n	8006c3a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006c32:	b292      	uxth	r2, r2
 8006c34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006c38:	e0e5      	b.n	8006e06 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00c      	beq.n	8006c5e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c56:	b292      	uxth	r2, r2
 8006c58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006c5c:	e0d3      	b.n	8006e06 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d034      	beq.n	8006cd2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 0204 	bic.w	r2, r2, #4
 8006c7a:	b292      	uxth	r2, r2
 8006c7c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0208 	bic.w	r2, r2, #8
 8006c92:	b292      	uxth	r2, r2
 8006c94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d107      	bne.n	8006cb2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006caa:	2100      	movs	r1, #0
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f00a fef1 	bl	8011a94 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f00a fcfa 	bl	80116ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006cca:	b292      	uxth	r2, r2
 8006ccc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006cd0:	e099      	b.n	8006e06 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d027      	beq.n	8006d2c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0208 	orr.w	r2, r2, #8
 8006cee:	b292      	uxth	r2, r2
 8006cf0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d06:	b292      	uxth	r2, r2
 8006d08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0204 	orr.w	r2, r2, #4
 8006d1e:	b292      	uxth	r2, r2
 8006d20:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f00a fca7 	bl	8011678 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006d2a:	e06c      	b.n	8006e06 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d040      	beq.n	8006db8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d48:	b292      	uxth	r2, r2
 8006d4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d12b      	bne.n	8006db0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0204 	orr.w	r2, r2, #4
 8006d6a:	b292      	uxth	r2, r2
 8006d6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f042 0208 	orr.w	r2, r2, #8
 8006d82:	b292      	uxth	r2, r2
 8006d84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	089b      	lsrs	r3, r3, #2
 8006d9c:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006da6:	2101      	movs	r1, #1
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f00a fe73 	bl	8011a94 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006dae:	e02a      	b.n	8006e06 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f00a fc61 	bl	8011678 <HAL_PCD_SuspendCallback>
    return;
 8006db6:	e026      	b.n	8006e06 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00f      	beq.n	8006de2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006dd4:	b292      	uxth	r2, r2
 8006dd6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f00a fc1f 	bl	801161e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006de0:	e011      	b.n	8006e06 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00c      	beq.n	8006e06 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006dfe:	b292      	uxth	r2, r2
 8006e00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006e04:	bf00      	nop
  }
}
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d101      	bne.n	8006e26 <HAL_PCD_SetAddress+0x1a>
 8006e22:	2302      	movs	r3, #2
 8006e24:	e012      	b.n	8006e4c <HAL_PCD_SetAddress+0x40>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	78fa      	ldrb	r2, [r7, #3]
 8006e32:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	78fa      	ldrb	r2, [r7, #3]
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f008 f964 	bl	800f10a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	4608      	mov	r0, r1
 8006e5e:	4611      	mov	r1, r2
 8006e60:	461a      	mov	r2, r3
 8006e62:	4603      	mov	r3, r0
 8006e64:	70fb      	strb	r3, [r7, #3]
 8006e66:	460b      	mov	r3, r1
 8006e68:	803b      	strh	r3, [r7, #0]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	da0e      	bge.n	8006e98 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	f003 0207 	and.w	r2, r3, #7
 8006e80:	4613      	mov	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	3310      	adds	r3, #16
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	705a      	strb	r2, [r3, #1]
 8006e96:	e00e      	b.n	8006eb6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e98:	78fb      	ldrb	r3, [r7, #3]
 8006e9a:	f003 0207 	and.w	r2, r3, #7
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	00db      	lsls	r3, r3, #3
 8006ea6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	4413      	add	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006eb6:	78fb      	ldrb	r3, [r7, #3]
 8006eb8:	f003 0307 	and.w	r3, r3, #7
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006ec2:	883b      	ldrh	r3, [r7, #0]
 8006ec4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	78ba      	ldrb	r2, [r7, #2]
 8006ed0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006ed2:	78bb      	ldrb	r3, [r7, #2]
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d102      	bne.n	8006ede <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d101      	bne.n	8006eec <HAL_PCD_EP_Open+0x98>
 8006ee8:	2302      	movs	r3, #2
 8006eea:	e00e      	b.n	8006f0a <HAL_PCD_EP_Open+0xb6>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68f9      	ldr	r1, [r7, #12]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f006 fd74 	bl	800d9e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8006f08:	7afb      	ldrb	r3, [r7, #11]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b086      	sub	sp, #24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	60f8      	str	r0, [r7, #12]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	603b      	str	r3, [r7, #0]
 8006f1e:	460b      	mov	r3, r1
 8006f20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f22:	7afb      	ldrb	r3, [r7, #11]
 8006f24:	f003 0207 	and.w	r2, r3, #7
 8006f28:	4613      	mov	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4413      	add	r3, r2
 8006f38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f52:	7afb      	ldrb	r3, [r7, #11]
 8006f54:	f003 0307 	and.w	r3, r3, #7
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	6979      	ldr	r1, [r7, #20]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f007 fa27 	bl	800e3b8 <USB_EPStartXfer>

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	607a      	str	r2, [r7, #4]
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	460b      	mov	r3, r1
 8006f82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f84:	7afb      	ldrb	r3, [r7, #11]
 8006f86:	f003 0207 	and.w	r2, r3, #7
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	3310      	adds	r3, #16
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	4413      	add	r3, r2
 8006f98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006fc0:	7afb      	ldrb	r3, [r7, #11]
 8006fc2:	f003 0307 	and.w	r3, r3, #7
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6979      	ldr	r1, [r7, #20]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f007 f9f0 	bl	800e3b8 <USB_EPStartXfer>

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	460b      	mov	r3, r1
 8006fec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006fee:	78fb      	ldrb	r3, [r7, #3]
 8006ff0:	f003 0307 	and.w	r3, r3, #7
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	7912      	ldrb	r2, [r2, #4]
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d901      	bls.n	8007000 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e03e      	b.n	800707e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007000:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007004:	2b00      	cmp	r3, #0
 8007006:	da0e      	bge.n	8007026 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007008:	78fb      	ldrb	r3, [r7, #3]
 800700a:	f003 0207 	and.w	r2, r3, #7
 800700e:	4613      	mov	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	3310      	adds	r3, #16
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	4413      	add	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2201      	movs	r2, #1
 8007022:	705a      	strb	r2, [r3, #1]
 8007024:	e00c      	b.n	8007040 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007026:	78fa      	ldrb	r2, [r7, #3]
 8007028:	4613      	mov	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	00db      	lsls	r3, r3, #3
 8007030:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	4413      	add	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2201      	movs	r2, #1
 8007044:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007046:	78fb      	ldrb	r3, [r7, #3]
 8007048:	f003 0307 	and.w	r3, r3, #7
 800704c:	b2da      	uxtb	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007058:	2b01      	cmp	r3, #1
 800705a:	d101      	bne.n	8007060 <HAL_PCD_EP_SetStall+0x7e>
 800705c:	2302      	movs	r3, #2
 800705e:	e00e      	b.n	800707e <HAL_PCD_EP_SetStall+0x9c>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68f9      	ldr	r1, [r7, #12]
 800706e:	4618      	mov	r0, r3
 8007070:	f007 ff51 	bl	800ef16 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	460b      	mov	r3, r1
 8007090:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007092:	78fb      	ldrb	r3, [r7, #3]
 8007094:	f003 030f 	and.w	r3, r3, #15
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	7912      	ldrb	r2, [r2, #4]
 800709c:	4293      	cmp	r3, r2
 800709e:	d901      	bls.n	80070a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e040      	b.n	8007126 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80070a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	da0e      	bge.n	80070ca <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070ac:	78fb      	ldrb	r3, [r7, #3]
 80070ae:	f003 0207 	and.w	r2, r3, #7
 80070b2:	4613      	mov	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	00db      	lsls	r3, r3, #3
 80070ba:	3310      	adds	r3, #16
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	4413      	add	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2201      	movs	r2, #1
 80070c6:	705a      	strb	r2, [r3, #1]
 80070c8:	e00e      	b.n	80070e8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070ca:	78fb      	ldrb	r3, [r7, #3]
 80070cc:	f003 0207 	and.w	r2, r3, #7
 80070d0:	4613      	mov	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	4413      	add	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80070ee:	78fb      	ldrb	r3, [r7, #3]
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007100:	2b01      	cmp	r3, #1
 8007102:	d101      	bne.n	8007108 <HAL_PCD_EP_ClrStall+0x82>
 8007104:	2302      	movs	r3, #2
 8007106:	e00e      	b.n	8007126 <HAL_PCD_EP_ClrStall+0xa0>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68f9      	ldr	r1, [r7, #12]
 8007116:	4618      	mov	r0, r3
 8007118:	f007 ff4e 	bl	800efb8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b092      	sub	sp, #72	@ 0x48
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007136:	e333      	b.n	80077a0 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007140:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007142:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007144:	b2db      	uxtb	r3, r3
 8007146:	f003 030f 	and.w	r3, r3, #15
 800714a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800714e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007152:	2b00      	cmp	r3, #0
 8007154:	f040 8108 	bne.w	8007368 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007158:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800715a:	f003 0310 	and.w	r3, r3, #16
 800715e:	2b00      	cmp	r3, #0
 8007160:	d14c      	bne.n	80071fc <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	b29b      	uxth	r3, r3
 800716a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800716e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007172:	813b      	strh	r3, [r7, #8]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	893b      	ldrh	r3, [r7, #8]
 800717a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800717e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007182:	b29b      	uxth	r3, r3
 8007184:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	3310      	adds	r3, #16
 800718a:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007194:	b29b      	uxth	r3, r3
 8007196:	461a      	mov	r2, r3
 8007198:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	4413      	add	r3, r2
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	6812      	ldr	r2, [r2, #0]
 80071a4:	4413      	add	r3, r2
 80071a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80071b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071b2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80071b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071b6:	695a      	ldr	r2, [r3, #20]
 80071b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	441a      	add	r2, r3
 80071be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071c0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80071c2:	2100      	movs	r1, #0
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f00a fa10 	bl	80115ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	7b1b      	ldrb	r3, [r3, #12]
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 82e5 	beq.w	80077a0 <PCD_EP_ISR_Handler+0x672>
 80071d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f040 82e0 	bne.w	80077a0 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	7b1b      	ldrb	r3, [r3, #12]
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	731a      	strb	r2, [r3, #12]
 80071fa:	e2d1      	b.n	80077a0 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007202:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800720c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800720e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007212:	2b00      	cmp	r3, #0
 8007214:	d032      	beq.n	800727c <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800721e:	b29b      	uxth	r3, r3
 8007220:	461a      	mov	r2, r3
 8007222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	4413      	add	r3, r2
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	6812      	ldr	r2, [r2, #0]
 800722e:	4413      	add	r3, r2
 8007230:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800723a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800723c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6818      	ldr	r0, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007248:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800724a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800724c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800724e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007250:	b29b      	uxth	r3, r3
 8007252:	f007 ffec 	bl	800f22e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	b29a      	uxth	r2, r3
 800725e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007262:	4013      	ands	r3, r2
 8007264:	817b      	strh	r3, [r7, #10]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	897a      	ldrh	r2, [r7, #10]
 800726c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007270:	b292      	uxth	r2, r2
 8007272:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f00a f98b 	bl	8011590 <HAL_PCD_SetupStageCallback>
 800727a:	e291      	b.n	80077a0 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800727c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8007280:	2b00      	cmp	r3, #0
 8007282:	f280 828d 	bge.w	80077a0 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	881b      	ldrh	r3, [r3, #0]
 800728c:	b29a      	uxth	r2, r3
 800728e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007292:	4013      	ands	r3, r2
 8007294:	81fb      	strh	r3, [r7, #14]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	89fa      	ldrh	r2, [r7, #14]
 800729c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80072a0:	b292      	uxth	r2, r2
 80072a2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	461a      	mov	r2, r3
 80072b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	00db      	lsls	r3, r3, #3
 80072b6:	4413      	add	r3, r2
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6812      	ldr	r2, [r2, #0]
 80072bc:	4413      	add	r3, r2
 80072be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80072c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072ca:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80072cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d019      	beq.n	8007308 <PCD_EP_ISR_Handler+0x1da>
 80072d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d015      	beq.n	8007308 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6818      	ldr	r0, [r3, #0]
 80072e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072e2:	6959      	ldr	r1, [r3, #20]
 80072e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072e6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80072e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072ea:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	f007 ff9e 	bl	800f22e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80072f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072f4:	695a      	ldr	r2, [r3, #20]
 80072f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	441a      	add	r2, r3
 80072fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072fe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007300:	2100      	movs	r1, #0
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f00a f956 	bl	80115b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007310:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007312:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007316:	2b00      	cmp	r3, #0
 8007318:	f040 8242 	bne.w	80077a0 <PCD_EP_ISR_Handler+0x672>
 800731c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800731e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007322:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007326:	f000 823b 	beq.w	80077a0 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	881b      	ldrh	r3, [r3, #0]
 8007330:	b29b      	uxth	r3, r3
 8007332:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800733a:	81bb      	strh	r3, [r7, #12]
 800733c:	89bb      	ldrh	r3, [r7, #12]
 800733e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007342:	81bb      	strh	r3, [r7, #12]
 8007344:	89bb      	ldrh	r3, [r7, #12]
 8007346:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800734a:	81bb      	strh	r3, [r7, #12]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	89bb      	ldrh	r3, [r7, #12]
 8007352:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007356:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800735a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800735e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007362:	b29b      	uxth	r3, r3
 8007364:	8013      	strh	r3, [r2, #0]
 8007366:	e21b      	b.n	80077a0 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	461a      	mov	r2, r3
 800736e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800737a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800737e:	2b00      	cmp	r3, #0
 8007380:	f280 80f1 	bge.w	8007566 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	461a      	mov	r2, r3
 800738a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	b29a      	uxth	r2, r3
 8007396:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800739a:	4013      	ands	r3, r2
 800739c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80073ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80073b2:	b292      	uxth	r2, r2
 80073b4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80073b6:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	4413      	add	r3, r2
 80073ca:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80073cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073ce:	7b1b      	ldrb	r3, [r3, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d123      	bne.n	800741c <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073dc:	b29b      	uxth	r3, r3
 80073de:	461a      	mov	r2, r3
 80073e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	00db      	lsls	r3, r3, #3
 80073e6:	4413      	add	r3, r2
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	6812      	ldr	r2, [r2, #0]
 80073ec:	4413      	add	r3, r2
 80073ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073f8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80073fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 808b 	beq.w	800751c <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800740c:	6959      	ldr	r1, [r3, #20]
 800740e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007410:	88da      	ldrh	r2, [r3, #6]
 8007412:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007416:	f007 ff0a 	bl	800f22e <USB_ReadPMA>
 800741a:	e07f      	b.n	800751c <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800741c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800741e:	78db      	ldrb	r3, [r3, #3]
 8007420:	2b02      	cmp	r3, #2
 8007422:	d109      	bne.n	8007438 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007424:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007426:	461a      	mov	r2, r3
 8007428:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f9c6 	bl	80077bc <HAL_PCD_EP_DB_Receive>
 8007430:	4603      	mov	r3, r0
 8007432:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007436:	e071      	b.n	800751c <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	461a      	mov	r2, r3
 800743e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	b29b      	uxth	r3, r3
 800744a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800744e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007452:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	461a      	mov	r2, r3
 800745a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	441a      	add	r2, r3
 8007462:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007464:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007468:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800746c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007470:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007474:	b29b      	uxth	r3, r3
 8007476:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	461a      	mov	r2, r3
 800747e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	881b      	ldrh	r3, [r3, #0]
 8007488:	b29b      	uxth	r3, r3
 800748a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d022      	beq.n	80074d8 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800749a:	b29b      	uxth	r3, r3
 800749c:	461a      	mov	r2, r3
 800749e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	00db      	lsls	r3, r3, #3
 80074a4:	4413      	add	r3, r2
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	6812      	ldr	r2, [r2, #0]
 80074aa:	4413      	add	r3, r2
 80074ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074b6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80074ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d02c      	beq.n	800751c <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6818      	ldr	r0, [r3, #0]
 80074c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074c8:	6959      	ldr	r1, [r3, #20]
 80074ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074cc:	891a      	ldrh	r2, [r3, #8]
 80074ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80074d2:	f007 feac 	bl	800f22e <USB_ReadPMA>
 80074d6:	e021      	b.n	800751c <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	461a      	mov	r2, r3
 80074e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	00db      	lsls	r3, r3, #3
 80074ea:	4413      	add	r3, r2
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	6812      	ldr	r2, [r2, #0]
 80074f0:	4413      	add	r3, r2
 80074f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074fc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8007500:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007504:	2b00      	cmp	r3, #0
 8007506:	d009      	beq.n	800751c <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6818      	ldr	r0, [r3, #0]
 800750c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800750e:	6959      	ldr	r1, [r3, #20]
 8007510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007512:	895a      	ldrh	r2, [r3, #10]
 8007514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007518:	f007 fe89 	bl	800f22e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800751c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800751e:	69da      	ldr	r2, [r3, #28]
 8007520:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007524:	441a      	add	r2, r3
 8007526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007528:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800752a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800752c:	695a      	ldr	r2, [r3, #20]
 800752e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007532:	441a      	add	r2, r3
 8007534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007536:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007538:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <PCD_EP_ISR_Handler+0x41e>
 8007540:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	429a      	cmp	r2, r3
 800754a:	d206      	bcs.n	800755a <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800754c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	4619      	mov	r1, r3
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f00a f82e 	bl	80115b4 <HAL_PCD_DataOutStageCallback>
 8007558:	e005      	b.n	8007566 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007560:	4618      	mov	r0, r3
 8007562:	f006 ff29 	bl	800e3b8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007566:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 8117 	beq.w	80077a0 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8007572:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007576:	4613      	mov	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	00db      	lsls	r3, r3, #3
 800757e:	3310      	adds	r3, #16
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	4413      	add	r3, r2
 8007584:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	b29b      	uxth	r3, r3
 8007598:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800759c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075a0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	461a      	mov	r2, r3
 80075a8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	441a      	add	r2, r3
 80075b0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80075b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80075be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075c0:	78db      	ldrb	r3, [r3, #3]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	f040 80a1 	bne.w	800770a <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80075c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075ca:	2200      	movs	r2, #0
 80075cc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80075ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075d0:	7b1b      	ldrb	r3, [r3, #12]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 8092 	beq.w	80076fc <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80075d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80075da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d046      	beq.n	8007670 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80075e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075e4:	785b      	ldrb	r3, [r3, #1]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d126      	bne.n	8007638 <PCD_EP_ISR_Handler+0x50a>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	461a      	mov	r2, r3
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	4413      	add	r3, r2
 8007600:	617b      	str	r3, [r7, #20]
 8007602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	00da      	lsls	r2, r3, #3
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	4413      	add	r3, r2
 800760c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007610:	613b      	str	r3, [r7, #16]
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	b29b      	uxth	r3, r3
 8007618:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800761c:	b29a      	uxth	r2, r3
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	801a      	strh	r2, [r3, #0]
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	881b      	ldrh	r3, [r3, #0]
 8007626:	b29b      	uxth	r3, r3
 8007628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800762c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007630:	b29a      	uxth	r2, r3
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	801a      	strh	r2, [r3, #0]
 8007636:	e061      	b.n	80076fc <PCD_EP_ISR_Handler+0x5ce>
 8007638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800763a:	785b      	ldrb	r3, [r3, #1]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d15d      	bne.n	80076fc <PCD_EP_ISR_Handler+0x5ce>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	61fb      	str	r3, [r7, #28]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800764e:	b29b      	uxth	r3, r3
 8007650:	461a      	mov	r2, r3
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	4413      	add	r3, r2
 8007656:	61fb      	str	r3, [r7, #28]
 8007658:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	00da      	lsls	r2, r3, #3
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	4413      	add	r3, r2
 8007662:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007666:	61bb      	str	r3, [r7, #24]
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	2200      	movs	r2, #0
 800766c:	801a      	strh	r2, [r3, #0]
 800766e:	e045      	b.n	80076fc <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007678:	785b      	ldrb	r3, [r3, #1]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d126      	bne.n	80076cc <PCD_EP_ISR_Handler+0x59e>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	627b      	str	r3, [r7, #36]	@ 0x24
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800768c:	b29b      	uxth	r3, r3
 800768e:	461a      	mov	r2, r3
 8007690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007692:	4413      	add	r3, r2
 8007694:	627b      	str	r3, [r7, #36]	@ 0x24
 8007696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	00da      	lsls	r2, r3, #3
 800769c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769e:	4413      	add	r3, r2
 80076a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80076a4:	623b      	str	r3, [r7, #32]
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	801a      	strh	r2, [r3, #0]
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	801a      	strh	r2, [r3, #0]
 80076ca:	e017      	b.n	80076fc <PCD_EP_ISR_Handler+0x5ce>
 80076cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076ce:	785b      	ldrb	r3, [r3, #1]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d113      	bne.n	80076fc <PCD_EP_ISR_Handler+0x5ce>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076dc:	b29b      	uxth	r3, r3
 80076de:	461a      	mov	r2, r3
 80076e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e2:	4413      	add	r3, r2
 80076e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	00da      	lsls	r2, r3, #3
 80076ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ee:	4413      	add	r3, r2
 80076f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80076f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f8:	2200      	movs	r2, #0
 80076fa:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80076fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f009 ff71 	bl	80115ea <HAL_PCD_DataInStageCallback>
 8007708:	e04a      	b.n	80077a0 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800770a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800770c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007710:	2b00      	cmp	r3, #0
 8007712:	d13f      	bne.n	8007794 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800771c:	b29b      	uxth	r3, r3
 800771e:	461a      	mov	r2, r3
 8007720:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	00db      	lsls	r3, r3, #3
 8007726:	4413      	add	r3, r2
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	6812      	ldr	r2, [r2, #0]
 800772c:	4413      	add	r3, r2
 800772e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007738:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800773a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800773c:	699a      	ldr	r2, [r3, #24]
 800773e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007740:	429a      	cmp	r2, r3
 8007742:	d906      	bls.n	8007752 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8007744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007746:	699a      	ldr	r2, [r3, #24]
 8007748:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800774a:	1ad2      	subs	r2, r2, r3
 800774c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800774e:	619a      	str	r2, [r3, #24]
 8007750:	e002      	b.n	8007758 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8007752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007754:	2200      	movs	r2, #0
 8007756:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d106      	bne.n	800776e <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	4619      	mov	r1, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f009 ff3f 	bl	80115ea <HAL_PCD_DataInStageCallback>
 800776c:	e018      	b.n	80077a0 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800776e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007770:	695a      	ldr	r2, [r3, #20]
 8007772:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007774:	441a      	add	r2, r3
 8007776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007778:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800777a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800777c:	69da      	ldr	r2, [r3, #28]
 800777e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007780:	441a      	add	r2, r3
 8007782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007784:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800778c:	4618      	mov	r0, r3
 800778e:	f006 fe13 	bl	800e3b8 <USB_EPStartXfer>
 8007792:	e005      	b.n	80077a0 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007794:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007796:	461a      	mov	r2, r3
 8007798:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f917 	bl	80079ce <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	b21b      	sxth	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f6ff acc3 	blt.w	8007138 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3748      	adds	r7, #72	@ 0x48
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b088      	sub	sp, #32
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	4613      	mov	r3, r2
 80077c8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80077ca:	88fb      	ldrh	r3, [r7, #6]
 80077cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d07c      	beq.n	80078ce <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077dc:	b29b      	uxth	r3, r3
 80077de:	461a      	mov	r2, r3
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	00db      	lsls	r3, r3, #3
 80077e6:	4413      	add	r3, r2
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	6812      	ldr	r2, [r2, #0]
 80077ec:	4413      	add	r3, r2
 80077ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077f8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	699a      	ldr	r2, [r3, #24]
 80077fe:	8b7b      	ldrh	r3, [r7, #26]
 8007800:	429a      	cmp	r2, r3
 8007802:	d306      	bcc.n	8007812 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	699a      	ldr	r2, [r3, #24]
 8007808:	8b7b      	ldrh	r3, [r7, #26]
 800780a:	1ad2      	subs	r2, r2, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	619a      	str	r2, [r3, #24]
 8007810:	e002      	b.n	8007818 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2200      	movs	r2, #0
 8007816:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d123      	bne.n	8007868 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	461a      	mov	r2, r3
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	b29b      	uxth	r3, r3
 8007832:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800783a:	833b      	strh	r3, [r7, #24]
 800783c:	8b3b      	ldrh	r3, [r7, #24]
 800783e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007842:	833b      	strh	r3, [r7, #24]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	461a      	mov	r2, r3
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	441a      	add	r2, r3
 8007852:	8b3b      	ldrh	r3, [r7, #24]
 8007854:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007858:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800785c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007864:	b29b      	uxth	r3, r3
 8007866:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007868:	88fb      	ldrh	r3, [r7, #6]
 800786a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800786e:	2b00      	cmp	r3, #0
 8007870:	d01f      	beq.n	80078b2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	b29b      	uxth	r3, r3
 8007884:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007888:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800788c:	82fb      	strh	r3, [r7, #22]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	441a      	add	r2, r3
 800789c:	8afb      	ldrh	r3, [r7, #22]
 800789e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80078b2:	8b7b      	ldrh	r3, [r7, #26]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 8085 	beq.w	80079c4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6818      	ldr	r0, [r3, #0]
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	6959      	ldr	r1, [r3, #20]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	891a      	ldrh	r2, [r3, #8]
 80078c6:	8b7b      	ldrh	r3, [r7, #26]
 80078c8:	f007 fcb1 	bl	800f22e <USB_ReadPMA>
 80078cc:	e07a      	b.n	80079c4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	461a      	mov	r2, r3
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	00db      	lsls	r3, r3, #3
 80078e0:	4413      	add	r3, r2
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	6812      	ldr	r2, [r2, #0]
 80078e6:	4413      	add	r3, r2
 80078e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078ec:	881b      	ldrh	r3, [r3, #0]
 80078ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078f2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	699a      	ldr	r2, [r3, #24]
 80078f8:	8b7b      	ldrh	r3, [r7, #26]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d306      	bcc.n	800790c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	699a      	ldr	r2, [r3, #24]
 8007902:	8b7b      	ldrh	r3, [r7, #26]
 8007904:	1ad2      	subs	r2, r2, r3
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	619a      	str	r2, [r3, #24]
 800790a:	e002      	b.n	8007912 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2200      	movs	r2, #0
 8007910:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d123      	bne.n	8007962 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4413      	add	r3, r2
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	b29b      	uxth	r3, r3
 800792c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007934:	83fb      	strh	r3, [r7, #30]
 8007936:	8bfb      	ldrh	r3, [r7, #30]
 8007938:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800793c:	83fb      	strh	r3, [r7, #30]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	441a      	add	r2, r3
 800794c:	8bfb      	ldrh	r3, [r7, #30]
 800794e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007952:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800795a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800795e:	b29b      	uxth	r3, r3
 8007960:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007962:	88fb      	ldrh	r3, [r7, #6]
 8007964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007968:	2b00      	cmp	r3, #0
 800796a:	d11f      	bne.n	80079ac <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	461a      	mov	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	b29b      	uxth	r3, r3
 800797e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007986:	83bb      	strh	r3, [r7, #28]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	461a      	mov	r2, r3
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	441a      	add	r2, r3
 8007996:	8bbb      	ldrh	r3, [r7, #28]
 8007998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800799c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80079ac:	8b7b      	ldrh	r3, [r7, #26]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d008      	beq.n	80079c4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6818      	ldr	r0, [r3, #0]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	6959      	ldr	r1, [r3, #20]
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	895a      	ldrh	r2, [r3, #10]
 80079be:	8b7b      	ldrh	r3, [r7, #26]
 80079c0:	f007 fc35 	bl	800f22e <USB_ReadPMA>
    }
  }

  return count;
 80079c4:	8b7b      	ldrh	r3, [r7, #26]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3720      	adds	r7, #32
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b0a6      	sub	sp, #152	@ 0x98
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	60f8      	str	r0, [r7, #12]
 80079d6:	60b9      	str	r1, [r7, #8]
 80079d8:	4613      	mov	r3, r2
 80079da:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80079dc:	88fb      	ldrh	r3, [r7, #6]
 80079de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 81f7 	beq.w	8007dd6 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	461a      	mov	r2, r3
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	4413      	add	r3, r2
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	6812      	ldr	r2, [r2, #0]
 8007a00:	4413      	add	r3, r2
 8007a02:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a06:	881b      	ldrh	r3, [r3, #0]
 8007a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a0c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	699a      	ldr	r2, [r3, #24]
 8007a14:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d907      	bls.n	8007a2c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	699a      	ldr	r2, [r3, #24]
 8007a20:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a24:	1ad2      	subs	r2, r2, r3
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	619a      	str	r2, [r3, #24]
 8007a2a:	e002      	b.n	8007a32 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f040 80e1 	bne.w	8007bfe <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	785b      	ldrb	r3, [r3, #1]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d126      	bne.n	8007a92 <HAL_PCD_EP_DB_Transmit+0xc4>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	461a      	mov	r2, r3
 8007a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a58:	4413      	add	r3, r2
 8007a5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	00da      	lsls	r2, r3, #3
 8007a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a64:	4413      	add	r3, r2
 8007a66:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a7a:	801a      	strh	r2, [r3, #0]
 8007a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a7e:	881b      	ldrh	r3, [r3, #0]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8e:	801a      	strh	r2, [r3, #0]
 8007a90:	e01a      	b.n	8007ac8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	785b      	ldrb	r3, [r3, #1]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d116      	bne.n	8007ac8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	461a      	mov	r2, r3
 8007aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aae:	4413      	add	r3, r2
 8007ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	00da      	lsls	r2, r3, #3
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aba:	4413      	add	r3, r2
 8007abc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ac0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	785b      	ldrb	r3, [r3, #1]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d126      	bne.n	8007b24 <HAL_PCD_EP_DB_Transmit+0x156>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	623b      	str	r3, [r7, #32]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	4413      	add	r3, r2
 8007aec:	623b      	str	r3, [r7, #32]
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	00da      	lsls	r2, r3, #3
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	4413      	add	r3, r2
 8007af8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007afc:	61fb      	str	r3, [r7, #28]
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	801a      	strh	r2, [r3, #0]
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	881b      	ldrh	r3, [r3, #0]
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	801a      	strh	r2, [r3, #0]
 8007b22:	e017      	b.n	8007b54 <HAL_PCD_EP_DB_Transmit+0x186>
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	785b      	ldrb	r3, [r3, #1]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d113      	bne.n	8007b54 <HAL_PCD_EP_DB_Transmit+0x186>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	461a      	mov	r2, r3
 8007b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3a:	4413      	add	r3, r2
 8007b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	00da      	lsls	r2, r3, #3
 8007b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b46:	4413      	add	r3, r2
 8007b48:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b50:	2200      	movs	r2, #0
 8007b52:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	78db      	ldrb	r3, [r3, #3]
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d123      	bne.n	8007ba4 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	461a      	mov	r2, r3
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b76:	837b      	strh	r3, [r7, #26]
 8007b78:	8b7b      	ldrh	r3, [r7, #26]
 8007b7a:	f083 0320 	eor.w	r3, r3, #32
 8007b7e:	837b      	strh	r3, [r7, #26]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	461a      	mov	r2, r3
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	441a      	add	r2, r3
 8007b8e:	8b7b      	ldrh	r3, [r7, #26]
 8007b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	4619      	mov	r1, r3
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f009 fd1d 	bl	80115ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007bb0:	88fb      	ldrh	r3, [r7, #6]
 8007bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d01f      	beq.n	8007bfa <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bd4:	833b      	strh	r3, [r7, #24]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	441a      	add	r2, r3
 8007be4:	8b3b      	ldrh	r3, [r7, #24]
 8007be6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	e31f      	b.n	800823e <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007bfe:	88fb      	ldrh	r3, [r7, #6]
 8007c00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d021      	beq.n	8007c4c <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	881b      	ldrh	r3, [r3, #0]
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c22:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	441a      	add	r2, r3
 8007c34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007c38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	f040 82ca 	bne.w	80081ec <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	695a      	ldr	r2, [r3, #20]
 8007c5c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007c60:	441a      	add	r2, r3
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	69da      	ldr	r2, [r3, #28]
 8007c6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007c6e:	441a      	add	r2, r3
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	6a1a      	ldr	r2, [r3, #32]
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d309      	bcc.n	8007c94 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	6a1a      	ldr	r2, [r3, #32]
 8007c8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c8c:	1ad2      	subs	r2, r2, r3
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	621a      	str	r2, [r3, #32]
 8007c92:	e015      	b.n	8007cc0 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d107      	bne.n	8007cac <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8007c9c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007ca0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007caa:	e009      	b.n	8007cc0 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	785b      	ldrb	r3, [r3, #1]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d15f      	bne.n	8007d88 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	461a      	mov	r2, r3
 8007cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cdc:	4413      	add	r3, r2
 8007cde:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	00da      	lsls	r2, r3, #3
 8007ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ce8:	4413      	add	r3, r2
 8007cea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cfe:	801a      	strh	r2, [r3, #0]
 8007d00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10a      	bne.n	8007d1c <HAL_PCD_EP_DB_Transmit+0x34e>
 8007d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d08:	881b      	ldrh	r3, [r3, #0]
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d18:	801a      	strh	r2, [r3, #0]
 8007d1a:	e051      	b.n	8007dc0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007d1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d20:	d816      	bhi.n	8007d50 <HAL_PCD_EP_DB_Transmit+0x382>
 8007d22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d24:	085b      	lsrs	r3, r3, #1
 8007d26:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <HAL_PCD_EP_DB_Transmit+0x36a>
 8007d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d34:	3301      	adds	r3, #1
 8007d36:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d3a:	881b      	ldrh	r3, [r3, #0]
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	029b      	lsls	r3, r3, #10
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	4313      	orrs	r3, r2
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d4c:	801a      	strh	r2, [r3, #0]
 8007d4e:	e037      	b.n	8007dc0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007d50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d52:	095b      	lsrs	r3, r3, #5
 8007d54:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d58:	f003 031f 	and.w	r3, r3, #31
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d102      	bne.n	8007d66 <HAL_PCD_EP_DB_Transmit+0x398>
 8007d60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d62:	3b01      	subs	r3, #1
 8007d64:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	029b      	lsls	r3, r3, #10
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	4313      	orrs	r3, r2
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d84:	801a      	strh	r2, [r3, #0]
 8007d86:	e01b      	b.n	8007dc0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	785b      	ldrb	r3, [r3, #1]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d117      	bne.n	8007dc0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	461a      	mov	r2, r3
 8007da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007da4:	4413      	add	r3, r2
 8007da6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	00da      	lsls	r2, r3, #3
 8007dae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007db0:	4413      	add	r3, r2
 8007db2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007db6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007db8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dbe:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6818      	ldr	r0, [r3, #0]
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	6959      	ldr	r1, [r3, #20]
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	891a      	ldrh	r2, [r3, #8]
 8007dcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	f007 f9eb 	bl	800f1aa <USB_WritePMA>
 8007dd4:	e20a      	b.n	80081ec <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	461a      	mov	r2, r3
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	00db      	lsls	r3, r3, #3
 8007de8:	4413      	add	r3, r2
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	6812      	ldr	r2, [r2, #0]
 8007dee:	4413      	add	r3, r2
 8007df0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dfa:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	699a      	ldr	r2, [r3, #24]
 8007e02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d307      	bcc.n	8007e1a <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	699a      	ldr	r2, [r3, #24]
 8007e0e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e12:	1ad2      	subs	r2, r2, r3
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	619a      	str	r2, [r3, #24]
 8007e18:	e002      	b.n	8007e20 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f040 80f6 	bne.w	8008016 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	785b      	ldrb	r3, [r3, #1]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d126      	bne.n	8007e80 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	677b      	str	r3, [r7, #116]	@ 0x74
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	461a      	mov	r2, r3
 8007e44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e46:	4413      	add	r3, r2
 8007e48:	677b      	str	r3, [r7, #116]	@ 0x74
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	00da      	lsls	r2, r3, #3
 8007e50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e52:	4413      	add	r3, r2
 8007e54:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e58:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e68:	801a      	strh	r2, [r3, #0]
 8007e6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e7c:	801a      	strh	r2, [r3, #0]
 8007e7e:	e01a      	b.n	8007eb6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	785b      	ldrb	r3, [r3, #1]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d116      	bne.n	8007eb6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	461a      	mov	r2, r3
 8007e9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007e9c:	4413      	add	r3, r2
 8007e9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	00da      	lsls	r2, r3, #3
 8007ea6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007eae:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007eb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	785b      	ldrb	r3, [r3, #1]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d12f      	bne.n	8007f26 <HAL_PCD_EP_DB_Transmit+0x558>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	461a      	mov	r2, r3
 8007eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ede:	4413      	add	r3, r2
 8007ee0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	00da      	lsls	r2, r3, #3
 8007eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007eee:	4413      	add	r3, r2
 8007ef0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ef4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ef8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f0a:	801a      	strh	r2, [r3, #0]
 8007f0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f22:	801a      	strh	r2, [r3, #0]
 8007f24:	e01c      	b.n	8007f60 <HAL_PCD_EP_DB_Transmit+0x592>
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	785b      	ldrb	r3, [r3, #1]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d118      	bne.n	8007f60 <HAL_PCD_EP_DB_Transmit+0x592>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	461a      	mov	r2, r3
 8007f3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f3e:	4413      	add	r3, r2
 8007f40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	00da      	lsls	r2, r3, #3
 8007f4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f4e:	4413      	add	r3, r2
 8007f50:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	78db      	ldrb	r3, [r3, #3]
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d127      	bne.n	8007fb8 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	881b      	ldrh	r3, [r3, #0]
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f82:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007f86:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007f8a:	f083 0320 	eor.w	r3, r3, #32
 8007f8e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	441a      	add	r2, r3
 8007fa0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007fa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f009 fb13 	bl	80115ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007fc4:	88fb      	ldrh	r3, [r7, #6]
 8007fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d121      	bne.n	8008012 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	881b      	ldrh	r3, [r3, #0]
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fe8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	441a      	add	r2, r3
 8007ffa:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007ffe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008002:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008006:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800800a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800800e:	b29b      	uxth	r3, r3
 8008010:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	e113      	b.n	800823e <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008016:	88fb      	ldrh	r3, [r7, #6]
 8008018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d121      	bne.n	8008064 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	461a      	mov	r2, r3
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	b29b      	uxth	r3, r3
 8008032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800803a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	441a      	add	r2, r3
 800804c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008058:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800805c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008060:	b29b      	uxth	r3, r3
 8008062:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800806a:	2b01      	cmp	r3, #1
 800806c:	f040 80be 	bne.w	80081ec <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	695a      	ldr	r2, [r3, #20]
 8008074:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008078:	441a      	add	r2, r3
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	69da      	ldr	r2, [r3, #28]
 8008082:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008086:	441a      	add	r2, r3
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	6a1a      	ldr	r2, [r3, #32]
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	429a      	cmp	r2, r3
 8008096:	d309      	bcc.n	80080ac <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	6a1a      	ldr	r2, [r3, #32]
 80080a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080a4:	1ad2      	subs	r2, r2, r3
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	621a      	str	r2, [r3, #32]
 80080aa:	e015      	b.n	80080d8 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	6a1b      	ldr	r3, [r3, #32]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d107      	bne.n	80080c4 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80080b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80080b8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80080c2:	e009      	b.n	80080d8 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	6a1b      	ldr	r3, [r3, #32]
 80080c8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2200      	movs	r2, #0
 80080ce:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	785b      	ldrb	r3, [r3, #1]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d15f      	bne.n	80081a6 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	461a      	mov	r2, r3
 80080f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80080fa:	4413      	add	r3, r2
 80080fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	00da      	lsls	r2, r3, #3
 8008104:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008106:	4413      	add	r3, r2
 8008108:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800810c:	667b      	str	r3, [r7, #100]	@ 0x64
 800810e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	b29b      	uxth	r3, r3
 8008114:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008118:	b29a      	uxth	r2, r3
 800811a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800811c:	801a      	strh	r2, [r3, #0]
 800811e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10a      	bne.n	800813a <HAL_PCD_EP_DB_Transmit+0x76c>
 8008124:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008126:	881b      	ldrh	r3, [r3, #0]
 8008128:	b29b      	uxth	r3, r3
 800812a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800812e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008132:	b29a      	uxth	r2, r3
 8008134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008136:	801a      	strh	r2, [r3, #0]
 8008138:	e04e      	b.n	80081d8 <HAL_PCD_EP_DB_Transmit+0x80a>
 800813a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800813c:	2b3e      	cmp	r3, #62	@ 0x3e
 800813e:	d816      	bhi.n	800816e <HAL_PCD_EP_DB_Transmit+0x7a0>
 8008140:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008142:	085b      	lsrs	r3, r3, #1
 8008144:	663b      	str	r3, [r7, #96]	@ 0x60
 8008146:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	2b00      	cmp	r3, #0
 800814e:	d002      	beq.n	8008156 <HAL_PCD_EP_DB_Transmit+0x788>
 8008150:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008152:	3301      	adds	r3, #1
 8008154:	663b      	str	r3, [r7, #96]	@ 0x60
 8008156:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	b29a      	uxth	r2, r3
 800815c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800815e:	b29b      	uxth	r3, r3
 8008160:	029b      	lsls	r3, r3, #10
 8008162:	b29b      	uxth	r3, r3
 8008164:	4313      	orrs	r3, r2
 8008166:	b29a      	uxth	r2, r3
 8008168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800816a:	801a      	strh	r2, [r3, #0]
 800816c:	e034      	b.n	80081d8 <HAL_PCD_EP_DB_Transmit+0x80a>
 800816e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008170:	095b      	lsrs	r3, r3, #5
 8008172:	663b      	str	r3, [r7, #96]	@ 0x60
 8008174:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008176:	f003 031f 	and.w	r3, r3, #31
 800817a:	2b00      	cmp	r3, #0
 800817c:	d102      	bne.n	8008184 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800817e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008180:	3b01      	subs	r3, #1
 8008182:	663b      	str	r3, [r7, #96]	@ 0x60
 8008184:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	b29a      	uxth	r2, r3
 800818a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800818c:	b29b      	uxth	r3, r3
 800818e:	029b      	lsls	r3, r3, #10
 8008190:	b29b      	uxth	r3, r3
 8008192:	4313      	orrs	r3, r2
 8008194:	b29b      	uxth	r3, r3
 8008196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800819a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800819e:	b29a      	uxth	r2, r3
 80081a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081a2:	801a      	strh	r2, [r3, #0]
 80081a4:	e018      	b.n	80081d8 <HAL_PCD_EP_DB_Transmit+0x80a>
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	785b      	ldrb	r3, [r3, #1]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d114      	bne.n	80081d8 <HAL_PCD_EP_DB_Transmit+0x80a>
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	461a      	mov	r2, r3
 80081ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081bc:	4413      	add	r3, r2
 80081be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	00da      	lsls	r2, r3, #3
 80081c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081c8:	4413      	add	r3, r2
 80081ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80081ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80081d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081d6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6818      	ldr	r0, [r3, #0]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	6959      	ldr	r1, [r3, #20]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	895a      	ldrh	r2, [r3, #10]
 80081e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	f006 ffdf 	bl	800f1aa <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	461a      	mov	r2, r3
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	881b      	ldrh	r3, [r3, #0]
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008202:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008206:	82fb      	strh	r3, [r7, #22]
 8008208:	8afb      	ldrh	r3, [r7, #22]
 800820a:	f083 0310 	eor.w	r3, r3, #16
 800820e:	82fb      	strh	r3, [r7, #22]
 8008210:	8afb      	ldrh	r3, [r7, #22]
 8008212:	f083 0320 	eor.w	r3, r3, #32
 8008216:	82fb      	strh	r3, [r7, #22]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	461a      	mov	r2, r3
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	441a      	add	r2, r3
 8008226:	8afb      	ldrh	r3, [r7, #22]
 8008228:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800822c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008230:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008234:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008238:	b29b      	uxth	r3, r3
 800823a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3798      	adds	r7, #152	@ 0x98
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008246:	b480      	push	{r7}
 8008248:	b087      	sub	sp, #28
 800824a:	af00      	add	r7, sp, #0
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	607b      	str	r3, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	817b      	strh	r3, [r7, #10]
 8008254:	4613      	mov	r3, r2
 8008256:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008258:	897b      	ldrh	r3, [r7, #10]
 800825a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800825e:	b29b      	uxth	r3, r3
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00b      	beq.n	800827c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008264:	897b      	ldrh	r3, [r7, #10]
 8008266:	f003 0207 	and.w	r2, r3, #7
 800826a:	4613      	mov	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	00db      	lsls	r3, r3, #3
 8008272:	3310      	adds	r3, #16
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	4413      	add	r3, r2
 8008278:	617b      	str	r3, [r7, #20]
 800827a:	e009      	b.n	8008290 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800827c:	897a      	ldrh	r2, [r7, #10]
 800827e:	4613      	mov	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	00db      	lsls	r3, r3, #3
 8008286:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	4413      	add	r3, r2
 800828e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008290:	893b      	ldrh	r3, [r7, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d107      	bne.n	80082a6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2200      	movs	r2, #0
 800829a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	b29a      	uxth	r2, r3
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	80da      	strh	r2, [r3, #6]
 80082a4:	e00b      	b.n	80082be <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	2201      	movs	r2, #1
 80082aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	0c1b      	lsrs	r3, r3, #16
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	371c      	adds	r7, #28
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4

  /* Enable BCD feature */
  USBx->BCDR |= USB_BCDR_BCDEN;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	f043 0301 	orr.w	r3, r3, #1
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  /* Enable DCD : Data Contact Detect */
  USBx->BCDR &= ~(USB_BCDR_PDEN);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	f023 0304 	bic.w	r3, r3, #4
 8008302:	b29a      	uxth	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  USBx->BCDR &= ~(USB_BCDR_SDEN);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008310:	b29b      	uxth	r3, r3
 8008312:	f023 0308 	bic.w	r3, r3, #8
 8008316:	b29a      	uxth	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  USBx->BCDR |= USB_BCDR_DCDEN;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008324:	b29b      	uxth	r3, r3
 8008326:	f043 0302 	orr.w	r3, r3, #2
 800832a:	b29a      	uxth	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3714      	adds	r7, #20
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_PCDEx_DeActivateBCD>:
  * @brief  Deactivate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_DeActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 0U;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4

  /* Disable BCD feature */
  USBx->BCDR &= ~(USB_BCDR_BCDEN);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800835c:	b29b      	uxth	r3, r3
 800835e:	f023 0301 	bic.w	r3, r3, #1
 8008362:	b29a      	uxth	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_PCDEx_BCD_VBUSDetect>:
  * @brief  Handle BatteryCharging Process.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCDEx_BCD_VBUSDetect(PCD_HandleTypeDef *hpcd)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = HAL_GetTick();
 8008386:	f7fb ff53 	bl	8004230 <HAL_GetTick>
 800838a:	60b8      	str	r0, [r7, #8]

  /* Wait for Min DCD Timeout */
  HAL_Delay(300U);
 800838c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8008390:	f7fb ff5a 	bl	8004248 <HAL_Delay>

  /* Data Pin Contact ? Check Detect flag */
  if ((USBx->BCDR & USB_BCDR_DCDET) == USB_BCDR_DCDET)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800839a:	b29b      	uxth	r3, r3
 800839c:	f003 0310 	and.w	r3, r3, #16
 80083a0:	2b10      	cmp	r3, #16
 80083a2:	d103      	bne.n	80083ac <HAL_PCDEx_BCD_VBUSDetect+0x34>
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_CONTACT_DETECTION);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CONTACT_DETECTION);
 80083a4:	21fe      	movs	r1, #254	@ 0xfe
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f009 f99c 	bl	80116e4 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }
  /* Primary detection: checks if connected to Standard Downstream Port
  (without charging capability) */
  USBx->BCDR &= ~(USB_BCDR_DCDEN);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	f023 0302 	bic.w	r3, r3, #2
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  HAL_Delay(50U);
 80083c0:	2032      	movs	r0, #50	@ 0x32
 80083c2:	f7fb ff41 	bl	8004248 <HAL_Delay>
  USBx->BCDR |= (USB_BCDR_PDEN);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	f043 0304 	orr.w	r3, r3, #4
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  HAL_Delay(50U);
 80083da:	2032      	movs	r0, #50	@ 0x32
 80083dc:	f7fb ff34 	bl	8004248 <HAL_Delay>

  /* If Charger detect ? */
  if ((USBx->BCDR & USB_BCDR_PDET) == USB_BCDR_PDET)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	f003 0320 	and.w	r3, r3, #32
 80083ec:	2b20      	cmp	r3, #32
 80083ee:	d12b      	bne.n	8008448 <HAL_PCDEx_BCD_VBUSDetect+0xd0>
  {
    /* Start secondary detection to check connection to Charging Downstream
    Port or Dedicated Charging Port */
    USBx->BCDR &= ~(USB_BCDR_PDEN);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	f023 0304 	bic.w	r3, r3, #4
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    HAL_Delay(50U);
 8008404:	2032      	movs	r0, #50	@ 0x32
 8008406:	f7fb ff1f 	bl	8004248 <HAL_Delay>
    USBx->BCDR |= (USB_BCDR_SDEN);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008410:	b29b      	uxth	r3, r3
 8008412:	f043 0308 	orr.w	r3, r3, #8
 8008416:	b29a      	uxth	r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    HAL_Delay(50U);
 800841e:	2032      	movs	r0, #50	@ 0x32
 8008420:	f7fb ff12 	bl	8004248 <HAL_Delay>

    /* If CDP ? */
    if ((USBx->BCDR & USB_BCDR_SDET) == USB_BCDR_SDET)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800842a:	b29b      	uxth	r3, r3
 800842c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008430:	2b40      	cmp	r3, #64	@ 0x40
 8008432:	d104      	bne.n	800843e <HAL_PCDEx_BCD_VBUSDetect+0xc6>
    {
      /* Dedicated Downstream Port DCP */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->BCDCallback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
#else
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
 8008434:	21fb      	movs	r1, #251	@ 0xfb
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f009 f954 	bl	80116e4 <HAL_PCDEx_BCD_Callback>
 800843c:	e008      	b.n	8008450 <HAL_PCDEx_BCD_VBUSDetect+0xd8>
    {
      /* Charging Downstream Port CDP */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->BCDCallback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
#else
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
 800843e:	21fc      	movs	r1, #252	@ 0xfc
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f009 f94f 	bl	80116e4 <HAL_PCDEx_BCD_Callback>
 8008446:	e003      	b.n	8008450 <HAL_PCDEx_BCD_VBUSDetect+0xd8>
  {
    /* Standard Downstream Port */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
 8008448:	21fd      	movs	r1, #253	@ 0xfd
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f009 f94a 	bl	80116e4 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Battery Charging capability discovery finished Start Enumeration */
  (void)HAL_PCDEx_DeActivateBCD(hpcd);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7ff ff75 	bl	8008340 <HAL_PCDEx_DeActivateBCD>

  /* Check for the Timeout, else start USB Device */
  if ((HAL_GetTick() - tickstart) > 1000U)
 8008456:	f7fb feeb 	bl	8004230 <HAL_GetTick>
 800845a:	4602      	mov	r2, r0
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008464:	d904      	bls.n	8008470 <HAL_PCDEx_BCD_VBUSDetect+0xf8>
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_ERROR);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_ERROR);
 8008466:	21ff      	movs	r1, #255	@ 0xff
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f009 f93b 	bl	80116e4 <HAL_PCDEx_BCD_Callback>
    hpcd->BCDCallback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }
}
 800846e:	e003      	b.n	8008478 <HAL_PCDEx_BCD_VBUSDetect+0x100>
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
 8008470:	2100      	movs	r1, #0
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f009 f936 	bl	80116e4 <HAL_PCDEx_BCD_Callback>
}
 8008478:	bf00      	nop
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2201      	movs	r2, #1
 8008492:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	f043 0301 	orr.w	r3, r3, #1
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	f043 0302 	orr.w	r3, r3, #2
 80084be:	b29a      	uxth	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80084d4:	b480      	push	{r7}
 80084d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80084d8:	4b05      	ldr	r3, [pc, #20]	@ (80084f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a04      	ldr	r2, [pc, #16]	@ (80084f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80084de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084e2:	6013      	str	r3, [r2, #0]
}
 80084e4:	bf00      	nop
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	40007000 	.word	0x40007000

080084f4 <HAL_PWR_DisableBkUpAccess>:
  * @brief Disable access to the backup domain
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80084f4:	b480      	push	{r7}
 80084f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 80084f8:	4b05      	ldr	r3, [pc, #20]	@ (8008510 <HAL_PWR_DisableBkUpAccess+0x1c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a04      	ldr	r2, [pc, #16]	@ (8008510 <HAL_PWR_DisableBkUpAccess+0x1c>)
 80084fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008502:	6013      	str	r3, [r2, #0]
}
 8008504:	bf00      	nop
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	40007000 	.word	0x40007000

08008514 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800851c:	4b2b      	ldr	r3, [pc, #172]	@ (80085cc <HAL_PWR_ConfigPVD+0xb8>)
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	f023 020e 	bic.w	r2, r3, #14
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4928      	ldr	r1, [pc, #160]	@ (80085cc <HAL_PWR_ConfigPVD+0xb8>)
 800852a:	4313      	orrs	r3, r2
 800852c:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800852e:	4b28      	ldr	r3, [pc, #160]	@ (80085d0 <HAL_PWR_ConfigPVD+0xbc>)
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	4a27      	ldr	r2, [pc, #156]	@ (80085d0 <HAL_PWR_ConfigPVD+0xbc>)
 8008534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008538:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800853a:	4b25      	ldr	r3, [pc, #148]	@ (80085d0 <HAL_PWR_ConfigPVD+0xbc>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a24      	ldr	r2, [pc, #144]	@ (80085d0 <HAL_PWR_ConfigPVD+0xbc>)
 8008540:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008544:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8008546:	4b22      	ldr	r3, [pc, #136]	@ (80085d0 <HAL_PWR_ConfigPVD+0xbc>)
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	4a21      	ldr	r2, [pc, #132]	@ (80085d0 <HAL_PWR_ConfigPVD+0xbc>)
 800854c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008550:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8008552:	4b1f      	ldr	r3, [pc, #124]	@ (80085d0 <HAL_PWR_ConfigPVD+0xbc>)
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	4a1e      	ldr	r2, [pc, #120]	@ (80085d0 <HAL_PWR_ConfigPVD+0xbc>)
 8008558:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800855c:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d005      	beq.n	8008576 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800856a:	4b19      	ldr	r3, [pc, #100]	@ (80085d0 <HAL_PWR_ConfigPVD+0xbc>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a18      	ldr	r2, [pc, #96]	@ (80085d0 <HAL_PWR_ConfigPVD+0xbc>)
 8008570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008574:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d005      	beq.n	800858e <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8008582:	4b13      	ldr	r3, [pc, #76]	@ (80085d0 <HAL_PWR_ConfigPVD+0xbc>)
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	4a12      	ldr	r2, [pc, #72]	@ (80085d0 <HAL_PWR_ConfigPVD+0xbc>)
 8008588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800858c:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	2b00      	cmp	r3, #0
 8008598:	d005      	beq.n	80085a6 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800859a:	4b0d      	ldr	r3, [pc, #52]	@ (80085d0 <HAL_PWR_ConfigPVD+0xbc>)
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	4a0c      	ldr	r2, [pc, #48]	@ (80085d0 <HAL_PWR_ConfigPVD+0xbc>)
 80085a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085a4:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f003 0302 	and.w	r3, r3, #2
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d005      	beq.n	80085be <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80085b2:	4b07      	ldr	r3, [pc, #28]	@ (80085d0 <HAL_PWR_ConfigPVD+0xbc>)
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	4a06      	ldr	r2, [pc, #24]	@ (80085d0 <HAL_PWR_ConfigPVD+0xbc>)
 80085b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085bc:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	40007000 	.word	0x40007000
 80085d0:	40010400 	.word	0x40010400

080085d4 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80085d4:	b480      	push	{r7}
 80085d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 80085d8:	4b05      	ldr	r3, [pc, #20]	@ (80085f0 <HAL_PWR_EnablePVD+0x1c>)
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	4a04      	ldr	r2, [pc, #16]	@ (80085f0 <HAL_PWR_EnablePVD+0x1c>)
 80085de:	f043 0301 	orr.w	r3, r3, #1
 80085e2:	6053      	str	r3, [r2, #4]
}
 80085e4:	bf00      	nop
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	40007000 	.word	0x40007000

080085f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d141      	bne.n	8008686 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008602:	4b4b      	ldr	r3, [pc, #300]	@ (8008730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800860a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800860e:	d131      	bne.n	8008674 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008610:	4b47      	ldr	r3, [pc, #284]	@ (8008730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008616:	4a46      	ldr	r2, [pc, #280]	@ (8008730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008618:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800861c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008620:	4b43      	ldr	r3, [pc, #268]	@ (8008730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008628:	4a41      	ldr	r2, [pc, #260]	@ (8008730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800862a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800862e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008630:	4b40      	ldr	r3, [pc, #256]	@ (8008734 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2232      	movs	r2, #50	@ 0x32
 8008636:	fb02 f303 	mul.w	r3, r2, r3
 800863a:	4a3f      	ldr	r2, [pc, #252]	@ (8008738 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800863c:	fba2 2303 	umull	r2, r3, r2, r3
 8008640:	0c9b      	lsrs	r3, r3, #18
 8008642:	3301      	adds	r3, #1
 8008644:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008646:	e002      	b.n	800864e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	3b01      	subs	r3, #1
 800864c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800864e:	4b38      	ldr	r3, [pc, #224]	@ (8008730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800865a:	d102      	bne.n	8008662 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1f2      	bne.n	8008648 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008662:	4b33      	ldr	r3, [pc, #204]	@ (8008730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800866a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800866e:	d158      	bne.n	8008722 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e057      	b.n	8008724 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008674:	4b2e      	ldr	r3, [pc, #184]	@ (8008730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800867a:	4a2d      	ldr	r2, [pc, #180]	@ (8008730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800867c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008680:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008684:	e04d      	b.n	8008722 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800868c:	d141      	bne.n	8008712 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800868e:	4b28      	ldr	r3, [pc, #160]	@ (8008730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800869a:	d131      	bne.n	8008700 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800869c:	4b24      	ldr	r3, [pc, #144]	@ (8008730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800869e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086a2:	4a23      	ldr	r2, [pc, #140]	@ (8008730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80086ac:	4b20      	ldr	r3, [pc, #128]	@ (8008730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80086b4:	4a1e      	ldr	r2, [pc, #120]	@ (8008730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80086ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80086bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008734 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2232      	movs	r2, #50	@ 0x32
 80086c2:	fb02 f303 	mul.w	r3, r2, r3
 80086c6:	4a1c      	ldr	r2, [pc, #112]	@ (8008738 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80086c8:	fba2 2303 	umull	r2, r3, r2, r3
 80086cc:	0c9b      	lsrs	r3, r3, #18
 80086ce:	3301      	adds	r3, #1
 80086d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80086d2:	e002      	b.n	80086da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	3b01      	subs	r3, #1
 80086d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80086da:	4b15      	ldr	r3, [pc, #84]	@ (8008730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086dc:	695b      	ldr	r3, [r3, #20]
 80086de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086e6:	d102      	bne.n	80086ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1f2      	bne.n	80086d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80086ee:	4b10      	ldr	r3, [pc, #64]	@ (8008730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086fa:	d112      	bne.n	8008722 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e011      	b.n	8008724 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008700:	4b0b      	ldr	r3, [pc, #44]	@ (8008730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008706:	4a0a      	ldr	r2, [pc, #40]	@ (8008730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800870c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008710:	e007      	b.n	8008722 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008712:	4b07      	ldr	r3, [pc, #28]	@ (8008730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800871a:	4a05      	ldr	r2, [pc, #20]	@ (8008730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800871c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008720:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	40007000 	.word	0x40007000
 8008734:	20000000 	.word	0x20000000
 8008738:	431bde83 	.word	0x431bde83

0800873c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008740:	4b05      	ldr	r3, [pc, #20]	@ (8008758 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	4a04      	ldr	r2, [pc, #16]	@ (8008758 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008746:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800874a:	6093      	str	r3, [r2, #8]
}
 800874c:	bf00      	nop
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	40007000 	.word	0x40007000

0800875c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b088      	sub	sp, #32
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d101      	bne.n	800876e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e2fe      	b.n	8008d6c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0301 	and.w	r3, r3, #1
 8008776:	2b00      	cmp	r3, #0
 8008778:	d075      	beq.n	8008866 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800877a:	4b97      	ldr	r3, [pc, #604]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	f003 030c 	and.w	r3, r3, #12
 8008782:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008784:	4b94      	ldr	r3, [pc, #592]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f003 0303 	and.w	r3, r3, #3
 800878c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	2b0c      	cmp	r3, #12
 8008792:	d102      	bne.n	800879a <HAL_RCC_OscConfig+0x3e>
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	2b03      	cmp	r3, #3
 8008798:	d002      	beq.n	80087a0 <HAL_RCC_OscConfig+0x44>
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	2b08      	cmp	r3, #8
 800879e:	d10b      	bne.n	80087b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087a0:	4b8d      	ldr	r3, [pc, #564]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d05b      	beq.n	8008864 <HAL_RCC_OscConfig+0x108>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d157      	bne.n	8008864 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e2d9      	b.n	8008d6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087c0:	d106      	bne.n	80087d0 <HAL_RCC_OscConfig+0x74>
 80087c2:	4b85      	ldr	r3, [pc, #532]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a84      	ldr	r2, [pc, #528]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 80087c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	e01d      	b.n	800880c <HAL_RCC_OscConfig+0xb0>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80087d8:	d10c      	bne.n	80087f4 <HAL_RCC_OscConfig+0x98>
 80087da:	4b7f      	ldr	r3, [pc, #508]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a7e      	ldr	r2, [pc, #504]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 80087e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80087e4:	6013      	str	r3, [r2, #0]
 80087e6:	4b7c      	ldr	r3, [pc, #496]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a7b      	ldr	r2, [pc, #492]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 80087ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	e00b      	b.n	800880c <HAL_RCC_OscConfig+0xb0>
 80087f4:	4b78      	ldr	r3, [pc, #480]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a77      	ldr	r2, [pc, #476]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 80087fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087fe:	6013      	str	r3, [r2, #0]
 8008800:	4b75      	ldr	r3, [pc, #468]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a74      	ldr	r2, [pc, #464]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 8008806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800880a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d013      	beq.n	800883c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008814:	f7fb fd0c 	bl	8004230 <HAL_GetTick>
 8008818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800881a:	e008      	b.n	800882e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800881c:	f7fb fd08 	bl	8004230 <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	2b64      	cmp	r3, #100	@ 0x64
 8008828:	d901      	bls.n	800882e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e29e      	b.n	8008d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800882e:	4b6a      	ldr	r3, [pc, #424]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d0f0      	beq.n	800881c <HAL_RCC_OscConfig+0xc0>
 800883a:	e014      	b.n	8008866 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800883c:	f7fb fcf8 	bl	8004230 <HAL_GetTick>
 8008840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008842:	e008      	b.n	8008856 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008844:	f7fb fcf4 	bl	8004230 <HAL_GetTick>
 8008848:	4602      	mov	r2, r0
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	2b64      	cmp	r3, #100	@ 0x64
 8008850:	d901      	bls.n	8008856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008852:	2303      	movs	r3, #3
 8008854:	e28a      	b.n	8008d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008856:	4b60      	ldr	r3, [pc, #384]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1f0      	bne.n	8008844 <HAL_RCC_OscConfig+0xe8>
 8008862:	e000      	b.n	8008866 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0302 	and.w	r3, r3, #2
 800886e:	2b00      	cmp	r3, #0
 8008870:	d075      	beq.n	800895e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008872:	4b59      	ldr	r3, [pc, #356]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f003 030c 	and.w	r3, r3, #12
 800887a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800887c:	4b56      	ldr	r3, [pc, #344]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	f003 0303 	and.w	r3, r3, #3
 8008884:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	2b0c      	cmp	r3, #12
 800888a:	d102      	bne.n	8008892 <HAL_RCC_OscConfig+0x136>
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	2b02      	cmp	r3, #2
 8008890:	d002      	beq.n	8008898 <HAL_RCC_OscConfig+0x13c>
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	2b04      	cmp	r3, #4
 8008896:	d11f      	bne.n	80088d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008898:	4b4f      	ldr	r3, [pc, #316]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d005      	beq.n	80088b0 <HAL_RCC_OscConfig+0x154>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e25d      	b.n	8008d6c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088b0:	4b49      	ldr	r3, [pc, #292]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	061b      	lsls	r3, r3, #24
 80088be:	4946      	ldr	r1, [pc, #280]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 80088c0:	4313      	orrs	r3, r2
 80088c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80088c4:	4b45      	ldr	r3, [pc, #276]	@ (80089dc <HAL_RCC_OscConfig+0x280>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7fa f925 	bl	8002b18 <HAL_InitTick>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d043      	beq.n	800895c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e249      	b.n	8008d6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d023      	beq.n	8008928 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088e0:	4b3d      	ldr	r3, [pc, #244]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a3c      	ldr	r2, [pc, #240]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 80088e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ec:	f7fb fca0 	bl	8004230 <HAL_GetTick>
 80088f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80088f2:	e008      	b.n	8008906 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088f4:	f7fb fc9c 	bl	8004230 <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d901      	bls.n	8008906 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e232      	b.n	8008d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008906:	4b34      	ldr	r3, [pc, #208]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800890e:	2b00      	cmp	r3, #0
 8008910:	d0f0      	beq.n	80088f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008912:	4b31      	ldr	r3, [pc, #196]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	061b      	lsls	r3, r3, #24
 8008920:	492d      	ldr	r1, [pc, #180]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 8008922:	4313      	orrs	r3, r2
 8008924:	604b      	str	r3, [r1, #4]
 8008926:	e01a      	b.n	800895e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008928:	4b2b      	ldr	r3, [pc, #172]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a2a      	ldr	r2, [pc, #168]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 800892e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008934:	f7fb fc7c 	bl	8004230 <HAL_GetTick>
 8008938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800893a:	e008      	b.n	800894e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800893c:	f7fb fc78 	bl	8004230 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	2b02      	cmp	r3, #2
 8008948:	d901      	bls.n	800894e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e20e      	b.n	8008d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800894e:	4b22      	ldr	r3, [pc, #136]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1f0      	bne.n	800893c <HAL_RCC_OscConfig+0x1e0>
 800895a:	e000      	b.n	800895e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800895c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0308 	and.w	r3, r3, #8
 8008966:	2b00      	cmp	r3, #0
 8008968:	d041      	beq.n	80089ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d01c      	beq.n	80089ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008972:	4b19      	ldr	r3, [pc, #100]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 8008974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008978:	4a17      	ldr	r2, [pc, #92]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 800897a:	f043 0301 	orr.w	r3, r3, #1
 800897e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008982:	f7fb fc55 	bl	8004230 <HAL_GetTick>
 8008986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008988:	e008      	b.n	800899c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800898a:	f7fb fc51 	bl	8004230 <HAL_GetTick>
 800898e:	4602      	mov	r2, r0
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	2b02      	cmp	r3, #2
 8008996:	d901      	bls.n	800899c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008998:	2303      	movs	r3, #3
 800899a:	e1e7      	b.n	8008d6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800899c:	4b0e      	ldr	r3, [pc, #56]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 800899e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089a2:	f003 0302 	and.w	r3, r3, #2
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d0ef      	beq.n	800898a <HAL_RCC_OscConfig+0x22e>
 80089aa:	e020      	b.n	80089ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089ac:	4b0a      	ldr	r3, [pc, #40]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 80089ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089b2:	4a09      	ldr	r2, [pc, #36]	@ (80089d8 <HAL_RCC_OscConfig+0x27c>)
 80089b4:	f023 0301 	bic.w	r3, r3, #1
 80089b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089bc:	f7fb fc38 	bl	8004230 <HAL_GetTick>
 80089c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80089c2:	e00d      	b.n	80089e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089c4:	f7fb fc34 	bl	8004230 <HAL_GetTick>
 80089c8:	4602      	mov	r2, r0
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d906      	bls.n	80089e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e1ca      	b.n	8008d6c <HAL_RCC_OscConfig+0x610>
 80089d6:	bf00      	nop
 80089d8:	40021000 	.word	0x40021000
 80089dc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80089e0:	4b8c      	ldr	r3, [pc, #560]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 80089e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1ea      	bne.n	80089c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0304 	and.w	r3, r3, #4
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f000 80a6 	beq.w	8008b48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089fc:	2300      	movs	r3, #0
 80089fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008a00:	4b84      	ldr	r3, [pc, #528]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d101      	bne.n	8008a10 <HAL_RCC_OscConfig+0x2b4>
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e000      	b.n	8008a12 <HAL_RCC_OscConfig+0x2b6>
 8008a10:	2300      	movs	r3, #0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00d      	beq.n	8008a32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a16:	4b7f      	ldr	r3, [pc, #508]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a1a:	4a7e      	ldr	r2, [pc, #504]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a20:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a22:	4b7c      	ldr	r3, [pc, #496]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a2a:	60fb      	str	r3, [r7, #12]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a32:	4b79      	ldr	r3, [pc, #484]	@ (8008c18 <HAL_RCC_OscConfig+0x4bc>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d118      	bne.n	8008a70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a3e:	4b76      	ldr	r3, [pc, #472]	@ (8008c18 <HAL_RCC_OscConfig+0x4bc>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a75      	ldr	r2, [pc, #468]	@ (8008c18 <HAL_RCC_OscConfig+0x4bc>)
 8008a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a4a:	f7fb fbf1 	bl	8004230 <HAL_GetTick>
 8008a4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a50:	e008      	b.n	8008a64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a52:	f7fb fbed 	bl	8004230 <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d901      	bls.n	8008a64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e183      	b.n	8008d6c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a64:	4b6c      	ldr	r3, [pc, #432]	@ (8008c18 <HAL_RCC_OscConfig+0x4bc>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d0f0      	beq.n	8008a52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d108      	bne.n	8008a8a <HAL_RCC_OscConfig+0x32e>
 8008a78:	4b66      	ldr	r3, [pc, #408]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a7e:	4a65      	ldr	r2, [pc, #404]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008a80:	f043 0301 	orr.w	r3, r3, #1
 8008a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a88:	e024      	b.n	8008ad4 <HAL_RCC_OscConfig+0x378>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	2b05      	cmp	r3, #5
 8008a90:	d110      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x358>
 8008a92:	4b60      	ldr	r3, [pc, #384]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a98:	4a5e      	ldr	r2, [pc, #376]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008a9a:	f043 0304 	orr.w	r3, r3, #4
 8008a9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008aa2:	4b5c      	ldr	r3, [pc, #368]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aa8:	4a5a      	ldr	r2, [pc, #360]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008aaa:	f043 0301 	orr.w	r3, r3, #1
 8008aae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ab2:	e00f      	b.n	8008ad4 <HAL_RCC_OscConfig+0x378>
 8008ab4:	4b57      	ldr	r3, [pc, #348]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aba:	4a56      	ldr	r2, [pc, #344]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008abc:	f023 0301 	bic.w	r3, r3, #1
 8008ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ac4:	4b53      	ldr	r3, [pc, #332]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aca:	4a52      	ldr	r2, [pc, #328]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008acc:	f023 0304 	bic.w	r3, r3, #4
 8008ad0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d016      	beq.n	8008b0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008adc:	f7fb fba8 	bl	8004230 <HAL_GetTick>
 8008ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ae2:	e00a      	b.n	8008afa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ae4:	f7fb fba4 	bl	8004230 <HAL_GetTick>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d901      	bls.n	8008afa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008af6:	2303      	movs	r3, #3
 8008af8:	e138      	b.n	8008d6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008afa:	4b46      	ldr	r3, [pc, #280]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b00:	f003 0302 	and.w	r3, r3, #2
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d0ed      	beq.n	8008ae4 <HAL_RCC_OscConfig+0x388>
 8008b08:	e015      	b.n	8008b36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b0a:	f7fb fb91 	bl	8004230 <HAL_GetTick>
 8008b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008b10:	e00a      	b.n	8008b28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b12:	f7fb fb8d 	bl	8004230 <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d901      	bls.n	8008b28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e121      	b.n	8008d6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008b28:	4b3a      	ldr	r3, [pc, #232]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b2e:	f003 0302 	and.w	r3, r3, #2
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1ed      	bne.n	8008b12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008b36:	7ffb      	ldrb	r3, [r7, #31]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d105      	bne.n	8008b48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b3c:	4b35      	ldr	r3, [pc, #212]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b40:	4a34      	ldr	r2, [pc, #208]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008b42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b46:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 0320 	and.w	r3, r3, #32
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d03c      	beq.n	8008bce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d01c      	beq.n	8008b96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b62:	4a2c      	ldr	r2, [pc, #176]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008b64:	f043 0301 	orr.w	r3, r3, #1
 8008b68:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b6c:	f7fb fb60 	bl	8004230 <HAL_GetTick>
 8008b70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008b72:	e008      	b.n	8008b86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b74:	f7fb fb5c 	bl	8004230 <HAL_GetTick>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d901      	bls.n	8008b86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e0f2      	b.n	8008d6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008b86:	4b23      	ldr	r3, [pc, #140]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b8c:	f003 0302 	and.w	r3, r3, #2
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d0ef      	beq.n	8008b74 <HAL_RCC_OscConfig+0x418>
 8008b94:	e01b      	b.n	8008bce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b96:	4b1f      	ldr	r3, [pc, #124]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008b9e:	f023 0301 	bic.w	r3, r3, #1
 8008ba2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ba6:	f7fb fb43 	bl	8004230 <HAL_GetTick>
 8008baa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008bac:	e008      	b.n	8008bc0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008bae:	f7fb fb3f 	bl	8004230 <HAL_GetTick>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d901      	bls.n	8008bc0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e0d5      	b.n	8008d6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008bc0:	4b14      	ldr	r3, [pc, #80]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008bc6:	f003 0302 	and.w	r3, r3, #2
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1ef      	bne.n	8008bae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f000 80c9 	beq.w	8008d6a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	f003 030c 	and.w	r3, r3, #12
 8008be0:	2b0c      	cmp	r3, #12
 8008be2:	f000 8083 	beq.w	8008cec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d15e      	bne.n	8008cac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bee:	4b09      	ldr	r3, [pc, #36]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a08      	ldr	r2, [pc, #32]	@ (8008c14 <HAL_RCC_OscConfig+0x4b8>)
 8008bf4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bfa:	f7fb fb19 	bl	8004230 <HAL_GetTick>
 8008bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c00:	e00c      	b.n	8008c1c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c02:	f7fb fb15 	bl	8004230 <HAL_GetTick>
 8008c06:	4602      	mov	r2, r0
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d905      	bls.n	8008c1c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e0ab      	b.n	8008d6c <HAL_RCC_OscConfig+0x610>
 8008c14:	40021000 	.word	0x40021000
 8008c18:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c1c:	4b55      	ldr	r3, [pc, #340]	@ (8008d74 <HAL_RCC_OscConfig+0x618>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1ec      	bne.n	8008c02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c28:	4b52      	ldr	r3, [pc, #328]	@ (8008d74 <HAL_RCC_OscConfig+0x618>)
 8008c2a:	68da      	ldr	r2, [r3, #12]
 8008c2c:	4b52      	ldr	r3, [pc, #328]	@ (8008d78 <HAL_RCC_OscConfig+0x61c>)
 8008c2e:	4013      	ands	r3, r2
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	6a11      	ldr	r1, [r2, #32]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008c38:	3a01      	subs	r2, #1
 8008c3a:	0112      	lsls	r2, r2, #4
 8008c3c:	4311      	orrs	r1, r2
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008c42:	0212      	lsls	r2, r2, #8
 8008c44:	4311      	orrs	r1, r2
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008c4a:	0852      	lsrs	r2, r2, #1
 8008c4c:	3a01      	subs	r2, #1
 8008c4e:	0552      	lsls	r2, r2, #21
 8008c50:	4311      	orrs	r1, r2
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008c56:	0852      	lsrs	r2, r2, #1
 8008c58:	3a01      	subs	r2, #1
 8008c5a:	0652      	lsls	r2, r2, #25
 8008c5c:	4311      	orrs	r1, r2
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008c62:	06d2      	lsls	r2, r2, #27
 8008c64:	430a      	orrs	r2, r1
 8008c66:	4943      	ldr	r1, [pc, #268]	@ (8008d74 <HAL_RCC_OscConfig+0x618>)
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c6c:	4b41      	ldr	r3, [pc, #260]	@ (8008d74 <HAL_RCC_OscConfig+0x618>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a40      	ldr	r2, [pc, #256]	@ (8008d74 <HAL_RCC_OscConfig+0x618>)
 8008c72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008c78:	4b3e      	ldr	r3, [pc, #248]	@ (8008d74 <HAL_RCC_OscConfig+0x618>)
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	4a3d      	ldr	r2, [pc, #244]	@ (8008d74 <HAL_RCC_OscConfig+0x618>)
 8008c7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c84:	f7fb fad4 	bl	8004230 <HAL_GetTick>
 8008c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c8a:	e008      	b.n	8008c9e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c8c:	f7fb fad0 	bl	8004230 <HAL_GetTick>
 8008c90:	4602      	mov	r2, r0
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d901      	bls.n	8008c9e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e066      	b.n	8008d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c9e:	4b35      	ldr	r3, [pc, #212]	@ (8008d74 <HAL_RCC_OscConfig+0x618>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d0f0      	beq.n	8008c8c <HAL_RCC_OscConfig+0x530>
 8008caa:	e05e      	b.n	8008d6a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cac:	4b31      	ldr	r3, [pc, #196]	@ (8008d74 <HAL_RCC_OscConfig+0x618>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a30      	ldr	r2, [pc, #192]	@ (8008d74 <HAL_RCC_OscConfig+0x618>)
 8008cb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cb8:	f7fb faba 	bl	8004230 <HAL_GetTick>
 8008cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008cbe:	e008      	b.n	8008cd2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cc0:	f7fb fab6 	bl	8004230 <HAL_GetTick>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d901      	bls.n	8008cd2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e04c      	b.n	8008d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008cd2:	4b28      	ldr	r3, [pc, #160]	@ (8008d74 <HAL_RCC_OscConfig+0x618>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1f0      	bne.n	8008cc0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008cde:	4b25      	ldr	r3, [pc, #148]	@ (8008d74 <HAL_RCC_OscConfig+0x618>)
 8008ce0:	68da      	ldr	r2, [r3, #12]
 8008ce2:	4924      	ldr	r1, [pc, #144]	@ (8008d74 <HAL_RCC_OscConfig+0x618>)
 8008ce4:	4b25      	ldr	r3, [pc, #148]	@ (8008d7c <HAL_RCC_OscConfig+0x620>)
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	60cb      	str	r3, [r1, #12]
 8008cea:	e03e      	b.n	8008d6a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	69db      	ldr	r3, [r3, #28]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d101      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e039      	b.n	8008d6c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8008d74 <HAL_RCC_OscConfig+0x618>)
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f003 0203 	and.w	r2, r3, #3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a1b      	ldr	r3, [r3, #32]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d12c      	bne.n	8008d66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d16:	3b01      	subs	r3, #1
 8008d18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d123      	bne.n	8008d66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d11b      	bne.n	8008d66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d113      	bne.n	8008d66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d48:	085b      	lsrs	r3, r3, #1
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d109      	bne.n	8008d66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d5c:	085b      	lsrs	r3, r3, #1
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d001      	beq.n	8008d6a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e000      	b.n	8008d6c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3720      	adds	r7, #32
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	40021000 	.word	0x40021000
 8008d78:	019f800c 	.word	0x019f800c
 8008d7c:	feeefffc 	.word	0xfeeefffc

08008d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d101      	bne.n	8008d98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e11e      	b.n	8008fd6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d98:	4b91      	ldr	r3, [pc, #580]	@ (8008fe0 <HAL_RCC_ClockConfig+0x260>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 030f 	and.w	r3, r3, #15
 8008da0:	683a      	ldr	r2, [r7, #0]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d910      	bls.n	8008dc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008da6:	4b8e      	ldr	r3, [pc, #568]	@ (8008fe0 <HAL_RCC_ClockConfig+0x260>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f023 020f 	bic.w	r2, r3, #15
 8008dae:	498c      	ldr	r1, [pc, #560]	@ (8008fe0 <HAL_RCC_ClockConfig+0x260>)
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008db6:	4b8a      	ldr	r3, [pc, #552]	@ (8008fe0 <HAL_RCC_ClockConfig+0x260>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 030f 	and.w	r3, r3, #15
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d001      	beq.n	8008dc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e106      	b.n	8008fd6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d073      	beq.n	8008ebc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	2b03      	cmp	r3, #3
 8008dda:	d129      	bne.n	8008e30 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ddc:	4b81      	ldr	r3, [pc, #516]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d101      	bne.n	8008dec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e0f4      	b.n	8008fd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008dec:	f000 fa16 	bl	800921c <RCC_GetSysClockFreqFromPLLSource>
 8008df0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	4a7c      	ldr	r2, [pc, #496]	@ (8008fe8 <HAL_RCC_ClockConfig+0x268>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d93f      	bls.n	8008e7a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008dfa:	4b7a      	ldr	r3, [pc, #488]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d009      	beq.n	8008e1a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d033      	beq.n	8008e7a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d12f      	bne.n	8008e7a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008e1a:	4b72      	ldr	r3, [pc, #456]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e22:	4a70      	ldr	r2, [pc, #448]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008e24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008e2a:	2380      	movs	r3, #128	@ 0x80
 8008e2c:	617b      	str	r3, [r7, #20]
 8008e2e:	e024      	b.n	8008e7a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d107      	bne.n	8008e48 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e38:	4b6a      	ldr	r3, [pc, #424]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d109      	bne.n	8008e58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e0c6      	b.n	8008fd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e48:	4b66      	ldr	r3, [pc, #408]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e0be      	b.n	8008fd6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008e58:	f000 f914 	bl	8009084 <HAL_RCC_GetSysClockFreq>
 8008e5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	4a61      	ldr	r2, [pc, #388]	@ (8008fe8 <HAL_RCC_ClockConfig+0x268>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d909      	bls.n	8008e7a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008e66:	4b5f      	ldr	r3, [pc, #380]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e6e:	4a5d      	ldr	r2, [pc, #372]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008e76:	2380      	movs	r3, #128	@ 0x80
 8008e78:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008e7a:	4b5a      	ldr	r3, [pc, #360]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	f023 0203 	bic.w	r2, r3, #3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	4957      	ldr	r1, [pc, #348]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e8c:	f7fb f9d0 	bl	8004230 <HAL_GetTick>
 8008e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e92:	e00a      	b.n	8008eaa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e94:	f7fb f9cc 	bl	8004230 <HAL_GetTick>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d901      	bls.n	8008eaa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	e095      	b.n	8008fd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008eaa:	4b4e      	ldr	r3, [pc, #312]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	f003 020c 	and.w	r2, r3, #12
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d1eb      	bne.n	8008e94 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0302 	and.w	r3, r3, #2
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d023      	beq.n	8008f10 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 0304 	and.w	r3, r3, #4
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d005      	beq.n	8008ee0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ed4:	4b43      	ldr	r3, [pc, #268]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	4a42      	ldr	r2, [pc, #264]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008eda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008ede:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 0308 	and.w	r3, r3, #8
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d007      	beq.n	8008efc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008eec:	4b3d      	ldr	r3, [pc, #244]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008ef4:	4a3b      	ldr	r2, [pc, #236]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008ef6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008efa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008efc:	4b39      	ldr	r3, [pc, #228]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	4936      	ldr	r1, [pc, #216]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	608b      	str	r3, [r1, #8]
 8008f0e:	e008      	b.n	8008f22 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	2b80      	cmp	r3, #128	@ 0x80
 8008f14:	d105      	bne.n	8008f22 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008f16:	4b33      	ldr	r3, [pc, #204]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	4a32      	ldr	r2, [pc, #200]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008f1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f20:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f22:	4b2f      	ldr	r3, [pc, #188]	@ (8008fe0 <HAL_RCC_ClockConfig+0x260>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 030f 	and.w	r3, r3, #15
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d21d      	bcs.n	8008f6c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f30:	4b2b      	ldr	r3, [pc, #172]	@ (8008fe0 <HAL_RCC_ClockConfig+0x260>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f023 020f 	bic.w	r2, r3, #15
 8008f38:	4929      	ldr	r1, [pc, #164]	@ (8008fe0 <HAL_RCC_ClockConfig+0x260>)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008f40:	f7fb f976 	bl	8004230 <HAL_GetTick>
 8008f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f46:	e00a      	b.n	8008f5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f48:	f7fb f972 	bl	8004230 <HAL_GetTick>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d901      	bls.n	8008f5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	e03b      	b.n	8008fd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f5e:	4b20      	ldr	r3, [pc, #128]	@ (8008fe0 <HAL_RCC_ClockConfig+0x260>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 030f 	and.w	r3, r3, #15
 8008f66:	683a      	ldr	r2, [r7, #0]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d1ed      	bne.n	8008f48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0304 	and.w	r3, r3, #4
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d008      	beq.n	8008f8a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f78:	4b1a      	ldr	r3, [pc, #104]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	4917      	ldr	r1, [pc, #92]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 0308 	and.w	r3, r3, #8
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d009      	beq.n	8008faa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f96:	4b13      	ldr	r3, [pc, #76]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	00db      	lsls	r3, r3, #3
 8008fa4:	490f      	ldr	r1, [pc, #60]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008faa:	f000 f86b 	bl	8009084 <HAL_RCC_GetSysClockFreq>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8008fe4 <HAL_RCC_ClockConfig+0x264>)
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	091b      	lsrs	r3, r3, #4
 8008fb6:	f003 030f 	and.w	r3, r3, #15
 8008fba:	490c      	ldr	r1, [pc, #48]	@ (8008fec <HAL_RCC_ClockConfig+0x26c>)
 8008fbc:	5ccb      	ldrb	r3, [r1, r3]
 8008fbe:	f003 031f 	and.w	r3, r3, #31
 8008fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8008ff0 <HAL_RCC_ClockConfig+0x270>)
 8008fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008fca:	4b0a      	ldr	r3, [pc, #40]	@ (8008ff4 <HAL_RCC_ClockConfig+0x274>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7f9 fda2 	bl	8002b18 <HAL_InitTick>
 8008fd4:	4603      	mov	r3, r0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	40022000 	.word	0x40022000
 8008fe4:	40021000 	.word	0x40021000
 8008fe8:	04c4b400 	.word	0x04c4b400
 8008fec:	08015890 	.word	0x08015890
 8008ff0:	20000000 	.word	0x20000000
 8008ff4:	20000004 	.word	0x20000004

08008ff8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b08c      	sub	sp, #48	@ 0x30
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8009004:	2302      	movs	r3, #2
 8009006:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8009008:	2303      	movs	r3, #3
 800900a:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 800900c:	2300      	movs	r3, #0
 800900e:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009016:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	0c1b      	lsrs	r3, r3, #16
 800901c:	f003 030f 	and.w	r3, r3, #15
 8009020:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8009024:	029b      	lsls	r3, r3, #10
 8009026:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	0c1b      	lsrs	r3, r3, #16
 800902c:	f003 030f 	and.w	r3, r3, #15
 8009030:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8009032:	4b13      	ldr	r3, [pc, #76]	@ (8009080 <HAL_RCC_MCOConfig+0x88>)
 8009034:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009036:	2101      	movs	r1, #1
 8009038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903a:	fa01 f303 	lsl.w	r3, r1, r3
 800903e:	4910      	ldr	r1, [pc, #64]	@ (8009080 <HAL_RCC_MCOConfig+0x88>)
 8009040:	4313      	orrs	r3, r2
 8009042:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	b29b      	uxth	r3, r3
 8009048:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	0d1b      	lsrs	r3, r3, #20
 800904e:	b2db      	uxtb	r3, r3
 8009050:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8009052:	f107 0310 	add.w	r3, r7, #16
 8009056:	4619      	mov	r1, r3
 8009058:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800905a:	f7fc fe31 	bl	8005cc0 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 800905e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009060:	2b00      	cmp	r3, #0
 8009062:	d109      	bne.n	8009078 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8009064:	4b06      	ldr	r3, [pc, #24]	@ (8009080 <HAL_RCC_MCOConfig+0x88>)
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800906c:	68b9      	ldr	r1, [r7, #8]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	430b      	orrs	r3, r1
 8009072:	4903      	ldr	r1, [pc, #12]	@ (8009080 <HAL_RCC_MCOConfig+0x88>)
 8009074:	4313      	orrs	r3, r2
 8009076:	608b      	str	r3, [r1, #8]
  }
}
 8009078:	bf00      	nop
 800907a:	3730      	adds	r7, #48	@ 0x30
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	40021000 	.word	0x40021000

08009084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009084:	b480      	push	{r7}
 8009086:	b087      	sub	sp, #28
 8009088:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800908a:	4b2c      	ldr	r3, [pc, #176]	@ (800913c <HAL_RCC_GetSysClockFreq+0xb8>)
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	f003 030c 	and.w	r3, r3, #12
 8009092:	2b04      	cmp	r3, #4
 8009094:	d102      	bne.n	800909c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009096:	4b2a      	ldr	r3, [pc, #168]	@ (8009140 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009098:	613b      	str	r3, [r7, #16]
 800909a:	e047      	b.n	800912c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800909c:	4b27      	ldr	r3, [pc, #156]	@ (800913c <HAL_RCC_GetSysClockFreq+0xb8>)
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	f003 030c 	and.w	r3, r3, #12
 80090a4:	2b08      	cmp	r3, #8
 80090a6:	d102      	bne.n	80090ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80090a8:	4b26      	ldr	r3, [pc, #152]	@ (8009144 <HAL_RCC_GetSysClockFreq+0xc0>)
 80090aa:	613b      	str	r3, [r7, #16]
 80090ac:	e03e      	b.n	800912c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80090ae:	4b23      	ldr	r3, [pc, #140]	@ (800913c <HAL_RCC_GetSysClockFreq+0xb8>)
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f003 030c 	and.w	r3, r3, #12
 80090b6:	2b0c      	cmp	r3, #12
 80090b8:	d136      	bne.n	8009128 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80090ba:	4b20      	ldr	r3, [pc, #128]	@ (800913c <HAL_RCC_GetSysClockFreq+0xb8>)
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	f003 0303 	and.w	r3, r3, #3
 80090c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80090c4:	4b1d      	ldr	r3, [pc, #116]	@ (800913c <HAL_RCC_GetSysClockFreq+0xb8>)
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	091b      	lsrs	r3, r3, #4
 80090ca:	f003 030f 	and.w	r3, r3, #15
 80090ce:	3301      	adds	r3, #1
 80090d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b03      	cmp	r3, #3
 80090d6:	d10c      	bne.n	80090f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80090d8:	4a1a      	ldr	r2, [pc, #104]	@ (8009144 <HAL_RCC_GetSysClockFreq+0xc0>)
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80090e0:	4a16      	ldr	r2, [pc, #88]	@ (800913c <HAL_RCC_GetSysClockFreq+0xb8>)
 80090e2:	68d2      	ldr	r2, [r2, #12]
 80090e4:	0a12      	lsrs	r2, r2, #8
 80090e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80090ea:	fb02 f303 	mul.w	r3, r2, r3
 80090ee:	617b      	str	r3, [r7, #20]
      break;
 80090f0:	e00c      	b.n	800910c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80090f2:	4a13      	ldr	r2, [pc, #76]	@ (8009140 <HAL_RCC_GetSysClockFreq+0xbc>)
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090fa:	4a10      	ldr	r2, [pc, #64]	@ (800913c <HAL_RCC_GetSysClockFreq+0xb8>)
 80090fc:	68d2      	ldr	r2, [r2, #12]
 80090fe:	0a12      	lsrs	r2, r2, #8
 8009100:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009104:	fb02 f303 	mul.w	r3, r2, r3
 8009108:	617b      	str	r3, [r7, #20]
      break;
 800910a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800910c:	4b0b      	ldr	r3, [pc, #44]	@ (800913c <HAL_RCC_GetSysClockFreq+0xb8>)
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	0e5b      	lsrs	r3, r3, #25
 8009112:	f003 0303 	and.w	r3, r3, #3
 8009116:	3301      	adds	r3, #1
 8009118:	005b      	lsls	r3, r3, #1
 800911a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800911c:	697a      	ldr	r2, [r7, #20]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	fbb2 f3f3 	udiv	r3, r2, r3
 8009124:	613b      	str	r3, [r7, #16]
 8009126:	e001      	b.n	800912c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009128:	2300      	movs	r3, #0
 800912a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800912c:	693b      	ldr	r3, [r7, #16]
}
 800912e:	4618      	mov	r0, r3
 8009130:	371c      	adds	r7, #28
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	40021000 	.word	0x40021000
 8009140:	00f42400 	.word	0x00f42400
 8009144:	007a1200 	.word	0x007a1200

08009148 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009148:	b480      	push	{r7}
 800914a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800914c:	4b03      	ldr	r3, [pc, #12]	@ (800915c <HAL_RCC_GetHCLKFreq+0x14>)
 800914e:	681b      	ldr	r3, [r3, #0]
}
 8009150:	4618      	mov	r0, r3
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	20000000 	.word	0x20000000

08009160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009164:	f7ff fff0 	bl	8009148 <HAL_RCC_GetHCLKFreq>
 8009168:	4602      	mov	r2, r0
 800916a:	4b06      	ldr	r3, [pc, #24]	@ (8009184 <HAL_RCC_GetPCLK1Freq+0x24>)
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	0a1b      	lsrs	r3, r3, #8
 8009170:	f003 0307 	and.w	r3, r3, #7
 8009174:	4904      	ldr	r1, [pc, #16]	@ (8009188 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009176:	5ccb      	ldrb	r3, [r1, r3]
 8009178:	f003 031f 	and.w	r3, r3, #31
 800917c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009180:	4618      	mov	r0, r3
 8009182:	bd80      	pop	{r7, pc}
 8009184:	40021000 	.word	0x40021000
 8009188:	080158a0 	.word	0x080158a0

0800918c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009190:	f7ff ffda 	bl	8009148 <HAL_RCC_GetHCLKFreq>
 8009194:	4602      	mov	r2, r0
 8009196:	4b06      	ldr	r3, [pc, #24]	@ (80091b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	0adb      	lsrs	r3, r3, #11
 800919c:	f003 0307 	and.w	r3, r3, #7
 80091a0:	4904      	ldr	r1, [pc, #16]	@ (80091b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80091a2:	5ccb      	ldrb	r3, [r1, r3]
 80091a4:	f003 031f 	and.w	r3, r3, #31
 80091a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	40021000 	.word	0x40021000
 80091b4:	080158a0 	.word	0x080158a0

080091b8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	220f      	movs	r2, #15
 80091c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80091c8:	4b12      	ldr	r3, [pc, #72]	@ (8009214 <HAL_RCC_GetClockConfig+0x5c>)
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	f003 0203 	and.w	r2, r3, #3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80091d4:	4b0f      	ldr	r3, [pc, #60]	@ (8009214 <HAL_RCC_GetClockConfig+0x5c>)
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80091e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009214 <HAL_RCC_GetClockConfig+0x5c>)
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80091ec:	4b09      	ldr	r3, [pc, #36]	@ (8009214 <HAL_RCC_GetClockConfig+0x5c>)
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	08db      	lsrs	r3, r3, #3
 80091f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80091fa:	4b07      	ldr	r3, [pc, #28]	@ (8009218 <HAL_RCC_GetClockConfig+0x60>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 020f 	and.w	r2, r3, #15
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	601a      	str	r2, [r3, #0]
}
 8009206:	bf00      	nop
 8009208:	370c      	adds	r7, #12
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	40021000 	.word	0x40021000
 8009218:	40022000 	.word	0x40022000

0800921c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800921c:	b480      	push	{r7}
 800921e:	b087      	sub	sp, #28
 8009220:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009222:	4b1e      	ldr	r3, [pc, #120]	@ (800929c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	f003 0303 	and.w	r3, r3, #3
 800922a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800922c:	4b1b      	ldr	r3, [pc, #108]	@ (800929c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	091b      	lsrs	r3, r3, #4
 8009232:	f003 030f 	and.w	r3, r3, #15
 8009236:	3301      	adds	r3, #1
 8009238:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	2b03      	cmp	r3, #3
 800923e:	d10c      	bne.n	800925a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009240:	4a17      	ldr	r2, [pc, #92]	@ (80092a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	fbb2 f3f3 	udiv	r3, r2, r3
 8009248:	4a14      	ldr	r2, [pc, #80]	@ (800929c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800924a:	68d2      	ldr	r2, [r2, #12]
 800924c:	0a12      	lsrs	r2, r2, #8
 800924e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009252:	fb02 f303 	mul.w	r3, r2, r3
 8009256:	617b      	str	r3, [r7, #20]
    break;
 8009258:	e00c      	b.n	8009274 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800925a:	4a12      	ldr	r2, [pc, #72]	@ (80092a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009262:	4a0e      	ldr	r2, [pc, #56]	@ (800929c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009264:	68d2      	ldr	r2, [r2, #12]
 8009266:	0a12      	lsrs	r2, r2, #8
 8009268:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800926c:	fb02 f303 	mul.w	r3, r2, r3
 8009270:	617b      	str	r3, [r7, #20]
    break;
 8009272:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009274:	4b09      	ldr	r3, [pc, #36]	@ (800929c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	0e5b      	lsrs	r3, r3, #25
 800927a:	f003 0303 	and.w	r3, r3, #3
 800927e:	3301      	adds	r3, #1
 8009280:	005b      	lsls	r3, r3, #1
 8009282:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009284:	697a      	ldr	r2, [r7, #20]
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	fbb2 f3f3 	udiv	r3, r2, r3
 800928c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800928e:	687b      	ldr	r3, [r7, #4]
}
 8009290:	4618      	mov	r0, r3
 8009292:	371c      	adds	r7, #28
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	40021000 	.word	0x40021000
 80092a0:	007a1200 	.word	0x007a1200
 80092a4:	00f42400 	.word	0x00f42400

080092a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092b0:	2300      	movs	r3, #0
 80092b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092b4:	2300      	movs	r3, #0
 80092b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 8098 	beq.w	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092c6:	2300      	movs	r3, #0
 80092c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092ca:	4b43      	ldr	r3, [pc, #268]	@ (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10d      	bne.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092d6:	4b40      	ldr	r3, [pc, #256]	@ (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092da:	4a3f      	ldr	r2, [pc, #252]	@ (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80092e2:	4b3d      	ldr	r3, [pc, #244]	@ (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092ea:	60bb      	str	r3, [r7, #8]
 80092ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092ee:	2301      	movs	r3, #1
 80092f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092f2:	4b3a      	ldr	r3, [pc, #232]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a39      	ldr	r2, [pc, #228]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80092f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092fe:	f7fa ff97 	bl	8004230 <HAL_GetTick>
 8009302:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009304:	e009      	b.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009306:	f7fa ff93 	bl	8004230 <HAL_GetTick>
 800930a:	4602      	mov	r2, r0
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	2b02      	cmp	r3, #2
 8009312:	d902      	bls.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	74fb      	strb	r3, [r7, #19]
        break;
 8009318:	e005      	b.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800931a:	4b30      	ldr	r3, [pc, #192]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009322:	2b00      	cmp	r3, #0
 8009324:	d0ef      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009326:	7cfb      	ldrb	r3, [r7, #19]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d159      	bne.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800932c:	4b2a      	ldr	r3, [pc, #168]	@ (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800932e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009336:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d01e      	beq.n	800937c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009342:	697a      	ldr	r2, [r7, #20]
 8009344:	429a      	cmp	r2, r3
 8009346:	d019      	beq.n	800937c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009348:	4b23      	ldr	r3, [pc, #140]	@ (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800934a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800934e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009352:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009354:	4b20      	ldr	r3, [pc, #128]	@ (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800935a:	4a1f      	ldr	r2, [pc, #124]	@ (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800935c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009360:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009364:	4b1c      	ldr	r3, [pc, #112]	@ (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800936a:	4a1b      	ldr	r2, [pc, #108]	@ (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800936c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009374:	4a18      	ldr	r2, [pc, #96]	@ (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d016      	beq.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009386:	f7fa ff53 	bl	8004230 <HAL_GetTick>
 800938a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800938c:	e00b      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800938e:	f7fa ff4f 	bl	8004230 <HAL_GetTick>
 8009392:	4602      	mov	r2, r0
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800939c:	4293      	cmp	r3, r2
 800939e:	d902      	bls.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80093a0:	2303      	movs	r3, #3
 80093a2:	74fb      	strb	r3, [r7, #19]
            break;
 80093a4:	e006      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093a6:	4b0c      	ldr	r3, [pc, #48]	@ (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ac:	f003 0302 	and.w	r3, r3, #2
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d0ec      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80093b4:	7cfb      	ldrb	r3, [r7, #19]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10b      	bne.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093ba:	4b07      	ldr	r3, [pc, #28]	@ (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093c8:	4903      	ldr	r1, [pc, #12]	@ (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093ca:	4313      	orrs	r3, r2
 80093cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80093d0:	e008      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80093d2:	7cfb      	ldrb	r3, [r7, #19]
 80093d4:	74bb      	strb	r3, [r7, #18]
 80093d6:	e005      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80093d8:	40021000 	.word	0x40021000
 80093dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e0:	7cfb      	ldrb	r3, [r7, #19]
 80093e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80093e4:	7c7b      	ldrb	r3, [r7, #17]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d105      	bne.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093ea:	4ba7      	ldr	r3, [pc, #668]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093ee:	4aa6      	ldr	r2, [pc, #664]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00a      	beq.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009402:	4ba1      	ldr	r3, [pc, #644]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009408:	f023 0203 	bic.w	r2, r3, #3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	499d      	ldr	r1, [pc, #628]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009412:	4313      	orrs	r3, r2
 8009414:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 0302 	and.w	r3, r3, #2
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00a      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009424:	4b98      	ldr	r3, [pc, #608]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800942a:	f023 020c 	bic.w	r2, r3, #12
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	4995      	ldr	r1, [pc, #596]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009434:	4313      	orrs	r3, r2
 8009436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 0304 	and.w	r3, r3, #4
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00a      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009446:	4b90      	ldr	r3, [pc, #576]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800944c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	498c      	ldr	r1, [pc, #560]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009456:	4313      	orrs	r3, r2
 8009458:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f003 0308 	and.w	r3, r3, #8
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00a      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009468:	4b87      	ldr	r3, [pc, #540]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800946a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800946e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	4984      	ldr	r1, [pc, #528]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009478:	4313      	orrs	r3, r2
 800947a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 0310 	and.w	r3, r3, #16
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00a      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800948a:	4b7f      	ldr	r3, [pc, #508]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800948c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009490:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	695b      	ldr	r3, [r3, #20]
 8009498:	497b      	ldr	r1, [pc, #492]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800949a:	4313      	orrs	r3, r2
 800949c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 0320 	and.w	r3, r3, #32
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00a      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094ac:	4b76      	ldr	r3, [pc, #472]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	4973      	ldr	r1, [pc, #460]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094bc:	4313      	orrs	r3, r2
 80094be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00a      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80094ce:	4b6e      	ldr	r3, [pc, #440]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	69db      	ldr	r3, [r3, #28]
 80094dc:	496a      	ldr	r1, [pc, #424]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094de:	4313      	orrs	r3, r2
 80094e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00a      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80094f0:	4b65      	ldr	r3, [pc, #404]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a1b      	ldr	r3, [r3, #32]
 80094fe:	4962      	ldr	r1, [pc, #392]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009500:	4313      	orrs	r3, r2
 8009502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00a      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009512:	4b5d      	ldr	r3, [pc, #372]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009518:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009520:	4959      	ldr	r1, [pc, #356]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009522:	4313      	orrs	r3, r2
 8009524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00a      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009534:	4b54      	ldr	r3, [pc, #336]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800953a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009542:	4951      	ldr	r1, [pc, #324]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009544:	4313      	orrs	r3, r2
 8009546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009552:	2b00      	cmp	r3, #0
 8009554:	d015      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009556:	4b4c      	ldr	r3, [pc, #304]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800955c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009564:	4948      	ldr	r1, [pc, #288]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009566:	4313      	orrs	r3, r2
 8009568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009570:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009574:	d105      	bne.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009576:	4b44      	ldr	r3, [pc, #272]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	4a43      	ldr	r2, [pc, #268]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800957c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009580:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800958a:	2b00      	cmp	r3, #0
 800958c:	d015      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800958e:	4b3e      	ldr	r3, [pc, #248]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009594:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800959c:	493a      	ldr	r1, [pc, #232]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800959e:	4313      	orrs	r3, r2
 80095a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80095ac:	d105      	bne.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095ae:	4b36      	ldr	r3, [pc, #216]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	4a35      	ldr	r2, [pc, #212]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095b8:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d015      	beq.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80095c6:	4b30      	ldr	r3, [pc, #192]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095cc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095d4:	492c      	ldr	r1, [pc, #176]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095d6:	4313      	orrs	r3, r2
 80095d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095e4:	d105      	bne.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095e6:	4b28      	ldr	r3, [pc, #160]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	4a27      	ldr	r2, [pc, #156]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095f0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d015      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80095fe:	4b22      	ldr	r3, [pc, #136]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009604:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800960c:	491e      	ldr	r1, [pc, #120]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800960e:	4313      	orrs	r3, r2
 8009610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009618:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800961c:	d105      	bne.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800961e:	4b1a      	ldr	r3, [pc, #104]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	4a19      	ldr	r2, [pc, #100]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009628:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009632:	2b00      	cmp	r3, #0
 8009634:	d015      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009636:	4b14      	ldr	r3, [pc, #80]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800963c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009644:	4910      	ldr	r1, [pc, #64]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009646:	4313      	orrs	r3, r2
 8009648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009650:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009654:	d105      	bne.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009656:	4b0c      	ldr	r3, [pc, #48]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	4a0b      	ldr	r2, [pc, #44]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800965c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009660:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d018      	beq.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800966e:	4b06      	ldr	r3, [pc, #24]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009674:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800967c:	4902      	ldr	r1, [pc, #8]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800967e:	4313      	orrs	r3, r2
 8009680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	e001      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009688:	40021000 	.word	0x40021000
 800968c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800968e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009692:	d105      	bne.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009694:	4b21      	ldr	r3, [pc, #132]	@ (800971c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	4a20      	ldr	r2, [pc, #128]	@ (800971c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800969a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800969e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d015      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80096ac:	4b1b      	ldr	r3, [pc, #108]	@ (800971c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80096ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096b2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096ba:	4918      	ldr	r1, [pc, #96]	@ (800971c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80096bc:	4313      	orrs	r3, r2
 80096be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096ca:	d105      	bne.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80096cc:	4b13      	ldr	r3, [pc, #76]	@ (800971c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	4a12      	ldr	r2, [pc, #72]	@ (800971c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80096d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096d6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d015      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80096e4:	4b0d      	ldr	r3, [pc, #52]	@ (800971c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80096e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80096ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096f2:	490a      	ldr	r1, [pc, #40]	@ (800971c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80096f4:	4313      	orrs	r3, r2
 80096f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009702:	d105      	bne.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009704:	4b05      	ldr	r3, [pc, #20]	@ (800971c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	4a04      	ldr	r2, [pc, #16]	@ (800971c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800970a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800970e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009710:	7cbb      	ldrb	r3, [r7, #18]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3718      	adds	r7, #24
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	40021000 	.word	0x40021000

08009720 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08a      	sub	sp, #40	@ 0x28
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8009728:	2300      	movs	r3, #0
 800972a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  FlagStatus       backupchanged = RESET;
 800972e:	2300      	movs	r3, #0
 8009730:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  __LSCO_CLK_ENABLE();
 8009734:	4b2d      	ldr	r3, [pc, #180]	@ (80097ec <HAL_RCCEx_EnableLSCO+0xcc>)
 8009736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009738:	4a2c      	ldr	r2, [pc, #176]	@ (80097ec <HAL_RCCEx_EnableLSCO+0xcc>)
 800973a:	f043 0301 	orr.w	r3, r3, #1
 800973e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009740:	4b2a      	ldr	r3, [pc, #168]	@ (80097ec <HAL_RCCEx_EnableLSCO+0xcc>)
 8009742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009744:	f003 0301 	and.w	r3, r3, #1
 8009748:	60fb      	str	r3, [r7, #12]
 800974a:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 800974c:	2304      	movs	r3, #4
 800974e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009750:	2303      	movs	r3, #3
 8009752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009754:	2302      	movs	r3, #2
 8009756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009758:	2300      	movs	r3, #0
 800975a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 800975c:	f107 0310 	add.w	r3, r7, #16
 8009760:	4619      	mov	r1, r3
 8009762:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009766:	f7fc faab 	bl	8005cc0 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800976a:	4b20      	ldr	r3, [pc, #128]	@ (80097ec <HAL_RCCEx_EnableLSCO+0xcc>)
 800976c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800976e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10e      	bne.n	8009794 <HAL_RCCEx_EnableLSCO+0x74>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009776:	4b1d      	ldr	r3, [pc, #116]	@ (80097ec <HAL_RCCEx_EnableLSCO+0xcc>)
 8009778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800977a:	4a1c      	ldr	r2, [pc, #112]	@ (80097ec <HAL_RCCEx_EnableLSCO+0xcc>)
 800977c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009780:	6593      	str	r3, [r2, #88]	@ 0x58
 8009782:	4b1a      	ldr	r3, [pc, #104]	@ (80097ec <HAL_RCCEx_EnableLSCO+0xcc>)
 8009784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800978a:	60bb      	str	r3, [r7, #8]
 800978c:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 800978e:	2301      	movs	r3, #1
 8009790:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009794:	4b16      	ldr	r3, [pc, #88]	@ (80097f0 <HAL_RCCEx_EnableLSCO+0xd0>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800979c:	2b00      	cmp	r3, #0
 800979e:	d104      	bne.n	80097aa <HAL_RCCEx_EnableLSCO+0x8a>
  {
    HAL_PWR_EnableBkUpAccess();
 80097a0:	f7fe fe98 	bl	80084d4 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 80097a4:	2301      	movs	r3, #1
 80097a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 80097aa:	4b10      	ldr	r3, [pc, #64]	@ (80097ec <HAL_RCCEx_EnableLSCO+0xcc>)
 80097ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097b0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	4a0c      	ldr	r2, [pc, #48]	@ (80097ec <HAL_RCCEx_EnableLSCO+0xcc>)
 80097ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80097be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  if(backupchanged == SET)
 80097c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d101      	bne.n	80097ce <HAL_RCCEx_EnableLSCO+0xae>
  {
    HAL_PWR_DisableBkUpAccess();
 80097ca:	f7fe fe93 	bl	80084f4 <HAL_PWR_DisableBkUpAccess>
  }
  if(pwrclkchanged == SET)
 80097ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d105      	bne.n	80097e2 <HAL_RCCEx_EnableLSCO+0xc2>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 80097d6:	4b05      	ldr	r3, [pc, #20]	@ (80097ec <HAL_RCCEx_EnableLSCO+0xcc>)
 80097d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097da:	4a04      	ldr	r2, [pc, #16]	@ (80097ec <HAL_RCCEx_EnableLSCO+0xcc>)
 80097dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
}
 80097e2:	bf00      	nop
 80097e4:	3728      	adds	r7, #40	@ 0x28
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	40021000 	.word	0x40021000
 80097f0:	40007000 	.word	0x40007000

080097f4 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80097fc:	4b1c      	ldr	r3, [pc, #112]	@ (8009870 <HAL_RCCEx_CRSConfig+0x7c>)
 80097fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009800:	4a1b      	ldr	r2, [pc, #108]	@ (8009870 <HAL_RCCEx_CRSConfig+0x7c>)
 8009802:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009806:	6393      	str	r3, [r2, #56]	@ 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 8009808:	4b19      	ldr	r3, [pc, #100]	@ (8009870 <HAL_RCCEx_CRSConfig+0x7c>)
 800980a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800980c:	4a18      	ldr	r2, [pc, #96]	@ (8009870 <HAL_RCCEx_CRSConfig+0x7c>)
 800980e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009812:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	431a      	orrs	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	4313      	orrs	r3, r2
 8009824:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	4313      	orrs	r3, r2
 800982e:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	041b      	lsls	r3, r3, #16
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	4313      	orrs	r3, r2
 800983a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800983c:	4a0d      	ldr	r2, [pc, #52]	@ (8009874 <HAL_RCCEx_CRSConfig+0x80>)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8009842:	4b0c      	ldr	r3, [pc, #48]	@ (8009874 <HAL_RCCEx_CRSConfig+0x80>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	021b      	lsls	r3, r3, #8
 8009850:	4908      	ldr	r1, [pc, #32]	@ (8009874 <HAL_RCCEx_CRSConfig+0x80>)
 8009852:	4313      	orrs	r3, r2
 8009854:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8009856:	4b07      	ldr	r3, [pc, #28]	@ (8009874 <HAL_RCCEx_CRSConfig+0x80>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a06      	ldr	r2, [pc, #24]	@ (8009874 <HAL_RCCEx_CRSConfig+0x80>)
 800985c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009860:	6013      	str	r3, [r2, #0]
}
 8009862:	bf00      	nop
 8009864:	3714      	adds	r7, #20
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	40021000 	.word	0x40021000
 8009874:	40002000 	.word	0x40002000

08009878 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e027      	b.n	80098da <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	7a5b      	ldrb	r3, [r3, #9]
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b00      	cmp	r3, #0
 8009892:	d105      	bne.n	80098a0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7f8 fe04 	bl	80024a8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2202      	movs	r2, #2
 80098a4:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f023 0108 	bic.w	r1, r3, #8
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685a      	ldr	r2, [r3, #4]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	430a      	orrs	r2, r1
 80098ba:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f042 0204 	orr.w	r2, r2, #4
 80098ca:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b084      	sub	sp, #16
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d070      	beq.n	80099d6 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d106      	bne.n	800990e <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7f8 fe01 	bl	8002510 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2202      	movs	r2, #2
 8009912:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	f003 0310 	and.w	r3, r3, #16
 8009920:	2b10      	cmp	r3, #16
 8009922:	d04f      	beq.n	80099c4 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	22ca      	movs	r2, #202	@ 0xca
 800992a:	625a      	str	r2, [r3, #36]	@ 0x24
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2253      	movs	r2, #83	@ 0x53
 8009932:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 f877 	bl	8009a28 <RTC_EnterInitMode>
 800993a:	4603      	mov	r3, r0
 800993c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800993e:	7bfb      	ldrb	r3, [r7, #15]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d126      	bne.n	8009992 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	699b      	ldr	r3, [r3, #24]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	6812      	ldr	r2, [r2, #0]
 800994e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8009952:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009956:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6999      	ldr	r1, [r3, #24]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	685a      	ldr	r2, [r3, #4]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	431a      	orrs	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	699b      	ldr	r3, [r3, #24]
 800996c:	431a      	orrs	r2, r3
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	430a      	orrs	r2, r1
 8009974:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	68d9      	ldr	r1, [r3, #12]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	041a      	lsls	r2, r3, #16
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	430a      	orrs	r2, r1
 8009986:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f883 	bl	8009a94 <RTC_ExitInitMode>
 800998e:	4603      	mov	r3, r0
 8009990:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8009992:	7bfb      	ldrb	r3, [r7, #15]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d110      	bne.n	80099ba <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a1a      	ldr	r2, [r3, #32]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	69db      	ldr	r3, [r3, #28]
 80099aa:	431a      	orrs	r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	695b      	ldr	r3, [r3, #20]
 80099b0:	431a      	orrs	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	430a      	orrs	r2, r1
 80099b8:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	22ff      	movs	r2, #255	@ 0xff
 80099c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80099c2:	e001      	b.n	80099c8 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d103      	bne.n	80099d6 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 80099d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a0d      	ldr	r2, [pc, #52]	@ (8009a24 <HAL_RTC_WaitForSynchro+0x44>)
 80099ee:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80099f0:	f7fa fc1e 	bl	8004230 <HAL_GetTick>
 80099f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80099f6:	e009      	b.n	8009a0c <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80099f8:	f7fa fc1a 	bl	8004230 <HAL_GetTick>
 80099fc:	4602      	mov	r2, r0
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a06:	d901      	bls.n	8009a0c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e007      	b.n	8009a1c <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	f003 0320 	and.w	r3, r3, #32
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d0ee      	beq.n	80099f8 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	0001005f 	.word	0x0001005f

08009a28 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d123      	bne.n	8009a8a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68da      	ldr	r2, [r3, #12]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009a50:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009a52:	f7fa fbed 	bl	8004230 <HAL_GetTick>
 8009a56:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009a58:	e00d      	b.n	8009a76 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009a5a:	f7fa fbe9 	bl	8004230 <HAL_GetTick>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a68:	d905      	bls.n	8009a76 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2203      	movs	r2, #3
 8009a72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d102      	bne.n	8009a8a <RTC_EnterInitMode+0x62>
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
 8009a86:	2b03      	cmp	r3, #3
 8009a88:	d1e7      	bne.n	8009a5a <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8009a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3710      	adds	r7, #16
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68da      	ldr	r2, [r3, #12]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009aae:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	699b      	ldr	r3, [r3, #24]
 8009ab6:	f003 0320 	and.w	r3, r3, #32
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d10c      	bne.n	8009ad8 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f7ff ff8e 	bl	80099e0 <HAL_RTC_WaitForSynchro>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d022      	beq.n	8009b10 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2203      	movs	r2, #3
 8009ace:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	73fb      	strb	r3, [r7, #15]
 8009ad6:	e01b      	b.n	8009b10 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	699a      	ldr	r2, [r3, #24]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f022 0220 	bic.w	r2, r2, #32
 8009ae6:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f7ff ff79 	bl	80099e0 <HAL_RTC_WaitForSynchro>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d005      	beq.n	8009b00 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2203      	movs	r2, #3
 8009af8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8009afc:	2303      	movs	r3, #3
 8009afe:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	699a      	ldr	r2, [r3, #24]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f042 0220 	orr.w	r2, r2, #32
 8009b0e:	619a      	str	r2, [r3, #24]
  }

  return status;
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b084      	sub	sp, #16
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d101      	bne.n	8009b30 <HAL_RTCEx_SetRefClock+0x16>
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	e034      	b.n	8009b9a <HAL_RTCEx_SetRefClock+0x80>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	22ca      	movs	r2, #202	@ 0xca
 8009b46:	625a      	str	r2, [r3, #36]	@ 0x24
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2253      	movs	r2, #83	@ 0x53
 8009b4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f7ff ff69 	bl	8009a28 <RTC_EnterInitMode>
 8009b56:	4603      	mov	r3, r0
 8009b58:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10c      	bne.n	8009b7a <HAL_RTCEx_SetRefClock+0x60>
  {
    /* Enable clockref detection */
    SET_BIT(hrtc->Instance->CR, RTC_CR_REFCKON);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	699a      	ldr	r2, [r3, #24]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f042 0210 	orr.w	r2, r2, #16
 8009b6e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f7ff ff8f 	bl	8009a94 <RTC_ExitInitMode>
 8009b76:	4603      	mov	r3, r0
 8009b78:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	22ff      	movs	r2, #255	@ 0xff
 8009b80:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009b82:	7bfb      	ldrb	r3, [r7, #15]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d103      	bne.n	8009b90 <HAL_RTCEx_SetRefClock+0x76>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b084      	sub	sp, #16
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d101      	bne.n	8009bb4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e09d      	b.n	8009cf0 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d108      	bne.n	8009bce <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009bc4:	d009      	beq.n	8009bda <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	61da      	str	r2, [r3, #28]
 8009bcc:	e005      	b.n	8009bda <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d106      	bne.n	8009bfa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7f8 fced 	bl	80025d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2202      	movs	r2, #2
 8009bfe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c10:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009c1a:	d902      	bls.n	8009c22 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	60fb      	str	r3, [r7, #12]
 8009c20:	e002      	b.n	8009c28 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009c22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c26:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009c30:	d007      	beq.n	8009c42 <HAL_SPI_Init+0xa0>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009c3a:	d002      	beq.n	8009c42 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009c52:	431a      	orrs	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	f003 0302 	and.w	r3, r3, #2
 8009c5c:	431a      	orrs	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	f003 0301 	and.w	r3, r3, #1
 8009c66:	431a      	orrs	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	699b      	ldr	r3, [r3, #24]
 8009c6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c70:	431a      	orrs	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	69db      	ldr	r3, [r3, #28]
 8009c76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c7a:	431a      	orrs	r2, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6a1b      	ldr	r3, [r3, #32]
 8009c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c84:	ea42 0103 	orr.w	r1, r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c8c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	430a      	orrs	r2, r1
 8009c96:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	0c1b      	lsrs	r3, r3, #16
 8009c9e:	f003 0204 	and.w	r2, r3, #4
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca6:	f003 0310 	and.w	r3, r3, #16
 8009caa:	431a      	orrs	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cb0:	f003 0308 	and.w	r3, r3, #8
 8009cb4:	431a      	orrs	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009cbe:	ea42 0103 	orr.w	r1, r2, r3
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	430a      	orrs	r2, r1
 8009cce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	69da      	ldr	r2, [r3, #28]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009cde:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b088      	sub	sp, #32
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	603b      	str	r3, [r7, #0]
 8009d04:	4613      	mov	r3, r2
 8009d06:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d08:	f7fa fa92 	bl	8004230 <HAL_GetTick>
 8009d0c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009d0e:	88fb      	ldrh	r3, [r7, #6]
 8009d10:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d001      	beq.n	8009d22 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009d1e:	2302      	movs	r3, #2
 8009d20:	e15c      	b.n	8009fdc <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <HAL_SPI_Transmit+0x36>
 8009d28:	88fb      	ldrh	r3, [r7, #6]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d101      	bne.n	8009d32 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e154      	b.n	8009fdc <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d101      	bne.n	8009d40 <HAL_SPI_Transmit+0x48>
 8009d3c:	2302      	movs	r3, #2
 8009d3e:	e14d      	b.n	8009fdc <HAL_SPI_Transmit+0x2e4>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2203      	movs	r2, #3
 8009d4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	68ba      	ldr	r2, [r7, #8]
 8009d5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	88fa      	ldrh	r2, [r7, #6]
 8009d60:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	88fa      	ldrh	r2, [r7, #6]
 8009d66:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2200      	movs	r2, #0
 8009d88:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d92:	d10f      	bne.n	8009db4 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009da2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009db2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dbe:	2b40      	cmp	r3, #64	@ 0x40
 8009dc0:	d007      	beq.n	8009dd2 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009dd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009dda:	d952      	bls.n	8009e82 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d002      	beq.n	8009dea <HAL_SPI_Transmit+0xf2>
 8009de4:	8b7b      	ldrh	r3, [r7, #26]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d145      	bne.n	8009e76 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dee:	881a      	ldrh	r2, [r3, #0]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dfa:	1c9a      	adds	r2, r3, #2
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	3b01      	subs	r3, #1
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009e0e:	e032      	b.n	8009e76 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	f003 0302 	and.w	r3, r3, #2
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d112      	bne.n	8009e44 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e22:	881a      	ldrh	r2, [r3, #0]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e2e:	1c9a      	adds	r2, r3, #2
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	3b01      	subs	r3, #1
 8009e3c:	b29a      	uxth	r2, r3
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e42:	e018      	b.n	8009e76 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e44:	f7fa f9f4 	bl	8004230 <HAL_GetTick>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d803      	bhi.n	8009e5c <HAL_SPI_Transmit+0x164>
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e5a:	d102      	bne.n	8009e62 <HAL_SPI_Transmit+0x16a>
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d109      	bne.n	8009e76 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009e72:	2303      	movs	r3, #3
 8009e74:	e0b2      	b.n	8009fdc <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1c7      	bne.n	8009e10 <HAL_SPI_Transmit+0x118>
 8009e80:	e083      	b.n	8009f8a <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d002      	beq.n	8009e90 <HAL_SPI_Transmit+0x198>
 8009e8a:	8b7b      	ldrh	r3, [r7, #26]
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d177      	bne.n	8009f80 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d912      	bls.n	8009ec0 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e9e:	881a      	ldrh	r2, [r3, #0]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eaa:	1c9a      	adds	r2, r3, #2
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	3b02      	subs	r3, #2
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009ebe:	e05f      	b.n	8009f80 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	330c      	adds	r3, #12
 8009eca:	7812      	ldrb	r2, [r2, #0]
 8009ecc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed2:	1c5a      	adds	r2, r3, #1
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009ee6:	e04b      	b.n	8009f80 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	f003 0302 	and.w	r3, r3, #2
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	d12b      	bne.n	8009f4e <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d912      	bls.n	8009f26 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f04:	881a      	ldrh	r2, [r3, #0]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f10:	1c9a      	adds	r2, r3, #2
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	3b02      	subs	r3, #2
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009f24:	e02c      	b.n	8009f80 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	330c      	adds	r3, #12
 8009f30:	7812      	ldrb	r2, [r2, #0]
 8009f32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f38:	1c5a      	adds	r2, r3, #1
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	3b01      	subs	r3, #1
 8009f46:	b29a      	uxth	r2, r3
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009f4c:	e018      	b.n	8009f80 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f4e:	f7fa f96f 	bl	8004230 <HAL_GetTick>
 8009f52:	4602      	mov	r2, r0
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	1ad3      	subs	r3, r2, r3
 8009f58:	683a      	ldr	r2, [r7, #0]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d803      	bhi.n	8009f66 <HAL_SPI_Transmit+0x26e>
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f64:	d102      	bne.n	8009f6c <HAL_SPI_Transmit+0x274>
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d109      	bne.n	8009f80 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	e02d      	b.n	8009fdc <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1ae      	bne.n	8009ee8 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f8a:	69fa      	ldr	r2, [r7, #28]
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f000 fcf6 	bl	800a980 <SPI_EndRxTxTransaction>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d002      	beq.n	8009fa0 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2220      	movs	r2, #32
 8009f9e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d10a      	bne.n	8009fbe <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009fa8:	2300      	movs	r3, #0
 8009faa:	617b      	str	r3, [r7, #20]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	617b      	str	r3, [r7, #20]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	617b      	str	r3, [r7, #20]
 8009fbc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d001      	beq.n	8009fda <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e000      	b.n	8009fdc <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8009fda:	2300      	movs	r3, #0
  }
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3720      	adds	r7, #32
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b088      	sub	sp, #32
 8009fe8:	af02      	add	r7, sp, #8
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	603b      	str	r3, [r7, #0]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d001      	beq.n	800a004 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800a000:	2302      	movs	r3, #2
 800a002:	e123      	b.n	800a24c <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d002      	beq.n	800a010 <HAL_SPI_Receive+0x2c>
 800a00a:	88fb      	ldrh	r3, [r7, #6]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d101      	bne.n	800a014 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800a010:	2301      	movs	r3, #1
 800a012:	e11b      	b.n	800a24c <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a01c:	d112      	bne.n	800a044 <HAL_SPI_Receive+0x60>
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10e      	bne.n	800a044 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2204      	movs	r2, #4
 800a02a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a02e:	88fa      	ldrh	r2, [r7, #6]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	4613      	mov	r3, r2
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	68b9      	ldr	r1, [r7, #8]
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f000 f90a 	bl	800a254 <HAL_SPI_TransmitReceive>
 800a040:	4603      	mov	r3, r0
 800a042:	e103      	b.n	800a24c <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a044:	f7fa f8f4 	bl	8004230 <HAL_GetTick>
 800a048:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a050:	2b01      	cmp	r3, #1
 800a052:	d101      	bne.n	800a058 <HAL_SPI_Receive+0x74>
 800a054:	2302      	movs	r3, #2
 800a056:	e0f9      	b.n	800a24c <HAL_SPI_Receive+0x268>
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2204      	movs	r2, #4
 800a064:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2200      	movs	r2, #0
 800a06c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	68ba      	ldr	r2, [r7, #8]
 800a072:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	88fa      	ldrh	r2, [r7, #6]
 800a078:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	88fa      	ldrh	r2, [r7, #6]
 800a080:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2200      	movs	r2, #0
 800a088:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2200      	movs	r2, #0
 800a08e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a0aa:	d908      	bls.n	800a0be <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a0ba:	605a      	str	r2, [r3, #4]
 800a0bc:	e007      	b.n	800a0ce <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	685a      	ldr	r2, [r3, #4]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a0cc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0d6:	d10f      	bne.n	800a0f8 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a0f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a102:	2b40      	cmp	r3, #64	@ 0x40
 800a104:	d007      	beq.n	800a116 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a114:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a11e:	d875      	bhi.n	800a20c <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a120:	e037      	b.n	800a192 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	f003 0301 	and.w	r3, r3, #1
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d117      	bne.n	800a160 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f103 020c 	add.w	r2, r3, #12
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a13c:	7812      	ldrb	r2, [r2, #0]
 800a13e:	b2d2      	uxtb	r2, r2
 800a140:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a146:	1c5a      	adds	r2, r3, #1
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a152:	b29b      	uxth	r3, r3
 800a154:	3b01      	subs	r3, #1
 800a156:	b29a      	uxth	r2, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800a15e:	e018      	b.n	800a192 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a160:	f7fa f866 	bl	8004230 <HAL_GetTick>
 800a164:	4602      	mov	r2, r0
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d803      	bhi.n	800a178 <HAL_SPI_Receive+0x194>
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a176:	d102      	bne.n	800a17e <HAL_SPI_Receive+0x19a>
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d109      	bne.n	800a192 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2201      	movs	r2, #1
 800a182:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a18e:	2303      	movs	r3, #3
 800a190:	e05c      	b.n	800a24c <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a198:	b29b      	uxth	r3, r3
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1c1      	bne.n	800a122 <HAL_SPI_Receive+0x13e>
 800a19e:	e03b      	b.n	800a218 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	f003 0301 	and.w	r3, r3, #1
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d115      	bne.n	800a1da <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68da      	ldr	r2, [r3, #12]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1b8:	b292      	uxth	r2, r2
 800a1ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1c0:	1c9a      	adds	r2, r3, #2
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800a1d8:	e018      	b.n	800a20c <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1da:	f7fa f829 	bl	8004230 <HAL_GetTick>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	1ad3      	subs	r3, r2, r3
 800a1e4:	683a      	ldr	r2, [r7, #0]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d803      	bhi.n	800a1f2 <HAL_SPI_Receive+0x20e>
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a1f0:	d102      	bne.n	800a1f8 <HAL_SPI_Receive+0x214>
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d109      	bne.n	800a20c <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a208:	2303      	movs	r3, #3
 800a20a:	e01f      	b.n	800a24c <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a212:	b29b      	uxth	r3, r3
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1c3      	bne.n	800a1a0 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a218:	697a      	ldr	r2, [r7, #20]
 800a21a:	6839      	ldr	r1, [r7, #0]
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f000 fb57 	bl	800a8d0 <SPI_EndRxTransaction>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d002      	beq.n	800a22e <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2220      	movs	r2, #32
 800a22c:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2201      	movs	r2, #1
 800a232:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2200      	movs	r2, #0
 800a23a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a242:	2b00      	cmp	r3, #0
 800a244:	d001      	beq.n	800a24a <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e000      	b.n	800a24c <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800a24a:	2300      	movs	r3, #0
  }
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3718      	adds	r7, #24
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b08a      	sub	sp, #40	@ 0x28
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
 800a260:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a262:	2301      	movs	r3, #1
 800a264:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a266:	f7f9 ffe3 	bl	8004230 <HAL_GetTick>
 800a26a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a272:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a27a:	887b      	ldrh	r3, [r7, #2]
 800a27c:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800a27e:	887b      	ldrh	r3, [r7, #2]
 800a280:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a282:	7ffb      	ldrb	r3, [r7, #31]
 800a284:	2b01      	cmp	r3, #1
 800a286:	d00c      	beq.n	800a2a2 <HAL_SPI_TransmitReceive+0x4e>
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a28e:	d106      	bne.n	800a29e <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d102      	bne.n	800a29e <HAL_SPI_TransmitReceive+0x4a>
 800a298:	7ffb      	ldrb	r3, [r7, #31]
 800a29a:	2b04      	cmp	r3, #4
 800a29c:	d001      	beq.n	800a2a2 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800a29e:	2302      	movs	r3, #2
 800a2a0:	e1f3      	b.n	800a68a <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d005      	beq.n	800a2b4 <HAL_SPI_TransmitReceive+0x60>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d002      	beq.n	800a2b4 <HAL_SPI_TransmitReceive+0x60>
 800a2ae:	887b      	ldrh	r3, [r7, #2]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d101      	bne.n	800a2b8 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e1e8      	b.n	800a68a <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d101      	bne.n	800a2c6 <HAL_SPI_TransmitReceive+0x72>
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	e1e1      	b.n	800a68a <HAL_SPI_TransmitReceive+0x436>
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	2b04      	cmp	r3, #4
 800a2d8:	d003      	beq.n	800a2e2 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2205      	movs	r2, #5
 800a2de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	887a      	ldrh	r2, [r7, #2]
 800a2f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	887a      	ldrh	r2, [r7, #2]
 800a2fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	887a      	ldrh	r2, [r7, #2]
 800a308:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	887a      	ldrh	r2, [r7, #2]
 800a30e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2200      	movs	r2, #0
 800a31a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a324:	d802      	bhi.n	800a32c <HAL_SPI_TransmitReceive+0xd8>
 800a326:	8abb      	ldrh	r3, [r7, #20]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d908      	bls.n	800a33e <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	685a      	ldr	r2, [r3, #4]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a33a:	605a      	str	r2, [r3, #4]
 800a33c:	e007      	b.n	800a34e <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	685a      	ldr	r2, [r3, #4]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a34c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a358:	2b40      	cmp	r3, #64	@ 0x40
 800a35a:	d007      	beq.n	800a36c <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a36a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a374:	f240 8083 	bls.w	800a47e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d002      	beq.n	800a386 <HAL_SPI_TransmitReceive+0x132>
 800a380:	8afb      	ldrh	r3, [r7, #22]
 800a382:	2b01      	cmp	r3, #1
 800a384:	d16f      	bne.n	800a466 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a38a:	881a      	ldrh	r2, [r3, #0]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a396:	1c9a      	adds	r2, r3, #2
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3aa:	e05c      	b.n	800a466 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	f003 0302 	and.w	r3, r3, #2
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d11b      	bne.n	800a3f2 <HAL_SPI_TransmitReceive+0x19e>
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d016      	beq.n	800a3f2 <HAL_SPI_TransmitReceive+0x19e>
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d113      	bne.n	800a3f2 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3ce:	881a      	ldrh	r2, [r3, #0]
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3da:	1c9a      	adds	r2, r3, #2
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	f003 0301 	and.w	r3, r3, #1
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d11c      	bne.n	800a43a <HAL_SPI_TransmitReceive+0x1e6>
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a406:	b29b      	uxth	r3, r3
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d016      	beq.n	800a43a <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68da      	ldr	r2, [r3, #12]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a416:	b292      	uxth	r2, r2
 800a418:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a41e:	1c9a      	adds	r2, r3, #2
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	3b01      	subs	r3, #1
 800a42e:	b29a      	uxth	r2, r3
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a436:	2301      	movs	r3, #1
 800a438:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a43a:	f7f9 fef9 	bl	8004230 <HAL_GetTick>
 800a43e:	4602      	mov	r2, r0
 800a440:	6a3b      	ldr	r3, [r7, #32]
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a446:	429a      	cmp	r2, r3
 800a448:	d80d      	bhi.n	800a466 <HAL_SPI_TransmitReceive+0x212>
 800a44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a450:	d009      	beq.n	800a466 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2201      	movs	r2, #1
 800a456:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a462:	2303      	movs	r3, #3
 800a464:	e111      	b.n	800a68a <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d19d      	bne.n	800a3ac <HAL_SPI_TransmitReceive+0x158>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a476:	b29b      	uxth	r3, r3
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d197      	bne.n	800a3ac <HAL_SPI_TransmitReceive+0x158>
 800a47c:	e0e5      	b.n	800a64a <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d003      	beq.n	800a48e <HAL_SPI_TransmitReceive+0x23a>
 800a486:	8afb      	ldrh	r3, [r7, #22]
 800a488:	2b01      	cmp	r3, #1
 800a48a:	f040 80d1 	bne.w	800a630 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a492:	b29b      	uxth	r3, r3
 800a494:	2b01      	cmp	r3, #1
 800a496:	d912      	bls.n	800a4be <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a49c:	881a      	ldrh	r2, [r3, #0]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4a8:	1c9a      	adds	r2, r3, #2
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	3b02      	subs	r3, #2
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a4bc:	e0b8      	b.n	800a630 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	330c      	adds	r3, #12
 800a4c8:	7812      	ldrb	r2, [r2, #0]
 800a4ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4d0:	1c5a      	adds	r2, r3, #1
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a4e4:	e0a4      	b.n	800a630 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f003 0302 	and.w	r3, r3, #2
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d134      	bne.n	800a55e <HAL_SPI_TransmitReceive+0x30a>
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d02f      	beq.n	800a55e <HAL_SPI_TransmitReceive+0x30a>
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a500:	2b01      	cmp	r3, #1
 800a502:	d12c      	bne.n	800a55e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a508:	b29b      	uxth	r3, r3
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d912      	bls.n	800a534 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a512:	881a      	ldrh	r2, [r3, #0]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a51e:	1c9a      	adds	r2, r3, #2
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a528:	b29b      	uxth	r3, r3
 800a52a:	3b02      	subs	r3, #2
 800a52c:	b29a      	uxth	r2, r3
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a532:	e012      	b.n	800a55a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	330c      	adds	r3, #12
 800a53e:	7812      	ldrb	r2, [r2, #0]
 800a540:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a546:	1c5a      	adds	r2, r3, #1
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a550:	b29b      	uxth	r3, r3
 800a552:	3b01      	subs	r3, #1
 800a554:	b29a      	uxth	r2, r3
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a55a:	2300      	movs	r3, #0
 800a55c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	f003 0301 	and.w	r3, r3, #1
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d148      	bne.n	800a5fe <HAL_SPI_TransmitReceive+0x3aa>
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a572:	b29b      	uxth	r3, r3
 800a574:	2b00      	cmp	r3, #0
 800a576:	d042      	beq.n	800a5fe <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a57e:	b29b      	uxth	r3, r3
 800a580:	2b01      	cmp	r3, #1
 800a582:	d923      	bls.n	800a5cc <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68da      	ldr	r2, [r3, #12]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a58e:	b292      	uxth	r2, r2
 800a590:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a596:	1c9a      	adds	r2, r3, #2
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	3b02      	subs	r3, #2
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d81f      	bhi.n	800a5fa <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	685a      	ldr	r2, [r3, #4]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a5c8:	605a      	str	r2, [r3, #4]
 800a5ca:	e016      	b.n	800a5fa <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f103 020c 	add.w	r2, r3, #12
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5d8:	7812      	ldrb	r2, [r2, #0]
 800a5da:	b2d2      	uxtb	r2, r2
 800a5dc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5e2:	1c5a      	adds	r2, r3, #1
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a5fe:	f7f9 fe17 	bl	8004230 <HAL_GetTick>
 800a602:	4602      	mov	r2, r0
 800a604:	6a3b      	ldr	r3, [r7, #32]
 800a606:	1ad3      	subs	r3, r2, r3
 800a608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d803      	bhi.n	800a616 <HAL_SPI_TransmitReceive+0x3c2>
 800a60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a610:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a614:	d102      	bne.n	800a61c <HAL_SPI_TransmitReceive+0x3c8>
 800a616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d109      	bne.n	800a630 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2200      	movs	r2, #0
 800a628:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a62c:	2303      	movs	r3, #3
 800a62e:	e02c      	b.n	800a68a <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a634:	b29b      	uxth	r3, r3
 800a636:	2b00      	cmp	r3, #0
 800a638:	f47f af55 	bne.w	800a4e6 <HAL_SPI_TransmitReceive+0x292>
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a642:	b29b      	uxth	r3, r3
 800a644:	2b00      	cmp	r3, #0
 800a646:	f47f af4e 	bne.w	800a4e6 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a64a:	6a3a      	ldr	r2, [r7, #32]
 800a64c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f000 f996 	bl	800a980 <SPI_EndRxTxTransaction>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d008      	beq.n	800a66c <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2220      	movs	r2, #32
 800a65e:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2200      	movs	r2, #0
 800a664:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e00e      	b.n	800a68a <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2200      	movs	r2, #0
 800a678:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a680:	2b00      	cmp	r3, #0
 800a682:	d001      	beq.n	800a688 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	e000      	b.n	800a68a <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800a688:	2300      	movs	r3, #0
  }
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3728      	adds	r7, #40	@ 0x28
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
	...

0800a694 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b088      	sub	sp, #32
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	603b      	str	r3, [r7, #0]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a6a4:	f7f9 fdc4 	bl	8004230 <HAL_GetTick>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ac:	1a9b      	subs	r3, r3, r2
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a6b4:	f7f9 fdbc 	bl	8004230 <HAL_GetTick>
 800a6b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a6ba:	4b39      	ldr	r3, [pc, #228]	@ (800a7a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	015b      	lsls	r3, r3, #5
 800a6c0:	0d1b      	lsrs	r3, r3, #20
 800a6c2:	69fa      	ldr	r2, [r7, #28]
 800a6c4:	fb02 f303 	mul.w	r3, r2, r3
 800a6c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a6ca:	e054      	b.n	800a776 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6d2:	d050      	beq.n	800a776 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a6d4:	f7f9 fdac 	bl	8004230 <HAL_GetTick>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	69fa      	ldr	r2, [r7, #28]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d902      	bls.n	800a6ea <SPI_WaitFlagStateUntilTimeout+0x56>
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d13d      	bne.n	800a766 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	685a      	ldr	r2, [r3, #4]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a6f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a702:	d111      	bne.n	800a728 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a70c:	d004      	beq.n	800a718 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a716:	d107      	bne.n	800a728 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a726:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a72c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a730:	d10f      	bne.n	800a752 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a740:	601a      	str	r2, [r3, #0]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a750:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2201      	movs	r2, #1
 800a756:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a762:	2303      	movs	r3, #3
 800a764:	e017      	b.n	800a796 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d101      	bne.n	800a770 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a76c:	2300      	movs	r3, #0
 800a76e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	3b01      	subs	r3, #1
 800a774:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	689a      	ldr	r2, [r3, #8]
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	4013      	ands	r3, r2
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	429a      	cmp	r2, r3
 800a784:	bf0c      	ite	eq
 800a786:	2301      	moveq	r3, #1
 800a788:	2300      	movne	r3, #0
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	461a      	mov	r2, r3
 800a78e:	79fb      	ldrb	r3, [r7, #7]
 800a790:	429a      	cmp	r2, r3
 800a792:	d19b      	bne.n	800a6cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	3720      	adds	r7, #32
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	20000000 	.word	0x20000000

0800a7a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b08a      	sub	sp, #40	@ 0x28
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	607a      	str	r2, [r7, #4]
 800a7b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a7b6:	f7f9 fd3b 	bl	8004230 <HAL_GetTick>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7be:	1a9b      	subs	r3, r3, r2
 800a7c0:	683a      	ldr	r2, [r7, #0]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a7c6:	f7f9 fd33 	bl	8004230 <HAL_GetTick>
 800a7ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	330c      	adds	r3, #12
 800a7d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a7d4:	4b3d      	ldr	r3, [pc, #244]	@ (800a8cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	4613      	mov	r3, r2
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	4413      	add	r3, r2
 800a7de:	00da      	lsls	r2, r3, #3
 800a7e0:	1ad3      	subs	r3, r2, r3
 800a7e2:	0d1b      	lsrs	r3, r3, #20
 800a7e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7e6:	fb02 f303 	mul.w	r3, r2, r3
 800a7ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a7ec:	e060      	b.n	800a8b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a7f4:	d107      	bne.n	800a806 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d104      	bne.n	800a806 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	b2db      	uxtb	r3, r3
 800a802:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a804:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a80c:	d050      	beq.n	800a8b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a80e:	f7f9 fd0f 	bl	8004230 <HAL_GetTick>
 800a812:	4602      	mov	r2, r0
 800a814:	6a3b      	ldr	r3, [r7, #32]
 800a816:	1ad3      	subs	r3, r2, r3
 800a818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d902      	bls.n	800a824 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a820:	2b00      	cmp	r3, #0
 800a822:	d13d      	bne.n	800a8a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	685a      	ldr	r2, [r3, #4]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a832:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a83c:	d111      	bne.n	800a862 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a846:	d004      	beq.n	800a852 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a850:	d107      	bne.n	800a862 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a860:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a86a:	d10f      	bne.n	800a88c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a87a:	601a      	str	r2, [r3, #0]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a88a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2201      	movs	r2, #1
 800a890:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2200      	movs	r2, #0
 800a898:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a89c:	2303      	movs	r3, #3
 800a89e:	e010      	b.n	800a8c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d101      	bne.n	800a8aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	3b01      	subs	r3, #1
 800a8ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	689a      	ldr	r2, [r3, #8]
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d196      	bne.n	800a7ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3728      	adds	r7, #40	@ 0x28
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	20000000 	.word	0x20000000

0800a8d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af02      	add	r7, sp, #8
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a8e4:	d111      	bne.n	800a90a <SPI_EndRxTransaction+0x3a>
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8ee:	d004      	beq.n	800a8fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8f8:	d107      	bne.n	800a90a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a908:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	9300      	str	r3, [sp, #0]
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	2200      	movs	r2, #0
 800a912:	2180      	movs	r1, #128	@ 0x80
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	f7ff febd 	bl	800a694 <SPI_WaitFlagStateUntilTimeout>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d007      	beq.n	800a930 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a924:	f043 0220 	orr.w	r2, r3, #32
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a92c:	2303      	movs	r3, #3
 800a92e:	e023      	b.n	800a978 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a938:	d11d      	bne.n	800a976 <SPI_EndRxTransaction+0xa6>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a942:	d004      	beq.n	800a94e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a94c:	d113      	bne.n	800a976 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	9300      	str	r3, [sp, #0]
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	2200      	movs	r2, #0
 800a956:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a95a:	68f8      	ldr	r0, [r7, #12]
 800a95c:	f7ff ff22 	bl	800a7a4 <SPI_WaitFifoStateUntilTimeout>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d007      	beq.n	800a976 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a96a:	f043 0220 	orr.w	r2, r3, #32
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a972:	2303      	movs	r3, #3
 800a974:	e000      	b.n	800a978 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3710      	adds	r7, #16
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af02      	add	r7, sp, #8
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	2200      	movs	r2, #0
 800a994:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f7ff ff03 	bl	800a7a4 <SPI_WaitFifoStateUntilTimeout>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d007      	beq.n	800a9b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9a8:	f043 0220 	orr.w	r2, r3, #32
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	e027      	b.n	800aa04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	9300      	str	r3, [sp, #0]
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	2180      	movs	r1, #128	@ 0x80
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f7ff fe68 	bl	800a694 <SPI_WaitFlagStateUntilTimeout>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d007      	beq.n	800a9da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9ce:	f043 0220 	orr.w	r2, r3, #32
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	e014      	b.n	800aa04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	9300      	str	r3, [sp, #0]
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f7ff fedc 	bl	800a7a4 <SPI_WaitFifoStateUntilTimeout>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d007      	beq.n	800aa02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9f6:	f043 0220 	orr.w	r2, r3, #32
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a9fe:	2303      	movs	r3, #3
 800aa00:	e000      	b.n	800aa04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e049      	b.n	800aab2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d106      	bne.n	800aa38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f7f7 fea2 	bl	800277c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2202      	movs	r2, #2
 800aa3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	3304      	adds	r3, #4
 800aa48:	4619      	mov	r1, r3
 800aa4a:	4610      	mov	r0, r2
 800aa4c:	f000 fdc0 	bl	800b5d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3708      	adds	r7, #8
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
	...

0800aabc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d001      	beq.n	800aad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aad0:	2301      	movs	r3, #1
 800aad2:	e04f      	b.n	800ab74 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2202      	movs	r2, #2
 800aad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68da      	ldr	r2, [r3, #12]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f042 0201 	orr.w	r2, r2, #1
 800aaea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a23      	ldr	r2, [pc, #140]	@ (800ab80 <HAL_TIM_Base_Start_IT+0xc4>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d01d      	beq.n	800ab32 <HAL_TIM_Base_Start_IT+0x76>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aafe:	d018      	beq.n	800ab32 <HAL_TIM_Base_Start_IT+0x76>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a1f      	ldr	r2, [pc, #124]	@ (800ab84 <HAL_TIM_Base_Start_IT+0xc8>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d013      	beq.n	800ab32 <HAL_TIM_Base_Start_IT+0x76>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a1e      	ldr	r2, [pc, #120]	@ (800ab88 <HAL_TIM_Base_Start_IT+0xcc>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d00e      	beq.n	800ab32 <HAL_TIM_Base_Start_IT+0x76>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a1c      	ldr	r2, [pc, #112]	@ (800ab8c <HAL_TIM_Base_Start_IT+0xd0>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d009      	beq.n	800ab32 <HAL_TIM_Base_Start_IT+0x76>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a1b      	ldr	r2, [pc, #108]	@ (800ab90 <HAL_TIM_Base_Start_IT+0xd4>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d004      	beq.n	800ab32 <HAL_TIM_Base_Start_IT+0x76>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a19      	ldr	r2, [pc, #100]	@ (800ab94 <HAL_TIM_Base_Start_IT+0xd8>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d115      	bne.n	800ab5e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	689a      	ldr	r2, [r3, #8]
 800ab38:	4b17      	ldr	r3, [pc, #92]	@ (800ab98 <HAL_TIM_Base_Start_IT+0xdc>)
 800ab3a:	4013      	ands	r3, r2
 800ab3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2b06      	cmp	r3, #6
 800ab42:	d015      	beq.n	800ab70 <HAL_TIM_Base_Start_IT+0xb4>
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab4a:	d011      	beq.n	800ab70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f042 0201 	orr.w	r2, r2, #1
 800ab5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab5c:	e008      	b.n	800ab70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f042 0201 	orr.w	r2, r2, #1
 800ab6c:	601a      	str	r2, [r3, #0]
 800ab6e:	e000      	b.n	800ab72 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3714      	adds	r7, #20
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr
 800ab80:	40012c00 	.word	0x40012c00
 800ab84:	40000400 	.word	0x40000400
 800ab88:	40000800 	.word	0x40000800
 800ab8c:	40013400 	.word	0x40013400
 800ab90:	40014000 	.word	0x40014000
 800ab94:	40015000 	.word	0x40015000
 800ab98:	00010007 	.word	0x00010007

0800ab9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d101      	bne.n	800abae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	e049      	b.n	800ac42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d106      	bne.n	800abc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f7f7 fe22 	bl	800280c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2202      	movs	r2, #2
 800abcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	3304      	adds	r3, #4
 800abd8:	4619      	mov	r1, r3
 800abda:	4610      	mov	r0, r2
 800abdc:	f000 fcf8 	bl	800b5d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2201      	movs	r2, #1
 800ac14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3708      	adds	r7, #8
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b086      	sub	sp, #24
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
 800ac52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d101      	bne.n	800ac5e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	e097      	b.n	800ad8e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d106      	bne.n	800ac78 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7f7 fcf2 	bl	800265c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2202      	movs	r2, #2
 800ac7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	689b      	ldr	r3, [r3, #8]
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	6812      	ldr	r2, [r2, #0]
 800ac8a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800ac8e:	f023 0307 	bic.w	r3, r3, #7
 800ac92:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	3304      	adds	r3, #4
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	4610      	mov	r0, r2
 800aca0:	f000 fc96 	bl	800b5d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	699b      	ldr	r3, [r3, #24]
 800acb2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	6a1b      	ldr	r3, [r3, #32]
 800acba:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800accc:	f023 0303 	bic.w	r3, r3, #3
 800acd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	689a      	ldr	r2, [r3, #8]
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	699b      	ldr	r3, [r3, #24]
 800acda:	021b      	lsls	r3, r3, #8
 800acdc:	4313      	orrs	r3, r2
 800acde:	693a      	ldr	r2, [r7, #16]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800acea:	f023 030c 	bic.w	r3, r3, #12
 800acee:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800acf6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800acfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	68da      	ldr	r2, [r3, #12]
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	69db      	ldr	r3, [r3, #28]
 800ad04:	021b      	lsls	r3, r3, #8
 800ad06:	4313      	orrs	r3, r2
 800ad08:	693a      	ldr	r2, [r7, #16]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	011a      	lsls	r2, r3, #4
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	6a1b      	ldr	r3, [r3, #32]
 800ad18:	031b      	lsls	r3, r3, #12
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800ad28:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800ad30:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	695b      	ldr	r3, [r3, #20]
 800ad3a:	011b      	lsls	r3, r3, #4
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	68fa      	ldr	r2, [r7, #12]
 800ad40:	4313      	orrs	r3, r2
 800ad42:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	697a      	ldr	r2, [r7, #20]
 800ad4a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	693a      	ldr	r2, [r7, #16]
 800ad52:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	68fa      	ldr	r2, [r7, #12]
 800ad5a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2201      	movs	r2, #1
 800ad68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2201      	movs	r2, #1
 800ad78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2201      	movs	r2, #1
 800ad88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ad8c:	2300      	movs	r3, #0
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3718      	adds	r7, #24
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b084      	sub	sp, #16
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ada6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800adae:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800adb6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800adbe:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d110      	bne.n	800ade8 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800adc6:	7bfb      	ldrb	r3, [r7, #15]
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d102      	bne.n	800add2 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800adcc:	7b7b      	ldrb	r3, [r7, #13]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d001      	beq.n	800add6 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	e069      	b.n	800aeaa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2202      	movs	r2, #2
 800adda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2202      	movs	r2, #2
 800ade2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ade6:	e031      	b.n	800ae4c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	2b04      	cmp	r3, #4
 800adec:	d110      	bne.n	800ae10 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800adee:	7bbb      	ldrb	r3, [r7, #14]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d102      	bne.n	800adfa <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800adf4:	7b3b      	ldrb	r3, [r7, #12]
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d001      	beq.n	800adfe <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	e055      	b.n	800aeaa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2202      	movs	r2, #2
 800ae02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2202      	movs	r2, #2
 800ae0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae0e:	e01d      	b.n	800ae4c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae10:	7bfb      	ldrb	r3, [r7, #15]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d108      	bne.n	800ae28 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae16:	7bbb      	ldrb	r3, [r7, #14]
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d105      	bne.n	800ae28 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae1c:	7b7b      	ldrb	r3, [r7, #13]
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d102      	bne.n	800ae28 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ae22:	7b3b      	ldrb	r3, [r7, #12]
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d001      	beq.n	800ae2c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e03e      	b.n	800aeaa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2202      	movs	r2, #2
 800ae30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2202      	movs	r2, #2
 800ae38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2202      	movs	r2, #2
 800ae40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2202      	movs	r2, #2
 800ae48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d003      	beq.n	800ae5a <HAL_TIM_Encoder_Start+0xc4>
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	2b04      	cmp	r3, #4
 800ae56:	d008      	beq.n	800ae6a <HAL_TIM_Encoder_Start+0xd4>
 800ae58:	e00f      	b.n	800ae7a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	2100      	movs	r1, #0
 800ae62:	4618      	mov	r0, r3
 800ae64:	f001 f824 	bl	800beb0 <TIM_CCxChannelCmd>
      break;
 800ae68:	e016      	b.n	800ae98 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	2104      	movs	r1, #4
 800ae72:	4618      	mov	r0, r3
 800ae74:	f001 f81c 	bl	800beb0 <TIM_CCxChannelCmd>
      break;
 800ae78:	e00e      	b.n	800ae98 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	2100      	movs	r1, #0
 800ae82:	4618      	mov	r0, r3
 800ae84:	f001 f814 	bl	800beb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	2104      	movs	r1, #4
 800ae90:	4618      	mov	r0, r3
 800ae92:	f001 f80d 	bl	800beb0 <TIM_CCxChannelCmd>
      break;
 800ae96:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f042 0201 	orr.w	r2, r2, #1
 800aea6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b084      	sub	sp, #16
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	f003 0302 	and.w	r3, r3, #2
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d020      	beq.n	800af16 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f003 0302 	and.w	r3, r3, #2
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d01b      	beq.n	800af16 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f06f 0202 	mvn.w	r2, #2
 800aee6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	699b      	ldr	r3, [r3, #24]
 800aef4:	f003 0303 	and.w	r3, r3, #3
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d003      	beq.n	800af04 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 fb49 	bl	800b594 <HAL_TIM_IC_CaptureCallback>
 800af02:	e005      	b.n	800af10 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 fb3b 	bl	800b580 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fb4c 	bl	800b5a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	f003 0304 	and.w	r3, r3, #4
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d020      	beq.n	800af62 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f003 0304 	and.w	r3, r3, #4
 800af26:	2b00      	cmp	r3, #0
 800af28:	d01b      	beq.n	800af62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f06f 0204 	mvn.w	r2, #4
 800af32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2202      	movs	r2, #2
 800af38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	699b      	ldr	r3, [r3, #24]
 800af40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af44:	2b00      	cmp	r3, #0
 800af46:	d003      	beq.n	800af50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 fb23 	bl	800b594 <HAL_TIM_IC_CaptureCallback>
 800af4e:	e005      	b.n	800af5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 fb15 	bl	800b580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fb26 	bl	800b5a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	f003 0308 	and.w	r3, r3, #8
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d020      	beq.n	800afae <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f003 0308 	and.w	r3, r3, #8
 800af72:	2b00      	cmp	r3, #0
 800af74:	d01b      	beq.n	800afae <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f06f 0208 	mvn.w	r2, #8
 800af7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2204      	movs	r2, #4
 800af84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	69db      	ldr	r3, [r3, #28]
 800af8c:	f003 0303 	and.w	r3, r3, #3
 800af90:	2b00      	cmp	r3, #0
 800af92:	d003      	beq.n	800af9c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 fafd 	bl	800b594 <HAL_TIM_IC_CaptureCallback>
 800af9a:	e005      	b.n	800afa8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 faef 	bl	800b580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 fb00 	bl	800b5a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2200      	movs	r2, #0
 800afac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	f003 0310 	and.w	r3, r3, #16
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d020      	beq.n	800affa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f003 0310 	and.w	r3, r3, #16
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d01b      	beq.n	800affa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f06f 0210 	mvn.w	r2, #16
 800afca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2208      	movs	r2, #8
 800afd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	69db      	ldr	r3, [r3, #28]
 800afd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d003      	beq.n	800afe8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 fad7 	bl	800b594 <HAL_TIM_IC_CaptureCallback>
 800afe6:	e005      	b.n	800aff4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 fac9 	bl	800b580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 fada 	bl	800b5a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	f003 0301 	and.w	r3, r3, #1
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00c      	beq.n	800b01e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f003 0301 	and.w	r3, r3, #1
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d007      	beq.n	800b01e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f06f 0201 	mvn.w	r2, #1
 800b016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f7f7 f907 	bl	800222c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b024:	2b00      	cmp	r3, #0
 800b026:	d104      	bne.n	800b032 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00c      	beq.n	800b04c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d007      	beq.n	800b04c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f001 f8bf 	bl	800c1ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00c      	beq.n	800b070 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d007      	beq.n	800b070 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f001 f8b7 	bl	800c1de <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00c      	beq.n	800b094 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b080:	2b00      	cmp	r3, #0
 800b082:	d007      	beq.n	800b094 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b08c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 fa94 	bl	800b5bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	f003 0320 	and.w	r3, r3, #32
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00c      	beq.n	800b0b8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f003 0320 	and.w	r3, r3, #32
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d007      	beq.n	800b0b8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f06f 0220 	mvn.w	r2, #32
 800b0b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f001 f87f 	bl	800c1b6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d00c      	beq.n	800b0dc <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d007      	beq.n	800b0dc <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b0d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f001 f88b 	bl	800c1f2 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00c      	beq.n	800b100 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d007      	beq.n	800b100 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b0f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f001 f883 	bl	800c206 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00c      	beq.n	800b124 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b110:	2b00      	cmp	r3, #0
 800b112:	d007      	beq.n	800b124 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b11c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f001 f87b 	bl	800c21a <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00c      	beq.n	800b148 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b134:	2b00      	cmp	r3, #0
 800b136:	d007      	beq.n	800b148 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f001 f873 	bl	800c22e <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b148:	bf00      	nop
 800b14a:	3710      	adds	r7, #16
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b15c:	2300      	movs	r3, #0
 800b15e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b166:	2b01      	cmp	r3, #1
 800b168:	d101      	bne.n	800b16e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b16a:	2302      	movs	r3, #2
 800b16c:	e0ff      	b.n	800b36e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2201      	movs	r2, #1
 800b172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b14      	cmp	r3, #20
 800b17a:	f200 80f0 	bhi.w	800b35e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b17e:	a201      	add	r2, pc, #4	@ (adr r2, 800b184 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b184:	0800b1d9 	.word	0x0800b1d9
 800b188:	0800b35f 	.word	0x0800b35f
 800b18c:	0800b35f 	.word	0x0800b35f
 800b190:	0800b35f 	.word	0x0800b35f
 800b194:	0800b219 	.word	0x0800b219
 800b198:	0800b35f 	.word	0x0800b35f
 800b19c:	0800b35f 	.word	0x0800b35f
 800b1a0:	0800b35f 	.word	0x0800b35f
 800b1a4:	0800b25b 	.word	0x0800b25b
 800b1a8:	0800b35f 	.word	0x0800b35f
 800b1ac:	0800b35f 	.word	0x0800b35f
 800b1b0:	0800b35f 	.word	0x0800b35f
 800b1b4:	0800b29b 	.word	0x0800b29b
 800b1b8:	0800b35f 	.word	0x0800b35f
 800b1bc:	0800b35f 	.word	0x0800b35f
 800b1c0:	0800b35f 	.word	0x0800b35f
 800b1c4:	0800b2dd 	.word	0x0800b2dd
 800b1c8:	0800b35f 	.word	0x0800b35f
 800b1cc:	0800b35f 	.word	0x0800b35f
 800b1d0:	0800b35f 	.word	0x0800b35f
 800b1d4:	0800b31d 	.word	0x0800b31d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	68b9      	ldr	r1, [r7, #8]
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f000 faa0 	bl	800b724 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	699a      	ldr	r2, [r3, #24]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f042 0208 	orr.w	r2, r2, #8
 800b1f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	699a      	ldr	r2, [r3, #24]
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f022 0204 	bic.w	r2, r2, #4
 800b202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	6999      	ldr	r1, [r3, #24]
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	691a      	ldr	r2, [r3, #16]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	430a      	orrs	r2, r1
 800b214:	619a      	str	r2, [r3, #24]
      break;
 800b216:	e0a5      	b.n	800b364 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	68b9      	ldr	r1, [r7, #8]
 800b21e:	4618      	mov	r0, r3
 800b220:	f000 fb1a 	bl	800b858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	699a      	ldr	r2, [r3, #24]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	699a      	ldr	r2, [r3, #24]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	6999      	ldr	r1, [r3, #24]
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	691b      	ldr	r3, [r3, #16]
 800b24e:	021a      	lsls	r2, r3, #8
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	430a      	orrs	r2, r1
 800b256:	619a      	str	r2, [r3, #24]
      break;
 800b258:	e084      	b.n	800b364 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68b9      	ldr	r1, [r7, #8]
 800b260:	4618      	mov	r0, r3
 800b262:	f000 fb8d 	bl	800b980 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	69da      	ldr	r2, [r3, #28]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f042 0208 	orr.w	r2, r2, #8
 800b274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	69da      	ldr	r2, [r3, #28]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f022 0204 	bic.w	r2, r2, #4
 800b284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	69d9      	ldr	r1, [r3, #28]
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	691a      	ldr	r2, [r3, #16]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	430a      	orrs	r2, r1
 800b296:	61da      	str	r2, [r3, #28]
      break;
 800b298:	e064      	b.n	800b364 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	68b9      	ldr	r1, [r7, #8]
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f000 fbff 	bl	800baa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	69da      	ldr	r2, [r3, #28]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b2b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	69da      	ldr	r2, [r3, #28]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b2c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	69d9      	ldr	r1, [r3, #28]
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	691b      	ldr	r3, [r3, #16]
 800b2d0:	021a      	lsls	r2, r3, #8
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	430a      	orrs	r2, r1
 800b2d8:	61da      	str	r2, [r3, #28]
      break;
 800b2da:	e043      	b.n	800b364 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	68b9      	ldr	r1, [r7, #8]
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f000 fc72 	bl	800bbcc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f042 0208 	orr.w	r2, r2, #8
 800b2f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f022 0204 	bic.w	r2, r2, #4
 800b306:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	691a      	ldr	r2, [r3, #16]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	430a      	orrs	r2, r1
 800b318:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b31a:	e023      	b.n	800b364 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	68b9      	ldr	r1, [r7, #8]
 800b322:	4618      	mov	r0, r3
 800b324:	f000 fcbc 	bl	800bca0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b336:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b346:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	691b      	ldr	r3, [r3, #16]
 800b352:	021a      	lsls	r2, r3, #8
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	430a      	orrs	r2, r1
 800b35a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b35c:	e002      	b.n	800b364 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b35e:	2301      	movs	r3, #1
 800b360:	75fb      	strb	r3, [r7, #23]
      break;
 800b362:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2200      	movs	r2, #0
 800b368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b36c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3718      	adds	r7, #24
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop

0800b378 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b382:	2300      	movs	r3, #0
 800b384:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d101      	bne.n	800b394 <HAL_TIM_ConfigClockSource+0x1c>
 800b390:	2302      	movs	r3, #2
 800b392:	e0e6      	b.n	800b562 <HAL_TIM_ConfigClockSource+0x1ea>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2201      	movs	r2, #1
 800b398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2202      	movs	r2, #2
 800b3a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b3b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b3b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b3be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	68ba      	ldr	r2, [r7, #8]
 800b3c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a67      	ldr	r2, [pc, #412]	@ (800b56c <HAL_TIM_ConfigClockSource+0x1f4>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	f000 80b1 	beq.w	800b536 <HAL_TIM_ConfigClockSource+0x1be>
 800b3d4:	4a65      	ldr	r2, [pc, #404]	@ (800b56c <HAL_TIM_ConfigClockSource+0x1f4>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	f200 80b6 	bhi.w	800b548 <HAL_TIM_ConfigClockSource+0x1d0>
 800b3dc:	4a64      	ldr	r2, [pc, #400]	@ (800b570 <HAL_TIM_ConfigClockSource+0x1f8>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	f000 80a9 	beq.w	800b536 <HAL_TIM_ConfigClockSource+0x1be>
 800b3e4:	4a62      	ldr	r2, [pc, #392]	@ (800b570 <HAL_TIM_ConfigClockSource+0x1f8>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	f200 80ae 	bhi.w	800b548 <HAL_TIM_ConfigClockSource+0x1d0>
 800b3ec:	4a61      	ldr	r2, [pc, #388]	@ (800b574 <HAL_TIM_ConfigClockSource+0x1fc>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	f000 80a1 	beq.w	800b536 <HAL_TIM_ConfigClockSource+0x1be>
 800b3f4:	4a5f      	ldr	r2, [pc, #380]	@ (800b574 <HAL_TIM_ConfigClockSource+0x1fc>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	f200 80a6 	bhi.w	800b548 <HAL_TIM_ConfigClockSource+0x1d0>
 800b3fc:	4a5e      	ldr	r2, [pc, #376]	@ (800b578 <HAL_TIM_ConfigClockSource+0x200>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	f000 8099 	beq.w	800b536 <HAL_TIM_ConfigClockSource+0x1be>
 800b404:	4a5c      	ldr	r2, [pc, #368]	@ (800b578 <HAL_TIM_ConfigClockSource+0x200>)
 800b406:	4293      	cmp	r3, r2
 800b408:	f200 809e 	bhi.w	800b548 <HAL_TIM_ConfigClockSource+0x1d0>
 800b40c:	4a5b      	ldr	r2, [pc, #364]	@ (800b57c <HAL_TIM_ConfigClockSource+0x204>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	f000 8091 	beq.w	800b536 <HAL_TIM_ConfigClockSource+0x1be>
 800b414:	4a59      	ldr	r2, [pc, #356]	@ (800b57c <HAL_TIM_ConfigClockSource+0x204>)
 800b416:	4293      	cmp	r3, r2
 800b418:	f200 8096 	bhi.w	800b548 <HAL_TIM_ConfigClockSource+0x1d0>
 800b41c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b420:	f000 8089 	beq.w	800b536 <HAL_TIM_ConfigClockSource+0x1be>
 800b424:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b428:	f200 808e 	bhi.w	800b548 <HAL_TIM_ConfigClockSource+0x1d0>
 800b42c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b430:	d03e      	beq.n	800b4b0 <HAL_TIM_ConfigClockSource+0x138>
 800b432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b436:	f200 8087 	bhi.w	800b548 <HAL_TIM_ConfigClockSource+0x1d0>
 800b43a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b43e:	f000 8086 	beq.w	800b54e <HAL_TIM_ConfigClockSource+0x1d6>
 800b442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b446:	d87f      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x1d0>
 800b448:	2b70      	cmp	r3, #112	@ 0x70
 800b44a:	d01a      	beq.n	800b482 <HAL_TIM_ConfigClockSource+0x10a>
 800b44c:	2b70      	cmp	r3, #112	@ 0x70
 800b44e:	d87b      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x1d0>
 800b450:	2b60      	cmp	r3, #96	@ 0x60
 800b452:	d050      	beq.n	800b4f6 <HAL_TIM_ConfigClockSource+0x17e>
 800b454:	2b60      	cmp	r3, #96	@ 0x60
 800b456:	d877      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x1d0>
 800b458:	2b50      	cmp	r3, #80	@ 0x50
 800b45a:	d03c      	beq.n	800b4d6 <HAL_TIM_ConfigClockSource+0x15e>
 800b45c:	2b50      	cmp	r3, #80	@ 0x50
 800b45e:	d873      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x1d0>
 800b460:	2b40      	cmp	r3, #64	@ 0x40
 800b462:	d058      	beq.n	800b516 <HAL_TIM_ConfigClockSource+0x19e>
 800b464:	2b40      	cmp	r3, #64	@ 0x40
 800b466:	d86f      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x1d0>
 800b468:	2b30      	cmp	r3, #48	@ 0x30
 800b46a:	d064      	beq.n	800b536 <HAL_TIM_ConfigClockSource+0x1be>
 800b46c:	2b30      	cmp	r3, #48	@ 0x30
 800b46e:	d86b      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x1d0>
 800b470:	2b20      	cmp	r3, #32
 800b472:	d060      	beq.n	800b536 <HAL_TIM_ConfigClockSource+0x1be>
 800b474:	2b20      	cmp	r3, #32
 800b476:	d867      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x1d0>
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d05c      	beq.n	800b536 <HAL_TIM_ConfigClockSource+0x1be>
 800b47c:	2b10      	cmp	r3, #16
 800b47e:	d05a      	beq.n	800b536 <HAL_TIM_ConfigClockSource+0x1be>
 800b480:	e062      	b.n	800b548 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b492:	f000 fced 	bl	800be70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b4a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68ba      	ldr	r2, [r7, #8]
 800b4ac:	609a      	str	r2, [r3, #8]
      break;
 800b4ae:	e04f      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4c0:	f000 fcd6 	bl	800be70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689a      	ldr	r2, [r3, #8]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b4d2:	609a      	str	r2, [r3, #8]
      break;
 800b4d4:	e03c      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	f000 fc48 	bl	800bd78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2150      	movs	r1, #80	@ 0x50
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f000 fca1 	bl	800be36 <TIM_ITRx_SetConfig>
      break;
 800b4f4:	e02c      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b502:	461a      	mov	r2, r3
 800b504:	f000 fc67 	bl	800bdd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2160      	movs	r1, #96	@ 0x60
 800b50e:	4618      	mov	r0, r3
 800b510:	f000 fc91 	bl	800be36 <TIM_ITRx_SetConfig>
      break;
 800b514:	e01c      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b522:	461a      	mov	r2, r3
 800b524:	f000 fc28 	bl	800bd78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2140      	movs	r1, #64	@ 0x40
 800b52e:	4618      	mov	r0, r3
 800b530:	f000 fc81 	bl	800be36 <TIM_ITRx_SetConfig>
      break;
 800b534:	e00c      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4619      	mov	r1, r3
 800b540:	4610      	mov	r0, r2
 800b542:	f000 fc78 	bl	800be36 <TIM_ITRx_SetConfig>
      break;
 800b546:	e003      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800b548:	2301      	movs	r3, #1
 800b54a:	73fb      	strb	r3, [r7, #15]
      break;
 800b54c:	e000      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800b54e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2201      	movs	r2, #1
 800b554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b560:	7bfb      	ldrb	r3, [r7, #15]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	00100070 	.word	0x00100070
 800b570:	00100050 	.word	0x00100050
 800b574:	00100040 	.word	0x00100040
 800b578:	00100030 	.word	0x00100030
 800b57c:	00100020 	.word	0x00100020

0800b580 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b588:	bf00      	nop
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b59c:	bf00      	nop
 800b59e:	370c      	adds	r7, #12
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr

0800b5a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b5b0:	bf00      	nop
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr

0800b5bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b5c4:	bf00      	nop
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4a48      	ldr	r2, [pc, #288]	@ (800b704 <TIM_Base_SetConfig+0x134>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d013      	beq.n	800b610 <TIM_Base_SetConfig+0x40>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5ee:	d00f      	beq.n	800b610 <TIM_Base_SetConfig+0x40>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a45      	ldr	r2, [pc, #276]	@ (800b708 <TIM_Base_SetConfig+0x138>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d00b      	beq.n	800b610 <TIM_Base_SetConfig+0x40>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a44      	ldr	r2, [pc, #272]	@ (800b70c <TIM_Base_SetConfig+0x13c>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d007      	beq.n	800b610 <TIM_Base_SetConfig+0x40>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	4a43      	ldr	r2, [pc, #268]	@ (800b710 <TIM_Base_SetConfig+0x140>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d003      	beq.n	800b610 <TIM_Base_SetConfig+0x40>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a42      	ldr	r2, [pc, #264]	@ (800b714 <TIM_Base_SetConfig+0x144>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d108      	bne.n	800b622 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	68fa      	ldr	r2, [r7, #12]
 800b61e:	4313      	orrs	r3, r2
 800b620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4a37      	ldr	r2, [pc, #220]	@ (800b704 <TIM_Base_SetConfig+0x134>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d01f      	beq.n	800b66a <TIM_Base_SetConfig+0x9a>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b630:	d01b      	beq.n	800b66a <TIM_Base_SetConfig+0x9a>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a34      	ldr	r2, [pc, #208]	@ (800b708 <TIM_Base_SetConfig+0x138>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d017      	beq.n	800b66a <TIM_Base_SetConfig+0x9a>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a33      	ldr	r2, [pc, #204]	@ (800b70c <TIM_Base_SetConfig+0x13c>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d013      	beq.n	800b66a <TIM_Base_SetConfig+0x9a>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a32      	ldr	r2, [pc, #200]	@ (800b710 <TIM_Base_SetConfig+0x140>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d00f      	beq.n	800b66a <TIM_Base_SetConfig+0x9a>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4a32      	ldr	r2, [pc, #200]	@ (800b718 <TIM_Base_SetConfig+0x148>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d00b      	beq.n	800b66a <TIM_Base_SetConfig+0x9a>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4a31      	ldr	r2, [pc, #196]	@ (800b71c <TIM_Base_SetConfig+0x14c>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d007      	beq.n	800b66a <TIM_Base_SetConfig+0x9a>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4a30      	ldr	r2, [pc, #192]	@ (800b720 <TIM_Base_SetConfig+0x150>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d003      	beq.n	800b66a <TIM_Base_SetConfig+0x9a>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4a2b      	ldr	r2, [pc, #172]	@ (800b714 <TIM_Base_SetConfig+0x144>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d108      	bne.n	800b67c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	4313      	orrs	r3, r2
 800b67a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	695b      	ldr	r3, [r3, #20]
 800b686:	4313      	orrs	r3, r2
 800b688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	68fa      	ldr	r2, [r7, #12]
 800b68e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	689a      	ldr	r2, [r3, #8]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	4a18      	ldr	r2, [pc, #96]	@ (800b704 <TIM_Base_SetConfig+0x134>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d013      	beq.n	800b6d0 <TIM_Base_SetConfig+0x100>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4a19      	ldr	r2, [pc, #100]	@ (800b710 <TIM_Base_SetConfig+0x140>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d00f      	beq.n	800b6d0 <TIM_Base_SetConfig+0x100>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4a19      	ldr	r2, [pc, #100]	@ (800b718 <TIM_Base_SetConfig+0x148>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d00b      	beq.n	800b6d0 <TIM_Base_SetConfig+0x100>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a18      	ldr	r2, [pc, #96]	@ (800b71c <TIM_Base_SetConfig+0x14c>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d007      	beq.n	800b6d0 <TIM_Base_SetConfig+0x100>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a17      	ldr	r2, [pc, #92]	@ (800b720 <TIM_Base_SetConfig+0x150>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d003      	beq.n	800b6d0 <TIM_Base_SetConfig+0x100>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a12      	ldr	r2, [pc, #72]	@ (800b714 <TIM_Base_SetConfig+0x144>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d103      	bne.n	800b6d8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	691a      	ldr	r2, [r3, #16]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	691b      	ldr	r3, [r3, #16]
 800b6e2:	f003 0301 	and.w	r3, r3, #1
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d105      	bne.n	800b6f6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	691b      	ldr	r3, [r3, #16]
 800b6ee:	f023 0201 	bic.w	r2, r3, #1
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	611a      	str	r2, [r3, #16]
  }
}
 800b6f6:	bf00      	nop
 800b6f8:	3714      	adds	r7, #20
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	40012c00 	.word	0x40012c00
 800b708:	40000400 	.word	0x40000400
 800b70c:	40000800 	.word	0x40000800
 800b710:	40013400 	.word	0x40013400
 800b714:	40015000 	.word	0x40015000
 800b718:	40014000 	.word	0x40014000
 800b71c:	40014400 	.word	0x40014400
 800b720:	40014800 	.word	0x40014800

0800b724 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b724:	b480      	push	{r7}
 800b726:	b087      	sub	sp, #28
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6a1b      	ldr	r3, [r3, #32]
 800b738:	f023 0201 	bic.w	r2, r3, #1
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	699b      	ldr	r3, [r3, #24]
 800b74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f023 0303 	bic.w	r3, r3, #3
 800b75e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	68fa      	ldr	r2, [r7, #12]
 800b766:	4313      	orrs	r3, r2
 800b768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	f023 0302 	bic.w	r3, r3, #2
 800b770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	697a      	ldr	r2, [r7, #20]
 800b778:	4313      	orrs	r3, r2
 800b77a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4a30      	ldr	r2, [pc, #192]	@ (800b840 <TIM_OC1_SetConfig+0x11c>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d013      	beq.n	800b7ac <TIM_OC1_SetConfig+0x88>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a2f      	ldr	r2, [pc, #188]	@ (800b844 <TIM_OC1_SetConfig+0x120>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d00f      	beq.n	800b7ac <TIM_OC1_SetConfig+0x88>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4a2e      	ldr	r2, [pc, #184]	@ (800b848 <TIM_OC1_SetConfig+0x124>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d00b      	beq.n	800b7ac <TIM_OC1_SetConfig+0x88>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4a2d      	ldr	r2, [pc, #180]	@ (800b84c <TIM_OC1_SetConfig+0x128>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d007      	beq.n	800b7ac <TIM_OC1_SetConfig+0x88>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a2c      	ldr	r2, [pc, #176]	@ (800b850 <TIM_OC1_SetConfig+0x12c>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d003      	beq.n	800b7ac <TIM_OC1_SetConfig+0x88>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4a2b      	ldr	r2, [pc, #172]	@ (800b854 <TIM_OC1_SetConfig+0x130>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d10c      	bne.n	800b7c6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	f023 0308 	bic.w	r3, r3, #8
 800b7b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	697a      	ldr	r2, [r7, #20]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	f023 0304 	bic.w	r3, r3, #4
 800b7c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4a1d      	ldr	r2, [pc, #116]	@ (800b840 <TIM_OC1_SetConfig+0x11c>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d013      	beq.n	800b7f6 <TIM_OC1_SetConfig+0xd2>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4a1c      	ldr	r2, [pc, #112]	@ (800b844 <TIM_OC1_SetConfig+0x120>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d00f      	beq.n	800b7f6 <TIM_OC1_SetConfig+0xd2>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a1b      	ldr	r2, [pc, #108]	@ (800b848 <TIM_OC1_SetConfig+0x124>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d00b      	beq.n	800b7f6 <TIM_OC1_SetConfig+0xd2>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a1a      	ldr	r2, [pc, #104]	@ (800b84c <TIM_OC1_SetConfig+0x128>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d007      	beq.n	800b7f6 <TIM_OC1_SetConfig+0xd2>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a19      	ldr	r2, [pc, #100]	@ (800b850 <TIM_OC1_SetConfig+0x12c>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d003      	beq.n	800b7f6 <TIM_OC1_SetConfig+0xd2>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a18      	ldr	r2, [pc, #96]	@ (800b854 <TIM_OC1_SetConfig+0x130>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d111      	bne.n	800b81a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	695b      	ldr	r3, [r3, #20]
 800b80a:	693a      	ldr	r2, [r7, #16]
 800b80c:	4313      	orrs	r3, r2
 800b80e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	699b      	ldr	r3, [r3, #24]
 800b814:	693a      	ldr	r2, [r7, #16]
 800b816:	4313      	orrs	r3, r2
 800b818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	693a      	ldr	r2, [r7, #16]
 800b81e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	685a      	ldr	r2, [r3, #4]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	697a      	ldr	r2, [r7, #20]
 800b832:	621a      	str	r2, [r3, #32]
}
 800b834:	bf00      	nop
 800b836:	371c      	adds	r7, #28
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr
 800b840:	40012c00 	.word	0x40012c00
 800b844:	40013400 	.word	0x40013400
 800b848:	40014000 	.word	0x40014000
 800b84c:	40014400 	.word	0x40014400
 800b850:	40014800 	.word	0x40014800
 800b854:	40015000 	.word	0x40015000

0800b858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b858:	b480      	push	{r7}
 800b85a:	b087      	sub	sp, #28
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6a1b      	ldr	r3, [r3, #32]
 800b866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6a1b      	ldr	r3, [r3, #32]
 800b86c:	f023 0210 	bic.w	r2, r3, #16
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	699b      	ldr	r3, [r3, #24]
 800b87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b88a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	021b      	lsls	r3, r3, #8
 800b89a:	68fa      	ldr	r2, [r7, #12]
 800b89c:	4313      	orrs	r3, r2
 800b89e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	f023 0320 	bic.w	r3, r3, #32
 800b8a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	011b      	lsls	r3, r3, #4
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	4a2c      	ldr	r2, [pc, #176]	@ (800b968 <TIM_OC2_SetConfig+0x110>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d007      	beq.n	800b8cc <TIM_OC2_SetConfig+0x74>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4a2b      	ldr	r2, [pc, #172]	@ (800b96c <TIM_OC2_SetConfig+0x114>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d003      	beq.n	800b8cc <TIM_OC2_SetConfig+0x74>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a2a      	ldr	r2, [pc, #168]	@ (800b970 <TIM_OC2_SetConfig+0x118>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d10d      	bne.n	800b8e8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	011b      	lsls	r3, r3, #4
 800b8da:	697a      	ldr	r2, [r7, #20]
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a1f      	ldr	r2, [pc, #124]	@ (800b968 <TIM_OC2_SetConfig+0x110>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d013      	beq.n	800b918 <TIM_OC2_SetConfig+0xc0>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a1e      	ldr	r2, [pc, #120]	@ (800b96c <TIM_OC2_SetConfig+0x114>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d00f      	beq.n	800b918 <TIM_OC2_SetConfig+0xc0>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a1e      	ldr	r2, [pc, #120]	@ (800b974 <TIM_OC2_SetConfig+0x11c>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d00b      	beq.n	800b918 <TIM_OC2_SetConfig+0xc0>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a1d      	ldr	r2, [pc, #116]	@ (800b978 <TIM_OC2_SetConfig+0x120>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d007      	beq.n	800b918 <TIM_OC2_SetConfig+0xc0>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a1c      	ldr	r2, [pc, #112]	@ (800b97c <TIM_OC2_SetConfig+0x124>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d003      	beq.n	800b918 <TIM_OC2_SetConfig+0xc0>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a17      	ldr	r2, [pc, #92]	@ (800b970 <TIM_OC2_SetConfig+0x118>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d113      	bne.n	800b940 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b91e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b926:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	695b      	ldr	r3, [r3, #20]
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	693a      	ldr	r2, [r7, #16]
 800b930:	4313      	orrs	r3, r2
 800b932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	699b      	ldr	r3, [r3, #24]
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	693a      	ldr	r2, [r7, #16]
 800b93c:	4313      	orrs	r3, r2
 800b93e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	693a      	ldr	r2, [r7, #16]
 800b944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	685a      	ldr	r2, [r3, #4]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	697a      	ldr	r2, [r7, #20]
 800b958:	621a      	str	r2, [r3, #32]
}
 800b95a:	bf00      	nop
 800b95c:	371c      	adds	r7, #28
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	40012c00 	.word	0x40012c00
 800b96c:	40013400 	.word	0x40013400
 800b970:	40015000 	.word	0x40015000
 800b974:	40014000 	.word	0x40014000
 800b978:	40014400 	.word	0x40014400
 800b97c:	40014800 	.word	0x40014800

0800b980 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b980:	b480      	push	{r7}
 800b982:	b087      	sub	sp, #28
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a1b      	ldr	r3, [r3, #32]
 800b98e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6a1b      	ldr	r3, [r3, #32]
 800b994:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	69db      	ldr	r3, [r3, #28]
 800b9a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b9ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f023 0303 	bic.w	r3, r3, #3
 800b9ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b9cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	689b      	ldr	r3, [r3, #8]
 800b9d2:	021b      	lsls	r3, r3, #8
 800b9d4:	697a      	ldr	r2, [r7, #20]
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a2b      	ldr	r2, [pc, #172]	@ (800ba8c <TIM_OC3_SetConfig+0x10c>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d007      	beq.n	800b9f2 <TIM_OC3_SetConfig+0x72>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a2a      	ldr	r2, [pc, #168]	@ (800ba90 <TIM_OC3_SetConfig+0x110>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d003      	beq.n	800b9f2 <TIM_OC3_SetConfig+0x72>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4a29      	ldr	r2, [pc, #164]	@ (800ba94 <TIM_OC3_SetConfig+0x114>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d10d      	bne.n	800ba0e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b9f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	68db      	ldr	r3, [r3, #12]
 800b9fe:	021b      	lsls	r3, r3, #8
 800ba00:	697a      	ldr	r2, [r7, #20]
 800ba02:	4313      	orrs	r3, r2
 800ba04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ba0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	4a1e      	ldr	r2, [pc, #120]	@ (800ba8c <TIM_OC3_SetConfig+0x10c>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d013      	beq.n	800ba3e <TIM_OC3_SetConfig+0xbe>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	4a1d      	ldr	r2, [pc, #116]	@ (800ba90 <TIM_OC3_SetConfig+0x110>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d00f      	beq.n	800ba3e <TIM_OC3_SetConfig+0xbe>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	4a1d      	ldr	r2, [pc, #116]	@ (800ba98 <TIM_OC3_SetConfig+0x118>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d00b      	beq.n	800ba3e <TIM_OC3_SetConfig+0xbe>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4a1c      	ldr	r2, [pc, #112]	@ (800ba9c <TIM_OC3_SetConfig+0x11c>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d007      	beq.n	800ba3e <TIM_OC3_SetConfig+0xbe>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4a1b      	ldr	r2, [pc, #108]	@ (800baa0 <TIM_OC3_SetConfig+0x120>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d003      	beq.n	800ba3e <TIM_OC3_SetConfig+0xbe>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	4a16      	ldr	r2, [pc, #88]	@ (800ba94 <TIM_OC3_SetConfig+0x114>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d113      	bne.n	800ba66 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ba4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	695b      	ldr	r3, [r3, #20]
 800ba52:	011b      	lsls	r3, r3, #4
 800ba54:	693a      	ldr	r2, [r7, #16]
 800ba56:	4313      	orrs	r3, r2
 800ba58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	699b      	ldr	r3, [r3, #24]
 800ba5e:	011b      	lsls	r3, r3, #4
 800ba60:	693a      	ldr	r2, [r7, #16]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	693a      	ldr	r2, [r7, #16]
 800ba6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	68fa      	ldr	r2, [r7, #12]
 800ba70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	685a      	ldr	r2, [r3, #4]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	697a      	ldr	r2, [r7, #20]
 800ba7e:	621a      	str	r2, [r3, #32]
}
 800ba80:	bf00      	nop
 800ba82:	371c      	adds	r7, #28
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr
 800ba8c:	40012c00 	.word	0x40012c00
 800ba90:	40013400 	.word	0x40013400
 800ba94:	40015000 	.word	0x40015000
 800ba98:	40014000 	.word	0x40014000
 800ba9c:	40014400 	.word	0x40014400
 800baa0:	40014800 	.word	0x40014800

0800baa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b087      	sub	sp, #28
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a1b      	ldr	r3, [r3, #32]
 800bab2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a1b      	ldr	r3, [r3, #32]
 800bab8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	69db      	ldr	r3, [r3, #28]
 800baca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	021b      	lsls	r3, r3, #8
 800bae6:	68fa      	ldr	r2, [r7, #12]
 800bae8:	4313      	orrs	r3, r2
 800baea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800baf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	031b      	lsls	r3, r3, #12
 800bafa:	697a      	ldr	r2, [r7, #20]
 800bafc:	4313      	orrs	r3, r2
 800bafe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a2c      	ldr	r2, [pc, #176]	@ (800bbb4 <TIM_OC4_SetConfig+0x110>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d007      	beq.n	800bb18 <TIM_OC4_SetConfig+0x74>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a2b      	ldr	r2, [pc, #172]	@ (800bbb8 <TIM_OC4_SetConfig+0x114>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d003      	beq.n	800bb18 <TIM_OC4_SetConfig+0x74>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4a2a      	ldr	r2, [pc, #168]	@ (800bbbc <TIM_OC4_SetConfig+0x118>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d10d      	bne.n	800bb34 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bb1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	031b      	lsls	r3, r3, #12
 800bb26:	697a      	ldr	r2, [r7, #20]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bb32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4a1f      	ldr	r2, [pc, #124]	@ (800bbb4 <TIM_OC4_SetConfig+0x110>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d013      	beq.n	800bb64 <TIM_OC4_SetConfig+0xc0>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4a1e      	ldr	r2, [pc, #120]	@ (800bbb8 <TIM_OC4_SetConfig+0x114>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d00f      	beq.n	800bb64 <TIM_OC4_SetConfig+0xc0>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	4a1e      	ldr	r2, [pc, #120]	@ (800bbc0 <TIM_OC4_SetConfig+0x11c>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d00b      	beq.n	800bb64 <TIM_OC4_SetConfig+0xc0>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4a1d      	ldr	r2, [pc, #116]	@ (800bbc4 <TIM_OC4_SetConfig+0x120>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d007      	beq.n	800bb64 <TIM_OC4_SetConfig+0xc0>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	4a1c      	ldr	r2, [pc, #112]	@ (800bbc8 <TIM_OC4_SetConfig+0x124>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d003      	beq.n	800bb64 <TIM_OC4_SetConfig+0xc0>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	4a17      	ldr	r2, [pc, #92]	@ (800bbbc <TIM_OC4_SetConfig+0x118>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d113      	bne.n	800bb8c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bb6a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bb72:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	695b      	ldr	r3, [r3, #20]
 800bb78:	019b      	lsls	r3, r3, #6
 800bb7a:	693a      	ldr	r2, [r7, #16]
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	699b      	ldr	r3, [r3, #24]
 800bb84:	019b      	lsls	r3, r3, #6
 800bb86:	693a      	ldr	r2, [r7, #16]
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	693a      	ldr	r2, [r7, #16]
 800bb90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	68fa      	ldr	r2, [r7, #12]
 800bb96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	685a      	ldr	r2, [r3, #4]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	697a      	ldr	r2, [r7, #20]
 800bba4:	621a      	str	r2, [r3, #32]
}
 800bba6:	bf00      	nop
 800bba8:	371c      	adds	r7, #28
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr
 800bbb2:	bf00      	nop
 800bbb4:	40012c00 	.word	0x40012c00
 800bbb8:	40013400 	.word	0x40013400
 800bbbc:	40015000 	.word	0x40015000
 800bbc0:	40014000 	.word	0x40014000
 800bbc4:	40014400 	.word	0x40014400
 800bbc8:	40014800 	.word	0x40014800

0800bbcc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b087      	sub	sp, #28
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6a1b      	ldr	r3, [r3, #32]
 800bbda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6a1b      	ldr	r3, [r3, #32]
 800bbe0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bbfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	68fa      	ldr	r2, [r7, #12]
 800bc06:	4313      	orrs	r3, r2
 800bc08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bc10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	041b      	lsls	r3, r3, #16
 800bc18:	693a      	ldr	r2, [r7, #16]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	4a19      	ldr	r2, [pc, #100]	@ (800bc88 <TIM_OC5_SetConfig+0xbc>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d013      	beq.n	800bc4e <TIM_OC5_SetConfig+0x82>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	4a18      	ldr	r2, [pc, #96]	@ (800bc8c <TIM_OC5_SetConfig+0xc0>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d00f      	beq.n	800bc4e <TIM_OC5_SetConfig+0x82>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a17      	ldr	r2, [pc, #92]	@ (800bc90 <TIM_OC5_SetConfig+0xc4>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d00b      	beq.n	800bc4e <TIM_OC5_SetConfig+0x82>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	4a16      	ldr	r2, [pc, #88]	@ (800bc94 <TIM_OC5_SetConfig+0xc8>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d007      	beq.n	800bc4e <TIM_OC5_SetConfig+0x82>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	4a15      	ldr	r2, [pc, #84]	@ (800bc98 <TIM_OC5_SetConfig+0xcc>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d003      	beq.n	800bc4e <TIM_OC5_SetConfig+0x82>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	4a14      	ldr	r2, [pc, #80]	@ (800bc9c <TIM_OC5_SetConfig+0xd0>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d109      	bne.n	800bc62 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	695b      	ldr	r3, [r3, #20]
 800bc5a:	021b      	lsls	r3, r3, #8
 800bc5c:	697a      	ldr	r2, [r7, #20]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	697a      	ldr	r2, [r7, #20]
 800bc66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	685a      	ldr	r2, [r3, #4]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	693a      	ldr	r2, [r7, #16]
 800bc7a:	621a      	str	r2, [r3, #32]
}
 800bc7c:	bf00      	nop
 800bc7e:	371c      	adds	r7, #28
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr
 800bc88:	40012c00 	.word	0x40012c00
 800bc8c:	40013400 	.word	0x40013400
 800bc90:	40014000 	.word	0x40014000
 800bc94:	40014400 	.word	0x40014400
 800bc98:	40014800 	.word	0x40014800
 800bc9c:	40015000 	.word	0x40015000

0800bca0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b087      	sub	sp, #28
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6a1b      	ldr	r3, [r3, #32]
 800bcae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6a1b      	ldr	r3, [r3, #32]
 800bcb4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bcce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bcd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	021b      	lsls	r3, r3, #8
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	051b      	lsls	r3, r3, #20
 800bcee:	693a      	ldr	r2, [r7, #16]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4a1a      	ldr	r2, [pc, #104]	@ (800bd60 <TIM_OC6_SetConfig+0xc0>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d013      	beq.n	800bd24 <TIM_OC6_SetConfig+0x84>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4a19      	ldr	r2, [pc, #100]	@ (800bd64 <TIM_OC6_SetConfig+0xc4>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d00f      	beq.n	800bd24 <TIM_OC6_SetConfig+0x84>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a18      	ldr	r2, [pc, #96]	@ (800bd68 <TIM_OC6_SetConfig+0xc8>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d00b      	beq.n	800bd24 <TIM_OC6_SetConfig+0x84>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a17      	ldr	r2, [pc, #92]	@ (800bd6c <TIM_OC6_SetConfig+0xcc>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d007      	beq.n	800bd24 <TIM_OC6_SetConfig+0x84>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a16      	ldr	r2, [pc, #88]	@ (800bd70 <TIM_OC6_SetConfig+0xd0>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d003      	beq.n	800bd24 <TIM_OC6_SetConfig+0x84>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a15      	ldr	r2, [pc, #84]	@ (800bd74 <TIM_OC6_SetConfig+0xd4>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d109      	bne.n	800bd38 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bd2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	695b      	ldr	r3, [r3, #20]
 800bd30:	029b      	lsls	r3, r3, #10
 800bd32:	697a      	ldr	r2, [r7, #20]
 800bd34:	4313      	orrs	r3, r2
 800bd36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	697a      	ldr	r2, [r7, #20]
 800bd3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	68fa      	ldr	r2, [r7, #12]
 800bd42:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	685a      	ldr	r2, [r3, #4]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	693a      	ldr	r2, [r7, #16]
 800bd50:	621a      	str	r2, [r3, #32]
}
 800bd52:	bf00      	nop
 800bd54:	371c      	adds	r7, #28
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop
 800bd60:	40012c00 	.word	0x40012c00
 800bd64:	40013400 	.word	0x40013400
 800bd68:	40014000 	.word	0x40014000
 800bd6c:	40014400 	.word	0x40014400
 800bd70:	40014800 	.word	0x40014800
 800bd74:	40015000 	.word	0x40015000

0800bd78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b087      	sub	sp, #28
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	6a1b      	ldr	r3, [r3, #32]
 800bd88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	6a1b      	ldr	r3, [r3, #32]
 800bd8e:	f023 0201 	bic.w	r2, r3, #1
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	699b      	ldr	r3, [r3, #24]
 800bd9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bda2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	011b      	lsls	r3, r3, #4
 800bda8:	693a      	ldr	r2, [r7, #16]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	f023 030a 	bic.w	r3, r3, #10
 800bdb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bdb6:	697a      	ldr	r2, [r7, #20]
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	693a      	ldr	r2, [r7, #16]
 800bdc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	697a      	ldr	r2, [r7, #20]
 800bdc8:	621a      	str	r2, [r3, #32]
}
 800bdca:	bf00      	nop
 800bdcc:	371c      	adds	r7, #28
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr

0800bdd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bdd6:	b480      	push	{r7}
 800bdd8:	b087      	sub	sp, #28
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	60f8      	str	r0, [r7, #12]
 800bdde:	60b9      	str	r1, [r7, #8]
 800bde0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	6a1b      	ldr	r3, [r3, #32]
 800bde6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6a1b      	ldr	r3, [r3, #32]
 800bdec:	f023 0210 	bic.w	r2, r3, #16
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	699b      	ldr	r3, [r3, #24]
 800bdf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800be00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	031b      	lsls	r3, r3, #12
 800be06:	693a      	ldr	r2, [r7, #16]
 800be08:	4313      	orrs	r3, r2
 800be0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800be12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	011b      	lsls	r3, r3, #4
 800be18:	697a      	ldr	r2, [r7, #20]
 800be1a:	4313      	orrs	r3, r2
 800be1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	693a      	ldr	r2, [r7, #16]
 800be22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	697a      	ldr	r2, [r7, #20]
 800be28:	621a      	str	r2, [r3, #32]
}
 800be2a:	bf00      	nop
 800be2c:	371c      	adds	r7, #28
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr

0800be36 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800be36:	b480      	push	{r7}
 800be38:	b085      	sub	sp, #20
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
 800be3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800be4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be52:	683a      	ldr	r2, [r7, #0]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	4313      	orrs	r3, r2
 800be58:	f043 0307 	orr.w	r3, r3, #7
 800be5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	68fa      	ldr	r2, [r7, #12]
 800be62:	609a      	str	r2, [r3, #8]
}
 800be64:	bf00      	nop
 800be66:	3714      	adds	r7, #20
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr

0800be70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be70:	b480      	push	{r7}
 800be72:	b087      	sub	sp, #28
 800be74:	af00      	add	r7, sp, #0
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	60b9      	str	r1, [r7, #8]
 800be7a:	607a      	str	r2, [r7, #4]
 800be7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800be8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	021a      	lsls	r2, r3, #8
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	431a      	orrs	r2, r3
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	4313      	orrs	r3, r2
 800be98:	697a      	ldr	r2, [r7, #20]
 800be9a:	4313      	orrs	r3, r2
 800be9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	697a      	ldr	r2, [r7, #20]
 800bea2:	609a      	str	r2, [r3, #8]
}
 800bea4:	bf00      	nop
 800bea6:	371c      	adds	r7, #28
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b087      	sub	sp, #28
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	f003 031f 	and.w	r3, r3, #31
 800bec2:	2201      	movs	r2, #1
 800bec4:	fa02 f303 	lsl.w	r3, r2, r3
 800bec8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6a1a      	ldr	r2, [r3, #32]
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	43db      	mvns	r3, r3
 800bed2:	401a      	ands	r2, r3
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6a1a      	ldr	r2, [r3, #32]
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	f003 031f 	and.w	r3, r3, #31
 800bee2:	6879      	ldr	r1, [r7, #4]
 800bee4:	fa01 f303 	lsl.w	r3, r1, r3
 800bee8:	431a      	orrs	r2, r3
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	621a      	str	r2, [r3, #32]
}
 800beee:	bf00      	nop
 800bef0:	371c      	adds	r7, #28
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr
	...

0800befc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800befc:	b480      	push	{r7}
 800befe:	b085      	sub	sp, #20
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d101      	bne.n	800bf14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf10:	2302      	movs	r3, #2
 800bf12:	e06f      	b.n	800bff4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2201      	movs	r2, #1
 800bf18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2202      	movs	r2, #2
 800bf20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	689b      	ldr	r3, [r3, #8]
 800bf32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a31      	ldr	r2, [pc, #196]	@ (800c000 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d009      	beq.n	800bf52 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4a30      	ldr	r2, [pc, #192]	@ (800c004 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d004      	beq.n	800bf52 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a2e      	ldr	r2, [pc, #184]	@ (800c008 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d108      	bne.n	800bf64 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bf58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bf6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	4313      	orrs	r3, r2
 800bf78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68fa      	ldr	r2, [r7, #12]
 800bf80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a1e      	ldr	r2, [pc, #120]	@ (800c000 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d01d      	beq.n	800bfc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf94:	d018      	beq.n	800bfc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a1c      	ldr	r2, [pc, #112]	@ (800c00c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d013      	beq.n	800bfc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a1a      	ldr	r2, [pc, #104]	@ (800c010 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d00e      	beq.n	800bfc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4a15      	ldr	r2, [pc, #84]	@ (800c004 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d009      	beq.n	800bfc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4a16      	ldr	r2, [pc, #88]	@ (800c014 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d004      	beq.n	800bfc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a11      	ldr	r2, [pc, #68]	@ (800c008 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d10c      	bne.n	800bfe2 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bfce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	68ba      	ldr	r2, [r7, #8]
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68ba      	ldr	r2, [r7, #8]
 800bfe0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bff2:	2300      	movs	r3, #0
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3714      	adds	r7, #20
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr
 800c000:	40012c00 	.word	0x40012c00
 800c004:	40013400 	.word	0x40013400
 800c008:	40015000 	.word	0x40015000
 800c00c:	40000400 	.word	0x40000400
 800c010:	40000800 	.word	0x40000800
 800c014:	40014000 	.word	0x40014000

0800c018 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c018:	b480      	push	{r7}
 800c01a:	b085      	sub	sp, #20
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c022:	2300      	movs	r3, #0
 800c024:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d101      	bne.n	800c034 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c030:	2302      	movs	r3, #2
 800c032:	e078      	b.n	800c126 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2201      	movs	r2, #1
 800c038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	4313      	orrs	r3, r2
 800c048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	689b      	ldr	r3, [r3, #8]
 800c054:	4313      	orrs	r3, r2
 800c056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	4313      	orrs	r3, r2
 800c064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4313      	orrs	r3, r2
 800c072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	691b      	ldr	r3, [r3, #16]
 800c07e:	4313      	orrs	r3, r2
 800c080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	695b      	ldr	r3, [r3, #20]
 800c08c:	4313      	orrs	r3, r2
 800c08e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c09a:	4313      	orrs	r3, r2
 800c09c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	699b      	ldr	r3, [r3, #24]
 800c0a8:	041b      	lsls	r3, r3, #16
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	69db      	ldr	r3, [r3, #28]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a1c      	ldr	r2, [pc, #112]	@ (800c134 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d009      	beq.n	800c0da <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a1b      	ldr	r2, [pc, #108]	@ (800c138 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d004      	beq.n	800c0da <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a19      	ldr	r2, [pc, #100]	@ (800c13c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d11c      	bne.n	800c114 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0e4:	051b      	lsls	r3, r3, #20
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	6a1b      	ldr	r3, [r3, #32]
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c102:	4313      	orrs	r3, r2
 800c104:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c110:	4313      	orrs	r3, r2
 800c112:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c124:	2300      	movs	r3, #0
}
 800c126:	4618      	mov	r0, r3
 800c128:	3714      	adds	r7, #20
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop
 800c134:	40012c00 	.word	0x40012c00
 800c138:	40013400 	.word	0x40013400
 800c13c:	40015000 	.word	0x40015000

0800c140 <HAL_TIMEx_ConfigEncoderIndex>:
  * @param  sEncoderIndexConfig Encoder index configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigEncoderIndex(TIM_HandleTypeDef *htim,
                                               TIMEx_EncoderIndexConfigTypeDef *sEncoderIndexConfig)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
  assert_param(IS_FUNCTIONAL_STATE(sEncoderIndexConfig->FirstIndexEnable));
  assert_param(IS_TIM_ENCODERINDEX_POSITION(sEncoderIndexConfig->Position));
  assert_param(IS_TIM_ENCODERINDEX_DIRECTION(sEncoderIndexConfig->Direction));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c150:	2b01      	cmp	r3, #1
 800c152:	d101      	bne.n	800c158 <HAL_TIMEx_ConfigEncoderIndex+0x18>
 800c154:	2302      	movs	r3, #2
 800c156:	e02a      	b.n	800c1ae <HAL_TIMEx_ConfigEncoderIndex+0x6e>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2201      	movs	r2, #1
 800c15c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Configures the TIMx External Trigger (ETR) which is used as Index input */
  TIM_ETR_SetConfig(htim->Instance,
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6818      	ldr	r0, [r3, #0]
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	6859      	ldr	r1, [r3, #4]
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	f7ff fe7e 	bl	800be70 <TIM_ETR_SetConfig>
                    sEncoderIndexConfig->Prescaler,
                    sEncoderIndexConfig->Polarity,
                    sEncoderIndexConfig->Filter);

  /* Configures the encoder index */
  MODIFY_REG(htim->Instance->ECR,
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c17a:	f023 02e6 	bic.w	r2, r3, #230	@ 0xe6
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	695b      	ldr	r3, [r3, #20]
 800c182:	6839      	ldr	r1, [r7, #0]
 800c184:	7b09      	ldrb	r1, [r1, #12]
 800c186:	2901      	cmp	r1, #1
 800c188:	d101      	bne.n	800c18e <HAL_TIMEx_ConfigEncoderIndex+0x4e>
 800c18a:	2120      	movs	r1, #32
 800c18c:	e000      	b.n	800c190 <HAL_TIMEx_ConfigEncoderIndex+0x50>
 800c18e:	2100      	movs	r1, #0
 800c190:	4319      	orrs	r1, r3
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	691b      	ldr	r3, [r3, #16]
 800c196:	430b      	orrs	r3, r1
 800c198:	431a      	orrs	r2, r3
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f042 0201 	orr.w	r2, r2, #1
 800c1a2:	659a      	str	r2, [r3, #88]	@ 0x58
             (sEncoderIndexConfig->Direction |
              ((sEncoderIndexConfig->FirstIndexEnable == ENABLE) ? (0x1U << TIM_ECR_FIDX_Pos) : 0U) |
              sEncoderIndexConfig->Position |
              TIM_ECR_IE));

  __HAL_UNLOCK(htim);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3708      	adds	r7, #8
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c1b6:	b480      	push	{r7}
 800c1b8:	b083      	sub	sp, #12
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c1be:	bf00      	nop
 800c1c0:	370c      	adds	r7, #12
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr

0800c1ca <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c1ca:	b480      	push	{r7}
 800c1cc:	b083      	sub	sp, #12
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c1d2:	bf00      	nop
 800c1d4:	370c      	adds	r7, #12
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr

0800c1de <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c1de:	b480      	push	{r7}
 800c1e0:	b083      	sub	sp, #12
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c1e6:	bf00      	nop
 800c1e8:	370c      	adds	r7, #12
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr

0800c1f2 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c1f2:	b480      	push	{r7}
 800c1f4:	b083      	sub	sp, #12
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c1fa:	bf00      	nop
 800c1fc:	370c      	adds	r7, #12
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c206:	b480      	push	{r7}
 800c208:	b083      	sub	sp, #12
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c20e:	bf00      	nop
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr

0800c21a <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c21a:	b480      	push	{r7}
 800c21c:	b083      	sub	sp, #12
 800c21e:	af00      	add	r7, sp, #0
 800c220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c222:	bf00      	nop
 800c224:	370c      	adds	r7, #12
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr

0800c22e <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c22e:	b480      	push	{r7}
 800c230:	b083      	sub	sp, #12
 800c232:	af00      	add	r7, sp, #0
 800c234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c236:	bf00      	nop
 800c238:	370c      	adds	r7, #12
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr

0800c242 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c242:	b580      	push	{r7, lr}
 800c244:	b082      	sub	sp, #8
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d101      	bne.n	800c254 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c250:	2301      	movs	r3, #1
 800c252:	e042      	b.n	800c2da <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d106      	bne.n	800c26c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f7f6 fb6a 	bl	8002940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2224      	movs	r2, #36	@ 0x24
 800c270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	681a      	ldr	r2, [r3, #0]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f022 0201 	bic.w	r2, r2, #1
 800c282:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d002      	beq.n	800c292 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 ffdd 	bl	800d24c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 fcde 	bl	800cc54 <UART_SetConfig>
 800c298:	4603      	mov	r3, r0
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d101      	bne.n	800c2a2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e01b      	b.n	800c2da <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	685a      	ldr	r2, [r3, #4]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c2b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	689a      	ldr	r2, [r3, #8]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c2c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	681a      	ldr	r2, [r3, #0]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f042 0201 	orr.w	r2, r2, #1
 800c2d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f001 f85c 	bl	800d390 <UART_CheckIdleState>
 800c2d8:	4603      	mov	r3, r0
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3708      	adds	r7, #8
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b08a      	sub	sp, #40	@ 0x28
 800c2e6:	af02      	add	r7, sp, #8
 800c2e8:	60f8      	str	r0, [r7, #12]
 800c2ea:	60b9      	str	r1, [r7, #8]
 800c2ec:	603b      	str	r3, [r7, #0]
 800c2ee:	4613      	mov	r3, r2
 800c2f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2f8:	2b20      	cmp	r3, #32
 800c2fa:	d17b      	bne.n	800c3f4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d002      	beq.n	800c308 <HAL_UART_Transmit+0x26>
 800c302:	88fb      	ldrh	r3, [r7, #6]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d101      	bne.n	800c30c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c308:	2301      	movs	r3, #1
 800c30a:	e074      	b.n	800c3f6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2200      	movs	r2, #0
 800c310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2221      	movs	r2, #33	@ 0x21
 800c318:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c31c:	f7f7 ff88 	bl	8004230 <HAL_GetTick>
 800c320:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	88fa      	ldrh	r2, [r7, #6]
 800c326:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	88fa      	ldrh	r2, [r7, #6]
 800c32e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c33a:	d108      	bne.n	800c34e <HAL_UART_Transmit+0x6c>
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	691b      	ldr	r3, [r3, #16]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d104      	bne.n	800c34e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c344:	2300      	movs	r3, #0
 800c346:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	61bb      	str	r3, [r7, #24]
 800c34c:	e003      	b.n	800c356 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c352:	2300      	movs	r3, #0
 800c354:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c356:	e030      	b.n	800c3ba <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	9300      	str	r3, [sp, #0]
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	2200      	movs	r2, #0
 800c360:	2180      	movs	r1, #128	@ 0x80
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	f001 f8be 	bl	800d4e4 <UART_WaitOnFlagUntilTimeout>
 800c368:	4603      	mov	r3, r0
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d005      	beq.n	800c37a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2220      	movs	r2, #32
 800c372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c376:	2303      	movs	r3, #3
 800c378:	e03d      	b.n	800c3f6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c37a:	69fb      	ldr	r3, [r7, #28]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10b      	bne.n	800c398 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c380:	69bb      	ldr	r3, [r7, #24]
 800c382:	881b      	ldrh	r3, [r3, #0]
 800c384:	461a      	mov	r2, r3
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c38e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	3302      	adds	r3, #2
 800c394:	61bb      	str	r3, [r7, #24]
 800c396:	e007      	b.n	800c3a8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	781a      	ldrb	r2, [r3, #0]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	3b01      	subs	r3, #1
 800c3b2:	b29a      	uxth	r2, r3
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d1c8      	bne.n	800c358 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	2140      	movs	r1, #64	@ 0x40
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	f001 f887 	bl	800d4e4 <UART_WaitOnFlagUntilTimeout>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d005      	beq.n	800c3e8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2220      	movs	r2, #32
 800c3e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c3e4:	2303      	movs	r3, #3
 800c3e6:	e006      	b.n	800c3f6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2220      	movs	r2, #32
 800c3ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	e000      	b.n	800c3f6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c3f4:	2302      	movs	r3, #2
  }
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3720      	adds	r7, #32
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b08a      	sub	sp, #40	@ 0x28
 800c402:	af02      	add	r7, sp, #8
 800c404:	60f8      	str	r0, [r7, #12]
 800c406:	60b9      	str	r1, [r7, #8]
 800c408:	603b      	str	r3, [r7, #0]
 800c40a:	4613      	mov	r3, r2
 800c40c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c414:	2b20      	cmp	r3, #32
 800c416:	f040 80b5 	bne.w	800c584 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d002      	beq.n	800c426 <HAL_UART_Receive+0x28>
 800c420:	88fb      	ldrh	r3, [r7, #6]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d101      	bne.n	800c42a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800c426:	2301      	movs	r3, #1
 800c428:	e0ad      	b.n	800c586 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2200      	movs	r2, #0
 800c42e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2222      	movs	r2, #34	@ 0x22
 800c436:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2200      	movs	r2, #0
 800c43e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c440:	f7f7 fef6 	bl	8004230 <HAL_GetTick>
 800c444:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	88fa      	ldrh	r2, [r7, #6]
 800c44a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	88fa      	ldrh	r2, [r7, #6]
 800c452:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	689b      	ldr	r3, [r3, #8]
 800c45a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c45e:	d10e      	bne.n	800c47e <HAL_UART_Receive+0x80>
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	691b      	ldr	r3, [r3, #16]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d105      	bne.n	800c474 <HAL_UART_Receive+0x76>
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c46e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c472:	e02d      	b.n	800c4d0 <HAL_UART_Receive+0xd2>
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	22ff      	movs	r2, #255	@ 0xff
 800c478:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c47c:	e028      	b.n	800c4d0 <HAL_UART_Receive+0xd2>
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	689b      	ldr	r3, [r3, #8]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d10d      	bne.n	800c4a2 <HAL_UART_Receive+0xa4>
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	691b      	ldr	r3, [r3, #16]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d104      	bne.n	800c498 <HAL_UART_Receive+0x9a>
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	22ff      	movs	r2, #255	@ 0xff
 800c492:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c496:	e01b      	b.n	800c4d0 <HAL_UART_Receive+0xd2>
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	227f      	movs	r2, #127	@ 0x7f
 800c49c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c4a0:	e016      	b.n	800c4d0 <HAL_UART_Receive+0xd2>
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c4aa:	d10d      	bne.n	800c4c8 <HAL_UART_Receive+0xca>
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	691b      	ldr	r3, [r3, #16]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d104      	bne.n	800c4be <HAL_UART_Receive+0xc0>
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	227f      	movs	r2, #127	@ 0x7f
 800c4b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c4bc:	e008      	b.n	800c4d0 <HAL_UART_Receive+0xd2>
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	223f      	movs	r2, #63	@ 0x3f
 800c4c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c4c6:	e003      	b.n	800c4d0 <HAL_UART_Receive+0xd2>
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c4d6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4e0:	d108      	bne.n	800c4f4 <HAL_UART_Receive+0xf6>
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d104      	bne.n	800c4f4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	61bb      	str	r3, [r7, #24]
 800c4f2:	e003      	b.n	800c4fc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800c4fc:	e036      	b.n	800c56c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	9300      	str	r3, [sp, #0]
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	2200      	movs	r2, #0
 800c506:	2120      	movs	r1, #32
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	f000 ffeb 	bl	800d4e4 <UART_WaitOnFlagUntilTimeout>
 800c50e:	4603      	mov	r3, r0
 800c510:	2b00      	cmp	r3, #0
 800c512:	d005      	beq.n	800c520 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2220      	movs	r2, #32
 800c518:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800c51c:	2303      	movs	r3, #3
 800c51e:	e032      	b.n	800c586 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800c520:	69fb      	ldr	r3, [r7, #28]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d10c      	bne.n	800c540 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c52c:	b29a      	uxth	r2, r3
 800c52e:	8a7b      	ldrh	r3, [r7, #18]
 800c530:	4013      	ands	r3, r2
 800c532:	b29a      	uxth	r2, r3
 800c534:	69bb      	ldr	r3, [r7, #24]
 800c536:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	3302      	adds	r3, #2
 800c53c:	61bb      	str	r3, [r7, #24]
 800c53e:	e00c      	b.n	800c55a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c546:	b2da      	uxtb	r2, r3
 800c548:	8a7b      	ldrh	r3, [r7, #18]
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	4013      	ands	r3, r2
 800c54e:	b2da      	uxtb	r2, r3
 800c550:	69fb      	ldr	r3, [r7, #28]
 800c552:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	3301      	adds	r3, #1
 800c558:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c560:	b29b      	uxth	r3, r3
 800c562:	3b01      	subs	r3, #1
 800c564:	b29a      	uxth	r2, r3
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c572:	b29b      	uxth	r3, r3
 800c574:	2b00      	cmp	r3, #0
 800c576:	d1c2      	bne.n	800c4fe <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2220      	movs	r2, #32
 800c57c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800c580:	2300      	movs	r3, #0
 800c582:	e000      	b.n	800c586 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800c584:	2302      	movs	r3, #2
  }
}
 800c586:	4618      	mov	r0, r3
 800c588:	3720      	adds	r7, #32
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
	...

0800c590 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b0ba      	sub	sp, #232	@ 0xe8
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	69db      	ldr	r3, [r3, #28]
 800c59e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	689b      	ldr	r3, [r3, #8]
 800c5b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c5b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c5ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c5be:	4013      	ands	r3, r2
 800c5c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c5c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d11b      	bne.n	800c604 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c5cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5d0:	f003 0320 	and.w	r3, r3, #32
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d015      	beq.n	800c604 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c5d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5dc:	f003 0320 	and.w	r3, r3, #32
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d105      	bne.n	800c5f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c5e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d009      	beq.n	800c604 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	f000 8300 	beq.w	800cbfa <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	4798      	blx	r3
      }
      return;
 800c602:	e2fa      	b.n	800cbfa <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c604:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f000 8123 	beq.w	800c854 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c60e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c612:	4b8d      	ldr	r3, [pc, #564]	@ (800c848 <HAL_UART_IRQHandler+0x2b8>)
 800c614:	4013      	ands	r3, r2
 800c616:	2b00      	cmp	r3, #0
 800c618:	d106      	bne.n	800c628 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c61a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c61e:	4b8b      	ldr	r3, [pc, #556]	@ (800c84c <HAL_UART_IRQHandler+0x2bc>)
 800c620:	4013      	ands	r3, r2
 800c622:	2b00      	cmp	r3, #0
 800c624:	f000 8116 	beq.w	800c854 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c62c:	f003 0301 	and.w	r3, r3, #1
 800c630:	2b00      	cmp	r3, #0
 800c632:	d011      	beq.n	800c658 <HAL_UART_IRQHandler+0xc8>
 800c634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d00b      	beq.n	800c658 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	2201      	movs	r2, #1
 800c646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c64e:	f043 0201 	orr.w	r2, r3, #1
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c65c:	f003 0302 	and.w	r3, r3, #2
 800c660:	2b00      	cmp	r3, #0
 800c662:	d011      	beq.n	800c688 <HAL_UART_IRQHandler+0xf8>
 800c664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c668:	f003 0301 	and.w	r3, r3, #1
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d00b      	beq.n	800c688 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2202      	movs	r2, #2
 800c676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c67e:	f043 0204 	orr.w	r2, r3, #4
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c68c:	f003 0304 	and.w	r3, r3, #4
 800c690:	2b00      	cmp	r3, #0
 800c692:	d011      	beq.n	800c6b8 <HAL_UART_IRQHandler+0x128>
 800c694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c698:	f003 0301 	and.w	r3, r3, #1
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d00b      	beq.n	800c6b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2204      	movs	r2, #4
 800c6a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6ae:	f043 0202 	orr.w	r2, r3, #2
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c6b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6bc:	f003 0308 	and.w	r3, r3, #8
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d017      	beq.n	800c6f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c6c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6c8:	f003 0320 	and.w	r3, r3, #32
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d105      	bne.n	800c6dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c6d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c6d4:	4b5c      	ldr	r3, [pc, #368]	@ (800c848 <HAL_UART_IRQHandler+0x2b8>)
 800c6d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d00b      	beq.n	800c6f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	2208      	movs	r2, #8
 800c6e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6ea:	f043 0208 	orr.w	r2, r3, #8
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c6f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d012      	beq.n	800c726 <HAL_UART_IRQHandler+0x196>
 800c700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c704:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d00c      	beq.n	800c726 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c714:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c71c:	f043 0220 	orr.w	r2, r3, #32
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	f000 8266 	beq.w	800cbfe <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c736:	f003 0320 	and.w	r3, r3, #32
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d013      	beq.n	800c766 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c73e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c742:	f003 0320 	and.w	r3, r3, #32
 800c746:	2b00      	cmp	r3, #0
 800c748:	d105      	bne.n	800c756 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c74a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c74e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c752:	2b00      	cmp	r3, #0
 800c754:	d007      	beq.n	800c766 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d003      	beq.n	800c766 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c76c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	689b      	ldr	r3, [r3, #8]
 800c776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c77a:	2b40      	cmp	r3, #64	@ 0x40
 800c77c:	d005      	beq.n	800c78a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c77e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c782:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c786:	2b00      	cmp	r3, #0
 800c788:	d054      	beq.n	800c834 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 ff17 	bl	800d5be <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c79a:	2b40      	cmp	r3, #64	@ 0x40
 800c79c:	d146      	bne.n	800c82c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	3308      	adds	r3, #8
 800c7a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c7ac:	e853 3f00 	ldrex	r3, [r3]
 800c7b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c7b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c7b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	3308      	adds	r3, #8
 800c7c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c7ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c7ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c7d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c7da:	e841 2300 	strex	r3, r2, [r1]
 800c7de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c7e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d1d9      	bne.n	800c79e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d017      	beq.n	800c824 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7fa:	4a15      	ldr	r2, [pc, #84]	@ (800c850 <HAL_UART_IRQHandler+0x2c0>)
 800c7fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c804:	4618      	mov	r0, r3
 800c806:	f7f9 f836 	bl	8005876 <HAL_DMA_Abort_IT>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d019      	beq.n	800c844 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c81e:	4610      	mov	r0, r2
 800c820:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c822:	e00f      	b.n	800c844 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 f9ff 	bl	800cc28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c82a:	e00b      	b.n	800c844 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 f9fb 	bl	800cc28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c832:	e007      	b.n	800c844 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 f9f7 	bl	800cc28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2200      	movs	r2, #0
 800c83e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c842:	e1dc      	b.n	800cbfe <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c844:	bf00      	nop
    return;
 800c846:	e1da      	b.n	800cbfe <HAL_UART_IRQHandler+0x66e>
 800c848:	10000001 	.word	0x10000001
 800c84c:	04000120 	.word	0x04000120
 800c850:	0800d68b 	.word	0x0800d68b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c858:	2b01      	cmp	r3, #1
 800c85a:	f040 8170 	bne.w	800cb3e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c85e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c862:	f003 0310 	and.w	r3, r3, #16
 800c866:	2b00      	cmp	r3, #0
 800c868:	f000 8169 	beq.w	800cb3e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c86c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c870:	f003 0310 	and.w	r3, r3, #16
 800c874:	2b00      	cmp	r3, #0
 800c876:	f000 8162 	beq.w	800cb3e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	2210      	movs	r2, #16
 800c880:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c88c:	2b40      	cmp	r3, #64	@ 0x40
 800c88e:	f040 80d8 	bne.w	800ca42 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c8a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	f000 80af 	beq.w	800ca08 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c8b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	f080 80a7 	bcs.w	800ca08 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c8c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f003 0320 	and.w	r3, r3, #32
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	f040 8087 	bne.w	800c9e6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c8e4:	e853 3f00 	ldrex	r3, [r3]
 800c8e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c8ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c8f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c8f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c902:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c906:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c90a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c90e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c912:	e841 2300 	strex	r3, r2, [r1]
 800c916:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c91a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d1da      	bne.n	800c8d8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	3308      	adds	r3, #8
 800c928:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c92a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c92c:	e853 3f00 	ldrex	r3, [r3]
 800c930:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c932:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c934:	f023 0301 	bic.w	r3, r3, #1
 800c938:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	3308      	adds	r3, #8
 800c942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c946:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c94a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c94c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c94e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c952:	e841 2300 	strex	r3, r2, [r1]
 800c956:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c958:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1e1      	bne.n	800c922 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	3308      	adds	r3, #8
 800c964:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c966:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c968:	e853 3f00 	ldrex	r3, [r3]
 800c96c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c96e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c970:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c974:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	3308      	adds	r3, #8
 800c97e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c982:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c984:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c986:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c988:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c98a:	e841 2300 	strex	r3, r2, [r1]
 800c98e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c990:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c992:	2b00      	cmp	r3, #0
 800c994:	d1e3      	bne.n	800c95e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2220      	movs	r2, #32
 800c99a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9ac:	e853 3f00 	ldrex	r3, [r3]
 800c9b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c9b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9b4:	f023 0310 	bic.w	r3, r3, #16
 800c9b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c9c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c9cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c9ce:	e841 2300 	strex	r3, r2, [r1]
 800c9d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c9d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d1e4      	bne.n	800c9a4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7f8 feef 	bl	80057c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2202      	movs	r2, #2
 800c9ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	1ad3      	subs	r3, r2, r3
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	4619      	mov	r1, r3
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 f91b 	bl	800cc3c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ca06:	e0fc      	b.n	800cc02 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ca0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ca12:	429a      	cmp	r2, r3
 800ca14:	f040 80f5 	bne.w	800cc02 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f003 0320 	and.w	r3, r3, #32
 800ca26:	2b20      	cmp	r3, #32
 800ca28:	f040 80eb 	bne.w	800cc02 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2202      	movs	r2, #2
 800ca30:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ca38:	4619      	mov	r1, r3
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 f8fe 	bl	800cc3c <HAL_UARTEx_RxEventCallback>
      return;
 800ca40:	e0df      	b.n	800cc02 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	1ad3      	subs	r3, r2, r3
 800ca52:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca5c:	b29b      	uxth	r3, r3
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	f000 80d1 	beq.w	800cc06 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800ca64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	f000 80cc 	beq.w	800cc06 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca76:	e853 3f00 	ldrex	r3, [r3]
 800ca7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ca7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ca90:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ca96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca98:	e841 2300 	strex	r3, r2, [r1]
 800ca9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ca9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d1e4      	bne.n	800ca6e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	3308      	adds	r3, #8
 800caaa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caae:	e853 3f00 	ldrex	r3, [r3]
 800cab2:	623b      	str	r3, [r7, #32]
   return(result);
 800cab4:	6a3b      	ldr	r3, [r7, #32]
 800cab6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800caba:	f023 0301 	bic.w	r3, r3, #1
 800cabe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	3308      	adds	r3, #8
 800cac8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cacc:	633a      	str	r2, [r7, #48]	@ 0x30
 800cace:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cad4:	e841 2300 	strex	r3, r2, [r1]
 800cad8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d1e1      	bne.n	800caa4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2220      	movs	r2, #32
 800cae4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2200      	movs	r2, #0
 800caec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2200      	movs	r2, #0
 800caf2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	e853 3f00 	ldrex	r3, [r3]
 800cb00:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f023 0310 	bic.w	r3, r3, #16
 800cb08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	461a      	mov	r2, r3
 800cb12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cb16:	61fb      	str	r3, [r7, #28]
 800cb18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb1a:	69b9      	ldr	r1, [r7, #24]
 800cb1c:	69fa      	ldr	r2, [r7, #28]
 800cb1e:	e841 2300 	strex	r3, r2, [r1]
 800cb22:	617b      	str	r3, [r7, #20]
   return(result);
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d1e4      	bne.n	800caf4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2202      	movs	r2, #2
 800cb2e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cb30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cb34:	4619      	mov	r1, r3
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 f880 	bl	800cc3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cb3c:	e063      	b.n	800cc06 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cb3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d00e      	beq.n	800cb68 <HAL_UART_IRQHandler+0x5d8>
 800cb4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d008      	beq.n	800cb68 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800cb5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 fdcf 	bl	800d704 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb66:	e051      	b.n	800cc0c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cb68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d014      	beq.n	800cb9e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cb74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d105      	bne.n	800cb8c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cb80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d008      	beq.n	800cb9e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d03a      	beq.n	800cc0a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	4798      	blx	r3
    }
    return;
 800cb9c:	e035      	b.n	800cc0a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cb9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d009      	beq.n	800cbbe <HAL_UART_IRQHandler+0x62e>
 800cbaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d003      	beq.n	800cbbe <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 fd79 	bl	800d6ae <UART_EndTransmit_IT>
    return;
 800cbbc:	e026      	b.n	800cc0c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cbbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d009      	beq.n	800cbde <HAL_UART_IRQHandler+0x64e>
 800cbca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d003      	beq.n	800cbde <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 fda8 	bl	800d72c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cbdc:	e016      	b.n	800cc0c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cbde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbe2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d010      	beq.n	800cc0c <HAL_UART_IRQHandler+0x67c>
 800cbea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	da0c      	bge.n	800cc0c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 fd90 	bl	800d718 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cbf8:	e008      	b.n	800cc0c <HAL_UART_IRQHandler+0x67c>
      return;
 800cbfa:	bf00      	nop
 800cbfc:	e006      	b.n	800cc0c <HAL_UART_IRQHandler+0x67c>
    return;
 800cbfe:	bf00      	nop
 800cc00:	e004      	b.n	800cc0c <HAL_UART_IRQHandler+0x67c>
      return;
 800cc02:	bf00      	nop
 800cc04:	e002      	b.n	800cc0c <HAL_UART_IRQHandler+0x67c>
      return;
 800cc06:	bf00      	nop
 800cc08:	e000      	b.n	800cc0c <HAL_UART_IRQHandler+0x67c>
    return;
 800cc0a:	bf00      	nop
  }
}
 800cc0c:	37e8      	adds	r7, #232	@ 0xe8
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop

0800cc14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b083      	sub	sp, #12
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cc1c:	bf00      	nop
 800cc1e:	370c      	adds	r7, #12
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b083      	sub	sp, #12
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cc30:	bf00      	nop
 800cc32:	370c      	adds	r7, #12
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr

0800cc3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b083      	sub	sp, #12
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	460b      	mov	r3, r1
 800cc46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cc48:	bf00      	nop
 800cc4a:	370c      	adds	r7, #12
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr

0800cc54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc58:	b08c      	sub	sp, #48	@ 0x30
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	689a      	ldr	r2, [r3, #8]
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	691b      	ldr	r3, [r3, #16]
 800cc6c:	431a      	orrs	r2, r3
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	695b      	ldr	r3, [r3, #20]
 800cc72:	431a      	orrs	r2, r3
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	69db      	ldr	r3, [r3, #28]
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	4baa      	ldr	r3, [pc, #680]	@ (800cf2c <UART_SetConfig+0x2d8>)
 800cc84:	4013      	ands	r3, r2
 800cc86:	697a      	ldr	r2, [r7, #20]
 800cc88:	6812      	ldr	r2, [r2, #0]
 800cc8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc8c:	430b      	orrs	r3, r1
 800cc8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	68da      	ldr	r2, [r3, #12]
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	430a      	orrs	r2, r1
 800cca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	699b      	ldr	r3, [r3, #24]
 800ccaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a9f      	ldr	r2, [pc, #636]	@ (800cf30 <UART_SetConfig+0x2dc>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d004      	beq.n	800ccc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	6a1b      	ldr	r3, [r3, #32]
 800ccba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ccca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ccce:	697a      	ldr	r2, [r7, #20]
 800ccd0:	6812      	ldr	r2, [r2, #0]
 800ccd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ccd4:	430b      	orrs	r3, r1
 800ccd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccde:	f023 010f 	bic.w	r1, r3, #15
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	430a      	orrs	r2, r1
 800ccec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4a90      	ldr	r2, [pc, #576]	@ (800cf34 <UART_SetConfig+0x2e0>)
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d125      	bne.n	800cd44 <UART_SetConfig+0xf0>
 800ccf8:	4b8f      	ldr	r3, [pc, #572]	@ (800cf38 <UART_SetConfig+0x2e4>)
 800ccfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ccfe:	f003 0303 	and.w	r3, r3, #3
 800cd02:	2b03      	cmp	r3, #3
 800cd04:	d81a      	bhi.n	800cd3c <UART_SetConfig+0xe8>
 800cd06:	a201      	add	r2, pc, #4	@ (adr r2, 800cd0c <UART_SetConfig+0xb8>)
 800cd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd0c:	0800cd1d 	.word	0x0800cd1d
 800cd10:	0800cd2d 	.word	0x0800cd2d
 800cd14:	0800cd25 	.word	0x0800cd25
 800cd18:	0800cd35 	.word	0x0800cd35
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd22:	e116      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800cd24:	2302      	movs	r3, #2
 800cd26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd2a:	e112      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800cd2c:	2304      	movs	r3, #4
 800cd2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd32:	e10e      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800cd34:	2308      	movs	r3, #8
 800cd36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd3a:	e10a      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800cd3c:	2310      	movs	r3, #16
 800cd3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd42:	e106      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a7c      	ldr	r2, [pc, #496]	@ (800cf3c <UART_SetConfig+0x2e8>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d138      	bne.n	800cdc0 <UART_SetConfig+0x16c>
 800cd4e:	4b7a      	ldr	r3, [pc, #488]	@ (800cf38 <UART_SetConfig+0x2e4>)
 800cd50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd54:	f003 030c 	and.w	r3, r3, #12
 800cd58:	2b0c      	cmp	r3, #12
 800cd5a:	d82d      	bhi.n	800cdb8 <UART_SetConfig+0x164>
 800cd5c:	a201      	add	r2, pc, #4	@ (adr r2, 800cd64 <UART_SetConfig+0x110>)
 800cd5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd62:	bf00      	nop
 800cd64:	0800cd99 	.word	0x0800cd99
 800cd68:	0800cdb9 	.word	0x0800cdb9
 800cd6c:	0800cdb9 	.word	0x0800cdb9
 800cd70:	0800cdb9 	.word	0x0800cdb9
 800cd74:	0800cda9 	.word	0x0800cda9
 800cd78:	0800cdb9 	.word	0x0800cdb9
 800cd7c:	0800cdb9 	.word	0x0800cdb9
 800cd80:	0800cdb9 	.word	0x0800cdb9
 800cd84:	0800cda1 	.word	0x0800cda1
 800cd88:	0800cdb9 	.word	0x0800cdb9
 800cd8c:	0800cdb9 	.word	0x0800cdb9
 800cd90:	0800cdb9 	.word	0x0800cdb9
 800cd94:	0800cdb1 	.word	0x0800cdb1
 800cd98:	2300      	movs	r3, #0
 800cd9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd9e:	e0d8      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800cda0:	2302      	movs	r3, #2
 800cda2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cda6:	e0d4      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800cda8:	2304      	movs	r3, #4
 800cdaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdae:	e0d0      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800cdb0:	2308      	movs	r3, #8
 800cdb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdb6:	e0cc      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800cdb8:	2310      	movs	r3, #16
 800cdba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdbe:	e0c8      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a5e      	ldr	r2, [pc, #376]	@ (800cf40 <UART_SetConfig+0x2ec>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d125      	bne.n	800ce16 <UART_SetConfig+0x1c2>
 800cdca:	4b5b      	ldr	r3, [pc, #364]	@ (800cf38 <UART_SetConfig+0x2e4>)
 800cdcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cdd0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cdd4:	2b30      	cmp	r3, #48	@ 0x30
 800cdd6:	d016      	beq.n	800ce06 <UART_SetConfig+0x1b2>
 800cdd8:	2b30      	cmp	r3, #48	@ 0x30
 800cdda:	d818      	bhi.n	800ce0e <UART_SetConfig+0x1ba>
 800cddc:	2b20      	cmp	r3, #32
 800cdde:	d00a      	beq.n	800cdf6 <UART_SetConfig+0x1a2>
 800cde0:	2b20      	cmp	r3, #32
 800cde2:	d814      	bhi.n	800ce0e <UART_SetConfig+0x1ba>
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d002      	beq.n	800cdee <UART_SetConfig+0x19a>
 800cde8:	2b10      	cmp	r3, #16
 800cdea:	d008      	beq.n	800cdfe <UART_SetConfig+0x1aa>
 800cdec:	e00f      	b.n	800ce0e <UART_SetConfig+0x1ba>
 800cdee:	2300      	movs	r3, #0
 800cdf0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdf4:	e0ad      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800cdf6:	2302      	movs	r3, #2
 800cdf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdfc:	e0a9      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800cdfe:	2304      	movs	r3, #4
 800ce00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce04:	e0a5      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800ce06:	2308      	movs	r3, #8
 800ce08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce0c:	e0a1      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800ce0e:	2310      	movs	r3, #16
 800ce10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce14:	e09d      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4a4a      	ldr	r2, [pc, #296]	@ (800cf44 <UART_SetConfig+0x2f0>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d125      	bne.n	800ce6c <UART_SetConfig+0x218>
 800ce20:	4b45      	ldr	r3, [pc, #276]	@ (800cf38 <UART_SetConfig+0x2e4>)
 800ce22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ce2a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ce2c:	d016      	beq.n	800ce5c <UART_SetConfig+0x208>
 800ce2e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ce30:	d818      	bhi.n	800ce64 <UART_SetConfig+0x210>
 800ce32:	2b80      	cmp	r3, #128	@ 0x80
 800ce34:	d00a      	beq.n	800ce4c <UART_SetConfig+0x1f8>
 800ce36:	2b80      	cmp	r3, #128	@ 0x80
 800ce38:	d814      	bhi.n	800ce64 <UART_SetConfig+0x210>
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d002      	beq.n	800ce44 <UART_SetConfig+0x1f0>
 800ce3e:	2b40      	cmp	r3, #64	@ 0x40
 800ce40:	d008      	beq.n	800ce54 <UART_SetConfig+0x200>
 800ce42:	e00f      	b.n	800ce64 <UART_SetConfig+0x210>
 800ce44:	2300      	movs	r3, #0
 800ce46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce4a:	e082      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800ce4c:	2302      	movs	r3, #2
 800ce4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce52:	e07e      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800ce54:	2304      	movs	r3, #4
 800ce56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce5a:	e07a      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800ce5c:	2308      	movs	r3, #8
 800ce5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce62:	e076      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800ce64:	2310      	movs	r3, #16
 800ce66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce6a:	e072      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	4a35      	ldr	r2, [pc, #212]	@ (800cf48 <UART_SetConfig+0x2f4>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d12a      	bne.n	800cecc <UART_SetConfig+0x278>
 800ce76:	4b30      	ldr	r3, [pc, #192]	@ (800cf38 <UART_SetConfig+0x2e4>)
 800ce78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ce80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce84:	d01a      	beq.n	800cebc <UART_SetConfig+0x268>
 800ce86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce8a:	d81b      	bhi.n	800cec4 <UART_SetConfig+0x270>
 800ce8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce90:	d00c      	beq.n	800ceac <UART_SetConfig+0x258>
 800ce92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce96:	d815      	bhi.n	800cec4 <UART_SetConfig+0x270>
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d003      	beq.n	800cea4 <UART_SetConfig+0x250>
 800ce9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cea0:	d008      	beq.n	800ceb4 <UART_SetConfig+0x260>
 800cea2:	e00f      	b.n	800cec4 <UART_SetConfig+0x270>
 800cea4:	2300      	movs	r3, #0
 800cea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ceaa:	e052      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800ceac:	2302      	movs	r3, #2
 800ceae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ceb2:	e04e      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800ceb4:	2304      	movs	r3, #4
 800ceb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ceba:	e04a      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800cebc:	2308      	movs	r3, #8
 800cebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cec2:	e046      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800cec4:	2310      	movs	r3, #16
 800cec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ceca:	e042      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a17      	ldr	r2, [pc, #92]	@ (800cf30 <UART_SetConfig+0x2dc>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d13a      	bne.n	800cf4c <UART_SetConfig+0x2f8>
 800ced6:	4b18      	ldr	r3, [pc, #96]	@ (800cf38 <UART_SetConfig+0x2e4>)
 800ced8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cedc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cee0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cee4:	d01a      	beq.n	800cf1c <UART_SetConfig+0x2c8>
 800cee6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ceea:	d81b      	bhi.n	800cf24 <UART_SetConfig+0x2d0>
 800ceec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cef0:	d00c      	beq.n	800cf0c <UART_SetConfig+0x2b8>
 800cef2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cef6:	d815      	bhi.n	800cf24 <UART_SetConfig+0x2d0>
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d003      	beq.n	800cf04 <UART_SetConfig+0x2b0>
 800cefc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf00:	d008      	beq.n	800cf14 <UART_SetConfig+0x2c0>
 800cf02:	e00f      	b.n	800cf24 <UART_SetConfig+0x2d0>
 800cf04:	2300      	movs	r3, #0
 800cf06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf0a:	e022      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800cf0c:	2302      	movs	r3, #2
 800cf0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf12:	e01e      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800cf14:	2304      	movs	r3, #4
 800cf16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf1a:	e01a      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800cf1c:	2308      	movs	r3, #8
 800cf1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf22:	e016      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800cf24:	2310      	movs	r3, #16
 800cf26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf2a:	e012      	b.n	800cf52 <UART_SetConfig+0x2fe>
 800cf2c:	cfff69f3 	.word	0xcfff69f3
 800cf30:	40008000 	.word	0x40008000
 800cf34:	40013800 	.word	0x40013800
 800cf38:	40021000 	.word	0x40021000
 800cf3c:	40004400 	.word	0x40004400
 800cf40:	40004800 	.word	0x40004800
 800cf44:	40004c00 	.word	0x40004c00
 800cf48:	40005000 	.word	0x40005000
 800cf4c:	2310      	movs	r3, #16
 800cf4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4aae      	ldr	r2, [pc, #696]	@ (800d210 <UART_SetConfig+0x5bc>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	f040 8097 	bne.w	800d08c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cf5e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cf62:	2b08      	cmp	r3, #8
 800cf64:	d823      	bhi.n	800cfae <UART_SetConfig+0x35a>
 800cf66:	a201      	add	r2, pc, #4	@ (adr r2, 800cf6c <UART_SetConfig+0x318>)
 800cf68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf6c:	0800cf91 	.word	0x0800cf91
 800cf70:	0800cfaf 	.word	0x0800cfaf
 800cf74:	0800cf99 	.word	0x0800cf99
 800cf78:	0800cfaf 	.word	0x0800cfaf
 800cf7c:	0800cf9f 	.word	0x0800cf9f
 800cf80:	0800cfaf 	.word	0x0800cfaf
 800cf84:	0800cfaf 	.word	0x0800cfaf
 800cf88:	0800cfaf 	.word	0x0800cfaf
 800cf8c:	0800cfa7 	.word	0x0800cfa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf90:	f7fc f8e6 	bl	8009160 <HAL_RCC_GetPCLK1Freq>
 800cf94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cf96:	e010      	b.n	800cfba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cf98:	4b9e      	ldr	r3, [pc, #632]	@ (800d214 <UART_SetConfig+0x5c0>)
 800cf9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cf9c:	e00d      	b.n	800cfba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cf9e:	f7fc f871 	bl	8009084 <HAL_RCC_GetSysClockFreq>
 800cfa2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cfa4:	e009      	b.n	800cfba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cfaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cfac:	e005      	b.n	800cfba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800cfb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	f000 8130 	beq.w	800d222 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfc6:	4a94      	ldr	r2, [pc, #592]	@ (800d218 <UART_SetConfig+0x5c4>)
 800cfc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfcc:	461a      	mov	r2, r3
 800cfce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfd4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	685a      	ldr	r2, [r3, #4]
 800cfda:	4613      	mov	r3, r2
 800cfdc:	005b      	lsls	r3, r3, #1
 800cfde:	4413      	add	r3, r2
 800cfe0:	69ba      	ldr	r2, [r7, #24]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d305      	bcc.n	800cff2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cfec:	69ba      	ldr	r2, [r7, #24]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d903      	bls.n	800cffa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800cff2:	2301      	movs	r3, #1
 800cff4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800cff8:	e113      	b.n	800d222 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cffc:	2200      	movs	r2, #0
 800cffe:	60bb      	str	r3, [r7, #8]
 800d000:	60fa      	str	r2, [r7, #12]
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d006:	4a84      	ldr	r2, [pc, #528]	@ (800d218 <UART_SetConfig+0x5c4>)
 800d008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	2200      	movs	r2, #0
 800d010:	603b      	str	r3, [r7, #0]
 800d012:	607a      	str	r2, [r7, #4]
 800d014:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d018:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d01c:	f7f3 fe3c 	bl	8000c98 <__aeabi_uldivmod>
 800d020:	4602      	mov	r2, r0
 800d022:	460b      	mov	r3, r1
 800d024:	4610      	mov	r0, r2
 800d026:	4619      	mov	r1, r3
 800d028:	f04f 0200 	mov.w	r2, #0
 800d02c:	f04f 0300 	mov.w	r3, #0
 800d030:	020b      	lsls	r3, r1, #8
 800d032:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d036:	0202      	lsls	r2, r0, #8
 800d038:	6979      	ldr	r1, [r7, #20]
 800d03a:	6849      	ldr	r1, [r1, #4]
 800d03c:	0849      	lsrs	r1, r1, #1
 800d03e:	2000      	movs	r0, #0
 800d040:	460c      	mov	r4, r1
 800d042:	4605      	mov	r5, r0
 800d044:	eb12 0804 	adds.w	r8, r2, r4
 800d048:	eb43 0905 	adc.w	r9, r3, r5
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	2200      	movs	r2, #0
 800d052:	469a      	mov	sl, r3
 800d054:	4693      	mov	fp, r2
 800d056:	4652      	mov	r2, sl
 800d058:	465b      	mov	r3, fp
 800d05a:	4640      	mov	r0, r8
 800d05c:	4649      	mov	r1, r9
 800d05e:	f7f3 fe1b 	bl	8000c98 <__aeabi_uldivmod>
 800d062:	4602      	mov	r2, r0
 800d064:	460b      	mov	r3, r1
 800d066:	4613      	mov	r3, r2
 800d068:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d06a:	6a3b      	ldr	r3, [r7, #32]
 800d06c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d070:	d308      	bcc.n	800d084 <UART_SetConfig+0x430>
 800d072:	6a3b      	ldr	r3, [r7, #32]
 800d074:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d078:	d204      	bcs.n	800d084 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	6a3a      	ldr	r2, [r7, #32]
 800d080:	60da      	str	r2, [r3, #12]
 800d082:	e0ce      	b.n	800d222 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800d084:	2301      	movs	r3, #1
 800d086:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d08a:	e0ca      	b.n	800d222 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	69db      	ldr	r3, [r3, #28]
 800d090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d094:	d166      	bne.n	800d164 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800d096:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d09a:	2b08      	cmp	r3, #8
 800d09c:	d827      	bhi.n	800d0ee <UART_SetConfig+0x49a>
 800d09e:	a201      	add	r2, pc, #4	@ (adr r2, 800d0a4 <UART_SetConfig+0x450>)
 800d0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a4:	0800d0c9 	.word	0x0800d0c9
 800d0a8:	0800d0d1 	.word	0x0800d0d1
 800d0ac:	0800d0d9 	.word	0x0800d0d9
 800d0b0:	0800d0ef 	.word	0x0800d0ef
 800d0b4:	0800d0df 	.word	0x0800d0df
 800d0b8:	0800d0ef 	.word	0x0800d0ef
 800d0bc:	0800d0ef 	.word	0x0800d0ef
 800d0c0:	0800d0ef 	.word	0x0800d0ef
 800d0c4:	0800d0e7 	.word	0x0800d0e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0c8:	f7fc f84a 	bl	8009160 <HAL_RCC_GetPCLK1Freq>
 800d0cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d0ce:	e014      	b.n	800d0fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0d0:	f7fc f85c 	bl	800918c <HAL_RCC_GetPCLK2Freq>
 800d0d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d0d6:	e010      	b.n	800d0fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d0d8:	4b4e      	ldr	r3, [pc, #312]	@ (800d214 <UART_SetConfig+0x5c0>)
 800d0da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d0dc:	e00d      	b.n	800d0fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d0de:	f7fb ffd1 	bl	8009084 <HAL_RCC_GetSysClockFreq>
 800d0e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d0e4:	e009      	b.n	800d0fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d0ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d0ec:	e005      	b.n	800d0fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d0f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	f000 8090 	beq.w	800d222 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d106:	4a44      	ldr	r2, [pc, #272]	@ (800d218 <UART_SetConfig+0x5c4>)
 800d108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d10c:	461a      	mov	r2, r3
 800d10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d110:	fbb3 f3f2 	udiv	r3, r3, r2
 800d114:	005a      	lsls	r2, r3, #1
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	085b      	lsrs	r3, r3, #1
 800d11c:	441a      	add	r2, r3
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	fbb2 f3f3 	udiv	r3, r2, r3
 800d126:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d128:	6a3b      	ldr	r3, [r7, #32]
 800d12a:	2b0f      	cmp	r3, #15
 800d12c:	d916      	bls.n	800d15c <UART_SetConfig+0x508>
 800d12e:	6a3b      	ldr	r3, [r7, #32]
 800d130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d134:	d212      	bcs.n	800d15c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d136:	6a3b      	ldr	r3, [r7, #32]
 800d138:	b29b      	uxth	r3, r3
 800d13a:	f023 030f 	bic.w	r3, r3, #15
 800d13e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d140:	6a3b      	ldr	r3, [r7, #32]
 800d142:	085b      	lsrs	r3, r3, #1
 800d144:	b29b      	uxth	r3, r3
 800d146:	f003 0307 	and.w	r3, r3, #7
 800d14a:	b29a      	uxth	r2, r3
 800d14c:	8bfb      	ldrh	r3, [r7, #30]
 800d14e:	4313      	orrs	r3, r2
 800d150:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	8bfa      	ldrh	r2, [r7, #30]
 800d158:	60da      	str	r2, [r3, #12]
 800d15a:	e062      	b.n	800d222 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800d15c:	2301      	movs	r3, #1
 800d15e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d162:	e05e      	b.n	800d222 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d164:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d168:	2b08      	cmp	r3, #8
 800d16a:	d828      	bhi.n	800d1be <UART_SetConfig+0x56a>
 800d16c:	a201      	add	r2, pc, #4	@ (adr r2, 800d174 <UART_SetConfig+0x520>)
 800d16e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d172:	bf00      	nop
 800d174:	0800d199 	.word	0x0800d199
 800d178:	0800d1a1 	.word	0x0800d1a1
 800d17c:	0800d1a9 	.word	0x0800d1a9
 800d180:	0800d1bf 	.word	0x0800d1bf
 800d184:	0800d1af 	.word	0x0800d1af
 800d188:	0800d1bf 	.word	0x0800d1bf
 800d18c:	0800d1bf 	.word	0x0800d1bf
 800d190:	0800d1bf 	.word	0x0800d1bf
 800d194:	0800d1b7 	.word	0x0800d1b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d198:	f7fb ffe2 	bl	8009160 <HAL_RCC_GetPCLK1Freq>
 800d19c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d19e:	e014      	b.n	800d1ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d1a0:	f7fb fff4 	bl	800918c <HAL_RCC_GetPCLK2Freq>
 800d1a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d1a6:	e010      	b.n	800d1ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d1a8:	4b1a      	ldr	r3, [pc, #104]	@ (800d214 <UART_SetConfig+0x5c0>)
 800d1aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d1ac:	e00d      	b.n	800d1ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d1ae:	f7fb ff69 	bl	8009084 <HAL_RCC_GetSysClockFreq>
 800d1b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d1b4:	e009      	b.n	800d1ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d1bc:	e005      	b.n	800d1ca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d1c8:	bf00      	nop
    }

    if (pclk != 0U)
 800d1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d028      	beq.n	800d222 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1d4:	4a10      	ldr	r2, [pc, #64]	@ (800d218 <UART_SetConfig+0x5c4>)
 800d1d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1da:	461a      	mov	r2, r3
 800d1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1de:	fbb3 f2f2 	udiv	r2, r3, r2
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	085b      	lsrs	r3, r3, #1
 800d1e8:	441a      	add	r2, r3
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1f4:	6a3b      	ldr	r3, [r7, #32]
 800d1f6:	2b0f      	cmp	r3, #15
 800d1f8:	d910      	bls.n	800d21c <UART_SetConfig+0x5c8>
 800d1fa:	6a3b      	ldr	r3, [r7, #32]
 800d1fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d200:	d20c      	bcs.n	800d21c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d202:	6a3b      	ldr	r3, [r7, #32]
 800d204:	b29a      	uxth	r2, r3
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	60da      	str	r2, [r3, #12]
 800d20c:	e009      	b.n	800d222 <UART_SetConfig+0x5ce>
 800d20e:	bf00      	nop
 800d210:	40008000 	.word	0x40008000
 800d214:	00f42400 	.word	0x00f42400
 800d218:	080158a8 	.word	0x080158a8
      }
      else
      {
        ret = HAL_ERROR;
 800d21c:	2301      	movs	r3, #1
 800d21e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	2201      	movs	r2, #1
 800d226:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	2201      	movs	r2, #1
 800d22e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	2200      	movs	r2, #0
 800d236:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	2200      	movs	r2, #0
 800d23c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d23e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d242:	4618      	mov	r0, r3
 800d244:	3730      	adds	r7, #48	@ 0x30
 800d246:	46bd      	mov	sp, r7
 800d248:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d24c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d258:	f003 0308 	and.w	r3, r3, #8
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d00a      	beq.n	800d276 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	430a      	orrs	r2, r1
 800d274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d27a:	f003 0301 	and.w	r3, r3, #1
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d00a      	beq.n	800d298 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	430a      	orrs	r2, r1
 800d296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d29c:	f003 0302 	and.w	r3, r3, #2
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d00a      	beq.n	800d2ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	430a      	orrs	r2, r1
 800d2b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2be:	f003 0304 	and.w	r3, r3, #4
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d00a      	beq.n	800d2dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	430a      	orrs	r2, r1
 800d2da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2e0:	f003 0310 	and.w	r3, r3, #16
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d00a      	beq.n	800d2fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	430a      	orrs	r2, r1
 800d2fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d302:	f003 0320 	and.w	r3, r3, #32
 800d306:	2b00      	cmp	r3, #0
 800d308:	d00a      	beq.n	800d320 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	689b      	ldr	r3, [r3, #8]
 800d310:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	430a      	orrs	r2, r1
 800d31e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d01a      	beq.n	800d362 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	430a      	orrs	r2, r1
 800d340:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d346:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d34a:	d10a      	bne.n	800d362 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	430a      	orrs	r2, r1
 800d360:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d00a      	beq.n	800d384 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	430a      	orrs	r2, r1
 800d382:	605a      	str	r2, [r3, #4]
  }
}
 800d384:	bf00      	nop
 800d386:	370c      	adds	r7, #12
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr

0800d390 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b098      	sub	sp, #96	@ 0x60
 800d394:	af02      	add	r7, sp, #8
 800d396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d3a0:	f7f6 ff46 	bl	8004230 <HAL_GetTick>
 800d3a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f003 0308 	and.w	r3, r3, #8
 800d3b0:	2b08      	cmp	r3, #8
 800d3b2:	d12f      	bne.n	800d414 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d3b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3bc:	2200      	movs	r2, #0
 800d3be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 f88e 	bl	800d4e4 <UART_WaitOnFlagUntilTimeout>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d022      	beq.n	800d414 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3d6:	e853 3f00 	ldrex	r3, [r3]
 800d3da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d3dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d3e2:	653b      	str	r3, [r7, #80]	@ 0x50
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d3f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d3f4:	e841 2300 	strex	r3, r2, [r1]
 800d3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d3fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d1e6      	bne.n	800d3ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2220      	movs	r2, #32
 800d404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2200      	movs	r2, #0
 800d40c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d410:	2303      	movs	r3, #3
 800d412:	e063      	b.n	800d4dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f003 0304 	and.w	r3, r3, #4
 800d41e:	2b04      	cmp	r3, #4
 800d420:	d149      	bne.n	800d4b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d422:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d426:	9300      	str	r3, [sp, #0]
 800d428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d42a:	2200      	movs	r2, #0
 800d42c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f000 f857 	bl	800d4e4 <UART_WaitOnFlagUntilTimeout>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d03c      	beq.n	800d4b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d444:	e853 3f00 	ldrex	r3, [r3]
 800d448:	623b      	str	r3, [r7, #32]
   return(result);
 800d44a:	6a3b      	ldr	r3, [r7, #32]
 800d44c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d450:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	461a      	mov	r2, r3
 800d458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d45a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d45c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d45e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d462:	e841 2300 	strex	r3, r2, [r1]
 800d466:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d1e6      	bne.n	800d43c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	3308      	adds	r3, #8
 800d474:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	e853 3f00 	ldrex	r3, [r3]
 800d47c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f023 0301 	bic.w	r3, r3, #1
 800d484:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	3308      	adds	r3, #8
 800d48c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d48e:	61fa      	str	r2, [r7, #28]
 800d490:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d492:	69b9      	ldr	r1, [r7, #24]
 800d494:	69fa      	ldr	r2, [r7, #28]
 800d496:	e841 2300 	strex	r3, r2, [r1]
 800d49a:	617b      	str	r3, [r7, #20]
   return(result);
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d1e5      	bne.n	800d46e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2220      	movs	r2, #32
 800d4a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4b2:	2303      	movs	r3, #3
 800d4b4:	e012      	b.n	800d4dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2220      	movs	r2, #32
 800d4ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2220      	movs	r2, #32
 800d4c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3758      	adds	r7, #88	@ 0x58
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	603b      	str	r3, [r7, #0]
 800d4f0:	4613      	mov	r3, r2
 800d4f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4f4:	e04f      	b.n	800d596 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d4f6:	69bb      	ldr	r3, [r7, #24]
 800d4f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d4fc:	d04b      	beq.n	800d596 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4fe:	f7f6 fe97 	bl	8004230 <HAL_GetTick>
 800d502:	4602      	mov	r2, r0
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	1ad3      	subs	r3, r2, r3
 800d508:	69ba      	ldr	r2, [r7, #24]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d302      	bcc.n	800d514 <UART_WaitOnFlagUntilTimeout+0x30>
 800d50e:	69bb      	ldr	r3, [r7, #24]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d101      	bne.n	800d518 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d514:	2303      	movs	r3, #3
 800d516:	e04e      	b.n	800d5b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f003 0304 	and.w	r3, r3, #4
 800d522:	2b00      	cmp	r3, #0
 800d524:	d037      	beq.n	800d596 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	2b80      	cmp	r3, #128	@ 0x80
 800d52a:	d034      	beq.n	800d596 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	2b40      	cmp	r3, #64	@ 0x40
 800d530:	d031      	beq.n	800d596 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	69db      	ldr	r3, [r3, #28]
 800d538:	f003 0308 	and.w	r3, r3, #8
 800d53c:	2b08      	cmp	r3, #8
 800d53e:	d110      	bne.n	800d562 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	2208      	movs	r2, #8
 800d546:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d548:	68f8      	ldr	r0, [r7, #12]
 800d54a:	f000 f838 	bl	800d5be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2208      	movs	r2, #8
 800d552:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2200      	movs	r2, #0
 800d55a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d55e:	2301      	movs	r3, #1
 800d560:	e029      	b.n	800d5b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	69db      	ldr	r3, [r3, #28]
 800d568:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d56c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d570:	d111      	bne.n	800d596 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d57a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f000 f81e 	bl	800d5be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2220      	movs	r2, #32
 800d586:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	2200      	movs	r2, #0
 800d58e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d592:	2303      	movs	r3, #3
 800d594:	e00f      	b.n	800d5b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	69da      	ldr	r2, [r3, #28]
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	4013      	ands	r3, r2
 800d5a0:	68ba      	ldr	r2, [r7, #8]
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	bf0c      	ite	eq
 800d5a6:	2301      	moveq	r3, #1
 800d5a8:	2300      	movne	r3, #0
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	79fb      	ldrb	r3, [r7, #7]
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d0a0      	beq.n	800d4f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d5b4:	2300      	movs	r3, #0
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3710      	adds	r7, #16
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d5be:	b480      	push	{r7}
 800d5c0:	b095      	sub	sp, #84	@ 0x54
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5ce:	e853 3f00 	ldrex	r3, [r3]
 800d5d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d5da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800d5e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d5ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d5ec:	e841 2300 	strex	r3, r2, [r1]
 800d5f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d1e6      	bne.n	800d5c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	3308      	adds	r3, #8
 800d5fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d600:	6a3b      	ldr	r3, [r7, #32]
 800d602:	e853 3f00 	ldrex	r3, [r3]
 800d606:	61fb      	str	r3, [r7, #28]
   return(result);
 800d608:	69fb      	ldr	r3, [r7, #28]
 800d60a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d60e:	f023 0301 	bic.w	r3, r3, #1
 800d612:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	3308      	adds	r3, #8
 800d61a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d61c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d61e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d620:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d624:	e841 2300 	strex	r3, r2, [r1]
 800d628:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d1e3      	bne.n	800d5f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d634:	2b01      	cmp	r3, #1
 800d636:	d118      	bne.n	800d66a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	e853 3f00 	ldrex	r3, [r3]
 800d644:	60bb      	str	r3, [r7, #8]
   return(result);
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	f023 0310 	bic.w	r3, r3, #16
 800d64c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	461a      	mov	r2, r3
 800d654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d656:	61bb      	str	r3, [r7, #24]
 800d658:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d65a:	6979      	ldr	r1, [r7, #20]
 800d65c:	69ba      	ldr	r2, [r7, #24]
 800d65e:	e841 2300 	strex	r3, r2, [r1]
 800d662:	613b      	str	r3, [r7, #16]
   return(result);
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d1e6      	bne.n	800d638 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2220      	movs	r2, #32
 800d66e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2200      	movs	r2, #0
 800d676:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2200      	movs	r2, #0
 800d67c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d67e:	bf00      	nop
 800d680:	3754      	adds	r7, #84	@ 0x54
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr

0800d68a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b084      	sub	sp, #16
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d696:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2200      	movs	r2, #0
 800d69c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d6a0:	68f8      	ldr	r0, [r7, #12]
 800d6a2:	f7ff fac1 	bl	800cc28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6a6:	bf00      	nop
 800d6a8:	3710      	adds	r7, #16
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b088      	sub	sp, #32
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	e853 3f00 	ldrex	r3, [r3]
 800d6c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d6ca:	61fb      	str	r3, [r7, #28]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	61bb      	str	r3, [r7, #24]
 800d6d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6d8:	6979      	ldr	r1, [r7, #20]
 800d6da:	69ba      	ldr	r2, [r7, #24]
 800d6dc:	e841 2300 	strex	r3, r2, [r1]
 800d6e0:	613b      	str	r3, [r7, #16]
   return(result);
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d1e6      	bne.n	800d6b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2220      	movs	r2, #32
 800d6ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f7ff fa8c 	bl	800cc14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6fc:	bf00      	nop
 800d6fe:	3720      	adds	r7, #32
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d704:	b480      	push	{r7}
 800d706:	b083      	sub	sp, #12
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d70c:	bf00      	nop
 800d70e:	370c      	adds	r7, #12
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr

0800d718 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d718:	b480      	push	{r7}
 800d71a:	b083      	sub	sp, #12
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d720:	bf00      	nop
 800d722:	370c      	adds	r7, #12
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr

0800d72c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d734:	bf00      	nop
 800d736:	370c      	adds	r7, #12
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr

0800d740 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d740:	b480      	push	{r7}
 800d742:	b085      	sub	sp, #20
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d74e:	2b01      	cmp	r3, #1
 800d750:	d101      	bne.n	800d756 <HAL_UARTEx_DisableFifoMode+0x16>
 800d752:	2302      	movs	r3, #2
 800d754:	e027      	b.n	800d7a6 <HAL_UARTEx_DisableFifoMode+0x66>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2201      	movs	r2, #1
 800d75a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2224      	movs	r2, #36	@ 0x24
 800d762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f022 0201 	bic.w	r2, r2, #1
 800d77c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d784:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	68fa      	ldr	r2, [r7, #12]
 800d792:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2220      	movs	r2, #32
 800d798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d7a4:	2300      	movs	r3, #0
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3714      	adds	r7, #20
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr

0800d7b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b084      	sub	sp, #16
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
 800d7ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d7c2:	2b01      	cmp	r3, #1
 800d7c4:	d101      	bne.n	800d7ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d7c6:	2302      	movs	r3, #2
 800d7c8:	e02d      	b.n	800d826 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2224      	movs	r2, #36	@ 0x24
 800d7d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f022 0201 	bic.w	r2, r2, #1
 800d7f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	689b      	ldr	r3, [r3, #8]
 800d7f8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	683a      	ldr	r2, [r7, #0]
 800d802:	430a      	orrs	r2, r1
 800d804:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f000 f850 	bl	800d8ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2220      	movs	r2, #32
 800d818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d824:	2300      	movs	r3, #0
}
 800d826:	4618      	mov	r0, r3
 800d828:	3710      	adds	r7, #16
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}

0800d82e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d82e:	b580      	push	{r7, lr}
 800d830:	b084      	sub	sp, #16
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
 800d836:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d101      	bne.n	800d846 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d842:	2302      	movs	r3, #2
 800d844:	e02d      	b.n	800d8a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2201      	movs	r2, #1
 800d84a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2224      	movs	r2, #36	@ 0x24
 800d852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f022 0201 	bic.w	r2, r2, #1
 800d86c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	689b      	ldr	r3, [r3, #8]
 800d874:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	683a      	ldr	r2, [r7, #0]
 800d87e:	430a      	orrs	r2, r1
 800d880:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f000 f812 	bl	800d8ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	68fa      	ldr	r2, [r7, #12]
 800d88e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2220      	movs	r2, #32
 800d894:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2200      	movs	r2, #0
 800d89c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d8a0:	2300      	movs	r3, #0
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
	...

0800d8ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d108      	bne.n	800d8ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2201      	movs	r2, #1
 800d8c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d8cc:	e031      	b.n	800d932 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d8ce:	2308      	movs	r3, #8
 800d8d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d8d2:	2308      	movs	r3, #8
 800d8d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	689b      	ldr	r3, [r3, #8]
 800d8dc:	0e5b      	lsrs	r3, r3, #25
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	f003 0307 	and.w	r3, r3, #7
 800d8e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	0f5b      	lsrs	r3, r3, #29
 800d8ee:	b2db      	uxtb	r3, r3
 800d8f0:	f003 0307 	and.w	r3, r3, #7
 800d8f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d8f6:	7bbb      	ldrb	r3, [r7, #14]
 800d8f8:	7b3a      	ldrb	r2, [r7, #12]
 800d8fa:	4911      	ldr	r1, [pc, #68]	@ (800d940 <UARTEx_SetNbDataToProcess+0x94>)
 800d8fc:	5c8a      	ldrb	r2, [r1, r2]
 800d8fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d902:	7b3a      	ldrb	r2, [r7, #12]
 800d904:	490f      	ldr	r1, [pc, #60]	@ (800d944 <UARTEx_SetNbDataToProcess+0x98>)
 800d906:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d908:	fb93 f3f2 	sdiv	r3, r3, r2
 800d90c:	b29a      	uxth	r2, r3
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d914:	7bfb      	ldrb	r3, [r7, #15]
 800d916:	7b7a      	ldrb	r2, [r7, #13]
 800d918:	4909      	ldr	r1, [pc, #36]	@ (800d940 <UARTEx_SetNbDataToProcess+0x94>)
 800d91a:	5c8a      	ldrb	r2, [r1, r2]
 800d91c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d920:	7b7a      	ldrb	r2, [r7, #13]
 800d922:	4908      	ldr	r1, [pc, #32]	@ (800d944 <UARTEx_SetNbDataToProcess+0x98>)
 800d924:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d926:	fb93 f3f2 	sdiv	r3, r3, r2
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d932:	bf00      	nop
 800d934:	3714      	adds	r7, #20
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr
 800d93e:	bf00      	nop
 800d940:	080158c0 	.word	0x080158c0
 800d944:	080158c8 	.word	0x080158c8

0800d948 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800d948:	b480      	push	{r7}
 800d94a:	b085      	sub	sp, #20
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d958:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800d95c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	b29a      	uxth	r2, r3
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d968:	2300      	movs	r3, #0
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3714      	adds	r7, #20
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr

0800d976 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d976:	b480      	push	{r7}
 800d978:	b085      	sub	sp, #20
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d97e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800d982:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d98a:	b29a      	uxth	r2, r3
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	b29b      	uxth	r3, r3
 800d990:	43db      	mvns	r3, r3
 800d992:	b29b      	uxth	r3, r3
 800d994:	4013      	ands	r3, r2
 800d996:	b29a      	uxth	r2, r3
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d99e:	2300      	movs	r3, #0
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3714      	adds	r7, #20
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr

0800d9ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b085      	sub	sp, #20
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	60f8      	str	r0, [r7, #12]
 800d9b4:	1d3b      	adds	r3, r7, #4
 800d9b6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2201      	movs	r2, #1
 800d9be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800d9da:	2300      	movs	r3, #0
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3714      	adds	r7, #20
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr

0800d9e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b0a7      	sub	sp, #156	@ 0x9c
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d9f8:	687a      	ldr	r2, [r7, #4]
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	009b      	lsls	r3, r3, #2
 800da00:	4413      	add	r3, r2
 800da02:	881b      	ldrh	r3, [r3, #0]
 800da04:	b29b      	uxth	r3, r3
 800da06:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800da0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da0e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	78db      	ldrb	r3, [r3, #3]
 800da16:	2b03      	cmp	r3, #3
 800da18:	d81f      	bhi.n	800da5a <USB_ActivateEndpoint+0x72>
 800da1a:	a201      	add	r2, pc, #4	@ (adr r2, 800da20 <USB_ActivateEndpoint+0x38>)
 800da1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da20:	0800da31 	.word	0x0800da31
 800da24:	0800da4d 	.word	0x0800da4d
 800da28:	0800da63 	.word	0x0800da63
 800da2c:	0800da3f 	.word	0x0800da3f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800da30:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800da34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800da38:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800da3c:	e012      	b.n	800da64 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800da3e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800da42:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800da46:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800da4a:	e00b      	b.n	800da64 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800da4c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800da50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800da54:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800da58:	e004      	b.n	800da64 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800da5a:	2301      	movs	r3, #1
 800da5c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800da60:	e000      	b.n	800da64 <USB_ActivateEndpoint+0x7c>
      break;
 800da62:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	441a      	add	r2, r3
 800da6e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800da72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da82:	b29b      	uxth	r3, r3
 800da84:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800da86:	687a      	ldr	r2, [r7, #4]
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	009b      	lsls	r3, r3, #2
 800da8e:	4413      	add	r3, r2
 800da90:	881b      	ldrh	r3, [r3, #0]
 800da92:	b29b      	uxth	r3, r3
 800da94:	b21b      	sxth	r3, r3
 800da96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da9e:	b21a      	sxth	r2, r3
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	b21b      	sxth	r3, r3
 800daa6:	4313      	orrs	r3, r2
 800daa8:	b21b      	sxth	r3, r3
 800daaa:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	441a      	add	r2, r3
 800dab8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800dabc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dac0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dac4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dacc:	b29b      	uxth	r3, r3
 800dace:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	7b1b      	ldrb	r3, [r3, #12]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f040 8180 	bne.w	800ddda <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	785b      	ldrb	r3, [r3, #1]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	f000 8084 	beq.w	800dbec <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	61bb      	str	r3, [r7, #24]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800daee:	b29b      	uxth	r3, r3
 800daf0:	461a      	mov	r2, r3
 800daf2:	69bb      	ldr	r3, [r7, #24]
 800daf4:	4413      	add	r3, r2
 800daf6:	61bb      	str	r3, [r7, #24]
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	00da      	lsls	r2, r3, #3
 800dafe:	69bb      	ldr	r3, [r7, #24]
 800db00:	4413      	add	r3, r2
 800db02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800db06:	617b      	str	r3, [r7, #20]
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	88db      	ldrh	r3, [r3, #6]
 800db0c:	085b      	lsrs	r3, r3, #1
 800db0e:	b29b      	uxth	r3, r3
 800db10:	005b      	lsls	r3, r3, #1
 800db12:	b29a      	uxth	r2, r3
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	009b      	lsls	r3, r3, #2
 800db20:	4413      	add	r3, r2
 800db22:	881b      	ldrh	r3, [r3, #0]
 800db24:	827b      	strh	r3, [r7, #18]
 800db26:	8a7b      	ldrh	r3, [r7, #18]
 800db28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d01b      	beq.n	800db68 <USB_ActivateEndpoint+0x180>
 800db30:	687a      	ldr	r2, [r7, #4]
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	4413      	add	r3, r2
 800db3a:	881b      	ldrh	r3, [r3, #0]
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db46:	823b      	strh	r3, [r7, #16]
 800db48:	687a      	ldr	r2, [r7, #4]
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	009b      	lsls	r3, r3, #2
 800db50:	441a      	add	r2, r3
 800db52:	8a3b      	ldrh	r3, [r7, #16]
 800db54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800db64:	b29b      	uxth	r3, r3
 800db66:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	78db      	ldrb	r3, [r3, #3]
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	d020      	beq.n	800dbb2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	4413      	add	r3, r2
 800db7a:	881b      	ldrh	r3, [r3, #0]
 800db7c:	b29b      	uxth	r3, r3
 800db7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db86:	81bb      	strh	r3, [r7, #12]
 800db88:	89bb      	ldrh	r3, [r7, #12]
 800db8a:	f083 0320 	eor.w	r3, r3, #32
 800db8e:	81bb      	strh	r3, [r7, #12]
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	441a      	add	r2, r3
 800db9a:	89bb      	ldrh	r3, [r7, #12]
 800db9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dba0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dba4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	8013      	strh	r3, [r2, #0]
 800dbb0:	e3f9      	b.n	800e3a6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	4413      	add	r3, r2
 800dbbc:	881b      	ldrh	r3, [r3, #0]
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dbc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dbc8:	81fb      	strh	r3, [r7, #14]
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	009b      	lsls	r3, r3, #2
 800dbd2:	441a      	add	r2, r3
 800dbd4:	89fb      	ldrh	r3, [r7, #14]
 800dbd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dbda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dbde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dbe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	8013      	strh	r3, [r2, #0]
 800dbea:	e3dc      	b.n	800e3a6 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	633b      	str	r3, [r7, #48]	@ 0x30
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbfc:	4413      	add	r3, r2
 800dbfe:	633b      	str	r3, [r7, #48]	@ 0x30
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	00da      	lsls	r2, r3, #3
 800dc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc08:	4413      	add	r3, r2
 800dc0a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800dc0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	88db      	ldrh	r3, [r3, #6]
 800dc14:	085b      	lsrs	r3, r3, #1
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	005b      	lsls	r3, r3, #1
 800dc1a:	b29a      	uxth	r2, r3
 800dc1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc1e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc30:	4413      	add	r3, r2
 800dc32:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	00da      	lsls	r2, r3, #3
 800dc3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc3c:	4413      	add	r3, r2
 800dc3e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dc42:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc46:	881b      	ldrh	r3, [r3, #0]
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc4e:	b29a      	uxth	r2, r3
 800dc50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc52:	801a      	strh	r2, [r3, #0]
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	691b      	ldr	r3, [r3, #16]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d10a      	bne.n	800dc72 <USB_ActivateEndpoint+0x28a>
 800dc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc5e:	881b      	ldrh	r3, [r3, #0]
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc6a:	b29a      	uxth	r2, r3
 800dc6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc6e:	801a      	strh	r2, [r3, #0]
 800dc70:	e041      	b.n	800dcf6 <USB_ActivateEndpoint+0x30e>
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	691b      	ldr	r3, [r3, #16]
 800dc76:	2b3e      	cmp	r3, #62	@ 0x3e
 800dc78:	d81c      	bhi.n	800dcb4 <USB_ActivateEndpoint+0x2cc>
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	691b      	ldr	r3, [r3, #16]
 800dc7e:	085b      	lsrs	r3, r3, #1
 800dc80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	691b      	ldr	r3, [r3, #16]
 800dc88:	f003 0301 	and.w	r3, r3, #1
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d004      	beq.n	800dc9a <USB_ActivateEndpoint+0x2b2>
 800dc90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dc94:	3301      	adds	r3, #1
 800dc96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc9c:	881b      	ldrh	r3, [r3, #0]
 800dc9e:	b29a      	uxth	r2, r3
 800dca0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	029b      	lsls	r3, r3, #10
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	b29a      	uxth	r2, r3
 800dcae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcb0:	801a      	strh	r2, [r3, #0]
 800dcb2:	e020      	b.n	800dcf6 <USB_ActivateEndpoint+0x30e>
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	691b      	ldr	r3, [r3, #16]
 800dcb8:	095b      	lsrs	r3, r3, #5
 800dcba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	691b      	ldr	r3, [r3, #16]
 800dcc2:	f003 031f 	and.w	r3, r3, #31
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d104      	bne.n	800dcd4 <USB_ActivateEndpoint+0x2ec>
 800dcca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dcce:	3b01      	subs	r3, #1
 800dcd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dcd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcd6:	881b      	ldrh	r3, [r3, #0]
 800dcd8:	b29a      	uxth	r2, r3
 800dcda:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	029b      	lsls	r3, r3, #10
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	4313      	orrs	r3, r2
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcf0:	b29a      	uxth	r2, r3
 800dcf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcf4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	009b      	lsls	r3, r3, #2
 800dcfe:	4413      	add	r3, r2
 800dd00:	881b      	ldrh	r3, [r3, #0]
 800dd02:	847b      	strh	r3, [r7, #34]	@ 0x22
 800dd04:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dd06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d01b      	beq.n	800dd46 <USB_ActivateEndpoint+0x35e>
 800dd0e:	687a      	ldr	r2, [r7, #4]
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	4413      	add	r3, r2
 800dd18:	881b      	ldrh	r3, [r3, #0]
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dd20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd24:	843b      	strh	r3, [r7, #32]
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	009b      	lsls	r3, r3, #2
 800dd2e:	441a      	add	r2, r3
 800dd30:	8c3b      	ldrh	r3, [r7, #32]
 800dd32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dd3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd42:	b29b      	uxth	r3, r3
 800dd44:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d124      	bne.n	800dd98 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	4413      	add	r3, r2
 800dd58:	881b      	ldrh	r3, [r3, #0]
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dd60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd64:	83bb      	strh	r3, [r7, #28]
 800dd66:	8bbb      	ldrh	r3, [r7, #28]
 800dd68:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800dd6c:	83bb      	strh	r3, [r7, #28]
 800dd6e:	8bbb      	ldrh	r3, [r7, #28]
 800dd70:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800dd74:	83bb      	strh	r3, [r7, #28]
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	009b      	lsls	r3, r3, #2
 800dd7e:	441a      	add	r2, r3
 800dd80:	8bbb      	ldrh	r3, [r7, #28]
 800dd82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	8013      	strh	r3, [r2, #0]
 800dd96:	e306      	b.n	800e3a6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	009b      	lsls	r3, r3, #2
 800dda0:	4413      	add	r3, r2
 800dda2:	881b      	ldrh	r3, [r3, #0]
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ddaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ddae:	83fb      	strh	r3, [r7, #30]
 800ddb0:	8bfb      	ldrh	r3, [r7, #30]
 800ddb2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ddb6:	83fb      	strh	r3, [r7, #30]
 800ddb8:	687a      	ldr	r2, [r7, #4]
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	009b      	lsls	r3, r3, #2
 800ddc0:	441a      	add	r2, r3
 800ddc2:	8bfb      	ldrh	r3, [r7, #30]
 800ddc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ddc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ddcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ddd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	8013      	strh	r3, [r2, #0]
 800ddd8:	e2e5      	b.n	800e3a6 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	78db      	ldrb	r3, [r3, #3]
 800ddde:	2b02      	cmp	r3, #2
 800dde0:	d11e      	bne.n	800de20 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800dde2:	687a      	ldr	r2, [r7, #4]
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	009b      	lsls	r3, r3, #2
 800ddea:	4413      	add	r3, r2
 800ddec:	881b      	ldrh	r3, [r3, #0]
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ddf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ddf8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	009b      	lsls	r3, r3, #2
 800de04:	441a      	add	r2, r3
 800de06:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800de0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800de0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800de12:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800de16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de1a:	b29b      	uxth	r3, r3
 800de1c:	8013      	strh	r3, [r2, #0]
 800de1e:	e01d      	b.n	800de5c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800de20:	687a      	ldr	r2, [r7, #4]
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	009b      	lsls	r3, r3, #2
 800de28:	4413      	add	r3, r2
 800de2a:	881b      	ldrh	r3, [r3, #0]
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800de32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de36:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800de3a:	687a      	ldr	r2, [r7, #4]
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	441a      	add	r2, r3
 800de44:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800de48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800de4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800de50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de58:	b29b      	uxth	r3, r3
 800de5a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de66:	b29b      	uxth	r3, r3
 800de68:	461a      	mov	r2, r3
 800de6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800de6c:	4413      	add	r3, r2
 800de6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	00da      	lsls	r2, r3, #3
 800de76:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800de78:	4413      	add	r3, r2
 800de7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800de7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	891b      	ldrh	r3, [r3, #8]
 800de84:	085b      	lsrs	r3, r3, #1
 800de86:	b29b      	uxth	r3, r3
 800de88:	005b      	lsls	r3, r3, #1
 800de8a:	b29a      	uxth	r2, r3
 800de8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de8e:	801a      	strh	r2, [r3, #0]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	677b      	str	r3, [r7, #116]	@ 0x74
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	461a      	mov	r2, r3
 800de9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dea0:	4413      	add	r3, r2
 800dea2:	677b      	str	r3, [r7, #116]	@ 0x74
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	781b      	ldrb	r3, [r3, #0]
 800dea8:	00da      	lsls	r2, r3, #3
 800deaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800deac:	4413      	add	r3, r2
 800deae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800deb2:	673b      	str	r3, [r7, #112]	@ 0x70
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	895b      	ldrh	r3, [r3, #10]
 800deb8:	085b      	lsrs	r3, r3, #1
 800deba:	b29b      	uxth	r3, r3
 800debc:	005b      	lsls	r3, r3, #1
 800debe:	b29a      	uxth	r2, r3
 800dec0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dec2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	785b      	ldrb	r3, [r3, #1]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	f040 81af 	bne.w	800e22c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dece:	687a      	ldr	r2, [r7, #4]
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	009b      	lsls	r3, r3, #2
 800ded6:	4413      	add	r3, r2
 800ded8:	881b      	ldrh	r3, [r3, #0]
 800deda:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800dede:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800dee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d01d      	beq.n	800df26 <USB_ActivateEndpoint+0x53e>
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	009b      	lsls	r3, r3, #2
 800def2:	4413      	add	r3, r2
 800def4:	881b      	ldrh	r3, [r3, #0]
 800def6:	b29b      	uxth	r3, r3
 800def8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800defc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df00:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800df04:	687a      	ldr	r2, [r7, #4]
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	441a      	add	r2, r3
 800df0e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800df12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800df1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800df1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df22:	b29b      	uxth	r3, r3
 800df24:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800df26:	687a      	ldr	r2, [r7, #4]
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	4413      	add	r3, r2
 800df30:	881b      	ldrh	r3, [r3, #0]
 800df32:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800df36:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800df3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d01d      	beq.n	800df7e <USB_ActivateEndpoint+0x596>
 800df42:	687a      	ldr	r2, [r7, #4]
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	009b      	lsls	r3, r3, #2
 800df4a:	4413      	add	r3, r2
 800df4c:	881b      	ldrh	r3, [r3, #0]
 800df4e:	b29b      	uxth	r3, r3
 800df50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800df54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df58:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	441a      	add	r2, r3
 800df66:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800df6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800df72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	785b      	ldrb	r3, [r3, #1]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d16b      	bne.n	800e05e <USB_ActivateEndpoint+0x676>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df90:	b29b      	uxth	r3, r3
 800df92:	461a      	mov	r2, r3
 800df94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df96:	4413      	add	r3, r2
 800df98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	00da      	lsls	r2, r3, #3
 800dfa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfa2:	4413      	add	r3, r2
 800dfa4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dfa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dfaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfac:	881b      	ldrh	r3, [r3, #0]
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dfb4:	b29a      	uxth	r2, r3
 800dfb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfb8:	801a      	strh	r2, [r3, #0]
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	691b      	ldr	r3, [r3, #16]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d10a      	bne.n	800dfd8 <USB_ActivateEndpoint+0x5f0>
 800dfc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfc4:	881b      	ldrh	r3, [r3, #0]
 800dfc6:	b29b      	uxth	r3, r3
 800dfc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dfcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dfd0:	b29a      	uxth	r2, r3
 800dfd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfd4:	801a      	strh	r2, [r3, #0]
 800dfd6:	e05d      	b.n	800e094 <USB_ActivateEndpoint+0x6ac>
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	691b      	ldr	r3, [r3, #16]
 800dfdc:	2b3e      	cmp	r3, #62	@ 0x3e
 800dfde:	d81c      	bhi.n	800e01a <USB_ActivateEndpoint+0x632>
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	691b      	ldr	r3, [r3, #16]
 800dfe4:	085b      	lsrs	r3, r3, #1
 800dfe6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	691b      	ldr	r3, [r3, #16]
 800dfee:	f003 0301 	and.w	r3, r3, #1
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d004      	beq.n	800e000 <USB_ActivateEndpoint+0x618>
 800dff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dffa:	3301      	adds	r3, #1
 800dffc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e000:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e002:	881b      	ldrh	r3, [r3, #0]
 800e004:	b29a      	uxth	r2, r3
 800e006:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	029b      	lsls	r3, r3, #10
 800e00e:	b29b      	uxth	r3, r3
 800e010:	4313      	orrs	r3, r2
 800e012:	b29a      	uxth	r2, r3
 800e014:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e016:	801a      	strh	r2, [r3, #0]
 800e018:	e03c      	b.n	800e094 <USB_ActivateEndpoint+0x6ac>
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	691b      	ldr	r3, [r3, #16]
 800e01e:	095b      	lsrs	r3, r3, #5
 800e020:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	691b      	ldr	r3, [r3, #16]
 800e028:	f003 031f 	and.w	r3, r3, #31
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d104      	bne.n	800e03a <USB_ActivateEndpoint+0x652>
 800e030:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e034:	3b01      	subs	r3, #1
 800e036:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e03a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e03c:	881b      	ldrh	r3, [r3, #0]
 800e03e:	b29a      	uxth	r2, r3
 800e040:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e044:	b29b      	uxth	r3, r3
 800e046:	029b      	lsls	r3, r3, #10
 800e048:	b29b      	uxth	r3, r3
 800e04a:	4313      	orrs	r3, r2
 800e04c:	b29b      	uxth	r3, r3
 800e04e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e056:	b29a      	uxth	r2, r3
 800e058:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e05a:	801a      	strh	r2, [r3, #0]
 800e05c:	e01a      	b.n	800e094 <USB_ActivateEndpoint+0x6ac>
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	785b      	ldrb	r3, [r3, #1]
 800e062:	2b01      	cmp	r3, #1
 800e064:	d116      	bne.n	800e094 <USB_ActivateEndpoint+0x6ac>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	657b      	str	r3, [r7, #84]	@ 0x54
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e070:	b29b      	uxth	r3, r3
 800e072:	461a      	mov	r2, r3
 800e074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e076:	4413      	add	r3, r2
 800e078:	657b      	str	r3, [r7, #84]	@ 0x54
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	00da      	lsls	r2, r3, #3
 800e080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e082:	4413      	add	r3, r2
 800e084:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e088:	653b      	str	r3, [r7, #80]	@ 0x50
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	691b      	ldr	r3, [r3, #16]
 800e08e:	b29a      	uxth	r2, r3
 800e090:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e092:	801a      	strh	r2, [r3, #0]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	647b      	str	r3, [r7, #68]	@ 0x44
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	785b      	ldrb	r3, [r3, #1]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d16b      	bne.n	800e178 <USB_ActivateEndpoint+0x790>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e0aa:	b29b      	uxth	r3, r3
 800e0ac:	461a      	mov	r2, r3
 800e0ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0b0:	4413      	add	r3, r2
 800e0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	00da      	lsls	r2, r3, #3
 800e0ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0bc:	4413      	add	r3, r2
 800e0be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e0c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0c6:	881b      	ldrh	r3, [r3, #0]
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e0ce:	b29a      	uxth	r2, r3
 800e0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0d2:	801a      	strh	r2, [r3, #0]
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	691b      	ldr	r3, [r3, #16]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d10a      	bne.n	800e0f2 <USB_ActivateEndpoint+0x70a>
 800e0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0de:	881b      	ldrh	r3, [r3, #0]
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0ea:	b29a      	uxth	r2, r3
 800e0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ee:	801a      	strh	r2, [r3, #0]
 800e0f0:	e05b      	b.n	800e1aa <USB_ActivateEndpoint+0x7c2>
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	691b      	ldr	r3, [r3, #16]
 800e0f6:	2b3e      	cmp	r3, #62	@ 0x3e
 800e0f8:	d81c      	bhi.n	800e134 <USB_ActivateEndpoint+0x74c>
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	691b      	ldr	r3, [r3, #16]
 800e0fe:	085b      	lsrs	r3, r3, #1
 800e100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	691b      	ldr	r3, [r3, #16]
 800e108:	f003 0301 	and.w	r3, r3, #1
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d004      	beq.n	800e11a <USB_ActivateEndpoint+0x732>
 800e110:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e114:	3301      	adds	r3, #1
 800e116:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e11c:	881b      	ldrh	r3, [r3, #0]
 800e11e:	b29a      	uxth	r2, r3
 800e120:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e124:	b29b      	uxth	r3, r3
 800e126:	029b      	lsls	r3, r3, #10
 800e128:	b29b      	uxth	r3, r3
 800e12a:	4313      	orrs	r3, r2
 800e12c:	b29a      	uxth	r2, r3
 800e12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e130:	801a      	strh	r2, [r3, #0]
 800e132:	e03a      	b.n	800e1aa <USB_ActivateEndpoint+0x7c2>
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	691b      	ldr	r3, [r3, #16]
 800e138:	095b      	lsrs	r3, r3, #5
 800e13a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	691b      	ldr	r3, [r3, #16]
 800e142:	f003 031f 	and.w	r3, r3, #31
 800e146:	2b00      	cmp	r3, #0
 800e148:	d104      	bne.n	800e154 <USB_ActivateEndpoint+0x76c>
 800e14a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e14e:	3b01      	subs	r3, #1
 800e150:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e156:	881b      	ldrh	r3, [r3, #0]
 800e158:	b29a      	uxth	r2, r3
 800e15a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e15e:	b29b      	uxth	r3, r3
 800e160:	029b      	lsls	r3, r3, #10
 800e162:	b29b      	uxth	r3, r3
 800e164:	4313      	orrs	r3, r2
 800e166:	b29b      	uxth	r3, r3
 800e168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e16c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e170:	b29a      	uxth	r2, r3
 800e172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e174:	801a      	strh	r2, [r3, #0]
 800e176:	e018      	b.n	800e1aa <USB_ActivateEndpoint+0x7c2>
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	785b      	ldrb	r3, [r3, #1]
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d114      	bne.n	800e1aa <USB_ActivateEndpoint+0x7c2>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e186:	b29b      	uxth	r3, r3
 800e188:	461a      	mov	r2, r3
 800e18a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e18c:	4413      	add	r3, r2
 800e18e:	647b      	str	r3, [r7, #68]	@ 0x44
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	00da      	lsls	r2, r3, #3
 800e196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e198:	4413      	add	r3, r2
 800e19a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e19e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	691b      	ldr	r3, [r3, #16]
 800e1a4:	b29a      	uxth	r2, r3
 800e1a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1a8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e1aa:	687a      	ldr	r2, [r7, #4]
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	009b      	lsls	r3, r3, #2
 800e1b2:	4413      	add	r3, r2
 800e1b4:	881b      	ldrh	r3, [r3, #0]
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e1bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e1c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e1c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e1c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e1c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e1ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e1cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e1d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	009b      	lsls	r3, r3, #2
 800e1da:	441a      	add	r2, r3
 800e1dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e1de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e1e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e1e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e1f2:	687a      	ldr	r2, [r7, #4]
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	009b      	lsls	r3, r3, #2
 800e1fa:	4413      	add	r3, r2
 800e1fc:	881b      	ldrh	r3, [r3, #0]
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e204:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e208:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	441a      	add	r2, r3
 800e214:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800e216:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e21a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e21e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e226:	b29b      	uxth	r3, r3
 800e228:	8013      	strh	r3, [r2, #0]
 800e22a:	e0bc      	b.n	800e3a6 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e22c:	687a      	ldr	r2, [r7, #4]
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	009b      	lsls	r3, r3, #2
 800e234:	4413      	add	r3, r2
 800e236:	881b      	ldrh	r3, [r3, #0]
 800e238:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800e23c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e240:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e244:	2b00      	cmp	r3, #0
 800e246:	d01d      	beq.n	800e284 <USB_ActivateEndpoint+0x89c>
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	009b      	lsls	r3, r3, #2
 800e250:	4413      	add	r3, r2
 800e252:	881b      	ldrh	r3, [r3, #0]
 800e254:	b29b      	uxth	r3, r3
 800e256:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e25a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e25e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800e262:	687a      	ldr	r2, [r7, #4]
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	009b      	lsls	r3, r3, #2
 800e26a:	441a      	add	r2, r3
 800e26c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e270:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e274:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e278:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e27c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e280:	b29b      	uxth	r3, r3
 800e282:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	009b      	lsls	r3, r3, #2
 800e28c:	4413      	add	r3, r2
 800e28e:	881b      	ldrh	r3, [r3, #0]
 800e290:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800e294:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800e298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d01d      	beq.n	800e2dc <USB_ActivateEndpoint+0x8f4>
 800e2a0:	687a      	ldr	r2, [r7, #4]
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	009b      	lsls	r3, r3, #2
 800e2a8:	4413      	add	r3, r2
 800e2aa:	881b      	ldrh	r3, [r3, #0]
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e2b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e2b6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800e2ba:	687a      	ldr	r2, [r7, #4]
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	009b      	lsls	r3, r3, #2
 800e2c2:	441a      	add	r2, r3
 800e2c4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800e2c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e2cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e2d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e2d8:	b29b      	uxth	r3, r3
 800e2da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	78db      	ldrb	r3, [r3, #3]
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d024      	beq.n	800e32e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	4413      	add	r3, r2
 800e2ee:	881b      	ldrh	r3, [r3, #0]
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e2f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e2fa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800e2fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800e302:	f083 0320 	eor.w	r3, r3, #32
 800e306:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800e30a:	687a      	ldr	r2, [r7, #4]
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	009b      	lsls	r3, r3, #2
 800e312:	441a      	add	r2, r3
 800e314:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800e318:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e31c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e320:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e328:	b29b      	uxth	r3, r3
 800e32a:	8013      	strh	r3, [r2, #0]
 800e32c:	e01d      	b.n	800e36a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	4413      	add	r3, r2
 800e338:	881b      	ldrh	r3, [r3, #0]
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e340:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e344:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800e348:	687a      	ldr	r2, [r7, #4]
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	441a      	add	r2, r3
 800e352:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800e356:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e35a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e35e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e366:	b29b      	uxth	r3, r3
 800e368:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e36a:	687a      	ldr	r2, [r7, #4]
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	4413      	add	r3, r2
 800e374:	881b      	ldrh	r3, [r3, #0]
 800e376:	b29b      	uxth	r3, r3
 800e378:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e37c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e380:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800e384:	687a      	ldr	r2, [r7, #4]
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	781b      	ldrb	r3, [r3, #0]
 800e38a:	009b      	lsls	r3, r3, #2
 800e38c:	441a      	add	r2, r3
 800e38e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800e392:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e396:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e39a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e39e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800e3a6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	379c      	adds	r7, #156	@ 0x9c
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b4:	4770      	bx	lr
 800e3b6:	bf00      	nop

0800e3b8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b0ac      	sub	sp, #176	@ 0xb0
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	785b      	ldrb	r3, [r3, #1]
 800e3c6:	2b01      	cmp	r3, #1
 800e3c8:	f040 84ca 	bne.w	800ed60 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	699a      	ldr	r2, [r3, #24]
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	691b      	ldr	r3, [r3, #16]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d904      	bls.n	800e3e2 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	691b      	ldr	r3, [r3, #16]
 800e3dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e3e0:	e003      	b.n	800e3ea <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	699b      	ldr	r3, [r3, #24]
 800e3e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	7b1b      	ldrb	r3, [r3, #12]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d122      	bne.n	800e438 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	6959      	ldr	r1, [r3, #20]
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	88da      	ldrh	r2, [r3, #6]
 800e3fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f000 fed2 	bl	800f1aa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	613b      	str	r3, [r7, #16]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e410:	b29b      	uxth	r3, r3
 800e412:	461a      	mov	r2, r3
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	4413      	add	r3, r2
 800e418:	613b      	str	r3, [r7, #16]
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	00da      	lsls	r2, r3, #3
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	4413      	add	r3, r2
 800e424:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e428:	60fb      	str	r3, [r7, #12]
 800e42a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e42e:	b29a      	uxth	r2, r3
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	801a      	strh	r2, [r3, #0]
 800e434:	f000 bc6f 	b.w	800ed16 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	78db      	ldrb	r3, [r3, #3]
 800e43c:	2b02      	cmp	r3, #2
 800e43e:	f040 831e 	bne.w	800ea7e <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	6a1a      	ldr	r2, [r3, #32]
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	691b      	ldr	r3, [r3, #16]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	f240 82cf 	bls.w	800e9ee <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	009b      	lsls	r3, r3, #2
 800e458:	4413      	add	r3, r2
 800e45a:	881b      	ldrh	r3, [r3, #0]
 800e45c:	b29b      	uxth	r3, r3
 800e45e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e466:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800e46a:	687a      	ldr	r2, [r7, #4]
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	781b      	ldrb	r3, [r3, #0]
 800e470:	009b      	lsls	r3, r3, #2
 800e472:	441a      	add	r2, r3
 800e474:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800e478:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e47c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e480:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e484:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e488:	b29b      	uxth	r3, r3
 800e48a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	6a1a      	ldr	r2, [r3, #32]
 800e490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e494:	1ad2      	subs	r2, r2, r3
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e49a:	687a      	ldr	r2, [r7, #4]
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	009b      	lsls	r3, r3, #2
 800e4a2:	4413      	add	r3, r2
 800e4a4:	881b      	ldrh	r3, [r3, #0]
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	f000 814f 	beq.w	800e750 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	785b      	ldrb	r3, [r3, #1]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d16b      	bne.n	800e596 <USB_EPStartXfer+0x1de>
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4ce:	4413      	add	r3, r2
 800e4d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	00da      	lsls	r2, r3, #3
 800e4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4da:	4413      	add	r3, r2
 800e4dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e4e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e4:	881b      	ldrh	r3, [r3, #0]
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e4ec:	b29a      	uxth	r2, r3
 800e4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4f0:	801a      	strh	r2, [r3, #0]
 800e4f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d10a      	bne.n	800e510 <USB_EPStartXfer+0x158>
 800e4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4fc:	881b      	ldrh	r3, [r3, #0]
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e508:	b29a      	uxth	r2, r3
 800e50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e50c:	801a      	strh	r2, [r3, #0]
 800e50e:	e05b      	b.n	800e5c8 <USB_EPStartXfer+0x210>
 800e510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e514:	2b3e      	cmp	r3, #62	@ 0x3e
 800e516:	d81c      	bhi.n	800e552 <USB_EPStartXfer+0x19a>
 800e518:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e51c:	085b      	lsrs	r3, r3, #1
 800e51e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e526:	f003 0301 	and.w	r3, r3, #1
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d004      	beq.n	800e538 <USB_EPStartXfer+0x180>
 800e52e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e532:	3301      	adds	r3, #1
 800e534:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e53a:	881b      	ldrh	r3, [r3, #0]
 800e53c:	b29a      	uxth	r2, r3
 800e53e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e542:	b29b      	uxth	r3, r3
 800e544:	029b      	lsls	r3, r3, #10
 800e546:	b29b      	uxth	r3, r3
 800e548:	4313      	orrs	r3, r2
 800e54a:	b29a      	uxth	r2, r3
 800e54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e54e:	801a      	strh	r2, [r3, #0]
 800e550:	e03a      	b.n	800e5c8 <USB_EPStartXfer+0x210>
 800e552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e556:	095b      	lsrs	r3, r3, #5
 800e558:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e55c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e560:	f003 031f 	and.w	r3, r3, #31
 800e564:	2b00      	cmp	r3, #0
 800e566:	d104      	bne.n	800e572 <USB_EPStartXfer+0x1ba>
 800e568:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e56c:	3b01      	subs	r3, #1
 800e56e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e574:	881b      	ldrh	r3, [r3, #0]
 800e576:	b29a      	uxth	r2, r3
 800e578:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	029b      	lsls	r3, r3, #10
 800e580:	b29b      	uxth	r3, r3
 800e582:	4313      	orrs	r3, r2
 800e584:	b29b      	uxth	r3, r3
 800e586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e58a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e58e:	b29a      	uxth	r2, r3
 800e590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e592:	801a      	strh	r2, [r3, #0]
 800e594:	e018      	b.n	800e5c8 <USB_EPStartXfer+0x210>
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	785b      	ldrb	r3, [r3, #1]
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d114      	bne.n	800e5c8 <USB_EPStartXfer+0x210>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e5a4:	b29b      	uxth	r3, r3
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5aa:	4413      	add	r3, r2
 800e5ac:	633b      	str	r3, [r7, #48]	@ 0x30
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	00da      	lsls	r2, r3, #3
 800e5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5b6:	4413      	add	r3, r2
 800e5b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e5bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e5be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e5c2:	b29a      	uxth	r2, r3
 800e5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	895b      	ldrh	r3, [r3, #10]
 800e5cc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	6959      	ldr	r1, [r3, #20]
 800e5d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e5d8:	b29b      	uxth	r3, r3
 800e5da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 fde3 	bl	800f1aa <USB_WritePMA>
            ep->xfer_buff += len;
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	695a      	ldr	r2, [r3, #20]
 800e5e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e5ec:	441a      	add	r2, r3
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	6a1a      	ldr	r2, [r3, #32]
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	691b      	ldr	r3, [r3, #16]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d907      	bls.n	800e60e <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	6a1a      	ldr	r2, [r3, #32]
 800e602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e606:	1ad2      	subs	r2, r2, r3
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	621a      	str	r2, [r3, #32]
 800e60c:	e006      	b.n	800e61c <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	6a1b      	ldr	r3, [r3, #32]
 800e612:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	2200      	movs	r2, #0
 800e61a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	785b      	ldrb	r3, [r3, #1]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d16b      	bne.n	800e6fc <USB_EPStartXfer+0x344>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	61bb      	str	r3, [r7, #24]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e62e:	b29b      	uxth	r3, r3
 800e630:	461a      	mov	r2, r3
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	4413      	add	r3, r2
 800e636:	61bb      	str	r3, [r7, #24]
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	00da      	lsls	r2, r3, #3
 800e63e:	69bb      	ldr	r3, [r7, #24]
 800e640:	4413      	add	r3, r2
 800e642:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e646:	617b      	str	r3, [r7, #20]
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	881b      	ldrh	r3, [r3, #0]
 800e64c:	b29b      	uxth	r3, r3
 800e64e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e652:	b29a      	uxth	r2, r3
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	801a      	strh	r2, [r3, #0]
 800e658:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d10a      	bne.n	800e676 <USB_EPStartXfer+0x2be>
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	881b      	ldrh	r3, [r3, #0]
 800e664:	b29b      	uxth	r3, r3
 800e666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e66a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e66e:	b29a      	uxth	r2, r3
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	801a      	strh	r2, [r3, #0]
 800e674:	e05d      	b.n	800e732 <USB_EPStartXfer+0x37a>
 800e676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e67a:	2b3e      	cmp	r3, #62	@ 0x3e
 800e67c:	d81c      	bhi.n	800e6b8 <USB_EPStartXfer+0x300>
 800e67e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e682:	085b      	lsrs	r3, r3, #1
 800e684:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e688:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e68c:	f003 0301 	and.w	r3, r3, #1
 800e690:	2b00      	cmp	r3, #0
 800e692:	d004      	beq.n	800e69e <USB_EPStartXfer+0x2e6>
 800e694:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e698:	3301      	adds	r3, #1
 800e69a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	881b      	ldrh	r3, [r3, #0]
 800e6a2:	b29a      	uxth	r2, r3
 800e6a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	029b      	lsls	r3, r3, #10
 800e6ac:	b29b      	uxth	r3, r3
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	b29a      	uxth	r2, r3
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	801a      	strh	r2, [r3, #0]
 800e6b6:	e03c      	b.n	800e732 <USB_EPStartXfer+0x37a>
 800e6b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e6bc:	095b      	lsrs	r3, r3, #5
 800e6be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e6c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e6c6:	f003 031f 	and.w	r3, r3, #31
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d104      	bne.n	800e6d8 <USB_EPStartXfer+0x320>
 800e6ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e6d2:	3b01      	subs	r3, #1
 800e6d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	881b      	ldrh	r3, [r3, #0]
 800e6dc:	b29a      	uxth	r2, r3
 800e6de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e6e2:	b29b      	uxth	r3, r3
 800e6e4:	029b      	lsls	r3, r3, #10
 800e6e6:	b29b      	uxth	r3, r3
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	b29b      	uxth	r3, r3
 800e6ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e6f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e6f4:	b29a      	uxth	r2, r3
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	801a      	strh	r2, [r3, #0]
 800e6fa:	e01a      	b.n	800e732 <USB_EPStartXfer+0x37a>
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	785b      	ldrb	r3, [r3, #1]
 800e700:	2b01      	cmp	r3, #1
 800e702:	d116      	bne.n	800e732 <USB_EPStartXfer+0x37a>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	623b      	str	r3, [r7, #32]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e70e:	b29b      	uxth	r3, r3
 800e710:	461a      	mov	r2, r3
 800e712:	6a3b      	ldr	r3, [r7, #32]
 800e714:	4413      	add	r3, r2
 800e716:	623b      	str	r3, [r7, #32]
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	00da      	lsls	r2, r3, #3
 800e71e:	6a3b      	ldr	r3, [r7, #32]
 800e720:	4413      	add	r3, r2
 800e722:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e726:	61fb      	str	r3, [r7, #28]
 800e728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	69fb      	ldr	r3, [r7, #28]
 800e730:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	891b      	ldrh	r3, [r3, #8]
 800e736:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	6959      	ldr	r1, [r3, #20]
 800e73e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e742:	b29b      	uxth	r3, r3
 800e744:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f000 fd2e 	bl	800f1aa <USB_WritePMA>
 800e74e:	e2e2      	b.n	800ed16 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	785b      	ldrb	r3, [r3, #1]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d16b      	bne.n	800e830 <USB_EPStartXfer+0x478>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e762:	b29b      	uxth	r3, r3
 800e764:	461a      	mov	r2, r3
 800e766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e768:	4413      	add	r3, r2
 800e76a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	781b      	ldrb	r3, [r3, #0]
 800e770:	00da      	lsls	r2, r3, #3
 800e772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e774:	4413      	add	r3, r2
 800e776:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e77a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e77c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e77e:	881b      	ldrh	r3, [r3, #0]
 800e780:	b29b      	uxth	r3, r3
 800e782:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e786:	b29a      	uxth	r2, r3
 800e788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e78a:	801a      	strh	r2, [r3, #0]
 800e78c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e790:	2b00      	cmp	r3, #0
 800e792:	d10a      	bne.n	800e7aa <USB_EPStartXfer+0x3f2>
 800e794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e796:	881b      	ldrh	r3, [r3, #0]
 800e798:	b29b      	uxth	r3, r3
 800e79a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e79e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7a2:	b29a      	uxth	r2, r3
 800e7a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7a6:	801a      	strh	r2, [r3, #0]
 800e7a8:	e05d      	b.n	800e866 <USB_EPStartXfer+0x4ae>
 800e7aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e7ae:	2b3e      	cmp	r3, #62	@ 0x3e
 800e7b0:	d81c      	bhi.n	800e7ec <USB_EPStartXfer+0x434>
 800e7b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e7b6:	085b      	lsrs	r3, r3, #1
 800e7b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e7bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e7c0:	f003 0301 	and.w	r3, r3, #1
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d004      	beq.n	800e7d2 <USB_EPStartXfer+0x41a>
 800e7c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e7d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7d4:	881b      	ldrh	r3, [r3, #0]
 800e7d6:	b29a      	uxth	r2, r3
 800e7d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	029b      	lsls	r3, r3, #10
 800e7e0:	b29b      	uxth	r3, r3
 800e7e2:	4313      	orrs	r3, r2
 800e7e4:	b29a      	uxth	r2, r3
 800e7e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7e8:	801a      	strh	r2, [r3, #0]
 800e7ea:	e03c      	b.n	800e866 <USB_EPStartXfer+0x4ae>
 800e7ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e7f0:	095b      	lsrs	r3, r3, #5
 800e7f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e7f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e7fa:	f003 031f 	and.w	r3, r3, #31
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d104      	bne.n	800e80c <USB_EPStartXfer+0x454>
 800e802:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e806:	3b01      	subs	r3, #1
 800e808:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e80c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e80e:	881b      	ldrh	r3, [r3, #0]
 800e810:	b29a      	uxth	r2, r3
 800e812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e816:	b29b      	uxth	r3, r3
 800e818:	029b      	lsls	r3, r3, #10
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	4313      	orrs	r3, r2
 800e81e:	b29b      	uxth	r3, r3
 800e820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e828:	b29a      	uxth	r2, r3
 800e82a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e82c:	801a      	strh	r2, [r3, #0]
 800e82e:	e01a      	b.n	800e866 <USB_EPStartXfer+0x4ae>
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	785b      	ldrb	r3, [r3, #1]
 800e834:	2b01      	cmp	r3, #1
 800e836:	d116      	bne.n	800e866 <USB_EPStartXfer+0x4ae>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e842:	b29b      	uxth	r3, r3
 800e844:	461a      	mov	r2, r3
 800e846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e848:	4413      	add	r3, r2
 800e84a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	00da      	lsls	r2, r3, #3
 800e852:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e854:	4413      	add	r3, r2
 800e856:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e85a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e85c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e860:	b29a      	uxth	r2, r3
 800e862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e864:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	891b      	ldrh	r3, [r3, #8]
 800e86a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	6959      	ldr	r1, [r3, #20]
 800e872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e876:	b29b      	uxth	r3, r3
 800e878:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f000 fc94 	bl	800f1aa <USB_WritePMA>
            ep->xfer_buff += len;
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	695a      	ldr	r2, [r3, #20]
 800e886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e88a:	441a      	add	r2, r3
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	6a1a      	ldr	r2, [r3, #32]
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	691b      	ldr	r3, [r3, #16]
 800e898:	429a      	cmp	r2, r3
 800e89a:	d907      	bls.n	800e8ac <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	6a1a      	ldr	r2, [r3, #32]
 800e8a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e8a4:	1ad2      	subs	r2, r2, r3
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	621a      	str	r2, [r3, #32]
 800e8aa:	e006      	b.n	800e8ba <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	6a1b      	ldr	r3, [r3, #32]
 800e8b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	643b      	str	r3, [r7, #64]	@ 0x40
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	785b      	ldrb	r3, [r3, #1]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d16b      	bne.n	800e99e <USB_EPStartXfer+0x5e6>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e8d0:	b29b      	uxth	r3, r3
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8d6:	4413      	add	r3, r2
 800e8d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	00da      	lsls	r2, r3, #3
 800e8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8e2:	4413      	add	r3, r2
 800e8e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e8e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8ec:	881b      	ldrh	r3, [r3, #0]
 800e8ee:	b29b      	uxth	r3, r3
 800e8f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e8f4:	b29a      	uxth	r2, r3
 800e8f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8f8:	801a      	strh	r2, [r3, #0]
 800e8fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d10a      	bne.n	800e918 <USB_EPStartXfer+0x560>
 800e902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e904:	881b      	ldrh	r3, [r3, #0]
 800e906:	b29b      	uxth	r3, r3
 800e908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e90c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e910:	b29a      	uxth	r2, r3
 800e912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e914:	801a      	strh	r2, [r3, #0]
 800e916:	e05b      	b.n	800e9d0 <USB_EPStartXfer+0x618>
 800e918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e91c:	2b3e      	cmp	r3, #62	@ 0x3e
 800e91e:	d81c      	bhi.n	800e95a <USB_EPStartXfer+0x5a2>
 800e920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e924:	085b      	lsrs	r3, r3, #1
 800e926:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e92a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e92e:	f003 0301 	and.w	r3, r3, #1
 800e932:	2b00      	cmp	r3, #0
 800e934:	d004      	beq.n	800e940 <USB_EPStartXfer+0x588>
 800e936:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e93a:	3301      	adds	r3, #1
 800e93c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e942:	881b      	ldrh	r3, [r3, #0]
 800e944:	b29a      	uxth	r2, r3
 800e946:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e94a:	b29b      	uxth	r3, r3
 800e94c:	029b      	lsls	r3, r3, #10
 800e94e:	b29b      	uxth	r3, r3
 800e950:	4313      	orrs	r3, r2
 800e952:	b29a      	uxth	r2, r3
 800e954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e956:	801a      	strh	r2, [r3, #0]
 800e958:	e03a      	b.n	800e9d0 <USB_EPStartXfer+0x618>
 800e95a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e95e:	095b      	lsrs	r3, r3, #5
 800e960:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e964:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e968:	f003 031f 	and.w	r3, r3, #31
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d104      	bne.n	800e97a <USB_EPStartXfer+0x5c2>
 800e970:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e974:	3b01      	subs	r3, #1
 800e976:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e97a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e97c:	881b      	ldrh	r3, [r3, #0]
 800e97e:	b29a      	uxth	r2, r3
 800e980:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e984:	b29b      	uxth	r3, r3
 800e986:	029b      	lsls	r3, r3, #10
 800e988:	b29b      	uxth	r3, r3
 800e98a:	4313      	orrs	r3, r2
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e996:	b29a      	uxth	r2, r3
 800e998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e99a:	801a      	strh	r2, [r3, #0]
 800e99c:	e018      	b.n	800e9d0 <USB_EPStartXfer+0x618>
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	785b      	ldrb	r3, [r3, #1]
 800e9a2:	2b01      	cmp	r3, #1
 800e9a4:	d114      	bne.n	800e9d0 <USB_EPStartXfer+0x618>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9b2:	4413      	add	r3, r2
 800e9b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	00da      	lsls	r2, r3, #3
 800e9bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9be:	4413      	add	r3, r2
 800e9c0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e9c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e9c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e9ca:	b29a      	uxth	r2, r3
 800e9cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	895b      	ldrh	r3, [r3, #10]
 800e9d4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	6959      	ldr	r1, [r3, #20]
 800e9dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e9e0:	b29b      	uxth	r3, r3
 800e9e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f000 fbdf 	bl	800f1aa <USB_WritePMA>
 800e9ec:	e193      	b.n	800ed16 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	6a1b      	ldr	r3, [r3, #32]
 800e9f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e9f6:	687a      	ldr	r2, [r7, #4]
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	781b      	ldrb	r3, [r3, #0]
 800e9fc:	009b      	lsls	r3, r3, #2
 800e9fe:	4413      	add	r3, r2
 800ea00:	881b      	ldrh	r3, [r3, #0]
 800ea02:	b29b      	uxth	r3, r3
 800ea04:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ea08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea0c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	009b      	lsls	r3, r3, #2
 800ea18:	441a      	add	r2, r3
 800ea1a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800ea1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ea22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ea26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ea2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea2e:	b29b      	uxth	r3, r3
 800ea30:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ea3c:	b29b      	uxth	r3, r3
 800ea3e:	461a      	mov	r2, r3
 800ea40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea42:	4413      	add	r3, r2
 800ea44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	00da      	lsls	r2, r3, #3
 800ea4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea4e:	4413      	add	r3, r2
 800ea50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ea54:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ea56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea5a:	b29a      	uxth	r2, r3
 800ea5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea5e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	891b      	ldrh	r3, [r3, #8]
 800ea64:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	6959      	ldr	r1, [r3, #20]
 800ea6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f000 fb97 	bl	800f1aa <USB_WritePMA>
 800ea7c:	e14b      	b.n	800ed16 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	6a1a      	ldr	r2, [r3, #32]
 800ea82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea86:	1ad2      	subs	r2, r2, r3
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ea8c:	687a      	ldr	r2, [r7, #4]
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	781b      	ldrb	r3, [r3, #0]
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	4413      	add	r3, r2
 800ea96:	881b      	ldrh	r3, [r3, #0]
 800ea98:	b29b      	uxth	r3, r3
 800ea9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	f000 809a 	beq.w	800ebd8 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	673b      	str	r3, [r7, #112]	@ 0x70
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	785b      	ldrb	r3, [r3, #1]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d16b      	bne.n	800eb88 <USB_EPStartXfer+0x7d0>
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	461a      	mov	r2, r3
 800eabe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eac0:	4413      	add	r3, r2
 800eac2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	781b      	ldrb	r3, [r3, #0]
 800eac8:	00da      	lsls	r2, r3, #3
 800eaca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eacc:	4413      	add	r3, r2
 800eace:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ead2:	667b      	str	r3, [r7, #100]	@ 0x64
 800ead4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ead6:	881b      	ldrh	r3, [r3, #0]
 800ead8:	b29b      	uxth	r3, r3
 800eada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eade:	b29a      	uxth	r2, r3
 800eae0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eae2:	801a      	strh	r2, [r3, #0]
 800eae4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d10a      	bne.n	800eb02 <USB_EPStartXfer+0x74a>
 800eaec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eaee:	881b      	ldrh	r3, [r3, #0]
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eaf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eafa:	b29a      	uxth	r2, r3
 800eafc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eafe:	801a      	strh	r2, [r3, #0]
 800eb00:	e05b      	b.n	800ebba <USB_EPStartXfer+0x802>
 800eb02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb06:	2b3e      	cmp	r3, #62	@ 0x3e
 800eb08:	d81c      	bhi.n	800eb44 <USB_EPStartXfer+0x78c>
 800eb0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb0e:	085b      	lsrs	r3, r3, #1
 800eb10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eb14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb18:	f003 0301 	and.w	r3, r3, #1
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d004      	beq.n	800eb2a <USB_EPStartXfer+0x772>
 800eb20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800eb24:	3301      	adds	r3, #1
 800eb26:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eb2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb2c:	881b      	ldrh	r3, [r3, #0]
 800eb2e:	b29a      	uxth	r2, r3
 800eb30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800eb34:	b29b      	uxth	r3, r3
 800eb36:	029b      	lsls	r3, r3, #10
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	4313      	orrs	r3, r2
 800eb3c:	b29a      	uxth	r2, r3
 800eb3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb40:	801a      	strh	r2, [r3, #0]
 800eb42:	e03a      	b.n	800ebba <USB_EPStartXfer+0x802>
 800eb44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb48:	095b      	lsrs	r3, r3, #5
 800eb4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eb4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb52:	f003 031f 	and.w	r3, r3, #31
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d104      	bne.n	800eb64 <USB_EPStartXfer+0x7ac>
 800eb5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800eb5e:	3b01      	subs	r3, #1
 800eb60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eb64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb66:	881b      	ldrh	r3, [r3, #0]
 800eb68:	b29a      	uxth	r2, r3
 800eb6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800eb6e:	b29b      	uxth	r3, r3
 800eb70:	029b      	lsls	r3, r3, #10
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	4313      	orrs	r3, r2
 800eb76:	b29b      	uxth	r3, r3
 800eb78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb80:	b29a      	uxth	r2, r3
 800eb82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb84:	801a      	strh	r2, [r3, #0]
 800eb86:	e018      	b.n	800ebba <USB_EPStartXfer+0x802>
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	785b      	ldrb	r3, [r3, #1]
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d114      	bne.n	800ebba <USB_EPStartXfer+0x802>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	461a      	mov	r2, r3
 800eb9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800eb9c:	4413      	add	r3, r2
 800eb9e:	673b      	str	r3, [r7, #112]	@ 0x70
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	781b      	ldrb	r3, [r3, #0]
 800eba4:	00da      	lsls	r2, r3, #3
 800eba6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800eba8:	4413      	add	r3, r2
 800ebaa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ebae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ebb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ebb4:	b29a      	uxth	r2, r3
 800ebb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ebb8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	895b      	ldrh	r3, [r3, #10]
 800ebbe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	6959      	ldr	r1, [r3, #20]
 800ebc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ebca:	b29b      	uxth	r3, r3
 800ebcc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f000 faea 	bl	800f1aa <USB_WritePMA>
 800ebd6:	e09e      	b.n	800ed16 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	785b      	ldrb	r3, [r3, #1]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d16b      	bne.n	800ecb8 <USB_EPStartXfer+0x900>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ebea:	b29b      	uxth	r3, r3
 800ebec:	461a      	mov	r2, r3
 800ebee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ebf0:	4413      	add	r3, r2
 800ebf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	00da      	lsls	r2, r3, #3
 800ebfa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ebfc:	4413      	add	r3, r2
 800ebfe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ec02:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ec04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec06:	881b      	ldrh	r3, [r3, #0]
 800ec08:	b29b      	uxth	r3, r3
 800ec0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ec0e:	b29a      	uxth	r2, r3
 800ec10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec12:	801a      	strh	r2, [r3, #0]
 800ec14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d10a      	bne.n	800ec32 <USB_EPStartXfer+0x87a>
 800ec1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec1e:	881b      	ldrh	r3, [r3, #0]
 800ec20:	b29b      	uxth	r3, r3
 800ec22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec2a:	b29a      	uxth	r2, r3
 800ec2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec2e:	801a      	strh	r2, [r3, #0]
 800ec30:	e063      	b.n	800ecfa <USB_EPStartXfer+0x942>
 800ec32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec36:	2b3e      	cmp	r3, #62	@ 0x3e
 800ec38:	d81c      	bhi.n	800ec74 <USB_EPStartXfer+0x8bc>
 800ec3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec3e:	085b      	lsrs	r3, r3, #1
 800ec40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ec44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec48:	f003 0301 	and.w	r3, r3, #1
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d004      	beq.n	800ec5a <USB_EPStartXfer+0x8a2>
 800ec50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ec54:	3301      	adds	r3, #1
 800ec56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ec5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec5c:	881b      	ldrh	r3, [r3, #0]
 800ec5e:	b29a      	uxth	r2, r3
 800ec60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	029b      	lsls	r3, r3, #10
 800ec68:	b29b      	uxth	r3, r3
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	b29a      	uxth	r2, r3
 800ec6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec70:	801a      	strh	r2, [r3, #0]
 800ec72:	e042      	b.n	800ecfa <USB_EPStartXfer+0x942>
 800ec74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec78:	095b      	lsrs	r3, r3, #5
 800ec7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ec7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec82:	f003 031f 	and.w	r3, r3, #31
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d104      	bne.n	800ec94 <USB_EPStartXfer+0x8dc>
 800ec8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ec8e:	3b01      	subs	r3, #1
 800ec90:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ec94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec96:	881b      	ldrh	r3, [r3, #0]
 800ec98:	b29a      	uxth	r2, r3
 800ec9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	029b      	lsls	r3, r3, #10
 800eca2:	b29b      	uxth	r3, r3
 800eca4:	4313      	orrs	r3, r2
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ecac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ecb0:	b29a      	uxth	r2, r3
 800ecb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ecb4:	801a      	strh	r2, [r3, #0]
 800ecb6:	e020      	b.n	800ecfa <USB_EPStartXfer+0x942>
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	785b      	ldrb	r3, [r3, #1]
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d11c      	bne.n	800ecfa <USB_EPStartXfer+0x942>
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	461a      	mov	r2, r3
 800ecd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ecd4:	4413      	add	r3, r2
 800ecd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	781b      	ldrb	r3, [r3, #0]
 800ecde:	00da      	lsls	r2, r3, #3
 800ece0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ece4:	4413      	add	r3, r2
 800ece6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ecea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ecee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ecf2:	b29a      	uxth	r2, r3
 800ecf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ecf8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	891b      	ldrh	r3, [r3, #8]
 800ecfe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	6959      	ldr	r1, [r3, #20]
 800ed06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f000 fa4a 	bl	800f1aa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ed16:	687a      	ldr	r2, [r7, #4]
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	009b      	lsls	r3, r3, #2
 800ed1e:	4413      	add	r3, r2
 800ed20:	881b      	ldrh	r3, [r3, #0]
 800ed22:	b29b      	uxth	r3, r3
 800ed24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ed28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed2c:	817b      	strh	r3, [r7, #10]
 800ed2e:	897b      	ldrh	r3, [r7, #10]
 800ed30:	f083 0310 	eor.w	r3, r3, #16
 800ed34:	817b      	strh	r3, [r7, #10]
 800ed36:	897b      	ldrh	r3, [r7, #10]
 800ed38:	f083 0320 	eor.w	r3, r3, #32
 800ed3c:	817b      	strh	r3, [r7, #10]
 800ed3e:	687a      	ldr	r2, [r7, #4]
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	781b      	ldrb	r3, [r3, #0]
 800ed44:	009b      	lsls	r3, r3, #2
 800ed46:	441a      	add	r2, r3
 800ed48:	897b      	ldrh	r3, [r7, #10]
 800ed4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ed4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ed52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ed56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	8013      	strh	r3, [r2, #0]
 800ed5e:	e0d5      	b.n	800ef0c <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	7b1b      	ldrb	r3, [r3, #12]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d156      	bne.n	800ee16 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	699b      	ldr	r3, [r3, #24]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d122      	bne.n	800edb6 <USB_EPStartXfer+0x9fe>
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	78db      	ldrb	r3, [r3, #3]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d11e      	bne.n	800edb6 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800ed78:	687a      	ldr	r2, [r7, #4]
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	009b      	lsls	r3, r3, #2
 800ed80:	4413      	add	r3, r2
 800ed82:	881b      	ldrh	r3, [r3, #0]
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ed8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ed8e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800ed92:	687a      	ldr	r2, [r7, #4]
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	009b      	lsls	r3, r3, #2
 800ed9a:	441a      	add	r2, r3
 800ed9c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800eda0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eda4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eda8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800edac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edb0:	b29b      	uxth	r3, r3
 800edb2:	8013      	strh	r3, [r2, #0]
 800edb4:	e01d      	b.n	800edf2 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800edb6:	687a      	ldr	r2, [r7, #4]
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	009b      	lsls	r3, r3, #2
 800edbe:	4413      	add	r3, r2
 800edc0:	881b      	ldrh	r3, [r3, #0]
 800edc2:	b29b      	uxth	r3, r3
 800edc4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800edc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800edcc:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800edd0:	687a      	ldr	r2, [r7, #4]
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	009b      	lsls	r3, r3, #2
 800edd8:	441a      	add	r2, r3
 800edda:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800edde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ede2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ede6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800edea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edee:	b29b      	uxth	r3, r3
 800edf0:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	699a      	ldr	r2, [r3, #24]
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	691b      	ldr	r3, [r3, #16]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d907      	bls.n	800ee0e <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	699a      	ldr	r2, [r3, #24]
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	691b      	ldr	r3, [r3, #16]
 800ee06:	1ad2      	subs	r2, r2, r3
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	619a      	str	r2, [r3, #24]
 800ee0c:	e054      	b.n	800eeb8 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	2200      	movs	r2, #0
 800ee12:	619a      	str	r2, [r3, #24]
 800ee14:	e050      	b.n	800eeb8 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	78db      	ldrb	r3, [r3, #3]
 800ee1a:	2b02      	cmp	r3, #2
 800ee1c:	d142      	bne.n	800eea4 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	69db      	ldr	r3, [r3, #28]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d048      	beq.n	800eeb8 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ee26:	687a      	ldr	r2, [r7, #4]
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	009b      	lsls	r3, r3, #2
 800ee2e:	4413      	add	r3, r2
 800ee30:	881b      	ldrh	r3, [r3, #0]
 800ee32:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ee36:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ee3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d005      	beq.n	800ee4e <USB_EPStartXfer+0xa96>
 800ee42:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ee46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d10b      	bne.n	800ee66 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ee4e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ee52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d12e      	bne.n	800eeb8 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ee5a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ee5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d128      	bne.n	800eeb8 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ee66:	687a      	ldr	r2, [r7, #4]
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	009b      	lsls	r3, r3, #2
 800ee6e:	4413      	add	r3, r2
 800ee70:	881b      	ldrh	r3, [r3, #0]
 800ee72:	b29b      	uxth	r3, r3
 800ee74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ee78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee7c:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800ee80:	687a      	ldr	r2, [r7, #4]
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	009b      	lsls	r3, r3, #2
 800ee88:	441a      	add	r2, r3
 800ee8a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800ee8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ee92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ee96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ee9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ee9e:	b29b      	uxth	r3, r3
 800eea0:	8013      	strh	r3, [r2, #0]
 800eea2:	e009      	b.n	800eeb8 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	78db      	ldrb	r3, [r3, #3]
 800eea8:	2b01      	cmp	r3, #1
 800eeaa:	d103      	bne.n	800eeb4 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	619a      	str	r2, [r3, #24]
 800eeb2:	e001      	b.n	800eeb8 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	e02a      	b.n	800ef0e <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800eeb8:	687a      	ldr	r2, [r7, #4]
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	4413      	add	r3, r2
 800eec2:	881b      	ldrh	r3, [r3, #0]
 800eec4:	b29b      	uxth	r3, r3
 800eec6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800eeca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eece:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800eed2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800eed6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800eeda:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800eede:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800eee2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800eee6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800eeea:	687a      	ldr	r2, [r7, #4]
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	009b      	lsls	r3, r3, #2
 800eef2:	441a      	add	r2, r3
 800eef4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800eef8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eefc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ef00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ef04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ef0c:	2300      	movs	r3, #0
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	37b0      	adds	r7, #176	@ 0xb0
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}

0800ef16 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ef16:	b480      	push	{r7}
 800ef18:	b085      	sub	sp, #20
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	6078      	str	r0, [r7, #4]
 800ef1e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	785b      	ldrb	r3, [r3, #1]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d020      	beq.n	800ef6a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ef28:	687a      	ldr	r2, [r7, #4]
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	781b      	ldrb	r3, [r3, #0]
 800ef2e:	009b      	lsls	r3, r3, #2
 800ef30:	4413      	add	r3, r2
 800ef32:	881b      	ldrh	r3, [r3, #0]
 800ef34:	b29b      	uxth	r3, r3
 800ef36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ef3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ef3e:	81bb      	strh	r3, [r7, #12]
 800ef40:	89bb      	ldrh	r3, [r7, #12]
 800ef42:	f083 0310 	eor.w	r3, r3, #16
 800ef46:	81bb      	strh	r3, [r7, #12]
 800ef48:	687a      	ldr	r2, [r7, #4]
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	009b      	lsls	r3, r3, #2
 800ef50:	441a      	add	r2, r3
 800ef52:	89bb      	ldrh	r3, [r7, #12]
 800ef54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ef58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ef5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ef60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef64:	b29b      	uxth	r3, r3
 800ef66:	8013      	strh	r3, [r2, #0]
 800ef68:	e01f      	b.n	800efaa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ef6a:	687a      	ldr	r2, [r7, #4]
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	781b      	ldrb	r3, [r3, #0]
 800ef70:	009b      	lsls	r3, r3, #2
 800ef72:	4413      	add	r3, r2
 800ef74:	881b      	ldrh	r3, [r3, #0]
 800ef76:	b29b      	uxth	r3, r3
 800ef78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ef7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef80:	81fb      	strh	r3, [r7, #14]
 800ef82:	89fb      	ldrh	r3, [r7, #14]
 800ef84:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ef88:	81fb      	strh	r3, [r7, #14]
 800ef8a:	687a      	ldr	r2, [r7, #4]
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	009b      	lsls	r3, r3, #2
 800ef92:	441a      	add	r2, r3
 800ef94:	89fb      	ldrh	r3, [r7, #14]
 800ef96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ef9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ef9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800efa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800efaa:	2300      	movs	r3, #0
}
 800efac:	4618      	mov	r0, r3
 800efae:	3714      	adds	r7, #20
 800efb0:	46bd      	mov	sp, r7
 800efb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb6:	4770      	bx	lr

0800efb8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800efb8:	b480      	push	{r7}
 800efba:	b087      	sub	sp, #28
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	785b      	ldrb	r3, [r3, #1]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d04c      	beq.n	800f064 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800efca:	687a      	ldr	r2, [r7, #4]
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	009b      	lsls	r3, r3, #2
 800efd2:	4413      	add	r3, r2
 800efd4:	881b      	ldrh	r3, [r3, #0]
 800efd6:	823b      	strh	r3, [r7, #16]
 800efd8:	8a3b      	ldrh	r3, [r7, #16]
 800efda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d01b      	beq.n	800f01a <USB_EPClearStall+0x62>
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	009b      	lsls	r3, r3, #2
 800efea:	4413      	add	r3, r2
 800efec:	881b      	ldrh	r3, [r3, #0]
 800efee:	b29b      	uxth	r3, r3
 800eff0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eff4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eff8:	81fb      	strh	r3, [r7, #14]
 800effa:	687a      	ldr	r2, [r7, #4]
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	781b      	ldrb	r3, [r3, #0]
 800f000:	009b      	lsls	r3, r3, #2
 800f002:	441a      	add	r2, r3
 800f004:	89fb      	ldrh	r3, [r7, #14]
 800f006:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f00a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f00e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f012:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f016:	b29b      	uxth	r3, r3
 800f018:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	78db      	ldrb	r3, [r3, #3]
 800f01e:	2b01      	cmp	r3, #1
 800f020:	d06c      	beq.n	800f0fc <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f022:	687a      	ldr	r2, [r7, #4]
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	009b      	lsls	r3, r3, #2
 800f02a:	4413      	add	r3, r2
 800f02c:	881b      	ldrh	r3, [r3, #0]
 800f02e:	b29b      	uxth	r3, r3
 800f030:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f034:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f038:	81bb      	strh	r3, [r7, #12]
 800f03a:	89bb      	ldrh	r3, [r7, #12]
 800f03c:	f083 0320 	eor.w	r3, r3, #32
 800f040:	81bb      	strh	r3, [r7, #12]
 800f042:	687a      	ldr	r2, [r7, #4]
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	009b      	lsls	r3, r3, #2
 800f04a:	441a      	add	r2, r3
 800f04c:	89bb      	ldrh	r3, [r7, #12]
 800f04e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f052:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f05a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f05e:	b29b      	uxth	r3, r3
 800f060:	8013      	strh	r3, [r2, #0]
 800f062:	e04b      	b.n	800f0fc <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	781b      	ldrb	r3, [r3, #0]
 800f06a:	009b      	lsls	r3, r3, #2
 800f06c:	4413      	add	r3, r2
 800f06e:	881b      	ldrh	r3, [r3, #0]
 800f070:	82fb      	strh	r3, [r7, #22]
 800f072:	8afb      	ldrh	r3, [r7, #22]
 800f074:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d01b      	beq.n	800f0b4 <USB_EPClearStall+0xfc>
 800f07c:	687a      	ldr	r2, [r7, #4]
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	009b      	lsls	r3, r3, #2
 800f084:	4413      	add	r3, r2
 800f086:	881b      	ldrh	r3, [r3, #0]
 800f088:	b29b      	uxth	r3, r3
 800f08a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f08e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f092:	82bb      	strh	r3, [r7, #20]
 800f094:	687a      	ldr	r2, [r7, #4]
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	009b      	lsls	r3, r3, #2
 800f09c:	441a      	add	r2, r3
 800f09e:	8abb      	ldrh	r3, [r7, #20]
 800f0a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f0a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f0a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f0ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f0b4:	687a      	ldr	r2, [r7, #4]
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	781b      	ldrb	r3, [r3, #0]
 800f0ba:	009b      	lsls	r3, r3, #2
 800f0bc:	4413      	add	r3, r2
 800f0be:	881b      	ldrh	r3, [r3, #0]
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f0c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f0ca:	827b      	strh	r3, [r7, #18]
 800f0cc:	8a7b      	ldrh	r3, [r7, #18]
 800f0ce:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f0d2:	827b      	strh	r3, [r7, #18]
 800f0d4:	8a7b      	ldrh	r3, [r7, #18]
 800f0d6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f0da:	827b      	strh	r3, [r7, #18]
 800f0dc:	687a      	ldr	r2, [r7, #4]
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	009b      	lsls	r3, r3, #2
 800f0e4:	441a      	add	r2, r3
 800f0e6:	8a7b      	ldrh	r3, [r7, #18]
 800f0e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f0ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f0f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f0f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0f8:	b29b      	uxth	r3, r3
 800f0fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f0fc:	2300      	movs	r3, #0
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	371c      	adds	r7, #28
 800f102:	46bd      	mov	sp, r7
 800f104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f108:	4770      	bx	lr

0800f10a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800f10a:	b480      	push	{r7}
 800f10c:	b083      	sub	sp, #12
 800f10e:	af00      	add	r7, sp, #0
 800f110:	6078      	str	r0, [r7, #4]
 800f112:	460b      	mov	r3, r1
 800f114:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f116:	78fb      	ldrb	r3, [r7, #3]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d103      	bne.n	800f124 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2280      	movs	r2, #128	@ 0x80
 800f120:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f124:	2300      	movs	r3, #0
}
 800f126:	4618      	mov	r0, r3
 800f128:	370c      	adds	r7, #12
 800f12a:	46bd      	mov	sp, r7
 800f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f130:	4770      	bx	lr

0800f132 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800f132:	b480      	push	{r7}
 800f134:	b083      	sub	sp, #12
 800f136:	af00      	add	r7, sp, #0
 800f138:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f140:	b29b      	uxth	r3, r3
 800f142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f14a:	b29a      	uxth	r2, r3
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f152:	2300      	movs	r3, #0
}
 800f154:	4618      	mov	r0, r3
 800f156:	370c      	adds	r7, #12
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr

0800f160 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800f160:	b480      	push	{r7}
 800f162:	b083      	sub	sp, #12
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f16e:	b29b      	uxth	r3, r3
 800f170:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800f174:	b29a      	uxth	r2, r3
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f17c:	2300      	movs	r3, #0
}
 800f17e:	4618      	mov	r0, r3
 800f180:	370c      	adds	r7, #12
 800f182:	46bd      	mov	sp, r7
 800f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f188:	4770      	bx	lr

0800f18a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800f18a:	b480      	push	{r7}
 800f18c:	b085      	sub	sp, #20
 800f18e:	af00      	add	r7, sp, #0
 800f190:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800f198:	b29b      	uxth	r3, r3
 800f19a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f19c:	68fb      	ldr	r3, [r7, #12]
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3714      	adds	r7, #20
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a8:	4770      	bx	lr

0800f1aa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f1aa:	b480      	push	{r7}
 800f1ac:	b08b      	sub	sp, #44	@ 0x2c
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	60f8      	str	r0, [r7, #12]
 800f1b2:	60b9      	str	r1, [r7, #8]
 800f1b4:	4611      	mov	r1, r2
 800f1b6:	461a      	mov	r2, r3
 800f1b8:	460b      	mov	r3, r1
 800f1ba:	80fb      	strh	r3, [r7, #6]
 800f1bc:	4613      	mov	r3, r2
 800f1be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f1c0:	88bb      	ldrh	r3, [r7, #4]
 800f1c2:	3301      	adds	r3, #1
 800f1c4:	085b      	lsrs	r3, r3, #1
 800f1c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f1d0:	88fa      	ldrh	r2, [r7, #6]
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	4413      	add	r3, r2
 800f1d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f1da:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f1dc:	69bb      	ldr	r3, [r7, #24]
 800f1de:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1e0:	e01b      	b.n	800f21a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800f1e2:	69fb      	ldr	r3, [r7, #28]
 800f1e4:	781b      	ldrb	r3, [r3, #0]
 800f1e6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	021b      	lsls	r3, r3, #8
 800f1f0:	b21a      	sxth	r2, r3
 800f1f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f1f6:	4313      	orrs	r3, r2
 800f1f8:	b21b      	sxth	r3, r3
 800f1fa:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800f1fc:	6a3b      	ldr	r3, [r7, #32]
 800f1fe:	8a7a      	ldrh	r2, [r7, #18]
 800f200:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800f202:	6a3b      	ldr	r3, [r7, #32]
 800f204:	3302      	adds	r3, #2
 800f206:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800f208:	69fb      	ldr	r3, [r7, #28]
 800f20a:	3301      	adds	r3, #1
 800f20c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800f20e:	69fb      	ldr	r3, [r7, #28]
 800f210:	3301      	adds	r3, #1
 800f212:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800f214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f216:	3b01      	subs	r3, #1
 800f218:	627b      	str	r3, [r7, #36]	@ 0x24
 800f21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d1e0      	bne.n	800f1e2 <USB_WritePMA+0x38>
  }
}
 800f220:	bf00      	nop
 800f222:	bf00      	nop
 800f224:	372c      	adds	r7, #44	@ 0x2c
 800f226:	46bd      	mov	sp, r7
 800f228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22c:	4770      	bx	lr

0800f22e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f22e:	b480      	push	{r7}
 800f230:	b08b      	sub	sp, #44	@ 0x2c
 800f232:	af00      	add	r7, sp, #0
 800f234:	60f8      	str	r0, [r7, #12]
 800f236:	60b9      	str	r1, [r7, #8]
 800f238:	4611      	mov	r1, r2
 800f23a:	461a      	mov	r2, r3
 800f23c:	460b      	mov	r3, r1
 800f23e:	80fb      	strh	r3, [r7, #6]
 800f240:	4613      	mov	r3, r2
 800f242:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800f244:	88bb      	ldrh	r3, [r7, #4]
 800f246:	085b      	lsrs	r3, r3, #1
 800f248:	b29b      	uxth	r3, r3
 800f24a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f254:	88fa      	ldrh	r2, [r7, #6]
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	4413      	add	r3, r2
 800f25a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f25e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f260:	69bb      	ldr	r3, [r7, #24]
 800f262:	627b      	str	r3, [r7, #36]	@ 0x24
 800f264:	e018      	b.n	800f298 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800f266:	6a3b      	ldr	r3, [r7, #32]
 800f268:	881b      	ldrh	r3, [r3, #0]
 800f26a:	b29b      	uxth	r3, r3
 800f26c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800f26e:	6a3b      	ldr	r3, [r7, #32]
 800f270:	3302      	adds	r3, #2
 800f272:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	b2da      	uxtb	r2, r3
 800f278:	69fb      	ldr	r3, [r7, #28]
 800f27a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f27c:	69fb      	ldr	r3, [r7, #28]
 800f27e:	3301      	adds	r3, #1
 800f280:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	0a1b      	lsrs	r3, r3, #8
 800f286:	b2da      	uxtb	r2, r3
 800f288:	69fb      	ldr	r3, [r7, #28]
 800f28a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f28c:	69fb      	ldr	r3, [r7, #28]
 800f28e:	3301      	adds	r3, #1
 800f290:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800f292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f294:	3b01      	subs	r3, #1
 800f296:	627b      	str	r3, [r7, #36]	@ 0x24
 800f298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d1e3      	bne.n	800f266 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800f29e:	88bb      	ldrh	r3, [r7, #4]
 800f2a0:	f003 0301 	and.w	r3, r3, #1
 800f2a4:	b29b      	uxth	r3, r3
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d007      	beq.n	800f2ba <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800f2aa:	6a3b      	ldr	r3, [r7, #32]
 800f2ac:	881b      	ldrh	r3, [r3, #0]
 800f2ae:	b29b      	uxth	r3, r3
 800f2b0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	b2da      	uxtb	r2, r3
 800f2b6:	69fb      	ldr	r3, [r7, #28]
 800f2b8:	701a      	strb	r2, [r3, #0]
  }
}
 800f2ba:	bf00      	nop
 800f2bc:	372c      	adds	r7, #44	@ 0x2c
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr
	...

0800f2c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800f2cc:	f3bf 8f4f 	dsb	sy
}
 800f2d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800f2d2:	4b06      	ldr	r3, [pc, #24]	@ (800f2ec <__NVIC_SystemReset+0x24>)
 800f2d4:	68db      	ldr	r3, [r3, #12]
 800f2d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800f2da:	4904      	ldr	r1, [pc, #16]	@ (800f2ec <__NVIC_SystemReset+0x24>)
 800f2dc:	4b04      	ldr	r3, [pc, #16]	@ (800f2f0 <__NVIC_SystemReset+0x28>)
 800f2de:	4313      	orrs	r3, r2
 800f2e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800f2e2:	f3bf 8f4f 	dsb	sy
}
 800f2e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800f2e8:	bf00      	nop
 800f2ea:	e7fd      	b.n	800f2e8 <__NVIC_SystemReset+0x20>
 800f2ec:	e000ed00 	.word	0xe000ed00
 800f2f0:	05fa0004 	.word	0x05fa0004

0800f2f4 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b084      	sub	sp, #16
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	460b      	mov	r3, r1
 800f2fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 800f300:	f240 401c 	movw	r0, #1052	@ 0x41c
 800f304:	f002 fbfc 	bl	8011b00 <USBD_static_malloc>
 800f308:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d105      	bne.n	800f31c <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2200      	movs	r2, #0
 800f314:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800f318:	2302      	movs	r3, #2
 800f31a:	e03f      	b.n	800f39c <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	68fa      	ldr	r2, [r7, #12]
 800f320:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	2200      	movs	r2, #0
 800f328:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800f332:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	2200      	movs	r2, #0
 800f33a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	2200      	movs	r2, #0
 800f342:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2200      	movs	r2, #0
 800f34a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2202      	movs	r2, #2
 800f352:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2200      	movs	r2, #0
 800f35a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	2200      	movs	r2, #0
 800f362:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	2200      	movs	r2, #0
 800f36a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	2200      	movs	r2, #0
 800f372:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	2202      	movs	r2, #2
 800f37a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	2200      	movs	r2, #0
 800f382:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	4798      	blx	r3
 800f390:	4603      	mov	r3, r0
 800f392:	2b00      	cmp	r3, #0
 800f394:	d001      	beq.n	800f39a <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 800f396:	2303      	movs	r3, #3
 800f398:	e000      	b.n	800f39c <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 800f39a:	2300      	movs	r3, #0
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3710      	adds	r7, #16
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b084      	sub	sp, #16
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	460b      	mov	r3, r1
 800f3ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d101      	bne.n	800f3be <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 800f3ba:	2302      	movs	r3, #2
 800f3bc:	e027      	b.n	800f40e <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f3c4:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2202      	movs	r2, #2
 800f3da:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	2202      	movs	r2, #2
 800f3ea:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f3f4:	689b      	ldr	r3, [r3, #8]
 800f3f6:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f3fe:	4618      	mov	r0, r3
 800f400:	f002 fb8c 	bl	8011b1c <USBD_static_free>
  pdev->pClassData = NULL;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2200      	movs	r2, #0
 800f408:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 800f40c:	2300      	movs	r3, #0
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3710      	adds	r7, #16
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}
	...

0800f418 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b088      	sub	sp, #32
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f428:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800f42a:	2300      	movs	r3, #0
 800f42c:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 800f42e:	2300      	movs	r3, #0
 800f430:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 800f432:	2300      	movs	r3, #0
 800f434:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 800f436:	2300      	movs	r3, #0
 800f438:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d101      	bne.n	800f444 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800f440:	2303      	movs	r3, #3
 800f442:	e0d5      	b.n	800f5f0 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d03e      	beq.n	800f4ce <USBD_DFU_Setup+0xb6>
 800f450:	2b20      	cmp	r3, #32
 800f452:	f040 80c5 	bne.w	800f5e0 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	785b      	ldrb	r3, [r3, #1]
 800f45a:	2b06      	cmp	r3, #6
 800f45c:	d82f      	bhi.n	800f4be <USBD_DFU_Setup+0xa6>
 800f45e:	a201      	add	r2, pc, #4	@ (adr r2, 800f464 <USBD_DFU_Setup+0x4c>)
 800f460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f464:	0800f4b5 	.word	0x0800f4b5
 800f468:	0800f481 	.word	0x0800f481
 800f46c:	0800f48b 	.word	0x0800f48b
 800f470:	0800f495 	.word	0x0800f495
 800f474:	0800f49d 	.word	0x0800f49d
 800f478:	0800f4a5 	.word	0x0800f4a5
 800f47c:	0800f4ad 	.word	0x0800f4ad
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 800f480:	6839      	ldr	r1, [r7, #0]
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f000 fa6c 	bl	800f960 <DFU_Download>
          break;
 800f488:	e020      	b.n	800f4cc <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 800f48a:	6839      	ldr	r1, [r7, #0]
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f000 fad3 	bl	800fa38 <DFU_Upload>
          break;
 800f492:	e01b      	b.n	800f4cc <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f000 fba9 	bl	800fbec <DFU_GetStatus>
          break;
 800f49a:	e017      	b.n	800f4cc <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f000 fc5b 	bl	800fd58 <DFU_ClearStatus>
          break;
 800f4a2:	e013      	b.n	800f4cc <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f000 fcab 	bl	800fe00 <DFU_GetState>
          break;
 800f4aa:	e00f      	b.n	800f4cc <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f000 fcbf 	bl	800fe30 <DFU_Abort>
          break;
 800f4b2:	e00b      	b.n	800f4cc <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 800f4b4:	6839      	ldr	r1, [r7, #0]
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f000 f9ee 	bl	800f898 <DFU_Detach>
          break;
 800f4bc:	e006      	b.n	800f4cc <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 800f4be:	6839      	ldr	r1, [r7, #0]
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f001 fdb1 	bl	8011028 <USBD_CtlError>
          ret = USBD_FAIL;
 800f4c6:	2303      	movs	r3, #3
 800f4c8:	77fb      	strb	r3, [r7, #31]
          break;
 800f4ca:	bf00      	nop
      }
      break;
 800f4cc:	e08f      	b.n	800f5ee <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	785b      	ldrb	r3, [r3, #1]
 800f4d2:	2b0b      	cmp	r3, #11
 800f4d4:	d87b      	bhi.n	800f5ce <USBD_DFU_Setup+0x1b6>
 800f4d6:	a201      	add	r2, pc, #4	@ (adr r2, 800f4dc <USBD_DFU_Setup+0xc4>)
 800f4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4dc:	0800f50d 	.word	0x0800f50d
 800f4e0:	0800f5dd 	.word	0x0800f5dd
 800f4e4:	0800f5cf 	.word	0x0800f5cf
 800f4e8:	0800f5cf 	.word	0x0800f5cf
 800f4ec:	0800f5cf 	.word	0x0800f5cf
 800f4f0:	0800f5cf 	.word	0x0800f5cf
 800f4f4:	0800f537 	.word	0x0800f537
 800f4f8:	0800f5cf 	.word	0x0800f5cf
 800f4fc:	0800f5cf 	.word	0x0800f5cf
 800f500:	0800f5cf 	.word	0x0800f5cf
 800f504:	0800f561 	.word	0x0800f561
 800f508:	0800f58d 	.word	0x0800f58d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f512:	b2db      	uxtb	r3, r3
 800f514:	2b03      	cmp	r3, #3
 800f516:	d107      	bne.n	800f528 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f518:	f107 030e 	add.w	r3, r7, #14
 800f51c:	2202      	movs	r2, #2
 800f51e:	4619      	mov	r1, r3
 800f520:	6878      	ldr	r0, [r7, #4]
 800f522:	f001 fdf2 	bl	801110a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f526:	e05a      	b.n	800f5de <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800f528:	6839      	ldr	r1, [r7, #0]
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f001 fd7c 	bl	8011028 <USBD_CtlError>
            ret = USBD_FAIL;
 800f530:	2303      	movs	r3, #3
 800f532:	77fb      	strb	r3, [r7, #31]
          break;
 800f534:	e053      	b.n	800f5de <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	885b      	ldrh	r3, [r3, #2]
 800f53a:	0a1b      	lsrs	r3, r3, #8
 800f53c:	b29b      	uxth	r3, r3
 800f53e:	2b21      	cmp	r3, #33	@ 0x21
 800f540:	d107      	bne.n	800f552 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 800f542:	4b2d      	ldr	r3, [pc, #180]	@ (800f5f8 <USBD_DFU_Setup+0x1e0>)
 800f544:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	88db      	ldrh	r3, [r3, #6]
 800f54a:	2b09      	cmp	r3, #9
 800f54c:	bf28      	it	cs
 800f54e:	2309      	movcs	r3, #9
 800f550:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800f552:	8afb      	ldrh	r3, [r7, #22]
 800f554:	461a      	mov	r2, r3
 800f556:	69b9      	ldr	r1, [r7, #24]
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f001 fdd6 	bl	801110a <USBD_CtlSendData>
          break;
 800f55e:	e03e      	b.n	800f5de <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f566:	b2db      	uxtb	r3, r3
 800f568:	2b03      	cmp	r3, #3
 800f56a:	d108      	bne.n	800f57e <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800f572:	2201      	movs	r2, #1
 800f574:	4619      	mov	r1, r3
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f001 fdc7 	bl	801110a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f57c:	e02f      	b.n	800f5de <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800f57e:	6839      	ldr	r1, [r7, #0]
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f001 fd51 	bl	8011028 <USBD_CtlError>
            ret = USBD_FAIL;
 800f586:	2303      	movs	r3, #3
 800f588:	77fb      	strb	r3, [r7, #31]
          break;
 800f58a:	e028      	b.n	800f5de <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	885b      	ldrh	r3, [r3, #2]
 800f590:	b2db      	uxtb	r3, r3
 800f592:	2b00      	cmp	r3, #0
 800f594:	d114      	bne.n	800f5c0 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f59c:	b2db      	uxtb	r3, r3
 800f59e:	2b03      	cmp	r3, #3
 800f5a0:	d107      	bne.n	800f5b2 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	885b      	ldrh	r3, [r3, #2]
 800f5a6:	b2db      	uxtb	r3, r3
 800f5a8:	461a      	mov	r2, r3
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f5b0:	e015      	b.n	800f5de <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 800f5b2:	6839      	ldr	r1, [r7, #0]
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f001 fd37 	bl	8011028 <USBD_CtlError>
              ret = USBD_FAIL;
 800f5ba:	2303      	movs	r3, #3
 800f5bc:	77fb      	strb	r3, [r7, #31]
          break;
 800f5be:	e00e      	b.n	800f5de <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800f5c0:	6839      	ldr	r1, [r7, #0]
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f001 fd30 	bl	8011028 <USBD_CtlError>
            ret = USBD_FAIL;
 800f5c8:	2303      	movs	r3, #3
 800f5ca:	77fb      	strb	r3, [r7, #31]
          break;
 800f5cc:	e007      	b.n	800f5de <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f5ce:	6839      	ldr	r1, [r7, #0]
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f001 fd29 	bl	8011028 <USBD_CtlError>
          ret = USBD_FAIL;
 800f5d6:	2303      	movs	r3, #3
 800f5d8:	77fb      	strb	r3, [r7, #31]
          break;
 800f5da:	e000      	b.n	800f5de <USBD_DFU_Setup+0x1c6>
          break;
 800f5dc:	bf00      	nop
      }
      break;
 800f5de:	e006      	b.n	800f5ee <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 800f5e0:	6839      	ldr	r1, [r7, #0]
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f001 fd20 	bl	8011028 <USBD_CtlError>
      ret = USBD_FAIL;
 800f5e8:	2303      	movs	r3, #3
 800f5ea:	77fb      	strb	r3, [r7, #31]
      break;
 800f5ec:	bf00      	nop
  }

  return (uint8_t)ret;
 800f5ee:	7ffb      	ldrb	r3, [r7, #31]
}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3720      	adds	r7, #32
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	2000005a 	.word	0x2000005a

0800f5fc <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b083      	sub	sp, #12
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	221b      	movs	r2, #27
 800f608:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 800f60a:	4b03      	ldr	r3, [pc, #12]	@ (800f618 <USBD_DFU_GetCfgDesc+0x1c>)
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	370c      	adds	r7, #12
 800f610:	46bd      	mov	sp, r7
 800f612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f616:	4770      	bx	lr
 800f618:	20000048 	.word	0x20000048

0800f61c <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f61c:	b480      	push	{r7}
 800f61e:	b083      	sub	sp, #12
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800f624:	2300      	movs	r3, #0
}
 800f626:	4618      	mov	r0, r3
 800f628:	370c      	adds	r7, #12
 800f62a:	46bd      	mov	sp, r7
 800f62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f630:	4770      	bx	lr

0800f632 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800f632:	b580      	push	{r7, lr}
 800f634:	b088      	sub	sp, #32
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f640:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f648:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 800f64a:	69fb      	ldr	r3, [r7, #28]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d101      	bne.n	800f654 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f650:	2303      	movs	r3, #3
 800f652:	e0ce      	b.n	800f7f2 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800f654:	69fb      	ldr	r3, [r7, #28]
 800f656:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f65a:	2b04      	cmp	r3, #4
 800f65c:	f040 80bd 	bne.w	800f7da <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 800f660:	69fb      	ldr	r3, [r7, #28]
 800f662:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800f666:	2b00      	cmp	r3, #0
 800f668:	d17c      	bne.n	800f764 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 800f66a:	69fb      	ldr	r3, [r7, #28]
 800f66c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800f670:	2b01      	cmp	r3, #1
 800f672:	f000 8093 	beq.w	800f79c <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 800f676:	69fb      	ldr	r3, [r7, #28]
 800f678:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800f67c:	2b05      	cmp	r3, #5
 800f67e:	d15e      	bne.n	800f73e <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 800f680:	69fb      	ldr	r3, [r7, #28]
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	2b21      	cmp	r3, #33	@ 0x21
 800f686:	d124      	bne.n	800f6d2 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	785b      	ldrb	r3, [r3, #1]
 800f68c:	461a      	mov	r2, r3
 800f68e:	69fb      	ldr	r3, [r7, #28]
 800f690:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800f694:	69fb      	ldr	r3, [r7, #28]
 800f696:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800f69a:	69fb      	ldr	r3, [r7, #28]
 800f69c:	789b      	ldrb	r3, [r3, #2]
 800f69e:	021b      	lsls	r3, r3, #8
 800f6a0:	441a      	add	r2, r3
 800f6a2:	69fb      	ldr	r3, [r7, #28]
 800f6a4:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800f6a8:	69fb      	ldr	r3, [r7, #28]
 800f6aa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800f6ae:	69fb      	ldr	r3, [r7, #28]
 800f6b0:	78db      	ldrb	r3, [r3, #3]
 800f6b2:	041b      	lsls	r3, r3, #16
 800f6b4:	441a      	add	r2, r3
 800f6b6:	69fb      	ldr	r3, [r7, #28]
 800f6b8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800f6bc:	69fb      	ldr	r3, [r7, #28]
 800f6be:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800f6c2:	69fb      	ldr	r3, [r7, #28]
 800f6c4:	791b      	ldrb	r3, [r3, #4]
 800f6c6:	061b      	lsls	r3, r3, #24
 800f6c8:	441a      	add	r2, r3
 800f6ca:	69fb      	ldr	r3, [r7, #28]
 800f6cc:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 800f6d0:	e064      	b.n	800f79c <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 800f6d2:	69fb      	ldr	r3, [r7, #28]
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	2b41      	cmp	r3, #65	@ 0x41
 800f6d8:	d12f      	bne.n	800f73a <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800f6da:	69fb      	ldr	r3, [r7, #28]
 800f6dc:	785b      	ldrb	r3, [r3, #1]
 800f6de:	461a      	mov	r2, r3
 800f6e0:	69fb      	ldr	r3, [r7, #28]
 800f6e2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800f6e6:	69fb      	ldr	r3, [r7, #28]
 800f6e8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800f6ec:	69fb      	ldr	r3, [r7, #28]
 800f6ee:	789b      	ldrb	r3, [r3, #2]
 800f6f0:	021b      	lsls	r3, r3, #8
 800f6f2:	441a      	add	r2, r3
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800f6fa:	69fb      	ldr	r3, [r7, #28]
 800f6fc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800f700:	69fb      	ldr	r3, [r7, #28]
 800f702:	78db      	ldrb	r3, [r3, #3]
 800f704:	041b      	lsls	r3, r3, #16
 800f706:	441a      	add	r2, r3
 800f708:	69fb      	ldr	r3, [r7, #28]
 800f70a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800f70e:	69fb      	ldr	r3, [r7, #28]
 800f710:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	791b      	ldrb	r3, [r3, #4]
 800f718:	061b      	lsls	r3, r3, #24
 800f71a:	441a      	add	r2, r3
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 800f722:	69bb      	ldr	r3, [r7, #24]
 800f724:	68db      	ldr	r3, [r3, #12]
 800f726:	69fa      	ldr	r2, [r7, #28]
 800f728:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 800f72c:	4610      	mov	r0, r2
 800f72e:	4798      	blx	r3
 800f730:	4603      	mov	r3, r0
 800f732:	2b00      	cmp	r3, #0
 800f734:	d032      	beq.n	800f79c <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 800f736:	2303      	movs	r3, #3
 800f738:	e05b      	b.n	800f7f2 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 800f73a:	2303      	movs	r3, #3
 800f73c:	e059      	b.n	800f7f2 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800f73e:	69fb      	ldr	r3, [r7, #28]
 800f740:	2200      	movs	r2, #0
 800f742:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 800f746:	69fb      	ldr	r3, [r7, #28]
 800f748:	2200      	movs	r2, #0
 800f74a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 800f74e:	2300      	movs	r3, #0
 800f750:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 800f752:	2301      	movs	r3, #1
 800f754:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 800f756:	f107 030c 	add.w	r3, r7, #12
 800f75a:	4619      	mov	r1, r3
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f001 fc63 	bl	8011028 <USBD_CtlError>
 800f762:	e01b      	b.n	800f79c <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800f764:	69fb      	ldr	r3, [r7, #28]
 800f766:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800f76a:	2b01      	cmp	r3, #1
 800f76c:	d916      	bls.n	800f79c <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800f76e:	69fb      	ldr	r3, [r7, #28]
 800f770:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800f774:	3b02      	subs	r3, #2
 800f776:	029a      	lsls	r2, r3, #10
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800f77e:	4413      	add	r3, r2
 800f780:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 800f782:	69bb      	ldr	r3, [r7, #24]
 800f784:	691b      	ldr	r3, [r3, #16]
 800f786:	69f8      	ldr	r0, [r7, #28]
 800f788:	6979      	ldr	r1, [r7, #20]
 800f78a:	69fa      	ldr	r2, [r7, #28]
 800f78c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 800f790:	4798      	blx	r3
 800f792:	4603      	mov	r3, r0
 800f794:	2b00      	cmp	r3, #0
 800f796:	d001      	beq.n	800f79c <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 800f798:	2303      	movs	r3, #3
 800f79a:	e02a      	b.n	800f7f2 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800f79c:	69fb      	ldr	r3, [r7, #28]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800f7ac:	69fb      	ldr	r3, [r7, #28]
 800f7ae:	2203      	movs	r2, #3
 800f7b0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800f7b4:	69fb      	ldr	r3, [r7, #28]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800f7bc:	69fb      	ldr	r3, [r7, #28]
 800f7be:	2200      	movs	r2, #0
 800f7c0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800f7c4:	69fb      	ldr	r3, [r7, #28]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800f7cc:	69fb      	ldr	r3, [r7, #28]
 800f7ce:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f7d2:	69fb      	ldr	r3, [r7, #28]
 800f7d4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800f7d8:	e00a      	b.n	800f7f0 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800f7da:	69fb      	ldr	r3, [r7, #28]
 800f7dc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f7e0:	2b07      	cmp	r3, #7
 800f7e2:	d103      	bne.n	800f7ec <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f000 fb75 	bl	800fed4 <DFU_Leave>
 800f7ea:	e001      	b.n	800f7f0 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 800f7ec:	2303      	movs	r3, #3
 800f7ee:	e000      	b.n	800f7f2 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 800f7f0:	2300      	movs	r3, #0
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3720      	adds	r7, #32
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}

0800f7fa <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800f7fa:	b480      	push	{r7}
 800f7fc:	b083      	sub	sp, #12
 800f7fe:	af00      	add	r7, sp, #0
 800f800:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800f802:	2300      	movs	r3, #0
}
 800f804:	4618      	mov	r0, r3
 800f806:	370c      	adds	r7, #12
 800f808:	46bd      	mov	sp, r7
 800f80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80e:	4770      	bx	lr

0800f810 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800f810:	b480      	push	{r7}
 800f812:	b083      	sub	sp, #12
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	220a      	movs	r2, #10
 800f81c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800f81e:	4b03      	ldr	r3, [pc, #12]	@ (800f82c <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800f820:	4618      	mov	r0, r3
 800f822:	370c      	adds	r7, #12
 800f824:	46bd      	mov	sp, r7
 800f826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82a:	4770      	bx	lr
 800f82c:	20000064 	.word	0x20000064

0800f830 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b086      	sub	sp, #24
 800f834:	af00      	add	r7, sp, #0
 800f836:	60f8      	str	r0, [r7, #12]
 800f838:	460b      	mov	r3, r1
 800f83a:	607a      	str	r2, [r7, #4]
 800f83c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f844:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800f846:	7afb      	ldrb	r3, [r7, #11]
 800f848:	2b06      	cmp	r3, #6
 800f84a:	d808      	bhi.n	800f85e <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	687a      	ldr	r2, [r7, #4]
 800f852:	4905      	ldr	r1, [pc, #20]	@ (800f868 <USBD_DFU_GetUsrStringDesc+0x38>)
 800f854:	4618      	mov	r0, r3
 800f856:	f001 fbf8 	bl	801104a <USBD_GetString>
    return USBD_StrDesc;
 800f85a:	4b03      	ldr	r3, [pc, #12]	@ (800f868 <USBD_DFU_GetUsrStringDesc+0x38>)
 800f85c:	e000      	b.n	800f860 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800f85e:	2300      	movs	r3, #0
  }
}
 800f860:	4618      	mov	r0, r3
 800f862:	3718      	adds	r7, #24
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}
 800f868:	200008f4 	.word	0x200008f4

0800f86c <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b083      	sub	sp, #12
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d101      	bne.n	800f880 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f87c:	2303      	movs	r3, #3
 800f87e:	e004      	b.n	800f88a <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	683a      	ldr	r2, [r7, #0]
 800f884:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800f888:	2300      	movs	r3, #0
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	370c      	adds	r7, #12
 800f88e:	46bd      	mov	sp, r7
 800f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f894:	4770      	bx	lr
	...

0800f898 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b084      	sub	sp, #16
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f8a8:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d051      	beq.n	800f954 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f8b6:	2b02      	cmp	r3, #2
 800f8b8:	d013      	beq.n	800f8e2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800f8c0:	2b03      	cmp	r3, #3
 800f8c2:	d00e      	beq.n	800f8e2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800f8ca:	2b05      	cmp	r3, #5
 800f8cc:	d009      	beq.n	800f8e2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800f8d4:	2b06      	cmp	r3, #6
 800f8d6:	d004      	beq.n	800f8e2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800f8de:	2b09      	cmp	r3, #9
 800f8e0:	d125      	bne.n	800f92e <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	2202      	movs	r2, #2
 800f8e6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2200      	movs	r2, #0
 800f906:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2200      	movs	r2, #0
 800f91a:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2200      	movs	r2, #0
 800f922:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	2200      	movs	r2, #0
 800f92a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 800f92e:	4b0b      	ldr	r3, [pc, #44]	@ (800f95c <DFU_Detach+0xc4>)
 800f930:	7d5b      	ldrb	r3, [r3, #21]
 800f932:	f003 0310 	and.w	r3, r3, #16
 800f936:	2b00      	cmp	r3, #0
 800f938:	d006      	beq.n	800f948 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f000 fb7b 	bl	8010036 <USBD_Stop>
    (void)USBD_Start(pdev);
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f000 fb6c 	bl	801001e <USBD_Start>
 800f946:	e006      	b.n	800f956 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	885b      	ldrh	r3, [r3, #2]
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7f4 fc7b 	bl	8004248 <HAL_Delay>
 800f952:	e000      	b.n	800f956 <DFU_Detach+0xbe>
    return;
 800f954:	bf00      	nop
  }
}
 800f956:	3710      	adds	r7, #16
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}
 800f95c:	20000048 	.word	0x20000048

0800f960 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b084      	sub	sp, #16
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f970:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d05b      	beq.n	800fa30 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	88db      	ldrh	r3, [r3, #6]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d02d      	beq.n	800f9dc <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f986:	2b02      	cmp	r3, #2
 800f988:	d004      	beq.n	800f994 <DFU_Download+0x34>
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f990:	2b05      	cmp	r3, #5
 800f992:	d11e      	bne.n	800f9d2 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	885b      	ldrh	r3, [r3, #2]
 800f998:	461a      	mov	r2, r3
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	88db      	ldrh	r3, [r3, #6]
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2203      	movs	r2, #3
 800f9b0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 800f9c0:	68f9      	ldr	r1, [r7, #12]
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f001 fbc9 	bl	8011162 <USBD_CtlPrepareRx>
 800f9d0:	e02f      	b.n	800fa32 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800f9d2:	6839      	ldr	r1, [r7, #0]
 800f9d4:	6878      	ldr	r0, [r7, #4]
 800f9d6:	f001 fb27 	bl	8011028 <USBD_CtlError>
 800f9da:	e02a      	b.n	800fa32 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f9e2:	2b05      	cmp	r3, #5
 800f9e4:	d004      	beq.n	800f9f0 <DFU_Download+0x90>
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f9ec:	2b02      	cmp	r3, #2
 800f9ee:	d11a      	bne.n	800fa26 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	2201      	movs	r2, #1
 800f9f4:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	2206      	movs	r2, #6
 800f9fc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	2200      	movs	r2, #0
 800fa04:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2200      	movs	r2, #0
 800fa14:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800fa24:	e005      	b.n	800fa32 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800fa26:	6839      	ldr	r1, [r7, #0]
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f001 fafd 	bl	8011028 <USBD_CtlError>
 800fa2e:	e000      	b.n	800fa32 <DFU_Download+0xd2>
    return;
 800fa30:	bf00      	nop
    }
  }
}
 800fa32:	3710      	adds	r7, #16
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}

0800fa38 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b086      	sub	sp, #24
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fa48:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800fa50:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	f000 80c4 	beq.w	800fbe2 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	88db      	ldrh	r3, [r3, #6]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	f000 80a8 	beq.w	800fbb4 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800fa6a:	2b02      	cmp	r3, #2
 800fa6c:	d005      	beq.n	800fa7a <DFU_Upload+0x42>
 800fa6e:	697b      	ldr	r3, [r7, #20]
 800fa70:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800fa74:	2b09      	cmp	r3, #9
 800fa76:	f040 8090 	bne.w	800fb9a <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	885b      	ldrh	r3, [r3, #2]
 800fa7e:	461a      	mov	r2, r3
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	88db      	ldrh	r3, [r3, #6]
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d12c      	bne.n	800faf6 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800faa2:	2b03      	cmp	r3, #3
 800faa4:	d901      	bls.n	800faaa <DFU_Upload+0x72>
 800faa6:	2202      	movs	r2, #2
 800faa8:	e000      	b.n	800faac <DFU_Upload+0x74>
 800faaa:	2209      	movs	r2, #9
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	2200      	movs	r2, #0
 800fab6:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	2200      	movs	r2, #0
 800fabe:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	2200      	movs	r2, #0
 800fac6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800fad6:	697b      	ldr	r3, [r7, #20]
 800fad8:	2200      	movs	r2, #0
 800fada:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	2221      	movs	r2, #33	@ 0x21
 800fae0:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800fae2:	697b      	ldr	r3, [r7, #20]
 800fae4:	2241      	movs	r2, #65	@ 0x41
 800fae6:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	2203      	movs	r2, #3
 800faec:	4619      	mov	r1, r3
 800faee:	6878      	ldr	r0, [r7, #4]
 800faf0:	f001 fb0b 	bl	801110a <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800faf4:	e076      	b.n	800fbe4 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800fafc:	2b01      	cmp	r3, #1
 800fafe:	d931      	bls.n	800fb64 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	2209      	movs	r2, #9
 800fb04:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	2200      	movs	r2, #0
 800fb14:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800fb32:	3b02      	subs	r3, #2
 800fb34:	029a      	lsls	r2, r3, #10
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800fb3c:	4413      	add	r3, r2
 800fb3e:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800fb40:	693b      	ldr	r3, [r7, #16]
 800fb42:	695b      	ldr	r3, [r3, #20]
 800fb44:	68f8      	ldr	r0, [r7, #12]
 800fb46:	6979      	ldr	r1, [r7, #20]
 800fb48:	697a      	ldr	r2, [r7, #20]
 800fb4a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 800fb4e:	4798      	blx	r3
 800fb50:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800fb58:	461a      	mov	r2, r3
 800fb5a:	68b9      	ldr	r1, [r7, #8]
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f001 fad4 	bl	801110a <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800fb62:	e03f      	b.n	800fbe4 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	220f      	movs	r2, #15
 800fb68:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	2200      	movs	r2, #0
 800fb78:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 800fb90:	6839      	ldr	r1, [r7, #0]
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f001 fa48 	bl	8011028 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800fb98:	e024      	b.n	800fbe4 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	2200      	movs	r2, #0
 800fba6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800fbaa:	6839      	ldr	r1, [r7, #0]
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f001 fa3b 	bl	8011028 <USBD_CtlError>
 800fbb2:	e017      	b.n	800fbe4 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	2202      	movs	r2, #2
 800fbb8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	2200      	movs	r2, #0
 800fbd0:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800fbe0:	e000      	b.n	800fbe4 <DFU_Upload+0x1ac>
    return;
 800fbe2:	bf00      	nop
  }
}
 800fbe4:	3718      	adds	r7, #24
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
	...

0800fbec <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b084      	sub	sp, #16
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fbfa:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800fc02:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	f000 80a0 	beq.w	800fd4c <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800fc12:	2b03      	cmp	r3, #3
 800fc14:	d002      	beq.n	800fc1c <DFU_GetStatus+0x30>
 800fc16:	2b06      	cmp	r3, #6
 800fc18:	d051      	beq.n	800fcbe <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 800fc1a:	e08e      	b.n	800fd3a <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d034      	beq.n	800fc90 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2204      	movs	r2, #4
 800fc2a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	2200      	movs	r2, #0
 800fc32:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2200      	movs	r2, #0
 800fc3a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2200      	movs	r2, #0
 800fc42:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d10e      	bne.n	800fc7a <DFU_GetStatus+0x8e>
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	781b      	ldrb	r3, [r3, #0]
 800fc60:	2b41      	cmp	r3, #65	@ 0x41
 800fc62:	d10a      	bne.n	800fc7a <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	699b      	ldr	r3, [r3, #24]
 800fc68:	68fa      	ldr	r2, [r7, #12]
 800fc6a:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 800fc6e:	68fa      	ldr	r2, [r7, #12]
 800fc70:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 800fc74:	2100      	movs	r1, #0
 800fc76:	4798      	blx	r3
      break;
 800fc78:	e05f      	b.n	800fd3a <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	699b      	ldr	r3, [r3, #24]
 800fc7e:	68fa      	ldr	r2, [r7, #12]
 800fc80:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 800fc84:	68fa      	ldr	r2, [r7, #12]
 800fc86:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 800fc8a:	2101      	movs	r1, #1
 800fc8c:	4798      	blx	r3
      break;
 800fc8e:	e054      	b.n	800fd3a <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	2205      	movs	r2, #5
 800fc94:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	2200      	movs	r2, #0
 800fca4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800fcbc:	e03d      	b.n	800fd3a <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800fcc4:	2b01      	cmp	r3, #1
 800fcc6:	d116      	bne.n	800fcf6 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	2207      	movs	r2, #7
 800fccc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2201      	movs	r2, #1
 800fcd4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	2200      	movs	r2, #0
 800fce4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800fcf4:	e020      	b.n	800fd38 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d11b      	bne.n	800fd38 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 800fd00:	4b14      	ldr	r3, [pc, #80]	@ (800fd54 <DFU_GetStatus+0x168>)
 800fd02:	7d1b      	ldrb	r3, [r3, #20]
 800fd04:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d015      	beq.n	800fd38 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	2202      	movs	r2, #2
 800fd10:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	2200      	movs	r2, #0
 800fd18:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2200      	movs	r2, #0
 800fd28:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800fd38:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 800fd40:	2206      	movs	r2, #6
 800fd42:	4619      	mov	r1, r3
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f001 f9e0 	bl	801110a <USBD_CtlSendData>
 800fd4a:	e000      	b.n	800fd4e <DFU_GetStatus+0x162>
    return;
 800fd4c:	bf00      	nop
}
 800fd4e:	3710      	adds	r7, #16
 800fd50:	46bd      	mov	sp, r7
 800fd52:	bd80      	pop	{r7, pc}
 800fd54:	20000048 	.word	0x20000048

0800fd58 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b085      	sub	sp, #20
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fd66:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d042      	beq.n	800fdf4 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800fd74:	2b0a      	cmp	r3, #10
 800fd76:	d11e      	bne.n	800fdb6 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	2202      	movs	r2, #2
 800fd7c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	2200      	movs	r2, #0
 800fd84:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	2200      	movs	r2, #0
 800fd94:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	2200      	movs	r2, #0
 800fdb0:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 800fdb4:	e01f      	b.n	800fdf6 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	220a      	movs	r2, #10
 800fdba:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	220e      	movs	r2, #14
 800fdc2:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	2200      	movs	r2, #0
 800fdda:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	2200      	movs	r2, #0
 800fdee:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 800fdf2:	e000      	b.n	800fdf6 <DFU_ClearStatus+0x9e>
    return;
 800fdf4:	bf00      	nop
  }
}
 800fdf6:	3714      	adds	r7, #20
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfe:	4770      	bx	lr

0800fe00 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b084      	sub	sp, #16
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fe0e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d008      	beq.n	800fe28 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 800fe1c:	2201      	movs	r2, #1
 800fe1e:	4619      	mov	r1, r3
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f001 f972 	bl	801110a <USBD_CtlSendData>
 800fe26:	e000      	b.n	800fe2a <DFU_GetState+0x2a>
    return;
 800fe28:	bf00      	nop
}
 800fe2a:	3710      	adds	r7, #16
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}

0800fe30 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 800fe30:	b480      	push	{r7}
 800fe32:	b085      	sub	sp, #20
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fe3e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d03f      	beq.n	800fec6 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800fe4c:	2b02      	cmp	r3, #2
 800fe4e:	d013      	beq.n	800fe78 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800fe56:	2b03      	cmp	r3, #3
 800fe58:	d00e      	beq.n	800fe78 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800fe60:	2b05      	cmp	r3, #5
 800fe62:	d009      	beq.n	800fe78 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800fe6a:	2b06      	cmp	r3, #6
 800fe6c:	d004      	beq.n	800fe78 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800fe74:	2b09      	cmp	r3, #9
 800fe76:	d127      	bne.n	800fec8 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	2202      	movs	r2, #2
 800fe7c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	2200      	movs	r2, #0
 800fe84:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	2200      	movs	r2, #0
 800fe94:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	2200      	movs	r2, #0
 800feb0:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	2200      	movs	r2, #0
 800feb8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	2200      	movs	r2, #0
 800fec0:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800fec4:	e000      	b.n	800fec8 <DFU_Abort+0x98>
    return;
 800fec6:	bf00      	nop
  }
}
 800fec8:	3714      	adds	r7, #20
 800feca:	46bd      	mov	sp, r7
 800fecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed0:	4770      	bx	lr
	...

0800fed4 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b084      	sub	sp, #16
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fee2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d03b      	beq.n	800ff62 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	2200      	movs	r2, #0
 800feee:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 800fef2:	4b1e      	ldr	r3, [pc, #120]	@ (800ff6c <DFU_Leave+0x98>)
 800fef4:	7d1b      	ldrb	r3, [r3, #20]
 800fef6:	f003 0304 	and.w	r3, r3, #4
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d016      	beq.n	800ff2c <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	2206      	movs	r2, #6
 800ff02:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	2200      	movs	r2, #0
 800ff12:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 800ff2a:	e01b      	b.n	800ff64 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	2208      	movs	r2, #8
 800ff30:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	2200      	movs	r2, #0
 800ff38:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	2200      	movs	r2, #0
 800ff48:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f000 f86c 	bl	8010036 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800ff5e:	f7ff f9b3 	bl	800f2c8 <__NVIC_SystemReset>
    return;
 800ff62:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 800ff64:	3710      	adds	r7, #16
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}
 800ff6a:	bf00      	nop
 800ff6c:	20000048 	.word	0x20000048

0800ff70 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b086      	sub	sp, #24
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	60f8      	str	r0, [r7, #12]
 800ff78:	60b9      	str	r1, [r7, #8]
 800ff7a:	4613      	mov	r3, r2
 800ff7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d101      	bne.n	800ff88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ff84:	2303      	movs	r3, #3
 800ff86:	e01f      	b.n	800ffc8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	2200      	movs	r2, #0
 800ff94:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d003      	beq.n	800ffae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	68ba      	ldr	r2, [r7, #8]
 800ffaa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	2201      	movs	r2, #1
 800ffb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	79fa      	ldrb	r2, [r7, #7]
 800ffba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ffbc:	68f8      	ldr	r0, [r7, #12]
 800ffbe:	f001 fbd9 	bl	8011774 <USBD_LL_Init>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ffc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3718      	adds	r7, #24
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}

0800ffd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b084      	sub	sp, #16
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d101      	bne.n	800ffe8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ffe4:	2303      	movs	r3, #3
 800ffe6:	e016      	b.n	8010016 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	683a      	ldr	r2, [r7, #0]
 800ffec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d00b      	beq.n	8010014 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010004:	f107 020e 	add.w	r2, r7, #14
 8010008:	4610      	mov	r0, r2
 801000a:	4798      	blx	r3
 801000c:	4602      	mov	r2, r0
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8010014:	2300      	movs	r3, #0
}
 8010016:	4618      	mov	r0, r3
 8010018:	3710      	adds	r7, #16
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}

0801001e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801001e:	b580      	push	{r7, lr}
 8010020:	b082      	sub	sp, #8
 8010022:	af00      	add	r7, sp, #0
 8010024:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f001 fbea 	bl	8011800 <USBD_LL_Start>
 801002c:	4603      	mov	r3, r0
}
 801002e:	4618      	mov	r0, r3
 8010030:	3708      	adds	r7, #8
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}

08010036 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8010036:	b580      	push	{r7, lr}
 8010038:	b082      	sub	sp, #8
 801003a:	af00      	add	r7, sp, #0
 801003c:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 801003e:	6878      	ldr	r0, [r7, #4]
 8010040:	f001 fbf9 	bl	8011836 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801004a:	2b00      	cmp	r3, #0
 801004c:	d009      	beq.n	8010062 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010054:	685b      	ldr	r3, [r3, #4]
 8010056:	687a      	ldr	r2, [r7, #4]
 8010058:	6852      	ldr	r2, [r2, #4]
 801005a:	b2d2      	uxtb	r2, r2
 801005c:	4611      	mov	r1, r2
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	4798      	blx	r3
  }

  return USBD_OK;
 8010062:	2300      	movs	r3, #0
}
 8010064:	4618      	mov	r0, r3
 8010066:	3708      	adds	r7, #8
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}

0801006c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801006c:	b480      	push	{r7}
 801006e:	b083      	sub	sp, #12
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010074:	2300      	movs	r3, #0
}
 8010076:	4618      	mov	r0, r3
 8010078:	370c      	adds	r7, #12
 801007a:	46bd      	mov	sp, r7
 801007c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010080:	4770      	bx	lr

08010082 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010082:	b580      	push	{r7, lr}
 8010084:	b084      	sub	sp, #16
 8010086:	af00      	add	r7, sp, #0
 8010088:	6078      	str	r0, [r7, #4]
 801008a:	460b      	mov	r3, r1
 801008c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801008e:	2303      	movs	r3, #3
 8010090:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010098:	2b00      	cmp	r3, #0
 801009a:	d009      	beq.n	80100b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	78fa      	ldrb	r2, [r7, #3]
 80100a6:	4611      	mov	r1, r2
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	4798      	blx	r3
 80100ac:	4603      	mov	r3, r0
 80100ae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80100b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80100b2:	4618      	mov	r0, r3
 80100b4:	3710      	adds	r7, #16
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}

080100ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80100ba:	b580      	push	{r7, lr}
 80100bc:	b082      	sub	sp, #8
 80100be:	af00      	add	r7, sp, #0
 80100c0:	6078      	str	r0, [r7, #4]
 80100c2:	460b      	mov	r3, r1
 80100c4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d007      	beq.n	80100e0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100d6:	685b      	ldr	r3, [r3, #4]
 80100d8:	78fa      	ldrb	r2, [r7, #3]
 80100da:	4611      	mov	r1, r2
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	4798      	blx	r3
  }

  return USBD_OK;
 80100e0:	2300      	movs	r3, #0
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3708      	adds	r7, #8
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}

080100ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80100ea:	b580      	push	{r7, lr}
 80100ec:	b084      	sub	sp, #16
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	6078      	str	r0, [r7, #4]
 80100f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80100fa:	6839      	ldr	r1, [r7, #0]
 80100fc:	4618      	mov	r0, r3
 80100fe:	f000 ff59 	bl	8010fb4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2201      	movs	r2, #1
 8010106:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010110:	461a      	mov	r2, r3
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801011e:	f003 031f 	and.w	r3, r3, #31
 8010122:	2b02      	cmp	r3, #2
 8010124:	d01a      	beq.n	801015c <USBD_LL_SetupStage+0x72>
 8010126:	2b02      	cmp	r3, #2
 8010128:	d822      	bhi.n	8010170 <USBD_LL_SetupStage+0x86>
 801012a:	2b00      	cmp	r3, #0
 801012c:	d002      	beq.n	8010134 <USBD_LL_SetupStage+0x4a>
 801012e:	2b01      	cmp	r3, #1
 8010130:	d00a      	beq.n	8010148 <USBD_LL_SetupStage+0x5e>
 8010132:	e01d      	b.n	8010170 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801013a:	4619      	mov	r1, r3
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f000 f9ef 	bl	8010520 <USBD_StdDevReq>
 8010142:	4603      	mov	r3, r0
 8010144:	73fb      	strb	r3, [r7, #15]
      break;
 8010146:	e020      	b.n	801018a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801014e:	4619      	mov	r1, r3
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f000 fa53 	bl	80105fc <USBD_StdItfReq>
 8010156:	4603      	mov	r3, r0
 8010158:	73fb      	strb	r3, [r7, #15]
      break;
 801015a:	e016      	b.n	801018a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010162:	4619      	mov	r1, r3
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f000 fa92 	bl	801068e <USBD_StdEPReq>
 801016a:	4603      	mov	r3, r0
 801016c:	73fb      	strb	r3, [r7, #15]
      break;
 801016e:	e00c      	b.n	801018a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010176:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801017a:	b2db      	uxtb	r3, r3
 801017c:	4619      	mov	r1, r3
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f001 fb9a 	bl	80118b8 <USBD_LL_StallEP>
 8010184:	4603      	mov	r3, r0
 8010186:	73fb      	strb	r3, [r7, #15]
      break;
 8010188:	bf00      	nop
  }

  return ret;
 801018a:	7bfb      	ldrb	r3, [r7, #15]
}
 801018c:	4618      	mov	r0, r3
 801018e:	3710      	adds	r7, #16
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b086      	sub	sp, #24
 8010198:	af00      	add	r7, sp, #0
 801019a:	60f8      	str	r0, [r7, #12]
 801019c:	460b      	mov	r3, r1
 801019e:	607a      	str	r2, [r7, #4]
 80101a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80101a2:	7afb      	ldrb	r3, [r7, #11]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d138      	bne.n	801021a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80101ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80101b6:	2b03      	cmp	r3, #3
 80101b8:	d14a      	bne.n	8010250 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	689a      	ldr	r2, [r3, #8]
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	68db      	ldr	r3, [r3, #12]
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d913      	bls.n	80101ee <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80101c6:	693b      	ldr	r3, [r7, #16]
 80101c8:	689a      	ldr	r2, [r3, #8]
 80101ca:	693b      	ldr	r3, [r7, #16]
 80101cc:	68db      	ldr	r3, [r3, #12]
 80101ce:	1ad2      	subs	r2, r2, r3
 80101d0:	693b      	ldr	r3, [r7, #16]
 80101d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80101d4:	693b      	ldr	r3, [r7, #16]
 80101d6:	68da      	ldr	r2, [r3, #12]
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	689b      	ldr	r3, [r3, #8]
 80101dc:	4293      	cmp	r3, r2
 80101de:	bf28      	it	cs
 80101e0:	4613      	movcs	r3, r2
 80101e2:	461a      	mov	r2, r3
 80101e4:	6879      	ldr	r1, [r7, #4]
 80101e6:	68f8      	ldr	r0, [r7, #12]
 80101e8:	f000 ffd8 	bl	801119c <USBD_CtlContinueRx>
 80101ec:	e030      	b.n	8010250 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80101f4:	b2db      	uxtb	r3, r3
 80101f6:	2b03      	cmp	r3, #3
 80101f8:	d10b      	bne.n	8010212 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010200:	691b      	ldr	r3, [r3, #16]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d005      	beq.n	8010212 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801020c:	691b      	ldr	r3, [r3, #16]
 801020e:	68f8      	ldr	r0, [r7, #12]
 8010210:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010212:	68f8      	ldr	r0, [r7, #12]
 8010214:	f000 ffd3 	bl	80111be <USBD_CtlSendStatus>
 8010218:	e01a      	b.n	8010250 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010220:	b2db      	uxtb	r3, r3
 8010222:	2b03      	cmp	r3, #3
 8010224:	d114      	bne.n	8010250 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801022c:	699b      	ldr	r3, [r3, #24]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d00e      	beq.n	8010250 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010238:	699b      	ldr	r3, [r3, #24]
 801023a:	7afa      	ldrb	r2, [r7, #11]
 801023c:	4611      	mov	r1, r2
 801023e:	68f8      	ldr	r0, [r7, #12]
 8010240:	4798      	blx	r3
 8010242:	4603      	mov	r3, r0
 8010244:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010246:	7dfb      	ldrb	r3, [r7, #23]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d001      	beq.n	8010250 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801024c:	7dfb      	ldrb	r3, [r7, #23]
 801024e:	e000      	b.n	8010252 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8010250:	2300      	movs	r3, #0
}
 8010252:	4618      	mov	r0, r3
 8010254:	3718      	adds	r7, #24
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}

0801025a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801025a:	b580      	push	{r7, lr}
 801025c:	b086      	sub	sp, #24
 801025e:	af00      	add	r7, sp, #0
 8010260:	60f8      	str	r0, [r7, #12]
 8010262:	460b      	mov	r3, r1
 8010264:	607a      	str	r2, [r7, #4]
 8010266:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010268:	7afb      	ldrb	r3, [r7, #11]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d16b      	bne.n	8010346 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	3314      	adds	r3, #20
 8010272:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801027a:	2b02      	cmp	r3, #2
 801027c:	d156      	bne.n	801032c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	689a      	ldr	r2, [r3, #8]
 8010282:	693b      	ldr	r3, [r7, #16]
 8010284:	68db      	ldr	r3, [r3, #12]
 8010286:	429a      	cmp	r2, r3
 8010288:	d914      	bls.n	80102b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801028a:	693b      	ldr	r3, [r7, #16]
 801028c:	689a      	ldr	r2, [r3, #8]
 801028e:	693b      	ldr	r3, [r7, #16]
 8010290:	68db      	ldr	r3, [r3, #12]
 8010292:	1ad2      	subs	r2, r2, r3
 8010294:	693b      	ldr	r3, [r7, #16]
 8010296:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010298:	693b      	ldr	r3, [r7, #16]
 801029a:	689b      	ldr	r3, [r3, #8]
 801029c:	461a      	mov	r2, r3
 801029e:	6879      	ldr	r1, [r7, #4]
 80102a0:	68f8      	ldr	r0, [r7, #12]
 80102a2:	f000 ff4d 	bl	8011140 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80102a6:	2300      	movs	r3, #0
 80102a8:	2200      	movs	r2, #0
 80102aa:	2100      	movs	r1, #0
 80102ac:	68f8      	ldr	r0, [r7, #12]
 80102ae:	f001 fbad 	bl	8011a0c <USBD_LL_PrepareReceive>
 80102b2:	e03b      	b.n	801032c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80102b4:	693b      	ldr	r3, [r7, #16]
 80102b6:	68da      	ldr	r2, [r3, #12]
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	689b      	ldr	r3, [r3, #8]
 80102bc:	429a      	cmp	r2, r3
 80102be:	d11c      	bne.n	80102fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80102c0:	693b      	ldr	r3, [r7, #16]
 80102c2:	685a      	ldr	r2, [r3, #4]
 80102c4:	693b      	ldr	r3, [r7, #16]
 80102c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80102c8:	429a      	cmp	r2, r3
 80102ca:	d316      	bcc.n	80102fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	685a      	ldr	r2, [r3, #4]
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80102d6:	429a      	cmp	r2, r3
 80102d8:	d20f      	bcs.n	80102fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80102da:	2200      	movs	r2, #0
 80102dc:	2100      	movs	r1, #0
 80102de:	68f8      	ldr	r0, [r7, #12]
 80102e0:	f000 ff2e 	bl	8011140 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	2200      	movs	r2, #0
 80102e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80102ec:	2300      	movs	r3, #0
 80102ee:	2200      	movs	r2, #0
 80102f0:	2100      	movs	r1, #0
 80102f2:	68f8      	ldr	r0, [r7, #12]
 80102f4:	f001 fb8a 	bl	8011a0c <USBD_LL_PrepareReceive>
 80102f8:	e018      	b.n	801032c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010300:	b2db      	uxtb	r3, r3
 8010302:	2b03      	cmp	r3, #3
 8010304:	d10b      	bne.n	801031e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801030c:	68db      	ldr	r3, [r3, #12]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d005      	beq.n	801031e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010318:	68db      	ldr	r3, [r3, #12]
 801031a:	68f8      	ldr	r0, [r7, #12]
 801031c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801031e:	2180      	movs	r1, #128	@ 0x80
 8010320:	68f8      	ldr	r0, [r7, #12]
 8010322:	f001 fac9 	bl	80118b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010326:	68f8      	ldr	r0, [r7, #12]
 8010328:	f000 ff5c 	bl	80111e4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8010332:	2b01      	cmp	r3, #1
 8010334:	d122      	bne.n	801037c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8010336:	68f8      	ldr	r0, [r7, #12]
 8010338:	f7ff fe98 	bl	801006c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	2200      	movs	r2, #0
 8010340:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010344:	e01a      	b.n	801037c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801034c:	b2db      	uxtb	r3, r3
 801034e:	2b03      	cmp	r3, #3
 8010350:	d114      	bne.n	801037c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010358:	695b      	ldr	r3, [r3, #20]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d00e      	beq.n	801037c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010364:	695b      	ldr	r3, [r3, #20]
 8010366:	7afa      	ldrb	r2, [r7, #11]
 8010368:	4611      	mov	r1, r2
 801036a:	68f8      	ldr	r0, [r7, #12]
 801036c:	4798      	blx	r3
 801036e:	4603      	mov	r3, r0
 8010370:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010372:	7dfb      	ldrb	r3, [r7, #23]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d001      	beq.n	801037c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8010378:	7dfb      	ldrb	r3, [r7, #23]
 801037a:	e000      	b.n	801037e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801037c:	2300      	movs	r3, #0
}
 801037e:	4618      	mov	r0, r3
 8010380:	3718      	adds	r7, #24
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}

08010386 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010386:	b580      	push	{r7, lr}
 8010388:	b082      	sub	sp, #8
 801038a:	af00      	add	r7, sp, #0
 801038c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2201      	movs	r2, #1
 8010392:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2200      	movs	r2, #0
 801039a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2200      	movs	r2, #0
 80103a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2200      	movs	r2, #0
 80103a8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d101      	bne.n	80103ba <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80103b6:	2303      	movs	r3, #3
 80103b8:	e02f      	b.n	801041a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d00f      	beq.n	80103e4 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103ca:	685b      	ldr	r3, [r3, #4]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d009      	beq.n	80103e4 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	687a      	ldr	r2, [r7, #4]
 80103da:	6852      	ldr	r2, [r2, #4]
 80103dc:	b2d2      	uxtb	r2, r2
 80103de:	4611      	mov	r1, r2
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80103e4:	2340      	movs	r3, #64	@ 0x40
 80103e6:	2200      	movs	r2, #0
 80103e8:	2100      	movs	r1, #0
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f001 fa3e 	bl	801186c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2201      	movs	r2, #1
 80103f4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2240      	movs	r2, #64	@ 0x40
 80103fc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010400:	2340      	movs	r3, #64	@ 0x40
 8010402:	2200      	movs	r2, #0
 8010404:	2180      	movs	r1, #128	@ 0x80
 8010406:	6878      	ldr	r0, [r7, #4]
 8010408:	f001 fa30 	bl	801186c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2201      	movs	r2, #1
 8010410:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2240      	movs	r2, #64	@ 0x40
 8010416:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010418:	2300      	movs	r3, #0
}
 801041a:	4618      	mov	r0, r3
 801041c:	3708      	adds	r7, #8
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}

08010422 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010422:	b480      	push	{r7}
 8010424:	b083      	sub	sp, #12
 8010426:	af00      	add	r7, sp, #0
 8010428:	6078      	str	r0, [r7, #4]
 801042a:	460b      	mov	r3, r1
 801042c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	78fa      	ldrb	r2, [r7, #3]
 8010432:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010434:	2300      	movs	r3, #0
}
 8010436:	4618      	mov	r0, r3
 8010438:	370c      	adds	r7, #12
 801043a:	46bd      	mov	sp, r7
 801043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010440:	4770      	bx	lr

08010442 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010442:	b480      	push	{r7}
 8010444:	b083      	sub	sp, #12
 8010446:	af00      	add	r7, sp, #0
 8010448:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010450:	b2da      	uxtb	r2, r3
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2204      	movs	r2, #4
 801045c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8010460:	2300      	movs	r3, #0
}
 8010462:	4618      	mov	r0, r3
 8010464:	370c      	adds	r7, #12
 8010466:	46bd      	mov	sp, r7
 8010468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046c:	4770      	bx	lr

0801046e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801046e:	b480      	push	{r7}
 8010470:	b083      	sub	sp, #12
 8010472:	af00      	add	r7, sp, #0
 8010474:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801047c:	b2db      	uxtb	r3, r3
 801047e:	2b04      	cmp	r3, #4
 8010480:	d106      	bne.n	8010490 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010488:	b2da      	uxtb	r2, r3
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8010490:	2300      	movs	r3, #0
}
 8010492:	4618      	mov	r0, r3
 8010494:	370c      	adds	r7, #12
 8010496:	46bd      	mov	sp, r7
 8010498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049c:	4770      	bx	lr

0801049e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801049e:	b580      	push	{r7, lr}
 80104a0:	b082      	sub	sp, #8
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d101      	bne.n	80104b4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80104b0:	2303      	movs	r3, #3
 80104b2:	e012      	b.n	80104da <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104ba:	b2db      	uxtb	r3, r3
 80104bc:	2b03      	cmp	r3, #3
 80104be:	d10b      	bne.n	80104d8 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80104c6:	69db      	ldr	r3, [r3, #28]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d005      	beq.n	80104d8 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80104d2:	69db      	ldr	r3, [r3, #28]
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80104d8:	2300      	movs	r3, #0
}
 80104da:	4618      	mov	r0, r3
 80104dc:	3708      	adds	r7, #8
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}

080104e2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80104e2:	b480      	push	{r7}
 80104e4:	b087      	sub	sp, #28
 80104e6:	af00      	add	r7, sp, #0
 80104e8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	781b      	ldrb	r3, [r3, #0]
 80104f2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80104f4:	697b      	ldr	r3, [r7, #20]
 80104f6:	3301      	adds	r3, #1
 80104f8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80104fa:	697b      	ldr	r3, [r7, #20]
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010500:	8a3b      	ldrh	r3, [r7, #16]
 8010502:	021b      	lsls	r3, r3, #8
 8010504:	b21a      	sxth	r2, r3
 8010506:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801050a:	4313      	orrs	r3, r2
 801050c:	b21b      	sxth	r3, r3
 801050e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010510:	89fb      	ldrh	r3, [r7, #14]
}
 8010512:	4618      	mov	r0, r3
 8010514:	371c      	adds	r7, #28
 8010516:	46bd      	mov	sp, r7
 8010518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051c:	4770      	bx	lr
	...

08010520 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b084      	sub	sp, #16
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
 8010528:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801052a:	2300      	movs	r3, #0
 801052c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010536:	2b40      	cmp	r3, #64	@ 0x40
 8010538:	d005      	beq.n	8010546 <USBD_StdDevReq+0x26>
 801053a:	2b40      	cmp	r3, #64	@ 0x40
 801053c:	d853      	bhi.n	80105e6 <USBD_StdDevReq+0xc6>
 801053e:	2b00      	cmp	r3, #0
 8010540:	d00b      	beq.n	801055a <USBD_StdDevReq+0x3a>
 8010542:	2b20      	cmp	r3, #32
 8010544:	d14f      	bne.n	80105e6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801054c:	689b      	ldr	r3, [r3, #8]
 801054e:	6839      	ldr	r1, [r7, #0]
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	4798      	blx	r3
 8010554:	4603      	mov	r3, r0
 8010556:	73fb      	strb	r3, [r7, #15]
      break;
 8010558:	e04a      	b.n	80105f0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	785b      	ldrb	r3, [r3, #1]
 801055e:	2b09      	cmp	r3, #9
 8010560:	d83b      	bhi.n	80105da <USBD_StdDevReq+0xba>
 8010562:	a201      	add	r2, pc, #4	@ (adr r2, 8010568 <USBD_StdDevReq+0x48>)
 8010564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010568:	080105bd 	.word	0x080105bd
 801056c:	080105d1 	.word	0x080105d1
 8010570:	080105db 	.word	0x080105db
 8010574:	080105c7 	.word	0x080105c7
 8010578:	080105db 	.word	0x080105db
 801057c:	0801059b 	.word	0x0801059b
 8010580:	08010591 	.word	0x08010591
 8010584:	080105db 	.word	0x080105db
 8010588:	080105b3 	.word	0x080105b3
 801058c:	080105a5 	.word	0x080105a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010590:	6839      	ldr	r1, [r7, #0]
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f000 f9de 	bl	8010954 <USBD_GetDescriptor>
          break;
 8010598:	e024      	b.n	80105e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801059a:	6839      	ldr	r1, [r7, #0]
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f000 fb7f 	bl	8010ca0 <USBD_SetAddress>
          break;
 80105a2:	e01f      	b.n	80105e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80105a4:	6839      	ldr	r1, [r7, #0]
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f000 fbbe 	bl	8010d28 <USBD_SetConfig>
 80105ac:	4603      	mov	r3, r0
 80105ae:	73fb      	strb	r3, [r7, #15]
          break;
 80105b0:	e018      	b.n	80105e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80105b2:	6839      	ldr	r1, [r7, #0]
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f000 fc5d 	bl	8010e74 <USBD_GetConfig>
          break;
 80105ba:	e013      	b.n	80105e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80105bc:	6839      	ldr	r1, [r7, #0]
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f000 fc8e 	bl	8010ee0 <USBD_GetStatus>
          break;
 80105c4:	e00e      	b.n	80105e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80105c6:	6839      	ldr	r1, [r7, #0]
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f000 fcbd 	bl	8010f48 <USBD_SetFeature>
          break;
 80105ce:	e009      	b.n	80105e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80105d0:	6839      	ldr	r1, [r7, #0]
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f000 fccc 	bl	8010f70 <USBD_ClrFeature>
          break;
 80105d8:	e004      	b.n	80105e4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80105da:	6839      	ldr	r1, [r7, #0]
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f000 fd23 	bl	8011028 <USBD_CtlError>
          break;
 80105e2:	bf00      	nop
      }
      break;
 80105e4:	e004      	b.n	80105f0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80105e6:	6839      	ldr	r1, [r7, #0]
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f000 fd1d 	bl	8011028 <USBD_CtlError>
      break;
 80105ee:	bf00      	nop
  }

  return ret;
 80105f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3710      	adds	r7, #16
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
 80105fa:	bf00      	nop

080105fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b084      	sub	sp, #16
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010606:	2300      	movs	r3, #0
 8010608:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	781b      	ldrb	r3, [r3, #0]
 801060e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010612:	2b40      	cmp	r3, #64	@ 0x40
 8010614:	d005      	beq.n	8010622 <USBD_StdItfReq+0x26>
 8010616:	2b40      	cmp	r3, #64	@ 0x40
 8010618:	d82f      	bhi.n	801067a <USBD_StdItfReq+0x7e>
 801061a:	2b00      	cmp	r3, #0
 801061c:	d001      	beq.n	8010622 <USBD_StdItfReq+0x26>
 801061e:	2b20      	cmp	r3, #32
 8010620:	d12b      	bne.n	801067a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010628:	b2db      	uxtb	r3, r3
 801062a:	3b01      	subs	r3, #1
 801062c:	2b02      	cmp	r3, #2
 801062e:	d81d      	bhi.n	801066c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	889b      	ldrh	r3, [r3, #4]
 8010634:	b2db      	uxtb	r3, r3
 8010636:	2b01      	cmp	r3, #1
 8010638:	d813      	bhi.n	8010662 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010640:	689b      	ldr	r3, [r3, #8]
 8010642:	6839      	ldr	r1, [r7, #0]
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	4798      	blx	r3
 8010648:	4603      	mov	r3, r0
 801064a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	88db      	ldrh	r3, [r3, #6]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d110      	bne.n	8010676 <USBD_StdItfReq+0x7a>
 8010654:	7bfb      	ldrb	r3, [r7, #15]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d10d      	bne.n	8010676 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f000 fdaf 	bl	80111be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010660:	e009      	b.n	8010676 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8010662:	6839      	ldr	r1, [r7, #0]
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f000 fcdf 	bl	8011028 <USBD_CtlError>
          break;
 801066a:	e004      	b.n	8010676 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801066c:	6839      	ldr	r1, [r7, #0]
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	f000 fcda 	bl	8011028 <USBD_CtlError>
          break;
 8010674:	e000      	b.n	8010678 <USBD_StdItfReq+0x7c>
          break;
 8010676:	bf00      	nop
      }
      break;
 8010678:	e004      	b.n	8010684 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801067a:	6839      	ldr	r1, [r7, #0]
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f000 fcd3 	bl	8011028 <USBD_CtlError>
      break;
 8010682:	bf00      	nop
  }

  return ret;
 8010684:	7bfb      	ldrb	r3, [r7, #15]
}
 8010686:	4618      	mov	r0, r3
 8010688:	3710      	adds	r7, #16
 801068a:	46bd      	mov	sp, r7
 801068c:	bd80      	pop	{r7, pc}

0801068e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801068e:	b580      	push	{r7, lr}
 8010690:	b084      	sub	sp, #16
 8010692:	af00      	add	r7, sp, #0
 8010694:	6078      	str	r0, [r7, #4]
 8010696:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010698:	2300      	movs	r3, #0
 801069a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	889b      	ldrh	r3, [r3, #4]
 80106a0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	781b      	ldrb	r3, [r3, #0]
 80106a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80106aa:	2b40      	cmp	r3, #64	@ 0x40
 80106ac:	d007      	beq.n	80106be <USBD_StdEPReq+0x30>
 80106ae:	2b40      	cmp	r3, #64	@ 0x40
 80106b0:	f200 8145 	bhi.w	801093e <USBD_StdEPReq+0x2b0>
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d00c      	beq.n	80106d2 <USBD_StdEPReq+0x44>
 80106b8:	2b20      	cmp	r3, #32
 80106ba:	f040 8140 	bne.w	801093e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80106c4:	689b      	ldr	r3, [r3, #8]
 80106c6:	6839      	ldr	r1, [r7, #0]
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	4798      	blx	r3
 80106cc:	4603      	mov	r3, r0
 80106ce:	73fb      	strb	r3, [r7, #15]
      break;
 80106d0:	e13a      	b.n	8010948 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	785b      	ldrb	r3, [r3, #1]
 80106d6:	2b03      	cmp	r3, #3
 80106d8:	d007      	beq.n	80106ea <USBD_StdEPReq+0x5c>
 80106da:	2b03      	cmp	r3, #3
 80106dc:	f300 8129 	bgt.w	8010932 <USBD_StdEPReq+0x2a4>
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d07f      	beq.n	80107e4 <USBD_StdEPReq+0x156>
 80106e4:	2b01      	cmp	r3, #1
 80106e6:	d03c      	beq.n	8010762 <USBD_StdEPReq+0xd4>
 80106e8:	e123      	b.n	8010932 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80106f0:	b2db      	uxtb	r3, r3
 80106f2:	2b02      	cmp	r3, #2
 80106f4:	d002      	beq.n	80106fc <USBD_StdEPReq+0x6e>
 80106f6:	2b03      	cmp	r3, #3
 80106f8:	d016      	beq.n	8010728 <USBD_StdEPReq+0x9a>
 80106fa:	e02c      	b.n	8010756 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80106fc:	7bbb      	ldrb	r3, [r7, #14]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d00d      	beq.n	801071e <USBD_StdEPReq+0x90>
 8010702:	7bbb      	ldrb	r3, [r7, #14]
 8010704:	2b80      	cmp	r3, #128	@ 0x80
 8010706:	d00a      	beq.n	801071e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010708:	7bbb      	ldrb	r3, [r7, #14]
 801070a:	4619      	mov	r1, r3
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f001 f8d3 	bl	80118b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010712:	2180      	movs	r1, #128	@ 0x80
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f001 f8cf 	bl	80118b8 <USBD_LL_StallEP>
 801071a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801071c:	e020      	b.n	8010760 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801071e:	6839      	ldr	r1, [r7, #0]
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f000 fc81 	bl	8011028 <USBD_CtlError>
              break;
 8010726:	e01b      	b.n	8010760 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	885b      	ldrh	r3, [r3, #2]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d10e      	bne.n	801074e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010730:	7bbb      	ldrb	r3, [r7, #14]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d00b      	beq.n	801074e <USBD_StdEPReq+0xc0>
 8010736:	7bbb      	ldrb	r3, [r7, #14]
 8010738:	2b80      	cmp	r3, #128	@ 0x80
 801073a:	d008      	beq.n	801074e <USBD_StdEPReq+0xc0>
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	88db      	ldrh	r3, [r3, #6]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d104      	bne.n	801074e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010744:	7bbb      	ldrb	r3, [r7, #14]
 8010746:	4619      	mov	r1, r3
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f001 f8b5 	bl	80118b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f000 fd35 	bl	80111be <USBD_CtlSendStatus>

              break;
 8010754:	e004      	b.n	8010760 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8010756:	6839      	ldr	r1, [r7, #0]
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f000 fc65 	bl	8011028 <USBD_CtlError>
              break;
 801075e:	bf00      	nop
          }
          break;
 8010760:	e0ec      	b.n	801093c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010768:	b2db      	uxtb	r3, r3
 801076a:	2b02      	cmp	r3, #2
 801076c:	d002      	beq.n	8010774 <USBD_StdEPReq+0xe6>
 801076e:	2b03      	cmp	r3, #3
 8010770:	d016      	beq.n	80107a0 <USBD_StdEPReq+0x112>
 8010772:	e030      	b.n	80107d6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010774:	7bbb      	ldrb	r3, [r7, #14]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d00d      	beq.n	8010796 <USBD_StdEPReq+0x108>
 801077a:	7bbb      	ldrb	r3, [r7, #14]
 801077c:	2b80      	cmp	r3, #128	@ 0x80
 801077e:	d00a      	beq.n	8010796 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010780:	7bbb      	ldrb	r3, [r7, #14]
 8010782:	4619      	mov	r1, r3
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f001 f897 	bl	80118b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801078a:	2180      	movs	r1, #128	@ 0x80
 801078c:	6878      	ldr	r0, [r7, #4]
 801078e:	f001 f893 	bl	80118b8 <USBD_LL_StallEP>
 8010792:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010794:	e025      	b.n	80107e2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8010796:	6839      	ldr	r1, [r7, #0]
 8010798:	6878      	ldr	r0, [r7, #4]
 801079a:	f000 fc45 	bl	8011028 <USBD_CtlError>
              break;
 801079e:	e020      	b.n	80107e2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	885b      	ldrh	r3, [r3, #2]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d11b      	bne.n	80107e0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80107a8:	7bbb      	ldrb	r3, [r7, #14]
 80107aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d004      	beq.n	80107bc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80107b2:	7bbb      	ldrb	r3, [r7, #14]
 80107b4:	4619      	mov	r1, r3
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f001 f89d 	bl	80118f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f000 fcfe 	bl	80111be <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80107c8:	689b      	ldr	r3, [r3, #8]
 80107ca:	6839      	ldr	r1, [r7, #0]
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	4798      	blx	r3
 80107d0:	4603      	mov	r3, r0
 80107d2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80107d4:	e004      	b.n	80107e0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80107d6:	6839      	ldr	r1, [r7, #0]
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f000 fc25 	bl	8011028 <USBD_CtlError>
              break;
 80107de:	e000      	b.n	80107e2 <USBD_StdEPReq+0x154>
              break;
 80107e0:	bf00      	nop
          }
          break;
 80107e2:	e0ab      	b.n	801093c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80107ea:	b2db      	uxtb	r3, r3
 80107ec:	2b02      	cmp	r3, #2
 80107ee:	d002      	beq.n	80107f6 <USBD_StdEPReq+0x168>
 80107f0:	2b03      	cmp	r3, #3
 80107f2:	d032      	beq.n	801085a <USBD_StdEPReq+0x1cc>
 80107f4:	e097      	b.n	8010926 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80107f6:	7bbb      	ldrb	r3, [r7, #14]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d007      	beq.n	801080c <USBD_StdEPReq+0x17e>
 80107fc:	7bbb      	ldrb	r3, [r7, #14]
 80107fe:	2b80      	cmp	r3, #128	@ 0x80
 8010800:	d004      	beq.n	801080c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8010802:	6839      	ldr	r1, [r7, #0]
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f000 fc0f 	bl	8011028 <USBD_CtlError>
                break;
 801080a:	e091      	b.n	8010930 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801080c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010810:	2b00      	cmp	r3, #0
 8010812:	da0b      	bge.n	801082c <USBD_StdEPReq+0x19e>
 8010814:	7bbb      	ldrb	r3, [r7, #14]
 8010816:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801081a:	4613      	mov	r3, r2
 801081c:	009b      	lsls	r3, r3, #2
 801081e:	4413      	add	r3, r2
 8010820:	009b      	lsls	r3, r3, #2
 8010822:	3310      	adds	r3, #16
 8010824:	687a      	ldr	r2, [r7, #4]
 8010826:	4413      	add	r3, r2
 8010828:	3304      	adds	r3, #4
 801082a:	e00b      	b.n	8010844 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801082c:	7bbb      	ldrb	r3, [r7, #14]
 801082e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010832:	4613      	mov	r3, r2
 8010834:	009b      	lsls	r3, r3, #2
 8010836:	4413      	add	r3, r2
 8010838:	009b      	lsls	r3, r3, #2
 801083a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801083e:	687a      	ldr	r2, [r7, #4]
 8010840:	4413      	add	r3, r2
 8010842:	3304      	adds	r3, #4
 8010844:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	2200      	movs	r2, #0
 801084a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	2202      	movs	r2, #2
 8010850:	4619      	mov	r1, r3
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f000 fc59 	bl	801110a <USBD_CtlSendData>
              break;
 8010858:	e06a      	b.n	8010930 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801085a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801085e:	2b00      	cmp	r3, #0
 8010860:	da11      	bge.n	8010886 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010862:	7bbb      	ldrb	r3, [r7, #14]
 8010864:	f003 020f 	and.w	r2, r3, #15
 8010868:	6879      	ldr	r1, [r7, #4]
 801086a:	4613      	mov	r3, r2
 801086c:	009b      	lsls	r3, r3, #2
 801086e:	4413      	add	r3, r2
 8010870:	009b      	lsls	r3, r3, #2
 8010872:	440b      	add	r3, r1
 8010874:	3324      	adds	r3, #36	@ 0x24
 8010876:	881b      	ldrh	r3, [r3, #0]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d117      	bne.n	80108ac <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801087c:	6839      	ldr	r1, [r7, #0]
 801087e:	6878      	ldr	r0, [r7, #4]
 8010880:	f000 fbd2 	bl	8011028 <USBD_CtlError>
                  break;
 8010884:	e054      	b.n	8010930 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010886:	7bbb      	ldrb	r3, [r7, #14]
 8010888:	f003 020f 	and.w	r2, r3, #15
 801088c:	6879      	ldr	r1, [r7, #4]
 801088e:	4613      	mov	r3, r2
 8010890:	009b      	lsls	r3, r3, #2
 8010892:	4413      	add	r3, r2
 8010894:	009b      	lsls	r3, r3, #2
 8010896:	440b      	add	r3, r1
 8010898:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801089c:	881b      	ldrh	r3, [r3, #0]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d104      	bne.n	80108ac <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80108a2:	6839      	ldr	r1, [r7, #0]
 80108a4:	6878      	ldr	r0, [r7, #4]
 80108a6:	f000 fbbf 	bl	8011028 <USBD_CtlError>
                  break;
 80108aa:	e041      	b.n	8010930 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80108ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	da0b      	bge.n	80108cc <USBD_StdEPReq+0x23e>
 80108b4:	7bbb      	ldrb	r3, [r7, #14]
 80108b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80108ba:	4613      	mov	r3, r2
 80108bc:	009b      	lsls	r3, r3, #2
 80108be:	4413      	add	r3, r2
 80108c0:	009b      	lsls	r3, r3, #2
 80108c2:	3310      	adds	r3, #16
 80108c4:	687a      	ldr	r2, [r7, #4]
 80108c6:	4413      	add	r3, r2
 80108c8:	3304      	adds	r3, #4
 80108ca:	e00b      	b.n	80108e4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80108cc:	7bbb      	ldrb	r3, [r7, #14]
 80108ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80108d2:	4613      	mov	r3, r2
 80108d4:	009b      	lsls	r3, r3, #2
 80108d6:	4413      	add	r3, r2
 80108d8:	009b      	lsls	r3, r3, #2
 80108da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80108de:	687a      	ldr	r2, [r7, #4]
 80108e0:	4413      	add	r3, r2
 80108e2:	3304      	adds	r3, #4
 80108e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80108e6:	7bbb      	ldrb	r3, [r7, #14]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d002      	beq.n	80108f2 <USBD_StdEPReq+0x264>
 80108ec:	7bbb      	ldrb	r3, [r7, #14]
 80108ee:	2b80      	cmp	r3, #128	@ 0x80
 80108f0:	d103      	bne.n	80108fa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	2200      	movs	r2, #0
 80108f6:	601a      	str	r2, [r3, #0]
 80108f8:	e00e      	b.n	8010918 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80108fa:	7bbb      	ldrb	r3, [r7, #14]
 80108fc:	4619      	mov	r1, r3
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f001 f818 	bl	8011934 <USBD_LL_IsStallEP>
 8010904:	4603      	mov	r3, r0
 8010906:	2b00      	cmp	r3, #0
 8010908:	d003      	beq.n	8010912 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	2201      	movs	r2, #1
 801090e:	601a      	str	r2, [r3, #0]
 8010910:	e002      	b.n	8010918 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	2200      	movs	r2, #0
 8010916:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	2202      	movs	r2, #2
 801091c:	4619      	mov	r1, r3
 801091e:	6878      	ldr	r0, [r7, #4]
 8010920:	f000 fbf3 	bl	801110a <USBD_CtlSendData>
              break;
 8010924:	e004      	b.n	8010930 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8010926:	6839      	ldr	r1, [r7, #0]
 8010928:	6878      	ldr	r0, [r7, #4]
 801092a:	f000 fb7d 	bl	8011028 <USBD_CtlError>
              break;
 801092e:	bf00      	nop
          }
          break;
 8010930:	e004      	b.n	801093c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8010932:	6839      	ldr	r1, [r7, #0]
 8010934:	6878      	ldr	r0, [r7, #4]
 8010936:	f000 fb77 	bl	8011028 <USBD_CtlError>
          break;
 801093a:	bf00      	nop
      }
      break;
 801093c:	e004      	b.n	8010948 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801093e:	6839      	ldr	r1, [r7, #0]
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	f000 fb71 	bl	8011028 <USBD_CtlError>
      break;
 8010946:	bf00      	nop
  }

  return ret;
 8010948:	7bfb      	ldrb	r3, [r7, #15]
}
 801094a:	4618      	mov	r0, r3
 801094c:	3710      	adds	r7, #16
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
	...

08010954 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b084      	sub	sp, #16
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801095e:	2300      	movs	r3, #0
 8010960:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010962:	2300      	movs	r3, #0
 8010964:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010966:	2300      	movs	r3, #0
 8010968:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	885b      	ldrh	r3, [r3, #2]
 801096e:	0a1b      	lsrs	r3, r3, #8
 8010970:	b29b      	uxth	r3, r3
 8010972:	3b01      	subs	r3, #1
 8010974:	2b0e      	cmp	r3, #14
 8010976:	f200 8165 	bhi.w	8010c44 <USBD_GetDescriptor+0x2f0>
 801097a:	a201      	add	r2, pc, #4	@ (adr r2, 8010980 <USBD_GetDescriptor+0x2c>)
 801097c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010980:	080109f1 	.word	0x080109f1
 8010984:	08010a09 	.word	0x08010a09
 8010988:	08010a49 	.word	0x08010a49
 801098c:	08010c45 	.word	0x08010c45
 8010990:	08010c45 	.word	0x08010c45
 8010994:	08010be5 	.word	0x08010be5
 8010998:	08010c11 	.word	0x08010c11
 801099c:	08010c45 	.word	0x08010c45
 80109a0:	08010c45 	.word	0x08010c45
 80109a4:	08010c45 	.word	0x08010c45
 80109a8:	08010c45 	.word	0x08010c45
 80109ac:	08010c45 	.word	0x08010c45
 80109b0:	08010c45 	.word	0x08010c45
 80109b4:	08010c45 	.word	0x08010c45
 80109b8:	080109bd 	.word	0x080109bd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80109c2:	69db      	ldr	r3, [r3, #28]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d00b      	beq.n	80109e0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80109ce:	69db      	ldr	r3, [r3, #28]
 80109d0:	687a      	ldr	r2, [r7, #4]
 80109d2:	7c12      	ldrb	r2, [r2, #16]
 80109d4:	f107 0108 	add.w	r1, r7, #8
 80109d8:	4610      	mov	r0, r2
 80109da:	4798      	blx	r3
 80109dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80109de:	e139      	b.n	8010c54 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 80109e0:	6839      	ldr	r1, [r7, #0]
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f000 fb20 	bl	8011028 <USBD_CtlError>
        err++;
 80109e8:	7afb      	ldrb	r3, [r7, #11]
 80109ea:	3301      	adds	r3, #1
 80109ec:	72fb      	strb	r3, [r7, #11]
      break;
 80109ee:	e131      	b.n	8010c54 <USBD_GetDescriptor+0x300>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	687a      	ldr	r2, [r7, #4]
 80109fa:	7c12      	ldrb	r2, [r2, #16]
 80109fc:	f107 0108 	add.w	r1, r7, #8
 8010a00:	4610      	mov	r0, r2
 8010a02:	4798      	blx	r3
 8010a04:	60f8      	str	r0, [r7, #12]
      break;
 8010a06:	e125      	b.n	8010c54 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	7c1b      	ldrb	r3, [r3, #16]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d10d      	bne.n	8010a2c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a18:	f107 0208 	add.w	r2, r7, #8
 8010a1c:	4610      	mov	r0, r2
 8010a1e:	4798      	blx	r3
 8010a20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	3301      	adds	r3, #1
 8010a26:	2202      	movs	r2, #2
 8010a28:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010a2a:	e113      	b.n	8010c54 <USBD_GetDescriptor+0x300>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a34:	f107 0208 	add.w	r2, r7, #8
 8010a38:	4610      	mov	r0, r2
 8010a3a:	4798      	blx	r3
 8010a3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	3301      	adds	r3, #1
 8010a42:	2202      	movs	r2, #2
 8010a44:	701a      	strb	r2, [r3, #0]
      break;
 8010a46:	e105      	b.n	8010c54 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	885b      	ldrh	r3, [r3, #2]
 8010a4c:	b2db      	uxtb	r3, r3
 8010a4e:	2b05      	cmp	r3, #5
 8010a50:	f200 80ac 	bhi.w	8010bac <USBD_GetDescriptor+0x258>
 8010a54:	a201      	add	r2, pc, #4	@ (adr r2, 8010a5c <USBD_GetDescriptor+0x108>)
 8010a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a5a:	bf00      	nop
 8010a5c:	08010a75 	.word	0x08010a75
 8010a60:	08010aa9 	.word	0x08010aa9
 8010a64:	08010add 	.word	0x08010add
 8010a68:	08010b11 	.word	0x08010b11
 8010a6c:	08010b45 	.word	0x08010b45
 8010a70:	08010b79 	.word	0x08010b79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010a7a:	685b      	ldr	r3, [r3, #4]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d00b      	beq.n	8010a98 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010a86:	685b      	ldr	r3, [r3, #4]
 8010a88:	687a      	ldr	r2, [r7, #4]
 8010a8a:	7c12      	ldrb	r2, [r2, #16]
 8010a8c:	f107 0108 	add.w	r1, r7, #8
 8010a90:	4610      	mov	r0, r2
 8010a92:	4798      	blx	r3
 8010a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010a96:	e0a4      	b.n	8010be2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8010a98:	6839      	ldr	r1, [r7, #0]
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f000 fac4 	bl	8011028 <USBD_CtlError>
            err++;
 8010aa0:	7afb      	ldrb	r3, [r7, #11]
 8010aa2:	3301      	adds	r3, #1
 8010aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8010aa6:	e09c      	b.n	8010be2 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010aae:	689b      	ldr	r3, [r3, #8]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d00b      	beq.n	8010acc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010aba:	689b      	ldr	r3, [r3, #8]
 8010abc:	687a      	ldr	r2, [r7, #4]
 8010abe:	7c12      	ldrb	r2, [r2, #16]
 8010ac0:	f107 0108 	add.w	r1, r7, #8
 8010ac4:	4610      	mov	r0, r2
 8010ac6:	4798      	blx	r3
 8010ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010aca:	e08a      	b.n	8010be2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8010acc:	6839      	ldr	r1, [r7, #0]
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f000 faaa 	bl	8011028 <USBD_CtlError>
            err++;
 8010ad4:	7afb      	ldrb	r3, [r7, #11]
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8010ada:	e082      	b.n	8010be2 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010ae2:	68db      	ldr	r3, [r3, #12]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d00b      	beq.n	8010b00 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010aee:	68db      	ldr	r3, [r3, #12]
 8010af0:	687a      	ldr	r2, [r7, #4]
 8010af2:	7c12      	ldrb	r2, [r2, #16]
 8010af4:	f107 0108 	add.w	r1, r7, #8
 8010af8:	4610      	mov	r0, r2
 8010afa:	4798      	blx	r3
 8010afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010afe:	e070      	b.n	8010be2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8010b00:	6839      	ldr	r1, [r7, #0]
 8010b02:	6878      	ldr	r0, [r7, #4]
 8010b04:	f000 fa90 	bl	8011028 <USBD_CtlError>
            err++;
 8010b08:	7afb      	ldrb	r3, [r7, #11]
 8010b0a:	3301      	adds	r3, #1
 8010b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8010b0e:	e068      	b.n	8010be2 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b16:	691b      	ldr	r3, [r3, #16]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d00b      	beq.n	8010b34 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b22:	691b      	ldr	r3, [r3, #16]
 8010b24:	687a      	ldr	r2, [r7, #4]
 8010b26:	7c12      	ldrb	r2, [r2, #16]
 8010b28:	f107 0108 	add.w	r1, r7, #8
 8010b2c:	4610      	mov	r0, r2
 8010b2e:	4798      	blx	r3
 8010b30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b32:	e056      	b.n	8010be2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8010b34:	6839      	ldr	r1, [r7, #0]
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f000 fa76 	bl	8011028 <USBD_CtlError>
            err++;
 8010b3c:	7afb      	ldrb	r3, [r7, #11]
 8010b3e:	3301      	adds	r3, #1
 8010b40:	72fb      	strb	r3, [r7, #11]
          break;
 8010b42:	e04e      	b.n	8010be2 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b4a:	695b      	ldr	r3, [r3, #20]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d00b      	beq.n	8010b68 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b56:	695b      	ldr	r3, [r3, #20]
 8010b58:	687a      	ldr	r2, [r7, #4]
 8010b5a:	7c12      	ldrb	r2, [r2, #16]
 8010b5c:	f107 0108 	add.w	r1, r7, #8
 8010b60:	4610      	mov	r0, r2
 8010b62:	4798      	blx	r3
 8010b64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b66:	e03c      	b.n	8010be2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8010b68:	6839      	ldr	r1, [r7, #0]
 8010b6a:	6878      	ldr	r0, [r7, #4]
 8010b6c:	f000 fa5c 	bl	8011028 <USBD_CtlError>
            err++;
 8010b70:	7afb      	ldrb	r3, [r7, #11]
 8010b72:	3301      	adds	r3, #1
 8010b74:	72fb      	strb	r3, [r7, #11]
          break;
 8010b76:	e034      	b.n	8010be2 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b7e:	699b      	ldr	r3, [r3, #24]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d00b      	beq.n	8010b9c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b8a:	699b      	ldr	r3, [r3, #24]
 8010b8c:	687a      	ldr	r2, [r7, #4]
 8010b8e:	7c12      	ldrb	r2, [r2, #16]
 8010b90:	f107 0108 	add.w	r1, r7, #8
 8010b94:	4610      	mov	r0, r2
 8010b96:	4798      	blx	r3
 8010b98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b9a:	e022      	b.n	8010be2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8010b9c:	6839      	ldr	r1, [r7, #0]
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f000 fa42 	bl	8011028 <USBD_CtlError>
            err++;
 8010ba4:	7afb      	ldrb	r3, [r7, #11]
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	72fb      	strb	r3, [r7, #11]
          break;
 8010baa:	e01a      	b.n	8010be2 <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d00c      	beq.n	8010bd2 <USBD_GetDescriptor+0x27e>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bc0:	683a      	ldr	r2, [r7, #0]
 8010bc2:	8852      	ldrh	r2, [r2, #2]
 8010bc4:	b2d1      	uxtb	r1, r2
 8010bc6:	f107 0208 	add.w	r2, r7, #8
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	4798      	blx	r3
 8010bce:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8010bd0:	e006      	b.n	8010be0 <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 8010bd2:	6839      	ldr	r1, [r7, #0]
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f000 fa27 	bl	8011028 <USBD_CtlError>
            err++;
 8010bda:	7afb      	ldrb	r3, [r7, #11]
 8010bdc:	3301      	adds	r3, #1
 8010bde:	72fb      	strb	r3, [r7, #11]
          break;
 8010be0:	bf00      	nop
      }
      break;
 8010be2:	e037      	b.n	8010c54 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	7c1b      	ldrb	r3, [r3, #16]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d109      	bne.n	8010c00 <USBD_GetDescriptor+0x2ac>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bf4:	f107 0208 	add.w	r2, r7, #8
 8010bf8:	4610      	mov	r0, r2
 8010bfa:	4798      	blx	r3
 8010bfc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010bfe:	e029      	b.n	8010c54 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8010c00:	6839      	ldr	r1, [r7, #0]
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f000 fa10 	bl	8011028 <USBD_CtlError>
        err++;
 8010c08:	7afb      	ldrb	r3, [r7, #11]
 8010c0a:	3301      	adds	r3, #1
 8010c0c:	72fb      	strb	r3, [r7, #11]
      break;
 8010c0e:	e021      	b.n	8010c54 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	7c1b      	ldrb	r3, [r3, #16]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d10d      	bne.n	8010c34 <USBD_GetDescriptor+0x2e0>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c20:	f107 0208 	add.w	r2, r7, #8
 8010c24:	4610      	mov	r0, r2
 8010c26:	4798      	blx	r3
 8010c28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	3301      	adds	r3, #1
 8010c2e:	2207      	movs	r2, #7
 8010c30:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010c32:	e00f      	b.n	8010c54 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8010c34:	6839      	ldr	r1, [r7, #0]
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f000 f9f6 	bl	8011028 <USBD_CtlError>
        err++;
 8010c3c:	7afb      	ldrb	r3, [r7, #11]
 8010c3e:	3301      	adds	r3, #1
 8010c40:	72fb      	strb	r3, [r7, #11]
      break;
 8010c42:	e007      	b.n	8010c54 <USBD_GetDescriptor+0x300>

    default:
      USBD_CtlError(pdev, req);
 8010c44:	6839      	ldr	r1, [r7, #0]
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f000 f9ee 	bl	8011028 <USBD_CtlError>
      err++;
 8010c4c:	7afb      	ldrb	r3, [r7, #11]
 8010c4e:	3301      	adds	r3, #1
 8010c50:	72fb      	strb	r3, [r7, #11]
      break;
 8010c52:	bf00      	nop
  }

  if (err != 0U)
 8010c54:	7afb      	ldrb	r3, [r7, #11]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d11e      	bne.n	8010c98 <USBD_GetDescriptor+0x344>
  {
    return;
  }

  if (req->wLength != 0U)
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	88db      	ldrh	r3, [r3, #6]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d016      	beq.n	8010c90 <USBD_GetDescriptor+0x33c>
  {
    if (len != 0U)
 8010c62:	893b      	ldrh	r3, [r7, #8]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d00e      	beq.n	8010c86 <USBD_GetDescriptor+0x332>
    {
      len = MIN(len, req->wLength);
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	88da      	ldrh	r2, [r3, #6]
 8010c6c:	893b      	ldrh	r3, [r7, #8]
 8010c6e:	4293      	cmp	r3, r2
 8010c70:	bf28      	it	cs
 8010c72:	4613      	movcs	r3, r2
 8010c74:	b29b      	uxth	r3, r3
 8010c76:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010c78:	893b      	ldrh	r3, [r7, #8]
 8010c7a:	461a      	mov	r2, r3
 8010c7c:	68f9      	ldr	r1, [r7, #12]
 8010c7e:	6878      	ldr	r0, [r7, #4]
 8010c80:	f000 fa43 	bl	801110a <USBD_CtlSendData>
 8010c84:	e009      	b.n	8010c9a <USBD_GetDescriptor+0x346>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010c86:	6839      	ldr	r1, [r7, #0]
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f000 f9cd 	bl	8011028 <USBD_CtlError>
 8010c8e:	e004      	b.n	8010c9a <USBD_GetDescriptor+0x346>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f000 fa94 	bl	80111be <USBD_CtlSendStatus>
 8010c96:	e000      	b.n	8010c9a <USBD_GetDescriptor+0x346>
    return;
 8010c98:	bf00      	nop
  }
}
 8010c9a:	3710      	adds	r7, #16
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b084      	sub	sp, #16
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	889b      	ldrh	r3, [r3, #4]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d131      	bne.n	8010d16 <USBD_SetAddress+0x76>
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	88db      	ldrh	r3, [r3, #6]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d12d      	bne.n	8010d16 <USBD_SetAddress+0x76>
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	885b      	ldrh	r3, [r3, #2]
 8010cbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8010cc0:	d829      	bhi.n	8010d16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	885b      	ldrh	r3, [r3, #2]
 8010cc6:	b2db      	uxtb	r3, r3
 8010cc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010ccc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010cd4:	b2db      	uxtb	r3, r3
 8010cd6:	2b03      	cmp	r3, #3
 8010cd8:	d104      	bne.n	8010ce4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010cda:	6839      	ldr	r1, [r7, #0]
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f000 f9a3 	bl	8011028 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ce2:	e01d      	b.n	8010d20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	7bfa      	ldrb	r2, [r7, #15]
 8010ce8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010cec:	7bfb      	ldrb	r3, [r7, #15]
 8010cee:	4619      	mov	r1, r3
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f000 fe4b 	bl	801198c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	f000 fa61 	bl	80111be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010cfc:	7bfb      	ldrb	r3, [r7, #15]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d004      	beq.n	8010d0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2202      	movs	r2, #2
 8010d06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d0a:	e009      	b.n	8010d20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	2201      	movs	r2, #1
 8010d10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d14:	e004      	b.n	8010d20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010d16:	6839      	ldr	r1, [r7, #0]
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f000 f985 	bl	8011028 <USBD_CtlError>
  }
}
 8010d1e:	bf00      	nop
 8010d20:	bf00      	nop
 8010d22:	3710      	adds	r7, #16
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}

08010d28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b084      	sub	sp, #16
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010d32:	2300      	movs	r3, #0
 8010d34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	885b      	ldrh	r3, [r3, #2]
 8010d3a:	b2da      	uxtb	r2, r3
 8010d3c:	4b4c      	ldr	r3, [pc, #304]	@ (8010e70 <USBD_SetConfig+0x148>)
 8010d3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010d40:	4b4b      	ldr	r3, [pc, #300]	@ (8010e70 <USBD_SetConfig+0x148>)
 8010d42:	781b      	ldrb	r3, [r3, #0]
 8010d44:	2b01      	cmp	r3, #1
 8010d46:	d905      	bls.n	8010d54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010d48:	6839      	ldr	r1, [r7, #0]
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f000 f96c 	bl	8011028 <USBD_CtlError>
    return USBD_FAIL;
 8010d50:	2303      	movs	r3, #3
 8010d52:	e088      	b.n	8010e66 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d5a:	b2db      	uxtb	r3, r3
 8010d5c:	2b02      	cmp	r3, #2
 8010d5e:	d002      	beq.n	8010d66 <USBD_SetConfig+0x3e>
 8010d60:	2b03      	cmp	r3, #3
 8010d62:	d025      	beq.n	8010db0 <USBD_SetConfig+0x88>
 8010d64:	e071      	b.n	8010e4a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010d66:	4b42      	ldr	r3, [pc, #264]	@ (8010e70 <USBD_SetConfig+0x148>)
 8010d68:	781b      	ldrb	r3, [r3, #0]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d01c      	beq.n	8010da8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8010d6e:	4b40      	ldr	r3, [pc, #256]	@ (8010e70 <USBD_SetConfig+0x148>)
 8010d70:	781b      	ldrb	r3, [r3, #0]
 8010d72:	461a      	mov	r2, r3
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010d78:	4b3d      	ldr	r3, [pc, #244]	@ (8010e70 <USBD_SetConfig+0x148>)
 8010d7a:	781b      	ldrb	r3, [r3, #0]
 8010d7c:	4619      	mov	r1, r3
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f7ff f97f 	bl	8010082 <USBD_SetClassConfig>
 8010d84:	4603      	mov	r3, r0
 8010d86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010d88:	7bfb      	ldrb	r3, [r7, #15]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d004      	beq.n	8010d98 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8010d8e:	6839      	ldr	r1, [r7, #0]
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f000 f949 	bl	8011028 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010d96:	e065      	b.n	8010e64 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f000 fa10 	bl	80111be <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2203      	movs	r2, #3
 8010da2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010da6:	e05d      	b.n	8010e64 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f000 fa08 	bl	80111be <USBD_CtlSendStatus>
      break;
 8010dae:	e059      	b.n	8010e64 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010db0:	4b2f      	ldr	r3, [pc, #188]	@ (8010e70 <USBD_SetConfig+0x148>)
 8010db2:	781b      	ldrb	r3, [r3, #0]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d112      	bne.n	8010dde <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2202      	movs	r2, #2
 8010dbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8010e70 <USBD_SetConfig+0x148>)
 8010dc2:	781b      	ldrb	r3, [r3, #0]
 8010dc4:	461a      	mov	r2, r3
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010dca:	4b29      	ldr	r3, [pc, #164]	@ (8010e70 <USBD_SetConfig+0x148>)
 8010dcc:	781b      	ldrb	r3, [r3, #0]
 8010dce:	4619      	mov	r1, r3
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f7ff f972 	bl	80100ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f000 f9f1 	bl	80111be <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010ddc:	e042      	b.n	8010e64 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8010dde:	4b24      	ldr	r3, [pc, #144]	@ (8010e70 <USBD_SetConfig+0x148>)
 8010de0:	781b      	ldrb	r3, [r3, #0]
 8010de2:	461a      	mov	r2, r3
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	429a      	cmp	r2, r3
 8010dea:	d02a      	beq.n	8010e42 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	685b      	ldr	r3, [r3, #4]
 8010df0:	b2db      	uxtb	r3, r3
 8010df2:	4619      	mov	r1, r3
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f7ff f960 	bl	80100ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8010e70 <USBD_SetConfig+0x148>)
 8010dfc:	781b      	ldrb	r3, [r3, #0]
 8010dfe:	461a      	mov	r2, r3
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010e04:	4b1a      	ldr	r3, [pc, #104]	@ (8010e70 <USBD_SetConfig+0x148>)
 8010e06:	781b      	ldrb	r3, [r3, #0]
 8010e08:	4619      	mov	r1, r3
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	f7ff f939 	bl	8010082 <USBD_SetClassConfig>
 8010e10:	4603      	mov	r3, r0
 8010e12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010e14:	7bfb      	ldrb	r3, [r7, #15]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d00f      	beq.n	8010e3a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8010e1a:	6839      	ldr	r1, [r7, #0]
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f000 f903 	bl	8011028 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	685b      	ldr	r3, [r3, #4]
 8010e26:	b2db      	uxtb	r3, r3
 8010e28:	4619      	mov	r1, r3
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	f7ff f945 	bl	80100ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2202      	movs	r2, #2
 8010e34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010e38:	e014      	b.n	8010e64 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010e3a:	6878      	ldr	r0, [r7, #4]
 8010e3c:	f000 f9bf 	bl	80111be <USBD_CtlSendStatus>
      break;
 8010e40:	e010      	b.n	8010e64 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f000 f9bb 	bl	80111be <USBD_CtlSendStatus>
      break;
 8010e48:	e00c      	b.n	8010e64 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010e4a:	6839      	ldr	r1, [r7, #0]
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	f000 f8eb 	bl	8011028 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010e52:	4b07      	ldr	r3, [pc, #28]	@ (8010e70 <USBD_SetConfig+0x148>)
 8010e54:	781b      	ldrb	r3, [r3, #0]
 8010e56:	4619      	mov	r1, r3
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f7ff f92e 	bl	80100ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010e5e:	2303      	movs	r3, #3
 8010e60:	73fb      	strb	r3, [r7, #15]
      break;
 8010e62:	bf00      	nop
  }

  return ret;
 8010e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3710      	adds	r7, #16
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}
 8010e6e:	bf00      	nop
 8010e70:	200009f3 	.word	0x200009f3

08010e74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b082      	sub	sp, #8
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
 8010e7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	88db      	ldrh	r3, [r3, #6]
 8010e82:	2b01      	cmp	r3, #1
 8010e84:	d004      	beq.n	8010e90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010e86:	6839      	ldr	r1, [r7, #0]
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f000 f8cd 	bl	8011028 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010e8e:	e023      	b.n	8010ed8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e96:	b2db      	uxtb	r3, r3
 8010e98:	2b02      	cmp	r3, #2
 8010e9a:	dc02      	bgt.n	8010ea2 <USBD_GetConfig+0x2e>
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	dc03      	bgt.n	8010ea8 <USBD_GetConfig+0x34>
 8010ea0:	e015      	b.n	8010ece <USBD_GetConfig+0x5a>
 8010ea2:	2b03      	cmp	r3, #3
 8010ea4:	d00b      	beq.n	8010ebe <USBD_GetConfig+0x4a>
 8010ea6:	e012      	b.n	8010ece <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2200      	movs	r2, #0
 8010eac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	3308      	adds	r3, #8
 8010eb2:	2201      	movs	r2, #1
 8010eb4:	4619      	mov	r1, r3
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f000 f927 	bl	801110a <USBD_CtlSendData>
        break;
 8010ebc:	e00c      	b.n	8010ed8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	3304      	adds	r3, #4
 8010ec2:	2201      	movs	r2, #1
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	f000 f91f 	bl	801110a <USBD_CtlSendData>
        break;
 8010ecc:	e004      	b.n	8010ed8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010ece:	6839      	ldr	r1, [r7, #0]
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f000 f8a9 	bl	8011028 <USBD_CtlError>
        break;
 8010ed6:	bf00      	nop
}
 8010ed8:	bf00      	nop
 8010eda:	3708      	adds	r7, #8
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}

08010ee0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b082      	sub	sp, #8
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
 8010ee8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ef0:	b2db      	uxtb	r3, r3
 8010ef2:	3b01      	subs	r3, #1
 8010ef4:	2b02      	cmp	r3, #2
 8010ef6:	d81e      	bhi.n	8010f36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	88db      	ldrh	r3, [r3, #6]
 8010efc:	2b02      	cmp	r3, #2
 8010efe:	d004      	beq.n	8010f0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010f00:	6839      	ldr	r1, [r7, #0]
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f000 f890 	bl	8011028 <USBD_CtlError>
        break;
 8010f08:	e01a      	b.n	8010f40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2201      	movs	r2, #1
 8010f0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d005      	beq.n	8010f26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	68db      	ldr	r3, [r3, #12]
 8010f1e:	f043 0202 	orr.w	r2, r3, #2
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	330c      	adds	r3, #12
 8010f2a:	2202      	movs	r2, #2
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	6878      	ldr	r0, [r7, #4]
 8010f30:	f000 f8eb 	bl	801110a <USBD_CtlSendData>
      break;
 8010f34:	e004      	b.n	8010f40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010f36:	6839      	ldr	r1, [r7, #0]
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f000 f875 	bl	8011028 <USBD_CtlError>
      break;
 8010f3e:	bf00      	nop
  }
}
 8010f40:	bf00      	nop
 8010f42:	3708      	adds	r7, #8
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bd80      	pop	{r7, pc}

08010f48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b082      	sub	sp, #8
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010f52:	683b      	ldr	r3, [r7, #0]
 8010f54:	885b      	ldrh	r3, [r3, #2]
 8010f56:	2b01      	cmp	r3, #1
 8010f58:	d106      	bne.n	8010f68 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2201      	movs	r2, #1
 8010f5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010f62:	6878      	ldr	r0, [r7, #4]
 8010f64:	f000 f92b 	bl	80111be <USBD_CtlSendStatus>
  }
}
 8010f68:	bf00      	nop
 8010f6a:	3708      	adds	r7, #8
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}

08010f70 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b082      	sub	sp, #8
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
 8010f78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f80:	b2db      	uxtb	r3, r3
 8010f82:	3b01      	subs	r3, #1
 8010f84:	2b02      	cmp	r3, #2
 8010f86:	d80b      	bhi.n	8010fa0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	885b      	ldrh	r3, [r3, #2]
 8010f8c:	2b01      	cmp	r3, #1
 8010f8e:	d10c      	bne.n	8010faa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2200      	movs	r2, #0
 8010f94:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f000 f910 	bl	80111be <USBD_CtlSendStatus>
      }
      break;
 8010f9e:	e004      	b.n	8010faa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010fa0:	6839      	ldr	r1, [r7, #0]
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	f000 f840 	bl	8011028 <USBD_CtlError>
      break;
 8010fa8:	e000      	b.n	8010fac <USBD_ClrFeature+0x3c>
      break;
 8010faa:	bf00      	nop
  }
}
 8010fac:	bf00      	nop
 8010fae:	3708      	adds	r7, #8
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}

08010fb4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b084      	sub	sp, #16
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
 8010fbc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	781a      	ldrb	r2, [r3, #0]
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	3301      	adds	r3, #1
 8010fce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	781a      	ldrb	r2, [r3, #0]
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	3301      	adds	r3, #1
 8010fdc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010fde:	68f8      	ldr	r0, [r7, #12]
 8010fe0:	f7ff fa7f 	bl	80104e2 <SWAPBYTE>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	461a      	mov	r2, r3
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	3301      	adds	r3, #1
 8010ff0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	3301      	adds	r3, #1
 8010ff6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010ff8:	68f8      	ldr	r0, [r7, #12]
 8010ffa:	f7ff fa72 	bl	80104e2 <SWAPBYTE>
 8010ffe:	4603      	mov	r3, r0
 8011000:	461a      	mov	r2, r3
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	3301      	adds	r3, #1
 801100a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	3301      	adds	r3, #1
 8011010:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011012:	68f8      	ldr	r0, [r7, #12]
 8011014:	f7ff fa65 	bl	80104e2 <SWAPBYTE>
 8011018:	4603      	mov	r3, r0
 801101a:	461a      	mov	r2, r3
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	80da      	strh	r2, [r3, #6]
}
 8011020:	bf00      	nop
 8011022:	3710      	adds	r7, #16
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}

08011028 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b082      	sub	sp, #8
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011032:	2180      	movs	r1, #128	@ 0x80
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f000 fc3f 	bl	80118b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801103a:	2100      	movs	r1, #0
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f000 fc3b 	bl	80118b8 <USBD_LL_StallEP>
}
 8011042:	bf00      	nop
 8011044:	3708      	adds	r7, #8
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}

0801104a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801104a:	b580      	push	{r7, lr}
 801104c:	b086      	sub	sp, #24
 801104e:	af00      	add	r7, sp, #0
 8011050:	60f8      	str	r0, [r7, #12]
 8011052:	60b9      	str	r1, [r7, #8]
 8011054:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011056:	2300      	movs	r3, #0
 8011058:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d036      	beq.n	80110ce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011064:	6938      	ldr	r0, [r7, #16]
 8011066:	f000 f836 	bl	80110d6 <USBD_GetLen>
 801106a:	4603      	mov	r3, r0
 801106c:	3301      	adds	r3, #1
 801106e:	b29b      	uxth	r3, r3
 8011070:	005b      	lsls	r3, r3, #1
 8011072:	b29a      	uxth	r2, r3
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011078:	7dfb      	ldrb	r3, [r7, #23]
 801107a:	68ba      	ldr	r2, [r7, #8]
 801107c:	4413      	add	r3, r2
 801107e:	687a      	ldr	r2, [r7, #4]
 8011080:	7812      	ldrb	r2, [r2, #0]
 8011082:	701a      	strb	r2, [r3, #0]
  idx++;
 8011084:	7dfb      	ldrb	r3, [r7, #23]
 8011086:	3301      	adds	r3, #1
 8011088:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801108a:	7dfb      	ldrb	r3, [r7, #23]
 801108c:	68ba      	ldr	r2, [r7, #8]
 801108e:	4413      	add	r3, r2
 8011090:	2203      	movs	r2, #3
 8011092:	701a      	strb	r2, [r3, #0]
  idx++;
 8011094:	7dfb      	ldrb	r3, [r7, #23]
 8011096:	3301      	adds	r3, #1
 8011098:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801109a:	e013      	b.n	80110c4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801109c:	7dfb      	ldrb	r3, [r7, #23]
 801109e:	68ba      	ldr	r2, [r7, #8]
 80110a0:	4413      	add	r3, r2
 80110a2:	693a      	ldr	r2, [r7, #16]
 80110a4:	7812      	ldrb	r2, [r2, #0]
 80110a6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80110a8:	693b      	ldr	r3, [r7, #16]
 80110aa:	3301      	adds	r3, #1
 80110ac:	613b      	str	r3, [r7, #16]
    idx++;
 80110ae:	7dfb      	ldrb	r3, [r7, #23]
 80110b0:	3301      	adds	r3, #1
 80110b2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80110b4:	7dfb      	ldrb	r3, [r7, #23]
 80110b6:	68ba      	ldr	r2, [r7, #8]
 80110b8:	4413      	add	r3, r2
 80110ba:	2200      	movs	r2, #0
 80110bc:	701a      	strb	r2, [r3, #0]
    idx++;
 80110be:	7dfb      	ldrb	r3, [r7, #23]
 80110c0:	3301      	adds	r3, #1
 80110c2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	781b      	ldrb	r3, [r3, #0]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d1e7      	bne.n	801109c <USBD_GetString+0x52>
 80110cc:	e000      	b.n	80110d0 <USBD_GetString+0x86>
    return;
 80110ce:	bf00      	nop
  }
}
 80110d0:	3718      	adds	r7, #24
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}

080110d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80110d6:	b480      	push	{r7}
 80110d8:	b085      	sub	sp, #20
 80110da:	af00      	add	r7, sp, #0
 80110dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80110de:	2300      	movs	r3, #0
 80110e0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80110e6:	e005      	b.n	80110f4 <USBD_GetLen+0x1e>
  {
    len++;
 80110e8:	7bfb      	ldrb	r3, [r7, #15]
 80110ea:	3301      	adds	r3, #1
 80110ec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	3301      	adds	r3, #1
 80110f2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	781b      	ldrb	r3, [r3, #0]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d1f5      	bne.n	80110e8 <USBD_GetLen+0x12>
  }

  return len;
 80110fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80110fe:	4618      	mov	r0, r3
 8011100:	3714      	adds	r7, #20
 8011102:	46bd      	mov	sp, r7
 8011104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011108:	4770      	bx	lr

0801110a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801110a:	b580      	push	{r7, lr}
 801110c:	b084      	sub	sp, #16
 801110e:	af00      	add	r7, sp, #0
 8011110:	60f8      	str	r0, [r7, #12]
 8011112:	60b9      	str	r1, [r7, #8]
 8011114:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	2202      	movs	r2, #2
 801111a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	687a      	ldr	r2, [r7, #4]
 8011122:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	687a      	ldr	r2, [r7, #4]
 8011128:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	68ba      	ldr	r2, [r7, #8]
 801112e:	2100      	movs	r1, #0
 8011130:	68f8      	ldr	r0, [r7, #12]
 8011132:	f000 fc4a 	bl	80119ca <USBD_LL_Transmit>

  return USBD_OK;
 8011136:	2300      	movs	r3, #0
}
 8011138:	4618      	mov	r0, r3
 801113a:	3710      	adds	r7, #16
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}

08011140 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b084      	sub	sp, #16
 8011144:	af00      	add	r7, sp, #0
 8011146:	60f8      	str	r0, [r7, #12]
 8011148:	60b9      	str	r1, [r7, #8]
 801114a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	68ba      	ldr	r2, [r7, #8]
 8011150:	2100      	movs	r1, #0
 8011152:	68f8      	ldr	r0, [r7, #12]
 8011154:	f000 fc39 	bl	80119ca <USBD_LL_Transmit>

  return USBD_OK;
 8011158:	2300      	movs	r3, #0
}
 801115a:	4618      	mov	r0, r3
 801115c:	3710      	adds	r7, #16
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}

08011162 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011162:	b580      	push	{r7, lr}
 8011164:	b084      	sub	sp, #16
 8011166:	af00      	add	r7, sp, #0
 8011168:	60f8      	str	r0, [r7, #12]
 801116a:	60b9      	str	r1, [r7, #8]
 801116c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	2203      	movs	r2, #3
 8011172:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	687a      	ldr	r2, [r7, #4]
 801117a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	687a      	ldr	r2, [r7, #4]
 8011182:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	68ba      	ldr	r2, [r7, #8]
 801118a:	2100      	movs	r1, #0
 801118c:	68f8      	ldr	r0, [r7, #12]
 801118e:	f000 fc3d 	bl	8011a0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011192:	2300      	movs	r3, #0
}
 8011194:	4618      	mov	r0, r3
 8011196:	3710      	adds	r7, #16
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}

0801119c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b084      	sub	sp, #16
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	60f8      	str	r0, [r7, #12]
 80111a4:	60b9      	str	r1, [r7, #8]
 80111a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	68ba      	ldr	r2, [r7, #8]
 80111ac:	2100      	movs	r1, #0
 80111ae:	68f8      	ldr	r0, [r7, #12]
 80111b0:	f000 fc2c 	bl	8011a0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80111b4:	2300      	movs	r3, #0
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	3710      	adds	r7, #16
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bd80      	pop	{r7, pc}

080111be <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80111be:	b580      	push	{r7, lr}
 80111c0:	b082      	sub	sp, #8
 80111c2:	af00      	add	r7, sp, #0
 80111c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2204      	movs	r2, #4
 80111ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80111ce:	2300      	movs	r3, #0
 80111d0:	2200      	movs	r2, #0
 80111d2:	2100      	movs	r1, #0
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f000 fbf8 	bl	80119ca <USBD_LL_Transmit>

  return USBD_OK;
 80111da:	2300      	movs	r3, #0
}
 80111dc:	4618      	mov	r0, r3
 80111de:	3708      	adds	r7, #8
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}

080111e4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2205      	movs	r2, #5
 80111f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80111f4:	2300      	movs	r3, #0
 80111f6:	2200      	movs	r2, #0
 80111f8:	2100      	movs	r1, #0
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f000 fc06 	bl	8011a0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011200:	2300      	movs	r3, #0
}
 8011202:	4618      	mov	r0, r3
 8011204:	3708      	adds	r7, #8
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}
	...

0801120c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &DFU_Desc, DEVICE_FS) != USBD_OK) {
 8011210:	2200      	movs	r2, #0
 8011212:	4912      	ldr	r1, [pc, #72]	@ (801125c <MX_USB_Device_Init+0x50>)
 8011214:	4812      	ldr	r0, [pc, #72]	@ (8011260 <MX_USB_Device_Init+0x54>)
 8011216:	f7fe feab 	bl	800ff70 <USBD_Init>
 801121a:	4603      	mov	r3, r0
 801121c:	2b00      	cmp	r3, #0
 801121e:	d001      	beq.n	8011224 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8011220:	f7f1 f816 	bl	8002250 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 8011224:	490f      	ldr	r1, [pc, #60]	@ (8011264 <MX_USB_Device_Init+0x58>)
 8011226:	480e      	ldr	r0, [pc, #56]	@ (8011260 <MX_USB_Device_Init+0x54>)
 8011228:	f7fe fed2 	bl	800ffd0 <USBD_RegisterClass>
 801122c:	4603      	mov	r3, r0
 801122e:	2b00      	cmp	r3, #0
 8011230:	d001      	beq.n	8011236 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8011232:	f7f1 f80d 	bl	8002250 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_Flash_fops) != USBD_OK) {
 8011236:	490c      	ldr	r1, [pc, #48]	@ (8011268 <MX_USB_Device_Init+0x5c>)
 8011238:	4809      	ldr	r0, [pc, #36]	@ (8011260 <MX_USB_Device_Init+0x54>)
 801123a:	f7fe fb17 	bl	800f86c <USBD_DFU_RegisterMedia>
 801123e:	4603      	mov	r3, r0
 8011240:	2b00      	cmp	r3, #0
 8011242:	d001      	beq.n	8011248 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8011244:	f7f1 f804 	bl	8002250 <Error_Handler>
  }
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  if (USBD_LL_BatterryCharging(&hUsbDeviceFS) != USBD_OK) {
 8011248:	4805      	ldr	r0, [pc, #20]	@ (8011260 <MX_USB_Device_Init+0x54>)
 801124a:	f000 fc01 	bl	8011a50 <USBD_LL_BatterryCharging>
 801124e:	4603      	mov	r3, r0
 8011250:	2b00      	cmp	r3, #0
 8011252:	d001      	beq.n	8011258 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011254:	f7f0 fffc 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011258:	bf00      	nop
 801125a:	bd80      	pop	{r7, pc}
 801125c:	20000070 	.word	0x20000070
 8011260:	200009f4 	.word	0x200009f4
 8011264:	2000000c 	.word	0x2000000c
 8011268:	200000c4 	.word	0x200000c4

0801126c <USBD_DFU_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801126c:	b480      	push	{r7}
 801126e:	b083      	sub	sp, #12
 8011270:	af00      	add	r7, sp, #0
 8011272:	4603      	mov	r3, r0
 8011274:	6039      	str	r1, [r7, #0]
 8011276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DFU_DeviceDesc);
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	2212      	movs	r2, #18
 801127c:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceDesc;
 801127e:	4b03      	ldr	r3, [pc, #12]	@ (801128c <USBD_DFU_DeviceDescriptor+0x20>)
}
 8011280:	4618      	mov	r0, r3
 8011282:	370c      	adds	r7, #12
 8011284:	46bd      	mov	sp, r7
 8011286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128a:	4770      	bx	lr
 801128c:	20000090 	.word	0x20000090

08011290 <USBD_DFU_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011290:	b480      	push	{r7}
 8011292:	b083      	sub	sp, #12
 8011294:	af00      	add	r7, sp, #0
 8011296:	4603      	mov	r3, r0
 8011298:	6039      	str	r1, [r7, #0]
 801129a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	2204      	movs	r2, #4
 80112a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80112a2:	4b03      	ldr	r3, [pc, #12]	@ (80112b0 <USBD_DFU_LangIDStrDescriptor+0x20>)
}
 80112a4:	4618      	mov	r0, r3
 80112a6:	370c      	adds	r7, #12
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr
 80112b0:	200000a4 	.word	0x200000a4

080112b4 <USBD_DFU_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	4603      	mov	r3, r0
 80112bc:	6039      	str	r1, [r7, #0]
 80112be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80112c0:	79fb      	ldrb	r3, [r7, #7]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d105      	bne.n	80112d2 <USBD_DFU_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80112c6:	683a      	ldr	r2, [r7, #0]
 80112c8:	4907      	ldr	r1, [pc, #28]	@ (80112e8 <USBD_DFU_ProductStrDescriptor+0x34>)
 80112ca:	4808      	ldr	r0, [pc, #32]	@ (80112ec <USBD_DFU_ProductStrDescriptor+0x38>)
 80112cc:	f7ff febd 	bl	801104a <USBD_GetString>
 80112d0:	e004      	b.n	80112dc <USBD_DFU_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80112d2:	683a      	ldr	r2, [r7, #0]
 80112d4:	4904      	ldr	r1, [pc, #16]	@ (80112e8 <USBD_DFU_ProductStrDescriptor+0x34>)
 80112d6:	4805      	ldr	r0, [pc, #20]	@ (80112ec <USBD_DFU_ProductStrDescriptor+0x38>)
 80112d8:	f7ff feb7 	bl	801104a <USBD_GetString>
  }
  return USBD_StrDesc;
 80112dc:	4b02      	ldr	r3, [pc, #8]	@ (80112e8 <USBD_DFU_ProductStrDescriptor+0x34>)
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3708      	adds	r7, #8
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}
 80112e6:	bf00      	nop
 80112e8:	20000cc4 	.word	0x20000cc4
 80112ec:	080157e0 	.word	0x080157e0

080112f0 <USBD_DFU_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b082      	sub	sp, #8
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	4603      	mov	r3, r0
 80112f8:	6039      	str	r1, [r7, #0]
 80112fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80112fc:	683a      	ldr	r2, [r7, #0]
 80112fe:	4904      	ldr	r1, [pc, #16]	@ (8011310 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
 8011300:	4804      	ldr	r0, [pc, #16]	@ (8011314 <USBD_DFU_ManufacturerStrDescriptor+0x24>)
 8011302:	f7ff fea2 	bl	801104a <USBD_GetString>
  return USBD_StrDesc;
 8011306:	4b02      	ldr	r3, [pc, #8]	@ (8011310 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
}
 8011308:	4618      	mov	r0, r3
 801130a:	3708      	adds	r7, #8
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}
 8011310:	20000cc4 	.word	0x20000cc4
 8011314:	08015800 	.word	0x08015800

08011318 <USBD_DFU_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b082      	sub	sp, #8
 801131c:	af00      	add	r7, sp, #0
 801131e:	4603      	mov	r3, r0
 8011320:	6039      	str	r1, [r7, #0]
 8011322:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	221a      	movs	r2, #26
 8011328:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801132a:	f000 f843 	bl	80113b4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_DFU_SerialStrDescriptor */

  /* USER CODE END USBD_DFU_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801132e:	4b02      	ldr	r3, [pc, #8]	@ (8011338 <USBD_DFU_SerialStrDescriptor+0x20>)
}
 8011330:	4618      	mov	r0, r3
 8011332:	3708      	adds	r7, #8
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}
 8011338:	200000a8 	.word	0x200000a8

0801133c <USBD_DFU_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b082      	sub	sp, #8
 8011340:	af00      	add	r7, sp, #0
 8011342:	4603      	mov	r3, r0
 8011344:	6039      	str	r1, [r7, #0]
 8011346:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011348:	79fb      	ldrb	r3, [r7, #7]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d105      	bne.n	801135a <USBD_DFU_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801134e:	683a      	ldr	r2, [r7, #0]
 8011350:	4907      	ldr	r1, [pc, #28]	@ (8011370 <USBD_DFU_ConfigStrDescriptor+0x34>)
 8011352:	4808      	ldr	r0, [pc, #32]	@ (8011374 <USBD_DFU_ConfigStrDescriptor+0x38>)
 8011354:	f7ff fe79 	bl	801104a <USBD_GetString>
 8011358:	e004      	b.n	8011364 <USBD_DFU_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801135a:	683a      	ldr	r2, [r7, #0]
 801135c:	4904      	ldr	r1, [pc, #16]	@ (8011370 <USBD_DFU_ConfigStrDescriptor+0x34>)
 801135e:	4805      	ldr	r0, [pc, #20]	@ (8011374 <USBD_DFU_ConfigStrDescriptor+0x38>)
 8011360:	f7ff fe73 	bl	801104a <USBD_GetString>
  }
  return USBD_StrDesc;
 8011364:	4b02      	ldr	r3, [pc, #8]	@ (8011370 <USBD_DFU_ConfigStrDescriptor+0x34>)
}
 8011366:	4618      	mov	r0, r3
 8011368:	3708      	adds	r7, #8
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}
 801136e:	bf00      	nop
 8011370:	20000cc4 	.word	0x20000cc4
 8011374:	08015814 	.word	0x08015814

08011378 <USBD_DFU_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b082      	sub	sp, #8
 801137c:	af00      	add	r7, sp, #0
 801137e:	4603      	mov	r3, r0
 8011380:	6039      	str	r1, [r7, #0]
 8011382:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011384:	79fb      	ldrb	r3, [r7, #7]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d105      	bne.n	8011396 <USBD_DFU_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801138a:	683a      	ldr	r2, [r7, #0]
 801138c:	4907      	ldr	r1, [pc, #28]	@ (80113ac <USBD_DFU_InterfaceStrDescriptor+0x34>)
 801138e:	4808      	ldr	r0, [pc, #32]	@ (80113b0 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 8011390:	f7ff fe5b 	bl	801104a <USBD_GetString>
 8011394:	e004      	b.n	80113a0 <USBD_DFU_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011396:	683a      	ldr	r2, [r7, #0]
 8011398:	4904      	ldr	r1, [pc, #16]	@ (80113ac <USBD_DFU_InterfaceStrDescriptor+0x34>)
 801139a:	4805      	ldr	r0, [pc, #20]	@ (80113b0 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 801139c:	f7ff fe55 	bl	801104a <USBD_GetString>
  }
  return USBD_StrDesc;
 80113a0:	4b02      	ldr	r3, [pc, #8]	@ (80113ac <USBD_DFU_InterfaceStrDescriptor+0x34>)
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3708      	adds	r7, #8
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}
 80113aa:	bf00      	nop
 80113ac:	20000cc4 	.word	0x20000cc4
 80113b0:	08015820 	.word	0x08015820

080113b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b084      	sub	sp, #16
 80113b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80113ba:	4b0f      	ldr	r3, [pc, #60]	@ (80113f8 <Get_SerialNum+0x44>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80113c0:	4b0e      	ldr	r3, [pc, #56]	@ (80113fc <Get_SerialNum+0x48>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80113c6:	4b0e      	ldr	r3, [pc, #56]	@ (8011400 <Get_SerialNum+0x4c>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80113cc:	68fa      	ldr	r2, [r7, #12]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	4413      	add	r3, r2
 80113d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d009      	beq.n	80113ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80113da:	2208      	movs	r2, #8
 80113dc:	4909      	ldr	r1, [pc, #36]	@ (8011404 <Get_SerialNum+0x50>)
 80113de:	68f8      	ldr	r0, [r7, #12]
 80113e0:	f000 f814 	bl	801140c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80113e4:	2204      	movs	r2, #4
 80113e6:	4908      	ldr	r1, [pc, #32]	@ (8011408 <Get_SerialNum+0x54>)
 80113e8:	68b8      	ldr	r0, [r7, #8]
 80113ea:	f000 f80f 	bl	801140c <IntToUnicode>
  }
}
 80113ee:	bf00      	nop
 80113f0:	3710      	adds	r7, #16
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}
 80113f6:	bf00      	nop
 80113f8:	1fff7590 	.word	0x1fff7590
 80113fc:	1fff7594 	.word	0x1fff7594
 8011400:	1fff7598 	.word	0x1fff7598
 8011404:	200000aa 	.word	0x200000aa
 8011408:	200000ba 	.word	0x200000ba

0801140c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801140c:	b480      	push	{r7}
 801140e:	b087      	sub	sp, #28
 8011410:	af00      	add	r7, sp, #0
 8011412:	60f8      	str	r0, [r7, #12]
 8011414:	60b9      	str	r1, [r7, #8]
 8011416:	4613      	mov	r3, r2
 8011418:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801141a:	2300      	movs	r3, #0
 801141c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801141e:	2300      	movs	r3, #0
 8011420:	75fb      	strb	r3, [r7, #23]
 8011422:	e027      	b.n	8011474 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	0f1b      	lsrs	r3, r3, #28
 8011428:	2b09      	cmp	r3, #9
 801142a:	d80b      	bhi.n	8011444 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	0f1b      	lsrs	r3, r3, #28
 8011430:	b2da      	uxtb	r2, r3
 8011432:	7dfb      	ldrb	r3, [r7, #23]
 8011434:	005b      	lsls	r3, r3, #1
 8011436:	4619      	mov	r1, r3
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	440b      	add	r3, r1
 801143c:	3230      	adds	r2, #48	@ 0x30
 801143e:	b2d2      	uxtb	r2, r2
 8011440:	701a      	strb	r2, [r3, #0]
 8011442:	e00a      	b.n	801145a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	0f1b      	lsrs	r3, r3, #28
 8011448:	b2da      	uxtb	r2, r3
 801144a:	7dfb      	ldrb	r3, [r7, #23]
 801144c:	005b      	lsls	r3, r3, #1
 801144e:	4619      	mov	r1, r3
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	440b      	add	r3, r1
 8011454:	3237      	adds	r2, #55	@ 0x37
 8011456:	b2d2      	uxtb	r2, r2
 8011458:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	011b      	lsls	r3, r3, #4
 801145e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011460:	7dfb      	ldrb	r3, [r7, #23]
 8011462:	005b      	lsls	r3, r3, #1
 8011464:	3301      	adds	r3, #1
 8011466:	68ba      	ldr	r2, [r7, #8]
 8011468:	4413      	add	r3, r2
 801146a:	2200      	movs	r2, #0
 801146c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801146e:	7dfb      	ldrb	r3, [r7, #23]
 8011470:	3301      	adds	r3, #1
 8011472:	75fb      	strb	r3, [r7, #23]
 8011474:	7dfa      	ldrb	r2, [r7, #23]
 8011476:	79fb      	ldrb	r3, [r7, #7]
 8011478:	429a      	cmp	r2, r3
 801147a:	d3d3      	bcc.n	8011424 <IntToUnicode+0x18>
  }
}
 801147c:	bf00      	nop
 801147e:	bf00      	nop
 8011480:	371c      	adds	r7, #28
 8011482:	46bd      	mov	sp, r7
 8011484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011488:	4770      	bx	lr

0801148a <FLASH_If_Init>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Init(void)
{
 801148a:	b480      	push	{r7}
 801148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 801148e:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8011490:	4618      	mov	r0, r3
 8011492:	46bd      	mov	sp, r7
 8011494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011498:	4770      	bx	lr

0801149a <FLASH_If_DeInit>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t FLASH_If_DeInit(void)
{
 801149a:	b480      	push	{r7}
 801149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 801149e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	46bd      	mov	sp, r7
 80114a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a8:	4770      	bx	lr

080114aa <FLASH_If_Erase>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Erase(uint32_t Add)
{
 80114aa:	b480      	push	{r7}
 80114ac:	b083      	sub	sp, #12
 80114ae:	af00      	add	r7, sp, #0
 80114b0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 80114b2:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	370c      	adds	r7, #12
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr

080114c0 <FLASH_If_Write>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80114c0:	b480      	push	{r7}
 80114c2:	b085      	sub	sp, #20
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	60f8      	str	r0, [r7, #12]
 80114c8:	60b9      	str	r1, [r7, #8]
 80114ca:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 80114cc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3714      	adds	r7, #20
 80114d2:	46bd      	mov	sp, r7
 80114d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d8:	4770      	bx	lr

080114da <FLASH_If_Read>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *FLASH_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80114da:	b480      	push	{r7}
 80114dc:	b085      	sub	sp, #20
 80114de:	af00      	add	r7, sp, #0
 80114e0:	60f8      	str	r0, [r7, #12]
 80114e2:	60b9      	str	r1, [r7, #8]
 80114e4:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(FLASH_BASE);
 80114e6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  /* USER CODE END 4 */
}
 80114ea:	4618      	mov	r0, r3
 80114ec:	3714      	adds	r7, #20
 80114ee:	46bd      	mov	sp, r7
 80114f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f4:	4770      	bx	lr

080114f6 <FLASH_If_GetStatus>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t FLASH_If_GetStatus(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 80114f6:	b480      	push	{r7}
 80114f8:	b085      	sub	sp, #20
 80114fa:	af00      	add	r7, sp, #0
 80114fc:	60f8      	str	r0, [r7, #12]
 80114fe:	460b      	mov	r3, r1
 8011500:	607a      	str	r2, [r7, #4]
 8011502:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8011504:	7afb      	ldrb	r3, [r7, #11]
 8011506:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8011508:	bf00      	nop
  }
  return (USBD_OK);
 801150a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801150c:	4618      	mov	r0, r3
 801150e:	3714      	adds	r7, #20
 8011510:	46bd      	mov	sp, r7
 8011512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011516:	4770      	bx	lr

08011518 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b098      	sub	sp, #96	@ 0x60
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011520:	f107 0310 	add.w	r3, r7, #16
 8011524:	2250      	movs	r2, #80	@ 0x50
 8011526:	2100      	movs	r1, #0
 8011528:	4618      	mov	r0, r3
 801152a:	f001 f923 	bl	8012774 <memset>
  if(pcdHandle->Instance==USB)
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	4a15      	ldr	r2, [pc, #84]	@ (8011588 <HAL_PCD_MspInit+0x70>)
 8011534:	4293      	cmp	r3, r2
 8011536:	d122      	bne.n	801157e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011538:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801153c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801153e:	2300      	movs	r3, #0
 8011540:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011542:	f107 0310 	add.w	r3, r7, #16
 8011546:	4618      	mov	r0, r3
 8011548:	f7f7 feae 	bl	80092a8 <HAL_RCCEx_PeriphCLKConfig>
 801154c:	4603      	mov	r3, r0
 801154e:	2b00      	cmp	r3, #0
 8011550:	d001      	beq.n	8011556 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8011552:	f7f0 fe7d 	bl	8002250 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011556:	4b0d      	ldr	r3, [pc, #52]	@ (801158c <HAL_PCD_MspInit+0x74>)
 8011558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801155a:	4a0c      	ldr	r2, [pc, #48]	@ (801158c <HAL_PCD_MspInit+0x74>)
 801155c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8011560:	6593      	str	r3, [r2, #88]	@ 0x58
 8011562:	4b0a      	ldr	r3, [pc, #40]	@ (801158c <HAL_PCD_MspInit+0x74>)
 8011564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011566:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801156a:	60fb      	str	r3, [r7, #12]
 801156c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801156e:	2200      	movs	r2, #0
 8011570:	2100      	movs	r1, #0
 8011572:	2014      	movs	r0, #20
 8011574:	f7f4 f856 	bl	8005624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8011578:	2014      	movs	r0, #20
 801157a:	f7f4 f86d 	bl	8005658 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801157e:	bf00      	nop
 8011580:	3760      	adds	r7, #96	@ 0x60
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}
 8011586:	bf00      	nop
 8011588:	40005c00 	.word	0x40005c00
 801158c:	40021000 	.word	0x40021000

08011590 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b082      	sub	sp, #8
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80115a4:	4619      	mov	r1, r3
 80115a6:	4610      	mov	r0, r2
 80115a8:	f7fe fd9f 	bl	80100ea <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80115ac:	bf00      	nop
 80115ae:	3708      	adds	r7, #8
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}

080115b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b082      	sub	sp, #8
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
 80115bc:	460b      	mov	r3, r1
 80115be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80115c6:	78fa      	ldrb	r2, [r7, #3]
 80115c8:	6879      	ldr	r1, [r7, #4]
 80115ca:	4613      	mov	r3, r2
 80115cc:	009b      	lsls	r3, r3, #2
 80115ce:	4413      	add	r3, r2
 80115d0:	00db      	lsls	r3, r3, #3
 80115d2:	440b      	add	r3, r1
 80115d4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80115d8:	681a      	ldr	r2, [r3, #0]
 80115da:	78fb      	ldrb	r3, [r7, #3]
 80115dc:	4619      	mov	r1, r3
 80115de:	f7fe fdd9 	bl	8010194 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80115e2:	bf00      	nop
 80115e4:	3708      	adds	r7, #8
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bd80      	pop	{r7, pc}

080115ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115ea:	b580      	push	{r7, lr}
 80115ec:	b082      	sub	sp, #8
 80115ee:	af00      	add	r7, sp, #0
 80115f0:	6078      	str	r0, [r7, #4]
 80115f2:	460b      	mov	r3, r1
 80115f4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80115fc:	78fa      	ldrb	r2, [r7, #3]
 80115fe:	6879      	ldr	r1, [r7, #4]
 8011600:	4613      	mov	r3, r2
 8011602:	009b      	lsls	r3, r3, #2
 8011604:	4413      	add	r3, r2
 8011606:	00db      	lsls	r3, r3, #3
 8011608:	440b      	add	r3, r1
 801160a:	3324      	adds	r3, #36	@ 0x24
 801160c:	681a      	ldr	r2, [r3, #0]
 801160e:	78fb      	ldrb	r3, [r7, #3]
 8011610:	4619      	mov	r1, r3
 8011612:	f7fe fe22 	bl	801025a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8011616:	bf00      	nop
 8011618:	3708      	adds	r7, #8
 801161a:	46bd      	mov	sp, r7
 801161c:	bd80      	pop	{r7, pc}

0801161e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801161e:	b580      	push	{r7, lr}
 8011620:	b082      	sub	sp, #8
 8011622:	af00      	add	r7, sp, #0
 8011624:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801162c:	4618      	mov	r0, r3
 801162e:	f7fe ff36 	bl	801049e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8011632:	bf00      	nop
 8011634:	3708      	adds	r7, #8
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}

0801163a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801163a:	b580      	push	{r7, lr}
 801163c:	b084      	sub	sp, #16
 801163e:	af00      	add	r7, sp, #0
 8011640:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011642:	2301      	movs	r3, #1
 8011644:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	795b      	ldrb	r3, [r3, #5]
 801164a:	2b02      	cmp	r3, #2
 801164c:	d001      	beq.n	8011652 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801164e:	f7f0 fdff 	bl	8002250 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011658:	7bfa      	ldrb	r2, [r7, #15]
 801165a:	4611      	mov	r1, r2
 801165c:	4618      	mov	r0, r3
 801165e:	f7fe fee0 	bl	8010422 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011668:	4618      	mov	r0, r3
 801166a:	f7fe fe8c 	bl	8010386 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801166e:	bf00      	nop
 8011670:	3710      	adds	r7, #16
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
	...

08011678 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b082      	sub	sp, #8
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011686:	4618      	mov	r0, r3
 8011688:	f7fe fedb 	bl	8010442 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	7a5b      	ldrb	r3, [r3, #9]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d005      	beq.n	80116a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011694:	4b04      	ldr	r3, [pc, #16]	@ (80116a8 <HAL_PCD_SuspendCallback+0x30>)
 8011696:	691b      	ldr	r3, [r3, #16]
 8011698:	4a03      	ldr	r2, [pc, #12]	@ (80116a8 <HAL_PCD_SuspendCallback+0x30>)
 801169a:	f043 0306 	orr.w	r3, r3, #6
 801169e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80116a0:	bf00      	nop
 80116a2:	3708      	adds	r7, #8
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}
 80116a8:	e000ed00 	.word	0xe000ed00

080116ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b082      	sub	sp, #8
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	7a5b      	ldrb	r3, [r3, #9]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d007      	beq.n	80116cc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80116bc:	4b08      	ldr	r3, [pc, #32]	@ (80116e0 <HAL_PCD_ResumeCallback+0x34>)
 80116be:	691b      	ldr	r3, [r3, #16]
 80116c0:	4a07      	ldr	r2, [pc, #28]	@ (80116e0 <HAL_PCD_ResumeCallback+0x34>)
 80116c2:	f023 0306 	bic.w	r3, r3, #6
 80116c6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80116c8:	f000 fa32 	bl	8011b30 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7fe fecb 	bl	801046e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80116d8:	bf00      	nop
 80116da:	3708      	adds	r7, #8
 80116dc:	46bd      	mov	sp, r7
 80116de:	bd80      	pop	{r7, pc}
 80116e0:	e000ed00 	.word	0xe000ed00

080116e4 <HAL_PCDEx_BCD_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_BCDCallback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
#else
void HAL_PCDEx_BCD_Callback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b082      	sub	sp, #8
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
 80116ec:	460b      	mov	r3, r1
 80116ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCDEx_BCD_Callback_PreTreatment */

  /* USER CODE END HAL_PCDEx_BCD_Callback_PreTreatment */
  switch(msg)
 80116f0:	78fb      	ldrb	r3, [r7, #3]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d026      	beq.n	8011744 <HAL_PCDEx_BCD_Callback+0x60>
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	db34      	blt.n	8011764 <HAL_PCDEx_BCD_Callback+0x80>
 80116fa:	2bff      	cmp	r3, #255	@ 0xff
 80116fc:	dc32      	bgt.n	8011764 <HAL_PCDEx_BCD_Callback+0x80>
 80116fe:	2bfb      	cmp	r3, #251	@ 0xfb
 8011700:	db30      	blt.n	8011764 <HAL_PCDEx_BCD_Callback+0x80>
 8011702:	3bfb      	subs	r3, #251	@ 0xfb
 8011704:	2b04      	cmp	r3, #4
 8011706:	d82d      	bhi.n	8011764 <HAL_PCDEx_BCD_Callback+0x80>
 8011708:	a201      	add	r2, pc, #4	@ (adr r2, 8011710 <HAL_PCDEx_BCD_Callback+0x2c>)
 801170a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801170e:	bf00      	nop
 8011710:	0801173d 	.word	0x0801173d
 8011714:	08011735 	.word	0x08011735
 8011718:	0801172d 	.word	0x0801172d
 801171c:	08011725 	.word	0x08011725
 8011720:	0801175f 	.word	0x0801175f
  {
    case PCD_BCD_CONTACT_DETECTION:
      USBD_BCD_PortState = USB_BCD_CONTACT_DETECTION;
 8011724:	4b12      	ldr	r3, [pc, #72]	@ (8011770 <HAL_PCDEx_BCD_Callback+0x8c>)
 8011726:	22fe      	movs	r2, #254	@ 0xfe
 8011728:	701a      	strb	r2, [r3, #0]
    break;
 801172a:	e01c      	b.n	8011766 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_STD_DOWNSTREAM_PORT:
      USBD_BCD_PortState = USB_BCD_STD_DOWNSTREAM_PORT;
 801172c:	4b10      	ldr	r3, [pc, #64]	@ (8011770 <HAL_PCDEx_BCD_Callback+0x8c>)
 801172e:	22fd      	movs	r2, #253	@ 0xfd
 8011730:	701a      	strb	r2, [r3, #0]
    break;
 8011732:	e018      	b.n	8011766 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_CHARGING_DOWNSTREAM_PORT:
      USBD_BCD_PortState = USB_BCD_CHARGING_DOWNSTREAM_PORT;
 8011734:	4b0e      	ldr	r3, [pc, #56]	@ (8011770 <HAL_PCDEx_BCD_Callback+0x8c>)
 8011736:	22fc      	movs	r2, #252	@ 0xfc
 8011738:	701a      	strb	r2, [r3, #0]
    break;
 801173a:	e014      	b.n	8011766 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_DEDICATED_CHARGING_PORT:
      USBD_BCD_PortState = USB_BCD_DEDICATED_CHARGING_PORT;
 801173c:	4b0c      	ldr	r3, [pc, #48]	@ (8011770 <HAL_PCDEx_BCD_Callback+0x8c>)
 801173e:	22fb      	movs	r2, #251	@ 0xfb
 8011740:	701a      	strb	r2, [r3, #0]
    break;
 8011742:	e010      	b.n	8011766 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_DISCOVERY_COMPLETED:
      HAL_Delay(20);
 8011744:	2014      	movs	r0, #20
 8011746:	f7f2 fd7f 	bl	8004248 <HAL_Delay>
      /* Start USB */
      USBD_Start(hpcd->pData);
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011750:	4618      	mov	r0, r3
 8011752:	f7fe fc64 	bl	801001e <USBD_Start>
      USBD_BCD_PortState = USB_BCD_DISCOVERY_COMPLETED;
 8011756:	4b06      	ldr	r3, [pc, #24]	@ (8011770 <HAL_PCDEx_BCD_Callback+0x8c>)
 8011758:	22fa      	movs	r2, #250	@ 0xfa
 801175a:	701a      	strb	r2, [r3, #0]
    break;
 801175c:	e003      	b.n	8011766 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_ERROR:
      Error_Handler();
 801175e:	f7f0 fd77 	bl	8002250 <Error_Handler>
    break;
 8011762:	e000      	b.n	8011766 <HAL_PCDEx_BCD_Callback+0x82>

    default:
    break;
 8011764:	bf00      	nop
  }
  /* USER CODE BEGIN HAL_PCDEx_BCD_Callback_PostTreatment */

  /* USER CODE END HAL_PCDEx_BCD_Callback_PostTreatment */
}
 8011766:	bf00      	nop
 8011768:	3708      	adds	r7, #8
 801176a:	46bd      	mov	sp, r7
 801176c:	bd80      	pop	{r7, pc}
 801176e:	bf00      	nop
 8011770:	20000ec4 	.word	0x20000ec4

08011774 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b082      	sub	sp, #8
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 801177c:	4a1e      	ldr	r2, [pc, #120]	@ (80117f8 <USBD_LL_Init+0x84>)
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	4a1c      	ldr	r2, [pc, #112]	@ (80117f8 <USBD_LL_Init+0x84>)
 8011788:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 801178c:	4b1a      	ldr	r3, [pc, #104]	@ (80117f8 <USBD_LL_Init+0x84>)
 801178e:	4a1b      	ldr	r2, [pc, #108]	@ (80117fc <USBD_LL_Init+0x88>)
 8011790:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011792:	4b19      	ldr	r3, [pc, #100]	@ (80117f8 <USBD_LL_Init+0x84>)
 8011794:	2208      	movs	r2, #8
 8011796:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011798:	4b17      	ldr	r3, [pc, #92]	@ (80117f8 <USBD_LL_Init+0x84>)
 801179a:	2202      	movs	r2, #2
 801179c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801179e:	4b16      	ldr	r3, [pc, #88]	@ (80117f8 <USBD_LL_Init+0x84>)
 80117a0:	2202      	movs	r2, #2
 80117a2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80117a4:	4b14      	ldr	r3, [pc, #80]	@ (80117f8 <USBD_LL_Init+0x84>)
 80117a6:	2200      	movs	r2, #0
 80117a8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80117aa:	4b13      	ldr	r3, [pc, #76]	@ (80117f8 <USBD_LL_Init+0x84>)
 80117ac:	2200      	movs	r2, #0
 80117ae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80117b0:	4b11      	ldr	r3, [pc, #68]	@ (80117f8 <USBD_LL_Init+0x84>)
 80117b2:	2200      	movs	r2, #0
 80117b4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = ENABLE;
 80117b6:	4b10      	ldr	r3, [pc, #64]	@ (80117f8 <USBD_LL_Init+0x84>)
 80117b8:	2201      	movs	r2, #1
 80117ba:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80117bc:	480e      	ldr	r0, [pc, #56]	@ (80117f8 <USBD_LL_Init+0x84>)
 80117be:	f7f5 f8ec 	bl	800699a <HAL_PCD_Init>
 80117c2:	4603      	mov	r3, r0
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d001      	beq.n	80117cc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80117c8:	f7f0 fd42 	bl	8002250 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80117d2:	2318      	movs	r3, #24
 80117d4:	2200      	movs	r2, #0
 80117d6:	2100      	movs	r1, #0
 80117d8:	f7f6 fd35 	bl	8008246 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80117e2:	2358      	movs	r3, #88	@ 0x58
 80117e4:	2200      	movs	r2, #0
 80117e6:	2180      	movs	r1, #128	@ 0x80
 80117e8:	f7f6 fd2d 	bl	8008246 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 80117ec:	2300      	movs	r3, #0
}
 80117ee:	4618      	mov	r0, r3
 80117f0:	3708      	adds	r7, #8
 80117f2:	46bd      	mov	sp, r7
 80117f4:	bd80      	pop	{r7, pc}
 80117f6:	bf00      	nop
 80117f8:	20000ec8 	.word	0x20000ec8
 80117fc:	40005c00 	.word	0x40005c00

08011800 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b084      	sub	sp, #16
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011808:	2300      	movs	r3, #0
 801180a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801180c:	2300      	movs	r3, #0
 801180e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011816:	4618      	mov	r0, r3
 8011818:	f7f5 f98d 	bl	8006b36 <HAL_PCD_Start>
 801181c:	4603      	mov	r3, r0
 801181e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011820:	7bfb      	ldrb	r3, [r7, #15]
 8011822:	4618      	mov	r0, r3
 8011824:	f000 f98a 	bl	8011b3c <USBD_Get_USB_Status>
 8011828:	4603      	mov	r3, r0
 801182a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801182c:	7bbb      	ldrb	r3, [r7, #14]
}
 801182e:	4618      	mov	r0, r3
 8011830:	3710      	adds	r7, #16
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}

08011836 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8011836:	b580      	push	{r7, lr}
 8011838:	b084      	sub	sp, #16
 801183a:	af00      	add	r7, sp, #0
 801183c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801183e:	2300      	movs	r3, #0
 8011840:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011842:	2300      	movs	r3, #0
 8011844:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801184c:	4618      	mov	r0, r3
 801184e:	f7f5 f994 	bl	8006b7a <HAL_PCD_Stop>
 8011852:	4603      	mov	r3, r0
 8011854:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011856:	7bfb      	ldrb	r3, [r7, #15]
 8011858:	4618      	mov	r0, r3
 801185a:	f000 f96f 	bl	8011b3c <USBD_Get_USB_Status>
 801185e:	4603      	mov	r3, r0
 8011860:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011862:	7bbb      	ldrb	r3, [r7, #14]
}
 8011864:	4618      	mov	r0, r3
 8011866:	3710      	adds	r7, #16
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}

0801186c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b084      	sub	sp, #16
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
 8011874:	4608      	mov	r0, r1
 8011876:	4611      	mov	r1, r2
 8011878:	461a      	mov	r2, r3
 801187a:	4603      	mov	r3, r0
 801187c:	70fb      	strb	r3, [r7, #3]
 801187e:	460b      	mov	r3, r1
 8011880:	70bb      	strb	r3, [r7, #2]
 8011882:	4613      	mov	r3, r2
 8011884:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011886:	2300      	movs	r3, #0
 8011888:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801188a:	2300      	movs	r3, #0
 801188c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8011894:	78bb      	ldrb	r3, [r7, #2]
 8011896:	883a      	ldrh	r2, [r7, #0]
 8011898:	78f9      	ldrb	r1, [r7, #3]
 801189a:	f7f5 fadb 	bl	8006e54 <HAL_PCD_EP_Open>
 801189e:	4603      	mov	r3, r0
 80118a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80118a2:	7bfb      	ldrb	r3, [r7, #15]
 80118a4:	4618      	mov	r0, r3
 80118a6:	f000 f949 	bl	8011b3c <USBD_Get_USB_Status>
 80118aa:	4603      	mov	r3, r0
 80118ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80118ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80118b0:	4618      	mov	r0, r3
 80118b2:	3710      	adds	r7, #16
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}

080118b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b084      	sub	sp, #16
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
 80118c0:	460b      	mov	r3, r1
 80118c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118c4:	2300      	movs	r3, #0
 80118c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118c8:	2300      	movs	r3, #0
 80118ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80118d2:	78fa      	ldrb	r2, [r7, #3]
 80118d4:	4611      	mov	r1, r2
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7f5 fb83 	bl	8006fe2 <HAL_PCD_EP_SetStall>
 80118dc:	4603      	mov	r3, r0
 80118de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80118e0:	7bfb      	ldrb	r3, [r7, #15]
 80118e2:	4618      	mov	r0, r3
 80118e4:	f000 f92a 	bl	8011b3c <USBD_Get_USB_Status>
 80118e8:	4603      	mov	r3, r0
 80118ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80118ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80118ee:	4618      	mov	r0, r3
 80118f0:	3710      	adds	r7, #16
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bd80      	pop	{r7, pc}

080118f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80118f6:	b580      	push	{r7, lr}
 80118f8:	b084      	sub	sp, #16
 80118fa:	af00      	add	r7, sp, #0
 80118fc:	6078      	str	r0, [r7, #4]
 80118fe:	460b      	mov	r3, r1
 8011900:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011902:	2300      	movs	r3, #0
 8011904:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011906:	2300      	movs	r3, #0
 8011908:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011910:	78fa      	ldrb	r2, [r7, #3]
 8011912:	4611      	mov	r1, r2
 8011914:	4618      	mov	r0, r3
 8011916:	f7f5 fbb6 	bl	8007086 <HAL_PCD_EP_ClrStall>
 801191a:	4603      	mov	r3, r0
 801191c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801191e:	7bfb      	ldrb	r3, [r7, #15]
 8011920:	4618      	mov	r0, r3
 8011922:	f000 f90b 	bl	8011b3c <USBD_Get_USB_Status>
 8011926:	4603      	mov	r3, r0
 8011928:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801192a:	7bbb      	ldrb	r3, [r7, #14]
}
 801192c:	4618      	mov	r0, r3
 801192e:	3710      	adds	r7, #16
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}

08011934 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011934:	b480      	push	{r7}
 8011936:	b085      	sub	sp, #20
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	460b      	mov	r3, r1
 801193e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011946:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011948:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801194c:	2b00      	cmp	r3, #0
 801194e:	da0b      	bge.n	8011968 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011950:	78fb      	ldrb	r3, [r7, #3]
 8011952:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011956:	68f9      	ldr	r1, [r7, #12]
 8011958:	4613      	mov	r3, r2
 801195a:	009b      	lsls	r3, r3, #2
 801195c:	4413      	add	r3, r2
 801195e:	00db      	lsls	r3, r3, #3
 8011960:	440b      	add	r3, r1
 8011962:	3312      	adds	r3, #18
 8011964:	781b      	ldrb	r3, [r3, #0]
 8011966:	e00b      	b.n	8011980 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011968:	78fb      	ldrb	r3, [r7, #3]
 801196a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801196e:	68f9      	ldr	r1, [r7, #12]
 8011970:	4613      	mov	r3, r2
 8011972:	009b      	lsls	r3, r3, #2
 8011974:	4413      	add	r3, r2
 8011976:	00db      	lsls	r3, r3, #3
 8011978:	440b      	add	r3, r1
 801197a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 801197e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011980:	4618      	mov	r0, r3
 8011982:	3714      	adds	r7, #20
 8011984:	46bd      	mov	sp, r7
 8011986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198a:	4770      	bx	lr

0801198c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b084      	sub	sp, #16
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	460b      	mov	r3, r1
 8011996:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011998:	2300      	movs	r3, #0
 801199a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801199c:	2300      	movs	r3, #0
 801199e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80119a6:	78fa      	ldrb	r2, [r7, #3]
 80119a8:	4611      	mov	r1, r2
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7f5 fa2e 	bl	8006e0c <HAL_PCD_SetAddress>
 80119b0:	4603      	mov	r3, r0
 80119b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80119b4:	7bfb      	ldrb	r3, [r7, #15]
 80119b6:	4618      	mov	r0, r3
 80119b8:	f000 f8c0 	bl	8011b3c <USBD_Get_USB_Status>
 80119bc:	4603      	mov	r3, r0
 80119be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	3710      	adds	r7, #16
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}

080119ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80119ca:	b580      	push	{r7, lr}
 80119cc:	b086      	sub	sp, #24
 80119ce:	af00      	add	r7, sp, #0
 80119d0:	60f8      	str	r0, [r7, #12]
 80119d2:	607a      	str	r2, [r7, #4]
 80119d4:	603b      	str	r3, [r7, #0]
 80119d6:	460b      	mov	r3, r1
 80119d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119da:	2300      	movs	r3, #0
 80119dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119de:	2300      	movs	r3, #0
 80119e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80119e8:	7af9      	ldrb	r1, [r7, #11]
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	687a      	ldr	r2, [r7, #4]
 80119ee:	f7f5 fac1 	bl	8006f74 <HAL_PCD_EP_Transmit>
 80119f2:	4603      	mov	r3, r0
 80119f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80119f6:	7dfb      	ldrb	r3, [r7, #23]
 80119f8:	4618      	mov	r0, r3
 80119fa:	f000 f89f 	bl	8011b3c <USBD_Get_USB_Status>
 80119fe:	4603      	mov	r3, r0
 8011a00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011a02:	7dbb      	ldrb	r3, [r7, #22]
}
 8011a04:	4618      	mov	r0, r3
 8011a06:	3718      	adds	r7, #24
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	bd80      	pop	{r7, pc}

08011a0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b086      	sub	sp, #24
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	60f8      	str	r0, [r7, #12]
 8011a14:	607a      	str	r2, [r7, #4]
 8011a16:	603b      	str	r3, [r7, #0]
 8011a18:	460b      	mov	r3, r1
 8011a1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a20:	2300      	movs	r3, #0
 8011a22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8011a2a:	7af9      	ldrb	r1, [r7, #11]
 8011a2c:	683b      	ldr	r3, [r7, #0]
 8011a2e:	687a      	ldr	r2, [r7, #4]
 8011a30:	f7f5 fa6f 	bl	8006f12 <HAL_PCD_EP_Receive>
 8011a34:	4603      	mov	r3, r0
 8011a36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a38:	7dfb      	ldrb	r3, [r7, #23]
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f000 f87e 	bl	8011b3c <USBD_Get_USB_Status>
 8011a40:	4603      	mov	r3, r0
 8011a42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011a44:	7dbb      	ldrb	r3, [r7, #22]
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	3718      	adds	r7, #24
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}
	...

08011a50 <USBD_LL_BatterryCharging>:
  * @brief
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatterryCharging(USBD_HandleTypeDef *pdev)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b082      	sub	sp, #8
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1) == GPIO_PIN_SET)
 8011a58:	2102      	movs	r1, #2
 8011a5a:	480d      	ldr	r0, [pc, #52]	@ (8011a90 <USBD_LL_BatterryCharging+0x40>)
 8011a5c:	f7f4 fab2 	bl	8005fc4 <HAL_GPIO_ReadPin>
 8011a60:	4603      	mov	r3, r0
 8011a62:	2b01      	cmp	r3, #1
 8011a64:	d10f      	bne.n	8011a86 <USBD_LL_BatterryCharging+0x36>
  {
    /*wait for bus stabilization*/
    HAL_Delay(450);
 8011a66:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8011a6a:	f7f2 fbed 	bl	8004248 <HAL_Delay>
    /*Start BCD Detect*/
    HAL_PCDEx_ActivateBCD (pdev->pData);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011a74:	4618      	mov	r0, r3
 8011a76:	f7f6 fc29 	bl	80082cc <HAL_PCDEx_ActivateBCD>
    HAL_PCDEx_BCD_VBUSDetect(pdev->pData);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7f6 fc79 	bl	8008378 <HAL_PCDEx_BCD_VBUSDetect>
  }
  return USBD_OK;
 8011a86:	2300      	movs	r3, #0
}
 8011a88:	4618      	mov	r0, r3
 8011a8a:	3708      	adds	r7, #8
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}
 8011a90:	48001400 	.word	0x48001400

08011a94 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b082      	sub	sp, #8
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
 8011a9c:	460b      	mov	r3, r1
 8011a9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011aa0:	78fb      	ldrb	r3, [r7, #3]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d002      	beq.n	8011aac <HAL_PCDEx_LPM_Callback+0x18>
 8011aa6:	2b01      	cmp	r3, #1
 8011aa8:	d013      	beq.n	8011ad2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011aaa:	e023      	b.n	8011af4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	7a5b      	ldrb	r3, [r3, #9]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d007      	beq.n	8011ac4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011ab4:	f000 f83c 	bl	8011b30 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011ab8:	4b10      	ldr	r3, [pc, #64]	@ (8011afc <HAL_PCDEx_LPM_Callback+0x68>)
 8011aba:	691b      	ldr	r3, [r3, #16]
 8011abc:	4a0f      	ldr	r2, [pc, #60]	@ (8011afc <HAL_PCDEx_LPM_Callback+0x68>)
 8011abe:	f023 0306 	bic.w	r3, r3, #6
 8011ac2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011aca:	4618      	mov	r0, r3
 8011acc:	f7fe fccf 	bl	801046e <USBD_LL_Resume>
    break;
 8011ad0:	e010      	b.n	8011af4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f7fe fcb2 	bl	8010442 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	7a5b      	ldrb	r3, [r3, #9]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d005      	beq.n	8011af2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011ae6:	4b05      	ldr	r3, [pc, #20]	@ (8011afc <HAL_PCDEx_LPM_Callback+0x68>)
 8011ae8:	691b      	ldr	r3, [r3, #16]
 8011aea:	4a04      	ldr	r2, [pc, #16]	@ (8011afc <HAL_PCDEx_LPM_Callback+0x68>)
 8011aec:	f043 0306 	orr.w	r3, r3, #6
 8011af0:	6113      	str	r3, [r2, #16]
    break;
 8011af2:	bf00      	nop
}
 8011af4:	bf00      	nop
 8011af6:	3708      	adds	r7, #8
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}
 8011afc:	e000ed00 	.word	0xe000ed00

08011b00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011b00:	b480      	push	{r7}
 8011b02:	b083      	sub	sp, #12
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011b08:	4b03      	ldr	r3, [pc, #12]	@ (8011b18 <USBD_static_malloc+0x18>)
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	370c      	adds	r7, #12
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b14:	4770      	bx	lr
 8011b16:	bf00      	nop
 8011b18:	200011a4 	.word	0x200011a4

08011b1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b083      	sub	sp, #12
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]

}
 8011b24:	bf00      	nop
 8011b26:	370c      	adds	r7, #12
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2e:	4770      	bx	lr

08011b30 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011b34:	f7ef fcc6 	bl	80014c4 <SystemClock_Config>
}
 8011b38:	bf00      	nop
 8011b3a:	bd80      	pop	{r7, pc}

08011b3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011b3c:	b480      	push	{r7}
 8011b3e:	b085      	sub	sp, #20
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	4603      	mov	r3, r0
 8011b44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b46:	2300      	movs	r3, #0
 8011b48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011b4a:	79fb      	ldrb	r3, [r7, #7]
 8011b4c:	2b03      	cmp	r3, #3
 8011b4e:	d817      	bhi.n	8011b80 <USBD_Get_USB_Status+0x44>
 8011b50:	a201      	add	r2, pc, #4	@ (adr r2, 8011b58 <USBD_Get_USB_Status+0x1c>)
 8011b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b56:	bf00      	nop
 8011b58:	08011b69 	.word	0x08011b69
 8011b5c:	08011b6f 	.word	0x08011b6f
 8011b60:	08011b75 	.word	0x08011b75
 8011b64:	08011b7b 	.word	0x08011b7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011b68:	2300      	movs	r3, #0
 8011b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8011b6c:	e00b      	b.n	8011b86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011b6e:	2303      	movs	r3, #3
 8011b70:	73fb      	strb	r3, [r7, #15]
    break;
 8011b72:	e008      	b.n	8011b86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011b74:	2301      	movs	r3, #1
 8011b76:	73fb      	strb	r3, [r7, #15]
    break;
 8011b78:	e005      	b.n	8011b86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011b7a:	2303      	movs	r3, #3
 8011b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8011b7e:	e002      	b.n	8011b86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011b80:	2303      	movs	r3, #3
 8011b82:	73fb      	strb	r3, [r7, #15]
    break;
 8011b84:	bf00      	nop
  }
  return usb_status;
 8011b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3714      	adds	r7, #20
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b92:	4770      	bx	lr

08011b94 <__cvt>:
 8011b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b98:	ec57 6b10 	vmov	r6, r7, d0
 8011b9c:	2f00      	cmp	r7, #0
 8011b9e:	460c      	mov	r4, r1
 8011ba0:	4619      	mov	r1, r3
 8011ba2:	463b      	mov	r3, r7
 8011ba4:	bfbb      	ittet	lt
 8011ba6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8011baa:	461f      	movlt	r7, r3
 8011bac:	2300      	movge	r3, #0
 8011bae:	232d      	movlt	r3, #45	@ 0x2d
 8011bb0:	700b      	strb	r3, [r1, #0]
 8011bb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011bb4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011bb8:	4691      	mov	r9, r2
 8011bba:	f023 0820 	bic.w	r8, r3, #32
 8011bbe:	bfbc      	itt	lt
 8011bc0:	4632      	movlt	r2, r6
 8011bc2:	4616      	movlt	r6, r2
 8011bc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011bc8:	d005      	beq.n	8011bd6 <__cvt+0x42>
 8011bca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011bce:	d100      	bne.n	8011bd2 <__cvt+0x3e>
 8011bd0:	3401      	adds	r4, #1
 8011bd2:	2102      	movs	r1, #2
 8011bd4:	e000      	b.n	8011bd8 <__cvt+0x44>
 8011bd6:	2103      	movs	r1, #3
 8011bd8:	ab03      	add	r3, sp, #12
 8011bda:	9301      	str	r3, [sp, #4]
 8011bdc:	ab02      	add	r3, sp, #8
 8011bde:	9300      	str	r3, [sp, #0]
 8011be0:	ec47 6b10 	vmov	d0, r6, r7
 8011be4:	4653      	mov	r3, sl
 8011be6:	4622      	mov	r2, r4
 8011be8:	f000 fea2 	bl	8012930 <_dtoa_r>
 8011bec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011bf0:	4605      	mov	r5, r0
 8011bf2:	d119      	bne.n	8011c28 <__cvt+0x94>
 8011bf4:	f019 0f01 	tst.w	r9, #1
 8011bf8:	d00e      	beq.n	8011c18 <__cvt+0x84>
 8011bfa:	eb00 0904 	add.w	r9, r0, r4
 8011bfe:	2200      	movs	r2, #0
 8011c00:	2300      	movs	r3, #0
 8011c02:	4630      	mov	r0, r6
 8011c04:	4639      	mov	r1, r7
 8011c06:	f7ee ff87 	bl	8000b18 <__aeabi_dcmpeq>
 8011c0a:	b108      	cbz	r0, 8011c10 <__cvt+0x7c>
 8011c0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8011c10:	2230      	movs	r2, #48	@ 0x30
 8011c12:	9b03      	ldr	r3, [sp, #12]
 8011c14:	454b      	cmp	r3, r9
 8011c16:	d31e      	bcc.n	8011c56 <__cvt+0xc2>
 8011c18:	9b03      	ldr	r3, [sp, #12]
 8011c1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011c1c:	1b5b      	subs	r3, r3, r5
 8011c1e:	4628      	mov	r0, r5
 8011c20:	6013      	str	r3, [r2, #0]
 8011c22:	b004      	add	sp, #16
 8011c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011c2c:	eb00 0904 	add.w	r9, r0, r4
 8011c30:	d1e5      	bne.n	8011bfe <__cvt+0x6a>
 8011c32:	7803      	ldrb	r3, [r0, #0]
 8011c34:	2b30      	cmp	r3, #48	@ 0x30
 8011c36:	d10a      	bne.n	8011c4e <__cvt+0xba>
 8011c38:	2200      	movs	r2, #0
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	4630      	mov	r0, r6
 8011c3e:	4639      	mov	r1, r7
 8011c40:	f7ee ff6a 	bl	8000b18 <__aeabi_dcmpeq>
 8011c44:	b918      	cbnz	r0, 8011c4e <__cvt+0xba>
 8011c46:	f1c4 0401 	rsb	r4, r4, #1
 8011c4a:	f8ca 4000 	str.w	r4, [sl]
 8011c4e:	f8da 3000 	ldr.w	r3, [sl]
 8011c52:	4499      	add	r9, r3
 8011c54:	e7d3      	b.n	8011bfe <__cvt+0x6a>
 8011c56:	1c59      	adds	r1, r3, #1
 8011c58:	9103      	str	r1, [sp, #12]
 8011c5a:	701a      	strb	r2, [r3, #0]
 8011c5c:	e7d9      	b.n	8011c12 <__cvt+0x7e>

08011c5e <__exponent>:
 8011c5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c60:	2900      	cmp	r1, #0
 8011c62:	bfba      	itte	lt
 8011c64:	4249      	neglt	r1, r1
 8011c66:	232d      	movlt	r3, #45	@ 0x2d
 8011c68:	232b      	movge	r3, #43	@ 0x2b
 8011c6a:	2909      	cmp	r1, #9
 8011c6c:	7002      	strb	r2, [r0, #0]
 8011c6e:	7043      	strb	r3, [r0, #1]
 8011c70:	dd29      	ble.n	8011cc6 <__exponent+0x68>
 8011c72:	f10d 0307 	add.w	r3, sp, #7
 8011c76:	461d      	mov	r5, r3
 8011c78:	270a      	movs	r7, #10
 8011c7a:	461a      	mov	r2, r3
 8011c7c:	fbb1 f6f7 	udiv	r6, r1, r7
 8011c80:	fb07 1416 	mls	r4, r7, r6, r1
 8011c84:	3430      	adds	r4, #48	@ 0x30
 8011c86:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011c8a:	460c      	mov	r4, r1
 8011c8c:	2c63      	cmp	r4, #99	@ 0x63
 8011c8e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8011c92:	4631      	mov	r1, r6
 8011c94:	dcf1      	bgt.n	8011c7a <__exponent+0x1c>
 8011c96:	3130      	adds	r1, #48	@ 0x30
 8011c98:	1e94      	subs	r4, r2, #2
 8011c9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011c9e:	1c41      	adds	r1, r0, #1
 8011ca0:	4623      	mov	r3, r4
 8011ca2:	42ab      	cmp	r3, r5
 8011ca4:	d30a      	bcc.n	8011cbc <__exponent+0x5e>
 8011ca6:	f10d 0309 	add.w	r3, sp, #9
 8011caa:	1a9b      	subs	r3, r3, r2
 8011cac:	42ac      	cmp	r4, r5
 8011cae:	bf88      	it	hi
 8011cb0:	2300      	movhi	r3, #0
 8011cb2:	3302      	adds	r3, #2
 8011cb4:	4403      	add	r3, r0
 8011cb6:	1a18      	subs	r0, r3, r0
 8011cb8:	b003      	add	sp, #12
 8011cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cbc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011cc0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011cc4:	e7ed      	b.n	8011ca2 <__exponent+0x44>
 8011cc6:	2330      	movs	r3, #48	@ 0x30
 8011cc8:	3130      	adds	r1, #48	@ 0x30
 8011cca:	7083      	strb	r3, [r0, #2]
 8011ccc:	70c1      	strb	r1, [r0, #3]
 8011cce:	1d03      	adds	r3, r0, #4
 8011cd0:	e7f1      	b.n	8011cb6 <__exponent+0x58>
	...

08011cd4 <_printf_float>:
 8011cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cd8:	b08d      	sub	sp, #52	@ 0x34
 8011cda:	460c      	mov	r4, r1
 8011cdc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011ce0:	4616      	mov	r6, r2
 8011ce2:	461f      	mov	r7, r3
 8011ce4:	4605      	mov	r5, r0
 8011ce6:	f000 fd4d 	bl	8012784 <_localeconv_r>
 8011cea:	6803      	ldr	r3, [r0, #0]
 8011cec:	9304      	str	r3, [sp, #16]
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f7ee fae6 	bl	80002c0 <strlen>
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8011cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8011cfc:	9005      	str	r0, [sp, #20]
 8011cfe:	3307      	adds	r3, #7
 8011d00:	f023 0307 	bic.w	r3, r3, #7
 8011d04:	f103 0208 	add.w	r2, r3, #8
 8011d08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011d0c:	f8d4 b000 	ldr.w	fp, [r4]
 8011d10:	f8c8 2000 	str.w	r2, [r8]
 8011d14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011d18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011d1c:	9307      	str	r3, [sp, #28]
 8011d1e:	f8cd 8018 	str.w	r8, [sp, #24]
 8011d22:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011d26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011d2a:	4b9c      	ldr	r3, [pc, #624]	@ (8011f9c <_printf_float+0x2c8>)
 8011d2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011d30:	f7ee ff24 	bl	8000b7c <__aeabi_dcmpun>
 8011d34:	bb70      	cbnz	r0, 8011d94 <_printf_float+0xc0>
 8011d36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011d3a:	4b98      	ldr	r3, [pc, #608]	@ (8011f9c <_printf_float+0x2c8>)
 8011d3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011d40:	f7ee fefe 	bl	8000b40 <__aeabi_dcmple>
 8011d44:	bb30      	cbnz	r0, 8011d94 <_printf_float+0xc0>
 8011d46:	2200      	movs	r2, #0
 8011d48:	2300      	movs	r3, #0
 8011d4a:	4640      	mov	r0, r8
 8011d4c:	4649      	mov	r1, r9
 8011d4e:	f7ee feed 	bl	8000b2c <__aeabi_dcmplt>
 8011d52:	b110      	cbz	r0, 8011d5a <_printf_float+0x86>
 8011d54:	232d      	movs	r3, #45	@ 0x2d
 8011d56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011d5a:	4a91      	ldr	r2, [pc, #580]	@ (8011fa0 <_printf_float+0x2cc>)
 8011d5c:	4b91      	ldr	r3, [pc, #580]	@ (8011fa4 <_printf_float+0x2d0>)
 8011d5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011d62:	bf94      	ite	ls
 8011d64:	4690      	movls	r8, r2
 8011d66:	4698      	movhi	r8, r3
 8011d68:	2303      	movs	r3, #3
 8011d6a:	6123      	str	r3, [r4, #16]
 8011d6c:	f02b 0304 	bic.w	r3, fp, #4
 8011d70:	6023      	str	r3, [r4, #0]
 8011d72:	f04f 0900 	mov.w	r9, #0
 8011d76:	9700      	str	r7, [sp, #0]
 8011d78:	4633      	mov	r3, r6
 8011d7a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011d7c:	4621      	mov	r1, r4
 8011d7e:	4628      	mov	r0, r5
 8011d80:	f000 fa7c 	bl	801227c <_printf_common>
 8011d84:	3001      	adds	r0, #1
 8011d86:	f040 808d 	bne.w	8011ea4 <_printf_float+0x1d0>
 8011d8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011d8e:	b00d      	add	sp, #52	@ 0x34
 8011d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d94:	4642      	mov	r2, r8
 8011d96:	464b      	mov	r3, r9
 8011d98:	4640      	mov	r0, r8
 8011d9a:	4649      	mov	r1, r9
 8011d9c:	f7ee feee 	bl	8000b7c <__aeabi_dcmpun>
 8011da0:	b140      	cbz	r0, 8011db4 <_printf_float+0xe0>
 8011da2:	464b      	mov	r3, r9
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	bfbc      	itt	lt
 8011da8:	232d      	movlt	r3, #45	@ 0x2d
 8011daa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011dae:	4a7e      	ldr	r2, [pc, #504]	@ (8011fa8 <_printf_float+0x2d4>)
 8011db0:	4b7e      	ldr	r3, [pc, #504]	@ (8011fac <_printf_float+0x2d8>)
 8011db2:	e7d4      	b.n	8011d5e <_printf_float+0x8a>
 8011db4:	6863      	ldr	r3, [r4, #4]
 8011db6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011dba:	9206      	str	r2, [sp, #24]
 8011dbc:	1c5a      	adds	r2, r3, #1
 8011dbe:	d13b      	bne.n	8011e38 <_printf_float+0x164>
 8011dc0:	2306      	movs	r3, #6
 8011dc2:	6063      	str	r3, [r4, #4]
 8011dc4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011dc8:	2300      	movs	r3, #0
 8011dca:	6022      	str	r2, [r4, #0]
 8011dcc:	9303      	str	r3, [sp, #12]
 8011dce:	ab0a      	add	r3, sp, #40	@ 0x28
 8011dd0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011dd4:	ab09      	add	r3, sp, #36	@ 0x24
 8011dd6:	9300      	str	r3, [sp, #0]
 8011dd8:	6861      	ldr	r1, [r4, #4]
 8011dda:	ec49 8b10 	vmov	d0, r8, r9
 8011dde:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011de2:	4628      	mov	r0, r5
 8011de4:	f7ff fed6 	bl	8011b94 <__cvt>
 8011de8:	9b06      	ldr	r3, [sp, #24]
 8011dea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011dec:	2b47      	cmp	r3, #71	@ 0x47
 8011dee:	4680      	mov	r8, r0
 8011df0:	d129      	bne.n	8011e46 <_printf_float+0x172>
 8011df2:	1cc8      	adds	r0, r1, #3
 8011df4:	db02      	blt.n	8011dfc <_printf_float+0x128>
 8011df6:	6863      	ldr	r3, [r4, #4]
 8011df8:	4299      	cmp	r1, r3
 8011dfa:	dd41      	ble.n	8011e80 <_printf_float+0x1ac>
 8011dfc:	f1aa 0a02 	sub.w	sl, sl, #2
 8011e00:	fa5f fa8a 	uxtb.w	sl, sl
 8011e04:	3901      	subs	r1, #1
 8011e06:	4652      	mov	r2, sl
 8011e08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011e0c:	9109      	str	r1, [sp, #36]	@ 0x24
 8011e0e:	f7ff ff26 	bl	8011c5e <__exponent>
 8011e12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011e14:	1813      	adds	r3, r2, r0
 8011e16:	2a01      	cmp	r2, #1
 8011e18:	4681      	mov	r9, r0
 8011e1a:	6123      	str	r3, [r4, #16]
 8011e1c:	dc02      	bgt.n	8011e24 <_printf_float+0x150>
 8011e1e:	6822      	ldr	r2, [r4, #0]
 8011e20:	07d2      	lsls	r2, r2, #31
 8011e22:	d501      	bpl.n	8011e28 <_printf_float+0x154>
 8011e24:	3301      	adds	r3, #1
 8011e26:	6123      	str	r3, [r4, #16]
 8011e28:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d0a2      	beq.n	8011d76 <_printf_float+0xa2>
 8011e30:	232d      	movs	r3, #45	@ 0x2d
 8011e32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011e36:	e79e      	b.n	8011d76 <_printf_float+0xa2>
 8011e38:	9a06      	ldr	r2, [sp, #24]
 8011e3a:	2a47      	cmp	r2, #71	@ 0x47
 8011e3c:	d1c2      	bne.n	8011dc4 <_printf_float+0xf0>
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d1c0      	bne.n	8011dc4 <_printf_float+0xf0>
 8011e42:	2301      	movs	r3, #1
 8011e44:	e7bd      	b.n	8011dc2 <_printf_float+0xee>
 8011e46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011e4a:	d9db      	bls.n	8011e04 <_printf_float+0x130>
 8011e4c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011e50:	d118      	bne.n	8011e84 <_printf_float+0x1b0>
 8011e52:	2900      	cmp	r1, #0
 8011e54:	6863      	ldr	r3, [r4, #4]
 8011e56:	dd0b      	ble.n	8011e70 <_printf_float+0x19c>
 8011e58:	6121      	str	r1, [r4, #16]
 8011e5a:	b913      	cbnz	r3, 8011e62 <_printf_float+0x18e>
 8011e5c:	6822      	ldr	r2, [r4, #0]
 8011e5e:	07d0      	lsls	r0, r2, #31
 8011e60:	d502      	bpl.n	8011e68 <_printf_float+0x194>
 8011e62:	3301      	adds	r3, #1
 8011e64:	440b      	add	r3, r1
 8011e66:	6123      	str	r3, [r4, #16]
 8011e68:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011e6a:	f04f 0900 	mov.w	r9, #0
 8011e6e:	e7db      	b.n	8011e28 <_printf_float+0x154>
 8011e70:	b913      	cbnz	r3, 8011e78 <_printf_float+0x1a4>
 8011e72:	6822      	ldr	r2, [r4, #0]
 8011e74:	07d2      	lsls	r2, r2, #31
 8011e76:	d501      	bpl.n	8011e7c <_printf_float+0x1a8>
 8011e78:	3302      	adds	r3, #2
 8011e7a:	e7f4      	b.n	8011e66 <_printf_float+0x192>
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	e7f2      	b.n	8011e66 <_printf_float+0x192>
 8011e80:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011e84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e86:	4299      	cmp	r1, r3
 8011e88:	db05      	blt.n	8011e96 <_printf_float+0x1c2>
 8011e8a:	6823      	ldr	r3, [r4, #0]
 8011e8c:	6121      	str	r1, [r4, #16]
 8011e8e:	07d8      	lsls	r0, r3, #31
 8011e90:	d5ea      	bpl.n	8011e68 <_printf_float+0x194>
 8011e92:	1c4b      	adds	r3, r1, #1
 8011e94:	e7e7      	b.n	8011e66 <_printf_float+0x192>
 8011e96:	2900      	cmp	r1, #0
 8011e98:	bfd4      	ite	le
 8011e9a:	f1c1 0202 	rsble	r2, r1, #2
 8011e9e:	2201      	movgt	r2, #1
 8011ea0:	4413      	add	r3, r2
 8011ea2:	e7e0      	b.n	8011e66 <_printf_float+0x192>
 8011ea4:	6823      	ldr	r3, [r4, #0]
 8011ea6:	055a      	lsls	r2, r3, #21
 8011ea8:	d407      	bmi.n	8011eba <_printf_float+0x1e6>
 8011eaa:	6923      	ldr	r3, [r4, #16]
 8011eac:	4642      	mov	r2, r8
 8011eae:	4631      	mov	r1, r6
 8011eb0:	4628      	mov	r0, r5
 8011eb2:	47b8      	blx	r7
 8011eb4:	3001      	adds	r0, #1
 8011eb6:	d12b      	bne.n	8011f10 <_printf_float+0x23c>
 8011eb8:	e767      	b.n	8011d8a <_printf_float+0xb6>
 8011eba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011ebe:	f240 80dd 	bls.w	801207c <_printf_float+0x3a8>
 8011ec2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	2300      	movs	r3, #0
 8011eca:	f7ee fe25 	bl	8000b18 <__aeabi_dcmpeq>
 8011ece:	2800      	cmp	r0, #0
 8011ed0:	d033      	beq.n	8011f3a <_printf_float+0x266>
 8011ed2:	4a37      	ldr	r2, [pc, #220]	@ (8011fb0 <_printf_float+0x2dc>)
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	4631      	mov	r1, r6
 8011ed8:	4628      	mov	r0, r5
 8011eda:	47b8      	blx	r7
 8011edc:	3001      	adds	r0, #1
 8011ede:	f43f af54 	beq.w	8011d8a <_printf_float+0xb6>
 8011ee2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011ee6:	4543      	cmp	r3, r8
 8011ee8:	db02      	blt.n	8011ef0 <_printf_float+0x21c>
 8011eea:	6823      	ldr	r3, [r4, #0]
 8011eec:	07d8      	lsls	r0, r3, #31
 8011eee:	d50f      	bpl.n	8011f10 <_printf_float+0x23c>
 8011ef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ef4:	4631      	mov	r1, r6
 8011ef6:	4628      	mov	r0, r5
 8011ef8:	47b8      	blx	r7
 8011efa:	3001      	adds	r0, #1
 8011efc:	f43f af45 	beq.w	8011d8a <_printf_float+0xb6>
 8011f00:	f04f 0900 	mov.w	r9, #0
 8011f04:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011f08:	f104 0a1a 	add.w	sl, r4, #26
 8011f0c:	45c8      	cmp	r8, r9
 8011f0e:	dc09      	bgt.n	8011f24 <_printf_float+0x250>
 8011f10:	6823      	ldr	r3, [r4, #0]
 8011f12:	079b      	lsls	r3, r3, #30
 8011f14:	f100 8103 	bmi.w	801211e <_printf_float+0x44a>
 8011f18:	68e0      	ldr	r0, [r4, #12]
 8011f1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f1c:	4298      	cmp	r0, r3
 8011f1e:	bfb8      	it	lt
 8011f20:	4618      	movlt	r0, r3
 8011f22:	e734      	b.n	8011d8e <_printf_float+0xba>
 8011f24:	2301      	movs	r3, #1
 8011f26:	4652      	mov	r2, sl
 8011f28:	4631      	mov	r1, r6
 8011f2a:	4628      	mov	r0, r5
 8011f2c:	47b8      	blx	r7
 8011f2e:	3001      	adds	r0, #1
 8011f30:	f43f af2b 	beq.w	8011d8a <_printf_float+0xb6>
 8011f34:	f109 0901 	add.w	r9, r9, #1
 8011f38:	e7e8      	b.n	8011f0c <_printf_float+0x238>
 8011f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	dc39      	bgt.n	8011fb4 <_printf_float+0x2e0>
 8011f40:	4a1b      	ldr	r2, [pc, #108]	@ (8011fb0 <_printf_float+0x2dc>)
 8011f42:	2301      	movs	r3, #1
 8011f44:	4631      	mov	r1, r6
 8011f46:	4628      	mov	r0, r5
 8011f48:	47b8      	blx	r7
 8011f4a:	3001      	adds	r0, #1
 8011f4c:	f43f af1d 	beq.w	8011d8a <_printf_float+0xb6>
 8011f50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011f54:	ea59 0303 	orrs.w	r3, r9, r3
 8011f58:	d102      	bne.n	8011f60 <_printf_float+0x28c>
 8011f5a:	6823      	ldr	r3, [r4, #0]
 8011f5c:	07d9      	lsls	r1, r3, #31
 8011f5e:	d5d7      	bpl.n	8011f10 <_printf_float+0x23c>
 8011f60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f64:	4631      	mov	r1, r6
 8011f66:	4628      	mov	r0, r5
 8011f68:	47b8      	blx	r7
 8011f6a:	3001      	adds	r0, #1
 8011f6c:	f43f af0d 	beq.w	8011d8a <_printf_float+0xb6>
 8011f70:	f04f 0a00 	mov.w	sl, #0
 8011f74:	f104 0b1a 	add.w	fp, r4, #26
 8011f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f7a:	425b      	negs	r3, r3
 8011f7c:	4553      	cmp	r3, sl
 8011f7e:	dc01      	bgt.n	8011f84 <_printf_float+0x2b0>
 8011f80:	464b      	mov	r3, r9
 8011f82:	e793      	b.n	8011eac <_printf_float+0x1d8>
 8011f84:	2301      	movs	r3, #1
 8011f86:	465a      	mov	r2, fp
 8011f88:	4631      	mov	r1, r6
 8011f8a:	4628      	mov	r0, r5
 8011f8c:	47b8      	blx	r7
 8011f8e:	3001      	adds	r0, #1
 8011f90:	f43f aefb 	beq.w	8011d8a <_printf_float+0xb6>
 8011f94:	f10a 0a01 	add.w	sl, sl, #1
 8011f98:	e7ee      	b.n	8011f78 <_printf_float+0x2a4>
 8011f9a:	bf00      	nop
 8011f9c:	7fefffff 	.word	0x7fefffff
 8011fa0:	080158d0 	.word	0x080158d0
 8011fa4:	080158d4 	.word	0x080158d4
 8011fa8:	080158d8 	.word	0x080158d8
 8011fac:	080158dc 	.word	0x080158dc
 8011fb0:	080158e0 	.word	0x080158e0
 8011fb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011fb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011fba:	4553      	cmp	r3, sl
 8011fbc:	bfa8      	it	ge
 8011fbe:	4653      	movge	r3, sl
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	4699      	mov	r9, r3
 8011fc4:	dc36      	bgt.n	8012034 <_printf_float+0x360>
 8011fc6:	f04f 0b00 	mov.w	fp, #0
 8011fca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011fce:	f104 021a 	add.w	r2, r4, #26
 8011fd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011fd4:	9306      	str	r3, [sp, #24]
 8011fd6:	eba3 0309 	sub.w	r3, r3, r9
 8011fda:	455b      	cmp	r3, fp
 8011fdc:	dc31      	bgt.n	8012042 <_printf_float+0x36e>
 8011fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fe0:	459a      	cmp	sl, r3
 8011fe2:	dc3a      	bgt.n	801205a <_printf_float+0x386>
 8011fe4:	6823      	ldr	r3, [r4, #0]
 8011fe6:	07da      	lsls	r2, r3, #31
 8011fe8:	d437      	bmi.n	801205a <_printf_float+0x386>
 8011fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fec:	ebaa 0903 	sub.w	r9, sl, r3
 8011ff0:	9b06      	ldr	r3, [sp, #24]
 8011ff2:	ebaa 0303 	sub.w	r3, sl, r3
 8011ff6:	4599      	cmp	r9, r3
 8011ff8:	bfa8      	it	ge
 8011ffa:	4699      	movge	r9, r3
 8011ffc:	f1b9 0f00 	cmp.w	r9, #0
 8012000:	dc33      	bgt.n	801206a <_printf_float+0x396>
 8012002:	f04f 0800 	mov.w	r8, #0
 8012006:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801200a:	f104 0b1a 	add.w	fp, r4, #26
 801200e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012010:	ebaa 0303 	sub.w	r3, sl, r3
 8012014:	eba3 0309 	sub.w	r3, r3, r9
 8012018:	4543      	cmp	r3, r8
 801201a:	f77f af79 	ble.w	8011f10 <_printf_float+0x23c>
 801201e:	2301      	movs	r3, #1
 8012020:	465a      	mov	r2, fp
 8012022:	4631      	mov	r1, r6
 8012024:	4628      	mov	r0, r5
 8012026:	47b8      	blx	r7
 8012028:	3001      	adds	r0, #1
 801202a:	f43f aeae 	beq.w	8011d8a <_printf_float+0xb6>
 801202e:	f108 0801 	add.w	r8, r8, #1
 8012032:	e7ec      	b.n	801200e <_printf_float+0x33a>
 8012034:	4642      	mov	r2, r8
 8012036:	4631      	mov	r1, r6
 8012038:	4628      	mov	r0, r5
 801203a:	47b8      	blx	r7
 801203c:	3001      	adds	r0, #1
 801203e:	d1c2      	bne.n	8011fc6 <_printf_float+0x2f2>
 8012040:	e6a3      	b.n	8011d8a <_printf_float+0xb6>
 8012042:	2301      	movs	r3, #1
 8012044:	4631      	mov	r1, r6
 8012046:	4628      	mov	r0, r5
 8012048:	9206      	str	r2, [sp, #24]
 801204a:	47b8      	blx	r7
 801204c:	3001      	adds	r0, #1
 801204e:	f43f ae9c 	beq.w	8011d8a <_printf_float+0xb6>
 8012052:	9a06      	ldr	r2, [sp, #24]
 8012054:	f10b 0b01 	add.w	fp, fp, #1
 8012058:	e7bb      	b.n	8011fd2 <_printf_float+0x2fe>
 801205a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801205e:	4631      	mov	r1, r6
 8012060:	4628      	mov	r0, r5
 8012062:	47b8      	blx	r7
 8012064:	3001      	adds	r0, #1
 8012066:	d1c0      	bne.n	8011fea <_printf_float+0x316>
 8012068:	e68f      	b.n	8011d8a <_printf_float+0xb6>
 801206a:	9a06      	ldr	r2, [sp, #24]
 801206c:	464b      	mov	r3, r9
 801206e:	4442      	add	r2, r8
 8012070:	4631      	mov	r1, r6
 8012072:	4628      	mov	r0, r5
 8012074:	47b8      	blx	r7
 8012076:	3001      	adds	r0, #1
 8012078:	d1c3      	bne.n	8012002 <_printf_float+0x32e>
 801207a:	e686      	b.n	8011d8a <_printf_float+0xb6>
 801207c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012080:	f1ba 0f01 	cmp.w	sl, #1
 8012084:	dc01      	bgt.n	801208a <_printf_float+0x3b6>
 8012086:	07db      	lsls	r3, r3, #31
 8012088:	d536      	bpl.n	80120f8 <_printf_float+0x424>
 801208a:	2301      	movs	r3, #1
 801208c:	4642      	mov	r2, r8
 801208e:	4631      	mov	r1, r6
 8012090:	4628      	mov	r0, r5
 8012092:	47b8      	blx	r7
 8012094:	3001      	adds	r0, #1
 8012096:	f43f ae78 	beq.w	8011d8a <_printf_float+0xb6>
 801209a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801209e:	4631      	mov	r1, r6
 80120a0:	4628      	mov	r0, r5
 80120a2:	47b8      	blx	r7
 80120a4:	3001      	adds	r0, #1
 80120a6:	f43f ae70 	beq.w	8011d8a <_printf_float+0xb6>
 80120aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80120ae:	2200      	movs	r2, #0
 80120b0:	2300      	movs	r3, #0
 80120b2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80120b6:	f7ee fd2f 	bl	8000b18 <__aeabi_dcmpeq>
 80120ba:	b9c0      	cbnz	r0, 80120ee <_printf_float+0x41a>
 80120bc:	4653      	mov	r3, sl
 80120be:	f108 0201 	add.w	r2, r8, #1
 80120c2:	4631      	mov	r1, r6
 80120c4:	4628      	mov	r0, r5
 80120c6:	47b8      	blx	r7
 80120c8:	3001      	adds	r0, #1
 80120ca:	d10c      	bne.n	80120e6 <_printf_float+0x412>
 80120cc:	e65d      	b.n	8011d8a <_printf_float+0xb6>
 80120ce:	2301      	movs	r3, #1
 80120d0:	465a      	mov	r2, fp
 80120d2:	4631      	mov	r1, r6
 80120d4:	4628      	mov	r0, r5
 80120d6:	47b8      	blx	r7
 80120d8:	3001      	adds	r0, #1
 80120da:	f43f ae56 	beq.w	8011d8a <_printf_float+0xb6>
 80120de:	f108 0801 	add.w	r8, r8, #1
 80120e2:	45d0      	cmp	r8, sl
 80120e4:	dbf3      	blt.n	80120ce <_printf_float+0x3fa>
 80120e6:	464b      	mov	r3, r9
 80120e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80120ec:	e6df      	b.n	8011eae <_printf_float+0x1da>
 80120ee:	f04f 0800 	mov.w	r8, #0
 80120f2:	f104 0b1a 	add.w	fp, r4, #26
 80120f6:	e7f4      	b.n	80120e2 <_printf_float+0x40e>
 80120f8:	2301      	movs	r3, #1
 80120fa:	4642      	mov	r2, r8
 80120fc:	e7e1      	b.n	80120c2 <_printf_float+0x3ee>
 80120fe:	2301      	movs	r3, #1
 8012100:	464a      	mov	r2, r9
 8012102:	4631      	mov	r1, r6
 8012104:	4628      	mov	r0, r5
 8012106:	47b8      	blx	r7
 8012108:	3001      	adds	r0, #1
 801210a:	f43f ae3e 	beq.w	8011d8a <_printf_float+0xb6>
 801210e:	f108 0801 	add.w	r8, r8, #1
 8012112:	68e3      	ldr	r3, [r4, #12]
 8012114:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012116:	1a5b      	subs	r3, r3, r1
 8012118:	4543      	cmp	r3, r8
 801211a:	dcf0      	bgt.n	80120fe <_printf_float+0x42a>
 801211c:	e6fc      	b.n	8011f18 <_printf_float+0x244>
 801211e:	f04f 0800 	mov.w	r8, #0
 8012122:	f104 0919 	add.w	r9, r4, #25
 8012126:	e7f4      	b.n	8012112 <_printf_float+0x43e>

08012128 <malloc>:
 8012128:	4b02      	ldr	r3, [pc, #8]	@ (8012134 <malloc+0xc>)
 801212a:	4601      	mov	r1, r0
 801212c:	6818      	ldr	r0, [r3, #0]
 801212e:	f000 b825 	b.w	801217c <_malloc_r>
 8012132:	bf00      	nop
 8012134:	200000ec 	.word	0x200000ec

08012138 <sbrk_aligned>:
 8012138:	b570      	push	{r4, r5, r6, lr}
 801213a:	4e0f      	ldr	r6, [pc, #60]	@ (8012178 <sbrk_aligned+0x40>)
 801213c:	460c      	mov	r4, r1
 801213e:	6831      	ldr	r1, [r6, #0]
 8012140:	4605      	mov	r5, r0
 8012142:	b911      	cbnz	r1, 801214a <sbrk_aligned+0x12>
 8012144:	f000 fb22 	bl	801278c <_sbrk_r>
 8012148:	6030      	str	r0, [r6, #0]
 801214a:	4621      	mov	r1, r4
 801214c:	4628      	mov	r0, r5
 801214e:	f000 fb1d 	bl	801278c <_sbrk_r>
 8012152:	1c43      	adds	r3, r0, #1
 8012154:	d103      	bne.n	801215e <sbrk_aligned+0x26>
 8012156:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801215a:	4620      	mov	r0, r4
 801215c:	bd70      	pop	{r4, r5, r6, pc}
 801215e:	1cc4      	adds	r4, r0, #3
 8012160:	f024 0403 	bic.w	r4, r4, #3
 8012164:	42a0      	cmp	r0, r4
 8012166:	d0f8      	beq.n	801215a <sbrk_aligned+0x22>
 8012168:	1a21      	subs	r1, r4, r0
 801216a:	4628      	mov	r0, r5
 801216c:	f000 fb0e 	bl	801278c <_sbrk_r>
 8012170:	3001      	adds	r0, #1
 8012172:	d1f2      	bne.n	801215a <sbrk_aligned+0x22>
 8012174:	e7ef      	b.n	8012156 <sbrk_aligned+0x1e>
 8012176:	bf00      	nop
 8012178:	200015c4 	.word	0x200015c4

0801217c <_malloc_r>:
 801217c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012180:	1ccd      	adds	r5, r1, #3
 8012182:	f025 0503 	bic.w	r5, r5, #3
 8012186:	3508      	adds	r5, #8
 8012188:	2d0c      	cmp	r5, #12
 801218a:	bf38      	it	cc
 801218c:	250c      	movcc	r5, #12
 801218e:	2d00      	cmp	r5, #0
 8012190:	4606      	mov	r6, r0
 8012192:	db01      	blt.n	8012198 <_malloc_r+0x1c>
 8012194:	42a9      	cmp	r1, r5
 8012196:	d904      	bls.n	80121a2 <_malloc_r+0x26>
 8012198:	230c      	movs	r3, #12
 801219a:	6033      	str	r3, [r6, #0]
 801219c:	2000      	movs	r0, #0
 801219e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012278 <_malloc_r+0xfc>
 80121a6:	f000 f9f7 	bl	8012598 <__malloc_lock>
 80121aa:	f8d8 3000 	ldr.w	r3, [r8]
 80121ae:	461c      	mov	r4, r3
 80121b0:	bb44      	cbnz	r4, 8012204 <_malloc_r+0x88>
 80121b2:	4629      	mov	r1, r5
 80121b4:	4630      	mov	r0, r6
 80121b6:	f7ff ffbf 	bl	8012138 <sbrk_aligned>
 80121ba:	1c43      	adds	r3, r0, #1
 80121bc:	4604      	mov	r4, r0
 80121be:	d158      	bne.n	8012272 <_malloc_r+0xf6>
 80121c0:	f8d8 4000 	ldr.w	r4, [r8]
 80121c4:	4627      	mov	r7, r4
 80121c6:	2f00      	cmp	r7, #0
 80121c8:	d143      	bne.n	8012252 <_malloc_r+0xd6>
 80121ca:	2c00      	cmp	r4, #0
 80121cc:	d04b      	beq.n	8012266 <_malloc_r+0xea>
 80121ce:	6823      	ldr	r3, [r4, #0]
 80121d0:	4639      	mov	r1, r7
 80121d2:	4630      	mov	r0, r6
 80121d4:	eb04 0903 	add.w	r9, r4, r3
 80121d8:	f000 fad8 	bl	801278c <_sbrk_r>
 80121dc:	4581      	cmp	r9, r0
 80121de:	d142      	bne.n	8012266 <_malloc_r+0xea>
 80121e0:	6821      	ldr	r1, [r4, #0]
 80121e2:	1a6d      	subs	r5, r5, r1
 80121e4:	4629      	mov	r1, r5
 80121e6:	4630      	mov	r0, r6
 80121e8:	f7ff ffa6 	bl	8012138 <sbrk_aligned>
 80121ec:	3001      	adds	r0, #1
 80121ee:	d03a      	beq.n	8012266 <_malloc_r+0xea>
 80121f0:	6823      	ldr	r3, [r4, #0]
 80121f2:	442b      	add	r3, r5
 80121f4:	6023      	str	r3, [r4, #0]
 80121f6:	f8d8 3000 	ldr.w	r3, [r8]
 80121fa:	685a      	ldr	r2, [r3, #4]
 80121fc:	bb62      	cbnz	r2, 8012258 <_malloc_r+0xdc>
 80121fe:	f8c8 7000 	str.w	r7, [r8]
 8012202:	e00f      	b.n	8012224 <_malloc_r+0xa8>
 8012204:	6822      	ldr	r2, [r4, #0]
 8012206:	1b52      	subs	r2, r2, r5
 8012208:	d420      	bmi.n	801224c <_malloc_r+0xd0>
 801220a:	2a0b      	cmp	r2, #11
 801220c:	d917      	bls.n	801223e <_malloc_r+0xc2>
 801220e:	1961      	adds	r1, r4, r5
 8012210:	42a3      	cmp	r3, r4
 8012212:	6025      	str	r5, [r4, #0]
 8012214:	bf18      	it	ne
 8012216:	6059      	strne	r1, [r3, #4]
 8012218:	6863      	ldr	r3, [r4, #4]
 801221a:	bf08      	it	eq
 801221c:	f8c8 1000 	streq.w	r1, [r8]
 8012220:	5162      	str	r2, [r4, r5]
 8012222:	604b      	str	r3, [r1, #4]
 8012224:	4630      	mov	r0, r6
 8012226:	f000 f9bd 	bl	80125a4 <__malloc_unlock>
 801222a:	f104 000b 	add.w	r0, r4, #11
 801222e:	1d23      	adds	r3, r4, #4
 8012230:	f020 0007 	bic.w	r0, r0, #7
 8012234:	1ac2      	subs	r2, r0, r3
 8012236:	bf1c      	itt	ne
 8012238:	1a1b      	subne	r3, r3, r0
 801223a:	50a3      	strne	r3, [r4, r2]
 801223c:	e7af      	b.n	801219e <_malloc_r+0x22>
 801223e:	6862      	ldr	r2, [r4, #4]
 8012240:	42a3      	cmp	r3, r4
 8012242:	bf0c      	ite	eq
 8012244:	f8c8 2000 	streq.w	r2, [r8]
 8012248:	605a      	strne	r2, [r3, #4]
 801224a:	e7eb      	b.n	8012224 <_malloc_r+0xa8>
 801224c:	4623      	mov	r3, r4
 801224e:	6864      	ldr	r4, [r4, #4]
 8012250:	e7ae      	b.n	80121b0 <_malloc_r+0x34>
 8012252:	463c      	mov	r4, r7
 8012254:	687f      	ldr	r7, [r7, #4]
 8012256:	e7b6      	b.n	80121c6 <_malloc_r+0x4a>
 8012258:	461a      	mov	r2, r3
 801225a:	685b      	ldr	r3, [r3, #4]
 801225c:	42a3      	cmp	r3, r4
 801225e:	d1fb      	bne.n	8012258 <_malloc_r+0xdc>
 8012260:	2300      	movs	r3, #0
 8012262:	6053      	str	r3, [r2, #4]
 8012264:	e7de      	b.n	8012224 <_malloc_r+0xa8>
 8012266:	230c      	movs	r3, #12
 8012268:	6033      	str	r3, [r6, #0]
 801226a:	4630      	mov	r0, r6
 801226c:	f000 f99a 	bl	80125a4 <__malloc_unlock>
 8012270:	e794      	b.n	801219c <_malloc_r+0x20>
 8012272:	6005      	str	r5, [r0, #0]
 8012274:	e7d6      	b.n	8012224 <_malloc_r+0xa8>
 8012276:	bf00      	nop
 8012278:	200015c8 	.word	0x200015c8

0801227c <_printf_common>:
 801227c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012280:	4616      	mov	r6, r2
 8012282:	4698      	mov	r8, r3
 8012284:	688a      	ldr	r2, [r1, #8]
 8012286:	690b      	ldr	r3, [r1, #16]
 8012288:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801228c:	4293      	cmp	r3, r2
 801228e:	bfb8      	it	lt
 8012290:	4613      	movlt	r3, r2
 8012292:	6033      	str	r3, [r6, #0]
 8012294:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012298:	4607      	mov	r7, r0
 801229a:	460c      	mov	r4, r1
 801229c:	b10a      	cbz	r2, 80122a2 <_printf_common+0x26>
 801229e:	3301      	adds	r3, #1
 80122a0:	6033      	str	r3, [r6, #0]
 80122a2:	6823      	ldr	r3, [r4, #0]
 80122a4:	0699      	lsls	r1, r3, #26
 80122a6:	bf42      	ittt	mi
 80122a8:	6833      	ldrmi	r3, [r6, #0]
 80122aa:	3302      	addmi	r3, #2
 80122ac:	6033      	strmi	r3, [r6, #0]
 80122ae:	6825      	ldr	r5, [r4, #0]
 80122b0:	f015 0506 	ands.w	r5, r5, #6
 80122b4:	d106      	bne.n	80122c4 <_printf_common+0x48>
 80122b6:	f104 0a19 	add.w	sl, r4, #25
 80122ba:	68e3      	ldr	r3, [r4, #12]
 80122bc:	6832      	ldr	r2, [r6, #0]
 80122be:	1a9b      	subs	r3, r3, r2
 80122c0:	42ab      	cmp	r3, r5
 80122c2:	dc26      	bgt.n	8012312 <_printf_common+0x96>
 80122c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80122c8:	6822      	ldr	r2, [r4, #0]
 80122ca:	3b00      	subs	r3, #0
 80122cc:	bf18      	it	ne
 80122ce:	2301      	movne	r3, #1
 80122d0:	0692      	lsls	r2, r2, #26
 80122d2:	d42b      	bmi.n	801232c <_printf_common+0xb0>
 80122d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80122d8:	4641      	mov	r1, r8
 80122da:	4638      	mov	r0, r7
 80122dc:	47c8      	blx	r9
 80122de:	3001      	adds	r0, #1
 80122e0:	d01e      	beq.n	8012320 <_printf_common+0xa4>
 80122e2:	6823      	ldr	r3, [r4, #0]
 80122e4:	6922      	ldr	r2, [r4, #16]
 80122e6:	f003 0306 	and.w	r3, r3, #6
 80122ea:	2b04      	cmp	r3, #4
 80122ec:	bf02      	ittt	eq
 80122ee:	68e5      	ldreq	r5, [r4, #12]
 80122f0:	6833      	ldreq	r3, [r6, #0]
 80122f2:	1aed      	subeq	r5, r5, r3
 80122f4:	68a3      	ldr	r3, [r4, #8]
 80122f6:	bf0c      	ite	eq
 80122f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80122fc:	2500      	movne	r5, #0
 80122fe:	4293      	cmp	r3, r2
 8012300:	bfc4      	itt	gt
 8012302:	1a9b      	subgt	r3, r3, r2
 8012304:	18ed      	addgt	r5, r5, r3
 8012306:	2600      	movs	r6, #0
 8012308:	341a      	adds	r4, #26
 801230a:	42b5      	cmp	r5, r6
 801230c:	d11a      	bne.n	8012344 <_printf_common+0xc8>
 801230e:	2000      	movs	r0, #0
 8012310:	e008      	b.n	8012324 <_printf_common+0xa8>
 8012312:	2301      	movs	r3, #1
 8012314:	4652      	mov	r2, sl
 8012316:	4641      	mov	r1, r8
 8012318:	4638      	mov	r0, r7
 801231a:	47c8      	blx	r9
 801231c:	3001      	adds	r0, #1
 801231e:	d103      	bne.n	8012328 <_printf_common+0xac>
 8012320:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012328:	3501      	adds	r5, #1
 801232a:	e7c6      	b.n	80122ba <_printf_common+0x3e>
 801232c:	18e1      	adds	r1, r4, r3
 801232e:	1c5a      	adds	r2, r3, #1
 8012330:	2030      	movs	r0, #48	@ 0x30
 8012332:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012336:	4422      	add	r2, r4
 8012338:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801233c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012340:	3302      	adds	r3, #2
 8012342:	e7c7      	b.n	80122d4 <_printf_common+0x58>
 8012344:	2301      	movs	r3, #1
 8012346:	4622      	mov	r2, r4
 8012348:	4641      	mov	r1, r8
 801234a:	4638      	mov	r0, r7
 801234c:	47c8      	blx	r9
 801234e:	3001      	adds	r0, #1
 8012350:	d0e6      	beq.n	8012320 <_printf_common+0xa4>
 8012352:	3601      	adds	r6, #1
 8012354:	e7d9      	b.n	801230a <_printf_common+0x8e>
	...

08012358 <_printf_i>:
 8012358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801235c:	7e0f      	ldrb	r7, [r1, #24]
 801235e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012360:	2f78      	cmp	r7, #120	@ 0x78
 8012362:	4691      	mov	r9, r2
 8012364:	4680      	mov	r8, r0
 8012366:	460c      	mov	r4, r1
 8012368:	469a      	mov	sl, r3
 801236a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801236e:	d807      	bhi.n	8012380 <_printf_i+0x28>
 8012370:	2f62      	cmp	r7, #98	@ 0x62
 8012372:	d80a      	bhi.n	801238a <_printf_i+0x32>
 8012374:	2f00      	cmp	r7, #0
 8012376:	f000 80d2 	beq.w	801251e <_printf_i+0x1c6>
 801237a:	2f58      	cmp	r7, #88	@ 0x58
 801237c:	f000 80b9 	beq.w	80124f2 <_printf_i+0x19a>
 8012380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012384:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012388:	e03a      	b.n	8012400 <_printf_i+0xa8>
 801238a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801238e:	2b15      	cmp	r3, #21
 8012390:	d8f6      	bhi.n	8012380 <_printf_i+0x28>
 8012392:	a101      	add	r1, pc, #4	@ (adr r1, 8012398 <_printf_i+0x40>)
 8012394:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012398:	080123f1 	.word	0x080123f1
 801239c:	08012405 	.word	0x08012405
 80123a0:	08012381 	.word	0x08012381
 80123a4:	08012381 	.word	0x08012381
 80123a8:	08012381 	.word	0x08012381
 80123ac:	08012381 	.word	0x08012381
 80123b0:	08012405 	.word	0x08012405
 80123b4:	08012381 	.word	0x08012381
 80123b8:	08012381 	.word	0x08012381
 80123bc:	08012381 	.word	0x08012381
 80123c0:	08012381 	.word	0x08012381
 80123c4:	08012505 	.word	0x08012505
 80123c8:	0801242f 	.word	0x0801242f
 80123cc:	080124bf 	.word	0x080124bf
 80123d0:	08012381 	.word	0x08012381
 80123d4:	08012381 	.word	0x08012381
 80123d8:	08012527 	.word	0x08012527
 80123dc:	08012381 	.word	0x08012381
 80123e0:	0801242f 	.word	0x0801242f
 80123e4:	08012381 	.word	0x08012381
 80123e8:	08012381 	.word	0x08012381
 80123ec:	080124c7 	.word	0x080124c7
 80123f0:	6833      	ldr	r3, [r6, #0]
 80123f2:	1d1a      	adds	r2, r3, #4
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	6032      	str	r2, [r6, #0]
 80123f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80123fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012400:	2301      	movs	r3, #1
 8012402:	e09d      	b.n	8012540 <_printf_i+0x1e8>
 8012404:	6833      	ldr	r3, [r6, #0]
 8012406:	6820      	ldr	r0, [r4, #0]
 8012408:	1d19      	adds	r1, r3, #4
 801240a:	6031      	str	r1, [r6, #0]
 801240c:	0606      	lsls	r6, r0, #24
 801240e:	d501      	bpl.n	8012414 <_printf_i+0xbc>
 8012410:	681d      	ldr	r5, [r3, #0]
 8012412:	e003      	b.n	801241c <_printf_i+0xc4>
 8012414:	0645      	lsls	r5, r0, #25
 8012416:	d5fb      	bpl.n	8012410 <_printf_i+0xb8>
 8012418:	f9b3 5000 	ldrsh.w	r5, [r3]
 801241c:	2d00      	cmp	r5, #0
 801241e:	da03      	bge.n	8012428 <_printf_i+0xd0>
 8012420:	232d      	movs	r3, #45	@ 0x2d
 8012422:	426d      	negs	r5, r5
 8012424:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012428:	4859      	ldr	r0, [pc, #356]	@ (8012590 <_printf_i+0x238>)
 801242a:	230a      	movs	r3, #10
 801242c:	e011      	b.n	8012452 <_printf_i+0xfa>
 801242e:	6821      	ldr	r1, [r4, #0]
 8012430:	6833      	ldr	r3, [r6, #0]
 8012432:	0608      	lsls	r0, r1, #24
 8012434:	f853 5b04 	ldr.w	r5, [r3], #4
 8012438:	d402      	bmi.n	8012440 <_printf_i+0xe8>
 801243a:	0649      	lsls	r1, r1, #25
 801243c:	bf48      	it	mi
 801243e:	b2ad      	uxthmi	r5, r5
 8012440:	2f6f      	cmp	r7, #111	@ 0x6f
 8012442:	4853      	ldr	r0, [pc, #332]	@ (8012590 <_printf_i+0x238>)
 8012444:	6033      	str	r3, [r6, #0]
 8012446:	bf14      	ite	ne
 8012448:	230a      	movne	r3, #10
 801244a:	2308      	moveq	r3, #8
 801244c:	2100      	movs	r1, #0
 801244e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012452:	6866      	ldr	r6, [r4, #4]
 8012454:	60a6      	str	r6, [r4, #8]
 8012456:	2e00      	cmp	r6, #0
 8012458:	bfa2      	ittt	ge
 801245a:	6821      	ldrge	r1, [r4, #0]
 801245c:	f021 0104 	bicge.w	r1, r1, #4
 8012460:	6021      	strge	r1, [r4, #0]
 8012462:	b90d      	cbnz	r5, 8012468 <_printf_i+0x110>
 8012464:	2e00      	cmp	r6, #0
 8012466:	d04b      	beq.n	8012500 <_printf_i+0x1a8>
 8012468:	4616      	mov	r6, r2
 801246a:	fbb5 f1f3 	udiv	r1, r5, r3
 801246e:	fb03 5711 	mls	r7, r3, r1, r5
 8012472:	5dc7      	ldrb	r7, [r0, r7]
 8012474:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012478:	462f      	mov	r7, r5
 801247a:	42bb      	cmp	r3, r7
 801247c:	460d      	mov	r5, r1
 801247e:	d9f4      	bls.n	801246a <_printf_i+0x112>
 8012480:	2b08      	cmp	r3, #8
 8012482:	d10b      	bne.n	801249c <_printf_i+0x144>
 8012484:	6823      	ldr	r3, [r4, #0]
 8012486:	07df      	lsls	r7, r3, #31
 8012488:	d508      	bpl.n	801249c <_printf_i+0x144>
 801248a:	6923      	ldr	r3, [r4, #16]
 801248c:	6861      	ldr	r1, [r4, #4]
 801248e:	4299      	cmp	r1, r3
 8012490:	bfde      	ittt	le
 8012492:	2330      	movle	r3, #48	@ 0x30
 8012494:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012498:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801249c:	1b92      	subs	r2, r2, r6
 801249e:	6122      	str	r2, [r4, #16]
 80124a0:	f8cd a000 	str.w	sl, [sp]
 80124a4:	464b      	mov	r3, r9
 80124a6:	aa03      	add	r2, sp, #12
 80124a8:	4621      	mov	r1, r4
 80124aa:	4640      	mov	r0, r8
 80124ac:	f7ff fee6 	bl	801227c <_printf_common>
 80124b0:	3001      	adds	r0, #1
 80124b2:	d14a      	bne.n	801254a <_printf_i+0x1f2>
 80124b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80124b8:	b004      	add	sp, #16
 80124ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124be:	6823      	ldr	r3, [r4, #0]
 80124c0:	f043 0320 	orr.w	r3, r3, #32
 80124c4:	6023      	str	r3, [r4, #0]
 80124c6:	4833      	ldr	r0, [pc, #204]	@ (8012594 <_printf_i+0x23c>)
 80124c8:	2778      	movs	r7, #120	@ 0x78
 80124ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80124ce:	6823      	ldr	r3, [r4, #0]
 80124d0:	6831      	ldr	r1, [r6, #0]
 80124d2:	061f      	lsls	r7, r3, #24
 80124d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80124d8:	d402      	bmi.n	80124e0 <_printf_i+0x188>
 80124da:	065f      	lsls	r7, r3, #25
 80124dc:	bf48      	it	mi
 80124de:	b2ad      	uxthmi	r5, r5
 80124e0:	6031      	str	r1, [r6, #0]
 80124e2:	07d9      	lsls	r1, r3, #31
 80124e4:	bf44      	itt	mi
 80124e6:	f043 0320 	orrmi.w	r3, r3, #32
 80124ea:	6023      	strmi	r3, [r4, #0]
 80124ec:	b11d      	cbz	r5, 80124f6 <_printf_i+0x19e>
 80124ee:	2310      	movs	r3, #16
 80124f0:	e7ac      	b.n	801244c <_printf_i+0xf4>
 80124f2:	4827      	ldr	r0, [pc, #156]	@ (8012590 <_printf_i+0x238>)
 80124f4:	e7e9      	b.n	80124ca <_printf_i+0x172>
 80124f6:	6823      	ldr	r3, [r4, #0]
 80124f8:	f023 0320 	bic.w	r3, r3, #32
 80124fc:	6023      	str	r3, [r4, #0]
 80124fe:	e7f6      	b.n	80124ee <_printf_i+0x196>
 8012500:	4616      	mov	r6, r2
 8012502:	e7bd      	b.n	8012480 <_printf_i+0x128>
 8012504:	6833      	ldr	r3, [r6, #0]
 8012506:	6825      	ldr	r5, [r4, #0]
 8012508:	6961      	ldr	r1, [r4, #20]
 801250a:	1d18      	adds	r0, r3, #4
 801250c:	6030      	str	r0, [r6, #0]
 801250e:	062e      	lsls	r6, r5, #24
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	d501      	bpl.n	8012518 <_printf_i+0x1c0>
 8012514:	6019      	str	r1, [r3, #0]
 8012516:	e002      	b.n	801251e <_printf_i+0x1c6>
 8012518:	0668      	lsls	r0, r5, #25
 801251a:	d5fb      	bpl.n	8012514 <_printf_i+0x1bc>
 801251c:	8019      	strh	r1, [r3, #0]
 801251e:	2300      	movs	r3, #0
 8012520:	6123      	str	r3, [r4, #16]
 8012522:	4616      	mov	r6, r2
 8012524:	e7bc      	b.n	80124a0 <_printf_i+0x148>
 8012526:	6833      	ldr	r3, [r6, #0]
 8012528:	1d1a      	adds	r2, r3, #4
 801252a:	6032      	str	r2, [r6, #0]
 801252c:	681e      	ldr	r6, [r3, #0]
 801252e:	6862      	ldr	r2, [r4, #4]
 8012530:	2100      	movs	r1, #0
 8012532:	4630      	mov	r0, r6
 8012534:	f7ed fe74 	bl	8000220 <memchr>
 8012538:	b108      	cbz	r0, 801253e <_printf_i+0x1e6>
 801253a:	1b80      	subs	r0, r0, r6
 801253c:	6060      	str	r0, [r4, #4]
 801253e:	6863      	ldr	r3, [r4, #4]
 8012540:	6123      	str	r3, [r4, #16]
 8012542:	2300      	movs	r3, #0
 8012544:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012548:	e7aa      	b.n	80124a0 <_printf_i+0x148>
 801254a:	6923      	ldr	r3, [r4, #16]
 801254c:	4632      	mov	r2, r6
 801254e:	4649      	mov	r1, r9
 8012550:	4640      	mov	r0, r8
 8012552:	47d0      	blx	sl
 8012554:	3001      	adds	r0, #1
 8012556:	d0ad      	beq.n	80124b4 <_printf_i+0x15c>
 8012558:	6823      	ldr	r3, [r4, #0]
 801255a:	079b      	lsls	r3, r3, #30
 801255c:	d413      	bmi.n	8012586 <_printf_i+0x22e>
 801255e:	68e0      	ldr	r0, [r4, #12]
 8012560:	9b03      	ldr	r3, [sp, #12]
 8012562:	4298      	cmp	r0, r3
 8012564:	bfb8      	it	lt
 8012566:	4618      	movlt	r0, r3
 8012568:	e7a6      	b.n	80124b8 <_printf_i+0x160>
 801256a:	2301      	movs	r3, #1
 801256c:	4632      	mov	r2, r6
 801256e:	4649      	mov	r1, r9
 8012570:	4640      	mov	r0, r8
 8012572:	47d0      	blx	sl
 8012574:	3001      	adds	r0, #1
 8012576:	d09d      	beq.n	80124b4 <_printf_i+0x15c>
 8012578:	3501      	adds	r5, #1
 801257a:	68e3      	ldr	r3, [r4, #12]
 801257c:	9903      	ldr	r1, [sp, #12]
 801257e:	1a5b      	subs	r3, r3, r1
 8012580:	42ab      	cmp	r3, r5
 8012582:	dcf2      	bgt.n	801256a <_printf_i+0x212>
 8012584:	e7eb      	b.n	801255e <_printf_i+0x206>
 8012586:	2500      	movs	r5, #0
 8012588:	f104 0619 	add.w	r6, r4, #25
 801258c:	e7f5      	b.n	801257a <_printf_i+0x222>
 801258e:	bf00      	nop
 8012590:	080158e2 	.word	0x080158e2
 8012594:	080158f3 	.word	0x080158f3

08012598 <__malloc_lock>:
 8012598:	4801      	ldr	r0, [pc, #4]	@ (80125a0 <__malloc_lock+0x8>)
 801259a:	f7f0 bd08 	b.w	8002fae <__retarget_lock_acquire_recursive>
 801259e:	bf00      	nop
 80125a0:	200008a4 	.word	0x200008a4

080125a4 <__malloc_unlock>:
 80125a4:	4801      	ldr	r0, [pc, #4]	@ (80125ac <__malloc_unlock+0x8>)
 80125a6:	f7f0 bd17 	b.w	8002fd8 <__retarget_lock_release_recursive>
 80125aa:	bf00      	nop
 80125ac:	200008a4 	.word	0x200008a4

080125b0 <siprintf>:
 80125b0:	b40e      	push	{r1, r2, r3}
 80125b2:	b500      	push	{lr}
 80125b4:	b09c      	sub	sp, #112	@ 0x70
 80125b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80125b8:	9002      	str	r0, [sp, #8]
 80125ba:	9006      	str	r0, [sp, #24]
 80125bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80125c0:	4809      	ldr	r0, [pc, #36]	@ (80125e8 <siprintf+0x38>)
 80125c2:	9107      	str	r1, [sp, #28]
 80125c4:	9104      	str	r1, [sp, #16]
 80125c6:	4909      	ldr	r1, [pc, #36]	@ (80125ec <siprintf+0x3c>)
 80125c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80125cc:	9105      	str	r1, [sp, #20]
 80125ce:	6800      	ldr	r0, [r0, #0]
 80125d0:	9301      	str	r3, [sp, #4]
 80125d2:	a902      	add	r1, sp, #8
 80125d4:	f001 f816 	bl	8013604 <_svfiprintf_r>
 80125d8:	9b02      	ldr	r3, [sp, #8]
 80125da:	2200      	movs	r2, #0
 80125dc:	701a      	strb	r2, [r3, #0]
 80125de:	b01c      	add	sp, #112	@ 0x70
 80125e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80125e4:	b003      	add	sp, #12
 80125e6:	4770      	bx	lr
 80125e8:	200000ec 	.word	0x200000ec
 80125ec:	ffff0208 	.word	0xffff0208

080125f0 <std>:
 80125f0:	2300      	movs	r3, #0
 80125f2:	b510      	push	{r4, lr}
 80125f4:	4604      	mov	r4, r0
 80125f6:	e9c0 3300 	strd	r3, r3, [r0]
 80125fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80125fe:	6083      	str	r3, [r0, #8]
 8012600:	8181      	strh	r1, [r0, #12]
 8012602:	6643      	str	r3, [r0, #100]	@ 0x64
 8012604:	81c2      	strh	r2, [r0, #14]
 8012606:	6183      	str	r3, [r0, #24]
 8012608:	4619      	mov	r1, r3
 801260a:	2208      	movs	r2, #8
 801260c:	305c      	adds	r0, #92	@ 0x5c
 801260e:	f000 f8b1 	bl	8012774 <memset>
 8012612:	4b0d      	ldr	r3, [pc, #52]	@ (8012648 <std+0x58>)
 8012614:	6263      	str	r3, [r4, #36]	@ 0x24
 8012616:	4b0d      	ldr	r3, [pc, #52]	@ (801264c <std+0x5c>)
 8012618:	62a3      	str	r3, [r4, #40]	@ 0x28
 801261a:	4b0d      	ldr	r3, [pc, #52]	@ (8012650 <std+0x60>)
 801261c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801261e:	4b0d      	ldr	r3, [pc, #52]	@ (8012654 <std+0x64>)
 8012620:	6323      	str	r3, [r4, #48]	@ 0x30
 8012622:	4b0d      	ldr	r3, [pc, #52]	@ (8012658 <std+0x68>)
 8012624:	6224      	str	r4, [r4, #32]
 8012626:	429c      	cmp	r4, r3
 8012628:	d006      	beq.n	8012638 <std+0x48>
 801262a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801262e:	4294      	cmp	r4, r2
 8012630:	d002      	beq.n	8012638 <std+0x48>
 8012632:	33d0      	adds	r3, #208	@ 0xd0
 8012634:	429c      	cmp	r4, r3
 8012636:	d105      	bne.n	8012644 <std+0x54>
 8012638:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801263c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012640:	f7f0 bc8e 	b.w	8002f60 <__retarget_lock_init_recursive>
 8012644:	bd10      	pop	{r4, pc}
 8012646:	bf00      	nop
 8012648:	08014059 	.word	0x08014059
 801264c:	0801407b 	.word	0x0801407b
 8012650:	080140b3 	.word	0x080140b3
 8012654:	080140d7 	.word	0x080140d7
 8012658:	200015cc 	.word	0x200015cc

0801265c <stdio_exit_handler>:
 801265c:	4a02      	ldr	r2, [pc, #8]	@ (8012668 <stdio_exit_handler+0xc>)
 801265e:	4903      	ldr	r1, [pc, #12]	@ (801266c <stdio_exit_handler+0x10>)
 8012660:	4803      	ldr	r0, [pc, #12]	@ (8012670 <stdio_exit_handler+0x14>)
 8012662:	f000 b869 	b.w	8012738 <_fwalk_sglue>
 8012666:	bf00      	nop
 8012668:	200000e0 	.word	0x200000e0
 801266c:	08013905 	.word	0x08013905
 8012670:	200000f0 	.word	0x200000f0

08012674 <cleanup_stdio>:
 8012674:	6841      	ldr	r1, [r0, #4]
 8012676:	4b0c      	ldr	r3, [pc, #48]	@ (80126a8 <cleanup_stdio+0x34>)
 8012678:	4299      	cmp	r1, r3
 801267a:	b510      	push	{r4, lr}
 801267c:	4604      	mov	r4, r0
 801267e:	d001      	beq.n	8012684 <cleanup_stdio+0x10>
 8012680:	f001 f940 	bl	8013904 <_fflush_r>
 8012684:	68a1      	ldr	r1, [r4, #8]
 8012686:	4b09      	ldr	r3, [pc, #36]	@ (80126ac <cleanup_stdio+0x38>)
 8012688:	4299      	cmp	r1, r3
 801268a:	d002      	beq.n	8012692 <cleanup_stdio+0x1e>
 801268c:	4620      	mov	r0, r4
 801268e:	f001 f939 	bl	8013904 <_fflush_r>
 8012692:	68e1      	ldr	r1, [r4, #12]
 8012694:	4b06      	ldr	r3, [pc, #24]	@ (80126b0 <cleanup_stdio+0x3c>)
 8012696:	4299      	cmp	r1, r3
 8012698:	d004      	beq.n	80126a4 <cleanup_stdio+0x30>
 801269a:	4620      	mov	r0, r4
 801269c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126a0:	f001 b930 	b.w	8013904 <_fflush_r>
 80126a4:	bd10      	pop	{r4, pc}
 80126a6:	bf00      	nop
 80126a8:	200015cc 	.word	0x200015cc
 80126ac:	20001634 	.word	0x20001634
 80126b0:	2000169c 	.word	0x2000169c

080126b4 <global_stdio_init.part.0>:
 80126b4:	b510      	push	{r4, lr}
 80126b6:	4b0b      	ldr	r3, [pc, #44]	@ (80126e4 <global_stdio_init.part.0+0x30>)
 80126b8:	4c0b      	ldr	r4, [pc, #44]	@ (80126e8 <global_stdio_init.part.0+0x34>)
 80126ba:	4a0c      	ldr	r2, [pc, #48]	@ (80126ec <global_stdio_init.part.0+0x38>)
 80126bc:	601a      	str	r2, [r3, #0]
 80126be:	4620      	mov	r0, r4
 80126c0:	2200      	movs	r2, #0
 80126c2:	2104      	movs	r1, #4
 80126c4:	f7ff ff94 	bl	80125f0 <std>
 80126c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80126cc:	2201      	movs	r2, #1
 80126ce:	2109      	movs	r1, #9
 80126d0:	f7ff ff8e 	bl	80125f0 <std>
 80126d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80126d8:	2202      	movs	r2, #2
 80126da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126de:	2112      	movs	r1, #18
 80126e0:	f7ff bf86 	b.w	80125f0 <std>
 80126e4:	20001704 	.word	0x20001704
 80126e8:	200015cc 	.word	0x200015cc
 80126ec:	0801265d 	.word	0x0801265d

080126f0 <__sfp_lock_acquire>:
 80126f0:	4801      	ldr	r0, [pc, #4]	@ (80126f8 <__sfp_lock_acquire+0x8>)
 80126f2:	f7f0 bc5c 	b.w	8002fae <__retarget_lock_acquire_recursive>
 80126f6:	bf00      	nop
 80126f8:	200008a0 	.word	0x200008a0

080126fc <__sfp_lock_release>:
 80126fc:	4801      	ldr	r0, [pc, #4]	@ (8012704 <__sfp_lock_release+0x8>)
 80126fe:	f7f0 bc6b 	b.w	8002fd8 <__retarget_lock_release_recursive>
 8012702:	bf00      	nop
 8012704:	200008a0 	.word	0x200008a0

08012708 <__sinit>:
 8012708:	b510      	push	{r4, lr}
 801270a:	4604      	mov	r4, r0
 801270c:	f7ff fff0 	bl	80126f0 <__sfp_lock_acquire>
 8012710:	6a23      	ldr	r3, [r4, #32]
 8012712:	b11b      	cbz	r3, 801271c <__sinit+0x14>
 8012714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012718:	f7ff bff0 	b.w	80126fc <__sfp_lock_release>
 801271c:	4b04      	ldr	r3, [pc, #16]	@ (8012730 <__sinit+0x28>)
 801271e:	6223      	str	r3, [r4, #32]
 8012720:	4b04      	ldr	r3, [pc, #16]	@ (8012734 <__sinit+0x2c>)
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d1f5      	bne.n	8012714 <__sinit+0xc>
 8012728:	f7ff ffc4 	bl	80126b4 <global_stdio_init.part.0>
 801272c:	e7f2      	b.n	8012714 <__sinit+0xc>
 801272e:	bf00      	nop
 8012730:	08012675 	.word	0x08012675
 8012734:	20001704 	.word	0x20001704

08012738 <_fwalk_sglue>:
 8012738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801273c:	4607      	mov	r7, r0
 801273e:	4688      	mov	r8, r1
 8012740:	4614      	mov	r4, r2
 8012742:	2600      	movs	r6, #0
 8012744:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012748:	f1b9 0901 	subs.w	r9, r9, #1
 801274c:	d505      	bpl.n	801275a <_fwalk_sglue+0x22>
 801274e:	6824      	ldr	r4, [r4, #0]
 8012750:	2c00      	cmp	r4, #0
 8012752:	d1f7      	bne.n	8012744 <_fwalk_sglue+0xc>
 8012754:	4630      	mov	r0, r6
 8012756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801275a:	89ab      	ldrh	r3, [r5, #12]
 801275c:	2b01      	cmp	r3, #1
 801275e:	d907      	bls.n	8012770 <_fwalk_sglue+0x38>
 8012760:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012764:	3301      	adds	r3, #1
 8012766:	d003      	beq.n	8012770 <_fwalk_sglue+0x38>
 8012768:	4629      	mov	r1, r5
 801276a:	4638      	mov	r0, r7
 801276c:	47c0      	blx	r8
 801276e:	4306      	orrs	r6, r0
 8012770:	3568      	adds	r5, #104	@ 0x68
 8012772:	e7e9      	b.n	8012748 <_fwalk_sglue+0x10>

08012774 <memset>:
 8012774:	4402      	add	r2, r0
 8012776:	4603      	mov	r3, r0
 8012778:	4293      	cmp	r3, r2
 801277a:	d100      	bne.n	801277e <memset+0xa>
 801277c:	4770      	bx	lr
 801277e:	f803 1b01 	strb.w	r1, [r3], #1
 8012782:	e7f9      	b.n	8012778 <memset+0x4>

08012784 <_localeconv_r>:
 8012784:	4800      	ldr	r0, [pc, #0]	@ (8012788 <_localeconv_r+0x4>)
 8012786:	4770      	bx	lr
 8012788:	2000022c 	.word	0x2000022c

0801278c <_sbrk_r>:
 801278c:	b538      	push	{r3, r4, r5, lr}
 801278e:	4d06      	ldr	r5, [pc, #24]	@ (80127a8 <_sbrk_r+0x1c>)
 8012790:	2300      	movs	r3, #0
 8012792:	4604      	mov	r4, r0
 8012794:	4608      	mov	r0, r1
 8012796:	602b      	str	r3, [r5, #0]
 8012798:	f7f0 faf6 	bl	8002d88 <_sbrk>
 801279c:	1c43      	adds	r3, r0, #1
 801279e:	d102      	bne.n	80127a6 <_sbrk_r+0x1a>
 80127a0:	682b      	ldr	r3, [r5, #0]
 80127a2:	b103      	cbz	r3, 80127a6 <_sbrk_r+0x1a>
 80127a4:	6023      	str	r3, [r4, #0]
 80127a6:	bd38      	pop	{r3, r4, r5, pc}
 80127a8:	20001708 	.word	0x20001708

080127ac <__errno>:
 80127ac:	4b01      	ldr	r3, [pc, #4]	@ (80127b4 <__errno+0x8>)
 80127ae:	6818      	ldr	r0, [r3, #0]
 80127b0:	4770      	bx	lr
 80127b2:	bf00      	nop
 80127b4:	200000ec 	.word	0x200000ec

080127b8 <__libc_init_array>:
 80127b8:	b570      	push	{r4, r5, r6, lr}
 80127ba:	4d0d      	ldr	r5, [pc, #52]	@ (80127f0 <__libc_init_array+0x38>)
 80127bc:	4c0d      	ldr	r4, [pc, #52]	@ (80127f4 <__libc_init_array+0x3c>)
 80127be:	1b64      	subs	r4, r4, r5
 80127c0:	10a4      	asrs	r4, r4, #2
 80127c2:	2600      	movs	r6, #0
 80127c4:	42a6      	cmp	r6, r4
 80127c6:	d109      	bne.n	80127dc <__libc_init_array+0x24>
 80127c8:	4d0b      	ldr	r5, [pc, #44]	@ (80127f8 <__libc_init_array+0x40>)
 80127ca:	4c0c      	ldr	r4, [pc, #48]	@ (80127fc <__libc_init_array+0x44>)
 80127cc:	f002 ff84 	bl	80156d8 <_init>
 80127d0:	1b64      	subs	r4, r4, r5
 80127d2:	10a4      	asrs	r4, r4, #2
 80127d4:	2600      	movs	r6, #0
 80127d6:	42a6      	cmp	r6, r4
 80127d8:	d105      	bne.n	80127e6 <__libc_init_array+0x2e>
 80127da:	bd70      	pop	{r4, r5, r6, pc}
 80127dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80127e0:	4798      	blx	r3
 80127e2:	3601      	adds	r6, #1
 80127e4:	e7ee      	b.n	80127c4 <__libc_init_array+0xc>
 80127e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80127ea:	4798      	blx	r3
 80127ec:	3601      	adds	r6, #1
 80127ee:	e7f2      	b.n	80127d6 <__libc_init_array+0x1e>
 80127f0:	08015c78 	.word	0x08015c78
 80127f4:	08015c78 	.word	0x08015c78
 80127f8:	08015c78 	.word	0x08015c78
 80127fc:	08015c7c 	.word	0x08015c7c

08012800 <memcpy>:
 8012800:	440a      	add	r2, r1
 8012802:	4291      	cmp	r1, r2
 8012804:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8012808:	d100      	bne.n	801280c <memcpy+0xc>
 801280a:	4770      	bx	lr
 801280c:	b510      	push	{r4, lr}
 801280e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012812:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012816:	4291      	cmp	r1, r2
 8012818:	d1f9      	bne.n	801280e <memcpy+0xe>
 801281a:	bd10      	pop	{r4, pc}

0801281c <quorem>:
 801281c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012820:	6903      	ldr	r3, [r0, #16]
 8012822:	690c      	ldr	r4, [r1, #16]
 8012824:	42a3      	cmp	r3, r4
 8012826:	4607      	mov	r7, r0
 8012828:	db7e      	blt.n	8012928 <quorem+0x10c>
 801282a:	3c01      	subs	r4, #1
 801282c:	f101 0814 	add.w	r8, r1, #20
 8012830:	00a3      	lsls	r3, r4, #2
 8012832:	f100 0514 	add.w	r5, r0, #20
 8012836:	9300      	str	r3, [sp, #0]
 8012838:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801283c:	9301      	str	r3, [sp, #4]
 801283e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012842:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012846:	3301      	adds	r3, #1
 8012848:	429a      	cmp	r2, r3
 801284a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801284e:	fbb2 f6f3 	udiv	r6, r2, r3
 8012852:	d32e      	bcc.n	80128b2 <quorem+0x96>
 8012854:	f04f 0a00 	mov.w	sl, #0
 8012858:	46c4      	mov	ip, r8
 801285a:	46ae      	mov	lr, r5
 801285c:	46d3      	mov	fp, sl
 801285e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012862:	b298      	uxth	r0, r3
 8012864:	fb06 a000 	mla	r0, r6, r0, sl
 8012868:	0c02      	lsrs	r2, r0, #16
 801286a:	0c1b      	lsrs	r3, r3, #16
 801286c:	fb06 2303 	mla	r3, r6, r3, r2
 8012870:	f8de 2000 	ldr.w	r2, [lr]
 8012874:	b280      	uxth	r0, r0
 8012876:	b292      	uxth	r2, r2
 8012878:	1a12      	subs	r2, r2, r0
 801287a:	445a      	add	r2, fp
 801287c:	f8de 0000 	ldr.w	r0, [lr]
 8012880:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012884:	b29b      	uxth	r3, r3
 8012886:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801288a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801288e:	b292      	uxth	r2, r2
 8012890:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012894:	45e1      	cmp	r9, ip
 8012896:	f84e 2b04 	str.w	r2, [lr], #4
 801289a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801289e:	d2de      	bcs.n	801285e <quorem+0x42>
 80128a0:	9b00      	ldr	r3, [sp, #0]
 80128a2:	58eb      	ldr	r3, [r5, r3]
 80128a4:	b92b      	cbnz	r3, 80128b2 <quorem+0x96>
 80128a6:	9b01      	ldr	r3, [sp, #4]
 80128a8:	3b04      	subs	r3, #4
 80128aa:	429d      	cmp	r5, r3
 80128ac:	461a      	mov	r2, r3
 80128ae:	d32f      	bcc.n	8012910 <quorem+0xf4>
 80128b0:	613c      	str	r4, [r7, #16]
 80128b2:	4638      	mov	r0, r7
 80128b4:	f001 fac8 	bl	8013e48 <__mcmp>
 80128b8:	2800      	cmp	r0, #0
 80128ba:	db25      	blt.n	8012908 <quorem+0xec>
 80128bc:	4629      	mov	r1, r5
 80128be:	2000      	movs	r0, #0
 80128c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80128c4:	f8d1 c000 	ldr.w	ip, [r1]
 80128c8:	fa1f fe82 	uxth.w	lr, r2
 80128cc:	fa1f f38c 	uxth.w	r3, ip
 80128d0:	eba3 030e 	sub.w	r3, r3, lr
 80128d4:	4403      	add	r3, r0
 80128d6:	0c12      	lsrs	r2, r2, #16
 80128d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80128dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80128e0:	b29b      	uxth	r3, r3
 80128e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80128e6:	45c1      	cmp	r9, r8
 80128e8:	f841 3b04 	str.w	r3, [r1], #4
 80128ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 80128f0:	d2e6      	bcs.n	80128c0 <quorem+0xa4>
 80128f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80128f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80128fa:	b922      	cbnz	r2, 8012906 <quorem+0xea>
 80128fc:	3b04      	subs	r3, #4
 80128fe:	429d      	cmp	r5, r3
 8012900:	461a      	mov	r2, r3
 8012902:	d30b      	bcc.n	801291c <quorem+0x100>
 8012904:	613c      	str	r4, [r7, #16]
 8012906:	3601      	adds	r6, #1
 8012908:	4630      	mov	r0, r6
 801290a:	b003      	add	sp, #12
 801290c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012910:	6812      	ldr	r2, [r2, #0]
 8012912:	3b04      	subs	r3, #4
 8012914:	2a00      	cmp	r2, #0
 8012916:	d1cb      	bne.n	80128b0 <quorem+0x94>
 8012918:	3c01      	subs	r4, #1
 801291a:	e7c6      	b.n	80128aa <quorem+0x8e>
 801291c:	6812      	ldr	r2, [r2, #0]
 801291e:	3b04      	subs	r3, #4
 8012920:	2a00      	cmp	r2, #0
 8012922:	d1ef      	bne.n	8012904 <quorem+0xe8>
 8012924:	3c01      	subs	r4, #1
 8012926:	e7ea      	b.n	80128fe <quorem+0xe2>
 8012928:	2000      	movs	r0, #0
 801292a:	e7ee      	b.n	801290a <quorem+0xee>
 801292c:	0000      	movs	r0, r0
	...

08012930 <_dtoa_r>:
 8012930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012934:	69c7      	ldr	r7, [r0, #28]
 8012936:	b099      	sub	sp, #100	@ 0x64
 8012938:	ed8d 0b02 	vstr	d0, [sp, #8]
 801293c:	ec55 4b10 	vmov	r4, r5, d0
 8012940:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012942:	9109      	str	r1, [sp, #36]	@ 0x24
 8012944:	4683      	mov	fp, r0
 8012946:	920e      	str	r2, [sp, #56]	@ 0x38
 8012948:	9313      	str	r3, [sp, #76]	@ 0x4c
 801294a:	b97f      	cbnz	r7, 801296c <_dtoa_r+0x3c>
 801294c:	2010      	movs	r0, #16
 801294e:	f7ff fbeb 	bl	8012128 <malloc>
 8012952:	4602      	mov	r2, r0
 8012954:	f8cb 001c 	str.w	r0, [fp, #28]
 8012958:	b920      	cbnz	r0, 8012964 <_dtoa_r+0x34>
 801295a:	4ba7      	ldr	r3, [pc, #668]	@ (8012bf8 <_dtoa_r+0x2c8>)
 801295c:	21ef      	movs	r1, #239	@ 0xef
 801295e:	48a7      	ldr	r0, [pc, #668]	@ (8012bfc <_dtoa_r+0x2cc>)
 8012960:	f001 fc4c 	bl	80141fc <__assert_func>
 8012964:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012968:	6007      	str	r7, [r0, #0]
 801296a:	60c7      	str	r7, [r0, #12]
 801296c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012970:	6819      	ldr	r1, [r3, #0]
 8012972:	b159      	cbz	r1, 801298c <_dtoa_r+0x5c>
 8012974:	685a      	ldr	r2, [r3, #4]
 8012976:	604a      	str	r2, [r1, #4]
 8012978:	2301      	movs	r3, #1
 801297a:	4093      	lsls	r3, r2
 801297c:	608b      	str	r3, [r1, #8]
 801297e:	4658      	mov	r0, fp
 8012980:	f001 f828 	bl	80139d4 <_Bfree>
 8012984:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012988:	2200      	movs	r2, #0
 801298a:	601a      	str	r2, [r3, #0]
 801298c:	1e2b      	subs	r3, r5, #0
 801298e:	bfb9      	ittee	lt
 8012990:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012994:	9303      	strlt	r3, [sp, #12]
 8012996:	2300      	movge	r3, #0
 8012998:	6033      	strge	r3, [r6, #0]
 801299a:	9f03      	ldr	r7, [sp, #12]
 801299c:	4b98      	ldr	r3, [pc, #608]	@ (8012c00 <_dtoa_r+0x2d0>)
 801299e:	bfbc      	itt	lt
 80129a0:	2201      	movlt	r2, #1
 80129a2:	6032      	strlt	r2, [r6, #0]
 80129a4:	43bb      	bics	r3, r7
 80129a6:	d112      	bne.n	80129ce <_dtoa_r+0x9e>
 80129a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80129aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80129ae:	6013      	str	r3, [r2, #0]
 80129b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80129b4:	4323      	orrs	r3, r4
 80129b6:	f000 854d 	beq.w	8013454 <_dtoa_r+0xb24>
 80129ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80129bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012c14 <_dtoa_r+0x2e4>
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	f000 854f 	beq.w	8013464 <_dtoa_r+0xb34>
 80129c6:	f10a 0303 	add.w	r3, sl, #3
 80129ca:	f000 bd49 	b.w	8013460 <_dtoa_r+0xb30>
 80129ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80129d2:	2200      	movs	r2, #0
 80129d4:	ec51 0b17 	vmov	r0, r1, d7
 80129d8:	2300      	movs	r3, #0
 80129da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80129de:	f7ee f89b 	bl	8000b18 <__aeabi_dcmpeq>
 80129e2:	4680      	mov	r8, r0
 80129e4:	b158      	cbz	r0, 80129fe <_dtoa_r+0xce>
 80129e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80129e8:	2301      	movs	r3, #1
 80129ea:	6013      	str	r3, [r2, #0]
 80129ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80129ee:	b113      	cbz	r3, 80129f6 <_dtoa_r+0xc6>
 80129f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80129f2:	4b84      	ldr	r3, [pc, #528]	@ (8012c04 <_dtoa_r+0x2d4>)
 80129f4:	6013      	str	r3, [r2, #0]
 80129f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012c18 <_dtoa_r+0x2e8>
 80129fa:	f000 bd33 	b.w	8013464 <_dtoa_r+0xb34>
 80129fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012a02:	aa16      	add	r2, sp, #88	@ 0x58
 8012a04:	a917      	add	r1, sp, #92	@ 0x5c
 8012a06:	4658      	mov	r0, fp
 8012a08:	f001 face 	bl	8013fa8 <__d2b>
 8012a0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012a10:	4681      	mov	r9, r0
 8012a12:	2e00      	cmp	r6, #0
 8012a14:	d077      	beq.n	8012b06 <_dtoa_r+0x1d6>
 8012a16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012a18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012a20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012a24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012a28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012a2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012a30:	4619      	mov	r1, r3
 8012a32:	2200      	movs	r2, #0
 8012a34:	4b74      	ldr	r3, [pc, #464]	@ (8012c08 <_dtoa_r+0x2d8>)
 8012a36:	f7ed fc4f 	bl	80002d8 <__aeabi_dsub>
 8012a3a:	a369      	add	r3, pc, #420	@ (adr r3, 8012be0 <_dtoa_r+0x2b0>)
 8012a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a40:	f7ed fe02 	bl	8000648 <__aeabi_dmul>
 8012a44:	a368      	add	r3, pc, #416	@ (adr r3, 8012be8 <_dtoa_r+0x2b8>)
 8012a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a4a:	f7ed fc47 	bl	80002dc <__adddf3>
 8012a4e:	4604      	mov	r4, r0
 8012a50:	4630      	mov	r0, r6
 8012a52:	460d      	mov	r5, r1
 8012a54:	f7ed fd8e 	bl	8000574 <__aeabi_i2d>
 8012a58:	a365      	add	r3, pc, #404	@ (adr r3, 8012bf0 <_dtoa_r+0x2c0>)
 8012a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a5e:	f7ed fdf3 	bl	8000648 <__aeabi_dmul>
 8012a62:	4602      	mov	r2, r0
 8012a64:	460b      	mov	r3, r1
 8012a66:	4620      	mov	r0, r4
 8012a68:	4629      	mov	r1, r5
 8012a6a:	f7ed fc37 	bl	80002dc <__adddf3>
 8012a6e:	4604      	mov	r4, r0
 8012a70:	460d      	mov	r5, r1
 8012a72:	f7ee f899 	bl	8000ba8 <__aeabi_d2iz>
 8012a76:	2200      	movs	r2, #0
 8012a78:	4607      	mov	r7, r0
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	4629      	mov	r1, r5
 8012a80:	f7ee f854 	bl	8000b2c <__aeabi_dcmplt>
 8012a84:	b140      	cbz	r0, 8012a98 <_dtoa_r+0x168>
 8012a86:	4638      	mov	r0, r7
 8012a88:	f7ed fd74 	bl	8000574 <__aeabi_i2d>
 8012a8c:	4622      	mov	r2, r4
 8012a8e:	462b      	mov	r3, r5
 8012a90:	f7ee f842 	bl	8000b18 <__aeabi_dcmpeq>
 8012a94:	b900      	cbnz	r0, 8012a98 <_dtoa_r+0x168>
 8012a96:	3f01      	subs	r7, #1
 8012a98:	2f16      	cmp	r7, #22
 8012a9a:	d851      	bhi.n	8012b40 <_dtoa_r+0x210>
 8012a9c:	4b5b      	ldr	r3, [pc, #364]	@ (8012c0c <_dtoa_r+0x2dc>)
 8012a9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012aaa:	f7ee f83f 	bl	8000b2c <__aeabi_dcmplt>
 8012aae:	2800      	cmp	r0, #0
 8012ab0:	d048      	beq.n	8012b44 <_dtoa_r+0x214>
 8012ab2:	3f01      	subs	r7, #1
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	9312      	str	r3, [sp, #72]	@ 0x48
 8012ab8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012aba:	1b9b      	subs	r3, r3, r6
 8012abc:	1e5a      	subs	r2, r3, #1
 8012abe:	bf44      	itt	mi
 8012ac0:	f1c3 0801 	rsbmi	r8, r3, #1
 8012ac4:	2300      	movmi	r3, #0
 8012ac6:	9208      	str	r2, [sp, #32]
 8012ac8:	bf54      	ite	pl
 8012aca:	f04f 0800 	movpl.w	r8, #0
 8012ace:	9308      	strmi	r3, [sp, #32]
 8012ad0:	2f00      	cmp	r7, #0
 8012ad2:	db39      	blt.n	8012b48 <_dtoa_r+0x218>
 8012ad4:	9b08      	ldr	r3, [sp, #32]
 8012ad6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012ad8:	443b      	add	r3, r7
 8012ada:	9308      	str	r3, [sp, #32]
 8012adc:	2300      	movs	r3, #0
 8012ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ae2:	2b09      	cmp	r3, #9
 8012ae4:	d864      	bhi.n	8012bb0 <_dtoa_r+0x280>
 8012ae6:	2b05      	cmp	r3, #5
 8012ae8:	bfc4      	itt	gt
 8012aea:	3b04      	subgt	r3, #4
 8012aec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012af0:	f1a3 0302 	sub.w	r3, r3, #2
 8012af4:	bfcc      	ite	gt
 8012af6:	2400      	movgt	r4, #0
 8012af8:	2401      	movle	r4, #1
 8012afa:	2b03      	cmp	r3, #3
 8012afc:	d863      	bhi.n	8012bc6 <_dtoa_r+0x296>
 8012afe:	e8df f003 	tbb	[pc, r3]
 8012b02:	372a      	.short	0x372a
 8012b04:	5535      	.short	0x5535
 8012b06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012b0a:	441e      	add	r6, r3
 8012b0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012b10:	2b20      	cmp	r3, #32
 8012b12:	bfc1      	itttt	gt
 8012b14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012b18:	409f      	lslgt	r7, r3
 8012b1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012b1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012b22:	bfd6      	itet	le
 8012b24:	f1c3 0320 	rsble	r3, r3, #32
 8012b28:	ea47 0003 	orrgt.w	r0, r7, r3
 8012b2c:	fa04 f003 	lslle.w	r0, r4, r3
 8012b30:	f7ed fd10 	bl	8000554 <__aeabi_ui2d>
 8012b34:	2201      	movs	r2, #1
 8012b36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012b3a:	3e01      	subs	r6, #1
 8012b3c:	9214      	str	r2, [sp, #80]	@ 0x50
 8012b3e:	e777      	b.n	8012a30 <_dtoa_r+0x100>
 8012b40:	2301      	movs	r3, #1
 8012b42:	e7b8      	b.n	8012ab6 <_dtoa_r+0x186>
 8012b44:	9012      	str	r0, [sp, #72]	@ 0x48
 8012b46:	e7b7      	b.n	8012ab8 <_dtoa_r+0x188>
 8012b48:	427b      	negs	r3, r7
 8012b4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	eba8 0807 	sub.w	r8, r8, r7
 8012b52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012b54:	e7c4      	b.n	8012ae0 <_dtoa_r+0x1b0>
 8012b56:	2300      	movs	r3, #0
 8012b58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	dc35      	bgt.n	8012bcc <_dtoa_r+0x29c>
 8012b60:	2301      	movs	r3, #1
 8012b62:	9300      	str	r3, [sp, #0]
 8012b64:	9307      	str	r3, [sp, #28]
 8012b66:	461a      	mov	r2, r3
 8012b68:	920e      	str	r2, [sp, #56]	@ 0x38
 8012b6a:	e00b      	b.n	8012b84 <_dtoa_r+0x254>
 8012b6c:	2301      	movs	r3, #1
 8012b6e:	e7f3      	b.n	8012b58 <_dtoa_r+0x228>
 8012b70:	2300      	movs	r3, #0
 8012b72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b76:	18fb      	adds	r3, r7, r3
 8012b78:	9300      	str	r3, [sp, #0]
 8012b7a:	3301      	adds	r3, #1
 8012b7c:	2b01      	cmp	r3, #1
 8012b7e:	9307      	str	r3, [sp, #28]
 8012b80:	bfb8      	it	lt
 8012b82:	2301      	movlt	r3, #1
 8012b84:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012b88:	2100      	movs	r1, #0
 8012b8a:	2204      	movs	r2, #4
 8012b8c:	f102 0514 	add.w	r5, r2, #20
 8012b90:	429d      	cmp	r5, r3
 8012b92:	d91f      	bls.n	8012bd4 <_dtoa_r+0x2a4>
 8012b94:	6041      	str	r1, [r0, #4]
 8012b96:	4658      	mov	r0, fp
 8012b98:	f000 fedc 	bl	8013954 <_Balloc>
 8012b9c:	4682      	mov	sl, r0
 8012b9e:	2800      	cmp	r0, #0
 8012ba0:	d13c      	bne.n	8012c1c <_dtoa_r+0x2ec>
 8012ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8012c10 <_dtoa_r+0x2e0>)
 8012ba4:	4602      	mov	r2, r0
 8012ba6:	f240 11af 	movw	r1, #431	@ 0x1af
 8012baa:	e6d8      	b.n	801295e <_dtoa_r+0x2e>
 8012bac:	2301      	movs	r3, #1
 8012bae:	e7e0      	b.n	8012b72 <_dtoa_r+0x242>
 8012bb0:	2401      	movs	r4, #1
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012bb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012bb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012bbc:	9300      	str	r3, [sp, #0]
 8012bbe:	9307      	str	r3, [sp, #28]
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	2312      	movs	r3, #18
 8012bc4:	e7d0      	b.n	8012b68 <_dtoa_r+0x238>
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012bca:	e7f5      	b.n	8012bb8 <_dtoa_r+0x288>
 8012bcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012bce:	9300      	str	r3, [sp, #0]
 8012bd0:	9307      	str	r3, [sp, #28]
 8012bd2:	e7d7      	b.n	8012b84 <_dtoa_r+0x254>
 8012bd4:	3101      	adds	r1, #1
 8012bd6:	0052      	lsls	r2, r2, #1
 8012bd8:	e7d8      	b.n	8012b8c <_dtoa_r+0x25c>
 8012bda:	bf00      	nop
 8012bdc:	f3af 8000 	nop.w
 8012be0:	636f4361 	.word	0x636f4361
 8012be4:	3fd287a7 	.word	0x3fd287a7
 8012be8:	8b60c8b3 	.word	0x8b60c8b3
 8012bec:	3fc68a28 	.word	0x3fc68a28
 8012bf0:	509f79fb 	.word	0x509f79fb
 8012bf4:	3fd34413 	.word	0x3fd34413
 8012bf8:	08015a12 	.word	0x08015a12
 8012bfc:	08015a29 	.word	0x08015a29
 8012c00:	7ff00000 	.word	0x7ff00000
 8012c04:	080158e1 	.word	0x080158e1
 8012c08:	3ff80000 	.word	0x3ff80000
 8012c0c:	08015b30 	.word	0x08015b30
 8012c10:	08015a81 	.word	0x08015a81
 8012c14:	08015a0e 	.word	0x08015a0e
 8012c18:	080158e0 	.word	0x080158e0
 8012c1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012c20:	6018      	str	r0, [r3, #0]
 8012c22:	9b07      	ldr	r3, [sp, #28]
 8012c24:	2b0e      	cmp	r3, #14
 8012c26:	f200 80a4 	bhi.w	8012d72 <_dtoa_r+0x442>
 8012c2a:	2c00      	cmp	r4, #0
 8012c2c:	f000 80a1 	beq.w	8012d72 <_dtoa_r+0x442>
 8012c30:	2f00      	cmp	r7, #0
 8012c32:	dd33      	ble.n	8012c9c <_dtoa_r+0x36c>
 8012c34:	4bad      	ldr	r3, [pc, #692]	@ (8012eec <_dtoa_r+0x5bc>)
 8012c36:	f007 020f 	and.w	r2, r7, #15
 8012c3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012c3e:	ed93 7b00 	vldr	d7, [r3]
 8012c42:	05f8      	lsls	r0, r7, #23
 8012c44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012c48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012c4c:	d516      	bpl.n	8012c7c <_dtoa_r+0x34c>
 8012c4e:	4ba8      	ldr	r3, [pc, #672]	@ (8012ef0 <_dtoa_r+0x5c0>)
 8012c50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012c54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012c58:	f7ed fe20 	bl	800089c <__aeabi_ddiv>
 8012c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c60:	f004 040f 	and.w	r4, r4, #15
 8012c64:	2603      	movs	r6, #3
 8012c66:	4da2      	ldr	r5, [pc, #648]	@ (8012ef0 <_dtoa_r+0x5c0>)
 8012c68:	b954      	cbnz	r4, 8012c80 <_dtoa_r+0x350>
 8012c6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c72:	f7ed fe13 	bl	800089c <__aeabi_ddiv>
 8012c76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c7a:	e028      	b.n	8012cce <_dtoa_r+0x39e>
 8012c7c:	2602      	movs	r6, #2
 8012c7e:	e7f2      	b.n	8012c66 <_dtoa_r+0x336>
 8012c80:	07e1      	lsls	r1, r4, #31
 8012c82:	d508      	bpl.n	8012c96 <_dtoa_r+0x366>
 8012c84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012c8c:	f7ed fcdc 	bl	8000648 <__aeabi_dmul>
 8012c90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012c94:	3601      	adds	r6, #1
 8012c96:	1064      	asrs	r4, r4, #1
 8012c98:	3508      	adds	r5, #8
 8012c9a:	e7e5      	b.n	8012c68 <_dtoa_r+0x338>
 8012c9c:	f000 80d2 	beq.w	8012e44 <_dtoa_r+0x514>
 8012ca0:	427c      	negs	r4, r7
 8012ca2:	4b92      	ldr	r3, [pc, #584]	@ (8012eec <_dtoa_r+0x5bc>)
 8012ca4:	4d92      	ldr	r5, [pc, #584]	@ (8012ef0 <_dtoa_r+0x5c0>)
 8012ca6:	f004 020f 	and.w	r2, r4, #15
 8012caa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012cb6:	f7ed fcc7 	bl	8000648 <__aeabi_dmul>
 8012cba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012cbe:	1124      	asrs	r4, r4, #4
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	2602      	movs	r6, #2
 8012cc4:	2c00      	cmp	r4, #0
 8012cc6:	f040 80b2 	bne.w	8012e2e <_dtoa_r+0x4fe>
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d1d3      	bne.n	8012c76 <_dtoa_r+0x346>
 8012cce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012cd0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	f000 80b7 	beq.w	8012e48 <_dtoa_r+0x518>
 8012cda:	4b86      	ldr	r3, [pc, #536]	@ (8012ef4 <_dtoa_r+0x5c4>)
 8012cdc:	2200      	movs	r2, #0
 8012cde:	4620      	mov	r0, r4
 8012ce0:	4629      	mov	r1, r5
 8012ce2:	f7ed ff23 	bl	8000b2c <__aeabi_dcmplt>
 8012ce6:	2800      	cmp	r0, #0
 8012ce8:	f000 80ae 	beq.w	8012e48 <_dtoa_r+0x518>
 8012cec:	9b07      	ldr	r3, [sp, #28]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	f000 80aa 	beq.w	8012e48 <_dtoa_r+0x518>
 8012cf4:	9b00      	ldr	r3, [sp, #0]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	dd37      	ble.n	8012d6a <_dtoa_r+0x43a>
 8012cfa:	1e7b      	subs	r3, r7, #1
 8012cfc:	9304      	str	r3, [sp, #16]
 8012cfe:	4620      	mov	r0, r4
 8012d00:	4b7d      	ldr	r3, [pc, #500]	@ (8012ef8 <_dtoa_r+0x5c8>)
 8012d02:	2200      	movs	r2, #0
 8012d04:	4629      	mov	r1, r5
 8012d06:	f7ed fc9f 	bl	8000648 <__aeabi_dmul>
 8012d0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d0e:	9c00      	ldr	r4, [sp, #0]
 8012d10:	3601      	adds	r6, #1
 8012d12:	4630      	mov	r0, r6
 8012d14:	f7ed fc2e 	bl	8000574 <__aeabi_i2d>
 8012d18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012d1c:	f7ed fc94 	bl	8000648 <__aeabi_dmul>
 8012d20:	4b76      	ldr	r3, [pc, #472]	@ (8012efc <_dtoa_r+0x5cc>)
 8012d22:	2200      	movs	r2, #0
 8012d24:	f7ed fada 	bl	80002dc <__adddf3>
 8012d28:	4605      	mov	r5, r0
 8012d2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012d2e:	2c00      	cmp	r4, #0
 8012d30:	f040 808d 	bne.w	8012e4e <_dtoa_r+0x51e>
 8012d34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d38:	4b71      	ldr	r3, [pc, #452]	@ (8012f00 <_dtoa_r+0x5d0>)
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	f7ed facc 	bl	80002d8 <__aeabi_dsub>
 8012d40:	4602      	mov	r2, r0
 8012d42:	460b      	mov	r3, r1
 8012d44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012d48:	462a      	mov	r2, r5
 8012d4a:	4633      	mov	r3, r6
 8012d4c:	f7ed ff0c 	bl	8000b68 <__aeabi_dcmpgt>
 8012d50:	2800      	cmp	r0, #0
 8012d52:	f040 828b 	bne.w	801326c <_dtoa_r+0x93c>
 8012d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d5a:	462a      	mov	r2, r5
 8012d5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012d60:	f7ed fee4 	bl	8000b2c <__aeabi_dcmplt>
 8012d64:	2800      	cmp	r0, #0
 8012d66:	f040 8128 	bne.w	8012fba <_dtoa_r+0x68a>
 8012d6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012d6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012d72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	f2c0 815a 	blt.w	801302e <_dtoa_r+0x6fe>
 8012d7a:	2f0e      	cmp	r7, #14
 8012d7c:	f300 8157 	bgt.w	801302e <_dtoa_r+0x6fe>
 8012d80:	4b5a      	ldr	r3, [pc, #360]	@ (8012eec <_dtoa_r+0x5bc>)
 8012d82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012d86:	ed93 7b00 	vldr	d7, [r3]
 8012d8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	ed8d 7b00 	vstr	d7, [sp]
 8012d92:	da03      	bge.n	8012d9c <_dtoa_r+0x46c>
 8012d94:	9b07      	ldr	r3, [sp, #28]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	f340 8101 	ble.w	8012f9e <_dtoa_r+0x66e>
 8012d9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012da0:	4656      	mov	r6, sl
 8012da2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012da6:	4620      	mov	r0, r4
 8012da8:	4629      	mov	r1, r5
 8012daa:	f7ed fd77 	bl	800089c <__aeabi_ddiv>
 8012dae:	f7ed fefb 	bl	8000ba8 <__aeabi_d2iz>
 8012db2:	4680      	mov	r8, r0
 8012db4:	f7ed fbde 	bl	8000574 <__aeabi_i2d>
 8012db8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012dbc:	f7ed fc44 	bl	8000648 <__aeabi_dmul>
 8012dc0:	4602      	mov	r2, r0
 8012dc2:	460b      	mov	r3, r1
 8012dc4:	4620      	mov	r0, r4
 8012dc6:	4629      	mov	r1, r5
 8012dc8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012dcc:	f7ed fa84 	bl	80002d8 <__aeabi_dsub>
 8012dd0:	f806 4b01 	strb.w	r4, [r6], #1
 8012dd4:	9d07      	ldr	r5, [sp, #28]
 8012dd6:	eba6 040a 	sub.w	r4, r6, sl
 8012dda:	42a5      	cmp	r5, r4
 8012ddc:	4602      	mov	r2, r0
 8012dde:	460b      	mov	r3, r1
 8012de0:	f040 8117 	bne.w	8013012 <_dtoa_r+0x6e2>
 8012de4:	f7ed fa7a 	bl	80002dc <__adddf3>
 8012de8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012dec:	4604      	mov	r4, r0
 8012dee:	460d      	mov	r5, r1
 8012df0:	f7ed feba 	bl	8000b68 <__aeabi_dcmpgt>
 8012df4:	2800      	cmp	r0, #0
 8012df6:	f040 80f9 	bne.w	8012fec <_dtoa_r+0x6bc>
 8012dfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012dfe:	4620      	mov	r0, r4
 8012e00:	4629      	mov	r1, r5
 8012e02:	f7ed fe89 	bl	8000b18 <__aeabi_dcmpeq>
 8012e06:	b118      	cbz	r0, 8012e10 <_dtoa_r+0x4e0>
 8012e08:	f018 0f01 	tst.w	r8, #1
 8012e0c:	f040 80ee 	bne.w	8012fec <_dtoa_r+0x6bc>
 8012e10:	4649      	mov	r1, r9
 8012e12:	4658      	mov	r0, fp
 8012e14:	f000 fdde 	bl	80139d4 <_Bfree>
 8012e18:	2300      	movs	r3, #0
 8012e1a:	7033      	strb	r3, [r6, #0]
 8012e1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012e1e:	3701      	adds	r7, #1
 8012e20:	601f      	str	r7, [r3, #0]
 8012e22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	f000 831d 	beq.w	8013464 <_dtoa_r+0xb34>
 8012e2a:	601e      	str	r6, [r3, #0]
 8012e2c:	e31a      	b.n	8013464 <_dtoa_r+0xb34>
 8012e2e:	07e2      	lsls	r2, r4, #31
 8012e30:	d505      	bpl.n	8012e3e <_dtoa_r+0x50e>
 8012e32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012e36:	f7ed fc07 	bl	8000648 <__aeabi_dmul>
 8012e3a:	3601      	adds	r6, #1
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	1064      	asrs	r4, r4, #1
 8012e40:	3508      	adds	r5, #8
 8012e42:	e73f      	b.n	8012cc4 <_dtoa_r+0x394>
 8012e44:	2602      	movs	r6, #2
 8012e46:	e742      	b.n	8012cce <_dtoa_r+0x39e>
 8012e48:	9c07      	ldr	r4, [sp, #28]
 8012e4a:	9704      	str	r7, [sp, #16]
 8012e4c:	e761      	b.n	8012d12 <_dtoa_r+0x3e2>
 8012e4e:	4b27      	ldr	r3, [pc, #156]	@ (8012eec <_dtoa_r+0x5bc>)
 8012e50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012e52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012e56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012e5a:	4454      	add	r4, sl
 8012e5c:	2900      	cmp	r1, #0
 8012e5e:	d053      	beq.n	8012f08 <_dtoa_r+0x5d8>
 8012e60:	4928      	ldr	r1, [pc, #160]	@ (8012f04 <_dtoa_r+0x5d4>)
 8012e62:	2000      	movs	r0, #0
 8012e64:	f7ed fd1a 	bl	800089c <__aeabi_ddiv>
 8012e68:	4633      	mov	r3, r6
 8012e6a:	462a      	mov	r2, r5
 8012e6c:	f7ed fa34 	bl	80002d8 <__aeabi_dsub>
 8012e70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012e74:	4656      	mov	r6, sl
 8012e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e7a:	f7ed fe95 	bl	8000ba8 <__aeabi_d2iz>
 8012e7e:	4605      	mov	r5, r0
 8012e80:	f7ed fb78 	bl	8000574 <__aeabi_i2d>
 8012e84:	4602      	mov	r2, r0
 8012e86:	460b      	mov	r3, r1
 8012e88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e8c:	f7ed fa24 	bl	80002d8 <__aeabi_dsub>
 8012e90:	3530      	adds	r5, #48	@ 0x30
 8012e92:	4602      	mov	r2, r0
 8012e94:	460b      	mov	r3, r1
 8012e96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012e9a:	f806 5b01 	strb.w	r5, [r6], #1
 8012e9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012ea2:	f7ed fe43 	bl	8000b2c <__aeabi_dcmplt>
 8012ea6:	2800      	cmp	r0, #0
 8012ea8:	d171      	bne.n	8012f8e <_dtoa_r+0x65e>
 8012eaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012eae:	4911      	ldr	r1, [pc, #68]	@ (8012ef4 <_dtoa_r+0x5c4>)
 8012eb0:	2000      	movs	r0, #0
 8012eb2:	f7ed fa11 	bl	80002d8 <__aeabi_dsub>
 8012eb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012eba:	f7ed fe37 	bl	8000b2c <__aeabi_dcmplt>
 8012ebe:	2800      	cmp	r0, #0
 8012ec0:	f040 8095 	bne.w	8012fee <_dtoa_r+0x6be>
 8012ec4:	42a6      	cmp	r6, r4
 8012ec6:	f43f af50 	beq.w	8012d6a <_dtoa_r+0x43a>
 8012eca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012ece:	4b0a      	ldr	r3, [pc, #40]	@ (8012ef8 <_dtoa_r+0x5c8>)
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	f7ed fbb9 	bl	8000648 <__aeabi_dmul>
 8012ed6:	4b08      	ldr	r3, [pc, #32]	@ (8012ef8 <_dtoa_r+0x5c8>)
 8012ed8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012edc:	2200      	movs	r2, #0
 8012ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ee2:	f7ed fbb1 	bl	8000648 <__aeabi_dmul>
 8012ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012eea:	e7c4      	b.n	8012e76 <_dtoa_r+0x546>
 8012eec:	08015b30 	.word	0x08015b30
 8012ef0:	08015b08 	.word	0x08015b08
 8012ef4:	3ff00000 	.word	0x3ff00000
 8012ef8:	40240000 	.word	0x40240000
 8012efc:	401c0000 	.word	0x401c0000
 8012f00:	40140000 	.word	0x40140000
 8012f04:	3fe00000 	.word	0x3fe00000
 8012f08:	4631      	mov	r1, r6
 8012f0a:	4628      	mov	r0, r5
 8012f0c:	f7ed fb9c 	bl	8000648 <__aeabi_dmul>
 8012f10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012f14:	9415      	str	r4, [sp, #84]	@ 0x54
 8012f16:	4656      	mov	r6, sl
 8012f18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f1c:	f7ed fe44 	bl	8000ba8 <__aeabi_d2iz>
 8012f20:	4605      	mov	r5, r0
 8012f22:	f7ed fb27 	bl	8000574 <__aeabi_i2d>
 8012f26:	4602      	mov	r2, r0
 8012f28:	460b      	mov	r3, r1
 8012f2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f2e:	f7ed f9d3 	bl	80002d8 <__aeabi_dsub>
 8012f32:	3530      	adds	r5, #48	@ 0x30
 8012f34:	f806 5b01 	strb.w	r5, [r6], #1
 8012f38:	4602      	mov	r2, r0
 8012f3a:	460b      	mov	r3, r1
 8012f3c:	42a6      	cmp	r6, r4
 8012f3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012f42:	f04f 0200 	mov.w	r2, #0
 8012f46:	d124      	bne.n	8012f92 <_dtoa_r+0x662>
 8012f48:	4bac      	ldr	r3, [pc, #688]	@ (80131fc <_dtoa_r+0x8cc>)
 8012f4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012f4e:	f7ed f9c5 	bl	80002dc <__adddf3>
 8012f52:	4602      	mov	r2, r0
 8012f54:	460b      	mov	r3, r1
 8012f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f5a:	f7ed fe05 	bl	8000b68 <__aeabi_dcmpgt>
 8012f5e:	2800      	cmp	r0, #0
 8012f60:	d145      	bne.n	8012fee <_dtoa_r+0x6be>
 8012f62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012f66:	49a5      	ldr	r1, [pc, #660]	@ (80131fc <_dtoa_r+0x8cc>)
 8012f68:	2000      	movs	r0, #0
 8012f6a:	f7ed f9b5 	bl	80002d8 <__aeabi_dsub>
 8012f6e:	4602      	mov	r2, r0
 8012f70:	460b      	mov	r3, r1
 8012f72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f76:	f7ed fdd9 	bl	8000b2c <__aeabi_dcmplt>
 8012f7a:	2800      	cmp	r0, #0
 8012f7c:	f43f aef5 	beq.w	8012d6a <_dtoa_r+0x43a>
 8012f80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8012f82:	1e73      	subs	r3, r6, #1
 8012f84:	9315      	str	r3, [sp, #84]	@ 0x54
 8012f86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012f8a:	2b30      	cmp	r3, #48	@ 0x30
 8012f8c:	d0f8      	beq.n	8012f80 <_dtoa_r+0x650>
 8012f8e:	9f04      	ldr	r7, [sp, #16]
 8012f90:	e73e      	b.n	8012e10 <_dtoa_r+0x4e0>
 8012f92:	4b9b      	ldr	r3, [pc, #620]	@ (8013200 <_dtoa_r+0x8d0>)
 8012f94:	f7ed fb58 	bl	8000648 <__aeabi_dmul>
 8012f98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f9c:	e7bc      	b.n	8012f18 <_dtoa_r+0x5e8>
 8012f9e:	d10c      	bne.n	8012fba <_dtoa_r+0x68a>
 8012fa0:	4b98      	ldr	r3, [pc, #608]	@ (8013204 <_dtoa_r+0x8d4>)
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012fa8:	f7ed fb4e 	bl	8000648 <__aeabi_dmul>
 8012fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012fb0:	f7ed fdd0 	bl	8000b54 <__aeabi_dcmpge>
 8012fb4:	2800      	cmp	r0, #0
 8012fb6:	f000 8157 	beq.w	8013268 <_dtoa_r+0x938>
 8012fba:	2400      	movs	r4, #0
 8012fbc:	4625      	mov	r5, r4
 8012fbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012fc0:	43db      	mvns	r3, r3
 8012fc2:	9304      	str	r3, [sp, #16]
 8012fc4:	4656      	mov	r6, sl
 8012fc6:	2700      	movs	r7, #0
 8012fc8:	4621      	mov	r1, r4
 8012fca:	4658      	mov	r0, fp
 8012fcc:	f000 fd02 	bl	80139d4 <_Bfree>
 8012fd0:	2d00      	cmp	r5, #0
 8012fd2:	d0dc      	beq.n	8012f8e <_dtoa_r+0x65e>
 8012fd4:	b12f      	cbz	r7, 8012fe2 <_dtoa_r+0x6b2>
 8012fd6:	42af      	cmp	r7, r5
 8012fd8:	d003      	beq.n	8012fe2 <_dtoa_r+0x6b2>
 8012fda:	4639      	mov	r1, r7
 8012fdc:	4658      	mov	r0, fp
 8012fde:	f000 fcf9 	bl	80139d4 <_Bfree>
 8012fe2:	4629      	mov	r1, r5
 8012fe4:	4658      	mov	r0, fp
 8012fe6:	f000 fcf5 	bl	80139d4 <_Bfree>
 8012fea:	e7d0      	b.n	8012f8e <_dtoa_r+0x65e>
 8012fec:	9704      	str	r7, [sp, #16]
 8012fee:	4633      	mov	r3, r6
 8012ff0:	461e      	mov	r6, r3
 8012ff2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012ff6:	2a39      	cmp	r2, #57	@ 0x39
 8012ff8:	d107      	bne.n	801300a <_dtoa_r+0x6da>
 8012ffa:	459a      	cmp	sl, r3
 8012ffc:	d1f8      	bne.n	8012ff0 <_dtoa_r+0x6c0>
 8012ffe:	9a04      	ldr	r2, [sp, #16]
 8013000:	3201      	adds	r2, #1
 8013002:	9204      	str	r2, [sp, #16]
 8013004:	2230      	movs	r2, #48	@ 0x30
 8013006:	f88a 2000 	strb.w	r2, [sl]
 801300a:	781a      	ldrb	r2, [r3, #0]
 801300c:	3201      	adds	r2, #1
 801300e:	701a      	strb	r2, [r3, #0]
 8013010:	e7bd      	b.n	8012f8e <_dtoa_r+0x65e>
 8013012:	4b7b      	ldr	r3, [pc, #492]	@ (8013200 <_dtoa_r+0x8d0>)
 8013014:	2200      	movs	r2, #0
 8013016:	f7ed fb17 	bl	8000648 <__aeabi_dmul>
 801301a:	2200      	movs	r2, #0
 801301c:	2300      	movs	r3, #0
 801301e:	4604      	mov	r4, r0
 8013020:	460d      	mov	r5, r1
 8013022:	f7ed fd79 	bl	8000b18 <__aeabi_dcmpeq>
 8013026:	2800      	cmp	r0, #0
 8013028:	f43f aebb 	beq.w	8012da2 <_dtoa_r+0x472>
 801302c:	e6f0      	b.n	8012e10 <_dtoa_r+0x4e0>
 801302e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013030:	2a00      	cmp	r2, #0
 8013032:	f000 80db 	beq.w	80131ec <_dtoa_r+0x8bc>
 8013036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013038:	2a01      	cmp	r2, #1
 801303a:	f300 80bf 	bgt.w	80131bc <_dtoa_r+0x88c>
 801303e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013040:	2a00      	cmp	r2, #0
 8013042:	f000 80b7 	beq.w	80131b4 <_dtoa_r+0x884>
 8013046:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801304a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801304c:	4646      	mov	r6, r8
 801304e:	9a08      	ldr	r2, [sp, #32]
 8013050:	2101      	movs	r1, #1
 8013052:	441a      	add	r2, r3
 8013054:	4658      	mov	r0, fp
 8013056:	4498      	add	r8, r3
 8013058:	9208      	str	r2, [sp, #32]
 801305a:	f000 fd6f 	bl	8013b3c <__i2b>
 801305e:	4605      	mov	r5, r0
 8013060:	b15e      	cbz	r6, 801307a <_dtoa_r+0x74a>
 8013062:	9b08      	ldr	r3, [sp, #32]
 8013064:	2b00      	cmp	r3, #0
 8013066:	dd08      	ble.n	801307a <_dtoa_r+0x74a>
 8013068:	42b3      	cmp	r3, r6
 801306a:	9a08      	ldr	r2, [sp, #32]
 801306c:	bfa8      	it	ge
 801306e:	4633      	movge	r3, r6
 8013070:	eba8 0803 	sub.w	r8, r8, r3
 8013074:	1af6      	subs	r6, r6, r3
 8013076:	1ad3      	subs	r3, r2, r3
 8013078:	9308      	str	r3, [sp, #32]
 801307a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801307c:	b1f3      	cbz	r3, 80130bc <_dtoa_r+0x78c>
 801307e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013080:	2b00      	cmp	r3, #0
 8013082:	f000 80b7 	beq.w	80131f4 <_dtoa_r+0x8c4>
 8013086:	b18c      	cbz	r4, 80130ac <_dtoa_r+0x77c>
 8013088:	4629      	mov	r1, r5
 801308a:	4622      	mov	r2, r4
 801308c:	4658      	mov	r0, fp
 801308e:	f000 fe15 	bl	8013cbc <__pow5mult>
 8013092:	464a      	mov	r2, r9
 8013094:	4601      	mov	r1, r0
 8013096:	4605      	mov	r5, r0
 8013098:	4658      	mov	r0, fp
 801309a:	f000 fd65 	bl	8013b68 <__multiply>
 801309e:	4649      	mov	r1, r9
 80130a0:	9004      	str	r0, [sp, #16]
 80130a2:	4658      	mov	r0, fp
 80130a4:	f000 fc96 	bl	80139d4 <_Bfree>
 80130a8:	9b04      	ldr	r3, [sp, #16]
 80130aa:	4699      	mov	r9, r3
 80130ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80130ae:	1b1a      	subs	r2, r3, r4
 80130b0:	d004      	beq.n	80130bc <_dtoa_r+0x78c>
 80130b2:	4649      	mov	r1, r9
 80130b4:	4658      	mov	r0, fp
 80130b6:	f000 fe01 	bl	8013cbc <__pow5mult>
 80130ba:	4681      	mov	r9, r0
 80130bc:	2101      	movs	r1, #1
 80130be:	4658      	mov	r0, fp
 80130c0:	f000 fd3c 	bl	8013b3c <__i2b>
 80130c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80130c6:	4604      	mov	r4, r0
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	f000 81cf 	beq.w	801346c <_dtoa_r+0xb3c>
 80130ce:	461a      	mov	r2, r3
 80130d0:	4601      	mov	r1, r0
 80130d2:	4658      	mov	r0, fp
 80130d4:	f000 fdf2 	bl	8013cbc <__pow5mult>
 80130d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130da:	2b01      	cmp	r3, #1
 80130dc:	4604      	mov	r4, r0
 80130de:	f300 8095 	bgt.w	801320c <_dtoa_r+0x8dc>
 80130e2:	9b02      	ldr	r3, [sp, #8]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	f040 8087 	bne.w	80131f8 <_dtoa_r+0x8c8>
 80130ea:	9b03      	ldr	r3, [sp, #12]
 80130ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	f040 8089 	bne.w	8013208 <_dtoa_r+0x8d8>
 80130f6:	9b03      	ldr	r3, [sp, #12]
 80130f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80130fc:	0d1b      	lsrs	r3, r3, #20
 80130fe:	051b      	lsls	r3, r3, #20
 8013100:	b12b      	cbz	r3, 801310e <_dtoa_r+0x7de>
 8013102:	9b08      	ldr	r3, [sp, #32]
 8013104:	3301      	adds	r3, #1
 8013106:	9308      	str	r3, [sp, #32]
 8013108:	f108 0801 	add.w	r8, r8, #1
 801310c:	2301      	movs	r3, #1
 801310e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013112:	2b00      	cmp	r3, #0
 8013114:	f000 81b0 	beq.w	8013478 <_dtoa_r+0xb48>
 8013118:	6923      	ldr	r3, [r4, #16]
 801311a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801311e:	6918      	ldr	r0, [r3, #16]
 8013120:	f000 fcc0 	bl	8013aa4 <__hi0bits>
 8013124:	f1c0 0020 	rsb	r0, r0, #32
 8013128:	9b08      	ldr	r3, [sp, #32]
 801312a:	4418      	add	r0, r3
 801312c:	f010 001f 	ands.w	r0, r0, #31
 8013130:	d077      	beq.n	8013222 <_dtoa_r+0x8f2>
 8013132:	f1c0 0320 	rsb	r3, r0, #32
 8013136:	2b04      	cmp	r3, #4
 8013138:	dd6b      	ble.n	8013212 <_dtoa_r+0x8e2>
 801313a:	9b08      	ldr	r3, [sp, #32]
 801313c:	f1c0 001c 	rsb	r0, r0, #28
 8013140:	4403      	add	r3, r0
 8013142:	4480      	add	r8, r0
 8013144:	4406      	add	r6, r0
 8013146:	9308      	str	r3, [sp, #32]
 8013148:	f1b8 0f00 	cmp.w	r8, #0
 801314c:	dd05      	ble.n	801315a <_dtoa_r+0x82a>
 801314e:	4649      	mov	r1, r9
 8013150:	4642      	mov	r2, r8
 8013152:	4658      	mov	r0, fp
 8013154:	f000 fe0c 	bl	8013d70 <__lshift>
 8013158:	4681      	mov	r9, r0
 801315a:	9b08      	ldr	r3, [sp, #32]
 801315c:	2b00      	cmp	r3, #0
 801315e:	dd05      	ble.n	801316c <_dtoa_r+0x83c>
 8013160:	4621      	mov	r1, r4
 8013162:	461a      	mov	r2, r3
 8013164:	4658      	mov	r0, fp
 8013166:	f000 fe03 	bl	8013d70 <__lshift>
 801316a:	4604      	mov	r4, r0
 801316c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801316e:	2b00      	cmp	r3, #0
 8013170:	d059      	beq.n	8013226 <_dtoa_r+0x8f6>
 8013172:	4621      	mov	r1, r4
 8013174:	4648      	mov	r0, r9
 8013176:	f000 fe67 	bl	8013e48 <__mcmp>
 801317a:	2800      	cmp	r0, #0
 801317c:	da53      	bge.n	8013226 <_dtoa_r+0x8f6>
 801317e:	1e7b      	subs	r3, r7, #1
 8013180:	9304      	str	r3, [sp, #16]
 8013182:	4649      	mov	r1, r9
 8013184:	2300      	movs	r3, #0
 8013186:	220a      	movs	r2, #10
 8013188:	4658      	mov	r0, fp
 801318a:	f000 fc45 	bl	8013a18 <__multadd>
 801318e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013190:	4681      	mov	r9, r0
 8013192:	2b00      	cmp	r3, #0
 8013194:	f000 8172 	beq.w	801347c <_dtoa_r+0xb4c>
 8013198:	2300      	movs	r3, #0
 801319a:	4629      	mov	r1, r5
 801319c:	220a      	movs	r2, #10
 801319e:	4658      	mov	r0, fp
 80131a0:	f000 fc3a 	bl	8013a18 <__multadd>
 80131a4:	9b00      	ldr	r3, [sp, #0]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	4605      	mov	r5, r0
 80131aa:	dc67      	bgt.n	801327c <_dtoa_r+0x94c>
 80131ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80131ae:	2b02      	cmp	r3, #2
 80131b0:	dc41      	bgt.n	8013236 <_dtoa_r+0x906>
 80131b2:	e063      	b.n	801327c <_dtoa_r+0x94c>
 80131b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80131b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80131ba:	e746      	b.n	801304a <_dtoa_r+0x71a>
 80131bc:	9b07      	ldr	r3, [sp, #28]
 80131be:	1e5c      	subs	r4, r3, #1
 80131c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80131c2:	42a3      	cmp	r3, r4
 80131c4:	bfbf      	itttt	lt
 80131c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80131c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80131ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80131cc:	1ae3      	sublt	r3, r4, r3
 80131ce:	bfb4      	ite	lt
 80131d0:	18d2      	addlt	r2, r2, r3
 80131d2:	1b1c      	subge	r4, r3, r4
 80131d4:	9b07      	ldr	r3, [sp, #28]
 80131d6:	bfbc      	itt	lt
 80131d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80131da:	2400      	movlt	r4, #0
 80131dc:	2b00      	cmp	r3, #0
 80131de:	bfb5      	itete	lt
 80131e0:	eba8 0603 	sublt.w	r6, r8, r3
 80131e4:	9b07      	ldrge	r3, [sp, #28]
 80131e6:	2300      	movlt	r3, #0
 80131e8:	4646      	movge	r6, r8
 80131ea:	e730      	b.n	801304e <_dtoa_r+0x71e>
 80131ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80131ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80131f0:	4646      	mov	r6, r8
 80131f2:	e735      	b.n	8013060 <_dtoa_r+0x730>
 80131f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80131f6:	e75c      	b.n	80130b2 <_dtoa_r+0x782>
 80131f8:	2300      	movs	r3, #0
 80131fa:	e788      	b.n	801310e <_dtoa_r+0x7de>
 80131fc:	3fe00000 	.word	0x3fe00000
 8013200:	40240000 	.word	0x40240000
 8013204:	40140000 	.word	0x40140000
 8013208:	9b02      	ldr	r3, [sp, #8]
 801320a:	e780      	b.n	801310e <_dtoa_r+0x7de>
 801320c:	2300      	movs	r3, #0
 801320e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013210:	e782      	b.n	8013118 <_dtoa_r+0x7e8>
 8013212:	d099      	beq.n	8013148 <_dtoa_r+0x818>
 8013214:	9a08      	ldr	r2, [sp, #32]
 8013216:	331c      	adds	r3, #28
 8013218:	441a      	add	r2, r3
 801321a:	4498      	add	r8, r3
 801321c:	441e      	add	r6, r3
 801321e:	9208      	str	r2, [sp, #32]
 8013220:	e792      	b.n	8013148 <_dtoa_r+0x818>
 8013222:	4603      	mov	r3, r0
 8013224:	e7f6      	b.n	8013214 <_dtoa_r+0x8e4>
 8013226:	9b07      	ldr	r3, [sp, #28]
 8013228:	9704      	str	r7, [sp, #16]
 801322a:	2b00      	cmp	r3, #0
 801322c:	dc20      	bgt.n	8013270 <_dtoa_r+0x940>
 801322e:	9300      	str	r3, [sp, #0]
 8013230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013232:	2b02      	cmp	r3, #2
 8013234:	dd1e      	ble.n	8013274 <_dtoa_r+0x944>
 8013236:	9b00      	ldr	r3, [sp, #0]
 8013238:	2b00      	cmp	r3, #0
 801323a:	f47f aec0 	bne.w	8012fbe <_dtoa_r+0x68e>
 801323e:	4621      	mov	r1, r4
 8013240:	2205      	movs	r2, #5
 8013242:	4658      	mov	r0, fp
 8013244:	f000 fbe8 	bl	8013a18 <__multadd>
 8013248:	4601      	mov	r1, r0
 801324a:	4604      	mov	r4, r0
 801324c:	4648      	mov	r0, r9
 801324e:	f000 fdfb 	bl	8013e48 <__mcmp>
 8013252:	2800      	cmp	r0, #0
 8013254:	f77f aeb3 	ble.w	8012fbe <_dtoa_r+0x68e>
 8013258:	4656      	mov	r6, sl
 801325a:	2331      	movs	r3, #49	@ 0x31
 801325c:	f806 3b01 	strb.w	r3, [r6], #1
 8013260:	9b04      	ldr	r3, [sp, #16]
 8013262:	3301      	adds	r3, #1
 8013264:	9304      	str	r3, [sp, #16]
 8013266:	e6ae      	b.n	8012fc6 <_dtoa_r+0x696>
 8013268:	9c07      	ldr	r4, [sp, #28]
 801326a:	9704      	str	r7, [sp, #16]
 801326c:	4625      	mov	r5, r4
 801326e:	e7f3      	b.n	8013258 <_dtoa_r+0x928>
 8013270:	9b07      	ldr	r3, [sp, #28]
 8013272:	9300      	str	r3, [sp, #0]
 8013274:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013276:	2b00      	cmp	r3, #0
 8013278:	f000 8104 	beq.w	8013484 <_dtoa_r+0xb54>
 801327c:	2e00      	cmp	r6, #0
 801327e:	dd05      	ble.n	801328c <_dtoa_r+0x95c>
 8013280:	4629      	mov	r1, r5
 8013282:	4632      	mov	r2, r6
 8013284:	4658      	mov	r0, fp
 8013286:	f000 fd73 	bl	8013d70 <__lshift>
 801328a:	4605      	mov	r5, r0
 801328c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801328e:	2b00      	cmp	r3, #0
 8013290:	d05a      	beq.n	8013348 <_dtoa_r+0xa18>
 8013292:	6869      	ldr	r1, [r5, #4]
 8013294:	4658      	mov	r0, fp
 8013296:	f000 fb5d 	bl	8013954 <_Balloc>
 801329a:	4606      	mov	r6, r0
 801329c:	b928      	cbnz	r0, 80132aa <_dtoa_r+0x97a>
 801329e:	4b84      	ldr	r3, [pc, #528]	@ (80134b0 <_dtoa_r+0xb80>)
 80132a0:	4602      	mov	r2, r0
 80132a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80132a6:	f7ff bb5a 	b.w	801295e <_dtoa_r+0x2e>
 80132aa:	692a      	ldr	r2, [r5, #16]
 80132ac:	3202      	adds	r2, #2
 80132ae:	0092      	lsls	r2, r2, #2
 80132b0:	f105 010c 	add.w	r1, r5, #12
 80132b4:	300c      	adds	r0, #12
 80132b6:	f7ff faa3 	bl	8012800 <memcpy>
 80132ba:	2201      	movs	r2, #1
 80132bc:	4631      	mov	r1, r6
 80132be:	4658      	mov	r0, fp
 80132c0:	f000 fd56 	bl	8013d70 <__lshift>
 80132c4:	f10a 0301 	add.w	r3, sl, #1
 80132c8:	9307      	str	r3, [sp, #28]
 80132ca:	9b00      	ldr	r3, [sp, #0]
 80132cc:	4453      	add	r3, sl
 80132ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80132d0:	9b02      	ldr	r3, [sp, #8]
 80132d2:	f003 0301 	and.w	r3, r3, #1
 80132d6:	462f      	mov	r7, r5
 80132d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80132da:	4605      	mov	r5, r0
 80132dc:	9b07      	ldr	r3, [sp, #28]
 80132de:	4621      	mov	r1, r4
 80132e0:	3b01      	subs	r3, #1
 80132e2:	4648      	mov	r0, r9
 80132e4:	9300      	str	r3, [sp, #0]
 80132e6:	f7ff fa99 	bl	801281c <quorem>
 80132ea:	4639      	mov	r1, r7
 80132ec:	9002      	str	r0, [sp, #8]
 80132ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80132f2:	4648      	mov	r0, r9
 80132f4:	f000 fda8 	bl	8013e48 <__mcmp>
 80132f8:	462a      	mov	r2, r5
 80132fa:	9008      	str	r0, [sp, #32]
 80132fc:	4621      	mov	r1, r4
 80132fe:	4658      	mov	r0, fp
 8013300:	f000 fdbe 	bl	8013e80 <__mdiff>
 8013304:	68c2      	ldr	r2, [r0, #12]
 8013306:	4606      	mov	r6, r0
 8013308:	bb02      	cbnz	r2, 801334c <_dtoa_r+0xa1c>
 801330a:	4601      	mov	r1, r0
 801330c:	4648      	mov	r0, r9
 801330e:	f000 fd9b 	bl	8013e48 <__mcmp>
 8013312:	4602      	mov	r2, r0
 8013314:	4631      	mov	r1, r6
 8013316:	4658      	mov	r0, fp
 8013318:	920e      	str	r2, [sp, #56]	@ 0x38
 801331a:	f000 fb5b 	bl	80139d4 <_Bfree>
 801331e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013320:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013322:	9e07      	ldr	r6, [sp, #28]
 8013324:	ea43 0102 	orr.w	r1, r3, r2
 8013328:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801332a:	4319      	orrs	r1, r3
 801332c:	d110      	bne.n	8013350 <_dtoa_r+0xa20>
 801332e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013332:	d029      	beq.n	8013388 <_dtoa_r+0xa58>
 8013334:	9b08      	ldr	r3, [sp, #32]
 8013336:	2b00      	cmp	r3, #0
 8013338:	dd02      	ble.n	8013340 <_dtoa_r+0xa10>
 801333a:	9b02      	ldr	r3, [sp, #8]
 801333c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013340:	9b00      	ldr	r3, [sp, #0]
 8013342:	f883 8000 	strb.w	r8, [r3]
 8013346:	e63f      	b.n	8012fc8 <_dtoa_r+0x698>
 8013348:	4628      	mov	r0, r5
 801334a:	e7bb      	b.n	80132c4 <_dtoa_r+0x994>
 801334c:	2201      	movs	r2, #1
 801334e:	e7e1      	b.n	8013314 <_dtoa_r+0x9e4>
 8013350:	9b08      	ldr	r3, [sp, #32]
 8013352:	2b00      	cmp	r3, #0
 8013354:	db04      	blt.n	8013360 <_dtoa_r+0xa30>
 8013356:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013358:	430b      	orrs	r3, r1
 801335a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801335c:	430b      	orrs	r3, r1
 801335e:	d120      	bne.n	80133a2 <_dtoa_r+0xa72>
 8013360:	2a00      	cmp	r2, #0
 8013362:	dded      	ble.n	8013340 <_dtoa_r+0xa10>
 8013364:	4649      	mov	r1, r9
 8013366:	2201      	movs	r2, #1
 8013368:	4658      	mov	r0, fp
 801336a:	f000 fd01 	bl	8013d70 <__lshift>
 801336e:	4621      	mov	r1, r4
 8013370:	4681      	mov	r9, r0
 8013372:	f000 fd69 	bl	8013e48 <__mcmp>
 8013376:	2800      	cmp	r0, #0
 8013378:	dc03      	bgt.n	8013382 <_dtoa_r+0xa52>
 801337a:	d1e1      	bne.n	8013340 <_dtoa_r+0xa10>
 801337c:	f018 0f01 	tst.w	r8, #1
 8013380:	d0de      	beq.n	8013340 <_dtoa_r+0xa10>
 8013382:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013386:	d1d8      	bne.n	801333a <_dtoa_r+0xa0a>
 8013388:	9a00      	ldr	r2, [sp, #0]
 801338a:	2339      	movs	r3, #57	@ 0x39
 801338c:	7013      	strb	r3, [r2, #0]
 801338e:	4633      	mov	r3, r6
 8013390:	461e      	mov	r6, r3
 8013392:	3b01      	subs	r3, #1
 8013394:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013398:	2a39      	cmp	r2, #57	@ 0x39
 801339a:	d052      	beq.n	8013442 <_dtoa_r+0xb12>
 801339c:	3201      	adds	r2, #1
 801339e:	701a      	strb	r2, [r3, #0]
 80133a0:	e612      	b.n	8012fc8 <_dtoa_r+0x698>
 80133a2:	2a00      	cmp	r2, #0
 80133a4:	dd07      	ble.n	80133b6 <_dtoa_r+0xa86>
 80133a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80133aa:	d0ed      	beq.n	8013388 <_dtoa_r+0xa58>
 80133ac:	9a00      	ldr	r2, [sp, #0]
 80133ae:	f108 0301 	add.w	r3, r8, #1
 80133b2:	7013      	strb	r3, [r2, #0]
 80133b4:	e608      	b.n	8012fc8 <_dtoa_r+0x698>
 80133b6:	9b07      	ldr	r3, [sp, #28]
 80133b8:	9a07      	ldr	r2, [sp, #28]
 80133ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80133be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80133c0:	4293      	cmp	r3, r2
 80133c2:	d028      	beq.n	8013416 <_dtoa_r+0xae6>
 80133c4:	4649      	mov	r1, r9
 80133c6:	2300      	movs	r3, #0
 80133c8:	220a      	movs	r2, #10
 80133ca:	4658      	mov	r0, fp
 80133cc:	f000 fb24 	bl	8013a18 <__multadd>
 80133d0:	42af      	cmp	r7, r5
 80133d2:	4681      	mov	r9, r0
 80133d4:	f04f 0300 	mov.w	r3, #0
 80133d8:	f04f 020a 	mov.w	r2, #10
 80133dc:	4639      	mov	r1, r7
 80133de:	4658      	mov	r0, fp
 80133e0:	d107      	bne.n	80133f2 <_dtoa_r+0xac2>
 80133e2:	f000 fb19 	bl	8013a18 <__multadd>
 80133e6:	4607      	mov	r7, r0
 80133e8:	4605      	mov	r5, r0
 80133ea:	9b07      	ldr	r3, [sp, #28]
 80133ec:	3301      	adds	r3, #1
 80133ee:	9307      	str	r3, [sp, #28]
 80133f0:	e774      	b.n	80132dc <_dtoa_r+0x9ac>
 80133f2:	f000 fb11 	bl	8013a18 <__multadd>
 80133f6:	4629      	mov	r1, r5
 80133f8:	4607      	mov	r7, r0
 80133fa:	2300      	movs	r3, #0
 80133fc:	220a      	movs	r2, #10
 80133fe:	4658      	mov	r0, fp
 8013400:	f000 fb0a 	bl	8013a18 <__multadd>
 8013404:	4605      	mov	r5, r0
 8013406:	e7f0      	b.n	80133ea <_dtoa_r+0xaba>
 8013408:	9b00      	ldr	r3, [sp, #0]
 801340a:	2b00      	cmp	r3, #0
 801340c:	bfcc      	ite	gt
 801340e:	461e      	movgt	r6, r3
 8013410:	2601      	movle	r6, #1
 8013412:	4456      	add	r6, sl
 8013414:	2700      	movs	r7, #0
 8013416:	4649      	mov	r1, r9
 8013418:	2201      	movs	r2, #1
 801341a:	4658      	mov	r0, fp
 801341c:	f000 fca8 	bl	8013d70 <__lshift>
 8013420:	4621      	mov	r1, r4
 8013422:	4681      	mov	r9, r0
 8013424:	f000 fd10 	bl	8013e48 <__mcmp>
 8013428:	2800      	cmp	r0, #0
 801342a:	dcb0      	bgt.n	801338e <_dtoa_r+0xa5e>
 801342c:	d102      	bne.n	8013434 <_dtoa_r+0xb04>
 801342e:	f018 0f01 	tst.w	r8, #1
 8013432:	d1ac      	bne.n	801338e <_dtoa_r+0xa5e>
 8013434:	4633      	mov	r3, r6
 8013436:	461e      	mov	r6, r3
 8013438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801343c:	2a30      	cmp	r2, #48	@ 0x30
 801343e:	d0fa      	beq.n	8013436 <_dtoa_r+0xb06>
 8013440:	e5c2      	b.n	8012fc8 <_dtoa_r+0x698>
 8013442:	459a      	cmp	sl, r3
 8013444:	d1a4      	bne.n	8013390 <_dtoa_r+0xa60>
 8013446:	9b04      	ldr	r3, [sp, #16]
 8013448:	3301      	adds	r3, #1
 801344a:	9304      	str	r3, [sp, #16]
 801344c:	2331      	movs	r3, #49	@ 0x31
 801344e:	f88a 3000 	strb.w	r3, [sl]
 8013452:	e5b9      	b.n	8012fc8 <_dtoa_r+0x698>
 8013454:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013456:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80134b4 <_dtoa_r+0xb84>
 801345a:	b11b      	cbz	r3, 8013464 <_dtoa_r+0xb34>
 801345c:	f10a 0308 	add.w	r3, sl, #8
 8013460:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013462:	6013      	str	r3, [r2, #0]
 8013464:	4650      	mov	r0, sl
 8013466:	b019      	add	sp, #100	@ 0x64
 8013468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801346c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801346e:	2b01      	cmp	r3, #1
 8013470:	f77f ae37 	ble.w	80130e2 <_dtoa_r+0x7b2>
 8013474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013476:	930a      	str	r3, [sp, #40]	@ 0x28
 8013478:	2001      	movs	r0, #1
 801347a:	e655      	b.n	8013128 <_dtoa_r+0x7f8>
 801347c:	9b00      	ldr	r3, [sp, #0]
 801347e:	2b00      	cmp	r3, #0
 8013480:	f77f aed6 	ble.w	8013230 <_dtoa_r+0x900>
 8013484:	4656      	mov	r6, sl
 8013486:	4621      	mov	r1, r4
 8013488:	4648      	mov	r0, r9
 801348a:	f7ff f9c7 	bl	801281c <quorem>
 801348e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8013492:	f806 8b01 	strb.w	r8, [r6], #1
 8013496:	9b00      	ldr	r3, [sp, #0]
 8013498:	eba6 020a 	sub.w	r2, r6, sl
 801349c:	4293      	cmp	r3, r2
 801349e:	ddb3      	ble.n	8013408 <_dtoa_r+0xad8>
 80134a0:	4649      	mov	r1, r9
 80134a2:	2300      	movs	r3, #0
 80134a4:	220a      	movs	r2, #10
 80134a6:	4658      	mov	r0, fp
 80134a8:	f000 fab6 	bl	8013a18 <__multadd>
 80134ac:	4681      	mov	r9, r0
 80134ae:	e7ea      	b.n	8013486 <_dtoa_r+0xb56>
 80134b0:	08015a81 	.word	0x08015a81
 80134b4:	08015a05 	.word	0x08015a05

080134b8 <_free_r>:
 80134b8:	b538      	push	{r3, r4, r5, lr}
 80134ba:	4605      	mov	r5, r0
 80134bc:	2900      	cmp	r1, #0
 80134be:	d041      	beq.n	8013544 <_free_r+0x8c>
 80134c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134c4:	1f0c      	subs	r4, r1, #4
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	bfb8      	it	lt
 80134ca:	18e4      	addlt	r4, r4, r3
 80134cc:	f7ff f864 	bl	8012598 <__malloc_lock>
 80134d0:	4a1d      	ldr	r2, [pc, #116]	@ (8013548 <_free_r+0x90>)
 80134d2:	6813      	ldr	r3, [r2, #0]
 80134d4:	b933      	cbnz	r3, 80134e4 <_free_r+0x2c>
 80134d6:	6063      	str	r3, [r4, #4]
 80134d8:	6014      	str	r4, [r2, #0]
 80134da:	4628      	mov	r0, r5
 80134dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134e0:	f7ff b860 	b.w	80125a4 <__malloc_unlock>
 80134e4:	42a3      	cmp	r3, r4
 80134e6:	d908      	bls.n	80134fa <_free_r+0x42>
 80134e8:	6820      	ldr	r0, [r4, #0]
 80134ea:	1821      	adds	r1, r4, r0
 80134ec:	428b      	cmp	r3, r1
 80134ee:	bf01      	itttt	eq
 80134f0:	6819      	ldreq	r1, [r3, #0]
 80134f2:	685b      	ldreq	r3, [r3, #4]
 80134f4:	1809      	addeq	r1, r1, r0
 80134f6:	6021      	streq	r1, [r4, #0]
 80134f8:	e7ed      	b.n	80134d6 <_free_r+0x1e>
 80134fa:	461a      	mov	r2, r3
 80134fc:	685b      	ldr	r3, [r3, #4]
 80134fe:	b10b      	cbz	r3, 8013504 <_free_r+0x4c>
 8013500:	42a3      	cmp	r3, r4
 8013502:	d9fa      	bls.n	80134fa <_free_r+0x42>
 8013504:	6811      	ldr	r1, [r2, #0]
 8013506:	1850      	adds	r0, r2, r1
 8013508:	42a0      	cmp	r0, r4
 801350a:	d10b      	bne.n	8013524 <_free_r+0x6c>
 801350c:	6820      	ldr	r0, [r4, #0]
 801350e:	4401      	add	r1, r0
 8013510:	1850      	adds	r0, r2, r1
 8013512:	4283      	cmp	r3, r0
 8013514:	6011      	str	r1, [r2, #0]
 8013516:	d1e0      	bne.n	80134da <_free_r+0x22>
 8013518:	6818      	ldr	r0, [r3, #0]
 801351a:	685b      	ldr	r3, [r3, #4]
 801351c:	6053      	str	r3, [r2, #4]
 801351e:	4408      	add	r0, r1
 8013520:	6010      	str	r0, [r2, #0]
 8013522:	e7da      	b.n	80134da <_free_r+0x22>
 8013524:	d902      	bls.n	801352c <_free_r+0x74>
 8013526:	230c      	movs	r3, #12
 8013528:	602b      	str	r3, [r5, #0]
 801352a:	e7d6      	b.n	80134da <_free_r+0x22>
 801352c:	6820      	ldr	r0, [r4, #0]
 801352e:	1821      	adds	r1, r4, r0
 8013530:	428b      	cmp	r3, r1
 8013532:	bf04      	itt	eq
 8013534:	6819      	ldreq	r1, [r3, #0]
 8013536:	685b      	ldreq	r3, [r3, #4]
 8013538:	6063      	str	r3, [r4, #4]
 801353a:	bf04      	itt	eq
 801353c:	1809      	addeq	r1, r1, r0
 801353e:	6021      	streq	r1, [r4, #0]
 8013540:	6054      	str	r4, [r2, #4]
 8013542:	e7ca      	b.n	80134da <_free_r+0x22>
 8013544:	bd38      	pop	{r3, r4, r5, pc}
 8013546:	bf00      	nop
 8013548:	200015c8 	.word	0x200015c8

0801354c <__ssputs_r>:
 801354c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013550:	688e      	ldr	r6, [r1, #8]
 8013552:	461f      	mov	r7, r3
 8013554:	42be      	cmp	r6, r7
 8013556:	680b      	ldr	r3, [r1, #0]
 8013558:	4682      	mov	sl, r0
 801355a:	460c      	mov	r4, r1
 801355c:	4690      	mov	r8, r2
 801355e:	d82d      	bhi.n	80135bc <__ssputs_r+0x70>
 8013560:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013564:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013568:	d026      	beq.n	80135b8 <__ssputs_r+0x6c>
 801356a:	6965      	ldr	r5, [r4, #20]
 801356c:	6909      	ldr	r1, [r1, #16]
 801356e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013572:	eba3 0901 	sub.w	r9, r3, r1
 8013576:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801357a:	1c7b      	adds	r3, r7, #1
 801357c:	444b      	add	r3, r9
 801357e:	106d      	asrs	r5, r5, #1
 8013580:	429d      	cmp	r5, r3
 8013582:	bf38      	it	cc
 8013584:	461d      	movcc	r5, r3
 8013586:	0553      	lsls	r3, r2, #21
 8013588:	d527      	bpl.n	80135da <__ssputs_r+0x8e>
 801358a:	4629      	mov	r1, r5
 801358c:	f7fe fdf6 	bl	801217c <_malloc_r>
 8013590:	4606      	mov	r6, r0
 8013592:	b360      	cbz	r0, 80135ee <__ssputs_r+0xa2>
 8013594:	6921      	ldr	r1, [r4, #16]
 8013596:	464a      	mov	r2, r9
 8013598:	f7ff f932 	bl	8012800 <memcpy>
 801359c:	89a3      	ldrh	r3, [r4, #12]
 801359e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80135a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80135a6:	81a3      	strh	r3, [r4, #12]
 80135a8:	6126      	str	r6, [r4, #16]
 80135aa:	6165      	str	r5, [r4, #20]
 80135ac:	444e      	add	r6, r9
 80135ae:	eba5 0509 	sub.w	r5, r5, r9
 80135b2:	6026      	str	r6, [r4, #0]
 80135b4:	60a5      	str	r5, [r4, #8]
 80135b6:	463e      	mov	r6, r7
 80135b8:	42be      	cmp	r6, r7
 80135ba:	d900      	bls.n	80135be <__ssputs_r+0x72>
 80135bc:	463e      	mov	r6, r7
 80135be:	6820      	ldr	r0, [r4, #0]
 80135c0:	4632      	mov	r2, r6
 80135c2:	4641      	mov	r1, r8
 80135c4:	f000 fdb9 	bl	801413a <memmove>
 80135c8:	68a3      	ldr	r3, [r4, #8]
 80135ca:	1b9b      	subs	r3, r3, r6
 80135cc:	60a3      	str	r3, [r4, #8]
 80135ce:	6823      	ldr	r3, [r4, #0]
 80135d0:	4433      	add	r3, r6
 80135d2:	6023      	str	r3, [r4, #0]
 80135d4:	2000      	movs	r0, #0
 80135d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135da:	462a      	mov	r2, r5
 80135dc:	f000 fd7f 	bl	80140de <_realloc_r>
 80135e0:	4606      	mov	r6, r0
 80135e2:	2800      	cmp	r0, #0
 80135e4:	d1e0      	bne.n	80135a8 <__ssputs_r+0x5c>
 80135e6:	6921      	ldr	r1, [r4, #16]
 80135e8:	4650      	mov	r0, sl
 80135ea:	f7ff ff65 	bl	80134b8 <_free_r>
 80135ee:	230c      	movs	r3, #12
 80135f0:	f8ca 3000 	str.w	r3, [sl]
 80135f4:	89a3      	ldrh	r3, [r4, #12]
 80135f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80135fa:	81a3      	strh	r3, [r4, #12]
 80135fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013600:	e7e9      	b.n	80135d6 <__ssputs_r+0x8a>
	...

08013604 <_svfiprintf_r>:
 8013604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013608:	4698      	mov	r8, r3
 801360a:	898b      	ldrh	r3, [r1, #12]
 801360c:	061b      	lsls	r3, r3, #24
 801360e:	b09d      	sub	sp, #116	@ 0x74
 8013610:	4607      	mov	r7, r0
 8013612:	460d      	mov	r5, r1
 8013614:	4614      	mov	r4, r2
 8013616:	d510      	bpl.n	801363a <_svfiprintf_r+0x36>
 8013618:	690b      	ldr	r3, [r1, #16]
 801361a:	b973      	cbnz	r3, 801363a <_svfiprintf_r+0x36>
 801361c:	2140      	movs	r1, #64	@ 0x40
 801361e:	f7fe fdad 	bl	801217c <_malloc_r>
 8013622:	6028      	str	r0, [r5, #0]
 8013624:	6128      	str	r0, [r5, #16]
 8013626:	b930      	cbnz	r0, 8013636 <_svfiprintf_r+0x32>
 8013628:	230c      	movs	r3, #12
 801362a:	603b      	str	r3, [r7, #0]
 801362c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013630:	b01d      	add	sp, #116	@ 0x74
 8013632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013636:	2340      	movs	r3, #64	@ 0x40
 8013638:	616b      	str	r3, [r5, #20]
 801363a:	2300      	movs	r3, #0
 801363c:	9309      	str	r3, [sp, #36]	@ 0x24
 801363e:	2320      	movs	r3, #32
 8013640:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013644:	f8cd 800c 	str.w	r8, [sp, #12]
 8013648:	2330      	movs	r3, #48	@ 0x30
 801364a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80137e8 <_svfiprintf_r+0x1e4>
 801364e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013652:	f04f 0901 	mov.w	r9, #1
 8013656:	4623      	mov	r3, r4
 8013658:	469a      	mov	sl, r3
 801365a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801365e:	b10a      	cbz	r2, 8013664 <_svfiprintf_r+0x60>
 8013660:	2a25      	cmp	r2, #37	@ 0x25
 8013662:	d1f9      	bne.n	8013658 <_svfiprintf_r+0x54>
 8013664:	ebba 0b04 	subs.w	fp, sl, r4
 8013668:	d00b      	beq.n	8013682 <_svfiprintf_r+0x7e>
 801366a:	465b      	mov	r3, fp
 801366c:	4622      	mov	r2, r4
 801366e:	4629      	mov	r1, r5
 8013670:	4638      	mov	r0, r7
 8013672:	f7ff ff6b 	bl	801354c <__ssputs_r>
 8013676:	3001      	adds	r0, #1
 8013678:	f000 80a7 	beq.w	80137ca <_svfiprintf_r+0x1c6>
 801367c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801367e:	445a      	add	r2, fp
 8013680:	9209      	str	r2, [sp, #36]	@ 0x24
 8013682:	f89a 3000 	ldrb.w	r3, [sl]
 8013686:	2b00      	cmp	r3, #0
 8013688:	f000 809f 	beq.w	80137ca <_svfiprintf_r+0x1c6>
 801368c:	2300      	movs	r3, #0
 801368e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013696:	f10a 0a01 	add.w	sl, sl, #1
 801369a:	9304      	str	r3, [sp, #16]
 801369c:	9307      	str	r3, [sp, #28]
 801369e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80136a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80136a4:	4654      	mov	r4, sl
 80136a6:	2205      	movs	r2, #5
 80136a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136ac:	484e      	ldr	r0, [pc, #312]	@ (80137e8 <_svfiprintf_r+0x1e4>)
 80136ae:	f7ec fdb7 	bl	8000220 <memchr>
 80136b2:	9a04      	ldr	r2, [sp, #16]
 80136b4:	b9d8      	cbnz	r0, 80136ee <_svfiprintf_r+0xea>
 80136b6:	06d0      	lsls	r0, r2, #27
 80136b8:	bf44      	itt	mi
 80136ba:	2320      	movmi	r3, #32
 80136bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80136c0:	0711      	lsls	r1, r2, #28
 80136c2:	bf44      	itt	mi
 80136c4:	232b      	movmi	r3, #43	@ 0x2b
 80136c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80136ca:	f89a 3000 	ldrb.w	r3, [sl]
 80136ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80136d0:	d015      	beq.n	80136fe <_svfiprintf_r+0xfa>
 80136d2:	9a07      	ldr	r2, [sp, #28]
 80136d4:	4654      	mov	r4, sl
 80136d6:	2000      	movs	r0, #0
 80136d8:	f04f 0c0a 	mov.w	ip, #10
 80136dc:	4621      	mov	r1, r4
 80136de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136e2:	3b30      	subs	r3, #48	@ 0x30
 80136e4:	2b09      	cmp	r3, #9
 80136e6:	d94b      	bls.n	8013780 <_svfiprintf_r+0x17c>
 80136e8:	b1b0      	cbz	r0, 8013718 <_svfiprintf_r+0x114>
 80136ea:	9207      	str	r2, [sp, #28]
 80136ec:	e014      	b.n	8013718 <_svfiprintf_r+0x114>
 80136ee:	eba0 0308 	sub.w	r3, r0, r8
 80136f2:	fa09 f303 	lsl.w	r3, r9, r3
 80136f6:	4313      	orrs	r3, r2
 80136f8:	9304      	str	r3, [sp, #16]
 80136fa:	46a2      	mov	sl, r4
 80136fc:	e7d2      	b.n	80136a4 <_svfiprintf_r+0xa0>
 80136fe:	9b03      	ldr	r3, [sp, #12]
 8013700:	1d19      	adds	r1, r3, #4
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	9103      	str	r1, [sp, #12]
 8013706:	2b00      	cmp	r3, #0
 8013708:	bfbb      	ittet	lt
 801370a:	425b      	neglt	r3, r3
 801370c:	f042 0202 	orrlt.w	r2, r2, #2
 8013710:	9307      	strge	r3, [sp, #28]
 8013712:	9307      	strlt	r3, [sp, #28]
 8013714:	bfb8      	it	lt
 8013716:	9204      	strlt	r2, [sp, #16]
 8013718:	7823      	ldrb	r3, [r4, #0]
 801371a:	2b2e      	cmp	r3, #46	@ 0x2e
 801371c:	d10a      	bne.n	8013734 <_svfiprintf_r+0x130>
 801371e:	7863      	ldrb	r3, [r4, #1]
 8013720:	2b2a      	cmp	r3, #42	@ 0x2a
 8013722:	d132      	bne.n	801378a <_svfiprintf_r+0x186>
 8013724:	9b03      	ldr	r3, [sp, #12]
 8013726:	1d1a      	adds	r2, r3, #4
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	9203      	str	r2, [sp, #12]
 801372c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013730:	3402      	adds	r4, #2
 8013732:	9305      	str	r3, [sp, #20]
 8013734:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80137f8 <_svfiprintf_r+0x1f4>
 8013738:	7821      	ldrb	r1, [r4, #0]
 801373a:	2203      	movs	r2, #3
 801373c:	4650      	mov	r0, sl
 801373e:	f7ec fd6f 	bl	8000220 <memchr>
 8013742:	b138      	cbz	r0, 8013754 <_svfiprintf_r+0x150>
 8013744:	9b04      	ldr	r3, [sp, #16]
 8013746:	eba0 000a 	sub.w	r0, r0, sl
 801374a:	2240      	movs	r2, #64	@ 0x40
 801374c:	4082      	lsls	r2, r0
 801374e:	4313      	orrs	r3, r2
 8013750:	3401      	adds	r4, #1
 8013752:	9304      	str	r3, [sp, #16]
 8013754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013758:	4824      	ldr	r0, [pc, #144]	@ (80137ec <_svfiprintf_r+0x1e8>)
 801375a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801375e:	2206      	movs	r2, #6
 8013760:	f7ec fd5e 	bl	8000220 <memchr>
 8013764:	2800      	cmp	r0, #0
 8013766:	d036      	beq.n	80137d6 <_svfiprintf_r+0x1d2>
 8013768:	4b21      	ldr	r3, [pc, #132]	@ (80137f0 <_svfiprintf_r+0x1ec>)
 801376a:	bb1b      	cbnz	r3, 80137b4 <_svfiprintf_r+0x1b0>
 801376c:	9b03      	ldr	r3, [sp, #12]
 801376e:	3307      	adds	r3, #7
 8013770:	f023 0307 	bic.w	r3, r3, #7
 8013774:	3308      	adds	r3, #8
 8013776:	9303      	str	r3, [sp, #12]
 8013778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801377a:	4433      	add	r3, r6
 801377c:	9309      	str	r3, [sp, #36]	@ 0x24
 801377e:	e76a      	b.n	8013656 <_svfiprintf_r+0x52>
 8013780:	fb0c 3202 	mla	r2, ip, r2, r3
 8013784:	460c      	mov	r4, r1
 8013786:	2001      	movs	r0, #1
 8013788:	e7a8      	b.n	80136dc <_svfiprintf_r+0xd8>
 801378a:	2300      	movs	r3, #0
 801378c:	3401      	adds	r4, #1
 801378e:	9305      	str	r3, [sp, #20]
 8013790:	4619      	mov	r1, r3
 8013792:	f04f 0c0a 	mov.w	ip, #10
 8013796:	4620      	mov	r0, r4
 8013798:	f810 2b01 	ldrb.w	r2, [r0], #1
 801379c:	3a30      	subs	r2, #48	@ 0x30
 801379e:	2a09      	cmp	r2, #9
 80137a0:	d903      	bls.n	80137aa <_svfiprintf_r+0x1a6>
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d0c6      	beq.n	8013734 <_svfiprintf_r+0x130>
 80137a6:	9105      	str	r1, [sp, #20]
 80137a8:	e7c4      	b.n	8013734 <_svfiprintf_r+0x130>
 80137aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80137ae:	4604      	mov	r4, r0
 80137b0:	2301      	movs	r3, #1
 80137b2:	e7f0      	b.n	8013796 <_svfiprintf_r+0x192>
 80137b4:	ab03      	add	r3, sp, #12
 80137b6:	9300      	str	r3, [sp, #0]
 80137b8:	462a      	mov	r2, r5
 80137ba:	4b0e      	ldr	r3, [pc, #56]	@ (80137f4 <_svfiprintf_r+0x1f0>)
 80137bc:	a904      	add	r1, sp, #16
 80137be:	4638      	mov	r0, r7
 80137c0:	f7fe fa88 	bl	8011cd4 <_printf_float>
 80137c4:	1c42      	adds	r2, r0, #1
 80137c6:	4606      	mov	r6, r0
 80137c8:	d1d6      	bne.n	8013778 <_svfiprintf_r+0x174>
 80137ca:	89ab      	ldrh	r3, [r5, #12]
 80137cc:	065b      	lsls	r3, r3, #25
 80137ce:	f53f af2d 	bmi.w	801362c <_svfiprintf_r+0x28>
 80137d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80137d4:	e72c      	b.n	8013630 <_svfiprintf_r+0x2c>
 80137d6:	ab03      	add	r3, sp, #12
 80137d8:	9300      	str	r3, [sp, #0]
 80137da:	462a      	mov	r2, r5
 80137dc:	4b05      	ldr	r3, [pc, #20]	@ (80137f4 <_svfiprintf_r+0x1f0>)
 80137de:	a904      	add	r1, sp, #16
 80137e0:	4638      	mov	r0, r7
 80137e2:	f7fe fdb9 	bl	8012358 <_printf_i>
 80137e6:	e7ed      	b.n	80137c4 <_svfiprintf_r+0x1c0>
 80137e8:	08015a92 	.word	0x08015a92
 80137ec:	08015a9c 	.word	0x08015a9c
 80137f0:	08011cd5 	.word	0x08011cd5
 80137f4:	0801354d 	.word	0x0801354d
 80137f8:	08015a98 	.word	0x08015a98

080137fc <__sflush_r>:
 80137fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013804:	0716      	lsls	r6, r2, #28
 8013806:	4605      	mov	r5, r0
 8013808:	460c      	mov	r4, r1
 801380a:	d454      	bmi.n	80138b6 <__sflush_r+0xba>
 801380c:	684b      	ldr	r3, [r1, #4]
 801380e:	2b00      	cmp	r3, #0
 8013810:	dc02      	bgt.n	8013818 <__sflush_r+0x1c>
 8013812:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013814:	2b00      	cmp	r3, #0
 8013816:	dd48      	ble.n	80138aa <__sflush_r+0xae>
 8013818:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801381a:	2e00      	cmp	r6, #0
 801381c:	d045      	beq.n	80138aa <__sflush_r+0xae>
 801381e:	2300      	movs	r3, #0
 8013820:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013824:	682f      	ldr	r7, [r5, #0]
 8013826:	6a21      	ldr	r1, [r4, #32]
 8013828:	602b      	str	r3, [r5, #0]
 801382a:	d030      	beq.n	801388e <__sflush_r+0x92>
 801382c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801382e:	89a3      	ldrh	r3, [r4, #12]
 8013830:	0759      	lsls	r1, r3, #29
 8013832:	d505      	bpl.n	8013840 <__sflush_r+0x44>
 8013834:	6863      	ldr	r3, [r4, #4]
 8013836:	1ad2      	subs	r2, r2, r3
 8013838:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801383a:	b10b      	cbz	r3, 8013840 <__sflush_r+0x44>
 801383c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801383e:	1ad2      	subs	r2, r2, r3
 8013840:	2300      	movs	r3, #0
 8013842:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013844:	6a21      	ldr	r1, [r4, #32]
 8013846:	4628      	mov	r0, r5
 8013848:	47b0      	blx	r6
 801384a:	1c43      	adds	r3, r0, #1
 801384c:	89a3      	ldrh	r3, [r4, #12]
 801384e:	d106      	bne.n	801385e <__sflush_r+0x62>
 8013850:	6829      	ldr	r1, [r5, #0]
 8013852:	291d      	cmp	r1, #29
 8013854:	d82b      	bhi.n	80138ae <__sflush_r+0xb2>
 8013856:	4a2a      	ldr	r2, [pc, #168]	@ (8013900 <__sflush_r+0x104>)
 8013858:	410a      	asrs	r2, r1
 801385a:	07d6      	lsls	r6, r2, #31
 801385c:	d427      	bmi.n	80138ae <__sflush_r+0xb2>
 801385e:	2200      	movs	r2, #0
 8013860:	6062      	str	r2, [r4, #4]
 8013862:	04d9      	lsls	r1, r3, #19
 8013864:	6922      	ldr	r2, [r4, #16]
 8013866:	6022      	str	r2, [r4, #0]
 8013868:	d504      	bpl.n	8013874 <__sflush_r+0x78>
 801386a:	1c42      	adds	r2, r0, #1
 801386c:	d101      	bne.n	8013872 <__sflush_r+0x76>
 801386e:	682b      	ldr	r3, [r5, #0]
 8013870:	b903      	cbnz	r3, 8013874 <__sflush_r+0x78>
 8013872:	6560      	str	r0, [r4, #84]	@ 0x54
 8013874:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013876:	602f      	str	r7, [r5, #0]
 8013878:	b1b9      	cbz	r1, 80138aa <__sflush_r+0xae>
 801387a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801387e:	4299      	cmp	r1, r3
 8013880:	d002      	beq.n	8013888 <__sflush_r+0x8c>
 8013882:	4628      	mov	r0, r5
 8013884:	f7ff fe18 	bl	80134b8 <_free_r>
 8013888:	2300      	movs	r3, #0
 801388a:	6363      	str	r3, [r4, #52]	@ 0x34
 801388c:	e00d      	b.n	80138aa <__sflush_r+0xae>
 801388e:	2301      	movs	r3, #1
 8013890:	4628      	mov	r0, r5
 8013892:	47b0      	blx	r6
 8013894:	4602      	mov	r2, r0
 8013896:	1c50      	adds	r0, r2, #1
 8013898:	d1c9      	bne.n	801382e <__sflush_r+0x32>
 801389a:	682b      	ldr	r3, [r5, #0]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d0c6      	beq.n	801382e <__sflush_r+0x32>
 80138a0:	2b1d      	cmp	r3, #29
 80138a2:	d001      	beq.n	80138a8 <__sflush_r+0xac>
 80138a4:	2b16      	cmp	r3, #22
 80138a6:	d11e      	bne.n	80138e6 <__sflush_r+0xea>
 80138a8:	602f      	str	r7, [r5, #0]
 80138aa:	2000      	movs	r0, #0
 80138ac:	e022      	b.n	80138f4 <__sflush_r+0xf8>
 80138ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80138b2:	b21b      	sxth	r3, r3
 80138b4:	e01b      	b.n	80138ee <__sflush_r+0xf2>
 80138b6:	690f      	ldr	r7, [r1, #16]
 80138b8:	2f00      	cmp	r7, #0
 80138ba:	d0f6      	beq.n	80138aa <__sflush_r+0xae>
 80138bc:	0793      	lsls	r3, r2, #30
 80138be:	680e      	ldr	r6, [r1, #0]
 80138c0:	bf08      	it	eq
 80138c2:	694b      	ldreq	r3, [r1, #20]
 80138c4:	600f      	str	r7, [r1, #0]
 80138c6:	bf18      	it	ne
 80138c8:	2300      	movne	r3, #0
 80138ca:	eba6 0807 	sub.w	r8, r6, r7
 80138ce:	608b      	str	r3, [r1, #8]
 80138d0:	f1b8 0f00 	cmp.w	r8, #0
 80138d4:	dde9      	ble.n	80138aa <__sflush_r+0xae>
 80138d6:	6a21      	ldr	r1, [r4, #32]
 80138d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80138da:	4643      	mov	r3, r8
 80138dc:	463a      	mov	r2, r7
 80138de:	4628      	mov	r0, r5
 80138e0:	47b0      	blx	r6
 80138e2:	2800      	cmp	r0, #0
 80138e4:	dc08      	bgt.n	80138f8 <__sflush_r+0xfc>
 80138e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80138ee:	81a3      	strh	r3, [r4, #12]
 80138f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80138f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138f8:	4407      	add	r7, r0
 80138fa:	eba8 0800 	sub.w	r8, r8, r0
 80138fe:	e7e7      	b.n	80138d0 <__sflush_r+0xd4>
 8013900:	dfbffffe 	.word	0xdfbffffe

08013904 <_fflush_r>:
 8013904:	b538      	push	{r3, r4, r5, lr}
 8013906:	690b      	ldr	r3, [r1, #16]
 8013908:	4605      	mov	r5, r0
 801390a:	460c      	mov	r4, r1
 801390c:	b913      	cbnz	r3, 8013914 <_fflush_r+0x10>
 801390e:	2500      	movs	r5, #0
 8013910:	4628      	mov	r0, r5
 8013912:	bd38      	pop	{r3, r4, r5, pc}
 8013914:	b118      	cbz	r0, 801391e <_fflush_r+0x1a>
 8013916:	6a03      	ldr	r3, [r0, #32]
 8013918:	b90b      	cbnz	r3, 801391e <_fflush_r+0x1a>
 801391a:	f7fe fef5 	bl	8012708 <__sinit>
 801391e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d0f3      	beq.n	801390e <_fflush_r+0xa>
 8013926:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013928:	07d0      	lsls	r0, r2, #31
 801392a:	d404      	bmi.n	8013936 <_fflush_r+0x32>
 801392c:	0599      	lsls	r1, r3, #22
 801392e:	d402      	bmi.n	8013936 <_fflush_r+0x32>
 8013930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013932:	f7ef fb3c 	bl	8002fae <__retarget_lock_acquire_recursive>
 8013936:	4628      	mov	r0, r5
 8013938:	4621      	mov	r1, r4
 801393a:	f7ff ff5f 	bl	80137fc <__sflush_r>
 801393e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013940:	07da      	lsls	r2, r3, #31
 8013942:	4605      	mov	r5, r0
 8013944:	d4e4      	bmi.n	8013910 <_fflush_r+0xc>
 8013946:	89a3      	ldrh	r3, [r4, #12]
 8013948:	059b      	lsls	r3, r3, #22
 801394a:	d4e1      	bmi.n	8013910 <_fflush_r+0xc>
 801394c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801394e:	f7ef fb43 	bl	8002fd8 <__retarget_lock_release_recursive>
 8013952:	e7dd      	b.n	8013910 <_fflush_r+0xc>

08013954 <_Balloc>:
 8013954:	b570      	push	{r4, r5, r6, lr}
 8013956:	69c6      	ldr	r6, [r0, #28]
 8013958:	4604      	mov	r4, r0
 801395a:	460d      	mov	r5, r1
 801395c:	b976      	cbnz	r6, 801397c <_Balloc+0x28>
 801395e:	2010      	movs	r0, #16
 8013960:	f7fe fbe2 	bl	8012128 <malloc>
 8013964:	4602      	mov	r2, r0
 8013966:	61e0      	str	r0, [r4, #28]
 8013968:	b920      	cbnz	r0, 8013974 <_Balloc+0x20>
 801396a:	4b18      	ldr	r3, [pc, #96]	@ (80139cc <_Balloc+0x78>)
 801396c:	4818      	ldr	r0, [pc, #96]	@ (80139d0 <_Balloc+0x7c>)
 801396e:	216b      	movs	r1, #107	@ 0x6b
 8013970:	f000 fc44 	bl	80141fc <__assert_func>
 8013974:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013978:	6006      	str	r6, [r0, #0]
 801397a:	60c6      	str	r6, [r0, #12]
 801397c:	69e6      	ldr	r6, [r4, #28]
 801397e:	68f3      	ldr	r3, [r6, #12]
 8013980:	b183      	cbz	r3, 80139a4 <_Balloc+0x50>
 8013982:	69e3      	ldr	r3, [r4, #28]
 8013984:	68db      	ldr	r3, [r3, #12]
 8013986:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801398a:	b9b8      	cbnz	r0, 80139bc <_Balloc+0x68>
 801398c:	2101      	movs	r1, #1
 801398e:	fa01 f605 	lsl.w	r6, r1, r5
 8013992:	1d72      	adds	r2, r6, #5
 8013994:	0092      	lsls	r2, r2, #2
 8013996:	4620      	mov	r0, r4
 8013998:	f000 fc4e 	bl	8014238 <_calloc_r>
 801399c:	b160      	cbz	r0, 80139b8 <_Balloc+0x64>
 801399e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80139a2:	e00e      	b.n	80139c2 <_Balloc+0x6e>
 80139a4:	2221      	movs	r2, #33	@ 0x21
 80139a6:	2104      	movs	r1, #4
 80139a8:	4620      	mov	r0, r4
 80139aa:	f000 fc45 	bl	8014238 <_calloc_r>
 80139ae:	69e3      	ldr	r3, [r4, #28]
 80139b0:	60f0      	str	r0, [r6, #12]
 80139b2:	68db      	ldr	r3, [r3, #12]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d1e4      	bne.n	8013982 <_Balloc+0x2e>
 80139b8:	2000      	movs	r0, #0
 80139ba:	bd70      	pop	{r4, r5, r6, pc}
 80139bc:	6802      	ldr	r2, [r0, #0]
 80139be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80139c2:	2300      	movs	r3, #0
 80139c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80139c8:	e7f7      	b.n	80139ba <_Balloc+0x66>
 80139ca:	bf00      	nop
 80139cc:	08015a12 	.word	0x08015a12
 80139d0:	08015aa3 	.word	0x08015aa3

080139d4 <_Bfree>:
 80139d4:	b570      	push	{r4, r5, r6, lr}
 80139d6:	69c6      	ldr	r6, [r0, #28]
 80139d8:	4605      	mov	r5, r0
 80139da:	460c      	mov	r4, r1
 80139dc:	b976      	cbnz	r6, 80139fc <_Bfree+0x28>
 80139de:	2010      	movs	r0, #16
 80139e0:	f7fe fba2 	bl	8012128 <malloc>
 80139e4:	4602      	mov	r2, r0
 80139e6:	61e8      	str	r0, [r5, #28]
 80139e8:	b920      	cbnz	r0, 80139f4 <_Bfree+0x20>
 80139ea:	4b09      	ldr	r3, [pc, #36]	@ (8013a10 <_Bfree+0x3c>)
 80139ec:	4809      	ldr	r0, [pc, #36]	@ (8013a14 <_Bfree+0x40>)
 80139ee:	218f      	movs	r1, #143	@ 0x8f
 80139f0:	f000 fc04 	bl	80141fc <__assert_func>
 80139f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80139f8:	6006      	str	r6, [r0, #0]
 80139fa:	60c6      	str	r6, [r0, #12]
 80139fc:	b13c      	cbz	r4, 8013a0e <_Bfree+0x3a>
 80139fe:	69eb      	ldr	r3, [r5, #28]
 8013a00:	6862      	ldr	r2, [r4, #4]
 8013a02:	68db      	ldr	r3, [r3, #12]
 8013a04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013a08:	6021      	str	r1, [r4, #0]
 8013a0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013a0e:	bd70      	pop	{r4, r5, r6, pc}
 8013a10:	08015a12 	.word	0x08015a12
 8013a14:	08015aa3 	.word	0x08015aa3

08013a18 <__multadd>:
 8013a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a1c:	690d      	ldr	r5, [r1, #16]
 8013a1e:	4607      	mov	r7, r0
 8013a20:	460c      	mov	r4, r1
 8013a22:	461e      	mov	r6, r3
 8013a24:	f101 0c14 	add.w	ip, r1, #20
 8013a28:	2000      	movs	r0, #0
 8013a2a:	f8dc 3000 	ldr.w	r3, [ip]
 8013a2e:	b299      	uxth	r1, r3
 8013a30:	fb02 6101 	mla	r1, r2, r1, r6
 8013a34:	0c1e      	lsrs	r6, r3, #16
 8013a36:	0c0b      	lsrs	r3, r1, #16
 8013a38:	fb02 3306 	mla	r3, r2, r6, r3
 8013a3c:	b289      	uxth	r1, r1
 8013a3e:	3001      	adds	r0, #1
 8013a40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013a44:	4285      	cmp	r5, r0
 8013a46:	f84c 1b04 	str.w	r1, [ip], #4
 8013a4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013a4e:	dcec      	bgt.n	8013a2a <__multadd+0x12>
 8013a50:	b30e      	cbz	r6, 8013a96 <__multadd+0x7e>
 8013a52:	68a3      	ldr	r3, [r4, #8]
 8013a54:	42ab      	cmp	r3, r5
 8013a56:	dc19      	bgt.n	8013a8c <__multadd+0x74>
 8013a58:	6861      	ldr	r1, [r4, #4]
 8013a5a:	4638      	mov	r0, r7
 8013a5c:	3101      	adds	r1, #1
 8013a5e:	f7ff ff79 	bl	8013954 <_Balloc>
 8013a62:	4680      	mov	r8, r0
 8013a64:	b928      	cbnz	r0, 8013a72 <__multadd+0x5a>
 8013a66:	4602      	mov	r2, r0
 8013a68:	4b0c      	ldr	r3, [pc, #48]	@ (8013a9c <__multadd+0x84>)
 8013a6a:	480d      	ldr	r0, [pc, #52]	@ (8013aa0 <__multadd+0x88>)
 8013a6c:	21ba      	movs	r1, #186	@ 0xba
 8013a6e:	f000 fbc5 	bl	80141fc <__assert_func>
 8013a72:	6922      	ldr	r2, [r4, #16]
 8013a74:	3202      	adds	r2, #2
 8013a76:	f104 010c 	add.w	r1, r4, #12
 8013a7a:	0092      	lsls	r2, r2, #2
 8013a7c:	300c      	adds	r0, #12
 8013a7e:	f7fe febf 	bl	8012800 <memcpy>
 8013a82:	4621      	mov	r1, r4
 8013a84:	4638      	mov	r0, r7
 8013a86:	f7ff ffa5 	bl	80139d4 <_Bfree>
 8013a8a:	4644      	mov	r4, r8
 8013a8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013a90:	3501      	adds	r5, #1
 8013a92:	615e      	str	r6, [r3, #20]
 8013a94:	6125      	str	r5, [r4, #16]
 8013a96:	4620      	mov	r0, r4
 8013a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a9c:	08015a81 	.word	0x08015a81
 8013aa0:	08015aa3 	.word	0x08015aa3

08013aa4 <__hi0bits>:
 8013aa4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	bf36      	itet	cc
 8013aac:	0403      	lslcc	r3, r0, #16
 8013aae:	2000      	movcs	r0, #0
 8013ab0:	2010      	movcc	r0, #16
 8013ab2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013ab6:	bf3c      	itt	cc
 8013ab8:	021b      	lslcc	r3, r3, #8
 8013aba:	3008      	addcc	r0, #8
 8013abc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013ac0:	bf3c      	itt	cc
 8013ac2:	011b      	lslcc	r3, r3, #4
 8013ac4:	3004      	addcc	r0, #4
 8013ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013aca:	bf3c      	itt	cc
 8013acc:	009b      	lslcc	r3, r3, #2
 8013ace:	3002      	addcc	r0, #2
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	db05      	blt.n	8013ae0 <__hi0bits+0x3c>
 8013ad4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013ad8:	f100 0001 	add.w	r0, r0, #1
 8013adc:	bf08      	it	eq
 8013ade:	2020      	moveq	r0, #32
 8013ae0:	4770      	bx	lr

08013ae2 <__lo0bits>:
 8013ae2:	6803      	ldr	r3, [r0, #0]
 8013ae4:	4602      	mov	r2, r0
 8013ae6:	f013 0007 	ands.w	r0, r3, #7
 8013aea:	d00b      	beq.n	8013b04 <__lo0bits+0x22>
 8013aec:	07d9      	lsls	r1, r3, #31
 8013aee:	d421      	bmi.n	8013b34 <__lo0bits+0x52>
 8013af0:	0798      	lsls	r0, r3, #30
 8013af2:	bf49      	itett	mi
 8013af4:	085b      	lsrmi	r3, r3, #1
 8013af6:	089b      	lsrpl	r3, r3, #2
 8013af8:	2001      	movmi	r0, #1
 8013afa:	6013      	strmi	r3, [r2, #0]
 8013afc:	bf5c      	itt	pl
 8013afe:	6013      	strpl	r3, [r2, #0]
 8013b00:	2002      	movpl	r0, #2
 8013b02:	4770      	bx	lr
 8013b04:	b299      	uxth	r1, r3
 8013b06:	b909      	cbnz	r1, 8013b0c <__lo0bits+0x2a>
 8013b08:	0c1b      	lsrs	r3, r3, #16
 8013b0a:	2010      	movs	r0, #16
 8013b0c:	b2d9      	uxtb	r1, r3
 8013b0e:	b909      	cbnz	r1, 8013b14 <__lo0bits+0x32>
 8013b10:	3008      	adds	r0, #8
 8013b12:	0a1b      	lsrs	r3, r3, #8
 8013b14:	0719      	lsls	r1, r3, #28
 8013b16:	bf04      	itt	eq
 8013b18:	091b      	lsreq	r3, r3, #4
 8013b1a:	3004      	addeq	r0, #4
 8013b1c:	0799      	lsls	r1, r3, #30
 8013b1e:	bf04      	itt	eq
 8013b20:	089b      	lsreq	r3, r3, #2
 8013b22:	3002      	addeq	r0, #2
 8013b24:	07d9      	lsls	r1, r3, #31
 8013b26:	d403      	bmi.n	8013b30 <__lo0bits+0x4e>
 8013b28:	085b      	lsrs	r3, r3, #1
 8013b2a:	f100 0001 	add.w	r0, r0, #1
 8013b2e:	d003      	beq.n	8013b38 <__lo0bits+0x56>
 8013b30:	6013      	str	r3, [r2, #0]
 8013b32:	4770      	bx	lr
 8013b34:	2000      	movs	r0, #0
 8013b36:	4770      	bx	lr
 8013b38:	2020      	movs	r0, #32
 8013b3a:	4770      	bx	lr

08013b3c <__i2b>:
 8013b3c:	b510      	push	{r4, lr}
 8013b3e:	460c      	mov	r4, r1
 8013b40:	2101      	movs	r1, #1
 8013b42:	f7ff ff07 	bl	8013954 <_Balloc>
 8013b46:	4602      	mov	r2, r0
 8013b48:	b928      	cbnz	r0, 8013b56 <__i2b+0x1a>
 8013b4a:	4b05      	ldr	r3, [pc, #20]	@ (8013b60 <__i2b+0x24>)
 8013b4c:	4805      	ldr	r0, [pc, #20]	@ (8013b64 <__i2b+0x28>)
 8013b4e:	f240 1145 	movw	r1, #325	@ 0x145
 8013b52:	f000 fb53 	bl	80141fc <__assert_func>
 8013b56:	2301      	movs	r3, #1
 8013b58:	6144      	str	r4, [r0, #20]
 8013b5a:	6103      	str	r3, [r0, #16]
 8013b5c:	bd10      	pop	{r4, pc}
 8013b5e:	bf00      	nop
 8013b60:	08015a81 	.word	0x08015a81
 8013b64:	08015aa3 	.word	0x08015aa3

08013b68 <__multiply>:
 8013b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b6c:	4614      	mov	r4, r2
 8013b6e:	690a      	ldr	r2, [r1, #16]
 8013b70:	6923      	ldr	r3, [r4, #16]
 8013b72:	429a      	cmp	r2, r3
 8013b74:	bfa8      	it	ge
 8013b76:	4623      	movge	r3, r4
 8013b78:	460f      	mov	r7, r1
 8013b7a:	bfa4      	itt	ge
 8013b7c:	460c      	movge	r4, r1
 8013b7e:	461f      	movge	r7, r3
 8013b80:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013b84:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013b88:	68a3      	ldr	r3, [r4, #8]
 8013b8a:	6861      	ldr	r1, [r4, #4]
 8013b8c:	eb0a 0609 	add.w	r6, sl, r9
 8013b90:	42b3      	cmp	r3, r6
 8013b92:	b085      	sub	sp, #20
 8013b94:	bfb8      	it	lt
 8013b96:	3101      	addlt	r1, #1
 8013b98:	f7ff fedc 	bl	8013954 <_Balloc>
 8013b9c:	b930      	cbnz	r0, 8013bac <__multiply+0x44>
 8013b9e:	4602      	mov	r2, r0
 8013ba0:	4b44      	ldr	r3, [pc, #272]	@ (8013cb4 <__multiply+0x14c>)
 8013ba2:	4845      	ldr	r0, [pc, #276]	@ (8013cb8 <__multiply+0x150>)
 8013ba4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013ba8:	f000 fb28 	bl	80141fc <__assert_func>
 8013bac:	f100 0514 	add.w	r5, r0, #20
 8013bb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013bb4:	462b      	mov	r3, r5
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	4543      	cmp	r3, r8
 8013bba:	d321      	bcc.n	8013c00 <__multiply+0x98>
 8013bbc:	f107 0114 	add.w	r1, r7, #20
 8013bc0:	f104 0214 	add.w	r2, r4, #20
 8013bc4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013bc8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013bcc:	9302      	str	r3, [sp, #8]
 8013bce:	1b13      	subs	r3, r2, r4
 8013bd0:	3b15      	subs	r3, #21
 8013bd2:	f023 0303 	bic.w	r3, r3, #3
 8013bd6:	3304      	adds	r3, #4
 8013bd8:	f104 0715 	add.w	r7, r4, #21
 8013bdc:	42ba      	cmp	r2, r7
 8013bde:	bf38      	it	cc
 8013be0:	2304      	movcc	r3, #4
 8013be2:	9301      	str	r3, [sp, #4]
 8013be4:	9b02      	ldr	r3, [sp, #8]
 8013be6:	9103      	str	r1, [sp, #12]
 8013be8:	428b      	cmp	r3, r1
 8013bea:	d80c      	bhi.n	8013c06 <__multiply+0x9e>
 8013bec:	2e00      	cmp	r6, #0
 8013bee:	dd03      	ble.n	8013bf8 <__multiply+0x90>
 8013bf0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d05b      	beq.n	8013cb0 <__multiply+0x148>
 8013bf8:	6106      	str	r6, [r0, #16]
 8013bfa:	b005      	add	sp, #20
 8013bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c00:	f843 2b04 	str.w	r2, [r3], #4
 8013c04:	e7d8      	b.n	8013bb8 <__multiply+0x50>
 8013c06:	f8b1 a000 	ldrh.w	sl, [r1]
 8013c0a:	f1ba 0f00 	cmp.w	sl, #0
 8013c0e:	d024      	beq.n	8013c5a <__multiply+0xf2>
 8013c10:	f104 0e14 	add.w	lr, r4, #20
 8013c14:	46a9      	mov	r9, r5
 8013c16:	f04f 0c00 	mov.w	ip, #0
 8013c1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013c1e:	f8d9 3000 	ldr.w	r3, [r9]
 8013c22:	fa1f fb87 	uxth.w	fp, r7
 8013c26:	b29b      	uxth	r3, r3
 8013c28:	fb0a 330b 	mla	r3, sl, fp, r3
 8013c2c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013c30:	f8d9 7000 	ldr.w	r7, [r9]
 8013c34:	4463      	add	r3, ip
 8013c36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013c3a:	fb0a c70b 	mla	r7, sl, fp, ip
 8013c3e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013c42:	b29b      	uxth	r3, r3
 8013c44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013c48:	4572      	cmp	r2, lr
 8013c4a:	f849 3b04 	str.w	r3, [r9], #4
 8013c4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013c52:	d8e2      	bhi.n	8013c1a <__multiply+0xb2>
 8013c54:	9b01      	ldr	r3, [sp, #4]
 8013c56:	f845 c003 	str.w	ip, [r5, r3]
 8013c5a:	9b03      	ldr	r3, [sp, #12]
 8013c5c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013c60:	3104      	adds	r1, #4
 8013c62:	f1b9 0f00 	cmp.w	r9, #0
 8013c66:	d021      	beq.n	8013cac <__multiply+0x144>
 8013c68:	682b      	ldr	r3, [r5, #0]
 8013c6a:	f104 0c14 	add.w	ip, r4, #20
 8013c6e:	46ae      	mov	lr, r5
 8013c70:	f04f 0a00 	mov.w	sl, #0
 8013c74:	f8bc b000 	ldrh.w	fp, [ip]
 8013c78:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013c7c:	fb09 770b 	mla	r7, r9, fp, r7
 8013c80:	4457      	add	r7, sl
 8013c82:	b29b      	uxth	r3, r3
 8013c84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013c88:	f84e 3b04 	str.w	r3, [lr], #4
 8013c8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013c90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013c94:	f8be 3000 	ldrh.w	r3, [lr]
 8013c98:	fb09 330a 	mla	r3, r9, sl, r3
 8013c9c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013ca0:	4562      	cmp	r2, ip
 8013ca2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013ca6:	d8e5      	bhi.n	8013c74 <__multiply+0x10c>
 8013ca8:	9f01      	ldr	r7, [sp, #4]
 8013caa:	51eb      	str	r3, [r5, r7]
 8013cac:	3504      	adds	r5, #4
 8013cae:	e799      	b.n	8013be4 <__multiply+0x7c>
 8013cb0:	3e01      	subs	r6, #1
 8013cb2:	e79b      	b.n	8013bec <__multiply+0x84>
 8013cb4:	08015a81 	.word	0x08015a81
 8013cb8:	08015aa3 	.word	0x08015aa3

08013cbc <__pow5mult>:
 8013cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cc0:	4615      	mov	r5, r2
 8013cc2:	f012 0203 	ands.w	r2, r2, #3
 8013cc6:	4607      	mov	r7, r0
 8013cc8:	460e      	mov	r6, r1
 8013cca:	d007      	beq.n	8013cdc <__pow5mult+0x20>
 8013ccc:	4c25      	ldr	r4, [pc, #148]	@ (8013d64 <__pow5mult+0xa8>)
 8013cce:	3a01      	subs	r2, #1
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013cd6:	f7ff fe9f 	bl	8013a18 <__multadd>
 8013cda:	4606      	mov	r6, r0
 8013cdc:	10ad      	asrs	r5, r5, #2
 8013cde:	d03d      	beq.n	8013d5c <__pow5mult+0xa0>
 8013ce0:	69fc      	ldr	r4, [r7, #28]
 8013ce2:	b97c      	cbnz	r4, 8013d04 <__pow5mult+0x48>
 8013ce4:	2010      	movs	r0, #16
 8013ce6:	f7fe fa1f 	bl	8012128 <malloc>
 8013cea:	4602      	mov	r2, r0
 8013cec:	61f8      	str	r0, [r7, #28]
 8013cee:	b928      	cbnz	r0, 8013cfc <__pow5mult+0x40>
 8013cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8013d68 <__pow5mult+0xac>)
 8013cf2:	481e      	ldr	r0, [pc, #120]	@ (8013d6c <__pow5mult+0xb0>)
 8013cf4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013cf8:	f000 fa80 	bl	80141fc <__assert_func>
 8013cfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013d00:	6004      	str	r4, [r0, #0]
 8013d02:	60c4      	str	r4, [r0, #12]
 8013d04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013d08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013d0c:	b94c      	cbnz	r4, 8013d22 <__pow5mult+0x66>
 8013d0e:	f240 2171 	movw	r1, #625	@ 0x271
 8013d12:	4638      	mov	r0, r7
 8013d14:	f7ff ff12 	bl	8013b3c <__i2b>
 8013d18:	2300      	movs	r3, #0
 8013d1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8013d1e:	4604      	mov	r4, r0
 8013d20:	6003      	str	r3, [r0, #0]
 8013d22:	f04f 0900 	mov.w	r9, #0
 8013d26:	07eb      	lsls	r3, r5, #31
 8013d28:	d50a      	bpl.n	8013d40 <__pow5mult+0x84>
 8013d2a:	4631      	mov	r1, r6
 8013d2c:	4622      	mov	r2, r4
 8013d2e:	4638      	mov	r0, r7
 8013d30:	f7ff ff1a 	bl	8013b68 <__multiply>
 8013d34:	4631      	mov	r1, r6
 8013d36:	4680      	mov	r8, r0
 8013d38:	4638      	mov	r0, r7
 8013d3a:	f7ff fe4b 	bl	80139d4 <_Bfree>
 8013d3e:	4646      	mov	r6, r8
 8013d40:	106d      	asrs	r5, r5, #1
 8013d42:	d00b      	beq.n	8013d5c <__pow5mult+0xa0>
 8013d44:	6820      	ldr	r0, [r4, #0]
 8013d46:	b938      	cbnz	r0, 8013d58 <__pow5mult+0x9c>
 8013d48:	4622      	mov	r2, r4
 8013d4a:	4621      	mov	r1, r4
 8013d4c:	4638      	mov	r0, r7
 8013d4e:	f7ff ff0b 	bl	8013b68 <__multiply>
 8013d52:	6020      	str	r0, [r4, #0]
 8013d54:	f8c0 9000 	str.w	r9, [r0]
 8013d58:	4604      	mov	r4, r0
 8013d5a:	e7e4      	b.n	8013d26 <__pow5mult+0x6a>
 8013d5c:	4630      	mov	r0, r6
 8013d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d62:	bf00      	nop
 8013d64:	08015afc 	.word	0x08015afc
 8013d68:	08015a12 	.word	0x08015a12
 8013d6c:	08015aa3 	.word	0x08015aa3

08013d70 <__lshift>:
 8013d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d74:	460c      	mov	r4, r1
 8013d76:	6849      	ldr	r1, [r1, #4]
 8013d78:	6923      	ldr	r3, [r4, #16]
 8013d7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013d7e:	68a3      	ldr	r3, [r4, #8]
 8013d80:	4607      	mov	r7, r0
 8013d82:	4691      	mov	r9, r2
 8013d84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013d88:	f108 0601 	add.w	r6, r8, #1
 8013d8c:	42b3      	cmp	r3, r6
 8013d8e:	db0b      	blt.n	8013da8 <__lshift+0x38>
 8013d90:	4638      	mov	r0, r7
 8013d92:	f7ff fddf 	bl	8013954 <_Balloc>
 8013d96:	4605      	mov	r5, r0
 8013d98:	b948      	cbnz	r0, 8013dae <__lshift+0x3e>
 8013d9a:	4602      	mov	r2, r0
 8013d9c:	4b28      	ldr	r3, [pc, #160]	@ (8013e40 <__lshift+0xd0>)
 8013d9e:	4829      	ldr	r0, [pc, #164]	@ (8013e44 <__lshift+0xd4>)
 8013da0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013da4:	f000 fa2a 	bl	80141fc <__assert_func>
 8013da8:	3101      	adds	r1, #1
 8013daa:	005b      	lsls	r3, r3, #1
 8013dac:	e7ee      	b.n	8013d8c <__lshift+0x1c>
 8013dae:	2300      	movs	r3, #0
 8013db0:	f100 0114 	add.w	r1, r0, #20
 8013db4:	f100 0210 	add.w	r2, r0, #16
 8013db8:	4618      	mov	r0, r3
 8013dba:	4553      	cmp	r3, sl
 8013dbc:	db33      	blt.n	8013e26 <__lshift+0xb6>
 8013dbe:	6920      	ldr	r0, [r4, #16]
 8013dc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013dc4:	f104 0314 	add.w	r3, r4, #20
 8013dc8:	f019 091f 	ands.w	r9, r9, #31
 8013dcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013dd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013dd4:	d02b      	beq.n	8013e2e <__lshift+0xbe>
 8013dd6:	f1c9 0e20 	rsb	lr, r9, #32
 8013dda:	468a      	mov	sl, r1
 8013ddc:	2200      	movs	r2, #0
 8013dde:	6818      	ldr	r0, [r3, #0]
 8013de0:	fa00 f009 	lsl.w	r0, r0, r9
 8013de4:	4310      	orrs	r0, r2
 8013de6:	f84a 0b04 	str.w	r0, [sl], #4
 8013dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8013dee:	459c      	cmp	ip, r3
 8013df0:	fa22 f20e 	lsr.w	r2, r2, lr
 8013df4:	d8f3      	bhi.n	8013dde <__lshift+0x6e>
 8013df6:	ebac 0304 	sub.w	r3, ip, r4
 8013dfa:	3b15      	subs	r3, #21
 8013dfc:	f023 0303 	bic.w	r3, r3, #3
 8013e00:	3304      	adds	r3, #4
 8013e02:	f104 0015 	add.w	r0, r4, #21
 8013e06:	4584      	cmp	ip, r0
 8013e08:	bf38      	it	cc
 8013e0a:	2304      	movcc	r3, #4
 8013e0c:	50ca      	str	r2, [r1, r3]
 8013e0e:	b10a      	cbz	r2, 8013e14 <__lshift+0xa4>
 8013e10:	f108 0602 	add.w	r6, r8, #2
 8013e14:	3e01      	subs	r6, #1
 8013e16:	4638      	mov	r0, r7
 8013e18:	612e      	str	r6, [r5, #16]
 8013e1a:	4621      	mov	r1, r4
 8013e1c:	f7ff fdda 	bl	80139d4 <_Bfree>
 8013e20:	4628      	mov	r0, r5
 8013e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e26:	f842 0f04 	str.w	r0, [r2, #4]!
 8013e2a:	3301      	adds	r3, #1
 8013e2c:	e7c5      	b.n	8013dba <__lshift+0x4a>
 8013e2e:	3904      	subs	r1, #4
 8013e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e34:	f841 2f04 	str.w	r2, [r1, #4]!
 8013e38:	459c      	cmp	ip, r3
 8013e3a:	d8f9      	bhi.n	8013e30 <__lshift+0xc0>
 8013e3c:	e7ea      	b.n	8013e14 <__lshift+0xa4>
 8013e3e:	bf00      	nop
 8013e40:	08015a81 	.word	0x08015a81
 8013e44:	08015aa3 	.word	0x08015aa3

08013e48 <__mcmp>:
 8013e48:	690a      	ldr	r2, [r1, #16]
 8013e4a:	4603      	mov	r3, r0
 8013e4c:	6900      	ldr	r0, [r0, #16]
 8013e4e:	1a80      	subs	r0, r0, r2
 8013e50:	b530      	push	{r4, r5, lr}
 8013e52:	d10e      	bne.n	8013e72 <__mcmp+0x2a>
 8013e54:	3314      	adds	r3, #20
 8013e56:	3114      	adds	r1, #20
 8013e58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013e5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013e60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013e64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013e68:	4295      	cmp	r5, r2
 8013e6a:	d003      	beq.n	8013e74 <__mcmp+0x2c>
 8013e6c:	d205      	bcs.n	8013e7a <__mcmp+0x32>
 8013e6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013e72:	bd30      	pop	{r4, r5, pc}
 8013e74:	42a3      	cmp	r3, r4
 8013e76:	d3f3      	bcc.n	8013e60 <__mcmp+0x18>
 8013e78:	e7fb      	b.n	8013e72 <__mcmp+0x2a>
 8013e7a:	2001      	movs	r0, #1
 8013e7c:	e7f9      	b.n	8013e72 <__mcmp+0x2a>
	...

08013e80 <__mdiff>:
 8013e80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e84:	4689      	mov	r9, r1
 8013e86:	4606      	mov	r6, r0
 8013e88:	4611      	mov	r1, r2
 8013e8a:	4648      	mov	r0, r9
 8013e8c:	4614      	mov	r4, r2
 8013e8e:	f7ff ffdb 	bl	8013e48 <__mcmp>
 8013e92:	1e05      	subs	r5, r0, #0
 8013e94:	d112      	bne.n	8013ebc <__mdiff+0x3c>
 8013e96:	4629      	mov	r1, r5
 8013e98:	4630      	mov	r0, r6
 8013e9a:	f7ff fd5b 	bl	8013954 <_Balloc>
 8013e9e:	4602      	mov	r2, r0
 8013ea0:	b928      	cbnz	r0, 8013eae <__mdiff+0x2e>
 8013ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8013fa0 <__mdiff+0x120>)
 8013ea4:	f240 2137 	movw	r1, #567	@ 0x237
 8013ea8:	483e      	ldr	r0, [pc, #248]	@ (8013fa4 <__mdiff+0x124>)
 8013eaa:	f000 f9a7 	bl	80141fc <__assert_func>
 8013eae:	2301      	movs	r3, #1
 8013eb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013eb4:	4610      	mov	r0, r2
 8013eb6:	b003      	add	sp, #12
 8013eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ebc:	bfbc      	itt	lt
 8013ebe:	464b      	movlt	r3, r9
 8013ec0:	46a1      	movlt	r9, r4
 8013ec2:	4630      	mov	r0, r6
 8013ec4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013ec8:	bfba      	itte	lt
 8013eca:	461c      	movlt	r4, r3
 8013ecc:	2501      	movlt	r5, #1
 8013ece:	2500      	movge	r5, #0
 8013ed0:	f7ff fd40 	bl	8013954 <_Balloc>
 8013ed4:	4602      	mov	r2, r0
 8013ed6:	b918      	cbnz	r0, 8013ee0 <__mdiff+0x60>
 8013ed8:	4b31      	ldr	r3, [pc, #196]	@ (8013fa0 <__mdiff+0x120>)
 8013eda:	f240 2145 	movw	r1, #581	@ 0x245
 8013ede:	e7e3      	b.n	8013ea8 <__mdiff+0x28>
 8013ee0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013ee4:	6926      	ldr	r6, [r4, #16]
 8013ee6:	60c5      	str	r5, [r0, #12]
 8013ee8:	f109 0310 	add.w	r3, r9, #16
 8013eec:	f109 0514 	add.w	r5, r9, #20
 8013ef0:	f104 0e14 	add.w	lr, r4, #20
 8013ef4:	f100 0b14 	add.w	fp, r0, #20
 8013ef8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013efc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013f00:	9301      	str	r3, [sp, #4]
 8013f02:	46d9      	mov	r9, fp
 8013f04:	f04f 0c00 	mov.w	ip, #0
 8013f08:	9b01      	ldr	r3, [sp, #4]
 8013f0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013f0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013f12:	9301      	str	r3, [sp, #4]
 8013f14:	fa1f f38a 	uxth.w	r3, sl
 8013f18:	4619      	mov	r1, r3
 8013f1a:	b283      	uxth	r3, r0
 8013f1c:	1acb      	subs	r3, r1, r3
 8013f1e:	0c00      	lsrs	r0, r0, #16
 8013f20:	4463      	add	r3, ip
 8013f22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013f26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013f2a:	b29b      	uxth	r3, r3
 8013f2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013f30:	4576      	cmp	r6, lr
 8013f32:	f849 3b04 	str.w	r3, [r9], #4
 8013f36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013f3a:	d8e5      	bhi.n	8013f08 <__mdiff+0x88>
 8013f3c:	1b33      	subs	r3, r6, r4
 8013f3e:	3b15      	subs	r3, #21
 8013f40:	f023 0303 	bic.w	r3, r3, #3
 8013f44:	3415      	adds	r4, #21
 8013f46:	3304      	adds	r3, #4
 8013f48:	42a6      	cmp	r6, r4
 8013f4a:	bf38      	it	cc
 8013f4c:	2304      	movcc	r3, #4
 8013f4e:	441d      	add	r5, r3
 8013f50:	445b      	add	r3, fp
 8013f52:	461e      	mov	r6, r3
 8013f54:	462c      	mov	r4, r5
 8013f56:	4544      	cmp	r4, r8
 8013f58:	d30e      	bcc.n	8013f78 <__mdiff+0xf8>
 8013f5a:	f108 0103 	add.w	r1, r8, #3
 8013f5e:	1b49      	subs	r1, r1, r5
 8013f60:	f021 0103 	bic.w	r1, r1, #3
 8013f64:	3d03      	subs	r5, #3
 8013f66:	45a8      	cmp	r8, r5
 8013f68:	bf38      	it	cc
 8013f6a:	2100      	movcc	r1, #0
 8013f6c:	440b      	add	r3, r1
 8013f6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013f72:	b191      	cbz	r1, 8013f9a <__mdiff+0x11a>
 8013f74:	6117      	str	r7, [r2, #16]
 8013f76:	e79d      	b.n	8013eb4 <__mdiff+0x34>
 8013f78:	f854 1b04 	ldr.w	r1, [r4], #4
 8013f7c:	46e6      	mov	lr, ip
 8013f7e:	0c08      	lsrs	r0, r1, #16
 8013f80:	fa1c fc81 	uxtah	ip, ip, r1
 8013f84:	4471      	add	r1, lr
 8013f86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013f8a:	b289      	uxth	r1, r1
 8013f8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013f90:	f846 1b04 	str.w	r1, [r6], #4
 8013f94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013f98:	e7dd      	b.n	8013f56 <__mdiff+0xd6>
 8013f9a:	3f01      	subs	r7, #1
 8013f9c:	e7e7      	b.n	8013f6e <__mdiff+0xee>
 8013f9e:	bf00      	nop
 8013fa0:	08015a81 	.word	0x08015a81
 8013fa4:	08015aa3 	.word	0x08015aa3

08013fa8 <__d2b>:
 8013fa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013fac:	460f      	mov	r7, r1
 8013fae:	2101      	movs	r1, #1
 8013fb0:	ec59 8b10 	vmov	r8, r9, d0
 8013fb4:	4616      	mov	r6, r2
 8013fb6:	f7ff fccd 	bl	8013954 <_Balloc>
 8013fba:	4604      	mov	r4, r0
 8013fbc:	b930      	cbnz	r0, 8013fcc <__d2b+0x24>
 8013fbe:	4602      	mov	r2, r0
 8013fc0:	4b23      	ldr	r3, [pc, #140]	@ (8014050 <__d2b+0xa8>)
 8013fc2:	4824      	ldr	r0, [pc, #144]	@ (8014054 <__d2b+0xac>)
 8013fc4:	f240 310f 	movw	r1, #783	@ 0x30f
 8013fc8:	f000 f918 	bl	80141fc <__assert_func>
 8013fcc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013fd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013fd4:	b10d      	cbz	r5, 8013fda <__d2b+0x32>
 8013fd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013fda:	9301      	str	r3, [sp, #4]
 8013fdc:	f1b8 0300 	subs.w	r3, r8, #0
 8013fe0:	d023      	beq.n	801402a <__d2b+0x82>
 8013fe2:	4668      	mov	r0, sp
 8013fe4:	9300      	str	r3, [sp, #0]
 8013fe6:	f7ff fd7c 	bl	8013ae2 <__lo0bits>
 8013fea:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013fee:	b1d0      	cbz	r0, 8014026 <__d2b+0x7e>
 8013ff0:	f1c0 0320 	rsb	r3, r0, #32
 8013ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8013ff8:	430b      	orrs	r3, r1
 8013ffa:	40c2      	lsrs	r2, r0
 8013ffc:	6163      	str	r3, [r4, #20]
 8013ffe:	9201      	str	r2, [sp, #4]
 8014000:	9b01      	ldr	r3, [sp, #4]
 8014002:	61a3      	str	r3, [r4, #24]
 8014004:	2b00      	cmp	r3, #0
 8014006:	bf0c      	ite	eq
 8014008:	2201      	moveq	r2, #1
 801400a:	2202      	movne	r2, #2
 801400c:	6122      	str	r2, [r4, #16]
 801400e:	b1a5      	cbz	r5, 801403a <__d2b+0x92>
 8014010:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014014:	4405      	add	r5, r0
 8014016:	603d      	str	r5, [r7, #0]
 8014018:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801401c:	6030      	str	r0, [r6, #0]
 801401e:	4620      	mov	r0, r4
 8014020:	b003      	add	sp, #12
 8014022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014026:	6161      	str	r1, [r4, #20]
 8014028:	e7ea      	b.n	8014000 <__d2b+0x58>
 801402a:	a801      	add	r0, sp, #4
 801402c:	f7ff fd59 	bl	8013ae2 <__lo0bits>
 8014030:	9b01      	ldr	r3, [sp, #4]
 8014032:	6163      	str	r3, [r4, #20]
 8014034:	3020      	adds	r0, #32
 8014036:	2201      	movs	r2, #1
 8014038:	e7e8      	b.n	801400c <__d2b+0x64>
 801403a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801403e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014042:	6038      	str	r0, [r7, #0]
 8014044:	6918      	ldr	r0, [r3, #16]
 8014046:	f7ff fd2d 	bl	8013aa4 <__hi0bits>
 801404a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801404e:	e7e5      	b.n	801401c <__d2b+0x74>
 8014050:	08015a81 	.word	0x08015a81
 8014054:	08015aa3 	.word	0x08015aa3

08014058 <__sread>:
 8014058:	b510      	push	{r4, lr}
 801405a:	460c      	mov	r4, r1
 801405c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014060:	f000 f8a8 	bl	80141b4 <_read_r>
 8014064:	2800      	cmp	r0, #0
 8014066:	bfab      	itete	ge
 8014068:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801406a:	89a3      	ldrhlt	r3, [r4, #12]
 801406c:	181b      	addge	r3, r3, r0
 801406e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014072:	bfac      	ite	ge
 8014074:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014076:	81a3      	strhlt	r3, [r4, #12]
 8014078:	bd10      	pop	{r4, pc}

0801407a <__swrite>:
 801407a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801407e:	461f      	mov	r7, r3
 8014080:	898b      	ldrh	r3, [r1, #12]
 8014082:	05db      	lsls	r3, r3, #23
 8014084:	4605      	mov	r5, r0
 8014086:	460c      	mov	r4, r1
 8014088:	4616      	mov	r6, r2
 801408a:	d505      	bpl.n	8014098 <__swrite+0x1e>
 801408c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014090:	2302      	movs	r3, #2
 8014092:	2200      	movs	r2, #0
 8014094:	f000 f87c 	bl	8014190 <_lseek_r>
 8014098:	89a3      	ldrh	r3, [r4, #12]
 801409a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801409e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80140a2:	81a3      	strh	r3, [r4, #12]
 80140a4:	4632      	mov	r2, r6
 80140a6:	463b      	mov	r3, r7
 80140a8:	4628      	mov	r0, r5
 80140aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140ae:	f000 b893 	b.w	80141d8 <_write_r>

080140b2 <__sseek>:
 80140b2:	b510      	push	{r4, lr}
 80140b4:	460c      	mov	r4, r1
 80140b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140ba:	f000 f869 	bl	8014190 <_lseek_r>
 80140be:	1c43      	adds	r3, r0, #1
 80140c0:	89a3      	ldrh	r3, [r4, #12]
 80140c2:	bf15      	itete	ne
 80140c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80140c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80140ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80140ce:	81a3      	strheq	r3, [r4, #12]
 80140d0:	bf18      	it	ne
 80140d2:	81a3      	strhne	r3, [r4, #12]
 80140d4:	bd10      	pop	{r4, pc}

080140d6 <__sclose>:
 80140d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140da:	f000 b849 	b.w	8014170 <_close_r>

080140de <_realloc_r>:
 80140de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140e2:	4680      	mov	r8, r0
 80140e4:	4615      	mov	r5, r2
 80140e6:	460c      	mov	r4, r1
 80140e8:	b921      	cbnz	r1, 80140f4 <_realloc_r+0x16>
 80140ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140ee:	4611      	mov	r1, r2
 80140f0:	f7fe b844 	b.w	801217c <_malloc_r>
 80140f4:	b92a      	cbnz	r2, 8014102 <_realloc_r+0x24>
 80140f6:	f7ff f9df 	bl	80134b8 <_free_r>
 80140fa:	2400      	movs	r4, #0
 80140fc:	4620      	mov	r0, r4
 80140fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014102:	f000 f8bf 	bl	8014284 <_malloc_usable_size_r>
 8014106:	4285      	cmp	r5, r0
 8014108:	4606      	mov	r6, r0
 801410a:	d802      	bhi.n	8014112 <_realloc_r+0x34>
 801410c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014110:	d8f4      	bhi.n	80140fc <_realloc_r+0x1e>
 8014112:	4629      	mov	r1, r5
 8014114:	4640      	mov	r0, r8
 8014116:	f7fe f831 	bl	801217c <_malloc_r>
 801411a:	4607      	mov	r7, r0
 801411c:	2800      	cmp	r0, #0
 801411e:	d0ec      	beq.n	80140fa <_realloc_r+0x1c>
 8014120:	42b5      	cmp	r5, r6
 8014122:	462a      	mov	r2, r5
 8014124:	4621      	mov	r1, r4
 8014126:	bf28      	it	cs
 8014128:	4632      	movcs	r2, r6
 801412a:	f7fe fb69 	bl	8012800 <memcpy>
 801412e:	4621      	mov	r1, r4
 8014130:	4640      	mov	r0, r8
 8014132:	f7ff f9c1 	bl	80134b8 <_free_r>
 8014136:	463c      	mov	r4, r7
 8014138:	e7e0      	b.n	80140fc <_realloc_r+0x1e>

0801413a <memmove>:
 801413a:	4288      	cmp	r0, r1
 801413c:	b510      	push	{r4, lr}
 801413e:	eb01 0402 	add.w	r4, r1, r2
 8014142:	d902      	bls.n	801414a <memmove+0x10>
 8014144:	4284      	cmp	r4, r0
 8014146:	4623      	mov	r3, r4
 8014148:	d807      	bhi.n	801415a <memmove+0x20>
 801414a:	1e43      	subs	r3, r0, #1
 801414c:	42a1      	cmp	r1, r4
 801414e:	d008      	beq.n	8014162 <memmove+0x28>
 8014150:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014154:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014158:	e7f8      	b.n	801414c <memmove+0x12>
 801415a:	4402      	add	r2, r0
 801415c:	4601      	mov	r1, r0
 801415e:	428a      	cmp	r2, r1
 8014160:	d100      	bne.n	8014164 <memmove+0x2a>
 8014162:	bd10      	pop	{r4, pc}
 8014164:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014168:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801416c:	e7f7      	b.n	801415e <memmove+0x24>
	...

08014170 <_close_r>:
 8014170:	b538      	push	{r3, r4, r5, lr}
 8014172:	4d06      	ldr	r5, [pc, #24]	@ (801418c <_close_r+0x1c>)
 8014174:	2300      	movs	r3, #0
 8014176:	4604      	mov	r4, r0
 8014178:	4608      	mov	r0, r1
 801417a:	602b      	str	r3, [r5, #0]
 801417c:	f7ee fdd0 	bl	8002d20 <_close>
 8014180:	1c43      	adds	r3, r0, #1
 8014182:	d102      	bne.n	801418a <_close_r+0x1a>
 8014184:	682b      	ldr	r3, [r5, #0]
 8014186:	b103      	cbz	r3, 801418a <_close_r+0x1a>
 8014188:	6023      	str	r3, [r4, #0]
 801418a:	bd38      	pop	{r3, r4, r5, pc}
 801418c:	20001708 	.word	0x20001708

08014190 <_lseek_r>:
 8014190:	b538      	push	{r3, r4, r5, lr}
 8014192:	4d07      	ldr	r5, [pc, #28]	@ (80141b0 <_lseek_r+0x20>)
 8014194:	4604      	mov	r4, r0
 8014196:	4608      	mov	r0, r1
 8014198:	4611      	mov	r1, r2
 801419a:	2200      	movs	r2, #0
 801419c:	602a      	str	r2, [r5, #0]
 801419e:	461a      	mov	r2, r3
 80141a0:	f7ee fde5 	bl	8002d6e <_lseek>
 80141a4:	1c43      	adds	r3, r0, #1
 80141a6:	d102      	bne.n	80141ae <_lseek_r+0x1e>
 80141a8:	682b      	ldr	r3, [r5, #0]
 80141aa:	b103      	cbz	r3, 80141ae <_lseek_r+0x1e>
 80141ac:	6023      	str	r3, [r4, #0]
 80141ae:	bd38      	pop	{r3, r4, r5, pc}
 80141b0:	20001708 	.word	0x20001708

080141b4 <_read_r>:
 80141b4:	b538      	push	{r3, r4, r5, lr}
 80141b6:	4d07      	ldr	r5, [pc, #28]	@ (80141d4 <_read_r+0x20>)
 80141b8:	4604      	mov	r4, r0
 80141ba:	4608      	mov	r0, r1
 80141bc:	4611      	mov	r1, r2
 80141be:	2200      	movs	r2, #0
 80141c0:	602a      	str	r2, [r5, #0]
 80141c2:	461a      	mov	r2, r3
 80141c4:	f7ee fd8f 	bl	8002ce6 <_read>
 80141c8:	1c43      	adds	r3, r0, #1
 80141ca:	d102      	bne.n	80141d2 <_read_r+0x1e>
 80141cc:	682b      	ldr	r3, [r5, #0]
 80141ce:	b103      	cbz	r3, 80141d2 <_read_r+0x1e>
 80141d0:	6023      	str	r3, [r4, #0]
 80141d2:	bd38      	pop	{r3, r4, r5, pc}
 80141d4:	20001708 	.word	0x20001708

080141d8 <_write_r>:
 80141d8:	b538      	push	{r3, r4, r5, lr}
 80141da:	4d07      	ldr	r5, [pc, #28]	@ (80141f8 <_write_r+0x20>)
 80141dc:	4604      	mov	r4, r0
 80141de:	4608      	mov	r0, r1
 80141e0:	4611      	mov	r1, r2
 80141e2:	2200      	movs	r2, #0
 80141e4:	602a      	str	r2, [r5, #0]
 80141e6:	461a      	mov	r2, r3
 80141e8:	f7ec ff32 	bl	8001050 <_write>
 80141ec:	1c43      	adds	r3, r0, #1
 80141ee:	d102      	bne.n	80141f6 <_write_r+0x1e>
 80141f0:	682b      	ldr	r3, [r5, #0]
 80141f2:	b103      	cbz	r3, 80141f6 <_write_r+0x1e>
 80141f4:	6023      	str	r3, [r4, #0]
 80141f6:	bd38      	pop	{r3, r4, r5, pc}
 80141f8:	20001708 	.word	0x20001708

080141fc <__assert_func>:
 80141fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80141fe:	4614      	mov	r4, r2
 8014200:	461a      	mov	r2, r3
 8014202:	4b09      	ldr	r3, [pc, #36]	@ (8014228 <__assert_func+0x2c>)
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	4605      	mov	r5, r0
 8014208:	68d8      	ldr	r0, [r3, #12]
 801420a:	b954      	cbnz	r4, 8014222 <__assert_func+0x26>
 801420c:	4b07      	ldr	r3, [pc, #28]	@ (801422c <__assert_func+0x30>)
 801420e:	461c      	mov	r4, r3
 8014210:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014214:	9100      	str	r1, [sp, #0]
 8014216:	462b      	mov	r3, r5
 8014218:	4905      	ldr	r1, [pc, #20]	@ (8014230 <__assert_func+0x34>)
 801421a:	f000 f83b 	bl	8014294 <fiprintf>
 801421e:	f000 f858 	bl	80142d2 <abort>
 8014222:	4b04      	ldr	r3, [pc, #16]	@ (8014234 <__assert_func+0x38>)
 8014224:	e7f4      	b.n	8014210 <__assert_func+0x14>
 8014226:	bf00      	nop
 8014228:	200000ec 	.word	0x200000ec
 801422c:	08015c3d 	.word	0x08015c3d
 8014230:	08015c0f 	.word	0x08015c0f
 8014234:	08015c02 	.word	0x08015c02

08014238 <_calloc_r>:
 8014238:	b570      	push	{r4, r5, r6, lr}
 801423a:	fba1 5402 	umull	r5, r4, r1, r2
 801423e:	b93c      	cbnz	r4, 8014250 <_calloc_r+0x18>
 8014240:	4629      	mov	r1, r5
 8014242:	f7fd ff9b 	bl	801217c <_malloc_r>
 8014246:	4606      	mov	r6, r0
 8014248:	b928      	cbnz	r0, 8014256 <_calloc_r+0x1e>
 801424a:	2600      	movs	r6, #0
 801424c:	4630      	mov	r0, r6
 801424e:	bd70      	pop	{r4, r5, r6, pc}
 8014250:	220c      	movs	r2, #12
 8014252:	6002      	str	r2, [r0, #0]
 8014254:	e7f9      	b.n	801424a <_calloc_r+0x12>
 8014256:	462a      	mov	r2, r5
 8014258:	4621      	mov	r1, r4
 801425a:	f7fe fa8b 	bl	8012774 <memset>
 801425e:	e7f5      	b.n	801424c <_calloc_r+0x14>

08014260 <__ascii_mbtowc>:
 8014260:	b082      	sub	sp, #8
 8014262:	b901      	cbnz	r1, 8014266 <__ascii_mbtowc+0x6>
 8014264:	a901      	add	r1, sp, #4
 8014266:	b142      	cbz	r2, 801427a <__ascii_mbtowc+0x1a>
 8014268:	b14b      	cbz	r3, 801427e <__ascii_mbtowc+0x1e>
 801426a:	7813      	ldrb	r3, [r2, #0]
 801426c:	600b      	str	r3, [r1, #0]
 801426e:	7812      	ldrb	r2, [r2, #0]
 8014270:	1e10      	subs	r0, r2, #0
 8014272:	bf18      	it	ne
 8014274:	2001      	movne	r0, #1
 8014276:	b002      	add	sp, #8
 8014278:	4770      	bx	lr
 801427a:	4610      	mov	r0, r2
 801427c:	e7fb      	b.n	8014276 <__ascii_mbtowc+0x16>
 801427e:	f06f 0001 	mvn.w	r0, #1
 8014282:	e7f8      	b.n	8014276 <__ascii_mbtowc+0x16>

08014284 <_malloc_usable_size_r>:
 8014284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014288:	1f18      	subs	r0, r3, #4
 801428a:	2b00      	cmp	r3, #0
 801428c:	bfbc      	itt	lt
 801428e:	580b      	ldrlt	r3, [r1, r0]
 8014290:	18c0      	addlt	r0, r0, r3
 8014292:	4770      	bx	lr

08014294 <fiprintf>:
 8014294:	b40e      	push	{r1, r2, r3}
 8014296:	b503      	push	{r0, r1, lr}
 8014298:	4601      	mov	r1, r0
 801429a:	ab03      	add	r3, sp, #12
 801429c:	4805      	ldr	r0, [pc, #20]	@ (80142b4 <fiprintf+0x20>)
 801429e:	f853 2b04 	ldr.w	r2, [r3], #4
 80142a2:	6800      	ldr	r0, [r0, #0]
 80142a4:	9301      	str	r3, [sp, #4]
 80142a6:	f000 f845 	bl	8014334 <_vfiprintf_r>
 80142aa:	b002      	add	sp, #8
 80142ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80142b0:	b003      	add	sp, #12
 80142b2:	4770      	bx	lr
 80142b4:	200000ec 	.word	0x200000ec

080142b8 <__ascii_wctomb>:
 80142b8:	4603      	mov	r3, r0
 80142ba:	4608      	mov	r0, r1
 80142bc:	b141      	cbz	r1, 80142d0 <__ascii_wctomb+0x18>
 80142be:	2aff      	cmp	r2, #255	@ 0xff
 80142c0:	d904      	bls.n	80142cc <__ascii_wctomb+0x14>
 80142c2:	228a      	movs	r2, #138	@ 0x8a
 80142c4:	601a      	str	r2, [r3, #0]
 80142c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80142ca:	4770      	bx	lr
 80142cc:	700a      	strb	r2, [r1, #0]
 80142ce:	2001      	movs	r0, #1
 80142d0:	4770      	bx	lr

080142d2 <abort>:
 80142d2:	b508      	push	{r3, lr}
 80142d4:	2006      	movs	r0, #6
 80142d6:	f000 fa85 	bl	80147e4 <raise>
 80142da:	2001      	movs	r0, #1
 80142dc:	f7ee fcf8 	bl	8002cd0 <_exit>

080142e0 <__sfputc_r>:
 80142e0:	6893      	ldr	r3, [r2, #8]
 80142e2:	3b01      	subs	r3, #1
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	b410      	push	{r4}
 80142e8:	6093      	str	r3, [r2, #8]
 80142ea:	da08      	bge.n	80142fe <__sfputc_r+0x1e>
 80142ec:	6994      	ldr	r4, [r2, #24]
 80142ee:	42a3      	cmp	r3, r4
 80142f0:	db01      	blt.n	80142f6 <__sfputc_r+0x16>
 80142f2:	290a      	cmp	r1, #10
 80142f4:	d103      	bne.n	80142fe <__sfputc_r+0x1e>
 80142f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142fa:	f000 b933 	b.w	8014564 <__swbuf_r>
 80142fe:	6813      	ldr	r3, [r2, #0]
 8014300:	1c58      	adds	r0, r3, #1
 8014302:	6010      	str	r0, [r2, #0]
 8014304:	7019      	strb	r1, [r3, #0]
 8014306:	4608      	mov	r0, r1
 8014308:	f85d 4b04 	ldr.w	r4, [sp], #4
 801430c:	4770      	bx	lr

0801430e <__sfputs_r>:
 801430e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014310:	4606      	mov	r6, r0
 8014312:	460f      	mov	r7, r1
 8014314:	4614      	mov	r4, r2
 8014316:	18d5      	adds	r5, r2, r3
 8014318:	42ac      	cmp	r4, r5
 801431a:	d101      	bne.n	8014320 <__sfputs_r+0x12>
 801431c:	2000      	movs	r0, #0
 801431e:	e007      	b.n	8014330 <__sfputs_r+0x22>
 8014320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014324:	463a      	mov	r2, r7
 8014326:	4630      	mov	r0, r6
 8014328:	f7ff ffda 	bl	80142e0 <__sfputc_r>
 801432c:	1c43      	adds	r3, r0, #1
 801432e:	d1f3      	bne.n	8014318 <__sfputs_r+0xa>
 8014330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014334 <_vfiprintf_r>:
 8014334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014338:	460d      	mov	r5, r1
 801433a:	b09d      	sub	sp, #116	@ 0x74
 801433c:	4614      	mov	r4, r2
 801433e:	4698      	mov	r8, r3
 8014340:	4606      	mov	r6, r0
 8014342:	b118      	cbz	r0, 801434c <_vfiprintf_r+0x18>
 8014344:	6a03      	ldr	r3, [r0, #32]
 8014346:	b90b      	cbnz	r3, 801434c <_vfiprintf_r+0x18>
 8014348:	f7fe f9de 	bl	8012708 <__sinit>
 801434c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801434e:	07d9      	lsls	r1, r3, #31
 8014350:	d405      	bmi.n	801435e <_vfiprintf_r+0x2a>
 8014352:	89ab      	ldrh	r3, [r5, #12]
 8014354:	059a      	lsls	r2, r3, #22
 8014356:	d402      	bmi.n	801435e <_vfiprintf_r+0x2a>
 8014358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801435a:	f7ee fe28 	bl	8002fae <__retarget_lock_acquire_recursive>
 801435e:	89ab      	ldrh	r3, [r5, #12]
 8014360:	071b      	lsls	r3, r3, #28
 8014362:	d501      	bpl.n	8014368 <_vfiprintf_r+0x34>
 8014364:	692b      	ldr	r3, [r5, #16]
 8014366:	b99b      	cbnz	r3, 8014390 <_vfiprintf_r+0x5c>
 8014368:	4629      	mov	r1, r5
 801436a:	4630      	mov	r0, r6
 801436c:	f000 f938 	bl	80145e0 <__swsetup_r>
 8014370:	b170      	cbz	r0, 8014390 <_vfiprintf_r+0x5c>
 8014372:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014374:	07dc      	lsls	r4, r3, #31
 8014376:	d504      	bpl.n	8014382 <_vfiprintf_r+0x4e>
 8014378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801437c:	b01d      	add	sp, #116	@ 0x74
 801437e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014382:	89ab      	ldrh	r3, [r5, #12]
 8014384:	0598      	lsls	r0, r3, #22
 8014386:	d4f7      	bmi.n	8014378 <_vfiprintf_r+0x44>
 8014388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801438a:	f7ee fe25 	bl	8002fd8 <__retarget_lock_release_recursive>
 801438e:	e7f3      	b.n	8014378 <_vfiprintf_r+0x44>
 8014390:	2300      	movs	r3, #0
 8014392:	9309      	str	r3, [sp, #36]	@ 0x24
 8014394:	2320      	movs	r3, #32
 8014396:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801439a:	f8cd 800c 	str.w	r8, [sp, #12]
 801439e:	2330      	movs	r3, #48	@ 0x30
 80143a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014550 <_vfiprintf_r+0x21c>
 80143a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80143a8:	f04f 0901 	mov.w	r9, #1
 80143ac:	4623      	mov	r3, r4
 80143ae:	469a      	mov	sl, r3
 80143b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80143b4:	b10a      	cbz	r2, 80143ba <_vfiprintf_r+0x86>
 80143b6:	2a25      	cmp	r2, #37	@ 0x25
 80143b8:	d1f9      	bne.n	80143ae <_vfiprintf_r+0x7a>
 80143ba:	ebba 0b04 	subs.w	fp, sl, r4
 80143be:	d00b      	beq.n	80143d8 <_vfiprintf_r+0xa4>
 80143c0:	465b      	mov	r3, fp
 80143c2:	4622      	mov	r2, r4
 80143c4:	4629      	mov	r1, r5
 80143c6:	4630      	mov	r0, r6
 80143c8:	f7ff ffa1 	bl	801430e <__sfputs_r>
 80143cc:	3001      	adds	r0, #1
 80143ce:	f000 80a7 	beq.w	8014520 <_vfiprintf_r+0x1ec>
 80143d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80143d4:	445a      	add	r2, fp
 80143d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80143d8:	f89a 3000 	ldrb.w	r3, [sl]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	f000 809f 	beq.w	8014520 <_vfiprintf_r+0x1ec>
 80143e2:	2300      	movs	r3, #0
 80143e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80143e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80143ec:	f10a 0a01 	add.w	sl, sl, #1
 80143f0:	9304      	str	r3, [sp, #16]
 80143f2:	9307      	str	r3, [sp, #28]
 80143f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80143f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80143fa:	4654      	mov	r4, sl
 80143fc:	2205      	movs	r2, #5
 80143fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014402:	4853      	ldr	r0, [pc, #332]	@ (8014550 <_vfiprintf_r+0x21c>)
 8014404:	f7eb ff0c 	bl	8000220 <memchr>
 8014408:	9a04      	ldr	r2, [sp, #16]
 801440a:	b9d8      	cbnz	r0, 8014444 <_vfiprintf_r+0x110>
 801440c:	06d1      	lsls	r1, r2, #27
 801440e:	bf44      	itt	mi
 8014410:	2320      	movmi	r3, #32
 8014412:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014416:	0713      	lsls	r3, r2, #28
 8014418:	bf44      	itt	mi
 801441a:	232b      	movmi	r3, #43	@ 0x2b
 801441c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014420:	f89a 3000 	ldrb.w	r3, [sl]
 8014424:	2b2a      	cmp	r3, #42	@ 0x2a
 8014426:	d015      	beq.n	8014454 <_vfiprintf_r+0x120>
 8014428:	9a07      	ldr	r2, [sp, #28]
 801442a:	4654      	mov	r4, sl
 801442c:	2000      	movs	r0, #0
 801442e:	f04f 0c0a 	mov.w	ip, #10
 8014432:	4621      	mov	r1, r4
 8014434:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014438:	3b30      	subs	r3, #48	@ 0x30
 801443a:	2b09      	cmp	r3, #9
 801443c:	d94b      	bls.n	80144d6 <_vfiprintf_r+0x1a2>
 801443e:	b1b0      	cbz	r0, 801446e <_vfiprintf_r+0x13a>
 8014440:	9207      	str	r2, [sp, #28]
 8014442:	e014      	b.n	801446e <_vfiprintf_r+0x13a>
 8014444:	eba0 0308 	sub.w	r3, r0, r8
 8014448:	fa09 f303 	lsl.w	r3, r9, r3
 801444c:	4313      	orrs	r3, r2
 801444e:	9304      	str	r3, [sp, #16]
 8014450:	46a2      	mov	sl, r4
 8014452:	e7d2      	b.n	80143fa <_vfiprintf_r+0xc6>
 8014454:	9b03      	ldr	r3, [sp, #12]
 8014456:	1d19      	adds	r1, r3, #4
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	9103      	str	r1, [sp, #12]
 801445c:	2b00      	cmp	r3, #0
 801445e:	bfbb      	ittet	lt
 8014460:	425b      	neglt	r3, r3
 8014462:	f042 0202 	orrlt.w	r2, r2, #2
 8014466:	9307      	strge	r3, [sp, #28]
 8014468:	9307      	strlt	r3, [sp, #28]
 801446a:	bfb8      	it	lt
 801446c:	9204      	strlt	r2, [sp, #16]
 801446e:	7823      	ldrb	r3, [r4, #0]
 8014470:	2b2e      	cmp	r3, #46	@ 0x2e
 8014472:	d10a      	bne.n	801448a <_vfiprintf_r+0x156>
 8014474:	7863      	ldrb	r3, [r4, #1]
 8014476:	2b2a      	cmp	r3, #42	@ 0x2a
 8014478:	d132      	bne.n	80144e0 <_vfiprintf_r+0x1ac>
 801447a:	9b03      	ldr	r3, [sp, #12]
 801447c:	1d1a      	adds	r2, r3, #4
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	9203      	str	r2, [sp, #12]
 8014482:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014486:	3402      	adds	r4, #2
 8014488:	9305      	str	r3, [sp, #20]
 801448a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014560 <_vfiprintf_r+0x22c>
 801448e:	7821      	ldrb	r1, [r4, #0]
 8014490:	2203      	movs	r2, #3
 8014492:	4650      	mov	r0, sl
 8014494:	f7eb fec4 	bl	8000220 <memchr>
 8014498:	b138      	cbz	r0, 80144aa <_vfiprintf_r+0x176>
 801449a:	9b04      	ldr	r3, [sp, #16]
 801449c:	eba0 000a 	sub.w	r0, r0, sl
 80144a0:	2240      	movs	r2, #64	@ 0x40
 80144a2:	4082      	lsls	r2, r0
 80144a4:	4313      	orrs	r3, r2
 80144a6:	3401      	adds	r4, #1
 80144a8:	9304      	str	r3, [sp, #16]
 80144aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144ae:	4829      	ldr	r0, [pc, #164]	@ (8014554 <_vfiprintf_r+0x220>)
 80144b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80144b4:	2206      	movs	r2, #6
 80144b6:	f7eb feb3 	bl	8000220 <memchr>
 80144ba:	2800      	cmp	r0, #0
 80144bc:	d03f      	beq.n	801453e <_vfiprintf_r+0x20a>
 80144be:	4b26      	ldr	r3, [pc, #152]	@ (8014558 <_vfiprintf_r+0x224>)
 80144c0:	bb1b      	cbnz	r3, 801450a <_vfiprintf_r+0x1d6>
 80144c2:	9b03      	ldr	r3, [sp, #12]
 80144c4:	3307      	adds	r3, #7
 80144c6:	f023 0307 	bic.w	r3, r3, #7
 80144ca:	3308      	adds	r3, #8
 80144cc:	9303      	str	r3, [sp, #12]
 80144ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80144d0:	443b      	add	r3, r7
 80144d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80144d4:	e76a      	b.n	80143ac <_vfiprintf_r+0x78>
 80144d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80144da:	460c      	mov	r4, r1
 80144dc:	2001      	movs	r0, #1
 80144de:	e7a8      	b.n	8014432 <_vfiprintf_r+0xfe>
 80144e0:	2300      	movs	r3, #0
 80144e2:	3401      	adds	r4, #1
 80144e4:	9305      	str	r3, [sp, #20]
 80144e6:	4619      	mov	r1, r3
 80144e8:	f04f 0c0a 	mov.w	ip, #10
 80144ec:	4620      	mov	r0, r4
 80144ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144f2:	3a30      	subs	r2, #48	@ 0x30
 80144f4:	2a09      	cmp	r2, #9
 80144f6:	d903      	bls.n	8014500 <_vfiprintf_r+0x1cc>
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d0c6      	beq.n	801448a <_vfiprintf_r+0x156>
 80144fc:	9105      	str	r1, [sp, #20]
 80144fe:	e7c4      	b.n	801448a <_vfiprintf_r+0x156>
 8014500:	fb0c 2101 	mla	r1, ip, r1, r2
 8014504:	4604      	mov	r4, r0
 8014506:	2301      	movs	r3, #1
 8014508:	e7f0      	b.n	80144ec <_vfiprintf_r+0x1b8>
 801450a:	ab03      	add	r3, sp, #12
 801450c:	9300      	str	r3, [sp, #0]
 801450e:	462a      	mov	r2, r5
 8014510:	4b12      	ldr	r3, [pc, #72]	@ (801455c <_vfiprintf_r+0x228>)
 8014512:	a904      	add	r1, sp, #16
 8014514:	4630      	mov	r0, r6
 8014516:	f7fd fbdd 	bl	8011cd4 <_printf_float>
 801451a:	4607      	mov	r7, r0
 801451c:	1c78      	adds	r0, r7, #1
 801451e:	d1d6      	bne.n	80144ce <_vfiprintf_r+0x19a>
 8014520:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014522:	07d9      	lsls	r1, r3, #31
 8014524:	d405      	bmi.n	8014532 <_vfiprintf_r+0x1fe>
 8014526:	89ab      	ldrh	r3, [r5, #12]
 8014528:	059a      	lsls	r2, r3, #22
 801452a:	d402      	bmi.n	8014532 <_vfiprintf_r+0x1fe>
 801452c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801452e:	f7ee fd53 	bl	8002fd8 <__retarget_lock_release_recursive>
 8014532:	89ab      	ldrh	r3, [r5, #12]
 8014534:	065b      	lsls	r3, r3, #25
 8014536:	f53f af1f 	bmi.w	8014378 <_vfiprintf_r+0x44>
 801453a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801453c:	e71e      	b.n	801437c <_vfiprintf_r+0x48>
 801453e:	ab03      	add	r3, sp, #12
 8014540:	9300      	str	r3, [sp, #0]
 8014542:	462a      	mov	r2, r5
 8014544:	4b05      	ldr	r3, [pc, #20]	@ (801455c <_vfiprintf_r+0x228>)
 8014546:	a904      	add	r1, sp, #16
 8014548:	4630      	mov	r0, r6
 801454a:	f7fd ff05 	bl	8012358 <_printf_i>
 801454e:	e7e4      	b.n	801451a <_vfiprintf_r+0x1e6>
 8014550:	08015a92 	.word	0x08015a92
 8014554:	08015a9c 	.word	0x08015a9c
 8014558:	08011cd5 	.word	0x08011cd5
 801455c:	0801430f 	.word	0x0801430f
 8014560:	08015a98 	.word	0x08015a98

08014564 <__swbuf_r>:
 8014564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014566:	460e      	mov	r6, r1
 8014568:	4614      	mov	r4, r2
 801456a:	4605      	mov	r5, r0
 801456c:	b118      	cbz	r0, 8014576 <__swbuf_r+0x12>
 801456e:	6a03      	ldr	r3, [r0, #32]
 8014570:	b90b      	cbnz	r3, 8014576 <__swbuf_r+0x12>
 8014572:	f7fe f8c9 	bl	8012708 <__sinit>
 8014576:	69a3      	ldr	r3, [r4, #24]
 8014578:	60a3      	str	r3, [r4, #8]
 801457a:	89a3      	ldrh	r3, [r4, #12]
 801457c:	071a      	lsls	r2, r3, #28
 801457e:	d501      	bpl.n	8014584 <__swbuf_r+0x20>
 8014580:	6923      	ldr	r3, [r4, #16]
 8014582:	b943      	cbnz	r3, 8014596 <__swbuf_r+0x32>
 8014584:	4621      	mov	r1, r4
 8014586:	4628      	mov	r0, r5
 8014588:	f000 f82a 	bl	80145e0 <__swsetup_r>
 801458c:	b118      	cbz	r0, 8014596 <__swbuf_r+0x32>
 801458e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014592:	4638      	mov	r0, r7
 8014594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014596:	6823      	ldr	r3, [r4, #0]
 8014598:	6922      	ldr	r2, [r4, #16]
 801459a:	1a98      	subs	r0, r3, r2
 801459c:	6963      	ldr	r3, [r4, #20]
 801459e:	b2f6      	uxtb	r6, r6
 80145a0:	4283      	cmp	r3, r0
 80145a2:	4637      	mov	r7, r6
 80145a4:	dc05      	bgt.n	80145b2 <__swbuf_r+0x4e>
 80145a6:	4621      	mov	r1, r4
 80145a8:	4628      	mov	r0, r5
 80145aa:	f7ff f9ab 	bl	8013904 <_fflush_r>
 80145ae:	2800      	cmp	r0, #0
 80145b0:	d1ed      	bne.n	801458e <__swbuf_r+0x2a>
 80145b2:	68a3      	ldr	r3, [r4, #8]
 80145b4:	3b01      	subs	r3, #1
 80145b6:	60a3      	str	r3, [r4, #8]
 80145b8:	6823      	ldr	r3, [r4, #0]
 80145ba:	1c5a      	adds	r2, r3, #1
 80145bc:	6022      	str	r2, [r4, #0]
 80145be:	701e      	strb	r6, [r3, #0]
 80145c0:	6962      	ldr	r2, [r4, #20]
 80145c2:	1c43      	adds	r3, r0, #1
 80145c4:	429a      	cmp	r2, r3
 80145c6:	d004      	beq.n	80145d2 <__swbuf_r+0x6e>
 80145c8:	89a3      	ldrh	r3, [r4, #12]
 80145ca:	07db      	lsls	r3, r3, #31
 80145cc:	d5e1      	bpl.n	8014592 <__swbuf_r+0x2e>
 80145ce:	2e0a      	cmp	r6, #10
 80145d0:	d1df      	bne.n	8014592 <__swbuf_r+0x2e>
 80145d2:	4621      	mov	r1, r4
 80145d4:	4628      	mov	r0, r5
 80145d6:	f7ff f995 	bl	8013904 <_fflush_r>
 80145da:	2800      	cmp	r0, #0
 80145dc:	d0d9      	beq.n	8014592 <__swbuf_r+0x2e>
 80145de:	e7d6      	b.n	801458e <__swbuf_r+0x2a>

080145e0 <__swsetup_r>:
 80145e0:	b538      	push	{r3, r4, r5, lr}
 80145e2:	4b29      	ldr	r3, [pc, #164]	@ (8014688 <__swsetup_r+0xa8>)
 80145e4:	4605      	mov	r5, r0
 80145e6:	6818      	ldr	r0, [r3, #0]
 80145e8:	460c      	mov	r4, r1
 80145ea:	b118      	cbz	r0, 80145f4 <__swsetup_r+0x14>
 80145ec:	6a03      	ldr	r3, [r0, #32]
 80145ee:	b90b      	cbnz	r3, 80145f4 <__swsetup_r+0x14>
 80145f0:	f7fe f88a 	bl	8012708 <__sinit>
 80145f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145f8:	0719      	lsls	r1, r3, #28
 80145fa:	d422      	bmi.n	8014642 <__swsetup_r+0x62>
 80145fc:	06da      	lsls	r2, r3, #27
 80145fe:	d407      	bmi.n	8014610 <__swsetup_r+0x30>
 8014600:	2209      	movs	r2, #9
 8014602:	602a      	str	r2, [r5, #0]
 8014604:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014608:	81a3      	strh	r3, [r4, #12]
 801460a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801460e:	e033      	b.n	8014678 <__swsetup_r+0x98>
 8014610:	0758      	lsls	r0, r3, #29
 8014612:	d512      	bpl.n	801463a <__swsetup_r+0x5a>
 8014614:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014616:	b141      	cbz	r1, 801462a <__swsetup_r+0x4a>
 8014618:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801461c:	4299      	cmp	r1, r3
 801461e:	d002      	beq.n	8014626 <__swsetup_r+0x46>
 8014620:	4628      	mov	r0, r5
 8014622:	f7fe ff49 	bl	80134b8 <_free_r>
 8014626:	2300      	movs	r3, #0
 8014628:	6363      	str	r3, [r4, #52]	@ 0x34
 801462a:	89a3      	ldrh	r3, [r4, #12]
 801462c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014630:	81a3      	strh	r3, [r4, #12]
 8014632:	2300      	movs	r3, #0
 8014634:	6063      	str	r3, [r4, #4]
 8014636:	6923      	ldr	r3, [r4, #16]
 8014638:	6023      	str	r3, [r4, #0]
 801463a:	89a3      	ldrh	r3, [r4, #12]
 801463c:	f043 0308 	orr.w	r3, r3, #8
 8014640:	81a3      	strh	r3, [r4, #12]
 8014642:	6923      	ldr	r3, [r4, #16]
 8014644:	b94b      	cbnz	r3, 801465a <__swsetup_r+0x7a>
 8014646:	89a3      	ldrh	r3, [r4, #12]
 8014648:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801464c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014650:	d003      	beq.n	801465a <__swsetup_r+0x7a>
 8014652:	4621      	mov	r1, r4
 8014654:	4628      	mov	r0, r5
 8014656:	f000 f83f 	bl	80146d8 <__smakebuf_r>
 801465a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801465e:	f013 0201 	ands.w	r2, r3, #1
 8014662:	d00a      	beq.n	801467a <__swsetup_r+0x9a>
 8014664:	2200      	movs	r2, #0
 8014666:	60a2      	str	r2, [r4, #8]
 8014668:	6962      	ldr	r2, [r4, #20]
 801466a:	4252      	negs	r2, r2
 801466c:	61a2      	str	r2, [r4, #24]
 801466e:	6922      	ldr	r2, [r4, #16]
 8014670:	b942      	cbnz	r2, 8014684 <__swsetup_r+0xa4>
 8014672:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014676:	d1c5      	bne.n	8014604 <__swsetup_r+0x24>
 8014678:	bd38      	pop	{r3, r4, r5, pc}
 801467a:	0799      	lsls	r1, r3, #30
 801467c:	bf58      	it	pl
 801467e:	6962      	ldrpl	r2, [r4, #20]
 8014680:	60a2      	str	r2, [r4, #8]
 8014682:	e7f4      	b.n	801466e <__swsetup_r+0x8e>
 8014684:	2000      	movs	r0, #0
 8014686:	e7f7      	b.n	8014678 <__swsetup_r+0x98>
 8014688:	200000ec 	.word	0x200000ec

0801468c <__swhatbuf_r>:
 801468c:	b570      	push	{r4, r5, r6, lr}
 801468e:	460c      	mov	r4, r1
 8014690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014694:	2900      	cmp	r1, #0
 8014696:	b096      	sub	sp, #88	@ 0x58
 8014698:	4615      	mov	r5, r2
 801469a:	461e      	mov	r6, r3
 801469c:	da0d      	bge.n	80146ba <__swhatbuf_r+0x2e>
 801469e:	89a3      	ldrh	r3, [r4, #12]
 80146a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80146a4:	f04f 0100 	mov.w	r1, #0
 80146a8:	bf14      	ite	ne
 80146aa:	2340      	movne	r3, #64	@ 0x40
 80146ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80146b0:	2000      	movs	r0, #0
 80146b2:	6031      	str	r1, [r6, #0]
 80146b4:	602b      	str	r3, [r5, #0]
 80146b6:	b016      	add	sp, #88	@ 0x58
 80146b8:	bd70      	pop	{r4, r5, r6, pc}
 80146ba:	466a      	mov	r2, sp
 80146bc:	f000 f848 	bl	8014750 <_fstat_r>
 80146c0:	2800      	cmp	r0, #0
 80146c2:	dbec      	blt.n	801469e <__swhatbuf_r+0x12>
 80146c4:	9901      	ldr	r1, [sp, #4]
 80146c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80146ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80146ce:	4259      	negs	r1, r3
 80146d0:	4159      	adcs	r1, r3
 80146d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80146d6:	e7eb      	b.n	80146b0 <__swhatbuf_r+0x24>

080146d8 <__smakebuf_r>:
 80146d8:	898b      	ldrh	r3, [r1, #12]
 80146da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80146dc:	079d      	lsls	r5, r3, #30
 80146de:	4606      	mov	r6, r0
 80146e0:	460c      	mov	r4, r1
 80146e2:	d507      	bpl.n	80146f4 <__smakebuf_r+0x1c>
 80146e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80146e8:	6023      	str	r3, [r4, #0]
 80146ea:	6123      	str	r3, [r4, #16]
 80146ec:	2301      	movs	r3, #1
 80146ee:	6163      	str	r3, [r4, #20]
 80146f0:	b003      	add	sp, #12
 80146f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146f4:	ab01      	add	r3, sp, #4
 80146f6:	466a      	mov	r2, sp
 80146f8:	f7ff ffc8 	bl	801468c <__swhatbuf_r>
 80146fc:	9f00      	ldr	r7, [sp, #0]
 80146fe:	4605      	mov	r5, r0
 8014700:	4639      	mov	r1, r7
 8014702:	4630      	mov	r0, r6
 8014704:	f7fd fd3a 	bl	801217c <_malloc_r>
 8014708:	b948      	cbnz	r0, 801471e <__smakebuf_r+0x46>
 801470a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801470e:	059a      	lsls	r2, r3, #22
 8014710:	d4ee      	bmi.n	80146f0 <__smakebuf_r+0x18>
 8014712:	f023 0303 	bic.w	r3, r3, #3
 8014716:	f043 0302 	orr.w	r3, r3, #2
 801471a:	81a3      	strh	r3, [r4, #12]
 801471c:	e7e2      	b.n	80146e4 <__smakebuf_r+0xc>
 801471e:	89a3      	ldrh	r3, [r4, #12]
 8014720:	6020      	str	r0, [r4, #0]
 8014722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014726:	81a3      	strh	r3, [r4, #12]
 8014728:	9b01      	ldr	r3, [sp, #4]
 801472a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801472e:	b15b      	cbz	r3, 8014748 <__smakebuf_r+0x70>
 8014730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014734:	4630      	mov	r0, r6
 8014736:	f000 f81d 	bl	8014774 <_isatty_r>
 801473a:	b128      	cbz	r0, 8014748 <__smakebuf_r+0x70>
 801473c:	89a3      	ldrh	r3, [r4, #12]
 801473e:	f023 0303 	bic.w	r3, r3, #3
 8014742:	f043 0301 	orr.w	r3, r3, #1
 8014746:	81a3      	strh	r3, [r4, #12]
 8014748:	89a3      	ldrh	r3, [r4, #12]
 801474a:	431d      	orrs	r5, r3
 801474c:	81a5      	strh	r5, [r4, #12]
 801474e:	e7cf      	b.n	80146f0 <__smakebuf_r+0x18>

08014750 <_fstat_r>:
 8014750:	b538      	push	{r3, r4, r5, lr}
 8014752:	4d07      	ldr	r5, [pc, #28]	@ (8014770 <_fstat_r+0x20>)
 8014754:	2300      	movs	r3, #0
 8014756:	4604      	mov	r4, r0
 8014758:	4608      	mov	r0, r1
 801475a:	4611      	mov	r1, r2
 801475c:	602b      	str	r3, [r5, #0]
 801475e:	f7ee faeb 	bl	8002d38 <_fstat>
 8014762:	1c43      	adds	r3, r0, #1
 8014764:	d102      	bne.n	801476c <_fstat_r+0x1c>
 8014766:	682b      	ldr	r3, [r5, #0]
 8014768:	b103      	cbz	r3, 801476c <_fstat_r+0x1c>
 801476a:	6023      	str	r3, [r4, #0]
 801476c:	bd38      	pop	{r3, r4, r5, pc}
 801476e:	bf00      	nop
 8014770:	20001708 	.word	0x20001708

08014774 <_isatty_r>:
 8014774:	b538      	push	{r3, r4, r5, lr}
 8014776:	4d06      	ldr	r5, [pc, #24]	@ (8014790 <_isatty_r+0x1c>)
 8014778:	2300      	movs	r3, #0
 801477a:	4604      	mov	r4, r0
 801477c:	4608      	mov	r0, r1
 801477e:	602b      	str	r3, [r5, #0]
 8014780:	f7ee faea 	bl	8002d58 <_isatty>
 8014784:	1c43      	adds	r3, r0, #1
 8014786:	d102      	bne.n	801478e <_isatty_r+0x1a>
 8014788:	682b      	ldr	r3, [r5, #0]
 801478a:	b103      	cbz	r3, 801478e <_isatty_r+0x1a>
 801478c:	6023      	str	r3, [r4, #0]
 801478e:	bd38      	pop	{r3, r4, r5, pc}
 8014790:	20001708 	.word	0x20001708

08014794 <_raise_r>:
 8014794:	291f      	cmp	r1, #31
 8014796:	b538      	push	{r3, r4, r5, lr}
 8014798:	4605      	mov	r5, r0
 801479a:	460c      	mov	r4, r1
 801479c:	d904      	bls.n	80147a8 <_raise_r+0x14>
 801479e:	2316      	movs	r3, #22
 80147a0:	6003      	str	r3, [r0, #0]
 80147a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80147a6:	bd38      	pop	{r3, r4, r5, pc}
 80147a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80147aa:	b112      	cbz	r2, 80147b2 <_raise_r+0x1e>
 80147ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80147b0:	b94b      	cbnz	r3, 80147c6 <_raise_r+0x32>
 80147b2:	4628      	mov	r0, r5
 80147b4:	f000 f830 	bl	8014818 <_getpid_r>
 80147b8:	4622      	mov	r2, r4
 80147ba:	4601      	mov	r1, r0
 80147bc:	4628      	mov	r0, r5
 80147be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80147c2:	f000 b817 	b.w	80147f4 <_kill_r>
 80147c6:	2b01      	cmp	r3, #1
 80147c8:	d00a      	beq.n	80147e0 <_raise_r+0x4c>
 80147ca:	1c59      	adds	r1, r3, #1
 80147cc:	d103      	bne.n	80147d6 <_raise_r+0x42>
 80147ce:	2316      	movs	r3, #22
 80147d0:	6003      	str	r3, [r0, #0]
 80147d2:	2001      	movs	r0, #1
 80147d4:	e7e7      	b.n	80147a6 <_raise_r+0x12>
 80147d6:	2100      	movs	r1, #0
 80147d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80147dc:	4620      	mov	r0, r4
 80147de:	4798      	blx	r3
 80147e0:	2000      	movs	r0, #0
 80147e2:	e7e0      	b.n	80147a6 <_raise_r+0x12>

080147e4 <raise>:
 80147e4:	4b02      	ldr	r3, [pc, #8]	@ (80147f0 <raise+0xc>)
 80147e6:	4601      	mov	r1, r0
 80147e8:	6818      	ldr	r0, [r3, #0]
 80147ea:	f7ff bfd3 	b.w	8014794 <_raise_r>
 80147ee:	bf00      	nop
 80147f0:	200000ec 	.word	0x200000ec

080147f4 <_kill_r>:
 80147f4:	b538      	push	{r3, r4, r5, lr}
 80147f6:	4d07      	ldr	r5, [pc, #28]	@ (8014814 <_kill_r+0x20>)
 80147f8:	2300      	movs	r3, #0
 80147fa:	4604      	mov	r4, r0
 80147fc:	4608      	mov	r0, r1
 80147fe:	4611      	mov	r1, r2
 8014800:	602b      	str	r3, [r5, #0]
 8014802:	f7ee fa55 	bl	8002cb0 <_kill>
 8014806:	1c43      	adds	r3, r0, #1
 8014808:	d102      	bne.n	8014810 <_kill_r+0x1c>
 801480a:	682b      	ldr	r3, [r5, #0]
 801480c:	b103      	cbz	r3, 8014810 <_kill_r+0x1c>
 801480e:	6023      	str	r3, [r4, #0]
 8014810:	bd38      	pop	{r3, r4, r5, pc}
 8014812:	bf00      	nop
 8014814:	20001708 	.word	0x20001708

08014818 <_getpid_r>:
 8014818:	f7ee ba42 	b.w	8002ca0 <_getpid>

0801481c <pow>:
 801481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801481e:	ed2d 8b02 	vpush	{d8}
 8014822:	eeb0 8a40 	vmov.f32	s16, s0
 8014826:	eef0 8a60 	vmov.f32	s17, s1
 801482a:	ec55 4b11 	vmov	r4, r5, d1
 801482e:	f000 f873 	bl	8014918 <__ieee754_pow>
 8014832:	4622      	mov	r2, r4
 8014834:	462b      	mov	r3, r5
 8014836:	4620      	mov	r0, r4
 8014838:	4629      	mov	r1, r5
 801483a:	ec57 6b10 	vmov	r6, r7, d0
 801483e:	f7ec f99d 	bl	8000b7c <__aeabi_dcmpun>
 8014842:	2800      	cmp	r0, #0
 8014844:	d13b      	bne.n	80148be <pow+0xa2>
 8014846:	ec51 0b18 	vmov	r0, r1, d8
 801484a:	2200      	movs	r2, #0
 801484c:	2300      	movs	r3, #0
 801484e:	f7ec f963 	bl	8000b18 <__aeabi_dcmpeq>
 8014852:	b1b8      	cbz	r0, 8014884 <pow+0x68>
 8014854:	2200      	movs	r2, #0
 8014856:	2300      	movs	r3, #0
 8014858:	4620      	mov	r0, r4
 801485a:	4629      	mov	r1, r5
 801485c:	f7ec f95c 	bl	8000b18 <__aeabi_dcmpeq>
 8014860:	2800      	cmp	r0, #0
 8014862:	d146      	bne.n	80148f2 <pow+0xd6>
 8014864:	ec45 4b10 	vmov	d0, r4, r5
 8014868:	f000 f848 	bl	80148fc <finite>
 801486c:	b338      	cbz	r0, 80148be <pow+0xa2>
 801486e:	2200      	movs	r2, #0
 8014870:	2300      	movs	r3, #0
 8014872:	4620      	mov	r0, r4
 8014874:	4629      	mov	r1, r5
 8014876:	f7ec f959 	bl	8000b2c <__aeabi_dcmplt>
 801487a:	b300      	cbz	r0, 80148be <pow+0xa2>
 801487c:	f7fd ff96 	bl	80127ac <__errno>
 8014880:	2322      	movs	r3, #34	@ 0x22
 8014882:	e01b      	b.n	80148bc <pow+0xa0>
 8014884:	ec47 6b10 	vmov	d0, r6, r7
 8014888:	f000 f838 	bl	80148fc <finite>
 801488c:	b9e0      	cbnz	r0, 80148c8 <pow+0xac>
 801488e:	eeb0 0a48 	vmov.f32	s0, s16
 8014892:	eef0 0a68 	vmov.f32	s1, s17
 8014896:	f000 f831 	bl	80148fc <finite>
 801489a:	b1a8      	cbz	r0, 80148c8 <pow+0xac>
 801489c:	ec45 4b10 	vmov	d0, r4, r5
 80148a0:	f000 f82c 	bl	80148fc <finite>
 80148a4:	b180      	cbz	r0, 80148c8 <pow+0xac>
 80148a6:	4632      	mov	r2, r6
 80148a8:	463b      	mov	r3, r7
 80148aa:	4630      	mov	r0, r6
 80148ac:	4639      	mov	r1, r7
 80148ae:	f7ec f965 	bl	8000b7c <__aeabi_dcmpun>
 80148b2:	2800      	cmp	r0, #0
 80148b4:	d0e2      	beq.n	801487c <pow+0x60>
 80148b6:	f7fd ff79 	bl	80127ac <__errno>
 80148ba:	2321      	movs	r3, #33	@ 0x21
 80148bc:	6003      	str	r3, [r0, #0]
 80148be:	ecbd 8b02 	vpop	{d8}
 80148c2:	ec47 6b10 	vmov	d0, r6, r7
 80148c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148c8:	2200      	movs	r2, #0
 80148ca:	2300      	movs	r3, #0
 80148cc:	4630      	mov	r0, r6
 80148ce:	4639      	mov	r1, r7
 80148d0:	f7ec f922 	bl	8000b18 <__aeabi_dcmpeq>
 80148d4:	2800      	cmp	r0, #0
 80148d6:	d0f2      	beq.n	80148be <pow+0xa2>
 80148d8:	eeb0 0a48 	vmov.f32	s0, s16
 80148dc:	eef0 0a68 	vmov.f32	s1, s17
 80148e0:	f000 f80c 	bl	80148fc <finite>
 80148e4:	2800      	cmp	r0, #0
 80148e6:	d0ea      	beq.n	80148be <pow+0xa2>
 80148e8:	ec45 4b10 	vmov	d0, r4, r5
 80148ec:	f000 f806 	bl	80148fc <finite>
 80148f0:	e7c3      	b.n	801487a <pow+0x5e>
 80148f2:	4f01      	ldr	r7, [pc, #4]	@ (80148f8 <pow+0xdc>)
 80148f4:	2600      	movs	r6, #0
 80148f6:	e7e2      	b.n	80148be <pow+0xa2>
 80148f8:	3ff00000 	.word	0x3ff00000

080148fc <finite>:
 80148fc:	b082      	sub	sp, #8
 80148fe:	ed8d 0b00 	vstr	d0, [sp]
 8014902:	9801      	ldr	r0, [sp, #4]
 8014904:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8014908:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801490c:	0fc0      	lsrs	r0, r0, #31
 801490e:	b002      	add	sp, #8
 8014910:	4770      	bx	lr
 8014912:	0000      	movs	r0, r0
 8014914:	0000      	movs	r0, r0
	...

08014918 <__ieee754_pow>:
 8014918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801491c:	b091      	sub	sp, #68	@ 0x44
 801491e:	ed8d 1b00 	vstr	d1, [sp]
 8014922:	e9dd 1900 	ldrd	r1, r9, [sp]
 8014926:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801492a:	ea5a 0001 	orrs.w	r0, sl, r1
 801492e:	ec57 6b10 	vmov	r6, r7, d0
 8014932:	d113      	bne.n	801495c <__ieee754_pow+0x44>
 8014934:	19b3      	adds	r3, r6, r6
 8014936:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801493a:	4152      	adcs	r2, r2
 801493c:	4298      	cmp	r0, r3
 801493e:	4b98      	ldr	r3, [pc, #608]	@ (8014ba0 <__ieee754_pow+0x288>)
 8014940:	4193      	sbcs	r3, r2
 8014942:	f080 84ea 	bcs.w	801531a <__ieee754_pow+0xa02>
 8014946:	e9dd 2300 	ldrd	r2, r3, [sp]
 801494a:	4630      	mov	r0, r6
 801494c:	4639      	mov	r1, r7
 801494e:	f7eb fcc5 	bl	80002dc <__adddf3>
 8014952:	ec41 0b10 	vmov	d0, r0, r1
 8014956:	b011      	add	sp, #68	@ 0x44
 8014958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801495c:	4a91      	ldr	r2, [pc, #580]	@ (8014ba4 <__ieee754_pow+0x28c>)
 801495e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8014962:	4590      	cmp	r8, r2
 8014964:	463d      	mov	r5, r7
 8014966:	4633      	mov	r3, r6
 8014968:	d806      	bhi.n	8014978 <__ieee754_pow+0x60>
 801496a:	d101      	bne.n	8014970 <__ieee754_pow+0x58>
 801496c:	2e00      	cmp	r6, #0
 801496e:	d1ea      	bne.n	8014946 <__ieee754_pow+0x2e>
 8014970:	4592      	cmp	sl, r2
 8014972:	d801      	bhi.n	8014978 <__ieee754_pow+0x60>
 8014974:	d10e      	bne.n	8014994 <__ieee754_pow+0x7c>
 8014976:	b169      	cbz	r1, 8014994 <__ieee754_pow+0x7c>
 8014978:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801497c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8014980:	431d      	orrs	r5, r3
 8014982:	d1e0      	bne.n	8014946 <__ieee754_pow+0x2e>
 8014984:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014988:	18db      	adds	r3, r3, r3
 801498a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801498e:	4152      	adcs	r2, r2
 8014990:	429d      	cmp	r5, r3
 8014992:	e7d4      	b.n	801493e <__ieee754_pow+0x26>
 8014994:	2d00      	cmp	r5, #0
 8014996:	46c3      	mov	fp, r8
 8014998:	da3a      	bge.n	8014a10 <__ieee754_pow+0xf8>
 801499a:	4a83      	ldr	r2, [pc, #524]	@ (8014ba8 <__ieee754_pow+0x290>)
 801499c:	4592      	cmp	sl, r2
 801499e:	d84d      	bhi.n	8014a3c <__ieee754_pow+0x124>
 80149a0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80149a4:	4592      	cmp	sl, r2
 80149a6:	f240 84c7 	bls.w	8015338 <__ieee754_pow+0xa20>
 80149aa:	ea4f 522a 	mov.w	r2, sl, asr #20
 80149ae:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80149b2:	2a14      	cmp	r2, #20
 80149b4:	dd0f      	ble.n	80149d6 <__ieee754_pow+0xbe>
 80149b6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80149ba:	fa21 f402 	lsr.w	r4, r1, r2
 80149be:	fa04 f202 	lsl.w	r2, r4, r2
 80149c2:	428a      	cmp	r2, r1
 80149c4:	f040 84b8 	bne.w	8015338 <__ieee754_pow+0xa20>
 80149c8:	f004 0401 	and.w	r4, r4, #1
 80149cc:	f1c4 0402 	rsb	r4, r4, #2
 80149d0:	2900      	cmp	r1, #0
 80149d2:	d158      	bne.n	8014a86 <__ieee754_pow+0x16e>
 80149d4:	e00e      	b.n	80149f4 <__ieee754_pow+0xdc>
 80149d6:	2900      	cmp	r1, #0
 80149d8:	d154      	bne.n	8014a84 <__ieee754_pow+0x16c>
 80149da:	f1c2 0214 	rsb	r2, r2, #20
 80149de:	fa4a f402 	asr.w	r4, sl, r2
 80149e2:	fa04 f202 	lsl.w	r2, r4, r2
 80149e6:	4552      	cmp	r2, sl
 80149e8:	f040 84a3 	bne.w	8015332 <__ieee754_pow+0xa1a>
 80149ec:	f004 0401 	and.w	r4, r4, #1
 80149f0:	f1c4 0402 	rsb	r4, r4, #2
 80149f4:	4a6d      	ldr	r2, [pc, #436]	@ (8014bac <__ieee754_pow+0x294>)
 80149f6:	4592      	cmp	sl, r2
 80149f8:	d12e      	bne.n	8014a58 <__ieee754_pow+0x140>
 80149fa:	f1b9 0f00 	cmp.w	r9, #0
 80149fe:	f280 8494 	bge.w	801532a <__ieee754_pow+0xa12>
 8014a02:	496a      	ldr	r1, [pc, #424]	@ (8014bac <__ieee754_pow+0x294>)
 8014a04:	4632      	mov	r2, r6
 8014a06:	463b      	mov	r3, r7
 8014a08:	2000      	movs	r0, #0
 8014a0a:	f7eb ff47 	bl	800089c <__aeabi_ddiv>
 8014a0e:	e7a0      	b.n	8014952 <__ieee754_pow+0x3a>
 8014a10:	2400      	movs	r4, #0
 8014a12:	bbc1      	cbnz	r1, 8014a86 <__ieee754_pow+0x16e>
 8014a14:	4a63      	ldr	r2, [pc, #396]	@ (8014ba4 <__ieee754_pow+0x28c>)
 8014a16:	4592      	cmp	sl, r2
 8014a18:	d1ec      	bne.n	80149f4 <__ieee754_pow+0xdc>
 8014a1a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8014a1e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8014a22:	431a      	orrs	r2, r3
 8014a24:	f000 8479 	beq.w	801531a <__ieee754_pow+0xa02>
 8014a28:	4b61      	ldr	r3, [pc, #388]	@ (8014bb0 <__ieee754_pow+0x298>)
 8014a2a:	4598      	cmp	r8, r3
 8014a2c:	d908      	bls.n	8014a40 <__ieee754_pow+0x128>
 8014a2e:	f1b9 0f00 	cmp.w	r9, #0
 8014a32:	f2c0 8476 	blt.w	8015322 <__ieee754_pow+0xa0a>
 8014a36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a3a:	e78a      	b.n	8014952 <__ieee754_pow+0x3a>
 8014a3c:	2402      	movs	r4, #2
 8014a3e:	e7e8      	b.n	8014a12 <__ieee754_pow+0xfa>
 8014a40:	f1b9 0f00 	cmp.w	r9, #0
 8014a44:	f04f 0000 	mov.w	r0, #0
 8014a48:	f04f 0100 	mov.w	r1, #0
 8014a4c:	da81      	bge.n	8014952 <__ieee754_pow+0x3a>
 8014a4e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014a52:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8014a56:	e77c      	b.n	8014952 <__ieee754_pow+0x3a>
 8014a58:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8014a5c:	d106      	bne.n	8014a6c <__ieee754_pow+0x154>
 8014a5e:	4632      	mov	r2, r6
 8014a60:	463b      	mov	r3, r7
 8014a62:	4630      	mov	r0, r6
 8014a64:	4639      	mov	r1, r7
 8014a66:	f7eb fdef 	bl	8000648 <__aeabi_dmul>
 8014a6a:	e772      	b.n	8014952 <__ieee754_pow+0x3a>
 8014a6c:	4a51      	ldr	r2, [pc, #324]	@ (8014bb4 <__ieee754_pow+0x29c>)
 8014a6e:	4591      	cmp	r9, r2
 8014a70:	d109      	bne.n	8014a86 <__ieee754_pow+0x16e>
 8014a72:	2d00      	cmp	r5, #0
 8014a74:	db07      	blt.n	8014a86 <__ieee754_pow+0x16e>
 8014a76:	ec47 6b10 	vmov	d0, r6, r7
 8014a7a:	b011      	add	sp, #68	@ 0x44
 8014a7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a80:	f000 bd50 	b.w	8015524 <__ieee754_sqrt>
 8014a84:	2400      	movs	r4, #0
 8014a86:	ec47 6b10 	vmov	d0, r6, r7
 8014a8a:	9302      	str	r3, [sp, #8]
 8014a8c:	f000 fcc4 	bl	8015418 <fabs>
 8014a90:	9b02      	ldr	r3, [sp, #8]
 8014a92:	ec51 0b10 	vmov	r0, r1, d0
 8014a96:	bb53      	cbnz	r3, 8014aee <__ieee754_pow+0x1d6>
 8014a98:	4b44      	ldr	r3, [pc, #272]	@ (8014bac <__ieee754_pow+0x294>)
 8014a9a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8014a9e:	429a      	cmp	r2, r3
 8014aa0:	d002      	beq.n	8014aa8 <__ieee754_pow+0x190>
 8014aa2:	f1b8 0f00 	cmp.w	r8, #0
 8014aa6:	d122      	bne.n	8014aee <__ieee754_pow+0x1d6>
 8014aa8:	f1b9 0f00 	cmp.w	r9, #0
 8014aac:	da05      	bge.n	8014aba <__ieee754_pow+0x1a2>
 8014aae:	4602      	mov	r2, r0
 8014ab0:	460b      	mov	r3, r1
 8014ab2:	2000      	movs	r0, #0
 8014ab4:	493d      	ldr	r1, [pc, #244]	@ (8014bac <__ieee754_pow+0x294>)
 8014ab6:	f7eb fef1 	bl	800089c <__aeabi_ddiv>
 8014aba:	2d00      	cmp	r5, #0
 8014abc:	f6bf af49 	bge.w	8014952 <__ieee754_pow+0x3a>
 8014ac0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8014ac4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8014ac8:	ea58 0804 	orrs.w	r8, r8, r4
 8014acc:	d108      	bne.n	8014ae0 <__ieee754_pow+0x1c8>
 8014ace:	4602      	mov	r2, r0
 8014ad0:	460b      	mov	r3, r1
 8014ad2:	4610      	mov	r0, r2
 8014ad4:	4619      	mov	r1, r3
 8014ad6:	f7eb fbff 	bl	80002d8 <__aeabi_dsub>
 8014ada:	4602      	mov	r2, r0
 8014adc:	460b      	mov	r3, r1
 8014ade:	e794      	b.n	8014a0a <__ieee754_pow+0xf2>
 8014ae0:	2c01      	cmp	r4, #1
 8014ae2:	f47f af36 	bne.w	8014952 <__ieee754_pow+0x3a>
 8014ae6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014aea:	4619      	mov	r1, r3
 8014aec:	e731      	b.n	8014952 <__ieee754_pow+0x3a>
 8014aee:	0feb      	lsrs	r3, r5, #31
 8014af0:	3b01      	subs	r3, #1
 8014af2:	ea53 0204 	orrs.w	r2, r3, r4
 8014af6:	d102      	bne.n	8014afe <__ieee754_pow+0x1e6>
 8014af8:	4632      	mov	r2, r6
 8014afa:	463b      	mov	r3, r7
 8014afc:	e7e9      	b.n	8014ad2 <__ieee754_pow+0x1ba>
 8014afe:	3c01      	subs	r4, #1
 8014b00:	431c      	orrs	r4, r3
 8014b02:	d016      	beq.n	8014b32 <__ieee754_pow+0x21a>
 8014b04:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8014b90 <__ieee754_pow+0x278>
 8014b08:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8014b0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014b10:	f240 8112 	bls.w	8014d38 <__ieee754_pow+0x420>
 8014b14:	4b28      	ldr	r3, [pc, #160]	@ (8014bb8 <__ieee754_pow+0x2a0>)
 8014b16:	459a      	cmp	sl, r3
 8014b18:	4b25      	ldr	r3, [pc, #148]	@ (8014bb0 <__ieee754_pow+0x298>)
 8014b1a:	d916      	bls.n	8014b4a <__ieee754_pow+0x232>
 8014b1c:	4598      	cmp	r8, r3
 8014b1e:	d80b      	bhi.n	8014b38 <__ieee754_pow+0x220>
 8014b20:	f1b9 0f00 	cmp.w	r9, #0
 8014b24:	da0b      	bge.n	8014b3e <__ieee754_pow+0x226>
 8014b26:	2000      	movs	r0, #0
 8014b28:	b011      	add	sp, #68	@ 0x44
 8014b2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b2e:	f000 bc6b 	b.w	8015408 <__math_oflow>
 8014b32:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8014b98 <__ieee754_pow+0x280>
 8014b36:	e7e7      	b.n	8014b08 <__ieee754_pow+0x1f0>
 8014b38:	f1b9 0f00 	cmp.w	r9, #0
 8014b3c:	dcf3      	bgt.n	8014b26 <__ieee754_pow+0x20e>
 8014b3e:	2000      	movs	r0, #0
 8014b40:	b011      	add	sp, #68	@ 0x44
 8014b42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b46:	f000 bc57 	b.w	80153f8 <__math_uflow>
 8014b4a:	4598      	cmp	r8, r3
 8014b4c:	d20c      	bcs.n	8014b68 <__ieee754_pow+0x250>
 8014b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b52:	2200      	movs	r2, #0
 8014b54:	2300      	movs	r3, #0
 8014b56:	f7eb ffe9 	bl	8000b2c <__aeabi_dcmplt>
 8014b5a:	3800      	subs	r0, #0
 8014b5c:	bf18      	it	ne
 8014b5e:	2001      	movne	r0, #1
 8014b60:	f1b9 0f00 	cmp.w	r9, #0
 8014b64:	daec      	bge.n	8014b40 <__ieee754_pow+0x228>
 8014b66:	e7df      	b.n	8014b28 <__ieee754_pow+0x210>
 8014b68:	4b10      	ldr	r3, [pc, #64]	@ (8014bac <__ieee754_pow+0x294>)
 8014b6a:	4598      	cmp	r8, r3
 8014b6c:	f04f 0200 	mov.w	r2, #0
 8014b70:	d924      	bls.n	8014bbc <__ieee754_pow+0x2a4>
 8014b72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b76:	2300      	movs	r3, #0
 8014b78:	f7eb ffd8 	bl	8000b2c <__aeabi_dcmplt>
 8014b7c:	3800      	subs	r0, #0
 8014b7e:	bf18      	it	ne
 8014b80:	2001      	movne	r0, #1
 8014b82:	f1b9 0f00 	cmp.w	r9, #0
 8014b86:	dccf      	bgt.n	8014b28 <__ieee754_pow+0x210>
 8014b88:	e7da      	b.n	8014b40 <__ieee754_pow+0x228>
 8014b8a:	bf00      	nop
 8014b8c:	f3af 8000 	nop.w
 8014b90:	00000000 	.word	0x00000000
 8014b94:	3ff00000 	.word	0x3ff00000
 8014b98:	00000000 	.word	0x00000000
 8014b9c:	bff00000 	.word	0xbff00000
 8014ba0:	fff00000 	.word	0xfff00000
 8014ba4:	7ff00000 	.word	0x7ff00000
 8014ba8:	433fffff 	.word	0x433fffff
 8014bac:	3ff00000 	.word	0x3ff00000
 8014bb0:	3fefffff 	.word	0x3fefffff
 8014bb4:	3fe00000 	.word	0x3fe00000
 8014bb8:	43f00000 	.word	0x43f00000
 8014bbc:	4b5a      	ldr	r3, [pc, #360]	@ (8014d28 <__ieee754_pow+0x410>)
 8014bbe:	f7eb fb8b 	bl	80002d8 <__aeabi_dsub>
 8014bc2:	a351      	add	r3, pc, #324	@ (adr r3, 8014d08 <__ieee754_pow+0x3f0>)
 8014bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bc8:	4604      	mov	r4, r0
 8014bca:	460d      	mov	r5, r1
 8014bcc:	f7eb fd3c 	bl	8000648 <__aeabi_dmul>
 8014bd0:	a34f      	add	r3, pc, #316	@ (adr r3, 8014d10 <__ieee754_pow+0x3f8>)
 8014bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bd6:	4606      	mov	r6, r0
 8014bd8:	460f      	mov	r7, r1
 8014bda:	4620      	mov	r0, r4
 8014bdc:	4629      	mov	r1, r5
 8014bde:	f7eb fd33 	bl	8000648 <__aeabi_dmul>
 8014be2:	4b52      	ldr	r3, [pc, #328]	@ (8014d2c <__ieee754_pow+0x414>)
 8014be4:	4682      	mov	sl, r0
 8014be6:	468b      	mov	fp, r1
 8014be8:	2200      	movs	r2, #0
 8014bea:	4620      	mov	r0, r4
 8014bec:	4629      	mov	r1, r5
 8014bee:	f7eb fd2b 	bl	8000648 <__aeabi_dmul>
 8014bf2:	4602      	mov	r2, r0
 8014bf4:	460b      	mov	r3, r1
 8014bf6:	a148      	add	r1, pc, #288	@ (adr r1, 8014d18 <__ieee754_pow+0x400>)
 8014bf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014bfc:	f7eb fb6c 	bl	80002d8 <__aeabi_dsub>
 8014c00:	4622      	mov	r2, r4
 8014c02:	462b      	mov	r3, r5
 8014c04:	f7eb fd20 	bl	8000648 <__aeabi_dmul>
 8014c08:	4602      	mov	r2, r0
 8014c0a:	460b      	mov	r3, r1
 8014c0c:	2000      	movs	r0, #0
 8014c0e:	4948      	ldr	r1, [pc, #288]	@ (8014d30 <__ieee754_pow+0x418>)
 8014c10:	f7eb fb62 	bl	80002d8 <__aeabi_dsub>
 8014c14:	4622      	mov	r2, r4
 8014c16:	4680      	mov	r8, r0
 8014c18:	4689      	mov	r9, r1
 8014c1a:	462b      	mov	r3, r5
 8014c1c:	4620      	mov	r0, r4
 8014c1e:	4629      	mov	r1, r5
 8014c20:	f7eb fd12 	bl	8000648 <__aeabi_dmul>
 8014c24:	4602      	mov	r2, r0
 8014c26:	460b      	mov	r3, r1
 8014c28:	4640      	mov	r0, r8
 8014c2a:	4649      	mov	r1, r9
 8014c2c:	f7eb fd0c 	bl	8000648 <__aeabi_dmul>
 8014c30:	a33b      	add	r3, pc, #236	@ (adr r3, 8014d20 <__ieee754_pow+0x408>)
 8014c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c36:	f7eb fd07 	bl	8000648 <__aeabi_dmul>
 8014c3a:	4602      	mov	r2, r0
 8014c3c:	460b      	mov	r3, r1
 8014c3e:	4650      	mov	r0, sl
 8014c40:	4659      	mov	r1, fp
 8014c42:	f7eb fb49 	bl	80002d8 <__aeabi_dsub>
 8014c46:	4602      	mov	r2, r0
 8014c48:	460b      	mov	r3, r1
 8014c4a:	4680      	mov	r8, r0
 8014c4c:	4689      	mov	r9, r1
 8014c4e:	4630      	mov	r0, r6
 8014c50:	4639      	mov	r1, r7
 8014c52:	f7eb fb43 	bl	80002dc <__adddf3>
 8014c56:	2400      	movs	r4, #0
 8014c58:	4632      	mov	r2, r6
 8014c5a:	463b      	mov	r3, r7
 8014c5c:	4620      	mov	r0, r4
 8014c5e:	460d      	mov	r5, r1
 8014c60:	f7eb fb3a 	bl	80002d8 <__aeabi_dsub>
 8014c64:	4602      	mov	r2, r0
 8014c66:	460b      	mov	r3, r1
 8014c68:	4640      	mov	r0, r8
 8014c6a:	4649      	mov	r1, r9
 8014c6c:	f7eb fb34 	bl	80002d8 <__aeabi_dsub>
 8014c70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014c78:	2300      	movs	r3, #0
 8014c7a:	9304      	str	r3, [sp, #16]
 8014c7c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8014c80:	4606      	mov	r6, r0
 8014c82:	460f      	mov	r7, r1
 8014c84:	4652      	mov	r2, sl
 8014c86:	465b      	mov	r3, fp
 8014c88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014c8c:	f7eb fb24 	bl	80002d8 <__aeabi_dsub>
 8014c90:	4622      	mov	r2, r4
 8014c92:	462b      	mov	r3, r5
 8014c94:	f7eb fcd8 	bl	8000648 <__aeabi_dmul>
 8014c98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c9c:	4680      	mov	r8, r0
 8014c9e:	4689      	mov	r9, r1
 8014ca0:	4630      	mov	r0, r6
 8014ca2:	4639      	mov	r1, r7
 8014ca4:	f7eb fcd0 	bl	8000648 <__aeabi_dmul>
 8014ca8:	4602      	mov	r2, r0
 8014caa:	460b      	mov	r3, r1
 8014cac:	4640      	mov	r0, r8
 8014cae:	4649      	mov	r1, r9
 8014cb0:	f7eb fb14 	bl	80002dc <__adddf3>
 8014cb4:	4652      	mov	r2, sl
 8014cb6:	465b      	mov	r3, fp
 8014cb8:	4606      	mov	r6, r0
 8014cba:	460f      	mov	r7, r1
 8014cbc:	4620      	mov	r0, r4
 8014cbe:	4629      	mov	r1, r5
 8014cc0:	f7eb fcc2 	bl	8000648 <__aeabi_dmul>
 8014cc4:	460b      	mov	r3, r1
 8014cc6:	4602      	mov	r2, r0
 8014cc8:	4680      	mov	r8, r0
 8014cca:	4689      	mov	r9, r1
 8014ccc:	4630      	mov	r0, r6
 8014cce:	4639      	mov	r1, r7
 8014cd0:	f7eb fb04 	bl	80002dc <__adddf3>
 8014cd4:	4b17      	ldr	r3, [pc, #92]	@ (8014d34 <__ieee754_pow+0x41c>)
 8014cd6:	4299      	cmp	r1, r3
 8014cd8:	4604      	mov	r4, r0
 8014cda:	460d      	mov	r5, r1
 8014cdc:	468a      	mov	sl, r1
 8014cde:	468b      	mov	fp, r1
 8014ce0:	f340 82ef 	ble.w	80152c2 <__ieee754_pow+0x9aa>
 8014ce4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8014ce8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8014cec:	4303      	orrs	r3, r0
 8014cee:	f000 81e8 	beq.w	80150c2 <__ieee754_pow+0x7aa>
 8014cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	f7eb ff17 	bl	8000b2c <__aeabi_dcmplt>
 8014cfe:	3800      	subs	r0, #0
 8014d00:	bf18      	it	ne
 8014d02:	2001      	movne	r0, #1
 8014d04:	e710      	b.n	8014b28 <__ieee754_pow+0x210>
 8014d06:	bf00      	nop
 8014d08:	60000000 	.word	0x60000000
 8014d0c:	3ff71547 	.word	0x3ff71547
 8014d10:	f85ddf44 	.word	0xf85ddf44
 8014d14:	3e54ae0b 	.word	0x3e54ae0b
 8014d18:	55555555 	.word	0x55555555
 8014d1c:	3fd55555 	.word	0x3fd55555
 8014d20:	652b82fe 	.word	0x652b82fe
 8014d24:	3ff71547 	.word	0x3ff71547
 8014d28:	3ff00000 	.word	0x3ff00000
 8014d2c:	3fd00000 	.word	0x3fd00000
 8014d30:	3fe00000 	.word	0x3fe00000
 8014d34:	408fffff 	.word	0x408fffff
 8014d38:	4bd5      	ldr	r3, [pc, #852]	@ (8015090 <__ieee754_pow+0x778>)
 8014d3a:	402b      	ands	r3, r5
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	b92b      	cbnz	r3, 8014d4c <__ieee754_pow+0x434>
 8014d40:	4bd4      	ldr	r3, [pc, #848]	@ (8015094 <__ieee754_pow+0x77c>)
 8014d42:	f7eb fc81 	bl	8000648 <__aeabi_dmul>
 8014d46:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8014d4a:	468b      	mov	fp, r1
 8014d4c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8014d50:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8014d54:	4413      	add	r3, r2
 8014d56:	930a      	str	r3, [sp, #40]	@ 0x28
 8014d58:	4bcf      	ldr	r3, [pc, #828]	@ (8015098 <__ieee754_pow+0x780>)
 8014d5a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8014d5e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8014d62:	459b      	cmp	fp, r3
 8014d64:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8014d68:	dd08      	ble.n	8014d7c <__ieee754_pow+0x464>
 8014d6a:	4bcc      	ldr	r3, [pc, #816]	@ (801509c <__ieee754_pow+0x784>)
 8014d6c:	459b      	cmp	fp, r3
 8014d6e:	f340 81a5 	ble.w	80150bc <__ieee754_pow+0x7a4>
 8014d72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014d74:	3301      	adds	r3, #1
 8014d76:	930a      	str	r3, [sp, #40]	@ 0x28
 8014d78:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8014d7c:	f04f 0a00 	mov.w	sl, #0
 8014d80:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8014d84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014d86:	4bc6      	ldr	r3, [pc, #792]	@ (80150a0 <__ieee754_pow+0x788>)
 8014d88:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014d8c:	ed93 7b00 	vldr	d7, [r3]
 8014d90:	4629      	mov	r1, r5
 8014d92:	ec53 2b17 	vmov	r2, r3, d7
 8014d96:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014d9a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014d9e:	f7eb fa9b 	bl	80002d8 <__aeabi_dsub>
 8014da2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014da6:	4606      	mov	r6, r0
 8014da8:	460f      	mov	r7, r1
 8014daa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014dae:	f7eb fa95 	bl	80002dc <__adddf3>
 8014db2:	4602      	mov	r2, r0
 8014db4:	460b      	mov	r3, r1
 8014db6:	2000      	movs	r0, #0
 8014db8:	49ba      	ldr	r1, [pc, #744]	@ (80150a4 <__ieee754_pow+0x78c>)
 8014dba:	f7eb fd6f 	bl	800089c <__aeabi_ddiv>
 8014dbe:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8014dc2:	4602      	mov	r2, r0
 8014dc4:	460b      	mov	r3, r1
 8014dc6:	4630      	mov	r0, r6
 8014dc8:	4639      	mov	r1, r7
 8014dca:	f7eb fc3d 	bl	8000648 <__aeabi_dmul>
 8014dce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014dd2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8014dd6:	106d      	asrs	r5, r5, #1
 8014dd8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8014ddc:	f04f 0b00 	mov.w	fp, #0
 8014de0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8014de4:	4661      	mov	r1, ip
 8014de6:	2200      	movs	r2, #0
 8014de8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8014dec:	4658      	mov	r0, fp
 8014dee:	46e1      	mov	r9, ip
 8014df0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8014df4:	4614      	mov	r4, r2
 8014df6:	461d      	mov	r5, r3
 8014df8:	f7eb fc26 	bl	8000648 <__aeabi_dmul>
 8014dfc:	4602      	mov	r2, r0
 8014dfe:	460b      	mov	r3, r1
 8014e00:	4630      	mov	r0, r6
 8014e02:	4639      	mov	r1, r7
 8014e04:	f7eb fa68 	bl	80002d8 <__aeabi_dsub>
 8014e08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014e0c:	4606      	mov	r6, r0
 8014e0e:	460f      	mov	r7, r1
 8014e10:	4620      	mov	r0, r4
 8014e12:	4629      	mov	r1, r5
 8014e14:	f7eb fa60 	bl	80002d8 <__aeabi_dsub>
 8014e18:	4602      	mov	r2, r0
 8014e1a:	460b      	mov	r3, r1
 8014e1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014e20:	f7eb fa5a 	bl	80002d8 <__aeabi_dsub>
 8014e24:	465a      	mov	r2, fp
 8014e26:	464b      	mov	r3, r9
 8014e28:	f7eb fc0e 	bl	8000648 <__aeabi_dmul>
 8014e2c:	4602      	mov	r2, r0
 8014e2e:	460b      	mov	r3, r1
 8014e30:	4630      	mov	r0, r6
 8014e32:	4639      	mov	r1, r7
 8014e34:	f7eb fa50 	bl	80002d8 <__aeabi_dsub>
 8014e38:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8014e3c:	f7eb fc04 	bl	8000648 <__aeabi_dmul>
 8014e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014e44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014e48:	4610      	mov	r0, r2
 8014e4a:	4619      	mov	r1, r3
 8014e4c:	f7eb fbfc 	bl	8000648 <__aeabi_dmul>
 8014e50:	a37d      	add	r3, pc, #500	@ (adr r3, 8015048 <__ieee754_pow+0x730>)
 8014e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e56:	4604      	mov	r4, r0
 8014e58:	460d      	mov	r5, r1
 8014e5a:	f7eb fbf5 	bl	8000648 <__aeabi_dmul>
 8014e5e:	a37c      	add	r3, pc, #496	@ (adr r3, 8015050 <__ieee754_pow+0x738>)
 8014e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e64:	f7eb fa3a 	bl	80002dc <__adddf3>
 8014e68:	4622      	mov	r2, r4
 8014e6a:	462b      	mov	r3, r5
 8014e6c:	f7eb fbec 	bl	8000648 <__aeabi_dmul>
 8014e70:	a379      	add	r3, pc, #484	@ (adr r3, 8015058 <__ieee754_pow+0x740>)
 8014e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e76:	f7eb fa31 	bl	80002dc <__adddf3>
 8014e7a:	4622      	mov	r2, r4
 8014e7c:	462b      	mov	r3, r5
 8014e7e:	f7eb fbe3 	bl	8000648 <__aeabi_dmul>
 8014e82:	a377      	add	r3, pc, #476	@ (adr r3, 8015060 <__ieee754_pow+0x748>)
 8014e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e88:	f7eb fa28 	bl	80002dc <__adddf3>
 8014e8c:	4622      	mov	r2, r4
 8014e8e:	462b      	mov	r3, r5
 8014e90:	f7eb fbda 	bl	8000648 <__aeabi_dmul>
 8014e94:	a374      	add	r3, pc, #464	@ (adr r3, 8015068 <__ieee754_pow+0x750>)
 8014e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e9a:	f7eb fa1f 	bl	80002dc <__adddf3>
 8014e9e:	4622      	mov	r2, r4
 8014ea0:	462b      	mov	r3, r5
 8014ea2:	f7eb fbd1 	bl	8000648 <__aeabi_dmul>
 8014ea6:	a372      	add	r3, pc, #456	@ (adr r3, 8015070 <__ieee754_pow+0x758>)
 8014ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eac:	f7eb fa16 	bl	80002dc <__adddf3>
 8014eb0:	4622      	mov	r2, r4
 8014eb2:	4606      	mov	r6, r0
 8014eb4:	460f      	mov	r7, r1
 8014eb6:	462b      	mov	r3, r5
 8014eb8:	4620      	mov	r0, r4
 8014eba:	4629      	mov	r1, r5
 8014ebc:	f7eb fbc4 	bl	8000648 <__aeabi_dmul>
 8014ec0:	4602      	mov	r2, r0
 8014ec2:	460b      	mov	r3, r1
 8014ec4:	4630      	mov	r0, r6
 8014ec6:	4639      	mov	r1, r7
 8014ec8:	f7eb fbbe 	bl	8000648 <__aeabi_dmul>
 8014ecc:	465a      	mov	r2, fp
 8014ece:	4604      	mov	r4, r0
 8014ed0:	460d      	mov	r5, r1
 8014ed2:	464b      	mov	r3, r9
 8014ed4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014ed8:	f7eb fa00 	bl	80002dc <__adddf3>
 8014edc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014ee0:	f7eb fbb2 	bl	8000648 <__aeabi_dmul>
 8014ee4:	4622      	mov	r2, r4
 8014ee6:	462b      	mov	r3, r5
 8014ee8:	f7eb f9f8 	bl	80002dc <__adddf3>
 8014eec:	465a      	mov	r2, fp
 8014eee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014ef2:	464b      	mov	r3, r9
 8014ef4:	4658      	mov	r0, fp
 8014ef6:	4649      	mov	r1, r9
 8014ef8:	f7eb fba6 	bl	8000648 <__aeabi_dmul>
 8014efc:	4b6a      	ldr	r3, [pc, #424]	@ (80150a8 <__ieee754_pow+0x790>)
 8014efe:	2200      	movs	r2, #0
 8014f00:	4606      	mov	r6, r0
 8014f02:	460f      	mov	r7, r1
 8014f04:	f7eb f9ea 	bl	80002dc <__adddf3>
 8014f08:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014f0c:	f7eb f9e6 	bl	80002dc <__adddf3>
 8014f10:	46d8      	mov	r8, fp
 8014f12:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8014f16:	460d      	mov	r5, r1
 8014f18:	465a      	mov	r2, fp
 8014f1a:	460b      	mov	r3, r1
 8014f1c:	4640      	mov	r0, r8
 8014f1e:	4649      	mov	r1, r9
 8014f20:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8014f24:	f7eb fb90 	bl	8000648 <__aeabi_dmul>
 8014f28:	465c      	mov	r4, fp
 8014f2a:	4680      	mov	r8, r0
 8014f2c:	4689      	mov	r9, r1
 8014f2e:	4b5e      	ldr	r3, [pc, #376]	@ (80150a8 <__ieee754_pow+0x790>)
 8014f30:	2200      	movs	r2, #0
 8014f32:	4620      	mov	r0, r4
 8014f34:	4629      	mov	r1, r5
 8014f36:	f7eb f9cf 	bl	80002d8 <__aeabi_dsub>
 8014f3a:	4632      	mov	r2, r6
 8014f3c:	463b      	mov	r3, r7
 8014f3e:	f7eb f9cb 	bl	80002d8 <__aeabi_dsub>
 8014f42:	4602      	mov	r2, r0
 8014f44:	460b      	mov	r3, r1
 8014f46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014f4a:	f7eb f9c5 	bl	80002d8 <__aeabi_dsub>
 8014f4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014f52:	f7eb fb79 	bl	8000648 <__aeabi_dmul>
 8014f56:	4622      	mov	r2, r4
 8014f58:	4606      	mov	r6, r0
 8014f5a:	460f      	mov	r7, r1
 8014f5c:	462b      	mov	r3, r5
 8014f5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014f62:	f7eb fb71 	bl	8000648 <__aeabi_dmul>
 8014f66:	4602      	mov	r2, r0
 8014f68:	460b      	mov	r3, r1
 8014f6a:	4630      	mov	r0, r6
 8014f6c:	4639      	mov	r1, r7
 8014f6e:	f7eb f9b5 	bl	80002dc <__adddf3>
 8014f72:	4606      	mov	r6, r0
 8014f74:	460f      	mov	r7, r1
 8014f76:	4602      	mov	r2, r0
 8014f78:	460b      	mov	r3, r1
 8014f7a:	4640      	mov	r0, r8
 8014f7c:	4649      	mov	r1, r9
 8014f7e:	f7eb f9ad 	bl	80002dc <__adddf3>
 8014f82:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8014f86:	a33c      	add	r3, pc, #240	@ (adr r3, 8015078 <__ieee754_pow+0x760>)
 8014f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f8c:	4658      	mov	r0, fp
 8014f8e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8014f92:	460d      	mov	r5, r1
 8014f94:	f7eb fb58 	bl	8000648 <__aeabi_dmul>
 8014f98:	465c      	mov	r4, fp
 8014f9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014f9e:	4642      	mov	r2, r8
 8014fa0:	464b      	mov	r3, r9
 8014fa2:	4620      	mov	r0, r4
 8014fa4:	4629      	mov	r1, r5
 8014fa6:	f7eb f997 	bl	80002d8 <__aeabi_dsub>
 8014faa:	4602      	mov	r2, r0
 8014fac:	460b      	mov	r3, r1
 8014fae:	4630      	mov	r0, r6
 8014fb0:	4639      	mov	r1, r7
 8014fb2:	f7eb f991 	bl	80002d8 <__aeabi_dsub>
 8014fb6:	a332      	add	r3, pc, #200	@ (adr r3, 8015080 <__ieee754_pow+0x768>)
 8014fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fbc:	f7eb fb44 	bl	8000648 <__aeabi_dmul>
 8014fc0:	a331      	add	r3, pc, #196	@ (adr r3, 8015088 <__ieee754_pow+0x770>)
 8014fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fc6:	4606      	mov	r6, r0
 8014fc8:	460f      	mov	r7, r1
 8014fca:	4620      	mov	r0, r4
 8014fcc:	4629      	mov	r1, r5
 8014fce:	f7eb fb3b 	bl	8000648 <__aeabi_dmul>
 8014fd2:	4602      	mov	r2, r0
 8014fd4:	460b      	mov	r3, r1
 8014fd6:	4630      	mov	r0, r6
 8014fd8:	4639      	mov	r1, r7
 8014fda:	f7eb f97f 	bl	80002dc <__adddf3>
 8014fde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014fe0:	4b32      	ldr	r3, [pc, #200]	@ (80150ac <__ieee754_pow+0x794>)
 8014fe2:	4413      	add	r3, r2
 8014fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fe8:	f7eb f978 	bl	80002dc <__adddf3>
 8014fec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014ff0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8014ff2:	f7eb fabf 	bl	8000574 <__aeabi_i2d>
 8014ff6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80150b0 <__ieee754_pow+0x798>)
 8014ffa:	4413      	add	r3, r2
 8014ffc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015000:	4606      	mov	r6, r0
 8015002:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015006:	460f      	mov	r7, r1
 8015008:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801500c:	f7eb f966 	bl	80002dc <__adddf3>
 8015010:	4642      	mov	r2, r8
 8015012:	464b      	mov	r3, r9
 8015014:	f7eb f962 	bl	80002dc <__adddf3>
 8015018:	4632      	mov	r2, r6
 801501a:	463b      	mov	r3, r7
 801501c:	f7eb f95e 	bl	80002dc <__adddf3>
 8015020:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8015024:	4632      	mov	r2, r6
 8015026:	463b      	mov	r3, r7
 8015028:	4658      	mov	r0, fp
 801502a:	460d      	mov	r5, r1
 801502c:	f7eb f954 	bl	80002d8 <__aeabi_dsub>
 8015030:	4642      	mov	r2, r8
 8015032:	464b      	mov	r3, r9
 8015034:	f7eb f950 	bl	80002d8 <__aeabi_dsub>
 8015038:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801503c:	f7eb f94c 	bl	80002d8 <__aeabi_dsub>
 8015040:	465c      	mov	r4, fp
 8015042:	4602      	mov	r2, r0
 8015044:	e036      	b.n	80150b4 <__ieee754_pow+0x79c>
 8015046:	bf00      	nop
 8015048:	4a454eef 	.word	0x4a454eef
 801504c:	3fca7e28 	.word	0x3fca7e28
 8015050:	93c9db65 	.word	0x93c9db65
 8015054:	3fcd864a 	.word	0x3fcd864a
 8015058:	a91d4101 	.word	0xa91d4101
 801505c:	3fd17460 	.word	0x3fd17460
 8015060:	518f264d 	.word	0x518f264d
 8015064:	3fd55555 	.word	0x3fd55555
 8015068:	db6fabff 	.word	0xdb6fabff
 801506c:	3fdb6db6 	.word	0x3fdb6db6
 8015070:	33333303 	.word	0x33333303
 8015074:	3fe33333 	.word	0x3fe33333
 8015078:	e0000000 	.word	0xe0000000
 801507c:	3feec709 	.word	0x3feec709
 8015080:	dc3a03fd 	.word	0xdc3a03fd
 8015084:	3feec709 	.word	0x3feec709
 8015088:	145b01f5 	.word	0x145b01f5
 801508c:	be3e2fe0 	.word	0xbe3e2fe0
 8015090:	7ff00000 	.word	0x7ff00000
 8015094:	43400000 	.word	0x43400000
 8015098:	0003988e 	.word	0x0003988e
 801509c:	000bb679 	.word	0x000bb679
 80150a0:	08015c60 	.word	0x08015c60
 80150a4:	3ff00000 	.word	0x3ff00000
 80150a8:	40080000 	.word	0x40080000
 80150ac:	08015c40 	.word	0x08015c40
 80150b0:	08015c50 	.word	0x08015c50
 80150b4:	460b      	mov	r3, r1
 80150b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80150ba:	e5d7      	b.n	8014c6c <__ieee754_pow+0x354>
 80150bc:	f04f 0a01 	mov.w	sl, #1
 80150c0:	e65e      	b.n	8014d80 <__ieee754_pow+0x468>
 80150c2:	a3b4      	add	r3, pc, #720	@ (adr r3, 8015394 <__ieee754_pow+0xa7c>)
 80150c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150c8:	4630      	mov	r0, r6
 80150ca:	4639      	mov	r1, r7
 80150cc:	f7eb f906 	bl	80002dc <__adddf3>
 80150d0:	4642      	mov	r2, r8
 80150d2:	e9cd 0100 	strd	r0, r1, [sp]
 80150d6:	464b      	mov	r3, r9
 80150d8:	4620      	mov	r0, r4
 80150da:	4629      	mov	r1, r5
 80150dc:	f7eb f8fc 	bl	80002d8 <__aeabi_dsub>
 80150e0:	4602      	mov	r2, r0
 80150e2:	460b      	mov	r3, r1
 80150e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150e8:	f7eb fd3e 	bl	8000b68 <__aeabi_dcmpgt>
 80150ec:	2800      	cmp	r0, #0
 80150ee:	f47f ae00 	bne.w	8014cf2 <__ieee754_pow+0x3da>
 80150f2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80150f6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80150fa:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80150fe:	fa43 fa0a 	asr.w	sl, r3, sl
 8015102:	44da      	add	sl, fp
 8015104:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8015108:	489d      	ldr	r0, [pc, #628]	@ (8015380 <__ieee754_pow+0xa68>)
 801510a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801510e:	4108      	asrs	r0, r1
 8015110:	ea00 030a 	and.w	r3, r0, sl
 8015114:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8015118:	f1c1 0114 	rsb	r1, r1, #20
 801511c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8015120:	fa4a fa01 	asr.w	sl, sl, r1
 8015124:	f1bb 0f00 	cmp.w	fp, #0
 8015128:	4640      	mov	r0, r8
 801512a:	4649      	mov	r1, r9
 801512c:	f04f 0200 	mov.w	r2, #0
 8015130:	bfb8      	it	lt
 8015132:	f1ca 0a00 	rsblt	sl, sl, #0
 8015136:	f7eb f8cf 	bl	80002d8 <__aeabi_dsub>
 801513a:	4680      	mov	r8, r0
 801513c:	4689      	mov	r9, r1
 801513e:	4632      	mov	r2, r6
 8015140:	463b      	mov	r3, r7
 8015142:	4640      	mov	r0, r8
 8015144:	4649      	mov	r1, r9
 8015146:	f7eb f8c9 	bl	80002dc <__adddf3>
 801514a:	2400      	movs	r4, #0
 801514c:	a37c      	add	r3, pc, #496	@ (adr r3, 8015340 <__ieee754_pow+0xa28>)
 801514e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015152:	4620      	mov	r0, r4
 8015154:	460d      	mov	r5, r1
 8015156:	f7eb fa77 	bl	8000648 <__aeabi_dmul>
 801515a:	4642      	mov	r2, r8
 801515c:	e9cd 0100 	strd	r0, r1, [sp]
 8015160:	464b      	mov	r3, r9
 8015162:	4620      	mov	r0, r4
 8015164:	4629      	mov	r1, r5
 8015166:	f7eb f8b7 	bl	80002d8 <__aeabi_dsub>
 801516a:	4602      	mov	r2, r0
 801516c:	460b      	mov	r3, r1
 801516e:	4630      	mov	r0, r6
 8015170:	4639      	mov	r1, r7
 8015172:	f7eb f8b1 	bl	80002d8 <__aeabi_dsub>
 8015176:	a374      	add	r3, pc, #464	@ (adr r3, 8015348 <__ieee754_pow+0xa30>)
 8015178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801517c:	f7eb fa64 	bl	8000648 <__aeabi_dmul>
 8015180:	a373      	add	r3, pc, #460	@ (adr r3, 8015350 <__ieee754_pow+0xa38>)
 8015182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015186:	4680      	mov	r8, r0
 8015188:	4689      	mov	r9, r1
 801518a:	4620      	mov	r0, r4
 801518c:	4629      	mov	r1, r5
 801518e:	f7eb fa5b 	bl	8000648 <__aeabi_dmul>
 8015192:	4602      	mov	r2, r0
 8015194:	460b      	mov	r3, r1
 8015196:	4640      	mov	r0, r8
 8015198:	4649      	mov	r1, r9
 801519a:	f7eb f89f 	bl	80002dc <__adddf3>
 801519e:	4604      	mov	r4, r0
 80151a0:	460d      	mov	r5, r1
 80151a2:	4602      	mov	r2, r0
 80151a4:	460b      	mov	r3, r1
 80151a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151aa:	f7eb f897 	bl	80002dc <__adddf3>
 80151ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151b2:	4680      	mov	r8, r0
 80151b4:	4689      	mov	r9, r1
 80151b6:	f7eb f88f 	bl	80002d8 <__aeabi_dsub>
 80151ba:	4602      	mov	r2, r0
 80151bc:	460b      	mov	r3, r1
 80151be:	4620      	mov	r0, r4
 80151c0:	4629      	mov	r1, r5
 80151c2:	f7eb f889 	bl	80002d8 <__aeabi_dsub>
 80151c6:	4642      	mov	r2, r8
 80151c8:	4606      	mov	r6, r0
 80151ca:	460f      	mov	r7, r1
 80151cc:	464b      	mov	r3, r9
 80151ce:	4640      	mov	r0, r8
 80151d0:	4649      	mov	r1, r9
 80151d2:	f7eb fa39 	bl	8000648 <__aeabi_dmul>
 80151d6:	a360      	add	r3, pc, #384	@ (adr r3, 8015358 <__ieee754_pow+0xa40>)
 80151d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151dc:	4604      	mov	r4, r0
 80151de:	460d      	mov	r5, r1
 80151e0:	f7eb fa32 	bl	8000648 <__aeabi_dmul>
 80151e4:	a35e      	add	r3, pc, #376	@ (adr r3, 8015360 <__ieee754_pow+0xa48>)
 80151e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ea:	f7eb f875 	bl	80002d8 <__aeabi_dsub>
 80151ee:	4622      	mov	r2, r4
 80151f0:	462b      	mov	r3, r5
 80151f2:	f7eb fa29 	bl	8000648 <__aeabi_dmul>
 80151f6:	a35c      	add	r3, pc, #368	@ (adr r3, 8015368 <__ieee754_pow+0xa50>)
 80151f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151fc:	f7eb f86e 	bl	80002dc <__adddf3>
 8015200:	4622      	mov	r2, r4
 8015202:	462b      	mov	r3, r5
 8015204:	f7eb fa20 	bl	8000648 <__aeabi_dmul>
 8015208:	a359      	add	r3, pc, #356	@ (adr r3, 8015370 <__ieee754_pow+0xa58>)
 801520a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801520e:	f7eb f863 	bl	80002d8 <__aeabi_dsub>
 8015212:	4622      	mov	r2, r4
 8015214:	462b      	mov	r3, r5
 8015216:	f7eb fa17 	bl	8000648 <__aeabi_dmul>
 801521a:	a357      	add	r3, pc, #348	@ (adr r3, 8015378 <__ieee754_pow+0xa60>)
 801521c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015220:	f7eb f85c 	bl	80002dc <__adddf3>
 8015224:	4622      	mov	r2, r4
 8015226:	462b      	mov	r3, r5
 8015228:	f7eb fa0e 	bl	8000648 <__aeabi_dmul>
 801522c:	4602      	mov	r2, r0
 801522e:	460b      	mov	r3, r1
 8015230:	4640      	mov	r0, r8
 8015232:	4649      	mov	r1, r9
 8015234:	f7eb f850 	bl	80002d8 <__aeabi_dsub>
 8015238:	4604      	mov	r4, r0
 801523a:	460d      	mov	r5, r1
 801523c:	4602      	mov	r2, r0
 801523e:	460b      	mov	r3, r1
 8015240:	4640      	mov	r0, r8
 8015242:	4649      	mov	r1, r9
 8015244:	f7eb fa00 	bl	8000648 <__aeabi_dmul>
 8015248:	2200      	movs	r2, #0
 801524a:	e9cd 0100 	strd	r0, r1, [sp]
 801524e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8015252:	4620      	mov	r0, r4
 8015254:	4629      	mov	r1, r5
 8015256:	f7eb f83f 	bl	80002d8 <__aeabi_dsub>
 801525a:	4602      	mov	r2, r0
 801525c:	460b      	mov	r3, r1
 801525e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015262:	f7eb fb1b 	bl	800089c <__aeabi_ddiv>
 8015266:	4632      	mov	r2, r6
 8015268:	4604      	mov	r4, r0
 801526a:	460d      	mov	r5, r1
 801526c:	463b      	mov	r3, r7
 801526e:	4640      	mov	r0, r8
 8015270:	4649      	mov	r1, r9
 8015272:	f7eb f9e9 	bl	8000648 <__aeabi_dmul>
 8015276:	4632      	mov	r2, r6
 8015278:	463b      	mov	r3, r7
 801527a:	f7eb f82f 	bl	80002dc <__adddf3>
 801527e:	4602      	mov	r2, r0
 8015280:	460b      	mov	r3, r1
 8015282:	4620      	mov	r0, r4
 8015284:	4629      	mov	r1, r5
 8015286:	f7eb f827 	bl	80002d8 <__aeabi_dsub>
 801528a:	4642      	mov	r2, r8
 801528c:	464b      	mov	r3, r9
 801528e:	f7eb f823 	bl	80002d8 <__aeabi_dsub>
 8015292:	460b      	mov	r3, r1
 8015294:	4602      	mov	r2, r0
 8015296:	493b      	ldr	r1, [pc, #236]	@ (8015384 <__ieee754_pow+0xa6c>)
 8015298:	2000      	movs	r0, #0
 801529a:	f7eb f81d 	bl	80002d8 <__aeabi_dsub>
 801529e:	ec41 0b10 	vmov	d0, r0, r1
 80152a2:	ee10 3a90 	vmov	r3, s1
 80152a6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80152aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80152ae:	da30      	bge.n	8015312 <__ieee754_pow+0x9fa>
 80152b0:	4650      	mov	r0, sl
 80152b2:	f000 f8b9 	bl	8015428 <scalbn>
 80152b6:	ec51 0b10 	vmov	r0, r1, d0
 80152ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80152be:	f7ff bbd2 	b.w	8014a66 <__ieee754_pow+0x14e>
 80152c2:	4c31      	ldr	r4, [pc, #196]	@ (8015388 <__ieee754_pow+0xa70>)
 80152c4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80152c8:	42a3      	cmp	r3, r4
 80152ca:	d91a      	bls.n	8015302 <__ieee754_pow+0x9ea>
 80152cc:	4b2f      	ldr	r3, [pc, #188]	@ (801538c <__ieee754_pow+0xa74>)
 80152ce:	440b      	add	r3, r1
 80152d0:	4303      	orrs	r3, r0
 80152d2:	d009      	beq.n	80152e8 <__ieee754_pow+0x9d0>
 80152d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152d8:	2200      	movs	r2, #0
 80152da:	2300      	movs	r3, #0
 80152dc:	f7eb fc26 	bl	8000b2c <__aeabi_dcmplt>
 80152e0:	3800      	subs	r0, #0
 80152e2:	bf18      	it	ne
 80152e4:	2001      	movne	r0, #1
 80152e6:	e42b      	b.n	8014b40 <__ieee754_pow+0x228>
 80152e8:	4642      	mov	r2, r8
 80152ea:	464b      	mov	r3, r9
 80152ec:	f7ea fff4 	bl	80002d8 <__aeabi_dsub>
 80152f0:	4632      	mov	r2, r6
 80152f2:	463b      	mov	r3, r7
 80152f4:	f7eb fc2e 	bl	8000b54 <__aeabi_dcmpge>
 80152f8:	2800      	cmp	r0, #0
 80152fa:	d1eb      	bne.n	80152d4 <__ieee754_pow+0x9bc>
 80152fc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801539c <__ieee754_pow+0xa84>
 8015300:	e6f7      	b.n	80150f2 <__ieee754_pow+0x7da>
 8015302:	469a      	mov	sl, r3
 8015304:	4b22      	ldr	r3, [pc, #136]	@ (8015390 <__ieee754_pow+0xa78>)
 8015306:	459a      	cmp	sl, r3
 8015308:	f63f aef3 	bhi.w	80150f2 <__ieee754_pow+0x7da>
 801530c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8015310:	e715      	b.n	801513e <__ieee754_pow+0x826>
 8015312:	ec51 0b10 	vmov	r0, r1, d0
 8015316:	4619      	mov	r1, r3
 8015318:	e7cf      	b.n	80152ba <__ieee754_pow+0x9a2>
 801531a:	491a      	ldr	r1, [pc, #104]	@ (8015384 <__ieee754_pow+0xa6c>)
 801531c:	2000      	movs	r0, #0
 801531e:	f7ff bb18 	b.w	8014952 <__ieee754_pow+0x3a>
 8015322:	2000      	movs	r0, #0
 8015324:	2100      	movs	r1, #0
 8015326:	f7ff bb14 	b.w	8014952 <__ieee754_pow+0x3a>
 801532a:	4630      	mov	r0, r6
 801532c:	4639      	mov	r1, r7
 801532e:	f7ff bb10 	b.w	8014952 <__ieee754_pow+0x3a>
 8015332:	460c      	mov	r4, r1
 8015334:	f7ff bb5e 	b.w	80149f4 <__ieee754_pow+0xdc>
 8015338:	2400      	movs	r4, #0
 801533a:	f7ff bb49 	b.w	80149d0 <__ieee754_pow+0xb8>
 801533e:	bf00      	nop
 8015340:	00000000 	.word	0x00000000
 8015344:	3fe62e43 	.word	0x3fe62e43
 8015348:	fefa39ef 	.word	0xfefa39ef
 801534c:	3fe62e42 	.word	0x3fe62e42
 8015350:	0ca86c39 	.word	0x0ca86c39
 8015354:	be205c61 	.word	0xbe205c61
 8015358:	72bea4d0 	.word	0x72bea4d0
 801535c:	3e663769 	.word	0x3e663769
 8015360:	c5d26bf1 	.word	0xc5d26bf1
 8015364:	3ebbbd41 	.word	0x3ebbbd41
 8015368:	af25de2c 	.word	0xaf25de2c
 801536c:	3f11566a 	.word	0x3f11566a
 8015370:	16bebd93 	.word	0x16bebd93
 8015374:	3f66c16c 	.word	0x3f66c16c
 8015378:	5555553e 	.word	0x5555553e
 801537c:	3fc55555 	.word	0x3fc55555
 8015380:	fff00000 	.word	0xfff00000
 8015384:	3ff00000 	.word	0x3ff00000
 8015388:	4090cbff 	.word	0x4090cbff
 801538c:	3f6f3400 	.word	0x3f6f3400
 8015390:	3fe00000 	.word	0x3fe00000
 8015394:	652b82fe 	.word	0x652b82fe
 8015398:	3c971547 	.word	0x3c971547
 801539c:	4090cc00 	.word	0x4090cc00

080153a0 <with_errno>:
 80153a0:	b510      	push	{r4, lr}
 80153a2:	ed2d 8b02 	vpush	{d8}
 80153a6:	eeb0 8a40 	vmov.f32	s16, s0
 80153aa:	eef0 8a60 	vmov.f32	s17, s1
 80153ae:	4604      	mov	r4, r0
 80153b0:	f7fd f9fc 	bl	80127ac <__errno>
 80153b4:	eeb0 0a48 	vmov.f32	s0, s16
 80153b8:	eef0 0a68 	vmov.f32	s1, s17
 80153bc:	ecbd 8b02 	vpop	{d8}
 80153c0:	6004      	str	r4, [r0, #0]
 80153c2:	bd10      	pop	{r4, pc}

080153c4 <xflow>:
 80153c4:	4603      	mov	r3, r0
 80153c6:	b507      	push	{r0, r1, r2, lr}
 80153c8:	ec51 0b10 	vmov	r0, r1, d0
 80153cc:	b183      	cbz	r3, 80153f0 <xflow+0x2c>
 80153ce:	4602      	mov	r2, r0
 80153d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80153d4:	e9cd 2300 	strd	r2, r3, [sp]
 80153d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80153dc:	f7eb f934 	bl	8000648 <__aeabi_dmul>
 80153e0:	ec41 0b10 	vmov	d0, r0, r1
 80153e4:	2022      	movs	r0, #34	@ 0x22
 80153e6:	b003      	add	sp, #12
 80153e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80153ec:	f7ff bfd8 	b.w	80153a0 <with_errno>
 80153f0:	4602      	mov	r2, r0
 80153f2:	460b      	mov	r3, r1
 80153f4:	e7ee      	b.n	80153d4 <xflow+0x10>
	...

080153f8 <__math_uflow>:
 80153f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015400 <__math_uflow+0x8>
 80153fc:	f7ff bfe2 	b.w	80153c4 <xflow>
 8015400:	00000000 	.word	0x00000000
 8015404:	10000000 	.word	0x10000000

08015408 <__math_oflow>:
 8015408:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015410 <__math_oflow+0x8>
 801540c:	f7ff bfda 	b.w	80153c4 <xflow>
 8015410:	00000000 	.word	0x00000000
 8015414:	70000000 	.word	0x70000000

08015418 <fabs>:
 8015418:	ec51 0b10 	vmov	r0, r1, d0
 801541c:	4602      	mov	r2, r0
 801541e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015422:	ec43 2b10 	vmov	d0, r2, r3
 8015426:	4770      	bx	lr

08015428 <scalbn>:
 8015428:	b570      	push	{r4, r5, r6, lr}
 801542a:	ec55 4b10 	vmov	r4, r5, d0
 801542e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8015432:	4606      	mov	r6, r0
 8015434:	462b      	mov	r3, r5
 8015436:	b991      	cbnz	r1, 801545e <scalbn+0x36>
 8015438:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801543c:	4323      	orrs	r3, r4
 801543e:	d03d      	beq.n	80154bc <scalbn+0x94>
 8015440:	4b35      	ldr	r3, [pc, #212]	@ (8015518 <scalbn+0xf0>)
 8015442:	4620      	mov	r0, r4
 8015444:	4629      	mov	r1, r5
 8015446:	2200      	movs	r2, #0
 8015448:	f7eb f8fe 	bl	8000648 <__aeabi_dmul>
 801544c:	4b33      	ldr	r3, [pc, #204]	@ (801551c <scalbn+0xf4>)
 801544e:	429e      	cmp	r6, r3
 8015450:	4604      	mov	r4, r0
 8015452:	460d      	mov	r5, r1
 8015454:	da0f      	bge.n	8015476 <scalbn+0x4e>
 8015456:	a328      	add	r3, pc, #160	@ (adr r3, 80154f8 <scalbn+0xd0>)
 8015458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801545c:	e01e      	b.n	801549c <scalbn+0x74>
 801545e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8015462:	4291      	cmp	r1, r2
 8015464:	d10b      	bne.n	801547e <scalbn+0x56>
 8015466:	4622      	mov	r2, r4
 8015468:	4620      	mov	r0, r4
 801546a:	4629      	mov	r1, r5
 801546c:	f7ea ff36 	bl	80002dc <__adddf3>
 8015470:	4604      	mov	r4, r0
 8015472:	460d      	mov	r5, r1
 8015474:	e022      	b.n	80154bc <scalbn+0x94>
 8015476:	460b      	mov	r3, r1
 8015478:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801547c:	3936      	subs	r1, #54	@ 0x36
 801547e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8015482:	4296      	cmp	r6, r2
 8015484:	dd0d      	ble.n	80154a2 <scalbn+0x7a>
 8015486:	2d00      	cmp	r5, #0
 8015488:	a11d      	add	r1, pc, #116	@ (adr r1, 8015500 <scalbn+0xd8>)
 801548a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801548e:	da02      	bge.n	8015496 <scalbn+0x6e>
 8015490:	a11d      	add	r1, pc, #116	@ (adr r1, 8015508 <scalbn+0xe0>)
 8015492:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015496:	a31a      	add	r3, pc, #104	@ (adr r3, 8015500 <scalbn+0xd8>)
 8015498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801549c:	f7eb f8d4 	bl	8000648 <__aeabi_dmul>
 80154a0:	e7e6      	b.n	8015470 <scalbn+0x48>
 80154a2:	1872      	adds	r2, r6, r1
 80154a4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80154a8:	428a      	cmp	r2, r1
 80154aa:	dcec      	bgt.n	8015486 <scalbn+0x5e>
 80154ac:	2a00      	cmp	r2, #0
 80154ae:	dd08      	ble.n	80154c2 <scalbn+0x9a>
 80154b0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80154b4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80154b8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80154bc:	ec45 4b10 	vmov	d0, r4, r5
 80154c0:	bd70      	pop	{r4, r5, r6, pc}
 80154c2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80154c6:	da08      	bge.n	80154da <scalbn+0xb2>
 80154c8:	2d00      	cmp	r5, #0
 80154ca:	a10b      	add	r1, pc, #44	@ (adr r1, 80154f8 <scalbn+0xd0>)
 80154cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154d0:	dac1      	bge.n	8015456 <scalbn+0x2e>
 80154d2:	a10f      	add	r1, pc, #60	@ (adr r1, 8015510 <scalbn+0xe8>)
 80154d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154d8:	e7bd      	b.n	8015456 <scalbn+0x2e>
 80154da:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80154de:	3236      	adds	r2, #54	@ 0x36
 80154e0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80154e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80154e8:	4620      	mov	r0, r4
 80154ea:	4b0d      	ldr	r3, [pc, #52]	@ (8015520 <scalbn+0xf8>)
 80154ec:	4629      	mov	r1, r5
 80154ee:	2200      	movs	r2, #0
 80154f0:	e7d4      	b.n	801549c <scalbn+0x74>
 80154f2:	bf00      	nop
 80154f4:	f3af 8000 	nop.w
 80154f8:	c2f8f359 	.word	0xc2f8f359
 80154fc:	01a56e1f 	.word	0x01a56e1f
 8015500:	8800759c 	.word	0x8800759c
 8015504:	7e37e43c 	.word	0x7e37e43c
 8015508:	8800759c 	.word	0x8800759c
 801550c:	fe37e43c 	.word	0xfe37e43c
 8015510:	c2f8f359 	.word	0xc2f8f359
 8015514:	81a56e1f 	.word	0x81a56e1f
 8015518:	43500000 	.word	0x43500000
 801551c:	ffff3cb0 	.word	0xffff3cb0
 8015520:	3c900000 	.word	0x3c900000

08015524 <__ieee754_sqrt>:
 8015524:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015528:	4a68      	ldr	r2, [pc, #416]	@ (80156cc <__ieee754_sqrt+0x1a8>)
 801552a:	ec55 4b10 	vmov	r4, r5, d0
 801552e:	43aa      	bics	r2, r5
 8015530:	462b      	mov	r3, r5
 8015532:	4621      	mov	r1, r4
 8015534:	d110      	bne.n	8015558 <__ieee754_sqrt+0x34>
 8015536:	4622      	mov	r2, r4
 8015538:	4620      	mov	r0, r4
 801553a:	4629      	mov	r1, r5
 801553c:	f7eb f884 	bl	8000648 <__aeabi_dmul>
 8015540:	4602      	mov	r2, r0
 8015542:	460b      	mov	r3, r1
 8015544:	4620      	mov	r0, r4
 8015546:	4629      	mov	r1, r5
 8015548:	f7ea fec8 	bl	80002dc <__adddf3>
 801554c:	4604      	mov	r4, r0
 801554e:	460d      	mov	r5, r1
 8015550:	ec45 4b10 	vmov	d0, r4, r5
 8015554:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015558:	2d00      	cmp	r5, #0
 801555a:	dc0e      	bgt.n	801557a <__ieee754_sqrt+0x56>
 801555c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8015560:	4322      	orrs	r2, r4
 8015562:	d0f5      	beq.n	8015550 <__ieee754_sqrt+0x2c>
 8015564:	b19d      	cbz	r5, 801558e <__ieee754_sqrt+0x6a>
 8015566:	4622      	mov	r2, r4
 8015568:	4620      	mov	r0, r4
 801556a:	4629      	mov	r1, r5
 801556c:	f7ea feb4 	bl	80002d8 <__aeabi_dsub>
 8015570:	4602      	mov	r2, r0
 8015572:	460b      	mov	r3, r1
 8015574:	f7eb f992 	bl	800089c <__aeabi_ddiv>
 8015578:	e7e8      	b.n	801554c <__ieee754_sqrt+0x28>
 801557a:	152a      	asrs	r2, r5, #20
 801557c:	d115      	bne.n	80155aa <__ieee754_sqrt+0x86>
 801557e:	2000      	movs	r0, #0
 8015580:	e009      	b.n	8015596 <__ieee754_sqrt+0x72>
 8015582:	0acb      	lsrs	r3, r1, #11
 8015584:	3a15      	subs	r2, #21
 8015586:	0549      	lsls	r1, r1, #21
 8015588:	2b00      	cmp	r3, #0
 801558a:	d0fa      	beq.n	8015582 <__ieee754_sqrt+0x5e>
 801558c:	e7f7      	b.n	801557e <__ieee754_sqrt+0x5a>
 801558e:	462a      	mov	r2, r5
 8015590:	e7fa      	b.n	8015588 <__ieee754_sqrt+0x64>
 8015592:	005b      	lsls	r3, r3, #1
 8015594:	3001      	adds	r0, #1
 8015596:	02dc      	lsls	r4, r3, #11
 8015598:	d5fb      	bpl.n	8015592 <__ieee754_sqrt+0x6e>
 801559a:	1e44      	subs	r4, r0, #1
 801559c:	1b12      	subs	r2, r2, r4
 801559e:	f1c0 0420 	rsb	r4, r0, #32
 80155a2:	fa21 f404 	lsr.w	r4, r1, r4
 80155a6:	4323      	orrs	r3, r4
 80155a8:	4081      	lsls	r1, r0
 80155aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80155ae:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80155b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80155b6:	07d2      	lsls	r2, r2, #31
 80155b8:	bf5c      	itt	pl
 80155ba:	005b      	lslpl	r3, r3, #1
 80155bc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80155c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80155c4:	bf58      	it	pl
 80155c6:	0049      	lslpl	r1, r1, #1
 80155c8:	2600      	movs	r6, #0
 80155ca:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80155ce:	106d      	asrs	r5, r5, #1
 80155d0:	0049      	lsls	r1, r1, #1
 80155d2:	2016      	movs	r0, #22
 80155d4:	4632      	mov	r2, r6
 80155d6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80155da:	1917      	adds	r7, r2, r4
 80155dc:	429f      	cmp	r7, r3
 80155de:	bfde      	ittt	le
 80155e0:	193a      	addle	r2, r7, r4
 80155e2:	1bdb      	suble	r3, r3, r7
 80155e4:	1936      	addle	r6, r6, r4
 80155e6:	0fcf      	lsrs	r7, r1, #31
 80155e8:	3801      	subs	r0, #1
 80155ea:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80155ee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80155f2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80155f6:	d1f0      	bne.n	80155da <__ieee754_sqrt+0xb6>
 80155f8:	4604      	mov	r4, r0
 80155fa:	2720      	movs	r7, #32
 80155fc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8015600:	429a      	cmp	r2, r3
 8015602:	eb00 0e0c 	add.w	lr, r0, ip
 8015606:	db02      	blt.n	801560e <__ieee754_sqrt+0xea>
 8015608:	d113      	bne.n	8015632 <__ieee754_sqrt+0x10e>
 801560a:	458e      	cmp	lr, r1
 801560c:	d811      	bhi.n	8015632 <__ieee754_sqrt+0x10e>
 801560e:	f1be 0f00 	cmp.w	lr, #0
 8015612:	eb0e 000c 	add.w	r0, lr, ip
 8015616:	da42      	bge.n	801569e <__ieee754_sqrt+0x17a>
 8015618:	2800      	cmp	r0, #0
 801561a:	db40      	blt.n	801569e <__ieee754_sqrt+0x17a>
 801561c:	f102 0801 	add.w	r8, r2, #1
 8015620:	1a9b      	subs	r3, r3, r2
 8015622:	458e      	cmp	lr, r1
 8015624:	bf88      	it	hi
 8015626:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801562a:	eba1 010e 	sub.w	r1, r1, lr
 801562e:	4464      	add	r4, ip
 8015630:	4642      	mov	r2, r8
 8015632:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8015636:	3f01      	subs	r7, #1
 8015638:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801563c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015640:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8015644:	d1dc      	bne.n	8015600 <__ieee754_sqrt+0xdc>
 8015646:	4319      	orrs	r1, r3
 8015648:	d01b      	beq.n	8015682 <__ieee754_sqrt+0x15e>
 801564a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80156d0 <__ieee754_sqrt+0x1ac>
 801564e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80156d4 <__ieee754_sqrt+0x1b0>
 8015652:	e9da 0100 	ldrd	r0, r1, [sl]
 8015656:	e9db 2300 	ldrd	r2, r3, [fp]
 801565a:	f7ea fe3d 	bl	80002d8 <__aeabi_dsub>
 801565e:	e9da 8900 	ldrd	r8, r9, [sl]
 8015662:	4602      	mov	r2, r0
 8015664:	460b      	mov	r3, r1
 8015666:	4640      	mov	r0, r8
 8015668:	4649      	mov	r1, r9
 801566a:	f7eb fa69 	bl	8000b40 <__aeabi_dcmple>
 801566e:	b140      	cbz	r0, 8015682 <__ieee754_sqrt+0x15e>
 8015670:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8015674:	e9da 0100 	ldrd	r0, r1, [sl]
 8015678:	e9db 2300 	ldrd	r2, r3, [fp]
 801567c:	d111      	bne.n	80156a2 <__ieee754_sqrt+0x17e>
 801567e:	3601      	adds	r6, #1
 8015680:	463c      	mov	r4, r7
 8015682:	1072      	asrs	r2, r6, #1
 8015684:	0863      	lsrs	r3, r4, #1
 8015686:	07f1      	lsls	r1, r6, #31
 8015688:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801568c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8015690:	bf48      	it	mi
 8015692:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8015696:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801569a:	4618      	mov	r0, r3
 801569c:	e756      	b.n	801554c <__ieee754_sqrt+0x28>
 801569e:	4690      	mov	r8, r2
 80156a0:	e7be      	b.n	8015620 <__ieee754_sqrt+0xfc>
 80156a2:	f7ea fe1b 	bl	80002dc <__adddf3>
 80156a6:	e9da 8900 	ldrd	r8, r9, [sl]
 80156aa:	4602      	mov	r2, r0
 80156ac:	460b      	mov	r3, r1
 80156ae:	4640      	mov	r0, r8
 80156b0:	4649      	mov	r1, r9
 80156b2:	f7eb fa3b 	bl	8000b2c <__aeabi_dcmplt>
 80156b6:	b120      	cbz	r0, 80156c2 <__ieee754_sqrt+0x19e>
 80156b8:	1ca0      	adds	r0, r4, #2
 80156ba:	bf08      	it	eq
 80156bc:	3601      	addeq	r6, #1
 80156be:	3402      	adds	r4, #2
 80156c0:	e7df      	b.n	8015682 <__ieee754_sqrt+0x15e>
 80156c2:	1c63      	adds	r3, r4, #1
 80156c4:	f023 0401 	bic.w	r4, r3, #1
 80156c8:	e7db      	b.n	8015682 <__ieee754_sqrt+0x15e>
 80156ca:	bf00      	nop
 80156cc:	7ff00000 	.word	0x7ff00000
 80156d0:	200002b0 	.word	0x200002b0
 80156d4:	200002a8 	.word	0x200002a8

080156d8 <_init>:
 80156d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156da:	bf00      	nop
 80156dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156de:	bc08      	pop	{r3}
 80156e0:	469e      	mov	lr, r3
 80156e2:	4770      	bx	lr

080156e4 <_fini>:
 80156e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156e6:	bf00      	nop
 80156e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156ea:	bc08      	pop	{r3}
 80156ec:	469e      	mov	lr, r3
 80156ee:	4770      	bx	lr
