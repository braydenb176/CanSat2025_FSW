
CS25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001336c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08013550  08013550  00014550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013b28  08013b28  000152a8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013b28  08013b28  00014b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013b30  08013b30  000152a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013b30  08013b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013b34  08013b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002a8  20000000  08013b38  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013dc  200002a8  08013de0  000152a8  2**2
                  ALLOC
 10 ._user_heap_stack 00001504  20001684  08013de0  00015684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000152a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003152c  00000000  00000000  000152d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000066bd  00000000  00000000  00046804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a58  00000000  00000000  0004cec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000020b2  00000000  00000000  0004f920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000099c3  00000000  00000000  000519d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034286  00000000  00000000  0005b395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff922  00000000  00000000  0008f61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018ef3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c4b0  00000000  00000000  0018ef80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0019b430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002a8 	.word	0x200002a8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013534 	.word	0x08013534

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002ac 	.word	0x200002ac
 800021c:	08013534 	.word	0x08013534

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <_write>:

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int fd, char *ptr, int len) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
    // ignore fd, just send to UART3
    HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	4804      	ldr	r0, [pc, #16]	@ (8000f4c <_write+0x28>)
 8000f3c:	f00a fa9b 	bl	800b476 <HAL_UART_Transmit>
    return len;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200006e0 	.word	0x200006e0

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	b5b0      	push	{r4, r5, r7, lr}
 8000f52:	b09c      	sub	sp, #112	@ 0x70
 8000f54:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f56:	f002 fe47 	bl	8003be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5a:	f000 f90d 	bl	8001178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5e:	f000 fecd 	bl	8001cfc <MX_GPIO_Init>
  MX_DMA_Init();
 8000f62:	f000 fea1 	bl	8001ca8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f66:	f000 f999 	bl	800129c <MX_ADC1_Init>
  MX_I2C3_Init();
 8000f6a:	f000 fa37 	bl	80013dc <MX_I2C3_Init>
  MX_IRTIM_Init();
 8000f6e:	f000 fa75 	bl	800145c <MX_IRTIM_Init>
  MX_RTC_Init();
 8000f72:	f000 fa91 	bl	8001498 <MX_RTC_Init>
  MX_SPI2_Init();
 8000f76:	f000 fac3 	bl	8001500 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000f7a:	f000 faff 	bl	800157c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f7e:	f000 fb77 	bl	8001670 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000f82:	f000 fc0d 	bl	80017a0 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000f86:	f000 fc85 	bl	8001894 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000f8a:	f000 fd09 	bl	80019a0 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000f8e:	f000 fd7d 	bl	8001a8c <MX_TIM17_Init>
  MX_UART5_Init();
 8000f92:	f000 fdf1 	bl	8001b78 <MX_UART5_Init>
  MX_RNG_Init();
 8000f96:	f000 fa69 	bl	800146c <MX_RNG_Init>
  MX_USB_Device_Init();
 8000f9a:	f00f f939 	bl	8010210 <MX_USB_Device_Init>
  MX_USART3_UART_Init();
 8000f9e:	f000 fe37 	bl	8001c10 <MX_USART3_UART_Init>
  MX_CORDIC_Init();
 8000fa2:	f000 f9f3 	bl	800138c <MX_CORDIC_Init>
  MX_FMAC_Init();
 8000fa6:	f000 fa05 	bl	80013b4 <MX_FMAC_Init>
  /* USER CODE BEGIN 2 */
  // Feedback LED
	HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2180      	movs	r1, #128	@ 0x80
 8000fae:	486a      	ldr	r0, [pc, #424]	@ (8001158 <main+0x208>)
 8000fb0:	f004 fd26 	bl	8005a00 <HAL_GPIO_WritePin>

	// Enable GPS and XBEE
	HAL_GPIO_WritePin(XBEE_RST_GPIO_Port, XBEE_RST_Pin, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fbe:	f004 fd1f 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	4864      	ldr	r0, [pc, #400]	@ (8001158 <main+0x208>)
 8000fc8:	f004 fd1a 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_Delay(3000); // wait for the Xbee to get brought back up again
 8000fcc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fd0:	f002 fe40 	bl	8003c54 <HAL_Delay>

	// Disable ALL chip selects
	HAL_GPIO_WritePin(IMU_nCS_GPIO_Port, IMU_nCS_Pin, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	485f      	ldr	r0, [pc, #380]	@ (8001158 <main+0x208>)
 8000fda:	f004 fd11 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BMP_nCS_GPIO_Port, BMP_nCS_Pin, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fe4:	485c      	ldr	r0, [pc, #368]	@ (8001158 <main+0x208>)
 8000fe6:	f004 fd0b 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MAG_nCS_GPIO_Port, MAG_nCS_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ff0:	4859      	ldr	r0, [pc, #356]	@ (8001158 <main+0x208>)
 8000ff2:	f004 fd05 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MAGEXT_nCS_GPIO_Port, MAGEXT_nCS_Pin, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ffc:	4856      	ldr	r0, [pc, #344]	@ (8001158 <main+0x208>)
 8000ffe:	f004 fcff 	bl	8005a00 <HAL_GPIO_WritePin>

	// Initialize IMU
	ICM42688P_init(&hspi2, IMU_nCS_GPIO_Port, IMU_nCS_Pin);
 8001002:	2204      	movs	r2, #4
 8001004:	4954      	ldr	r1, [pc, #336]	@ (8001158 <main+0x208>)
 8001006:	4855      	ldr	r0, [pc, #340]	@ (800115c <main+0x20c>)
 8001008:	f002 f91c 	bl	8003244 <ICM42688P_init>

	// Initialize MS5607
	MS5607_Init(&hspi2, BMP_nCS_GPIO_Port, BMP_nCS_Pin);
 800100c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001010:	4951      	ldr	r1, [pc, #324]	@ (8001158 <main+0x208>)
 8001012:	4852      	ldr	r0, [pc, #328]	@ (800115c <main+0x20c>)
 8001014:	f002 f9ac 	bl	8003370 <MS5607_Init>

	// Initialize BMM150
	struct bmm150_dev bmm150 = BMM150_spi_init(&hspi2, MAG_nCS_GPIO_Port, MAG_nCS_Pin);
 8001018:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800101c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001020:	4a4d      	ldr	r2, [pc, #308]	@ (8001158 <main+0x208>)
 8001022:	494e      	ldr	r1, [pc, #312]	@ (800115c <main+0x20c>)
 8001024:	f001 fed4 	bl	8002dd0 <BMM150_spi_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int i = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	int strlen = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	65bb      	str	r3, [r7, #88]	@ 0x58

	MS5607Readings bmp_data;
	ICM42688P_AccelData imu_data;
	BMM150_mag_data mag_data;

	uint8_t test = ICM42688P_read_reg(0x75);
 8001030:	2075      	movs	r0, #117	@ 0x75
 8001032:	f002 f8dd 	bl	80031f0 <ICM42688P_read_reg>
 8001036:	4603      	mov	r3, r0
 8001038:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	printf("IMU is 0x%X! \n\r", test);
 800103c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001040:	4619      	mov	r1, r3
 8001042:	4847      	ldr	r0, [pc, #284]	@ (8001160 <main+0x210>)
 8001044:	f010 fbb4 	bl	80117b0 <iprintf>

	HAL_Delay(10);
 8001048:	200a      	movs	r0, #10
 800104a:	f002 fe03 	bl	8003c54 <HAL_Delay>
	printf("BMM is... 0x%X", bmm150.chip_id); // Not working :(
 800104e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001052:	4619      	mov	r1, r3
 8001054:	4843      	ldr	r0, [pc, #268]	@ (8001164 <main+0x214>)
 8001056:	f010 fbab 	bl	80117b0 <iprintf>

  while (1)
  {
	strlen = printf("\n\rHi! %d\n\r", i++);
 800105a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001060:	4619      	mov	r1, r3
 8001062:	4841      	ldr	r0, [pc, #260]	@ (8001168 <main+0x218>)
 8001064:	f010 fba4 	bl	80117b0 <iprintf>
 8001068:	65b8      	str	r0, [r7, #88]	@ 0x58

	HAL_Delay(10);
 800106a:	200a      	movs	r0, #10
 800106c:	f002 fdf2 	bl	8003c54 <HAL_Delay>

	bmp_data = MS5607ReadValues();
 8001070:	f002 fd5e 	bl	8003b30 <MS5607ReadValues>
 8001074:	eeb0 6a40 	vmov.f32	s12, s0
 8001078:	eef0 6a60 	vmov.f32	s13, s1
 800107c:	eeb0 7a41 	vmov.f32	s14, s2
 8001080:	eef0 7a61 	vmov.f32	s15, s3
 8001084:	ed87 6b06 	vstr	d6, [r7, #24]
 8001088:	ed87 7b08 	vstr	d7, [r7, #32]
	strlen = printf("Temperature = %.2f°C, Pressure = %.2fkPa \n\r",
 800108c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001094:	e9cd 2300 	strd	r2, r3, [sp]
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4833      	ldr	r0, [pc, #204]	@ (800116c <main+0x21c>)
 800109e:	f010 fb87 	bl	80117b0 <iprintf>
 80010a2:	65b8      	str	r0, [r7, #88]	@ 0x58
			bmp_data.temperature_C,
			bmp_data.pressure_kPa);

	HAL_Delay(10);
 80010a4:	200a      	movs	r0, #10
 80010a6:	f002 fdd5 	bl	8003c54 <HAL_Delay>

	imu_data = ICM42688P_read_data();
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	4618      	mov	r0, r3
 80010b0:	f002 f8f2 	bl	8003298 <ICM42688P_read_data>
	strlen = printf("ACCEL(X = %d, Y = %d, Z = %d), GYRO(X = %d, Y = %d, Z = %d) \n\r",
			imu_data.accel_x,
 80010b4:	89bb      	ldrh	r3, [r7, #12]
	strlen = printf("ACCEL(X = %d, Y = %d, Z = %d), GYRO(X = %d, Y = %d, Z = %d) \n\r",
 80010b6:	4618      	mov	r0, r3
			imu_data.accel_y,
 80010b8:	89fb      	ldrh	r3, [r7, #14]
	strlen = printf("ACCEL(X = %d, Y = %d, Z = %d), GYRO(X = %d, Y = %d, Z = %d) \n\r",
 80010ba:	461c      	mov	r4, r3
			imu_data.accel_z,
 80010bc:	8a3b      	ldrh	r3, [r7, #16]
	strlen = printf("ACCEL(X = %d, Y = %d, Z = %d), GYRO(X = %d, Y = %d, Z = %d) \n\r",
 80010be:	461d      	mov	r5, r3
			imu_data.gyro_x,
 80010c0:	8a7b      	ldrh	r3, [r7, #18]
			imu_data.gyro_y,
 80010c2:	8aba      	ldrh	r2, [r7, #20]
			imu_data.gyro_z);
 80010c4:	8af9      	ldrh	r1, [r7, #22]
	strlen = printf("ACCEL(X = %d, Y = %d, Z = %d), GYRO(X = %d, Y = %d, Z = %d) \n\r",
 80010c6:	9102      	str	r1, [sp, #8]
 80010c8:	9201      	str	r2, [sp, #4]
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	462b      	mov	r3, r5
 80010ce:	4622      	mov	r2, r4
 80010d0:	4601      	mov	r1, r0
 80010d2:	4827      	ldr	r0, [pc, #156]	@ (8001170 <main+0x220>)
 80010d4:	f010 fb6c 	bl	80117b0 <iprintf>
 80010d8:	65b8      	str	r0, [r7, #88]	@ 0x58

	HAL_Delay(10);
 80010da:	200a      	movs	r0, #10
 80010dc:	f002 fdba 	bl	8003c54 <HAL_Delay>
				mag_data.y,
				mag_data.z);
	*/

	// Bullshit.
	strlen = printf("Battery Voltage = %1.2fV \n\r", 7.62 + (0.0002 * (float) (uint8_t) rand()));
 80010e0:	f00f fe10 	bl	8010d04 <rand>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	ee07 3a90 	vmov	s15, r3
 80010ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f0:	ee17 0a90 	vmov	r0, s15
 80010f4:	f7ff fa50 	bl	8000598 <__aeabi_f2d>
 80010f8:	a313      	add	r3, pc, #76	@ (adr r3, 8001148 <main+0x1f8>)
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	f7ff faa3 	bl	8000648 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	a311      	add	r3, pc, #68	@ (adr r3, 8001150 <main+0x200>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	f7ff f8e4 	bl	80002dc <__adddf3>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4816      	ldr	r0, [pc, #88]	@ (8001174 <main+0x224>)
 800111a:	f010 fb49 	bl	80117b0 <iprintf>
 800111e:	65b8      	str	r0, [r7, #88]	@ 0x58


	// Heartbeat
	HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2180      	movs	r1, #128	@ 0x80
 8001124:	480c      	ldr	r0, [pc, #48]	@ (8001158 <main+0x208>)
 8001126:	f004 fc6b 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800112a:	2064      	movs	r0, #100	@ 0x64
 800112c:	f002 fd92 	bl	8003c54 <HAL_Delay>
	HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	2180      	movs	r1, #128	@ 0x80
 8001134:	4808      	ldr	r0, [pc, #32]	@ (8001158 <main+0x208>)
 8001136:	f004 fc63 	bl	8005a00 <HAL_GPIO_WritePin>


	HAL_Delay(1000);
 800113a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800113e:	f002 fd89 	bl	8003c54 <HAL_Delay>
	strlen = printf("\n\rHi! %d\n\r", i++);
 8001142:	bf00      	nop
 8001144:	e789      	b.n	800105a <main+0x10a>
 8001146:	bf00      	nop
 8001148:	eb1c432d 	.word	0xeb1c432d
 800114c:	3f2a36e2 	.word	0x3f2a36e2
 8001150:	47ae147b 	.word	0x47ae147b
 8001154:	401e7ae1 	.word	0x401e7ae1
 8001158:	48000400 	.word	0x48000400
 800115c:	20000420 	.word	0x20000420
 8001160:	08013550 	.word	0x08013550
 8001164:	08013560 	.word	0x08013560
 8001168:	08013570 	.word	0x08013570
 800116c:	0801357c 	.word	0x0801357c
 8001170:	080135ac 	.word	0x080135ac
 8001174:	080135ec 	.word	0x080135ec

08001178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b09a      	sub	sp, #104	@ 0x68
 800117c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001182:	2238      	movs	r2, #56	@ 0x38
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f010 fb67 	bl	801185a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  RCC_CRSInitTypeDef pInit = {0};
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]
 80011aa:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ac:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011b0:	f006 fb9e 	bl	80078f0 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011b4:	f006 fb0c 	bl	80077d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011b8:	4b37      	ldr	r3, [pc, #220]	@ (8001298 <SystemClock_Config+0x120>)
 80011ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011be:	4a36      	ldr	r2, [pc, #216]	@ (8001298 <SystemClock_Config+0x120>)
 80011c0:	f023 0318 	bic.w	r3, r3, #24
 80011c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 80011c8:	232e      	movs	r3, #46	@ 0x2e
 80011ca:	633b      	str	r3, [r7, #48]	@ 0x30
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011cc:	2301      	movs	r3, #1
 80011ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d6:	2340      	movs	r3, #64	@ 0x40
 80011d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011da:	2301      	movs	r3, #1
 80011dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011de:	2301      	movs	r3, #1
 80011e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e2:	2302      	movs	r3, #2
 80011e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e6:	2302      	movs	r3, #2
 80011e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 80011ee:	2308      	movs	r3, #8
 80011f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f2:	2302      	movs	r3, #2
 80011f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011fa:	2302      	movs	r3, #2
 80011fc:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001202:	4618      	mov	r0, r3
 8001204:	f006 fc28 	bl	8007a58 <HAL_RCC_OscConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800120e:	f000 fe79 	bl	8001f04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001212:	230f      	movs	r3, #15
 8001214:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001216:	2303      	movs	r3, #3
 8001218:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	2102      	movs	r1, #2
 800122c:	4618      	mov	r0, r3
 800122e:	f006 ff25 	bl	800807c <HAL_RCC_ClockConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001238:	f000 fe64 	bl	8001f04 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800123c:	2200      	movs	r2, #0
 800123e:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 8001242:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001246:	f007 f855 	bl	80082f4 <HAL_RCC_MCOConfig>
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSE);
 800124a:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800124e:	f007 fbe5 	bl	8008a1c <HAL_RCCEx_EnableLSCO>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001252:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <SystemClock_Config+0x120>)
 8001254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001256:	4a10      	ldr	r2, [pc, #64]	@ (8001298 <SystemClock_Config+0x120>)
 8001258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800125c:	6593      	str	r3, [r2, #88]	@ 0x58
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <SystemClock_Config+0x120>)
 8001260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

  /** Configures CRS
  */
  pInit.Prescaler = RCC_CRS_SYNC_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
  pInit.Source = RCC_CRS_SYNC_SOURCE_LSE;
 800126e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001272:	60bb      	str	r3, [r7, #8]
  pInit.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  pInit.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 8001278:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 800127c:	613b      	str	r3, [r7, #16]
  pInit.ErrorLimitValue = 34;
 800127e:	2322      	movs	r3, #34	@ 0x22
 8001280:	617b      	str	r3, [r7, #20]
  pInit.HSI48CalibrationValue = 32;
 8001282:	2320      	movs	r3, #32
 8001284:	61bb      	str	r3, [r7, #24]

  HAL_RCCEx_CRSConfig(&pInit);
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	4618      	mov	r0, r3
 800128a:	f007 fc31 	bl	8008af0 <HAL_RCCEx_CRSConfig>
}
 800128e:	bf00      	nop
 8001290:	3768      	adds	r7, #104	@ 0x68
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000

0800129c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	@ 0x30
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2220      	movs	r2, #32
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f010 fad0 	bl	801185a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012ba:	4b32      	ldr	r3, [pc, #200]	@ (8001384 <MX_ADC1_Init+0xe8>)
 80012bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012c2:	4b30      	ldr	r3, [pc, #192]	@ (8001384 <MX_ADC1_Init+0xe8>)
 80012c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001384 <MX_ADC1_Init+0xe8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001384 <MX_ADC1_Init+0xe8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80012d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001384 <MX_ADC1_Init+0xe8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012dc:	4b29      	ldr	r3, [pc, #164]	@ (8001384 <MX_ADC1_Init+0xe8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e2:	4b28      	ldr	r3, [pc, #160]	@ (8001384 <MX_ADC1_Init+0xe8>)
 80012e4:	2204      	movs	r2, #4
 80012e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012e8:	4b26      	ldr	r3, [pc, #152]	@ (8001384 <MX_ADC1_Init+0xe8>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012ee:	4b25      	ldr	r3, [pc, #148]	@ (8001384 <MX_ADC1_Init+0xe8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80012f4:	4b23      	ldr	r3, [pc, #140]	@ (8001384 <MX_ADC1_Init+0xe8>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012fa:	4b22      	ldr	r3, [pc, #136]	@ (8001384 <MX_ADC1_Init+0xe8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001302:	4b20      	ldr	r3, [pc, #128]	@ (8001384 <MX_ADC1_Init+0xe8>)
 8001304:	2200      	movs	r2, #0
 8001306:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001308:	4b1e      	ldr	r3, [pc, #120]	@ (8001384 <MX_ADC1_Init+0xe8>)
 800130a:	2200      	movs	r2, #0
 800130c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800130e:	4b1d      	ldr	r3, [pc, #116]	@ (8001384 <MX_ADC1_Init+0xe8>)
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001316:	4b1b      	ldr	r3, [pc, #108]	@ (8001384 <MX_ADC1_Init+0xe8>)
 8001318:	2200      	movs	r2, #0
 800131a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800131c:	4b19      	ldr	r3, [pc, #100]	@ (8001384 <MX_ADC1_Init+0xe8>)
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001324:	4817      	ldr	r0, [pc, #92]	@ (8001384 <MX_ADC1_Init+0xe8>)
 8001326:	f002 feb1 	bl	800408c <HAL_ADC_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001330:	f000 fde8 	bl	8001f04 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001338:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800133c:	4619      	mov	r1, r3
 800133e:	4811      	ldr	r0, [pc, #68]	@ (8001384 <MX_ADC1_Init+0xe8>)
 8001340:	f003 fca4 	bl	8004c8c <HAL_ADCEx_MultiModeConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800134a:	f000 fddb 	bl	8001f04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <MX_ADC1_Init+0xec>)
 8001350:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001352:	2306      	movs	r3, #6
 8001354:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800135a:	237f      	movs	r3, #127	@ 0x7f
 800135c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800135e:	2304      	movs	r3, #4
 8001360:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	4619      	mov	r1, r3
 800136a:	4806      	ldr	r0, [pc, #24]	@ (8001384 <MX_ADC1_Init+0xe8>)
 800136c:	f003 f83c 	bl	80043e8 <HAL_ADC_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001376:	f000 fdc5 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	3730      	adds	r7, #48	@ 0x30
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200002c4 	.word	0x200002c4
 8001388:	25b00200 	.word	0x25b00200

0800138c <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <MX_CORDIC_Init+0x20>)
 8001392:	4a07      	ldr	r2, [pc, #28]	@ (80013b0 <MX_CORDIC_Init+0x24>)
 8001394:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	@ (80013ac <MX_CORDIC_Init+0x20>)
 8001398:	f003 fd60 	bl	8004e5c <HAL_CORDIC_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80013a2:	f000 fdaf 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000330 	.word	0x20000330
 80013b0:	40020c00 	.word	0x40020c00

080013b4 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <MX_FMAC_Init+0x20>)
 80013ba:	4a07      	ldr	r2, [pc, #28]	@ (80013d8 <MX_FMAC_Init+0x24>)
 80013bc:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <MX_FMAC_Init+0x20>)
 80013c0:	f004 f8d8 	bl	8005574 <HAL_FMAC_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 80013ca:	f000 fd9b 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000358 	.word	0x20000358
 80013d8:	40021400 	.word	0x40021400

080013dc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <MX_I2C3_Init+0x74>)
 80013e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001454 <MX_I2C3_Init+0x78>)
 80013e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C12166;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <MX_I2C3_Init+0x74>)
 80013e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001458 <MX_I2C3_Init+0x7c>)
 80013ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80013ec:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <MX_I2C3_Init+0x74>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f2:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <MX_I2C3_Init+0x74>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f8:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <MX_I2C3_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <MX_I2C3_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <MX_I2C3_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800140a:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <MX_I2C3_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001410:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <MX_I2C3_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001416:	480e      	ldr	r0, [pc, #56]	@ (8001450 <MX_I2C3_Init+0x74>)
 8001418:	f004 fb0a 	bl	8005a30 <HAL_I2C_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001422:	f000 fd6f 	bl	8001f04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001426:	2100      	movs	r1, #0
 8001428:	4809      	ldr	r0, [pc, #36]	@ (8001450 <MX_I2C3_Init+0x74>)
 800142a:	f004 fb9c 	bl	8005b66 <HAL_I2CEx_ConfigAnalogFilter>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001434:	f000 fd66 	bl	8001f04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001438:	2100      	movs	r1, #0
 800143a:	4805      	ldr	r0, [pc, #20]	@ (8001450 <MX_I2C3_Init+0x74>)
 800143c:	f004 fbde 	bl	8005bfc <HAL_I2CEx_ConfigDigitalFilter>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001446:	f000 fd5d 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000390 	.word	0x20000390
 8001454:	40007800 	.word	0x40007800
 8001458:	00c12166 	.word	0x00c12166

0800145c <MX_IRTIM_Init>:
  * @brief IRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_IRTIM_Init(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END IRTIM_Init 1 */
  /* USER CODE BEGIN IRTIM_Init 2 */

  /* USER CODE END IRTIM_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001470:	4b07      	ldr	r3, [pc, #28]	@ (8001490 <MX_RNG_Init+0x24>)
 8001472:	4a08      	ldr	r2, [pc, #32]	@ (8001494 <MX_RNG_Init+0x28>)
 8001474:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <MX_RNG_Init+0x24>)
 8001478:	2200      	movs	r2, #0
 800147a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800147c:	4804      	ldr	r0, [pc, #16]	@ (8001490 <MX_RNG_Init+0x24>)
 800147e:	f007 fb79 	bl	8008b74 <HAL_RNG_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001488:	f000 fd3c 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200003e4 	.word	0x200003e4
 8001494:	50060800 	.word	0x50060800

08001498 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800149c:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <MX_RTC_Init+0x60>)
 800149e:	4a17      	ldr	r2, [pc, #92]	@ (80014fc <MX_RTC_Init+0x64>)
 80014a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <MX_RTC_Init+0x60>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014a8:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <MX_RTC_Init+0x60>)
 80014aa:	227f      	movs	r2, #127	@ 0x7f
 80014ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014ae:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <MX_RTC_Init+0x60>)
 80014b0:	22ff      	movs	r2, #255	@ 0xff
 80014b2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014b4:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <MX_RTC_Init+0x60>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80014ba:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <MX_RTC_Init+0x60>)
 80014bc:	2200      	movs	r2, #0
 80014be:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014c0:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <MX_RTC_Init+0x60>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014c6:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <MX_RTC_Init+0x60>)
 80014c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014cc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80014ce:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <MX_RTC_Init+0x60>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014d4:	4808      	ldr	r0, [pc, #32]	@ (80014f8 <MX_RTC_Init+0x60>)
 80014d6:	f007 fb82 	bl	8008bde <HAL_RTC_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80014e0:	f000 fd10 	bl	8001f04 <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 80014e4:	4804      	ldr	r0, [pc, #16]	@ (80014f8 <MX_RTC_Init+0x60>)
 80014e6:	f007 fc96 	bl	8008e16 <HAL_RTCEx_SetRefClock>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80014f0:	f000 fd08 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200003f8 	.word	0x200003f8
 80014fc:	40002800 	.word	0x40002800

08001500 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001504:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <MX_SPI2_Init+0x74>)
 8001506:	4a1c      	ldr	r2, [pc, #112]	@ (8001578 <MX_SPI2_Init+0x78>)
 8001508:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800150a:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <MX_SPI2_Init+0x74>)
 800150c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001510:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001512:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <MX_SPI2_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001518:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <MX_SPI2_Init+0x74>)
 800151a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800151e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001520:	4b14      	ldr	r3, [pc, #80]	@ (8001574 <MX_SPI2_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001526:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <MX_SPI2_Init+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <MX_SPI2_Init+0x74>)
 800152e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001532:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001534:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <MX_SPI2_Init+0x74>)
 8001536:	2210      	movs	r2, #16
 8001538:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800153a:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <MX_SPI2_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <MX_SPI2_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001546:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <MX_SPI2_Init+0x74>)
 8001548:	2200      	movs	r2, #0
 800154a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800154c:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <MX_SPI2_Init+0x74>)
 800154e:	2207      	movs	r2, #7
 8001550:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001552:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <MX_SPI2_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <MX_SPI2_Init+0x74>)
 800155a:	2208      	movs	r2, #8
 800155c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800155e:	4805      	ldr	r0, [pc, #20]	@ (8001574 <MX_SPI2_Init+0x74>)
 8001560:	f007 fc9d 	bl	8008e9e <HAL_SPI_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800156a:	f000 fccb 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000420 	.word	0x20000420
 8001578:	40003800 	.word	0x40003800

0800157c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b092      	sub	sp, #72	@ 0x48
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001586:	2224      	movs	r2, #36	@ 0x24
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f010 f965 	bl	801185a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001590:	f107 0318 	add.w	r3, r7, #24
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 800159c:	463b      	mov	r3, r7
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]
 80015aa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001668 <MX_TIM1_Init+0xec>)
 80015ae:	4a2f      	ldr	r2, [pc, #188]	@ (800166c <MX_TIM1_Init+0xf0>)
 80015b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001668 <MX_TIM1_Init+0xec>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001668 <MX_TIM1_Init+0xec>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015be:	4b2a      	ldr	r3, [pc, #168]	@ (8001668 <MX_TIM1_Init+0xec>)
 80015c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c6:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <MX_TIM1_Init+0xec>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015cc:	4b26      	ldr	r3, [pc, #152]	@ (8001668 <MX_TIM1_Init+0xec>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d2:	4b25      	ldr	r3, [pc, #148]	@ (8001668 <MX_TIM1_Init+0xec>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015d8:	2301      	movs	r3, #1
 80015da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015dc:	2300      	movs	r3, #0
 80015de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015e0:	2301      	movs	r3, #1
 80015e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015ec:	2300      	movs	r3, #0
 80015ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015f0:	2301      	movs	r3, #1
 80015f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015f4:	2300      	movs	r3, #0
 80015f6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80015fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001600:	4619      	mov	r1, r3
 8001602:	4819      	ldr	r0, [pc, #100]	@ (8001668 <MX_TIM1_Init+0xec>)
 8001604:	f008 fc9f 	bl	8009f46 <HAL_TIM_Encoder_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800160e:	f000 fc79 	bl	8001f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800161e:	f107 0318 	add.w	r3, r7, #24
 8001622:	4619      	mov	r1, r3
 8001624:	4810      	ldr	r0, [pc, #64]	@ (8001668 <MX_TIM1_Init+0xec>)
 8001626:	f009 fd33 	bl	800b090 <HAL_TIMEx_MasterConfigSynchronization>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001630:	f000 fc68 	bl	8001f04 <Error_Handler>
  }
  sEncoderIndexConfig.Polarity = TIM_ENCODERINDEX_POLARITY_NONINVERTED;
 8001634:	2300      	movs	r3, #0
 8001636:	603b      	str	r3, [r7, #0]
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
  sEncoderIndexConfig.Filter = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	60bb      	str	r3, [r7, #8]
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	733b      	strb	r3, [r7, #12]
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_00;
 8001644:	2300      	movs	r3, #0
 8001646:	613b      	str	r3, [r7, #16]
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_ConfigEncoderIndex(&htim1, &sEncoderIndexConfig) != HAL_OK)
 800164c:	463b      	mov	r3, r7
 800164e:	4619      	mov	r1, r3
 8001650:	4805      	ldr	r0, [pc, #20]	@ (8001668 <MX_TIM1_Init+0xec>)
 8001652:	f009 fe3f 	bl	800b2d4 <HAL_TIMEx_ConfigEncoderIndex>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 800165c:	f000 fc52 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	3748      	adds	r7, #72	@ 0x48
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000484 	.word	0x20000484
 800166c:	40012c00 	.word	0x40012c00

08001670 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08e      	sub	sp, #56	@ 0x38
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001676:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001690:	463b      	mov	r3, r7
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]
 800169e:	615a      	str	r2, [r3, #20]
 80016a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001798 <MX_TIM3_Init+0x128>)
 80016a4:	4a3d      	ldr	r2, [pc, #244]	@ (800179c <MX_TIM3_Init+0x12c>)
 80016a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001798 <MX_TIM3_Init+0x128>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001798 <MX_TIM3_Init+0x128>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016b4:	4b38      	ldr	r3, [pc, #224]	@ (8001798 <MX_TIM3_Init+0x128>)
 80016b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016bc:	4b36      	ldr	r3, [pc, #216]	@ (8001798 <MX_TIM3_Init+0x128>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c2:	4b35      	ldr	r3, [pc, #212]	@ (8001798 <MX_TIM3_Init+0x128>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016c8:	4833      	ldr	r0, [pc, #204]	@ (8001798 <MX_TIM3_Init+0x128>)
 80016ca:	f008 fb1d 	bl	8009d08 <HAL_TIM_Base_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80016d4:	f000 fc16 	bl	8001f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016e2:	4619      	mov	r1, r3
 80016e4:	482c      	ldr	r0, [pc, #176]	@ (8001798 <MX_TIM3_Init+0x128>)
 80016e6:	f008 ff37 	bl	800a558 <HAL_TIM_ConfigClockSource>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80016f0:	f000 fc08 	bl	8001f04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016f4:	4828      	ldr	r0, [pc, #160]	@ (8001798 <MX_TIM3_Init+0x128>)
 80016f6:	f008 fbcf 	bl	8009e98 <HAL_TIM_PWM_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001700:	f000 fc00 	bl	8001f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	4619      	mov	r1, r3
 8001712:	4821      	ldr	r0, [pc, #132]	@ (8001798 <MX_TIM3_Init+0x128>)
 8001714:	f009 fcbc 	bl	800b090 <HAL_TIMEx_MasterConfigSynchronization>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800171e:	f000 fbf1 	bl	8001f04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001722:	2360      	movs	r3, #96	@ 0x60
 8001724:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001732:	463b      	mov	r3, r7
 8001734:	2200      	movs	r2, #0
 8001736:	4619      	mov	r1, r3
 8001738:	4817      	ldr	r0, [pc, #92]	@ (8001798 <MX_TIM3_Init+0x128>)
 800173a:	f008 fdf9 	bl	800a330 <HAL_TIM_PWM_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001744:	f000 fbde 	bl	8001f04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001748:	463b      	mov	r3, r7
 800174a:	2204      	movs	r2, #4
 800174c:	4619      	mov	r1, r3
 800174e:	4812      	ldr	r0, [pc, #72]	@ (8001798 <MX_TIM3_Init+0x128>)
 8001750:	f008 fdee 	bl	800a330 <HAL_TIM_PWM_ConfigChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800175a:	f000 fbd3 	bl	8001f04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800175e:	463b      	mov	r3, r7
 8001760:	2208      	movs	r2, #8
 8001762:	4619      	mov	r1, r3
 8001764:	480c      	ldr	r0, [pc, #48]	@ (8001798 <MX_TIM3_Init+0x128>)
 8001766:	f008 fde3 	bl	800a330 <HAL_TIM_PWM_ConfigChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001770:	f000 fbc8 	bl	8001f04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001774:	463b      	mov	r3, r7
 8001776:	220c      	movs	r2, #12
 8001778:	4619      	mov	r1, r3
 800177a:	4807      	ldr	r0, [pc, #28]	@ (8001798 <MX_TIM3_Init+0x128>)
 800177c:	f008 fdd8 	bl	800a330 <HAL_TIM_PWM_ConfigChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001786:	f000 fbbd 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800178a:	4803      	ldr	r0, [pc, #12]	@ (8001798 <MX_TIM3_Init+0x128>)
 800178c:	f000 feb8 	bl	8002500 <HAL_TIM_MspPostInit>

}
 8001790:	bf00      	nop
 8001792:	3738      	adds	r7, #56	@ 0x38
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200004d0 	.word	0x200004d0
 800179c:	40000400 	.word	0x40000400

080017a0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b092      	sub	sp, #72	@ 0x48
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017aa:	2224      	movs	r2, #36	@ 0x24
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f010 f853 	bl	801185a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b4:	f107 0318 	add.w	r3, r7, #24
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 80017c0:	463b      	mov	r3, r7
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]
 80017ce:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017d0:	4b2e      	ldr	r3, [pc, #184]	@ (800188c <MX_TIM8_Init+0xec>)
 80017d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001890 <MX_TIM8_Init+0xf0>)
 80017d4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80017d6:	4b2d      	ldr	r3, [pc, #180]	@ (800188c <MX_TIM8_Init+0xec>)
 80017d8:	2200      	movs	r2, #0
 80017da:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017dc:	4b2b      	ldr	r3, [pc, #172]	@ (800188c <MX_TIM8_Init+0xec>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80017e2:	4b2a      	ldr	r3, [pc, #168]	@ (800188c <MX_TIM8_Init+0xec>)
 80017e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017e8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ea:	4b28      	ldr	r3, [pc, #160]	@ (800188c <MX_TIM8_Init+0xec>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017f0:	4b26      	ldr	r3, [pc, #152]	@ (800188c <MX_TIM8_Init+0xec>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f6:	4b25      	ldr	r3, [pc, #148]	@ (800188c <MX_TIM8_Init+0xec>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001800:	2300      	movs	r3, #0
 8001802:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001804:	2301      	movs	r3, #1
 8001806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001808:	2300      	movs	r3, #0
 800180a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001810:	2300      	movs	r3, #0
 8001812:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001814:	2301      	movs	r3, #1
 8001816:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001818:	2300      	movs	r3, #0
 800181a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001820:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001824:	4619      	mov	r1, r3
 8001826:	4819      	ldr	r0, [pc, #100]	@ (800188c <MX_TIM8_Init+0xec>)
 8001828:	f008 fb8d 	bl	8009f46 <HAL_TIM_Encoder_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001832:	f000 fb67 	bl	8001f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001842:	f107 0318 	add.w	r3, r7, #24
 8001846:	4619      	mov	r1, r3
 8001848:	4810      	ldr	r0, [pc, #64]	@ (800188c <MX_TIM8_Init+0xec>)
 800184a:	f009 fc21 	bl	800b090 <HAL_TIMEx_MasterConfigSynchronization>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8001854:	f000 fb56 	bl	8001f04 <Error_Handler>
  }
  sEncoderIndexConfig.Polarity = TIM_ENCODERINDEX_POLARITY_NONINVERTED;
 8001858:	2300      	movs	r3, #0
 800185a:	603b      	str	r3, [r7, #0]
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 800185c:	2300      	movs	r3, #0
 800185e:	607b      	str	r3, [r7, #4]
  sEncoderIndexConfig.Filter = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	733b      	strb	r3, [r7, #12]
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_00;
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_ConfigEncoderIndex(&htim8, &sEncoderIndexConfig) != HAL_OK)
 8001870:	463b      	mov	r3, r7
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	@ (800188c <MX_TIM8_Init+0xec>)
 8001876:	f009 fd2d 	bl	800b2d4 <HAL_TIMEx_ConfigEncoderIndex>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM8_Init+0xe4>
  {
    Error_Handler();
 8001880:	f000 fb40 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	3748      	adds	r7, #72	@ 0x48
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2000051c 	.word	0x2000051c
 8001890:	40013400 	.word	0x40013400

08001894 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b098      	sub	sp, #96	@ 0x60
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800189a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
 80018b4:	611a      	str	r2, [r3, #16]
 80018b6:	615a      	str	r2, [r3, #20]
 80018b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	2234      	movs	r2, #52	@ 0x34
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f00f ffca 	bl	801185a <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80018c6:	4b34      	ldr	r3, [pc, #208]	@ (8001998 <MX_TIM15_Init+0x104>)
 80018c8:	4a34      	ldr	r2, [pc, #208]	@ (800199c <MX_TIM15_Init+0x108>)
 80018ca:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80018cc:	4b32      	ldr	r3, [pc, #200]	@ (8001998 <MX_TIM15_Init+0x104>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d2:	4b31      	ldr	r3, [pc, #196]	@ (8001998 <MX_TIM15_Init+0x104>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80018d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001998 <MX_TIM15_Init+0x104>)
 80018da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018de:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001998 <MX_TIM15_Init+0x104>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80018e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001998 <MX_TIM15_Init+0x104>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001998 <MX_TIM15_Init+0x104>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80018f2:	4829      	ldr	r0, [pc, #164]	@ (8001998 <MX_TIM15_Init+0x104>)
 80018f4:	f008 fad0 	bl	8009e98 <HAL_TIM_PWM_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80018fe:	f000 fb01 	bl	8001f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800190a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800190e:	4619      	mov	r1, r3
 8001910:	4821      	ldr	r0, [pc, #132]	@ (8001998 <MX_TIM15_Init+0x104>)
 8001912:	f009 fbbd 	bl	800b090 <HAL_TIMEx_MasterConfigSynchronization>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800191c:	f000 faf2 	bl	8001f04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001920:	2360      	movs	r3, #96	@ 0x60
 8001922:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001928:	2300      	movs	r3, #0
 800192a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800192c:	2300      	movs	r3, #0
 800192e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001934:	2300      	movs	r3, #0
 8001936:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001938:	2300      	movs	r3, #0
 800193a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800193c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001940:	2204      	movs	r2, #4
 8001942:	4619      	mov	r1, r3
 8001944:	4814      	ldr	r0, [pc, #80]	@ (8001998 <MX_TIM15_Init+0x104>)
 8001946:	f008 fcf3 	bl	800a330 <HAL_TIM_PWM_ConfigChannel>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001950:	f000 fad8 	bl	8001f04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001968:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800196c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	4619      	mov	r1, r3
 800197a:	4807      	ldr	r0, [pc, #28]	@ (8001998 <MX_TIM15_Init+0x104>)
 800197c:	f009 fc16 	bl	800b1ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001986:	f000 fabd 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800198a:	4803      	ldr	r0, [pc, #12]	@ (8001998 <MX_TIM15_Init+0x104>)
 800198c:	f000 fdb8 	bl	8002500 <HAL_TIM_MspPostInit>

}
 8001990:	bf00      	nop
 8001992:	3760      	adds	r7, #96	@ 0x60
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000568 	.word	0x20000568
 800199c:	40014000 	.word	0x40014000

080019a0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b094      	sub	sp, #80	@ 0x50
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80019a6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	611a      	str	r2, [r3, #16]
 80019b6:	615a      	str	r2, [r3, #20]
 80019b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019ba:	463b      	mov	r3, r7
 80019bc:	2234      	movs	r2, #52	@ 0x34
 80019be:	2100      	movs	r1, #0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f00f ff4a 	bl	801185a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80019c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001a84 <MX_TIM16_Init+0xe4>)
 80019c8:	4a2f      	ldr	r2, [pc, #188]	@ (8001a88 <MX_TIM16_Init+0xe8>)
 80019ca:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80019cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001a84 <MX_TIM16_Init+0xe4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a84 <MX_TIM16_Init+0xe4>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80019d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a84 <MX_TIM16_Init+0xe4>)
 80019da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019de:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e0:	4b28      	ldr	r3, [pc, #160]	@ (8001a84 <MX_TIM16_Init+0xe4>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80019e6:	4b27      	ldr	r3, [pc, #156]	@ (8001a84 <MX_TIM16_Init+0xe4>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ec:	4b25      	ldr	r3, [pc, #148]	@ (8001a84 <MX_TIM16_Init+0xe4>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80019f2:	4824      	ldr	r0, [pc, #144]	@ (8001a84 <MX_TIM16_Init+0xe4>)
 80019f4:	f008 f988 	bl	8009d08 <HAL_TIM_Base_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80019fe:	f000 fa81 	bl	8001f04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001a02:	4820      	ldr	r0, [pc, #128]	@ (8001a84 <MX_TIM16_Init+0xe4>)
 8001a04:	f008 fa48 	bl	8009e98 <HAL_TIM_PWM_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001a0e:	f000 fa79 	bl	8001f04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a12:	2360      	movs	r3, #96	@ 0x60
 8001a14:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a2e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a32:	2200      	movs	r2, #0
 8001a34:	4619      	mov	r1, r3
 8001a36:	4813      	ldr	r0, [pc, #76]	@ (8001a84 <MX_TIM16_Init+0xe4>)
 8001a38:	f008 fc7a 	bl	800a330 <HAL_TIM_PWM_ConfigChannel>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001a42:	f000 fa5f 	bl	8001f04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a5e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001a68:	463b      	mov	r3, r7
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	@ (8001a84 <MX_TIM16_Init+0xe4>)
 8001a6e:	f009 fb9d 	bl	800b1ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001a78:	f000 fa44 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	3750      	adds	r7, #80	@ 0x50
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200005b4 	.word	0x200005b4
 8001a88:	40014400 	.word	0x40014400

08001a8c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b094      	sub	sp, #80	@ 0x50
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a92:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	611a      	str	r2, [r3, #16]
 8001aa2:	615a      	str	r2, [r3, #20]
 8001aa4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	2234      	movs	r2, #52	@ 0x34
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f00f fed4 	bl	801185a <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8001b70 <MX_TIM17_Init+0xe4>)
 8001ab4:	4a2f      	ldr	r2, [pc, #188]	@ (8001b74 <MX_TIM17_Init+0xe8>)
 8001ab6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b70 <MX_TIM17_Init+0xe4>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abe:	4b2c      	ldr	r3, [pc, #176]	@ (8001b70 <MX_TIM17_Init+0xe4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b70 <MX_TIM17_Init+0xe4>)
 8001ac6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aca:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001acc:	4b28      	ldr	r3, [pc, #160]	@ (8001b70 <MX_TIM17_Init+0xe4>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001ad2:	4b27      	ldr	r3, [pc, #156]	@ (8001b70 <MX_TIM17_Init+0xe4>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad8:	4b25      	ldr	r3, [pc, #148]	@ (8001b70 <MX_TIM17_Init+0xe4>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001ade:	4824      	ldr	r0, [pc, #144]	@ (8001b70 <MX_TIM17_Init+0xe4>)
 8001ae0:	f008 f912 	bl	8009d08 <HAL_TIM_Base_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001aea:	f000 fa0b 	bl	8001f04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001aee:	4820      	ldr	r0, [pc, #128]	@ (8001b70 <MX_TIM17_Init+0xe4>)
 8001af0:	f008 f9d2 	bl	8009e98 <HAL_TIM_PWM_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001afa:	f000 fa03 	bl	8001f04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001afe:	2360      	movs	r3, #96	@ 0x60
 8001b00:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b06:	2300      	movs	r3, #0
 8001b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b1a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4619      	mov	r1, r3
 8001b22:	4813      	ldr	r0, [pc, #76]	@ (8001b70 <MX_TIM17_Init+0xe4>)
 8001b24:	f008 fc04 	bl	800a330 <HAL_TIM_PWM_ConfigChannel>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001b2e:	f000 f9e9 	bl	8001f04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001b54:	463b      	mov	r3, r7
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <MX_TIM17_Init+0xe4>)
 8001b5a:	f009 fb27 	bl	800b1ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001b64:	f000 f9ce 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	3750      	adds	r7, #80	@ 0x50
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000600 	.word	0x20000600
 8001b74:	40014800 	.word	0x40014800

08001b78 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001b7c:	4b22      	ldr	r3, [pc, #136]	@ (8001c08 <MX_UART5_Init+0x90>)
 8001b7e:	4a23      	ldr	r2, [pc, #140]	@ (8001c0c <MX_UART5_Init+0x94>)
 8001b80:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001b82:	4b21      	ldr	r3, [pc, #132]	@ (8001c08 <MX_UART5_Init+0x90>)
 8001b84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b88:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c08 <MX_UART5_Init+0x90>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001b90:	4b1d      	ldr	r3, [pc, #116]	@ (8001c08 <MX_UART5_Init+0x90>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001b96:	4b1c      	ldr	r3, [pc, #112]	@ (8001c08 <MX_UART5_Init+0x90>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c08 <MX_UART5_Init+0x90>)
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba2:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <MX_UART5_Init+0x90>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba8:	4b17      	ldr	r3, [pc, #92]	@ (8001c08 <MX_UART5_Init+0x90>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bae:	4b16      	ldr	r3, [pc, #88]	@ (8001c08 <MX_UART5_Init+0x90>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bb4:	4b14      	ldr	r3, [pc, #80]	@ (8001c08 <MX_UART5_Init+0x90>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bba:	4b13      	ldr	r3, [pc, #76]	@ (8001c08 <MX_UART5_Init+0x90>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001bc0:	4811      	ldr	r0, [pc, #68]	@ (8001c08 <MX_UART5_Init+0x90>)
 8001bc2:	f009 fc08 	bl	800b3d6 <HAL_UART_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001bcc:	f000 f99a 	bl	8001f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	480d      	ldr	r0, [pc, #52]	@ (8001c08 <MX_UART5_Init+0x90>)
 8001bd4:	f00a fdef 	bl	800c7b6 <HAL_UARTEx_SetTxFifoThreshold>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001bde:	f000 f991 	bl	8001f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be2:	2100      	movs	r1, #0
 8001be4:	4808      	ldr	r0, [pc, #32]	@ (8001c08 <MX_UART5_Init+0x90>)
 8001be6:	f00a fe24 	bl	800c832 <HAL_UARTEx_SetRxFifoThreshold>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001bf0:	f000 f988 	bl	8001f04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001bf4:	4804      	ldr	r0, [pc, #16]	@ (8001c08 <MX_UART5_Init+0x90>)
 8001bf6:	f00a fda5 	bl	800c744 <HAL_UARTEx_DisableFifoMode>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001c00:	f000 f980 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	2000064c 	.word	0x2000064c
 8001c0c:	40005000 	.word	0x40005000

08001c10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c14:	4b22      	ldr	r3, [pc, #136]	@ (8001ca0 <MX_USART3_UART_Init+0x90>)
 8001c16:	4a23      	ldr	r2, [pc, #140]	@ (8001ca4 <MX_USART3_UART_Init+0x94>)
 8001c18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8001c1a:	4b21      	ldr	r3, [pc, #132]	@ (8001ca0 <MX_USART3_UART_Init+0x90>)
 8001c1c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001c20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c22:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca0 <MX_USART3_UART_Init+0x90>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca0 <MX_USART3_UART_Init+0x90>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca0 <MX_USART3_UART_Init+0x90>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca0 <MX_USART3_UART_Init+0x90>)
 8001c36:	220c      	movs	r2, #12
 8001c38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3a:	4b19      	ldr	r3, [pc, #100]	@ (8001ca0 <MX_USART3_UART_Init+0x90>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c40:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <MX_USART3_UART_Init+0x90>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c46:	4b16      	ldr	r3, [pc, #88]	@ (8001ca0 <MX_USART3_UART_Init+0x90>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ca0 <MX_USART3_UART_Init+0x90>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c52:	4b13      	ldr	r3, [pc, #76]	@ (8001ca0 <MX_USART3_UART_Init+0x90>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c58:	4811      	ldr	r0, [pc, #68]	@ (8001ca0 <MX_USART3_UART_Init+0x90>)
 8001c5a:	f009 fbbc 	bl	800b3d6 <HAL_UART_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001c64:	f000 f94e 	bl	8001f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c68:	2100      	movs	r1, #0
 8001c6a:	480d      	ldr	r0, [pc, #52]	@ (8001ca0 <MX_USART3_UART_Init+0x90>)
 8001c6c:	f00a fda3 	bl	800c7b6 <HAL_UARTEx_SetTxFifoThreshold>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001c76:	f000 f945 	bl	8001f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4808      	ldr	r0, [pc, #32]	@ (8001ca0 <MX_USART3_UART_Init+0x90>)
 8001c7e:	f00a fdd8 	bl	800c832 <HAL_UARTEx_SetRxFifoThreshold>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001c88:	f000 f93c 	bl	8001f04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c8c:	4804      	ldr	r0, [pc, #16]	@ (8001ca0 <MX_USART3_UART_Init+0x90>)
 8001c8e:	f00a fd59 	bl	800c744 <HAL_UARTEx_DisableFifoMode>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001c98:	f000 f934 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200006e0 	.word	0x200006e0
 8001ca4:	40004800 	.word	0x40004800

08001ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001cae:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <MX_DMA_Init+0x50>)
 8001cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cb2:	4a11      	ldr	r2, [pc, #68]	@ (8001cf8 <MX_DMA_Init+0x50>)
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	6493      	str	r3, [r2, #72]	@ 0x48
 8001cba:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <MX_DMA_Init+0x50>)
 8001cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <MX_DMA_Init+0x50>)
 8001cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cca:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf8 <MX_DMA_Init+0x50>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001cd2:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <MX_DMA_Init+0x50>)
 8001cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	200d      	movs	r0, #13
 8001ce4:	f003 f9a4 	bl	8005030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001ce8:	200d      	movs	r0, #13
 8001cea:	f003 f9bb 	bl	8005064 <HAL_NVIC_EnableIRQ>

}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000

08001cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	@ 0x28
 8001d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d12:	4b6e      	ldr	r3, [pc, #440]	@ (8001ecc <MX_GPIO_Init+0x1d0>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d16:	4a6d      	ldr	r2, [pc, #436]	@ (8001ecc <MX_GPIO_Init+0x1d0>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d1e:	4b6b      	ldr	r3, [pc, #428]	@ (8001ecc <MX_GPIO_Init+0x1d0>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d2a:	4b68      	ldr	r3, [pc, #416]	@ (8001ecc <MX_GPIO_Init+0x1d0>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2e:	4a67      	ldr	r2, [pc, #412]	@ (8001ecc <MX_GPIO_Init+0x1d0>)
 8001d30:	f043 0320 	orr.w	r3, r3, #32
 8001d34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d36:	4b65      	ldr	r3, [pc, #404]	@ (8001ecc <MX_GPIO_Init+0x1d0>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	4b62      	ldr	r3, [pc, #392]	@ (8001ecc <MX_GPIO_Init+0x1d0>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d46:	4a61      	ldr	r2, [pc, #388]	@ (8001ecc <MX_GPIO_Init+0x1d0>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d4e:	4b5f      	ldr	r3, [pc, #380]	@ (8001ecc <MX_GPIO_Init+0x1d0>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	4b5c      	ldr	r3, [pc, #368]	@ (8001ecc <MX_GPIO_Init+0x1d0>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5e:	4a5b      	ldr	r2, [pc, #364]	@ (8001ecc <MX_GPIO_Init+0x1d0>)
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d66:	4b59      	ldr	r3, [pc, #356]	@ (8001ecc <MX_GPIO_Init+0x1d0>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d72:	4b56      	ldr	r3, [pc, #344]	@ (8001ecc <MX_GPIO_Init+0x1d0>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d76:	4a55      	ldr	r2, [pc, #340]	@ (8001ecc <MX_GPIO_Init+0x1d0>)
 8001d78:	f043 0308 	orr.w	r3, r3, #8
 8001d7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d7e:	4b53      	ldr	r3, [pc, #332]	@ (8001ecc <MX_GPIO_Init+0x1d0>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STAT_BKUP_Pin|EN_5V_Pin|CAM1_CTRL_Pin, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f242 0124 	movw	r1, #8228	@ 0x2024
 8001d90:	484f      	ldr	r0, [pc, #316]	@ (8001ed0 <MX_GPIO_Init+0x1d4>)
 8001d92:	f003 fe35 	bl	8005a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRV_DIR_Pin|CAM0_CTRL_Pin|XBEE_RST_Pin, GPIO_PIN_RESET);
 8001d96:	2200      	movs	r2, #0
 8001d98:	f248 0130 	movw	r1, #32816	@ 0x8030
 8001d9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da0:	f003 fe2e 	bl	8005a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_nCS_Pin|MAGEXT_nCS_Pin|MAG_nCS_Pin|BMP_nCS_Pin
 8001da4:	2200      	movs	r2, #0
 8001da6:	f641 41a4 	movw	r1, #7332	@ 0x1ca4
 8001daa:	484a      	ldr	r0, [pc, #296]	@ (8001ed4 <MX_GPIO_Init+0x1d8>)
 8001dac:	f003 fe28 	bl	8005a00 <HAL_GPIO_WritePin>
                          |GPS_RST_Pin|USR_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : STAT_BKUP_Pin EN_5V_Pin CAM1_CTRL_Pin */
  GPIO_InitStruct.Pin = STAT_BKUP_Pin|EN_5V_Pin|CAM1_CTRL_Pin;
 8001db0:	f242 0324 	movw	r3, #8228	@ 0x2024
 8001db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db6:	2301      	movs	r3, #1
 8001db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4841      	ldr	r0, [pc, #260]	@ (8001ed0 <MX_GPIO_Init+0x1d4>)
 8001dca:	f003 fc7f 	bl	80056cc <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_STAT2_Pin CHG_STAT1_Pin */
  GPIO_InitStruct.Pin = CHG_STAT2_Pin|CHG_STAT1_Pin;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	483d      	ldr	r0, [pc, #244]	@ (8001ed8 <MX_GPIO_Init+0x1dc>)
 8001de2:	f003 fc73 	bl	80056cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_32K_Pin */
  GPIO_InitStruct.Pin = CLK_32K_Pin;
 8001de6:	2304      	movs	r3, #4
 8001de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dea:	2303      	movs	r3, #3
 8001dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CLK_32K_GPIO_Port, &GPIO_InitStruct);
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	4619      	mov	r1, r3
 8001df8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dfc:	f003 fc66 	bl	80056cc <HAL_GPIO_Init>

  /*Configure GPIO pins : DRV_DIR_Pin CAM0_CTRL_Pin XBEE_RST_Pin */
  GPIO_InitStruct.Pin = DRV_DIR_Pin|CAM0_CTRL_Pin|XBEE_RST_Pin;
 8001e00:	f248 0330 	movw	r3, #32816	@ 0x8030
 8001e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4619      	mov	r1, r3
 8001e18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e1c:	f003 fc56 	bl	80056cc <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_nCS_Pin MAGEXT_nCS_Pin MAG_nCS_Pin BMP_nCS_Pin
                           USR_LED_Pin */
  GPIO_InitStruct.Pin = IMU_nCS_Pin|MAGEXT_nCS_Pin|MAG_nCS_Pin|BMP_nCS_Pin
 8001e20:	f641 4384 	movw	r3, #7300	@ 0x1c84
 8001e24:	617b      	str	r3, [r7, #20]
                          |USR_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e26:	2301      	movs	r3, #1
 8001e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	4826      	ldr	r0, [pc, #152]	@ (8001ed4 <MX_GPIO_Init+0x1d8>)
 8001e3a:	f003 fc47 	bl	80056cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e5e:	f003 fc35 	bl	80056cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001e62:	2350      	movs	r3, #80	@ 0x50
 8001e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e66:	2303      	movs	r3, #3
 8001e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	4817      	ldr	r0, [pc, #92]	@ (8001ed4 <MX_GPIO_Init+0x1d8>)
 8001e76:	f003 fc29 	bl	80056cc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8001e7a:	2320      	movs	r3, #32
 8001e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001e7e:	2311      	movs	r3, #17
 8001e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4810      	ldr	r0, [pc, #64]	@ (8001ed4 <MX_GPIO_Init+0x1d8>)
 8001e92:	f003 fc1b 	bl	80056cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001e96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_IR;
 8001ea8:	2306      	movs	r3, #6
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4808      	ldr	r0, [pc, #32]	@ (8001ed4 <MX_GPIO_Init+0x1d8>)
 8001eb4:	f003 fc0a 	bl	80056cc <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8001eb8:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <MX_GPIO_Init+0x1e0>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4a07      	ldr	r2, [pc, #28]	@ (8001edc <MX_GPIO_Init+0x1e0>)
 8001ebe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ec2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ec4:	bf00      	nop
 8001ec6:	3728      	adds	r7, #40	@ 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	48000800 	.word	0x48000800
 8001ed4:	48000400 	.word	0x48000400
 8001ed8:	48001400 	.word	0x48001400
 8001edc:	40010000 	.word	0x40010000

08001ee0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a04      	ldr	r2, [pc, #16]	@ (8001f00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d101      	bne.n	8001ef6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001ef2:	f001 fe91 	bl	8003c18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40001000 	.word	0x40001000

08001f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f08:	b672      	cpsid	i
}
 8001f0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <Error_Handler+0x8>

08001f10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8001f16:	f107 0308 	add.w	r3, r7, #8
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f20:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <HAL_MspInit+0x6c>)
 8001f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f24:	4a15      	ldr	r2, [pc, #84]	@ (8001f7c <HAL_MspInit+0x6c>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f2c:	4b13      	ldr	r3, [pc, #76]	@ (8001f7c <HAL_MspInit+0x6c>)
 8001f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f38:	4b10      	ldr	r3, [pc, #64]	@ (8001f7c <HAL_MspInit+0x6c>)
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3c:	4a0f      	ldr	r2, [pc, #60]	@ (8001f7c <HAL_MspInit+0x6c>)
 8001f3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f42:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f44:	4b0d      	ldr	r3, [pc, #52]	@ (8001f7c <HAL_MspInit+0x6c>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8001f58:	f107 0308 	add.w	r3, r7, #8
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f005 fc57 	bl	8007810 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8001f62:	f005 fcb5 	bl	80078d0 <HAL_PWR_EnablePVD>

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001f66:	f001 feab 	bl	8003cc0 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001f6a:	2002      	movs	r0, #2
 8001f6c:	f001 fe94 	bl	8003c98 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001f70:	f005 fd62 	bl	8007a38 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000

08001f80 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b09e      	sub	sp, #120	@ 0x78
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	2250      	movs	r2, #80	@ 0x50
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f00f fc5a 	bl	801185a <memset>
  if(hadc->Instance==ADC1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fae:	d133      	bne.n	8002018 <HAL_ADC_MspInit+0x98>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001fb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fb4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001fb6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001fba:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f006 faef 	bl	80085a4 <HAL_RCCEx_PeriphCLKConfig>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001fcc:	f7ff ff9a 	bl	8001f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001fd0:	4b13      	ldr	r3, [pc, #76]	@ (8002020 <HAL_ADC_MspInit+0xa0>)
 8001fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd4:	4a12      	ldr	r2, [pc, #72]	@ (8002020 <HAL_ADC_MspInit+0xa0>)
 8001fd6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001fda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fdc:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <HAL_ADC_MspInit+0xa0>)
 8001fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8002020 <HAL_ADC_MspInit+0xa0>)
 8001fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fec:	4a0c      	ldr	r2, [pc, #48]	@ (8002020 <HAL_ADC_MspInit+0xa0>)
 8001fee:	f043 0304 	orr.w	r3, r3, #4
 8001ff2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8002020 <HAL_ADC_MspInit+0xa0>)
 8001ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VUSB_Pin;
 8002000:	2308      	movs	r3, #8
 8002002:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002004:	2303      	movs	r3, #3
 8002006:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(VUSB_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002010:	4619      	mov	r1, r3
 8002012:	4804      	ldr	r0, [pc, #16]	@ (8002024 <HAL_ADC_MspInit+0xa4>)
 8002014:	f003 fb5a 	bl	80056cc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002018:	bf00      	nop
 800201a:	3778      	adds	r7, #120	@ 0x78
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	48000800 	.word	0x48000800

08002028 <HAL_CORDIC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcordic: CORDIC handle pointer
  * @retval None
  */
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a0a      	ldr	r2, [pc, #40]	@ (8002060 <HAL_CORDIC_MspInit+0x38>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d10b      	bne.n	8002052 <HAL_CORDIC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CORDIC_MspInit 0 */

    /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800203a:	4b0a      	ldr	r3, [pc, #40]	@ (8002064 <HAL_CORDIC_MspInit+0x3c>)
 800203c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800203e:	4a09      	ldr	r2, [pc, #36]	@ (8002064 <HAL_CORDIC_MspInit+0x3c>)
 8002040:	f043 0308 	orr.w	r3, r3, #8
 8002044:	6493      	str	r3, [r2, #72]	@ 0x48
 8002046:	4b07      	ldr	r3, [pc, #28]	@ (8002064 <HAL_CORDIC_MspInit+0x3c>)
 8002048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40020c00 	.word	0x40020c00
 8002064:	40021000 	.word	0x40021000

08002068 <HAL_FMAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfmac: FMAC handle pointer
  * @retval None
  */
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <HAL_FMAC_MspInit+0x38>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d10b      	bne.n	8002092 <HAL_FMAC_MspInit+0x2a>
  {
    /* USER CODE BEGIN FMAC_MspInit 0 */

    /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 800207a:	4b0a      	ldr	r3, [pc, #40]	@ (80020a4 <HAL_FMAC_MspInit+0x3c>)
 800207c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800207e:	4a09      	ldr	r2, [pc, #36]	@ (80020a4 <HAL_FMAC_MspInit+0x3c>)
 8002080:	f043 0310 	orr.w	r3, r3, #16
 8002084:	6493      	str	r3, [r2, #72]	@ 0x48
 8002086:	4b07      	ldr	r3, [pc, #28]	@ (80020a4 <HAL_FMAC_MspInit+0x3c>)
 8002088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800208a:	f003 0310 	and.w	r3, r3, #16
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END FMAC_MspInit 1 */

  }

}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40021400 	.word	0x40021400
 80020a4:	40021000 	.word	0x40021000

080020a8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b09e      	sub	sp, #120	@ 0x78
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	2250      	movs	r2, #80	@ 0x50
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f00f fbc6 	bl	801185a <memset>
  if(hi2c->Instance==I2C3)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002150 <HAL_I2C_MspInit+0xa8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d137      	bne.n	8002148 <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80020d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020dc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80020de:	2300      	movs	r3, #0
 80020e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	4618      	mov	r0, r3
 80020e8:	f006 fa5c 	bl	80085a4 <HAL_RCCEx_PeriphCLKConfig>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80020f2:	f7ff ff07 	bl	8001f04 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f6:	4b17      	ldr	r3, [pc, #92]	@ (8002154 <HAL_I2C_MspInit+0xac>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fa:	4a16      	ldr	r2, [pc, #88]	@ (8002154 <HAL_I2C_MspInit+0xac>)
 80020fc:	f043 0304 	orr.w	r3, r3, #4
 8002100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002102:	4b14      	ldr	r3, [pc, #80]	@ (8002154 <HAL_I2C_MspInit+0xac>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800210e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002112:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002114:	2312      	movs	r3, #18
 8002116:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002120:	2308      	movs	r3, #8
 8002122:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002124:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002128:	4619      	mov	r1, r3
 800212a:	480b      	ldr	r0, [pc, #44]	@ (8002158 <HAL_I2C_MspInit+0xb0>)
 800212c:	f003 face 	bl	80056cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002130:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <HAL_I2C_MspInit+0xac>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002134:	4a07      	ldr	r2, [pc, #28]	@ (8002154 <HAL_I2C_MspInit+0xac>)
 8002136:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800213a:	6593      	str	r3, [r2, #88]	@ 0x58
 800213c:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <HAL_I2C_MspInit+0xac>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002140:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002148:	bf00      	nop
 800214a:	3778      	adds	r7, #120	@ 0x78
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40007800 	.word	0x40007800
 8002154:	40021000 	.word	0x40021000
 8002158:	48000800 	.word	0x48000800

0800215c <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b098      	sub	sp, #96	@ 0x60
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002164:	f107 0310 	add.w	r3, r7, #16
 8002168:	2250      	movs	r2, #80	@ 0x50
 800216a:	2100      	movs	r1, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f00f fb74 	bl	801185a <memset>
  if(hrng->Instance==RNG)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a11      	ldr	r2, [pc, #68]	@ (80021bc <HAL_RNG_MspInit+0x60>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d11a      	bne.n	80021b2 <HAL_RNG_MspInit+0x56>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800217c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002180:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002182:	2300      	movs	r3, #0
 8002184:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002186:	f107 0310 	add.w	r3, r7, #16
 800218a:	4618      	mov	r0, r3
 800218c:	f006 fa0a 	bl	80085a4 <HAL_RCCEx_PeriphCLKConfig>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_RNG_MspInit+0x3e>
    {
      Error_Handler();
 8002196:	f7ff feb5 	bl	8001f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800219a:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <HAL_RNG_MspInit+0x64>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219e:	4a08      	ldr	r2, [pc, #32]	@ (80021c0 <HAL_RNG_MspInit+0x64>)
 80021a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80021a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021a6:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <HAL_RNG_MspInit+0x64>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 80021b2:	bf00      	nop
 80021b4:	3760      	adds	r7, #96	@ 0x60
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	50060800 	.word	0x50060800
 80021c0:	40021000 	.word	0x40021000

080021c4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b09e      	sub	sp, #120	@ 0x78
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	2250      	movs	r2, #80	@ 0x50
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f00f fb38 	bl	801185a <memset>
  if(hrtc->Instance==RTC)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a24      	ldr	r2, [pc, #144]	@ (8002280 <HAL_RTC_MspInit+0xbc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d140      	bne.n	8002276 <HAL_RTC_MspInit+0xb2>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80021f8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80021fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021fe:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	4618      	mov	r0, r3
 8002206:	f006 f9cd 	bl	80085a4 <HAL_RCCEx_PeriphCLKConfig>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8002210:	f7ff fe78 	bl	8001f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002214:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <HAL_RTC_MspInit+0xc0>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800221a:	4a1a      	ldr	r2, [pc, #104]	@ (8002284 <HAL_RTC_MspInit+0xc0>)
 800221c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002220:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002224:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <HAL_RTC_MspInit+0xc0>)
 8002226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002228:	4a16      	ldr	r2, [pc, #88]	@ (8002284 <HAL_RTC_MspInit+0xc0>)
 800222a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800222e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002230:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <HAL_RTC_MspInit+0xc0>)
 8002232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223c:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <HAL_RTC_MspInit+0xc0>)
 800223e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002240:	4a10      	ldr	r2, [pc, #64]	@ (8002284 <HAL_RTC_MspInit+0xc0>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002248:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <HAL_RTC_MspInit+0xc0>)
 800224a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PA1     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 8002254:	2302      	movs	r3, #2
 8002256:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 8002264:	2300      	movs	r3, #0
 8002266:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 8002268:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800226c:	4619      	mov	r1, r3
 800226e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002272:	f003 fa2b 	bl	80056cc <HAL_GPIO_Init>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002276:	bf00      	nop
 8002278:	3778      	adds	r7, #120	@ 0x78
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40002800 	.word	0x40002800
 8002284:	40021000 	.word	0x40021000

08002288 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	@ 0x28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a17      	ldr	r2, [pc, #92]	@ (8002304 <HAL_SPI_MspInit+0x7c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d128      	bne.n	80022fc <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022aa:	4b17      	ldr	r3, [pc, #92]	@ (8002308 <HAL_SPI_MspInit+0x80>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	4a16      	ldr	r2, [pc, #88]	@ (8002308 <HAL_SPI_MspInit+0x80>)
 80022b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80022b6:	4b14      	ldr	r3, [pc, #80]	@ (8002308 <HAL_SPI_MspInit+0x80>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c2:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <HAL_SPI_MspInit+0x80>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c6:	4a10      	ldr	r2, [pc, #64]	@ (8002308 <HAL_SPI_MspInit+0x80>)
 80022c8:	f043 0302 	orr.w	r3, r3, #2
 80022cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002308 <HAL_SPI_MspInit+0x80>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80022da:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80022de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022ec:	2305      	movs	r3, #5
 80022ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	4619      	mov	r1, r3
 80022f6:	4805      	ldr	r0, [pc, #20]	@ (800230c <HAL_SPI_MspInit+0x84>)
 80022f8:	f003 f9e8 	bl	80056cc <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80022fc:	bf00      	nop
 80022fe:	3728      	adds	r7, #40	@ 0x28
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40003800 	.word	0x40003800
 8002308:	40021000 	.word	0x40021000
 800230c:	48000400 	.word	0x48000400

08002310 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08c      	sub	sp, #48	@ 0x30
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 031c 	add.w	r3, r7, #28
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a3c      	ldr	r2, [pc, #240]	@ (8002420 <HAL_TIM_Encoder_MspInit+0x110>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d128      	bne.n	8002384 <HAL_TIM_Encoder_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002332:	4b3c      	ldr	r3, [pc, #240]	@ (8002424 <HAL_TIM_Encoder_MspInit+0x114>)
 8002334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002336:	4a3b      	ldr	r2, [pc, #236]	@ (8002424 <HAL_TIM_Encoder_MspInit+0x114>)
 8002338:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800233c:	6613      	str	r3, [r2, #96]	@ 0x60
 800233e:	4b39      	ldr	r3, [pc, #228]	@ (8002424 <HAL_TIM_Encoder_MspInit+0x114>)
 8002340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002342:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002346:	61bb      	str	r3, [r7, #24]
 8002348:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800234a:	4b36      	ldr	r3, [pc, #216]	@ (8002424 <HAL_TIM_Encoder_MspInit+0x114>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234e:	4a35      	ldr	r2, [pc, #212]	@ (8002424 <HAL_TIM_Encoder_MspInit+0x114>)
 8002350:	f043 0304 	orr.w	r3, r3, #4
 8002354:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002356:	4b33      	ldr	r3, [pc, #204]	@ (8002424 <HAL_TIM_Encoder_MspInit+0x114>)
 8002358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC4     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = ENC0_A_Pin|ENC0_B_Pin|ENC0_Z_Pin;
 8002362:	2313      	movs	r3, #19
 8002364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236e:	2300      	movs	r3, #0
 8002370:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002372:	2302      	movs	r3, #2
 8002374:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002376:	f107 031c 	add.w	r3, r7, #28
 800237a:	4619      	mov	r1, r3
 800237c:	482a      	ldr	r0, [pc, #168]	@ (8002428 <HAL_TIM_Encoder_MspInit+0x118>)
 800237e:	f003 f9a5 	bl	80056cc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002382:	e049      	b.n	8002418 <HAL_TIM_Encoder_MspInit+0x108>
  else if(htim_encoder->Instance==TIM8)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a28      	ldr	r2, [pc, #160]	@ (800242c <HAL_TIM_Encoder_MspInit+0x11c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d144      	bne.n	8002418 <HAL_TIM_Encoder_MspInit+0x108>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800238e:	4b25      	ldr	r3, [pc, #148]	@ (8002424 <HAL_TIM_Encoder_MspInit+0x114>)
 8002390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002392:	4a24      	ldr	r2, [pc, #144]	@ (8002424 <HAL_TIM_Encoder_MspInit+0x114>)
 8002394:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002398:	6613      	str	r3, [r2, #96]	@ 0x60
 800239a:	4b22      	ldr	r3, [pc, #136]	@ (8002424 <HAL_TIM_Encoder_MspInit+0x114>)
 800239c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800239e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002424 <HAL_TIM_Encoder_MspInit+0x114>)
 80023a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002424 <HAL_TIM_Encoder_MspInit+0x114>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002424 <HAL_TIM_Encoder_MspInit+0x114>)
 80023b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023be:	4b19      	ldr	r3, [pc, #100]	@ (8002424 <HAL_TIM_Encoder_MspInit+0x114>)
 80023c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c2:	4a18      	ldr	r2, [pc, #96]	@ (8002424 <HAL_TIM_Encoder_MspInit+0x114>)
 80023c4:	f043 0304 	orr.w	r3, r3, #4
 80023c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ca:	4b16      	ldr	r3, [pc, #88]	@ (8002424 <HAL_TIM_Encoder_MspInit+0x114>)
 80023cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC1_Z_Pin;
 80023d6:	2301      	movs	r3, #1
 80023d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023da:	2302      	movs	r3, #2
 80023dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	2300      	movs	r3, #0
 80023e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80023e6:	230a      	movs	r3, #10
 80023e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ENC1_Z_GPIO_Port, &GPIO_InitStruct);
 80023ea:	f107 031c 	add.w	r3, r7, #28
 80023ee:	4619      	mov	r1, r3
 80023f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023f4:	f003 f96a 	bl	80056cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 80023f8:	23c0      	movs	r3, #192	@ 0xc0
 80023fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002404:	2300      	movs	r3, #0
 8002406:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002408:	2304      	movs	r3, #4
 800240a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800240c:	f107 031c 	add.w	r3, r7, #28
 8002410:	4619      	mov	r1, r3
 8002412:	4805      	ldr	r0, [pc, #20]	@ (8002428 <HAL_TIM_Encoder_MspInit+0x118>)
 8002414:	f003 f95a 	bl	80056cc <HAL_GPIO_Init>
}
 8002418:	bf00      	nop
 800241a:	3730      	adds	r7, #48	@ 0x30
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40012c00 	.word	0x40012c00
 8002424:	40021000 	.word	0x40021000
 8002428:	48000800 	.word	0x48000800
 800242c:	40013400 	.word	0x40013400

08002430 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a1c      	ldr	r2, [pc, #112]	@ (80024b0 <HAL_TIM_Base_MspInit+0x80>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d10c      	bne.n	800245c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002442:	4b1c      	ldr	r3, [pc, #112]	@ (80024b4 <HAL_TIM_Base_MspInit+0x84>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002446:	4a1b      	ldr	r2, [pc, #108]	@ (80024b4 <HAL_TIM_Base_MspInit+0x84>)
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	6593      	str	r3, [r2, #88]	@ 0x58
 800244e:	4b19      	ldr	r3, [pc, #100]	@ (80024b4 <HAL_TIM_Base_MspInit+0x84>)
 8002450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 800245a:	e022      	b.n	80024a2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a15      	ldr	r2, [pc, #84]	@ (80024b8 <HAL_TIM_Base_MspInit+0x88>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d10c      	bne.n	8002480 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002466:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <HAL_TIM_Base_MspInit+0x84>)
 8002468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800246a:	4a12      	ldr	r2, [pc, #72]	@ (80024b4 <HAL_TIM_Base_MspInit+0x84>)
 800246c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002470:	6613      	str	r3, [r2, #96]	@ 0x60
 8002472:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <HAL_TIM_Base_MspInit+0x84>)
 8002474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]
}
 800247e:	e010      	b.n	80024a2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM17)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0d      	ldr	r2, [pc, #52]	@ (80024bc <HAL_TIM_Base_MspInit+0x8c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d10b      	bne.n	80024a2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800248a:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <HAL_TIM_Base_MspInit+0x84>)
 800248c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800248e:	4a09      	ldr	r2, [pc, #36]	@ (80024b4 <HAL_TIM_Base_MspInit+0x84>)
 8002490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002494:	6613      	str	r3, [r2, #96]	@ 0x60
 8002496:	4b07      	ldr	r3, [pc, #28]	@ (80024b4 <HAL_TIM_Base_MspInit+0x84>)
 8002498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800249a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
}
 80024a2:	bf00      	nop
 80024a4:	371c      	adds	r7, #28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40000400 	.word	0x40000400
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40014400 	.word	0x40014400
 80024bc:	40014800 	.word	0x40014800

080024c0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <HAL_TIM_PWM_MspInit+0x38>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d10b      	bne.n	80024ea <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM15_MspInit 0 */

    /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80024d2:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <HAL_TIM_PWM_MspInit+0x3c>)
 80024d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d6:	4a09      	ldr	r2, [pc, #36]	@ (80024fc <HAL_TIM_PWM_MspInit+0x3c>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80024de:	4b07      	ldr	r3, [pc, #28]	@ (80024fc <HAL_TIM_PWM_MspInit+0x3c>)
 80024e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM15_MspInit 1 */

  }

}
 80024ea:	bf00      	nop
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40014000 	.word	0x40014000
 80024fc:	40021000 	.word	0x40021000

08002500 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	@ 0x28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a31      	ldr	r2, [pc, #196]	@ (80025e4 <HAL_TIM_MspPostInit+0xe4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d139      	bne.n	8002596 <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002522:	4b31      	ldr	r3, [pc, #196]	@ (80025e8 <HAL_TIM_MspPostInit+0xe8>)
 8002524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002526:	4a30      	ldr	r2, [pc, #192]	@ (80025e8 <HAL_TIM_MspPostInit+0xe8>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800252e:	4b2e      	ldr	r3, [pc, #184]	@ (80025e8 <HAL_TIM_MspPostInit+0xe8>)
 8002530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	4b2b      	ldr	r3, [pc, #172]	@ (80025e8 <HAL_TIM_MspPostInit+0xe8>)
 800253c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253e:	4a2a      	ldr	r2, [pc, #168]	@ (80025e8 <HAL_TIM_MspPostInit+0xe8>)
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002546:	4b28      	ldr	r3, [pc, #160]	@ (80025e8 <HAL_TIM_MspPostInit+0xe8>)
 8002548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = SERVO_PWM0_Pin|SERVO_PWM1_Pin;
 8002552:	23c0      	movs	r3, #192	@ 0xc0
 8002554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002556:	2302      	movs	r3, #2
 8002558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2300      	movs	r3, #0
 8002560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002562:	2302      	movs	r3, #2
 8002564:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002566:	f107 0314 	add.w	r3, r7, #20
 800256a:	4619      	mov	r1, r3
 800256c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002570:	f003 f8ac 	bl	80056cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SERVO_PWM2_Pin|SERVO_PWM3_Pin;
 8002574:	2303      	movs	r3, #3
 8002576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002578:	2302      	movs	r3, #2
 800257a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002580:	2300      	movs	r3, #0
 8002582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002584:	2302      	movs	r3, #2
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	4619      	mov	r1, r3
 800258e:	4817      	ldr	r0, [pc, #92]	@ (80025ec <HAL_TIM_MspPostInit+0xec>)
 8002590:	f003 f89c 	bl	80056cc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002594:	e021      	b.n	80025da <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM15)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a15      	ldr	r2, [pc, #84]	@ (80025f0 <HAL_TIM_MspPostInit+0xf0>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d11c      	bne.n	80025da <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a0:	4b11      	ldr	r3, [pc, #68]	@ (80025e8 <HAL_TIM_MspPostInit+0xe8>)
 80025a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a4:	4a10      	ldr	r2, [pc, #64]	@ (80025e8 <HAL_TIM_MspPostInit+0xe8>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025ac:	4b0e      	ldr	r3, [pc, #56]	@ (80025e8 <HAL_TIM_MspPostInit+0xe8>)
 80025ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DRV_PWM_Pin;
 80025b8:	2308      	movs	r3, #8
 80025ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025bc:	2302      	movs	r3, #2
 80025be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c4:	2300      	movs	r3, #0
 80025c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80025c8:	2309      	movs	r3, #9
 80025ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DRV_PWM_GPIO_Port, &GPIO_InitStruct);
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	4619      	mov	r1, r3
 80025d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025d6:	f003 f879 	bl	80056cc <HAL_GPIO_Init>
}
 80025da:	bf00      	nop
 80025dc:	3728      	adds	r7, #40	@ 0x28
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40000400 	.word	0x40000400
 80025e8:	40021000 	.word	0x40021000
 80025ec:	48000400 	.word	0x48000400
 80025f0:	40014000 	.word	0x40014000

080025f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b0a0      	sub	sp, #128	@ 0x80
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800260c:	f107 031c 	add.w	r3, r7, #28
 8002610:	2250      	movs	r2, #80	@ 0x50
 8002612:	2100      	movs	r1, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f00f f920 	bl	801185a <memset>
  if(huart->Instance==UART5)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a64      	ldr	r2, [pc, #400]	@ (80027b0 <HAL_UART_MspInit+0x1bc>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d153      	bne.n	80026cc <HAL_UART_MspInit+0xd8>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002624:	2310      	movs	r3, #16
 8002626:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002628:	2300      	movs	r3, #0
 800262a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800262c:	f107 031c 	add.w	r3, r7, #28
 8002630:	4618      	mov	r0, r3
 8002632:	f005 ffb7 	bl	80085a4 <HAL_RCCEx_PeriphCLKConfig>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800263c:	f7ff fc62 	bl	8001f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002640:	4b5c      	ldr	r3, [pc, #368]	@ (80027b4 <HAL_UART_MspInit+0x1c0>)
 8002642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002644:	4a5b      	ldr	r2, [pc, #364]	@ (80027b4 <HAL_UART_MspInit+0x1c0>)
 8002646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800264a:	6593      	str	r3, [r2, #88]	@ 0x58
 800264c:	4b59      	ldr	r3, [pc, #356]	@ (80027b4 <HAL_UART_MspInit+0x1c0>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002650:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002654:	61bb      	str	r3, [r7, #24]
 8002656:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002658:	4b56      	ldr	r3, [pc, #344]	@ (80027b4 <HAL_UART_MspInit+0x1c0>)
 800265a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265c:	4a55      	ldr	r2, [pc, #340]	@ (80027b4 <HAL_UART_MspInit+0x1c0>)
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002664:	4b53      	ldr	r3, [pc, #332]	@ (80027b4 <HAL_UART_MspInit+0x1c0>)
 8002666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002670:	4b50      	ldr	r3, [pc, #320]	@ (80027b4 <HAL_UART_MspInit+0x1c0>)
 8002672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002674:	4a4f      	ldr	r2, [pc, #316]	@ (80027b4 <HAL_UART_MspInit+0x1c0>)
 8002676:	f043 0308 	orr.w	r3, r3, #8
 800267a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800267c:	4b4d      	ldr	r3, [pc, #308]	@ (80027b4 <HAL_UART_MspInit+0x1c0>)
 800267e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 8002688:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800268c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	2300      	movs	r3, #0
 8002698:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800269a:	2305      	movs	r3, #5
 800269c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 800269e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80026a2:	4619      	mov	r1, r3
 80026a4:	4844      	ldr	r0, [pc, #272]	@ (80027b8 <HAL_UART_MspInit+0x1c4>)
 80026a6:	f003 f811 	bl	80056cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_TX_Pin;
 80026aa:	2304      	movs	r3, #4
 80026ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b6:	2300      	movs	r3, #0
 80026b8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80026ba:	2305      	movs	r3, #5
 80026bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 80026be:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80026c2:	4619      	mov	r1, r3
 80026c4:	483d      	ldr	r0, [pc, #244]	@ (80027bc <HAL_UART_MspInit+0x1c8>)
 80026c6:	f003 f801 	bl	80056cc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80026ca:	e06c      	b.n	80027a6 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a3b      	ldr	r2, [pc, #236]	@ (80027c0 <HAL_UART_MspInit+0x1cc>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d167      	bne.n	80027a6 <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80026d6:	2304      	movs	r3, #4
 80026d8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80026da:	2300      	movs	r3, #0
 80026dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026de:	f107 031c 	add.w	r3, r7, #28
 80026e2:	4618      	mov	r0, r3
 80026e4:	f005 ff5e 	bl	80085a4 <HAL_RCCEx_PeriphCLKConfig>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 80026ee:	f7ff fc09 	bl	8001f04 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80026f2:	4b30      	ldr	r3, [pc, #192]	@ (80027b4 <HAL_UART_MspInit+0x1c0>)
 80026f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f6:	4a2f      	ldr	r2, [pc, #188]	@ (80027b4 <HAL_UART_MspInit+0x1c0>)
 80026f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80026fe:	4b2d      	ldr	r3, [pc, #180]	@ (80027b4 <HAL_UART_MspInit+0x1c0>)
 8002700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002702:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800270a:	4b2a      	ldr	r3, [pc, #168]	@ (80027b4 <HAL_UART_MspInit+0x1c0>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270e:	4a29      	ldr	r2, [pc, #164]	@ (80027b4 <HAL_UART_MspInit+0x1c0>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002716:	4b27      	ldr	r3, [pc, #156]	@ (80027b4 <HAL_UART_MspInit+0x1c0>)
 8002718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002722:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002726:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002734:	2307      	movs	r3, #7
 8002736:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002738:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800273c:	4619      	mov	r1, r3
 800273e:	481e      	ldr	r0, [pc, #120]	@ (80027b8 <HAL_UART_MspInit+0x1c4>)
 8002740:	f002 ffc4 	bl	80056cc <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel3;
 8002744:	4b1f      	ldr	r3, [pc, #124]	@ (80027c4 <HAL_UART_MspInit+0x1d0>)
 8002746:	4a20      	ldr	r2, [pc, #128]	@ (80027c8 <HAL_UART_MspInit+0x1d4>)
 8002748:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800274a:	4b1e      	ldr	r3, [pc, #120]	@ (80027c4 <HAL_UART_MspInit+0x1d0>)
 800274c:	221d      	movs	r2, #29
 800274e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002750:	4b1c      	ldr	r3, [pc, #112]	@ (80027c4 <HAL_UART_MspInit+0x1d0>)
 8002752:	2210      	movs	r2, #16
 8002754:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002756:	4b1b      	ldr	r3, [pc, #108]	@ (80027c4 <HAL_UART_MspInit+0x1d0>)
 8002758:	2200      	movs	r2, #0
 800275a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800275c:	4b19      	ldr	r3, [pc, #100]	@ (80027c4 <HAL_UART_MspInit+0x1d0>)
 800275e:	2280      	movs	r2, #128	@ 0x80
 8002760:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002762:	4b18      	ldr	r3, [pc, #96]	@ (80027c4 <HAL_UART_MspInit+0x1d0>)
 8002764:	2200      	movs	r2, #0
 8002766:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002768:	4b16      	ldr	r3, [pc, #88]	@ (80027c4 <HAL_UART_MspInit+0x1d0>)
 800276a:	2200      	movs	r2, #0
 800276c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800276e:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <HAL_UART_MspInit+0x1d0>)
 8002770:	2200      	movs	r2, #0
 8002772:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002774:	4b13      	ldr	r3, [pc, #76]	@ (80027c4 <HAL_UART_MspInit+0x1d0>)
 8002776:	2200      	movs	r2, #0
 8002778:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800277a:	4812      	ldr	r0, [pc, #72]	@ (80027c4 <HAL_UART_MspInit+0x1d0>)
 800277c:	f002 fc80 	bl	8005080 <HAL_DMA_Init>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_UART_MspInit+0x196>
      Error_Handler();
 8002786:	f7ff fbbd 	bl	8001f04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a0d      	ldr	r2, [pc, #52]	@ (80027c4 <HAL_UART_MspInit+0x1d0>)
 800278e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002790:	4a0c      	ldr	r2, [pc, #48]	@ (80027c4 <HAL_UART_MspInit+0x1d0>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 14, 0);
 8002796:	2200      	movs	r2, #0
 8002798:	210e      	movs	r1, #14
 800279a:	2027      	movs	r0, #39	@ 0x27
 800279c:	f002 fc48 	bl	8005030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80027a0:	2027      	movs	r0, #39	@ 0x27
 80027a2:	f002 fc5f 	bl	8005064 <HAL_NVIC_EnableIRQ>
}
 80027a6:	bf00      	nop
 80027a8:	3780      	adds	r7, #128	@ 0x80
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40005000 	.word	0x40005000
 80027b4:	40021000 	.word	0x40021000
 80027b8:	48000800 	.word	0x48000800
 80027bc:	48000c00 	.word	0x48000c00
 80027c0:	40004800 	.word	0x40004800
 80027c4:	20000774 	.word	0x20000774
 80027c8:	40020030 	.word	0x40020030

080027cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08c      	sub	sp, #48	@ 0x30
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80027dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002890 <HAL_InitTick+0xc4>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002890 <HAL_InitTick+0xc4>)
 80027e2:	f043 0310 	orr.w	r3, r3, #16
 80027e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80027e8:	4b29      	ldr	r3, [pc, #164]	@ (8002890 <HAL_InitTick+0xc4>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027f4:	f107 020c 	add.w	r2, r7, #12
 80027f8:	f107 0310 	add.w	r3, r7, #16
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f005 fe58 	bl	80084b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002804:	f005 fe2a 	bl	800845c <HAL_RCC_GetPCLK1Freq>
 8002808:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800280a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280c:	4a21      	ldr	r2, [pc, #132]	@ (8002894 <HAL_InitTick+0xc8>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0c9b      	lsrs	r3, r3, #18
 8002814:	3b01      	subs	r3, #1
 8002816:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002818:	4b1f      	ldr	r3, [pc, #124]	@ (8002898 <HAL_InitTick+0xcc>)
 800281a:	4a20      	ldr	r2, [pc, #128]	@ (800289c <HAL_InitTick+0xd0>)
 800281c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800281e:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <HAL_InitTick+0xcc>)
 8002820:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002824:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002826:	4a1c      	ldr	r2, [pc, #112]	@ (8002898 <HAL_InitTick+0xcc>)
 8002828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800282c:	4b1a      	ldr	r3, [pc, #104]	@ (8002898 <HAL_InitTick+0xcc>)
 800282e:	2200      	movs	r2, #0
 8002830:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002832:	4b19      	ldr	r3, [pc, #100]	@ (8002898 <HAL_InitTick+0xcc>)
 8002834:	2200      	movs	r2, #0
 8002836:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002838:	4817      	ldr	r0, [pc, #92]	@ (8002898 <HAL_InitTick+0xcc>)
 800283a:	f007 fa65 	bl	8009d08 <HAL_TIM_Base_Init>
 800283e:	4603      	mov	r3, r0
 8002840:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002844:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002848:	2b00      	cmp	r3, #0
 800284a:	d11b      	bne.n	8002884 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800284c:	4812      	ldr	r0, [pc, #72]	@ (8002898 <HAL_InitTick+0xcc>)
 800284e:	f007 fab3 	bl	8009db8 <HAL_TIM_Base_Start_IT>
 8002852:	4603      	mov	r3, r0
 8002854:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002858:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800285c:	2b00      	cmp	r3, #0
 800285e:	d111      	bne.n	8002884 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002860:	2036      	movs	r0, #54	@ 0x36
 8002862:	f002 fbff 	bl	8005064 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b0f      	cmp	r3, #15
 800286a:	d808      	bhi.n	800287e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800286c:	2200      	movs	r2, #0
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	2036      	movs	r0, #54	@ 0x36
 8002872:	f002 fbdd 	bl	8005030 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002876:	4a0a      	ldr	r2, [pc, #40]	@ (80028a0 <HAL_InitTick+0xd4>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	e002      	b.n	8002884 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002884:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002888:	4618      	mov	r0, r3
 800288a:	3730      	adds	r7, #48	@ 0x30
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000
 8002894:	431bde83 	.word	0x431bde83
 8002898:	200007d4 	.word	0x200007d4
 800289c:	40001000 	.word	0x40001000
 80028a0:	20000004 	.word	0x20000004

080028a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <NMI_Handler+0x4>

080028ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <HardFault_Handler+0x4>

080028b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <MemManage_Handler+0x4>

080028bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <BusFault_Handler+0x4>

080028c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <UsageFault_Handler+0x4>

080028cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002908:	4802      	ldr	r0, [pc, #8]	@ (8002914 <DMA1_Channel3_IRQHandler+0x10>)
 800290a:	f002 fd21 	bl	8005350 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000774 	.word	0x20000774

08002918 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800291c:	4802      	ldr	r0, [pc, #8]	@ (8002928 <USB_LP_IRQHandler+0x10>)
 800291e:	f003 facb 	bl	8005eb8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000e40 	.word	0x20000e40

0800292c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002930:	4802      	ldr	r0, [pc, #8]	@ (800293c <USART3_IRQHandler+0x10>)
 8002932:	f008 fe2f 	bl	800b594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	200006e0 	.word	0x200006e0

08002940 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002944:	4802      	ldr	r0, [pc, #8]	@ (8002950 <TIM6_DAC_IRQHandler+0x10>)
 8002946:	f007 fba4 	bl	800a092 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	200007d4 	.word	0x200007d4

08002954 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return 1;
 8002958:	2301      	movs	r3, #1
}
 800295a:	4618      	mov	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <_kill>:

int _kill(int pid, int sig)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800296e:	f00e ffd7 	bl	8011920 <__errno>
 8002972:	4603      	mov	r3, r0
 8002974:	2216      	movs	r2, #22
 8002976:	601a      	str	r2, [r3, #0]
  return -1;
 8002978:	f04f 33ff 	mov.w	r3, #4294967295
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <_exit>:

void _exit (int status)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800298c:	f04f 31ff 	mov.w	r1, #4294967295
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff ffe7 	bl	8002964 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002996:	bf00      	nop
 8002998:	e7fd      	b.n	8002996 <_exit+0x12>

0800299a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b086      	sub	sp, #24
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	e00a      	b.n	80029c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029ac:	f3af 8000 	nop.w
 80029b0:	4601      	mov	r1, r0
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	60ba      	str	r2, [r7, #8]
 80029b8:	b2ca      	uxtb	r2, r1
 80029ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	3301      	adds	r3, #1
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	dbf0      	blt.n	80029ac <_read+0x12>
  }

  return len;
 80029ca:	687b      	ldr	r3, [r7, #4]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029fc:	605a      	str	r2, [r3, #4]
  return 0;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <_isatty>:

int _isatty(int file)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a14:	2301      	movs	r3, #1
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b085      	sub	sp, #20
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a44:	4a14      	ldr	r2, [pc, #80]	@ (8002a98 <_sbrk+0x5c>)
 8002a46:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <_sbrk+0x60>)
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a50:	4b13      	ldr	r3, [pc, #76]	@ (8002aa0 <_sbrk+0x64>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d102      	bne.n	8002a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a58:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <_sbrk+0x64>)
 8002a5a:	4a12      	ldr	r2, [pc, #72]	@ (8002aa4 <_sbrk+0x68>)
 8002a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a5e:	4b10      	ldr	r3, [pc, #64]	@ (8002aa0 <_sbrk+0x64>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d207      	bcs.n	8002a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a6c:	f00e ff58 	bl	8011920 <__errno>
 8002a70:	4603      	mov	r3, r0
 8002a72:	220c      	movs	r2, #12
 8002a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7a:	e009      	b.n	8002a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a7c:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <_sbrk+0x64>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a82:	4b07      	ldr	r3, [pc, #28]	@ (8002aa0 <_sbrk+0x64>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	4a05      	ldr	r2, [pc, #20]	@ (8002aa0 <_sbrk+0x64>)
 8002a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	2001c000 	.word	0x2001c000
 8002a9c:	00000600 	.word	0x00000600
 8002aa0:	20000820 	.word	0x20000820
 8002aa4:	20001688 	.word	0x20001688

08002aa8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002aac:	4b06      	ldr	r3, [pc, #24]	@ (8002ac8 <SystemInit+0x20>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab2:	4a05      	ldr	r2, [pc, #20]	@ (8002ac8 <SystemInit+0x20>)
 8002ab4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ab8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002acc:	480d      	ldr	r0, [pc, #52]	@ (8002b04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ace:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ad0:	f7ff ffea 	bl	8002aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ad4:	480c      	ldr	r0, [pc, #48]	@ (8002b08 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ad6:	490d      	ldr	r1, [pc, #52]	@ (8002b0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b10 <LoopForever+0xe>)
  movs r3, #0
 8002ada:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002adc:	e002      	b.n	8002ae4 <LoopCopyDataInit>

08002ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ae2:	3304      	adds	r3, #4

08002ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ae8:	d3f9      	bcc.n	8002ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aea:	4a0a      	ldr	r2, [pc, #40]	@ (8002b14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002aec:	4c0a      	ldr	r4, [pc, #40]	@ (8002b18 <LoopForever+0x16>)
  movs r3, #0
 8002aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af0:	e001      	b.n	8002af6 <LoopFillZerobss>

08002af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af4:	3204      	adds	r2, #4

08002af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002af8:	d3fb      	bcc.n	8002af2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002afa:	f00e ff17 	bl	801192c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002afe:	f7fe fa27 	bl	8000f50 <main>

08002b02 <LoopForever>:

LoopForever:
    b LoopForever
 8002b02:	e7fe      	b.n	8002b02 <LoopForever>
  ldr   r0, =_estack
 8002b04:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b0c:	200002a8 	.word	0x200002a8
  ldr r2, =_sidata
 8002b10:	08013b38 	.word	0x08013b38
  ldr r2, =_sbss
 8002b14:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 8002b18:	20001684 	.word	0x20001684

08002b1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b1c:	e7fe      	b.n	8002b1c <ADC1_2_IRQHandler>

08002b1e <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d105      	bne.n	8002b38 <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002b2c:	b672      	cpsid	i
}
 8002b2e:	bf00      	nop
 8002b30:	f7ff f9e8 	bl	8001f04 <Error_Handler>
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <stm32_lock_init+0x16>
  lock->flag = 0;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	705a      	strb	r2, [r3, #1]
}
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b54:	f3ef 8310 	mrs	r3, PRIMASK
 8002b58:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b64:	b672      	cpsid	i
}
 8002b66:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b68:	f3bf 8f4f 	dsb	sy
}
 8002b6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b6e:	f3bf 8f6f 	isb	sy
}
 8002b72:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d105      	bne.n	8002b86 <stm32_lock_acquire+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002b7a:	b672      	cpsid	i
}
 8002b7c:	bf00      	nop
 8002b7e:	f7ff f9c1 	bl	8001f04 <Error_Handler>
 8002b82:	bf00      	nop
 8002b84:	e7fd      	b.n	8002b82 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	785b      	ldrb	r3, [r3, #1]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d103      	bne.n	8002b96 <stm32_lock_acquire+0x4a>
  {
    lock->flag = flag;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	701a      	strb	r2, [r3, #0]
 8002b94:	e009      	b.n	8002baa <stm32_lock_acquire+0x5e>
  }
  else if (lock->counter == UINT8_MAX)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	785b      	ldrb	r3, [r3, #1]
 8002b9a:	2bff      	cmp	r3, #255	@ 0xff
 8002b9c:	d105      	bne.n	8002baa <stm32_lock_acquire+0x5e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002b9e:	b672      	cpsid	i
}
 8002ba0:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8002ba2:	f7ff f9af 	bl	8001f04 <Error_Handler>
 8002ba6:	bf00      	nop
 8002ba8:	e7fd      	b.n	8002ba6 <stm32_lock_acquire+0x5a>
  }
  lock->counter++;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	785b      	ldrb	r3, [r3, #1]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	705a      	strb	r2, [r3, #1]
}
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d105      	bne.n	8002bd8 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002bcc:	b672      	cpsid	i
}
 8002bce:	bf00      	nop
 8002bd0:	f7ff f998 	bl	8001f04 <Error_Handler>
 8002bd4:	bf00      	nop
 8002bd6:	e7fd      	b.n	8002bd4 <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	785b      	ldrb	r3, [r3, #1]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <stm32_lock_release+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002be0:	b672      	cpsid	i
}
 8002be2:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8002be4:	f7ff f98e 	bl	8001f04 <Error_Handler>
 8002be8:	bf00      	nop
 8002bea:	e7fd      	b.n	8002be8 <stm32_lock_release+0x2a>
  }
  lock->counter--;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	785b      	ldrb	r3, [r3, #1]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	785b      	ldrb	r3, [r3, #1]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d105      	bne.n	8002c0c <stm32_lock_release+0x4e>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <stm32_lock_release+0x4e>
  __ASM volatile ("cpsie i" : : : "memory");
 8002c08:	b662      	cpsie	i
}
 8002c0a:	bf00      	nop
  {
    __enable_irq();
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d105      	bne.n	8002c2e <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8002c22:	f00e fe7d 	bl	8011920 <__errno>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2216      	movs	r2, #22
 8002c2a:	601a      	str	r2, [r3, #0]
    return;
 8002c2c:	e016      	b.n	8002c5c <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002c2e:	2002      	movs	r0, #2
 8002c30:	f00d ffb2 	bl	8010b98 <malloc>
 8002c34:	4603      	mov	r3, r0
 8002c36:	461a      	mov	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff68 	bl	8002b1e <stm32_lock_init>
    return;
 8002c4e:	e005      	b.n	8002c5c <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c50:	b672      	cpsid	i
}
 8002c52:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8002c54:	f7ff f956 	bl	8001f04 <Error_Handler>
 8002c58:	bf00      	nop
 8002c5a:	e7fd      	b.n	8002c58 <__retarget_lock_init_recursive+0x44>
}
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c70:	b672      	cpsid	i
}
 8002c72:	bf00      	nop
 8002c74:	f7ff f946 	bl	8001f04 <Error_Handler>
 8002c78:	bf00      	nop
 8002c7a:	e7fd      	b.n	8002c78 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff ff64 	bl	8002b4c <stm32_lock_acquire>
}
 8002c84:	bf00      	nop
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d105      	bne.n	8002ca6 <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c9a:	b672      	cpsid	i
}
 8002c9c:	bf00      	nop
 8002c9e:	f7ff f931 	bl	8001f04 <Error_Handler>
 8002ca2:	bf00      	nop
 8002ca4:	e7fd      	b.n	8002ca2 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff88 	bl	8002bbe <stm32_lock_release>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <BMM150_enable_chip_select>:
	GPIO_TypeDef* chip_select_port;
	uint16_t chip_select_pin;
};

void BMM150_enable_chip_select(GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(cs_port, cs_gpio_pin, GPIO_PIN_RESET);
 8002cc2:	887b      	ldrh	r3, [r7, #2]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f002 fe99 	bl	8005a00 <HAL_GPIO_WritePin>
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <BMM150_disable_chip_select>:

void BMM150_disable_chip_select(GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(cs_port, cs_gpio_pin, GPIO_PIN_SET);
 8002ce2:	887b      	ldrh	r3, [r7, #2]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f002 fe89 	bl	8005a00 <HAL_GPIO_WritePin>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <BMM150_SPI_read>:
	osDelay(period_in_micro_s / tick_amount);
}
*/

BMM150_INTF_RET_TYPE BMM150_SPI_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	4603      	mov	r3, r0
 8002d04:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	75fb      	strb	r3, [r7, #23]
	struct spi_interface *spi = (struct spi_interface *)intf_ptr;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	613b      	str	r3, [r7, #16]

	BMM150_enable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	891b      	ldrh	r3, [r3, #8]
 8002d16:	4619      	mov	r1, r3
 8002d18:	4610      	mov	r0, r2
 8002d1a:	f7ff ffcc 	bl	8002cb6 <BMM150_enable_chip_select>

	status = HAL_SPI_Transmit(spi->spi_handle, reg_addr, sizeof(reg_addr), BMM150_TIMEOUT_DURATION);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	4619      	mov	r1, r3
 8002d26:	230a      	movs	r3, #10
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f006 f963 	bl	8008ff4 <HAL_SPI_Transmit>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(spi->spi_handle, reg_data, length, BMM150_TIMEOUT_DURATION);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	230a      	movs	r3, #10
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	f006 facf 	bl	80092e0 <HAL_SPI_Receive>
 8002d42:	4603      	mov	r3, r0
 8002d44:	75fb      	strb	r3, [r7, #23]

	BMM150_disable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	891b      	ldrh	r3, [r3, #8]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4610      	mov	r0, r2
 8002d52:	f7ff ffc0 	bl	8002cd6 <BMM150_disable_chip_select>


	return (BMM150_INTF_RET_TYPE)status;
 8002d56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <BMM150_SPI_write>:

BMM150_INTF_RET_TYPE BMM150_SPI_write(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b086      	sub	sp, #24
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	4603      	mov	r3, r0
 8002d70:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	75fb      	strb	r3, [r7, #23]
	struct spi_interface *spi = (struct spi_interface *)intf_ptr;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	613b      	str	r3, [r7, #16]

	BMM150_enable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	891b      	ldrh	r3, [r3, #8]
 8002d82:	4619      	mov	r1, r3
 8002d84:	4610      	mov	r0, r2
 8002d86:	f7ff ff96 	bl	8002cb6 <BMM150_enable_chip_select>

	status = HAL_SPI_Transmit(spi->spi_handle, reg_addr, sizeof(reg_addr), BMM150_TIMEOUT_DURATION);
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	4619      	mov	r1, r3
 8002d92:	230a      	movs	r3, #10
 8002d94:	2201      	movs	r2, #1
 8002d96:	f006 f92d 	bl	8008ff4 <HAL_SPI_Transmit>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Transmit(spi->spi_handle, reg_data, length, BMM150_TIMEOUT_DURATION);
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	230a      	movs	r3, #10
 8002da8:	68b9      	ldr	r1, [r7, #8]
 8002daa:	f006 f923 	bl	8008ff4 <HAL_SPI_Transmit>
 8002dae:	4603      	mov	r3, r0
 8002db0:	75fb      	strb	r3, [r7, #23]

	BMM150_disable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	891b      	ldrh	r3, [r3, #8]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	f7ff ff8a 	bl	8002cd6 <BMM150_disable_chip_select>

	return (BMM150_INTF_RET_TYPE)status;
 8002dc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <BMM150_spi_init>:

struct bmm150_dev BMM150_spi_init(SPI_HandleTypeDef *spi_handle, GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 8002dd0:	b5b0      	push	{r4, r5, r7, lr}
 8002dd2:	b09e      	sub	sp, #120	@ 0x78
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	807b      	strh	r3, [r7, #2]
	struct bmm150_dev bmm150 = (struct bmm150_dev){ 0 };
 8002dde:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002de2:	222c      	movs	r2, #44	@ 0x2c
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f00e fd37 	bl	801185a <memset>

	if (spi_handle == NULL)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10f      	bne.n	8002e12 <BMM150_spi_init+0x42>
	{
		bmm150.intf_rslt = BMM150_E_NULL_PTR;
 8002df2:	23ff      	movs	r3, #255	@ 0xff
 8002df4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
		return bmm150;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	461d      	mov	r5, r3
 8002dfc:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8002e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e08:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002e0c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002e10:	e026      	b.n	8002e60 <BMM150_spi_init+0x90>
	}

	struct spi_interface my_spi = {
 8002e12:	f107 0308 	add.w	r3, r7, #8
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	1d3b      	adds	r3, r7, #4
 8002e1a:	61bb      	str	r3, [r7, #24]
 8002e1c:	887b      	ldrh	r3, [r7, #2]
 8002e1e:	83bb      	strh	r3, [r7, #28]
		.spi_handle = &spi_handle,
		.chip_select_port = &cs_port,
		.chip_select_pin = cs_gpio_pin
	};

	bmm150.intf = BMM150_SPI_INTF;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	bmm150.read = BMM150_SPI_read;
 8002e26:	4b10      	ldr	r3, [pc, #64]	@ (8002e68 <BMM150_spi_init+0x98>)
 8002e28:	65bb      	str	r3, [r7, #88]	@ 0x58
	bmm150.write = BMM150_SPI_write;
 8002e2a:	4b10      	ldr	r3, [pc, #64]	@ (8002e6c <BMM150_spi_init+0x9c>)
 8002e2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	bmm150.delay_us = HAL_Delay;
 8002e2e:	4b10      	ldr	r3, [pc, #64]	@ (8002e70 <BMM150_spi_init+0xa0>)
 8002e30:	663b      	str	r3, [r7, #96]	@ 0x60
	bmm150.intf_ptr = &my_spi;
 8002e32:	f107 0314 	add.w	r3, r7, #20
 8002e36:	653b      	str	r3, [r7, #80]	@ 0x50

	//NOTE: Potential error: is chip id initialized properly?
	bmm150.intf_rslt = bmm150_init(&bmm150);
 8002e38:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 f819 	bl	8002e74 <bmm150_init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	return bmm150;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	461d      	mov	r5, r3
 8002e4c:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8002e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e58:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002e5c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	3778      	adds	r7, #120	@ 0x78
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bdb0      	pop	{r4, r5, r7, pc}
 8002e68:	08002cf7 	.word	0x08002cf7
 8002e6c:	08002d63 	.word	0x08002d63
 8002e70:	08003c55 	.word	0x08003c55

08002e74 <bmm150_init>:
 *  @brief This API is the entry point, Call this API before using other APIs.
 *  This API reads the chip-id of the sensor which is the first step to
 *  verify the sensor and updates the trim parameters of the sensor.
 */
int8_t bmm150_init(struct bmm150_dev *dev)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	73bb      	strb	r3, [r7, #14]

    /* Power up the sensor from suspend to sleep mode */
    rslt = set_power_control_bit(BMM150_POWER_CNTRL_ENABLE, dev);
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	2001      	movs	r0, #1
 8002e84:	f000 f8ac 	bl	8002fe0 <set_power_control_bit>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 8002e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d11e      	bne.n	8002ed2 <bmm150_init+0x5e>
    {
        /* Start-up time delay of 3ms */
        dev->delay_us(BMM150_START_UP_TIME, dev->intf_ptr);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6852      	ldr	r2, [r2, #4]
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	2003      	movs	r0, #3
 8002ea0:	4798      	blx	r3

        /* Chip ID of the sensor is read */
        rslt = bmm150_get_regs(BMM150_REG_CHIP_ID, &chip_id, 1, dev);
 8002ea2:	f107 010e 	add.w	r1, r7, #14
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	2040      	movs	r0, #64	@ 0x40
 8002eac:	f000 f843 	bl	8002f36 <bmm150_get_regs>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMM150_OK)
 8002eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10a      	bne.n	8002ed2 <bmm150_init+0x5e>
        {
            /* Check for chip id validity */
            if (chip_id == BMM150_CHIP_ID)
 8002ebc:	7bbb      	ldrb	r3, [r7, #14]
 8002ebe:	2b32      	cmp	r3, #50	@ 0x32
 8002ec0:	d107      	bne.n	8002ed2 <bmm150_init+0x5e>
            {
                dev->chip_id = chip_id;
 8002ec2:	7bba      	ldrb	r2, [r7, #14]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	701a      	strb	r2, [r3, #0]

                /* Function to update trim values */
                rslt = read_trim_registers(dev);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f8c3 	bl	8003054 <read_trim_registers>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <bmm150_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmm150_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 8002ede:	b590      	push	{r4, r7, lr}
 8002ee0:	b087      	sub	sp, #28
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	603b      	str	r3, [r7, #0]
 8002eea:	4603      	mov	r3, r0
 8002eec:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8002eee:	6838      	ldr	r0, [r7, #0]
 8002ef0:	f000 f852 	bl	8002f98 <null_ptr_check>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL) && (len != 0))
 8002ef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d112      	bne.n	8002f26 <bmm150_set_regs+0x48>
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00f      	beq.n	8002f26 <bmm150_set_regs+0x48>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00c      	beq.n	8002f26 <bmm150_set_regs+0x48>
        /* Write the data to the reg_addr */

        /* SPI write requires to set The MSB of reg_addr as 0
         * but in default the MSB is always 0
         */
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	691c      	ldr	r4, [r3, #16]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	7bf8      	ldrb	r0, [r7, #15]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	47a0      	blx	r4
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	461a      	mov	r2, r3
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	721a      	strb	r2, [r3, #8]
 8002f24:	e001      	b.n	8002f2a <bmm150_set_regs+0x4c>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 8002f26:	23ff      	movs	r3, #255	@ 0xff
 8002f28:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002f2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	371c      	adds	r7, #28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd90      	pop	{r4, r7, pc}

08002f36 <bmm150_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmm150_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 8002f36:	b590      	push	{r4, r7, lr}
 8002f38:	b087      	sub	sp, #28
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
 8002f42:	4603      	mov	r3, r0
 8002f44:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8002f46:	6838      	ldr	r0, [r7, #0]
 8002f48:	f000 f826 	bl	8002f98 <null_ptr_check>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL))
 8002f50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d117      	bne.n	8002f88 <bmm150_get_regs+0x52>
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d014      	beq.n	8002f88 <bmm150_get_regs+0x52>
    {
        if (dev->intf != BMM150_I2C_INTF)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	785b      	ldrb	r3, [r3, #1]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d003      	beq.n	8002f6e <bmm150_get_regs+0x38>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | 0x80;
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f6c:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68dc      	ldr	r4, [r3, #12]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	7bf8      	ldrb	r0, [r7, #15]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	47a0      	blx	r4
 8002f7e:	4603      	mov	r3, r0
 8002f80:	461a      	mov	r2, r3
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	721a      	strb	r2, [r3, #8]
 8002f86:	e001      	b.n	8002f8c <bmm150_get_regs+0x56>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 8002f88:	23ff      	movs	r3, #255	@ 0xff
 8002f8a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002f8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd90      	pop	{r4, r7, pc}

08002f98 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmm150_dev *dev)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00f      	beq.n	8002fc6 <null_ptr_check+0x2e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00b      	beq.n	8002fc6 <null_ptr_check+0x2e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d007      	beq.n	8002fc6 <null_ptr_check+0x2e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMM150_E_NULL_PTR;
 8002fc6:	23ff      	movs	r3, #255	@ 0xff
 8002fc8:	73fb      	strb	r3, [r7, #15]
 8002fca:	e001      	b.n	8002fd0 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMM150_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <set_power_control_bit>:

/*!
 * @brief This internal API sets/resets the power control bit of 0x4B register.
 */
static int8_t set_power_control_bit(uint8_t pwrcntrl_bit, struct bmm150_dev *dev)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	6039      	str	r1, [r7, #0]
 8002fea:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	73bb      	strb	r3, [r7, #14]

    /* Power control register 0x4B is read */
    rslt = bmm150_get_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 8002ff0:	f107 010e 	add.w	r1, r7, #14
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	204b      	movs	r0, #75	@ 0x4b
 8002ffa:	f7ff ff9c 	bl	8002f36 <bmm150_get_regs>
 8002ffe:	4603      	mov	r3, r0
 8003000:	73fb      	strb	r3, [r7, #15]

    /* Proceed if everything is fine until now */
    if (rslt == BMM150_OK)
 8003002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d11e      	bne.n	8003048 <set_power_control_bit+0x68>
    {
        /* Sets the value of power control bit */
        reg_data = BMM150_SET_BITS_POS_0(reg_data, BMM150_PWR_CNTRL, pwrcntrl_bit);
 800300a:	7bbb      	ldrb	r3, [r7, #14]
 800300c:	b25b      	sxtb	r3, r3
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	b25a      	sxtb	r2, r3
 8003014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	b25b      	sxtb	r3, r3
 800301e:	4313      	orrs	r3, r2
 8003020:	b25b      	sxtb	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 8003026:	f107 010e 	add.w	r1, r7, #14
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2201      	movs	r2, #1
 800302e:	204b      	movs	r0, #75	@ 0x4b
 8003030:	f7ff ff55 	bl	8002ede <bmm150_set_regs>
 8003034:	4603      	mov	r3, r0
 8003036:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMM150_OK)
 8003038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d103      	bne.n	8003048 <set_power_control_bit+0x68>
        {
            /* Store the power control bit
             * value in dev structure
             */
            dev->pwr_cntrl_bit = pwrcntrl_bit;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	79fa      	ldrb	r2, [r7, #7]
 8003044:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        }
    }

    return rslt;
 8003048:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <read_trim_registers>:
/*!
 * @brief This internal API reads the trim registers of the sensor and stores
 * the trim values in the "trim_data" of device structure.
 */
static int8_t read_trim_registers(struct bmm150_dev *dev)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t trim_x1y1[2] = { 0 };
 800305c:	2300      	movs	r3, #0
 800305e:	833b      	strh	r3, [r7, #24]
    uint8_t trim_xyz_data[4] = { 0 };
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]
    uint8_t trim_xy1xy2[10] = { 0 };
 8003064:	f107 0308 	add.w	r3, r7, #8
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	811a      	strh	r2, [r3, #8]
    uint16_t temp_msb = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	83bb      	strh	r3, [r7, #28]

    /* Trim register value is read */
    rslt = bmm150_get_regs(BMM150_DIG_X1, trim_x1y1, 2, dev);
 8003074:	f107 0118 	add.w	r1, r7, #24
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	205d      	movs	r0, #93	@ 0x5d
 800307e:	f7ff ff5a 	bl	8002f36 <bmm150_get_regs>
 8003082:	4603      	mov	r3, r0
 8003084:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 8003086:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d16a      	bne.n	8003164 <read_trim_registers+0x110>
    {
        rslt = bmm150_get_regs(BMM150_DIG_Z4_LSB, trim_xyz_data, 4, dev);
 800308e:	f107 0114 	add.w	r1, r7, #20
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2204      	movs	r2, #4
 8003096:	2062      	movs	r0, #98	@ 0x62
 8003098:	f7ff ff4d 	bl	8002f36 <bmm150_get_regs>
 800309c:	4603      	mov	r3, r0
 800309e:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMM150_OK)
 80030a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d15d      	bne.n	8003164 <read_trim_registers+0x110>
        {
            rslt = bmm150_get_regs(BMM150_DIG_Z2_LSB, trim_xy1xy2, 10, dev);
 80030a8:	f107 0108 	add.w	r1, r7, #8
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	220a      	movs	r2, #10
 80030b0:	2068      	movs	r0, #104	@ 0x68
 80030b2:	f7ff ff40 	bl	8002f36 <bmm150_get_regs>
 80030b6:	4603      	mov	r3, r0
 80030b8:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMM150_OK)
 80030ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d150      	bne.n	8003164 <read_trim_registers+0x110>
            {
                /* Trim data which is read is updated
                 * in the device structure
                 */
                dev->trim_data.dig_x1 = (int8_t)trim_x1y1[0];
 80030c2:	7e3b      	ldrb	r3, [r7, #24]
 80030c4:	b25a      	sxtb	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	761a      	strb	r2, [r3, #24]
                dev->trim_data.dig_y1 = (int8_t)trim_x1y1[1];
 80030ca:	7e7b      	ldrb	r3, [r7, #25]
 80030cc:	b25a      	sxtb	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	765a      	strb	r2, [r3, #25]
                dev->trim_data.dig_x2 = (int8_t)trim_xyz_data[2];
 80030d2:	7dbb      	ldrb	r3, [r7, #22]
 80030d4:	b25a      	sxtb	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	769a      	strb	r2, [r3, #26]
                dev->trim_data.dig_y2 = (int8_t)trim_xyz_data[3];
 80030da:	7dfb      	ldrb	r3, [r7, #23]
 80030dc:	b25a      	sxtb	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	76da      	strb	r2, [r3, #27]
                temp_msb = ((uint16_t)trim_xy1xy2[3]) << 8;
 80030e2:	7afb      	ldrb	r3, [r7, #11]
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z1 = (uint16_t)(temp_msb | trim_xy1xy2[2]);
 80030e8:	7abb      	ldrb	r3, [r7, #10]
 80030ea:	461a      	mov	r2, r3
 80030ec:	8bbb      	ldrh	r3, [r7, #28]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	839a      	strh	r2, [r3, #28]
                temp_msb = ((uint16_t)trim_xy1xy2[1]) << 8;
 80030f6:	7a7b      	ldrb	r3, [r7, #9]
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z2 = (int16_t)(temp_msb | trim_xy1xy2[0]);
 80030fc:	7a3b      	ldrb	r3, [r7, #8]
 80030fe:	461a      	mov	r2, r3
 8003100:	8bbb      	ldrh	r3, [r7, #28]
 8003102:	4313      	orrs	r3, r2
 8003104:	b29b      	uxth	r3, r3
 8003106:	b21a      	sxth	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	83da      	strh	r2, [r3, #30]
                temp_msb = ((uint16_t)trim_xy1xy2[7]) << 8;
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z3 = (int16_t)(temp_msb | trim_xy1xy2[6]);
 8003112:	7bbb      	ldrb	r3, [r7, #14]
 8003114:	461a      	mov	r2, r3
 8003116:	8bbb      	ldrh	r3, [r7, #28]
 8003118:	4313      	orrs	r3, r2
 800311a:	b29b      	uxth	r3, r3
 800311c:	b21a      	sxth	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	841a      	strh	r2, [r3, #32]
                temp_msb = ((uint16_t)trim_xyz_data[1]) << 8;
 8003122:	7d7b      	ldrb	r3, [r7, #21]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z4 = (int16_t)(temp_msb | trim_xyz_data[0]);
 8003128:	7d3b      	ldrb	r3, [r7, #20]
 800312a:	461a      	mov	r2, r3
 800312c:	8bbb      	ldrh	r3, [r7, #28]
 800312e:	4313      	orrs	r3, r2
 8003130:	b29b      	uxth	r3, r3
 8003132:	b21a      	sxth	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	845a      	strh	r2, [r3, #34]	@ 0x22
                dev->trim_data.dig_xy1 = trim_xy1xy2[9];
 8003138:	7c7a      	ldrb	r2, [r7, #17]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                dev->trim_data.dig_xy2 = (int8_t)trim_xy1xy2[8];
 8003140:	7c3b      	ldrb	r3, [r7, #16]
 8003142:	b25a      	sxtb	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
 800314a:	7b7b      	ldrb	r3, [r7, #13]
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	b29b      	uxth	r3, r3
 8003150:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8003154:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
 8003156:	7b3b      	ldrb	r3, [r7, #12]
 8003158:	461a      	mov	r2, r3
 800315a:	8bbb      	ldrh	r3, [r7, #28]
 800315c:	4313      	orrs	r3, r2
 800315e:	b29a      	uxth	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	84da      	strh	r2, [r3, #38]	@ 0x26
            }
        }
    }

    return rslt;
 8003164:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3720      	adds	r7, #32
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <ICM42688P_disable_chip_select>:
/* Private GPIO CS Pin Variables */
static GPIO_TypeDef* ChipSelect_GPIO_Port;
static uint16_t ChipSelect_Pin;

static void ICM42688P_disable_chip_select()
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_RESET);
 8003174:	4b04      	ldr	r3, [pc, #16]	@ (8003188 <ICM42688P_disable_chip_select+0x18>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a04      	ldr	r2, [pc, #16]	@ (800318c <ICM42688P_disable_chip_select+0x1c>)
 800317a:	8811      	ldrh	r1, [r2, #0]
 800317c:	2200      	movs	r2, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f002 fc3e 	bl	8005a00 <HAL_GPIO_WritePin>
}
 8003184:	bf00      	nop
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000830 	.word	0x20000830
 800318c:	20000834 	.word	0x20000834

08003190 <ICM42688P_enable_chip_select>:

static void ICM42688P_enable_chip_select()
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_SET);
 8003194:	4b04      	ldr	r3, [pc, #16]	@ (80031a8 <ICM42688P_enable_chip_select+0x18>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a04      	ldr	r2, [pc, #16]	@ (80031ac <ICM42688P_enable_chip_select+0x1c>)
 800319a:	8811      	ldrh	r1, [r2, #0]
 800319c:	2201      	movs	r2, #1
 800319e:	4618      	mov	r0, r3
 80031a0:	f002 fc2e 	bl	8005a00 <HAL_GPIO_WritePin>
}
 80031a4:	bf00      	nop
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000830 	.word	0x20000830
 80031ac:	20000834 	.word	0x20000834

080031b0 <ICM42688P_write_reg>:

static HAL_StatusTypeDef ICM42688P_write_reg(uint8_t reg, uint8_t data)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	460a      	mov	r2, r1
 80031ba:	71fb      	strb	r3, [r7, #7]
 80031bc:	4613      	mov	r3, r2
 80031be:	71bb      	strb	r3, [r7, #6]
    uint8_t tx[2] = {reg, data};
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	733b      	strb	r3, [r7, #12]
 80031c4:	79bb      	ldrb	r3, [r7, #6]
 80031c6:	737b      	strb	r3, [r7, #13]
    ICM42688P_disable_chip_select();
 80031c8:	f7ff ffd2 	bl	8003170 <ICM42688P_disable_chip_select>
    HAL_SPI_Transmit(hspi, tx, 2, HAL_MAX_DELAY);
 80031cc:	4b07      	ldr	r3, [pc, #28]	@ (80031ec <ICM42688P_write_reg+0x3c>)
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	f107 010c 	add.w	r1, r7, #12
 80031d4:	f04f 33ff 	mov.w	r3, #4294967295
 80031d8:	2202      	movs	r2, #2
 80031da:	f005 ff0b 	bl	8008ff4 <HAL_SPI_Transmit>
    ICM42688P_enable_chip_select();
 80031de:	f7ff ffd7 	bl	8003190 <ICM42688P_enable_chip_select>
    return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	2000082c 	.word	0x2000082c

080031f0 <ICM42688P_read_reg>:

uint8_t ICM42688P_read_reg(uint8_t reg)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = reg | (1 << 7);
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003200:	b2db      	uxtb	r3, r3
 8003202:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	73bb      	strb	r3, [r7, #14]
    ICM42688P_disable_chip_select();
 8003208:	f7ff ffb2 	bl	8003170 <ICM42688P_disable_chip_select>
    HAL_SPI_Transmit(hspi, &tx, 1, HAL_MAX_DELAY);
 800320c:	4b0c      	ldr	r3, [pc, #48]	@ (8003240 <ICM42688P_read_reg+0x50>)
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	f107 010f 	add.w	r1, r7, #15
 8003214:	f04f 33ff 	mov.w	r3, #4294967295
 8003218:	2201      	movs	r2, #1
 800321a:	f005 feeb 	bl	8008ff4 <HAL_SPI_Transmit>
    
    HAL_SPI_Receive(hspi, &rx, 1, HAL_MAX_DELAY);
 800321e:	4b08      	ldr	r3, [pc, #32]	@ (8003240 <ICM42688P_read_reg+0x50>)
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	f107 010e 	add.w	r1, r7, #14
 8003226:	f04f 33ff 	mov.w	r3, #4294967295
 800322a:	2201      	movs	r2, #1
 800322c:	f006 f858 	bl	80092e0 <HAL_SPI_Receive>
    ICM42688P_enable_chip_select();
 8003230:	f7ff ffae 	bl	8003190 <ICM42688P_enable_chip_select>
    return rx;
 8003234:	7bbb      	ldrb	r3, [r7, #14]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	2000082c 	.word	0x2000082c

08003244 <ICM42688P_init>:

uint8_t ICM42688P_init(SPI_TypeDef* spi_handle, GPIO_TypeDef* chip_select_port, uint16_t chip_select_gpio_pin)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	4613      	mov	r3, r2
 8003250:	80fb      	strh	r3, [r7, #6]
    hspi = spi_handle;
 8003252:	4a0e      	ldr	r2, [pc, #56]	@ (800328c <ICM42688P_init+0x48>)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6013      	str	r3, [r2, #0]
    ChipSelect_GPIO_Port = chip_select_port;
 8003258:	4a0d      	ldr	r2, [pc, #52]	@ (8003290 <ICM42688P_init+0x4c>)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	6013      	str	r3, [r2, #0]
    ChipSelect_Pin = chip_select_gpio_pin;
 800325e:	4a0d      	ldr	r2, [pc, #52]	@ (8003294 <ICM42688P_init+0x50>)
 8003260:	88fb      	ldrh	r3, [r7, #6]
 8003262:	8013      	strh	r3, [r2, #0]
    HAL_Delay(100);
    ICM42688P_write_reg(0x11, 0x00);  // Power management
    ICM42688P_write_reg(0x10, 0x0F);  // Gyro and accel config
    */

    ICM42688P_write_reg(0x11, 0x01); // Reset Device
 8003264:	2101      	movs	r1, #1
 8003266:	2011      	movs	r0, #17
 8003268:	f7ff ffa2 	bl	80031b0 <ICM42688P_write_reg>
    HAL_Delay(100);
 800326c:	2064      	movs	r0, #100	@ 0x64
 800326e:	f000 fcf1 	bl	8003c54 <HAL_Delay>
    ICM42688P_write_reg(0x4E, (0b11 << 2) | (0b11 << 0)); // Enable gyro & accelerometer
 8003272:	210f      	movs	r1, #15
 8003274:	204e      	movs	r0, #78	@ 0x4e
 8003276:	f7ff ff9b 	bl	80031b0 <ICM42688P_write_reg>
    ICM42688P_write_reg(0x7B, (0b10 << 1)); // Enable CLKIN
 800327a:	2104      	movs	r1, #4
 800327c:	207b      	movs	r0, #123	@ 0x7b
 800327e:	f7ff ff97 	bl	80031b0 <ICM42688P_write_reg>

    return 0;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	2000082c 	.word	0x2000082c
 8003290:	20000830 	.word	0x20000830
 8003294:	20000834 	.word	0x20000834

08003298 <ICM42688P_read_data>:

ICM42688P_AccelData ICM42688P_read_data()
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b08b      	sub	sp, #44	@ 0x2c
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
    ICM42688P_AccelData data = { 0 };
 80032a0:	f107 031c 	add.w	r3, r7, #28
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	609a      	str	r2, [r3, #8]

    uint8_t buffer[12];
    ICM42688P_disable_chip_select();
 80032ac:	f7ff ff60 	bl	8003170 <ICM42688P_disable_chip_select>
    //This register should be correct
    uint8_t reg = 0x1F | (1 << 7);
 80032b0:	239f      	movs	r3, #159	@ 0x9f
 80032b2:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_Transmit(hspi, &reg, 1, HAL_MAX_DELAY);
 80032b4:	4b2d      	ldr	r3, [pc, #180]	@ (800336c <ICM42688P_read_data+0xd4>)
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	f107 010f 	add.w	r1, r7, #15
 80032bc:	f04f 33ff 	mov.w	r3, #4294967295
 80032c0:	2201      	movs	r2, #1
 80032c2:	f005 fe97 	bl	8008ff4 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, buffer, sizeof(buffer) / sizeof(buffer[0]), HAL_MAX_DELAY);
 80032c6:	4b29      	ldr	r3, [pc, #164]	@ (800336c <ICM42688P_read_data+0xd4>)
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	f107 0110 	add.w	r1, r7, #16
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295
 80032d2:	220c      	movs	r2, #12
 80032d4:	f006 f804 	bl	80092e0 <HAL_SPI_Receive>
    ICM42688P_enable_chip_select();
 80032d8:	f7ff ff5a 	bl	8003190 <ICM42688P_enable_chip_select>

    data.accel_x = (buffer[0] << 8) | buffer[1];
 80032dc:	7c3b      	ldrb	r3, [r7, #16]
 80032de:	b21b      	sxth	r3, r3
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	b21a      	sxth	r2, r3
 80032e4:	7c7b      	ldrb	r3, [r7, #17]
 80032e6:	b21b      	sxth	r3, r3
 80032e8:	4313      	orrs	r3, r2
 80032ea:	b21b      	sxth	r3, r3
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	83bb      	strh	r3, [r7, #28]
    data.accel_y = (buffer[2] << 8) | buffer[3];
 80032f0:	7cbb      	ldrb	r3, [r7, #18]
 80032f2:	b21b      	sxth	r3, r3
 80032f4:	021b      	lsls	r3, r3, #8
 80032f6:	b21a      	sxth	r2, r3
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	b21b      	sxth	r3, r3
 80032fc:	4313      	orrs	r3, r2
 80032fe:	b21b      	sxth	r3, r3
 8003300:	b29b      	uxth	r3, r3
 8003302:	83fb      	strh	r3, [r7, #30]
    data.accel_z = (buffer[4] << 8) | buffer[5];
 8003304:	7d3b      	ldrb	r3, [r7, #20]
 8003306:	b21b      	sxth	r3, r3
 8003308:	021b      	lsls	r3, r3, #8
 800330a:	b21a      	sxth	r2, r3
 800330c:	7d7b      	ldrb	r3, [r7, #21]
 800330e:	b21b      	sxth	r3, r3
 8003310:	4313      	orrs	r3, r2
 8003312:	b21b      	sxth	r3, r3
 8003314:	b29b      	uxth	r3, r3
 8003316:	843b      	strh	r3, [r7, #32]
    data.gyro_x = (buffer[6] << 8) | buffer[7];
 8003318:	7dbb      	ldrb	r3, [r7, #22]
 800331a:	b21b      	sxth	r3, r3
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	b21a      	sxth	r2, r3
 8003320:	7dfb      	ldrb	r3, [r7, #23]
 8003322:	b21b      	sxth	r3, r3
 8003324:	4313      	orrs	r3, r2
 8003326:	b21b      	sxth	r3, r3
 8003328:	b29b      	uxth	r3, r3
 800332a:	847b      	strh	r3, [r7, #34]	@ 0x22
    data.gyro_y = (buffer[8] << 8) | buffer[9];
 800332c:	7e3b      	ldrb	r3, [r7, #24]
 800332e:	b21b      	sxth	r3, r3
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	b21a      	sxth	r2, r3
 8003334:	7e7b      	ldrb	r3, [r7, #25]
 8003336:	b21b      	sxth	r3, r3
 8003338:	4313      	orrs	r3, r2
 800333a:	b21b      	sxth	r3, r3
 800333c:	b29b      	uxth	r3, r3
 800333e:	84bb      	strh	r3, [r7, #36]	@ 0x24
    data.gyro_z = (buffer[10] << 8) | buffer[11];
 8003340:	7ebb      	ldrb	r3, [r7, #26]
 8003342:	b21b      	sxth	r3, r3
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	b21a      	sxth	r2, r3
 8003348:	7efb      	ldrb	r3, [r7, #27]
 800334a:	b21b      	sxth	r3, r3
 800334c:	4313      	orrs	r3, r2
 800334e:	b21b      	sxth	r3, r3
 8003350:	b29b      	uxth	r3, r3
 8003352:	84fb      	strh	r3, [r7, #38]	@ 0x26

    return data;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	461c      	mov	r4, r3
 8003358:	f107 031c 	add.w	r3, r7, #28
 800335c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800335e:	6020      	str	r0, [r4, #0]
 8003360:	6061      	str	r1, [r4, #4]
 8003362:	60a2      	str	r2, [r4, #8]
}
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	372c      	adds	r7, #44	@ 0x2c
 8003368:	46bd      	mov	sp, r7
 800336a:	bd90      	pop	{r4, r7, pc}
 800336c:	2000082c 	.word	0x2000082c

08003370 <MS5607_Init>:
/** Reset and prepare for general usage.
 * This will reset the device and perform the PROM reading to find the conversion values and if
 * the communication is working.
 */
MS5607StateTypeDef MS5607_Init(SPI_HandleTypeDef *spi_handle, GPIO_TypeDef *chip_select_port, uint16_t chip_select_gpio_pin)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	4613      	mov	r3, r2
 800337c:	80fb      	strh	r3, [r7, #6]
  hspi = spi_handle;
 800337e:	4a16      	ldr	r2, [pc, #88]	@ (80033d8 <MS5607_Init+0x68>)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6013      	str	r3, [r2, #0]
  ChipSelect_GPIO_Port = chip_select_port;
 8003384:	4a15      	ldr	r2, [pc, #84]	@ (80033dc <MS5607_Init+0x6c>)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	6013      	str	r3, [r2, #0]
  ChipSelect_Pin = chip_select_gpio_pin;
 800338a:	4a15      	ldr	r2, [pc, #84]	@ (80033e0 <MS5607_Init+0x70>)
 800338c:	88fb      	ldrh	r3, [r7, #6]
 800338e:	8013      	strh	r3, [r2, #0]

  enableCSB();
 8003390:	f000 fc0a 	bl	8003ba8 <enableCSB>
  SPITransmitData = RESET_COMMAND;
 8003394:	4b13      	ldr	r3, [pc, #76]	@ (80033e4 <MS5607_Init+0x74>)
 8003396:	221e      	movs	r2, #30
 8003398:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 800339a:	4b0f      	ldr	r3, [pc, #60]	@ (80033d8 <MS5607_Init+0x68>)
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	230a      	movs	r3, #10
 80033a0:	2201      	movs	r2, #1
 80033a2:	4910      	ldr	r1, [pc, #64]	@ (80033e4 <MS5607_Init+0x74>)
 80033a4:	f005 fe26 	bl	8008ff4 <HAL_SPI_Transmit>
  HAL_Delay(3);
 80033a8:	2003      	movs	r0, #3
 80033aa:	f000 fc53 	bl	8003c54 <HAL_Delay>
  disableCSB();
 80033ae:	f000 fc0b 	bl	8003bc8 <disableCSB>

  MS5607PromRead(&promData);
 80033b2:	480d      	ldr	r0, [pc, #52]	@ (80033e8 <MS5607_Init+0x78>)
 80033b4:	f000 f81a 	bl	80033ec <MS5607PromRead>

  if (promData.reserved == 0x00 || promData.reserved == 0xff)
 80033b8:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <MS5607_Init+0x78>)
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <MS5607_Init+0x58>
 80033c0:	4b09      	ldr	r3, [pc, #36]	@ (80033e8 <MS5607_Init+0x78>)
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	2bff      	cmp	r3, #255	@ 0xff
 80033c6:	d101      	bne.n	80033cc <MS5607_Init+0x5c>
    return MS5607_STATE_FAILED;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e000      	b.n	80033ce <MS5607_Init+0x5e>
  else
    return MS5607_STATE_READY;
 80033cc:	2301      	movs	r3, #1
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000838 	.word	0x20000838
 80033dc:	2000083c 	.word	0x2000083c
 80033e0:	20000840 	.word	0x20000840
 80033e4:	20000842 	.word	0x20000842
 80033e8:	20000848 	.word	0x20000848

080033ec <MS5607PromRead>:

/* Performs a reading on the devices PROM. */
void MS5607PromRead(struct promData *prom)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint8_t address;
  uint16_t *structPointer;

  /* As the PROM is made of 8 16bit addresses I used a pointer for accessing the data structure */
  structPointer = (uint16_t *)prom;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	613b      	str	r3, [r7, #16]

  for (address = 0; address < 8; address++)
 80033f8:	2300      	movs	r3, #0
 80033fa:	75fb      	strb	r3, [r7, #23]
 80033fc:	e021      	b.n	8003442 <MS5607PromRead+0x56>
  {
    SPITransmitData = PROM_READ(address);
 80033fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	b25b      	sxtb	r3, r3
 8003406:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 800340a:	b25b      	sxtb	r3, r3
 800340c:	b2da      	uxtb	r2, r3
 800340e:	4b1e      	ldr	r3, [pc, #120]	@ (8003488 <MS5607PromRead+0x9c>)
 8003410:	701a      	strb	r2, [r3, #0]
    enableCSB();
 8003412:	f000 fbc9 	bl	8003ba8 <enableCSB>
    HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003416:	4b1d      	ldr	r3, [pc, #116]	@ (800348c <MS5607PromRead+0xa0>)
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	230a      	movs	r3, #10
 800341c:	2201      	movs	r2, #1
 800341e:	491a      	ldr	r1, [pc, #104]	@ (8003488 <MS5607PromRead+0x9c>)
 8003420:	f005 fde8 	bl	8008ff4 <HAL_SPI_Transmit>
    /* Receive two bytes at once and stores it directly at the structure */
    HAL_SPI_Receive(hspi, structPointer, 2, 10);
 8003424:	4b19      	ldr	r3, [pc, #100]	@ (800348c <MS5607PromRead+0xa0>)
 8003426:	6818      	ldr	r0, [r3, #0]
 8003428:	230a      	movs	r3, #10
 800342a:	2202      	movs	r2, #2
 800342c:	6939      	ldr	r1, [r7, #16]
 800342e:	f005 ff57 	bl	80092e0 <HAL_SPI_Receive>
    disableCSB();
 8003432:	f000 fbc9 	bl	8003bc8 <disableCSB>
    structPointer++;
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	3302      	adds	r3, #2
 800343a:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 800343c:	7dfb      	ldrb	r3, [r7, #23]
 800343e:	3301      	adds	r3, #1
 8003440:	75fb      	strb	r3, [r7, #23]
 8003442:	7dfb      	ldrb	r3, [r7, #23]
 8003444:	2b07      	cmp	r3, #7
 8003446:	d9da      	bls.n	80033fe <MS5607PromRead+0x12>
  }

  /* Byte swap on 16bit integers*/
  structPointer = (uint16_t *)prom;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 800344c:	2300      	movs	r3, #0
 800344e:	75fb      	strb	r3, [r7, #23]
 8003450:	e012      	b.n	8003478 <MS5607PromRead+0x8c>
  {
    uint8_t *toSwap = (uint8_t *)structPointer;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	60fb      	str	r3, [r7, #12]
    uint8_t secondByte = toSwap[0];
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	72fb      	strb	r3, [r7, #11]
    toSwap[0] = toSwap[1];
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	785a      	ldrb	r2, [r3, #1]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	701a      	strb	r2, [r3, #0]
    toSwap[1] = secondByte;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3301      	adds	r3, #1
 8003468:	7afa      	ldrb	r2, [r7, #11]
 800346a:	701a      	strb	r2, [r3, #0]
    structPointer++;
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	3302      	adds	r3, #2
 8003470:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 8003472:	7dfb      	ldrb	r3, [r7, #23]
 8003474:	3301      	adds	r3, #1
 8003476:	75fb      	strb	r3, [r7, #23]
 8003478:	7dfb      	ldrb	r3, [r7, #23]
 800347a:	2b07      	cmp	r3, #7
 800347c:	d9e9      	bls.n	8003452 <MS5607PromRead+0x66>
  }
}
 800347e:	bf00      	nop
 8003480:	bf00      	nop
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20000842 	.word	0x20000842
 800348c:	20000838 	.word	0x20000838

08003490 <MS5607UncompensatedRead>:

/* Performs a reading on the devices PROM. */
void MS5607UncompensatedRead(struct MS5607UncompensatedValues *uncompValues)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]

  /*Sensor reply data buffer*/
  uint8_t reply[3];

  enableCSB();
 8003498:	f000 fb86 	bl	8003ba8 <enableCSB>
  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D1_COMMAND | Pressure_OSR;
 800349c:	4b54      	ldr	r3, [pc, #336]	@ (80035f0 <MS5607UncompensatedRead+0x160>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	4b53      	ldr	r3, [pc, #332]	@ (80035f4 <MS5607UncompensatedRead+0x164>)
 80034a8:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 80034aa:	4b53      	ldr	r3, [pc, #332]	@ (80035f8 <MS5607UncompensatedRead+0x168>)
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	230a      	movs	r3, #10
 80034b0:	2201      	movs	r2, #1
 80034b2:	4950      	ldr	r1, [pc, #320]	@ (80035f4 <MS5607UncompensatedRead+0x164>)
 80034b4:	f005 fd9e 	bl	8008ff4 <HAL_SPI_Transmit>

  if (Pressure_OSR == 0x00)
 80034b8:	4b4d      	ldr	r3, [pc, #308]	@ (80035f0 <MS5607UncompensatedRead+0x160>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d103      	bne.n	80034c8 <MS5607UncompensatedRead+0x38>
    HAL_Delay(1);
 80034c0:	2001      	movs	r0, #1
 80034c2:	f000 fbc7 	bl	8003c54 <HAL_Delay>
 80034c6:	e01a      	b.n	80034fe <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x02)
 80034c8:	4b49      	ldr	r3, [pc, #292]	@ (80035f0 <MS5607UncompensatedRead+0x160>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d103      	bne.n	80034d8 <MS5607UncompensatedRead+0x48>
    HAL_Delay(2);
 80034d0:	2002      	movs	r0, #2
 80034d2:	f000 fbbf 	bl	8003c54 <HAL_Delay>
 80034d6:	e012      	b.n	80034fe <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x04)
 80034d8:	4b45      	ldr	r3, [pc, #276]	@ (80035f0 <MS5607UncompensatedRead+0x160>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d103      	bne.n	80034e8 <MS5607UncompensatedRead+0x58>
    HAL_Delay(3);
 80034e0:	2003      	movs	r0, #3
 80034e2:	f000 fbb7 	bl	8003c54 <HAL_Delay>
 80034e6:	e00a      	b.n	80034fe <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x06)
 80034e8:	4b41      	ldr	r3, [pc, #260]	@ (80035f0 <MS5607UncompensatedRead+0x160>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b06      	cmp	r3, #6
 80034ee:	d103      	bne.n	80034f8 <MS5607UncompensatedRead+0x68>
    HAL_Delay(5);
 80034f0:	2005      	movs	r0, #5
 80034f2:	f000 fbaf 	bl	8003c54 <HAL_Delay>
 80034f6:	e002      	b.n	80034fe <MS5607UncompensatedRead+0x6e>
  else
    HAL_Delay(10);
 80034f8:	200a      	movs	r0, #10
 80034fa:	f000 fbab 	bl	8003c54 <HAL_Delay>

  disableCSB();
 80034fe:	f000 fb63 	bl	8003bc8 <disableCSB>

  /* Performs the reading of the 24 bits from the ADC */

  enableCSB();
 8003502:	f000 fb51 	bl	8003ba8 <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 8003506:	4b3b      	ldr	r3, [pc, #236]	@ (80035f4 <MS5607UncompensatedRead+0x164>)
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 800350c:	4b3a      	ldr	r3, [pc, #232]	@ (80035f8 <MS5607UncompensatedRead+0x168>)
 800350e:	6818      	ldr	r0, [r3, #0]
 8003510:	230a      	movs	r3, #10
 8003512:	2201      	movs	r2, #1
 8003514:	4937      	ldr	r1, [pc, #220]	@ (80035f4 <MS5607UncompensatedRead+0x164>)
 8003516:	f005 fd6d 	bl	8008ff4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, reply, 3, 10);
 800351a:	4b37      	ldr	r3, [pc, #220]	@ (80035f8 <MS5607UncompensatedRead+0x168>)
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	f107 010c 	add.w	r1, r7, #12
 8003522:	230a      	movs	r3, #10
 8003524:	2203      	movs	r2, #3
 8003526:	f005 fedb 	bl	80092e0 <HAL_SPI_Receive>

  disableCSB();
 800352a:	f000 fb4d 	bl	8003bc8 <disableCSB>

  /* Tranfer the 24bits read into a 32bit int */
  uncompValues->pressure = ((uint32_t)reply[0] << 16) | ((uint32_t)reply[1] << 8) | (uint32_t)reply[2];
 800352e:	7b3b      	ldrb	r3, [r7, #12]
 8003530:	041a      	lsls	r2, r3, #16
 8003532:	7b7b      	ldrb	r3, [r7, #13]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	4313      	orrs	r3, r2
 8003538:	7bba      	ldrb	r2, [r7, #14]
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	601a      	str	r2, [r3, #0]

  enableCSB();
 8003540:	f000 fb32 	bl	8003ba8 <enableCSB>

  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D2_COMMAND | Temperature_OSR;
 8003544:	4b2d      	ldr	r3, [pc, #180]	@ (80035fc <MS5607UncompensatedRead+0x16c>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800354c:	b2da      	uxtb	r2, r3
 800354e:	4b29      	ldr	r3, [pc, #164]	@ (80035f4 <MS5607UncompensatedRead+0x164>)
 8003550:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003552:	4b29      	ldr	r3, [pc, #164]	@ (80035f8 <MS5607UncompensatedRead+0x168>)
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	230a      	movs	r3, #10
 8003558:	2201      	movs	r2, #1
 800355a:	4926      	ldr	r1, [pc, #152]	@ (80035f4 <MS5607UncompensatedRead+0x164>)
 800355c:	f005 fd4a 	bl	8008ff4 <HAL_SPI_Transmit>

  if (Temperature_OSR == 0x00)
 8003560:	4b26      	ldr	r3, [pc, #152]	@ (80035fc <MS5607UncompensatedRead+0x16c>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d103      	bne.n	8003570 <MS5607UncompensatedRead+0xe0>
    HAL_Delay(1);
 8003568:	2001      	movs	r0, #1
 800356a:	f000 fb73 	bl	8003c54 <HAL_Delay>
 800356e:	e01a      	b.n	80035a6 <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x02)
 8003570:	4b22      	ldr	r3, [pc, #136]	@ (80035fc <MS5607UncompensatedRead+0x16c>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d103      	bne.n	8003580 <MS5607UncompensatedRead+0xf0>
    HAL_Delay(2);
 8003578:	2002      	movs	r0, #2
 800357a:	f000 fb6b 	bl	8003c54 <HAL_Delay>
 800357e:	e012      	b.n	80035a6 <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x04)
 8003580:	4b1e      	ldr	r3, [pc, #120]	@ (80035fc <MS5607UncompensatedRead+0x16c>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b04      	cmp	r3, #4
 8003586:	d103      	bne.n	8003590 <MS5607UncompensatedRead+0x100>
    HAL_Delay(3);
 8003588:	2003      	movs	r0, #3
 800358a:	f000 fb63 	bl	8003c54 <HAL_Delay>
 800358e:	e00a      	b.n	80035a6 <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x06)
 8003590:	4b1a      	ldr	r3, [pc, #104]	@ (80035fc <MS5607UncompensatedRead+0x16c>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b06      	cmp	r3, #6
 8003596:	d103      	bne.n	80035a0 <MS5607UncompensatedRead+0x110>
    HAL_Delay(5);
 8003598:	2005      	movs	r0, #5
 800359a:	f000 fb5b 	bl	8003c54 <HAL_Delay>
 800359e:	e002      	b.n	80035a6 <MS5607UncompensatedRead+0x116>
  else
    HAL_Delay(10);
 80035a0:	200a      	movs	r0, #10
 80035a2:	f000 fb57 	bl	8003c54 <HAL_Delay>

  disableCSB();
 80035a6:	f000 fb0f 	bl	8003bc8 <disableCSB>

  enableCSB();
 80035aa:	f000 fafd 	bl	8003ba8 <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 80035ae:	4b11      	ldr	r3, [pc, #68]	@ (80035f4 <MS5607UncompensatedRead+0x164>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 80035b4:	4b10      	ldr	r3, [pc, #64]	@ (80035f8 <MS5607UncompensatedRead+0x168>)
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	230a      	movs	r3, #10
 80035ba:	2201      	movs	r2, #1
 80035bc:	490d      	ldr	r1, [pc, #52]	@ (80035f4 <MS5607UncompensatedRead+0x164>)
 80035be:	f005 fd19 	bl	8008ff4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, reply, 3, 10);
 80035c2:	4b0d      	ldr	r3, [pc, #52]	@ (80035f8 <MS5607UncompensatedRead+0x168>)
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	f107 010c 	add.w	r1, r7, #12
 80035ca:	230a      	movs	r3, #10
 80035cc:	2203      	movs	r2, #3
 80035ce:	f005 fe87 	bl	80092e0 <HAL_SPI_Receive>

  disableCSB();
 80035d2:	f000 faf9 	bl	8003bc8 <disableCSB>

  /* Assemble the conversion command based on previously set OSR */
  uncompValues->temperature = ((uint32_t)reply[0] << 16) | ((uint32_t)reply[1] << 8) | (uint32_t)reply[2];
 80035d6:	7b3b      	ldrb	r3, [r7, #12]
 80035d8:	041a      	lsls	r2, r3, #16
 80035da:	7b7b      	ldrb	r3, [r7, #13]
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	4313      	orrs	r3, r2
 80035e0:	7bba      	ldrb	r2, [r7, #14]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	605a      	str	r2, [r3, #4]
}
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20000843 	.word	0x20000843
 80035f4:	20000842 	.word	0x20000842
 80035f8:	20000838 	.word	0x20000838
 80035fc:	20000844 	.word	0x20000844

08003600 <MS5607Convert>:

/* Performs the data conversion according to the MS5607 datasheet */
void MS5607Convert(struct MS5607UncompensatedValues *sample, struct MS5607IntReadings *value)
{
 8003600:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003604:	b0d7      	sub	sp, #348	@ 0x15c
 8003606:	af00      	add	r7, sp, #0
 8003608:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 800360c:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
  int32_t dT;
  int32_t TEMP;
  int64_t OFF;
  int64_t SENS;

  dT = sample->temperature - ((int32_t)(promData.tref << 8));
 8003610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	4bda      	ldr	r3, [pc, #872]	@ (8003980 <MS5607Convert+0x380>)
 8003618:	895b      	ldrh	r3, [r3, #10]
 800361a:	021b      	lsls	r3, r3, #8
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

  TEMP = 2000 + (((int64_t)dT * promData.tempsens) >> 23);
 8003622:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003626:	17da      	asrs	r2, r3, #31
 8003628:	469a      	mov	sl, r3
 800362a:	4693      	mov	fp, r2
 800362c:	4bd4      	ldr	r3, [pc, #848]	@ (8003980 <MS5607Convert+0x380>)
 800362e:	899b      	ldrh	r3, [r3, #12]
 8003630:	b29b      	uxth	r3, r3
 8003632:	2200      	movs	r2, #0
 8003634:	4698      	mov	r8, r3
 8003636:	4691      	mov	r9, r2
 8003638:	fb08 f20b 	mul.w	r2, r8, fp
 800363c:	fb0a f309 	mul.w	r3, sl, r9
 8003640:	4413      	add	r3, r2
 8003642:	fbaa 4508 	umull	r4, r5, sl, r8
 8003646:	442b      	add	r3, r5
 8003648:	461d      	mov	r5, r3
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	0de2      	lsrs	r2, r4, #23
 8003654:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 8003658:	15eb      	asrs	r3, r5, #23
 800365a:	4613      	mov	r3, r2
 800365c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003660:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

  OFF = ((int64_t)promData.off << 17) + (((int64_t)promData.tco * dT) >> 6);
 8003664:	4bc6      	ldr	r3, [pc, #792]	@ (8003980 <MS5607Convert+0x380>)
 8003666:	889b      	ldrh	r3, [r3, #4]
 8003668:	b29b      	uxth	r3, r3
 800366a:	2200      	movs	r2, #0
 800366c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003670:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003674:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003678:	460b      	mov	r3, r1
 800367a:	0bdb      	lsrs	r3, r3, #15
 800367c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003680:	460b      	mov	r3, r1
 8003682:	045b      	lsls	r3, r3, #17
 8003684:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003688:	4bbd      	ldr	r3, [pc, #756]	@ (8003980 <MS5607Convert+0x380>)
 800368a:	891b      	ldrh	r3, [r3, #8]
 800368c:	b29b      	uxth	r3, r3
 800368e:	2200      	movs	r2, #0
 8003690:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003694:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8003698:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800369c:	17da      	asrs	r2, r3, #31
 800369e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036a2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80036a6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80036aa:	462b      	mov	r3, r5
 80036ac:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80036b0:	4642      	mov	r2, r8
 80036b2:	fb02 f203 	mul.w	r2, r2, r3
 80036b6:	464b      	mov	r3, r9
 80036b8:	4621      	mov	r1, r4
 80036ba:	fb01 f303 	mul.w	r3, r1, r3
 80036be:	4413      	add	r3, r2
 80036c0:	4622      	mov	r2, r4
 80036c2:	4641      	mov	r1, r8
 80036c4:	fba2 1201 	umull	r1, r2, r2, r1
 80036c8:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 80036cc:	460a      	mov	r2, r1
 80036ce:	f8c7 2108 	str.w	r2, [r7, #264]	@ 0x108
 80036d2:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80036d6:	4413      	add	r3, r2
 80036d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 80036e8:	4621      	mov	r1, r4
 80036ea:	098a      	lsrs	r2, r1, #6
 80036ec:	4629      	mov	r1, r5
 80036ee:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 80036f2:	4629      	mov	r1, r5
 80036f4:	118b      	asrs	r3, r1, #6
 80036f6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80036fa:	4621      	mov	r1, r4
 80036fc:	1889      	adds	r1, r1, r2
 80036fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003700:	4629      	mov	r1, r5
 8003702:	eb43 0101 	adc.w	r1, r3, r1
 8003706:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8003708:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800370c:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
  SENS = ((int64_t)promData.sens << 16) + (((int64_t)promData.tcs * dT) >> 7);
 8003710:	4b9b      	ldr	r3, [pc, #620]	@ (8003980 <MS5607Convert+0x380>)
 8003712:	885b      	ldrh	r3, [r3, #2]
 8003714:	b29b      	uxth	r3, r3
 8003716:	2200      	movs	r2, #0
 8003718:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800371c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003720:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003724:	460b      	mov	r3, r1
 8003726:	0c1b      	lsrs	r3, r3, #16
 8003728:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800372c:	460b      	mov	r3, r1
 800372e:	041b      	lsls	r3, r3, #16
 8003730:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003734:	4b92      	ldr	r3, [pc, #584]	@ (8003980 <MS5607Convert+0x380>)
 8003736:	88db      	ldrh	r3, [r3, #6]
 8003738:	b29b      	uxth	r3, r3
 800373a:	2200      	movs	r2, #0
 800373c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003740:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003744:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003748:	17da      	asrs	r2, r3, #31
 800374a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800374e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003752:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8003756:	462b      	mov	r3, r5
 8003758:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800375c:	4642      	mov	r2, r8
 800375e:	fb02 f203 	mul.w	r2, r2, r3
 8003762:	464b      	mov	r3, r9
 8003764:	4621      	mov	r1, r4
 8003766:	fb01 f303 	mul.w	r3, r1, r3
 800376a:	4413      	add	r3, r2
 800376c:	4622      	mov	r2, r4
 800376e:	4641      	mov	r1, r8
 8003770:	fba2 1201 	umull	r1, r2, r2, r1
 8003774:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8003778:	460a      	mov	r2, r1
 800377a:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 800377e:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8003782:	4413      	add	r3, r2
 8003784:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8003794:	4621      	mov	r1, r4
 8003796:	09ca      	lsrs	r2, r1, #7
 8003798:	4629      	mov	r1, r5
 800379a:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 800379e:	4629      	mov	r1, r5
 80037a0:	11cb      	asrs	r3, r1, #7
 80037a2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80037a6:	4621      	mov	r1, r4
 80037a8:	1889      	adds	r1, r1, r2
 80037aa:	6339      	str	r1, [r7, #48]	@ 0x30
 80037ac:	4629      	mov	r1, r5
 80037ae:	eb43 0101 	adc.w	r1, r3, r1
 80037b2:	6379      	str	r1, [r7, #52]	@ 0x34
 80037b4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80037b8:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140

  /**/
  if (TEMP < 2000)
 80037bc:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80037c0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80037c4:	f280 8152 	bge.w	8003a6c <MS5607Convert+0x46c>
  {
    int32_t T2 = ((int64_t)dT * (int64_t)dT) >> 31;
 80037c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80037cc:	17da      	asrs	r2, r3, #31
 80037ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037d2:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80037d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80037da:	17da      	asrs	r2, r3, #31
 80037dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037e0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037e4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80037e8:	462b      	mov	r3, r5
 80037ea:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80037ee:	4642      	mov	r2, r8
 80037f0:	fb02 f203 	mul.w	r2, r2, r3
 80037f4:	464b      	mov	r3, r9
 80037f6:	4621      	mov	r1, r4
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	4622      	mov	r2, r4
 8003800:	4641      	mov	r1, r8
 8003802:	fba2 1201 	umull	r1, r2, r2, r1
 8003806:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800380a:	460a      	mov	r2, r1
 800380c:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8003810:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8003814:	4413      	add	r3, r2
 8003816:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8003826:	4621      	mov	r1, r4
 8003828:	0fca      	lsrs	r2, r1, #31
 800382a:	4629      	mov	r1, r5
 800382c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003830:	4629      	mov	r1, r5
 8003832:	17cb      	asrs	r3, r1, #31
 8003834:	4613      	mov	r3, r2
 8003836:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    int32_t TEMPM = TEMP - 2000;
 800383a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800383e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8003842:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    int64_t OFF2 = (61 * (int64_t)TEMPM * (int64_t)TEMPM) >> 4;
 8003846:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800384a:	17da      	asrs	r2, r3, #31
 800384c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003850:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003854:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003858:	17da      	asrs	r2, r3, #31
 800385a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800385e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003862:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8003866:	462b      	mov	r3, r5
 8003868:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800386c:	4642      	mov	r2, r8
 800386e:	fb02 f203 	mul.w	r2, r2, r3
 8003872:	464b      	mov	r3, r9
 8003874:	4621      	mov	r1, r4
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	4413      	add	r3, r2
 800387c:	4622      	mov	r2, r4
 800387e:	4641      	mov	r1, r8
 8003880:	fba2 1201 	umull	r1, r2, r2, r1
 8003884:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003888:	460a      	mov	r2, r1
 800388a:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800388e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8003892:	4413      	add	r3, r2
 8003894:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003898:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800389c:	4622      	mov	r2, r4
 800389e:	462b      	mov	r3, r5
 80038a0:	f04f 0000 	mov.w	r0, #0
 80038a4:	f04f 0100 	mov.w	r1, #0
 80038a8:	0119      	lsls	r1, r3, #4
 80038aa:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80038ae:	0110      	lsls	r0, r2, #4
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4621      	mov	r1, r4
 80038b6:	1a51      	subs	r1, r2, r1
 80038b8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80038ba:	4629      	mov	r1, r5
 80038bc:	eb63 0301 	sbc.w	r3, r3, r1
 80038c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80038ce:	4649      	mov	r1, r9
 80038d0:	008b      	lsls	r3, r1, #2
 80038d2:	4641      	mov	r1, r8
 80038d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038d8:	4641      	mov	r1, r8
 80038da:	008a      	lsls	r2, r1, #2
 80038dc:	4610      	mov	r0, r2
 80038de:	4619      	mov	r1, r3
 80038e0:	4603      	mov	r3, r0
 80038e2:	4622      	mov	r2, r4
 80038e4:	189b      	adds	r3, r3, r2
 80038e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038e8:	462b      	mov	r3, r5
 80038ea:	460a      	mov	r2, r1
 80038ec:	eb42 0303 	adc.w	r3, r2, r3
 80038f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80038fe:	4621      	mov	r1, r4
 8003900:	090a      	lsrs	r2, r1, #4
 8003902:	4629      	mov	r1, r5
 8003904:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8003908:	4629      	mov	r1, r5
 800390a:	110b      	asrs	r3, r1, #4
 800390c:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    int64_t SENS2 = 2 * (int64_t)TEMPM * (int64_t)TEMPM;
 8003910:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003914:	17da      	asrs	r2, r3, #31
 8003916:	673b      	str	r3, [r7, #112]	@ 0x70
 8003918:	677a      	str	r2, [r7, #116]	@ 0x74
 800391a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800391e:	17da      	asrs	r2, r3, #31
 8003920:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003922:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003924:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8003928:	462b      	mov	r3, r5
 800392a:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800392e:	4642      	mov	r2, r8
 8003930:	fb02 f203 	mul.w	r2, r2, r3
 8003934:	464b      	mov	r3, r9
 8003936:	4621      	mov	r1, r4
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	4413      	add	r3, r2
 800393e:	4622      	mov	r2, r4
 8003940:	4641      	mov	r1, r8
 8003942:	fba2 1201 	umull	r1, r2, r2, r1
 8003946:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800394a:	460a      	mov	r2, r1
 800394c:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8003950:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003954:	4413      	add	r3, r2
 8003956:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800395a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800395e:	460b      	mov	r3, r1
 8003960:	18db      	adds	r3, r3, r3
 8003962:	623b      	str	r3, [r7, #32]
 8003964:	4613      	mov	r3, r2
 8003966:	eb42 0303 	adc.w	r3, r2, r3
 800396a:	627b      	str	r3, [r7, #36]	@ 0x24
 800396c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003970:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    if (TEMP < -1500)
 8003974:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8003978:	4b02      	ldr	r3, [pc, #8]	@ (8003984 <MS5607Convert+0x384>)
 800397a:	429a      	cmp	r2, r3
 800397c:	da55      	bge.n	8003a2a <MS5607Convert+0x42a>
 800397e:	e003      	b.n	8003988 <MS5607Convert+0x388>
 8003980:	20000848 	.word	0x20000848
 8003984:	fffffa24 	.word	0xfffffa24
    {
      int32_t TEMPP = TEMP + 1500;
 8003988:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800398c:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8003990:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      int32_t TEMPP2 = TEMPP * TEMPP;
 8003994:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003998:	fb03 f303 	mul.w	r3, r3, r3
 800399c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
      OFF2 = OFF2 + (int64_t)15 * TEMPP2;
 80039a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039a4:	17da      	asrs	r2, r3, #31
 80039a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80039a8:	667a      	str	r2, [r7, #100]	@ 0x64
 80039aa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80039ae:	4622      	mov	r2, r4
 80039b0:	462b      	mov	r3, r5
 80039b2:	f04f 0000 	mov.w	r0, #0
 80039b6:	f04f 0100 	mov.w	r1, #0
 80039ba:	0119      	lsls	r1, r3, #4
 80039bc:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80039c0:	0110      	lsls	r0, r2, #4
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4621      	mov	r1, r4
 80039c8:	1a51      	subs	r1, r2, r1
 80039ca:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039cc:	4629      	mov	r1, r5
 80039ce:	eb63 0301 	sbc.w	r3, r3, r1
 80039d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039d4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80039d8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80039dc:	4621      	mov	r1, r4
 80039de:	1851      	adds	r1, r2, r1
 80039e0:	61b9      	str	r1, [r7, #24]
 80039e2:	4629      	mov	r1, r5
 80039e4:	eb43 0101 	adc.w	r1, r3, r1
 80039e8:	61f9      	str	r1, [r7, #28]
 80039ea:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80039ee:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
      SENS2 = SENS2 + (int64_t)8 * TEMPP2;
 80039f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039f6:	17da      	asrs	r2, r3, #31
 80039f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80039fa:	657a      	str	r2, [r7, #84]	@ 0x54
 80039fc:	f04f 0000 	mov.w	r0, #0
 8003a00:	f04f 0100 	mov.w	r1, #0
 8003a04:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8003a08:	462b      	mov	r3, r5
 8003a0a:	00d9      	lsls	r1, r3, #3
 8003a0c:	4623      	mov	r3, r4
 8003a0e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8003a12:	4623      	mov	r3, r4
 8003a14:	00d8      	lsls	r0, r3, #3
 8003a16:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8003a1a:	1814      	adds	r4, r2, r0
 8003a1c:	613c      	str	r4, [r7, #16]
 8003a1e:	414b      	adcs	r3, r1
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003a26:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    }
    TEMP -= T2;
 8003a2a:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8003a2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    OFF -= OFF2;
 8003a38:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8003a3c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8003a40:	1a84      	subs	r4, r0, r2
 8003a42:	60bc      	str	r4, [r7, #8]
 8003a44:	eb61 0303 	sbc.w	r3, r1, r3
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003a4e:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
    SENS -= SENS2;
 8003a52:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8003a56:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8003a5a:	1a84      	subs	r4, r0, r2
 8003a5c:	603c      	str	r4, [r7, #0]
 8003a5e:	eb61 0303 	sbc.w	r3, r1, r3
 8003a62:	607b      	str	r3, [r7, #4]
 8003a64:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003a68:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
  }

  value->pressure = ((((int64_t)sample->pressure * SENS) >> 21) - OFF) >> 15;
 8003a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2200      	movs	r2, #0
 8003a74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a76:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003a78:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003a7c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003a80:	462a      	mov	r2, r5
 8003a82:	fb02 f203 	mul.w	r2, r2, r3
 8003a86:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8003a96:	4621      	mov	r1, r4
 8003a98:	fba2 1201 	umull	r1, r2, r2, r1
 8003a9c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8003aa0:	460a      	mov	r2, r1
 8003aa2:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8003aa6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003aaa:	4413      	add	r3, r2
 8003aac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8003abc:	4621      	mov	r1, r4
 8003abe:	0d4a      	lsrs	r2, r1, #21
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	154b      	asrs	r3, r1, #21
 8003aca:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8003ace:	1a14      	subs	r4, r2, r0
 8003ad0:	643c      	str	r4, [r7, #64]	@ 0x40
 8003ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ad6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	0bca      	lsrs	r2, r1, #15
 8003ae8:	4629      	mov	r1, r5
 8003aea:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8003aee:	4629      	mov	r1, r5
 8003af0:	13cb      	asrs	r3, r1, #15
 8003af2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003af6:	601a      	str	r2, [r3, #0]
  value->temperature = TEMP;
 8003af8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003afc:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8003b00:	605a      	str	r2, [r3, #4]
}
 8003b02:	bf00      	nop
 8003b04:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003b0e:	4770      	bx	lr

08003b10 <MS5607Update>:

/* Performs the sensor reading updating the data structures */
void MS5607Update(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  MS5607UncompensatedRead(&uncompValues);
 8003b14:	4804      	ldr	r0, [pc, #16]	@ (8003b28 <MS5607Update+0x18>)
 8003b16:	f7ff fcbb 	bl	8003490 <MS5607UncompensatedRead>
  MS5607Convert(&uncompValues, &readings);
 8003b1a:	4904      	ldr	r1, [pc, #16]	@ (8003b2c <MS5607Update+0x1c>)
 8003b1c:	4802      	ldr	r0, [pc, #8]	@ (8003b28 <MS5607Update+0x18>)
 8003b1e:	f7ff fd6f 	bl	8003600 <MS5607Convert>
}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000858 	.word	0x20000858
 8003b2c:	20000860 	.word	0x20000860

08003b30 <MS5607ReadValues>:

MS5607Readings MS5607ReadValues(void)
{
 8003b30:	b5b0      	push	{r4, r5, r7, lr}
 8003b32:	b08c      	sub	sp, #48	@ 0x30
 8003b34:	af00      	add	r7, sp, #0
  MS5607Update();
 8003b36:	f7ff ffeb 	bl	8003b10 <MS5607Update>
  return (MS5607Readings){.pressure_kPa = readings.pressure / 1000.0, .temperature_C = readings.temperature / 100.0};
 8003b3a:	4b18      	ldr	r3, [pc, #96]	@ (8003b9c <MS5607ReadValues+0x6c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fc fd18 	bl	8000574 <__aeabi_i2d>
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	4b15      	ldr	r3, [pc, #84]	@ (8003ba0 <MS5607ReadValues+0x70>)
 8003b4a:	f7fc fea7 	bl	800089c <__aeabi_ddiv>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4614      	mov	r4, r2
 8003b54:	461d      	mov	r5, r3
 8003b56:	4b11      	ldr	r3, [pc, #68]	@ (8003b9c <MS5607ReadValues+0x6c>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fc fd0a 	bl	8000574 <__aeabi_i2d>
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba4 <MS5607ReadValues+0x74>)
 8003b66:	f7fc fe99 	bl	800089c <__aeabi_ddiv>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	e9c7 4508 	strd	r4, r5, [r7, #32]
 8003b72:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8003b76:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003b7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b7e:	ec41 0b16 	vmov	d6, r0, r1
 8003b82:	ec43 2b17 	vmov	d7, r2, r3
}
 8003b86:	eeb0 0a46 	vmov.f32	s0, s12
 8003b8a:	eef0 0a66 	vmov.f32	s1, s13
 8003b8e:	eeb0 1a47 	vmov.f32	s2, s14
 8003b92:	eef0 1a67 	vmov.f32	s3, s15
 8003b96:	3730      	adds	r7, #48	@ 0x30
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b9c:	20000860 	.word	0x20000860
 8003ba0:	408f4000 	.word	0x408f4000
 8003ba4:	40590000 	.word	0x40590000

08003ba8 <enableCSB>:
  return readings.pressure / 1000.0;
}

/* Sets the CS pin */
void enableCSB(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_RESET);
 8003bac:	4b04      	ldr	r3, [pc, #16]	@ (8003bc0 <enableCSB+0x18>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a04      	ldr	r2, [pc, #16]	@ (8003bc4 <enableCSB+0x1c>)
 8003bb2:	8811      	ldrh	r1, [r2, #0]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f001 ff22 	bl	8005a00 <HAL_GPIO_WritePin>
}
 8003bbc:	bf00      	nop
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	2000083c 	.word	0x2000083c
 8003bc4:	20000840 	.word	0x20000840

08003bc8 <disableCSB>:

/* Sets the CS pin */
void disableCSB(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_SET);
 8003bcc:	4b04      	ldr	r3, [pc, #16]	@ (8003be0 <disableCSB+0x18>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a04      	ldr	r2, [pc, #16]	@ (8003be4 <disableCSB+0x1c>)
 8003bd2:	8811      	ldrh	r1, [r2, #0]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f001 ff12 	bl	8005a00 <HAL_GPIO_WritePin>
}
 8003bdc:	bf00      	nop
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	2000083c 	.word	0x2000083c
 8003be4:	20000840 	.word	0x20000840

08003be8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bf2:	2003      	movs	r0, #3
 8003bf4:	f001 fa11 	bl	800501a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bf8:	200f      	movs	r0, #15
 8003bfa:	f7fe fde7 	bl	80027cc <HAL_InitTick>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	71fb      	strb	r3, [r7, #7]
 8003c08:	e001      	b.n	8003c0e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c0a:	f7fe f981 	bl	8001f10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c0e:	79fb      	ldrb	r3, [r7, #7]

}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c1c:	4b05      	ldr	r3, [pc, #20]	@ (8003c34 <HAL_IncTick+0x1c>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b05      	ldr	r3, [pc, #20]	@ (8003c38 <HAL_IncTick+0x20>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4413      	add	r3, r2
 8003c26:	4a03      	ldr	r2, [pc, #12]	@ (8003c34 <HAL_IncTick+0x1c>)
 8003c28:	6013      	str	r3, [r2, #0]
}
 8003c2a:	bf00      	nop
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	20000868 	.word	0x20000868
 8003c38:	20000008 	.word	0x20000008

08003c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c40:	4b03      	ldr	r3, [pc, #12]	@ (8003c50 <HAL_GetTick+0x14>)
 8003c42:	681b      	ldr	r3, [r3, #0]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000868 	.word	0x20000868

08003c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c5c:	f7ff ffee 	bl	8003c3c <HAL_GetTick>
 8003c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d004      	beq.n	8003c78 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c6e:	4b09      	ldr	r3, [pc, #36]	@ (8003c94 <HAL_Delay+0x40>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4413      	add	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c78:	bf00      	nop
 8003c7a:	f7ff ffdf 	bl	8003c3c <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d8f7      	bhi.n	8003c7a <HAL_Delay+0x26>
  {
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20000008 	.word	0x20000008

08003c98 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8003ca0:	4b06      	ldr	r3, [pc, #24]	@ (8003cbc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f023 0202 	bic.w	r2, r3, #2
 8003ca8:	4904      	ldr	r1, [pc, #16]	@ (8003cbc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	40010030 	.word	0x40010030

08003cc0 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8003cc4:	4b05      	ldr	r3, [pc, #20]	@ (8003cdc <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a04      	ldr	r2, [pc, #16]	@ (8003cdc <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	6013      	str	r3, [r2, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40010030 	.word	0x40010030

08003ce0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	609a      	str	r2, [r3, #8]
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	3360      	adds	r3, #96	@ 0x60
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4b08      	ldr	r3, [pc, #32]	@ (8003d8c <LL_ADC_SetOffset+0x44>)
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003d80:	bf00      	nop
 8003d82:	371c      	adds	r7, #28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	03fff000 	.word	0x03fff000

08003d90 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3360      	adds	r3, #96	@ 0x60
 8003d9e:	461a      	mov	r2, r3
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3360      	adds	r3, #96	@ 0x60
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	431a      	orrs	r2, r3
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003de6:	bf00      	nop
 8003de8:	371c      	adds	r7, #28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b087      	sub	sp, #28
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3360      	adds	r3, #96	@ 0x60
 8003e02:	461a      	mov	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003e1c:	bf00      	nop
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3360      	adds	r3, #96	@ 0x60
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003e52:	bf00      	nop
 8003e54:	371c      	adds	r7, #28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	615a      	str	r2, [r3, #20]
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	3330      	adds	r3, #48	@ 0x30
 8003e94:	461a      	mov	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	0a1b      	lsrs	r3, r3, #8
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	f003 030c 	and.w	r3, r3, #12
 8003ea0:	4413      	add	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f003 031f 	and.w	r3, r3, #31
 8003eae:	211f      	movs	r1, #31
 8003eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	401a      	ands	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	0e9b      	lsrs	r3, r3, #26
 8003ebc:	f003 011f 	and.w	r1, r3, #31
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f003 031f 	and.w	r3, r3, #31
 8003ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ed0:	bf00      	nop
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	3314      	adds	r3, #20
 8003eec:	461a      	mov	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	0e5b      	lsrs	r3, r3, #25
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	4413      	add	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	0d1b      	lsrs	r3, r3, #20
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	2107      	movs	r1, #7
 8003f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	401a      	ands	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	0d1b      	lsrs	r3, r3, #20
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f20:	431a      	orrs	r2, r3
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003f26:	bf00      	nop
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
	...

08003f34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	401a      	ands	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f003 0318 	and.w	r3, r3, #24
 8003f56:	4908      	ldr	r1, [pc, #32]	@ (8003f78 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003f58:	40d9      	lsrs	r1, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	400b      	ands	r3, r1
 8003f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f62:	431a      	orrs	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	0007ffff 	.word	0x0007ffff

08003f7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003f8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6093      	str	r3, [r2, #8]
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fb4:	d101      	bne.n	8003fba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003fd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003fdc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004000:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004004:	d101      	bne.n	800400a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <LL_ADC_IsEnabled+0x18>
 800402c:	2301      	movs	r3, #1
 800402e:	e000      	b.n	8004032 <LL_ADC_IsEnabled+0x1a>
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b04      	cmp	r3, #4
 8004050:	d101      	bne.n	8004056 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b08      	cmp	r3, #8
 8004076:	d101      	bne.n	800407c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004078:	2301      	movs	r3, #1
 800407a:	e000      	b.n	800407e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
	...

0800408c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b089      	sub	sp, #36	@ 0x24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004098:	2300      	movs	r3, #0
 800409a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e19b      	b.n	80043de <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d109      	bne.n	80040c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7fd ff63 	bl	8001f80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff ff67 	bl	8003fa0 <LL_ADC_IsDeepPowerDownEnabled>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d004      	beq.n	80040e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff ff4d 	bl	8003f7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff ff82 	bl	8003ff0 <LL_ADC_IsInternalRegulatorEnabled>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d115      	bne.n	800411e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff ff66 	bl	8003fc8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040fc:	4b97      	ldr	r3, [pc, #604]	@ (800435c <HAL_ADC_Init+0x2d0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	099b      	lsrs	r3, r3, #6
 8004102:	4a97      	ldr	r2, [pc, #604]	@ (8004360 <HAL_ADC_Init+0x2d4>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	099b      	lsrs	r3, r3, #6
 800410a:	3301      	adds	r3, #1
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004110:	e002      	b.n	8004118 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	3b01      	subs	r3, #1
 8004116:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f9      	bne.n	8004112 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff ff64 	bl	8003ff0 <LL_ADC_IsInternalRegulatorEnabled>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10d      	bne.n	800414a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004132:	f043 0210 	orr.w	r2, r3, #16
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800413e:	f043 0201 	orr.w	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff ff75 	bl	800403e <LL_ADC_REG_IsConversionOngoing>
 8004154:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800415a:	f003 0310 	and.w	r3, r3, #16
 800415e:	2b00      	cmp	r3, #0
 8004160:	f040 8134 	bne.w	80043cc <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f040 8130 	bne.w	80043cc <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004170:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004174:	f043 0202 	orr.w	r2, r3, #2
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff ff49 	bl	8004018 <LL_ADC_IsEnabled>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d137      	bne.n	80041fc <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004194:	d004      	beq.n	80041a0 <HAL_ADC_Init+0x114>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a72      	ldr	r2, [pc, #456]	@ (8004364 <HAL_ADC_Init+0x2d8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10f      	bne.n	80041c0 <HAL_ADC_Init+0x134>
 80041a0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80041a4:	f7ff ff38 	bl	8004018 <LL_ADC_IsEnabled>
 80041a8:	4604      	mov	r4, r0
 80041aa:	486e      	ldr	r0, [pc, #440]	@ (8004364 <HAL_ADC_Init+0x2d8>)
 80041ac:	f7ff ff34 	bl	8004018 <LL_ADC_IsEnabled>
 80041b0:	4603      	mov	r3, r0
 80041b2:	4323      	orrs	r3, r4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	e008      	b.n	80041d2 <HAL_ADC_Init+0x146>
 80041c0:	4869      	ldr	r0, [pc, #420]	@ (8004368 <HAL_ADC_Init+0x2dc>)
 80041c2:	f7ff ff29 	bl	8004018 <LL_ADC_IsEnabled>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	bf0c      	ite	eq
 80041cc:	2301      	moveq	r3, #1
 80041ce:	2300      	movne	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d012      	beq.n	80041fc <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041de:	d004      	beq.n	80041ea <HAL_ADC_Init+0x15e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a5f      	ldr	r2, [pc, #380]	@ (8004364 <HAL_ADC_Init+0x2d8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d101      	bne.n	80041ee <HAL_ADC_Init+0x162>
 80041ea:	4a60      	ldr	r2, [pc, #384]	@ (800436c <HAL_ADC_Init+0x2e0>)
 80041ec:	e000      	b.n	80041f0 <HAL_ADC_Init+0x164>
 80041ee:	4a60      	ldr	r2, [pc, #384]	@ (8004370 <HAL_ADC_Init+0x2e4>)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	4619      	mov	r1, r3
 80041f6:	4610      	mov	r0, r2
 80041f8:	f7ff fd72 	bl	8003ce0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	7f5b      	ldrb	r3, [r3, #29]
 8004200:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004206:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800420c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004212:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800421a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800421c:	4313      	orrs	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004226:	2b01      	cmp	r3, #1
 8004228:	d106      	bne.n	8004238 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422e:	3b01      	subs	r3, #1
 8004230:	045b      	lsls	r3, r3, #17
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4313      	orrs	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423c:	2b00      	cmp	r3, #0
 800423e:	d009      	beq.n	8004254 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004244:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	4313      	orrs	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	4b46      	ldr	r3, [pc, #280]	@ (8004374 <HAL_ADC_Init+0x2e8>)
 800425c:	4013      	ands	r3, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6812      	ldr	r2, [r2, #0]
 8004262:	69b9      	ldr	r1, [r7, #24]
 8004264:	430b      	orrs	r3, r1
 8004266:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff feee 	bl	8004064 <LL_ADC_INJ_IsConversionOngoing>
 8004288:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d17b      	bne.n	8004388 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d178      	bne.n	8004388 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800429a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80042a2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042b2:	f023 0302 	bic.w	r3, r3, #2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6812      	ldr	r2, [r2, #0]
 80042ba:	69b9      	ldr	r1, [r7, #24]
 80042bc:	430b      	orrs	r3, r1
 80042be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d017      	beq.n	80042f8 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691a      	ldr	r2, [r3, #16]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80042d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80042e0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80042e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6911      	ldr	r1, [r2, #16]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6812      	ldr	r2, [r2, #0]
 80042f0:	430b      	orrs	r3, r1
 80042f2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80042f6:	e013      	b.n	8004320 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004306:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004318:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800431c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004326:	2b01      	cmp	r3, #1
 8004328:	d126      	bne.n	8004378 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004334:	f023 0304 	bic.w	r3, r3, #4
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004340:	4311      	orrs	r1, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004346:	4311      	orrs	r1, r2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800434c:	430a      	orrs	r2, r1
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0201 	orr.w	r2, r2, #1
 8004358:	611a      	str	r2, [r3, #16]
 800435a:	e015      	b.n	8004388 <HAL_ADC_Init+0x2fc>
 800435c:	20000000 	.word	0x20000000
 8004360:	053e2d63 	.word	0x053e2d63
 8004364:	50000100 	.word	0x50000100
 8004368:	50000400 	.word	0x50000400
 800436c:	50000300 	.word	0x50000300
 8004370:	50000700 	.word	0x50000700
 8004374:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0201 	bic.w	r2, r2, #1
 8004386:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d10c      	bne.n	80043aa <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004396:	f023 010f 	bic.w	r1, r3, #15
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	1e5a      	subs	r2, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80043a8:	e007      	b.n	80043ba <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 020f 	bic.w	r2, r2, #15
 80043b8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043be:	f023 0303 	bic.w	r3, r3, #3
 80043c2:	f043 0201 	orr.w	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043ca:	e007      	b.n	80043dc <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d0:	f043 0210 	orr.w	r2, r3, #16
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80043dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3724      	adds	r7, #36	@ 0x24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd90      	pop	{r4, r7, pc}
 80043e6:	bf00      	nop

080043e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b0b6      	sub	sp, #216	@ 0xd8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004402:	2b01      	cmp	r3, #1
 8004404:	d102      	bne.n	800440c <HAL_ADC_ConfigChannel+0x24>
 8004406:	2302      	movs	r3, #2
 8004408:	f000 bc04 	b.w	8004c14 <HAL_ADC_ConfigChannel+0x82c>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fe10 	bl	800403e <LL_ADC_REG_IsConversionOngoing>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	f040 83e8 	bne.w	8004bf6 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	6859      	ldr	r1, [r3, #4]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	f7ff fd26 	bl	8003e84 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fdfe 	bl	800403e <LL_ADC_REG_IsConversionOngoing>
 8004442:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fe0a 	bl	8004064 <LL_ADC_INJ_IsConversionOngoing>
 8004450:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004454:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004458:	2b00      	cmp	r3, #0
 800445a:	f040 81d9 	bne.w	8004810 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800445e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004462:	2b00      	cmp	r3, #0
 8004464:	f040 81d4 	bne.w	8004810 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004470:	d10f      	bne.n	8004492 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2200      	movs	r2, #0
 800447c:	4619      	mov	r1, r3
 800447e:	f7ff fd2d 	bl	8003edc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff fce7 	bl	8003e5e <LL_ADC_SetSamplingTimeCommonConfig>
 8004490:	e00e      	b.n	80044b0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6819      	ldr	r1, [r3, #0]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	461a      	mov	r2, r3
 80044a0:	f7ff fd1c 	bl	8003edc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2100      	movs	r1, #0
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff fcd7 	bl	8003e5e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	08db      	lsrs	r3, r3, #3
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d022      	beq.n	8004518 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	6919      	ldr	r1, [r3, #16]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80044e2:	f7ff fc31 	bl	8003d48 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	6919      	ldr	r1, [r3, #16]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	461a      	mov	r2, r3
 80044f4:	f7ff fc7d 	bl	8003df2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004504:	2b01      	cmp	r3, #1
 8004506:	d102      	bne.n	800450e <HAL_ADC_ConfigChannel+0x126>
 8004508:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800450c:	e000      	b.n	8004510 <HAL_ADC_ConfigChannel+0x128>
 800450e:	2300      	movs	r3, #0
 8004510:	461a      	mov	r2, r3
 8004512:	f7ff fc89 	bl	8003e28 <LL_ADC_SetOffsetSaturation>
 8004516:	e17b      	b.n	8004810 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2100      	movs	r1, #0
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff fc36 	bl	8003d90 <LL_ADC_GetOffsetChannel>
 8004524:	4603      	mov	r3, r0
 8004526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10a      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x15c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2100      	movs	r1, #0
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff fc2b 	bl	8003d90 <LL_ADC_GetOffsetChannel>
 800453a:	4603      	mov	r3, r0
 800453c:	0e9b      	lsrs	r3, r3, #26
 800453e:	f003 021f 	and.w	r2, r3, #31
 8004542:	e01e      	b.n	8004582 <HAL_ADC_ConfigChannel+0x19a>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2100      	movs	r1, #0
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff fc20 	bl	8003d90 <LL_ADC_GetOffsetChannel>
 8004550:	4603      	mov	r3, r0
 8004552:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004556:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800455a:	fa93 f3a3 	rbit	r3, r3
 800455e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004562:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004566:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800456a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004572:	2320      	movs	r3, #32
 8004574:	e004      	b.n	8004580 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004576:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800457a:	fab3 f383 	clz	r3, r3
 800457e:	b2db      	uxtb	r3, r3
 8004580:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800458a:	2b00      	cmp	r3, #0
 800458c:	d105      	bne.n	800459a <HAL_ADC_ConfigChannel+0x1b2>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	0e9b      	lsrs	r3, r3, #26
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	e018      	b.n	80045cc <HAL_ADC_ConfigChannel+0x1e4>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80045a6:	fa93 f3a3 	rbit	r3, r3
 80045aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80045ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80045b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80045be:	2320      	movs	r3, #32
 80045c0:	e004      	b.n	80045cc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80045c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80045c6:	fab3 f383 	clz	r3, r3
 80045ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d106      	bne.n	80045de <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2200      	movs	r2, #0
 80045d6:	2100      	movs	r1, #0
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff fbef 	bl	8003dbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2101      	movs	r1, #1
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff fbd3 	bl	8003d90 <LL_ADC_GetOffsetChannel>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10a      	bne.n	800460a <HAL_ADC_ConfigChannel+0x222>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2101      	movs	r1, #1
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fbc8 	bl	8003d90 <LL_ADC_GetOffsetChannel>
 8004600:	4603      	mov	r3, r0
 8004602:	0e9b      	lsrs	r3, r3, #26
 8004604:	f003 021f 	and.w	r2, r3, #31
 8004608:	e01e      	b.n	8004648 <HAL_ADC_ConfigChannel+0x260>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2101      	movs	r1, #1
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff fbbd 	bl	8003d90 <LL_ADC_GetOffsetChannel>
 8004616:	4603      	mov	r3, r0
 8004618:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004620:	fa93 f3a3 	rbit	r3, r3
 8004624:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004628:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800462c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004630:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004638:	2320      	movs	r3, #32
 800463a:	e004      	b.n	8004646 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800463c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004640:	fab3 f383 	clz	r3, r3
 8004644:	b2db      	uxtb	r3, r3
 8004646:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004650:	2b00      	cmp	r3, #0
 8004652:	d105      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x278>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	0e9b      	lsrs	r3, r3, #26
 800465a:	f003 031f 	and.w	r3, r3, #31
 800465e:	e018      	b.n	8004692 <HAL_ADC_ConfigChannel+0x2aa>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004668:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800466c:	fa93 f3a3 	rbit	r3, r3
 8004670:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004674:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004678:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800467c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004684:	2320      	movs	r3, #32
 8004686:	e004      	b.n	8004692 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004688:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800468c:	fab3 f383 	clz	r3, r3
 8004690:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004692:	429a      	cmp	r2, r3
 8004694:	d106      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2200      	movs	r2, #0
 800469c:	2101      	movs	r1, #1
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff fb8c 	bl	8003dbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2102      	movs	r1, #2
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff fb70 	bl	8003d90 <LL_ADC_GetOffsetChannel>
 80046b0:	4603      	mov	r3, r0
 80046b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x2e8>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2102      	movs	r1, #2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff fb65 	bl	8003d90 <LL_ADC_GetOffsetChannel>
 80046c6:	4603      	mov	r3, r0
 80046c8:	0e9b      	lsrs	r3, r3, #26
 80046ca:	f003 021f 	and.w	r2, r3, #31
 80046ce:	e01e      	b.n	800470e <HAL_ADC_ConfigChannel+0x326>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2102      	movs	r1, #2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff fb5a 	bl	8003d90 <LL_ADC_GetOffsetChannel>
 80046dc:	4603      	mov	r3, r0
 80046de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046e6:	fa93 f3a3 	rbit	r3, r3
 80046ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80046ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80046f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80046fe:	2320      	movs	r3, #32
 8004700:	e004      	b.n	800470c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004702:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004706:	fab3 f383 	clz	r3, r3
 800470a:	b2db      	uxtb	r3, r3
 800470c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004716:	2b00      	cmp	r3, #0
 8004718:	d105      	bne.n	8004726 <HAL_ADC_ConfigChannel+0x33e>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	0e9b      	lsrs	r3, r3, #26
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	e016      	b.n	8004754 <HAL_ADC_ConfigChannel+0x36c>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004732:	fa93 f3a3 	rbit	r3, r3
 8004736:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004738:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800473a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800473e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004746:	2320      	movs	r3, #32
 8004748:	e004      	b.n	8004754 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800474a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800474e:	fab3 f383 	clz	r3, r3
 8004752:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004754:	429a      	cmp	r2, r3
 8004756:	d106      	bne.n	8004766 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2200      	movs	r2, #0
 800475e:	2102      	movs	r1, #2
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff fb2b 	bl	8003dbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2103      	movs	r1, #3
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff fb0f 	bl	8003d90 <LL_ADC_GetOffsetChannel>
 8004772:	4603      	mov	r3, r0
 8004774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <HAL_ADC_ConfigChannel+0x3aa>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2103      	movs	r1, #3
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fb04 	bl	8003d90 <LL_ADC_GetOffsetChannel>
 8004788:	4603      	mov	r3, r0
 800478a:	0e9b      	lsrs	r3, r3, #26
 800478c:	f003 021f 	and.w	r2, r3, #31
 8004790:	e017      	b.n	80047c2 <HAL_ADC_ConfigChannel+0x3da>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2103      	movs	r1, #3
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff faf9 	bl	8003d90 <LL_ADC_GetOffsetChannel>
 800479e:	4603      	mov	r3, r0
 80047a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047a4:	fa93 f3a3 	rbit	r3, r3
 80047a8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80047aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047ac:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80047ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80047b4:	2320      	movs	r3, #32
 80047b6:	e003      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80047b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047ba:	fab3 f383 	clz	r3, r3
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d105      	bne.n	80047da <HAL_ADC_ConfigChannel+0x3f2>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	0e9b      	lsrs	r3, r3, #26
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	e011      	b.n	80047fe <HAL_ADC_ConfigChannel+0x416>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047e2:	fa93 f3a3 	rbit	r3, r3
 80047e6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80047e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80047ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80047f2:	2320      	movs	r3, #32
 80047f4:	e003      	b.n	80047fe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80047f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047f8:	fab3 f383 	clz	r3, r3
 80047fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047fe:	429a      	cmp	r2, r3
 8004800:	d106      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2200      	movs	r2, #0
 8004808:	2103      	movs	r1, #3
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff fad6 	bl	8003dbc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff fbff 	bl	8004018 <LL_ADC_IsEnabled>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	f040 813d 	bne.w	8004a9c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6819      	ldr	r1, [r3, #0]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	461a      	mov	r2, r3
 8004830:	f7ff fb80 	bl	8003f34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	4aa2      	ldr	r2, [pc, #648]	@ (8004ac4 <HAL_ADC_ConfigChannel+0x6dc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	f040 812e 	bne.w	8004a9c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10b      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x480>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	0e9b      	lsrs	r3, r3, #26
 8004856:	3301      	adds	r3, #1
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	2b09      	cmp	r3, #9
 800485e:	bf94      	ite	ls
 8004860:	2301      	movls	r3, #1
 8004862:	2300      	movhi	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	e019      	b.n	800489c <HAL_ADC_ConfigChannel+0x4b4>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004870:	fa93 f3a3 	rbit	r3, r3
 8004874:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004876:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004878:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800487a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004880:	2320      	movs	r3, #32
 8004882:	e003      	b.n	800488c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004884:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004886:	fab3 f383 	clz	r3, r3
 800488a:	b2db      	uxtb	r3, r3
 800488c:	3301      	adds	r3, #1
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	2b09      	cmp	r3, #9
 8004894:	bf94      	ite	ls
 8004896:	2301      	movls	r3, #1
 8004898:	2300      	movhi	r3, #0
 800489a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800489c:	2b00      	cmp	r3, #0
 800489e:	d079      	beq.n	8004994 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d107      	bne.n	80048bc <HAL_ADC_ConfigChannel+0x4d4>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	0e9b      	lsrs	r3, r3, #26
 80048b2:	3301      	adds	r3, #1
 80048b4:	069b      	lsls	r3, r3, #26
 80048b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048ba:	e015      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x500>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048c4:	fa93 f3a3 	rbit	r3, r3
 80048c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80048ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048cc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80048ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80048d4:	2320      	movs	r3, #32
 80048d6:	e003      	b.n	80048e0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80048d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048da:	fab3 f383 	clz	r3, r3
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	3301      	adds	r3, #1
 80048e2:	069b      	lsls	r3, r3, #26
 80048e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d109      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x520>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	0e9b      	lsrs	r3, r3, #26
 80048fa:	3301      	adds	r3, #1
 80048fc:	f003 031f 	and.w	r3, r3, #31
 8004900:	2101      	movs	r1, #1
 8004902:	fa01 f303 	lsl.w	r3, r1, r3
 8004906:	e017      	b.n	8004938 <HAL_ADC_ConfigChannel+0x550>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004910:	fa93 f3a3 	rbit	r3, r3
 8004914:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004918:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800491a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004920:	2320      	movs	r3, #32
 8004922:	e003      	b.n	800492c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004926:	fab3 f383 	clz	r3, r3
 800492a:	b2db      	uxtb	r3, r3
 800492c:	3301      	adds	r3, #1
 800492e:	f003 031f 	and.w	r3, r3, #31
 8004932:	2101      	movs	r1, #1
 8004934:	fa01 f303 	lsl.w	r3, r1, r3
 8004938:	ea42 0103 	orr.w	r1, r2, r3
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <HAL_ADC_ConfigChannel+0x576>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	0e9b      	lsrs	r3, r3, #26
 800494e:	3301      	adds	r3, #1
 8004950:	f003 021f 	and.w	r2, r3, #31
 8004954:	4613      	mov	r3, r2
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	4413      	add	r3, r2
 800495a:	051b      	lsls	r3, r3, #20
 800495c:	e018      	b.n	8004990 <HAL_ADC_ConfigChannel+0x5a8>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004966:	fa93 f3a3 	rbit	r3, r3
 800496a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800496c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800496e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004976:	2320      	movs	r3, #32
 8004978:	e003      	b.n	8004982 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800497a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800497c:	fab3 f383 	clz	r3, r3
 8004980:	b2db      	uxtb	r3, r3
 8004982:	3301      	adds	r3, #1
 8004984:	f003 021f 	and.w	r2, r3, #31
 8004988:	4613      	mov	r3, r2
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	4413      	add	r3, r2
 800498e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004990:	430b      	orrs	r3, r1
 8004992:	e07e      	b.n	8004a92 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800499c:	2b00      	cmp	r3, #0
 800499e:	d107      	bne.n	80049b0 <HAL_ADC_ConfigChannel+0x5c8>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	0e9b      	lsrs	r3, r3, #26
 80049a6:	3301      	adds	r3, #1
 80049a8:	069b      	lsls	r3, r3, #26
 80049aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049ae:	e015      	b.n	80049dc <HAL_ADC_ConfigChannel+0x5f4>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b8:	fa93 f3a3 	rbit	r3, r3
 80049bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80049be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80049c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80049c8:	2320      	movs	r3, #32
 80049ca:	e003      	b.n	80049d4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80049cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ce:	fab3 f383 	clz	r3, r3
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	3301      	adds	r3, #1
 80049d6:	069b      	lsls	r3, r3, #26
 80049d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d109      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x614>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	0e9b      	lsrs	r3, r3, #26
 80049ee:	3301      	adds	r3, #1
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	2101      	movs	r1, #1
 80049f6:	fa01 f303 	lsl.w	r3, r1, r3
 80049fa:	e017      	b.n	8004a2c <HAL_ADC_ConfigChannel+0x644>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	fa93 f3a3 	rbit	r3, r3
 8004a08:	61fb      	str	r3, [r7, #28]
  return result;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004a14:	2320      	movs	r3, #32
 8004a16:	e003      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1a:	fab3 f383 	clz	r3, r3
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	3301      	adds	r3, #1
 8004a22:	f003 031f 	and.w	r3, r3, #31
 8004a26:	2101      	movs	r1, #1
 8004a28:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2c:	ea42 0103 	orr.w	r1, r2, r3
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10d      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x670>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	0e9b      	lsrs	r3, r3, #26
 8004a42:	3301      	adds	r3, #1
 8004a44:	f003 021f 	and.w	r2, r3, #31
 8004a48:	4613      	mov	r3, r2
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3b1e      	subs	r3, #30
 8004a50:	051b      	lsls	r3, r3, #20
 8004a52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a56:	e01b      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x6a8>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	fa93 f3a3 	rbit	r3, r3
 8004a64:	613b      	str	r3, [r7, #16]
  return result;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004a70:	2320      	movs	r3, #32
 8004a72:	e003      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	fab3 f383 	clz	r3, r3
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	f003 021f 	and.w	r2, r3, #31
 8004a82:	4613      	mov	r3, r2
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	4413      	add	r3, r2
 8004a88:	3b1e      	subs	r3, #30
 8004a8a:	051b      	lsls	r3, r3, #20
 8004a8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a90:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a96:	4619      	mov	r1, r3
 8004a98:	f7ff fa20 	bl	8003edc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	4b09      	ldr	r3, [pc, #36]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x6e0>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 80af 	beq.w	8004c08 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ab2:	d004      	beq.n	8004abe <HAL_ADC_ConfigChannel+0x6d6>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a04      	ldr	r2, [pc, #16]	@ (8004acc <HAL_ADC_ConfigChannel+0x6e4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d10a      	bne.n	8004ad4 <HAL_ADC_ConfigChannel+0x6ec>
 8004abe:	4b04      	ldr	r3, [pc, #16]	@ (8004ad0 <HAL_ADC_ConfigChannel+0x6e8>)
 8004ac0:	e009      	b.n	8004ad6 <HAL_ADC_ConfigChannel+0x6ee>
 8004ac2:	bf00      	nop
 8004ac4:	407f0000 	.word	0x407f0000
 8004ac8:	80080000 	.word	0x80080000
 8004acc:	50000100 	.word	0x50000100
 8004ad0:	50000300 	.word	0x50000300
 8004ad4:	4b51      	ldr	r3, [pc, #324]	@ (8004c1c <HAL_ADC_ConfigChannel+0x834>)
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7ff f928 	bl	8003d2c <LL_ADC_GetCommonPathInternalCh>
 8004adc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a4e      	ldr	r2, [pc, #312]	@ (8004c20 <HAL_ADC_ConfigChannel+0x838>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d004      	beq.n	8004af4 <HAL_ADC_ConfigChannel+0x70c>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a4d      	ldr	r2, [pc, #308]	@ (8004c24 <HAL_ADC_ConfigChannel+0x83c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d134      	bne.n	8004b5e <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004af4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004af8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d12e      	bne.n	8004b5e <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b08:	d17e      	bne.n	8004c08 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b12:	d004      	beq.n	8004b1e <HAL_ADC_ConfigChannel+0x736>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a43      	ldr	r2, [pc, #268]	@ (8004c28 <HAL_ADC_ConfigChannel+0x840>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d101      	bne.n	8004b22 <HAL_ADC_ConfigChannel+0x73a>
 8004b1e:	4a43      	ldr	r2, [pc, #268]	@ (8004c2c <HAL_ADC_ConfigChannel+0x844>)
 8004b20:	e000      	b.n	8004b24 <HAL_ADC_ConfigChannel+0x73c>
 8004b22:	4a3e      	ldr	r2, [pc, #248]	@ (8004c1c <HAL_ADC_ConfigChannel+0x834>)
 8004b24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	f7ff f8e9 	bl	8003d06 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b34:	4b3e      	ldr	r3, [pc, #248]	@ (8004c30 <HAL_ADC_ConfigChannel+0x848>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	099b      	lsrs	r3, r3, #6
 8004b3a:	4a3e      	ldr	r2, [pc, #248]	@ (8004c34 <HAL_ADC_ConfigChannel+0x84c>)
 8004b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b40:	099b      	lsrs	r3, r3, #6
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	4613      	mov	r3, r2
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004b4e:	e002      	b.n	8004b56 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1f9      	bne.n	8004b50 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b5c:	e054      	b.n	8004c08 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a35      	ldr	r2, [pc, #212]	@ (8004c38 <HAL_ADC_ConfigChannel+0x850>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d120      	bne.n	8004baa <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d11a      	bne.n	8004baa <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b7c:	d144      	bne.n	8004c08 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b86:	d004      	beq.n	8004b92 <HAL_ADC_ConfigChannel+0x7aa>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a26      	ldr	r2, [pc, #152]	@ (8004c28 <HAL_ADC_ConfigChannel+0x840>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d101      	bne.n	8004b96 <HAL_ADC_ConfigChannel+0x7ae>
 8004b92:	4a26      	ldr	r2, [pc, #152]	@ (8004c2c <HAL_ADC_ConfigChannel+0x844>)
 8004b94:	e000      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x7b0>
 8004b96:	4a21      	ldr	r2, [pc, #132]	@ (8004c1c <HAL_ADC_ConfigChannel+0x834>)
 8004b98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	f7ff f8af 	bl	8003d06 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ba8:	e02e      	b.n	8004c08 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a23      	ldr	r2, [pc, #140]	@ (8004c3c <HAL_ADC_ConfigChannel+0x854>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d129      	bne.n	8004c08 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004bb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004bb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d123      	bne.n	8004c08 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a18      	ldr	r2, [pc, #96]	@ (8004c28 <HAL_ADC_ConfigChannel+0x840>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01e      	beq.n	8004c08 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bd2:	d004      	beq.n	8004bde <HAL_ADC_ConfigChannel+0x7f6>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a13      	ldr	r2, [pc, #76]	@ (8004c28 <HAL_ADC_ConfigChannel+0x840>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d101      	bne.n	8004be2 <HAL_ADC_ConfigChannel+0x7fa>
 8004bde:	4a13      	ldr	r2, [pc, #76]	@ (8004c2c <HAL_ADC_ConfigChannel+0x844>)
 8004be0:	e000      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x7fc>
 8004be2:	4a0e      	ldr	r2, [pc, #56]	@ (8004c1c <HAL_ADC_ConfigChannel+0x834>)
 8004be4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004be8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004bec:	4619      	mov	r1, r3
 8004bee:	4610      	mov	r0, r2
 8004bf0:	f7ff f889 	bl	8003d06 <LL_ADC_SetCommonPathInternalCh>
 8004bf4:	e008      	b.n	8004c08 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bfa:	f043 0220 	orr.w	r2, r3, #32
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004c10:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	37d8      	adds	r7, #216	@ 0xd8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	50000700 	.word	0x50000700
 8004c20:	c3210000 	.word	0xc3210000
 8004c24:	90c00010 	.word	0x90c00010
 8004c28:	50000100 	.word	0x50000100
 8004c2c:	50000300 	.word	0x50000300
 8004c30:	20000000 	.word	0x20000000
 8004c34:	053e2d63 	.word	0x053e2d63
 8004c38:	c7520000 	.word	0xc7520000
 8004c3c:	cb840000 	.word	0xcb840000

08004c40 <LL_ADC_IsEnabled>:
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <LL_ADC_IsEnabled+0x18>
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <LL_ADC_IsEnabled+0x1a>
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <LL_ADC_REG_IsConversionOngoing>:
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d101      	bne.n	8004c7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004c8c:	b590      	push	{r4, r7, lr}
 8004c8e:	b0a1      	sub	sp, #132	@ 0x84
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e0cb      	b.n	8004e42 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cc2:	d102      	bne.n	8004cca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004cc4:	4b61      	ldr	r3, [pc, #388]	@ (8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004cc6:	60bb      	str	r3, [r7, #8]
 8004cc8:	e001      	b.n	8004cce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10b      	bne.n	8004cec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd8:	f043 0220 	orr.w	r2, r3, #32
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0aa      	b.n	8004e42 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff ffb9 	bl	8004c66 <LL_ADC_REG_IsConversionOngoing>
 8004cf4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff ffb3 	bl	8004c66 <LL_ADC_REG_IsConversionOngoing>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f040 808c 	bne.w	8004e20 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004d08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f040 8088 	bne.w	8004e20 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d18:	d004      	beq.n	8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a4b      	ldr	r2, [pc, #300]	@ (8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d101      	bne.n	8004d28 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8004d24:	4b4a      	ldr	r3, [pc, #296]	@ (8004e50 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8004d26:	e000      	b.n	8004d2a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004d28:	4b4a      	ldr	r3, [pc, #296]	@ (8004e54 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8004d2a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d041      	beq.n	8004db8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004d34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	6859      	ldr	r1, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d46:	035b      	lsls	r3, r3, #13
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d4e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d58:	d004      	beq.n	8004d64 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a3b      	ldr	r2, [pc, #236]	@ (8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d10f      	bne.n	8004d84 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8004d64:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d68:	f7ff ff6a 	bl	8004c40 <LL_ADC_IsEnabled>
 8004d6c:	4604      	mov	r4, r0
 8004d6e:	4837      	ldr	r0, [pc, #220]	@ (8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004d70:	f7ff ff66 	bl	8004c40 <LL_ADC_IsEnabled>
 8004d74:	4603      	mov	r3, r0
 8004d76:	4323      	orrs	r3, r4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bf0c      	ite	eq
 8004d7c:	2301      	moveq	r3, #1
 8004d7e:	2300      	movne	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	e008      	b.n	8004d96 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8004d84:	4834      	ldr	r0, [pc, #208]	@ (8004e58 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8004d86:	f7ff ff5b 	bl	8004c40 <LL_ADC_IsEnabled>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	bf0c      	ite	eq
 8004d90:	2301      	moveq	r3, #1
 8004d92:	2300      	movne	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d04c      	beq.n	8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004da2:	f023 030f 	bic.w	r3, r3, #15
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	6811      	ldr	r1, [r2, #0]
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	6892      	ldr	r2, [r2, #8]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	431a      	orrs	r2, r3
 8004db2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004db4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004db6:	e03d      	b.n	8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004db8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004dc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dc2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dcc:	d004      	beq.n	8004dd8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d10f      	bne.n	8004df8 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8004dd8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004ddc:	f7ff ff30 	bl	8004c40 <LL_ADC_IsEnabled>
 8004de0:	4604      	mov	r4, r0
 8004de2:	481a      	ldr	r0, [pc, #104]	@ (8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004de4:	f7ff ff2c 	bl	8004c40 <LL_ADC_IsEnabled>
 8004de8:	4603      	mov	r3, r0
 8004dea:	4323      	orrs	r3, r4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	bf0c      	ite	eq
 8004df0:	2301      	moveq	r3, #1
 8004df2:	2300      	movne	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	e008      	b.n	8004e0a <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8004df8:	4817      	ldr	r0, [pc, #92]	@ (8004e58 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8004dfa:	f7ff ff21 	bl	8004c40 <LL_ADC_IsEnabled>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bf0c      	ite	eq
 8004e04:	2301      	moveq	r3, #1
 8004e06:	2300      	movne	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d012      	beq.n	8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004e16:	f023 030f 	bic.w	r3, r3, #15
 8004e1a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004e1c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e1e:	e009      	b.n	8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e24:	f043 0220 	orr.w	r2, r3, #32
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004e32:	e000      	b.n	8004e36 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e3e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3784      	adds	r7, #132	@ 0x84
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd90      	pop	{r4, r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	50000100 	.word	0x50000100
 8004e50:	50000300 	.word	0x50000300
 8004e54:	50000700 	.word	0x50000700
 8004e58:	50000400 	.word	0x50000400

08004e5c <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e023      	b.n	8004eb6 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7fd f8d0 	bl	8002028 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8004f04 <__NVIC_SetPriorityGrouping+0x44>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004edc:	4013      	ands	r3, r2
 8004ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ee8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ef2:	4a04      	ldr	r2, [pc, #16]	@ (8004f04 <__NVIC_SetPriorityGrouping+0x44>)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	60d3      	str	r3, [r2, #12]
}
 8004ef8:	bf00      	nop
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	e000ed00 	.word	0xe000ed00

08004f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f0c:	4b04      	ldr	r3, [pc, #16]	@ (8004f20 <__NVIC_GetPriorityGrouping+0x18>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	0a1b      	lsrs	r3, r3, #8
 8004f12:	f003 0307 	and.w	r3, r3, #7
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	e000ed00 	.word	0xe000ed00

08004f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	db0b      	blt.n	8004f4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	f003 021f 	and.w	r2, r3, #31
 8004f3c:	4907      	ldr	r1, [pc, #28]	@ (8004f5c <__NVIC_EnableIRQ+0x38>)
 8004f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	2001      	movs	r0, #1
 8004f46:	fa00 f202 	lsl.w	r2, r0, r2
 8004f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	e000e100 	.word	0xe000e100

08004f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	4603      	mov	r3, r0
 8004f68:	6039      	str	r1, [r7, #0]
 8004f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	db0a      	blt.n	8004f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	b2da      	uxtb	r2, r3
 8004f78:	490c      	ldr	r1, [pc, #48]	@ (8004fac <__NVIC_SetPriority+0x4c>)
 8004f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f7e:	0112      	lsls	r2, r2, #4
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	440b      	add	r3, r1
 8004f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f88:	e00a      	b.n	8004fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	4908      	ldr	r1, [pc, #32]	@ (8004fb0 <__NVIC_SetPriority+0x50>)
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	3b04      	subs	r3, #4
 8004f98:	0112      	lsls	r2, r2, #4
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	440b      	add	r3, r1
 8004f9e:	761a      	strb	r2, [r3, #24]
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	e000e100 	.word	0xe000e100
 8004fb0:	e000ed00 	.word	0xe000ed00

08004fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b089      	sub	sp, #36	@ 0x24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f1c3 0307 	rsb	r3, r3, #7
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	bf28      	it	cs
 8004fd2:	2304      	movcs	r3, #4
 8004fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	3304      	adds	r3, #4
 8004fda:	2b06      	cmp	r3, #6
 8004fdc:	d902      	bls.n	8004fe4 <NVIC_EncodePriority+0x30>
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	3b03      	subs	r3, #3
 8004fe2:	e000      	b.n	8004fe6 <NVIC_EncodePriority+0x32>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	43da      	mvns	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	401a      	ands	r2, r3
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	fa01 f303 	lsl.w	r3, r1, r3
 8005006:	43d9      	mvns	r1, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800500c:	4313      	orrs	r3, r2
         );
}
 800500e:	4618      	mov	r0, r3
 8005010:	3724      	adds	r7, #36	@ 0x24
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b082      	sub	sp, #8
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7ff ff4c 	bl	8004ec0 <__NVIC_SetPriorityGrouping>
}
 8005028:	bf00      	nop
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	4603      	mov	r3, r0
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800503e:	f7ff ff63 	bl	8004f08 <__NVIC_GetPriorityGrouping>
 8005042:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	68b9      	ldr	r1, [r7, #8]
 8005048:	6978      	ldr	r0, [r7, #20]
 800504a:	f7ff ffb3 	bl	8004fb4 <NVIC_EncodePriority>
 800504e:	4602      	mov	r2, r0
 8005050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005054:	4611      	mov	r1, r2
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff ff82 	bl	8004f60 <__NVIC_SetPriority>
}
 800505c:	bf00      	nop
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	4603      	mov	r3, r0
 800506c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800506e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff ff56 	bl	8004f24 <__NVIC_EnableIRQ>
}
 8005078:	bf00      	nop
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e08d      	b.n	80051ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	461a      	mov	r2, r3
 8005098:	4b47      	ldr	r3, [pc, #284]	@ (80051b8 <HAL_DMA_Init+0x138>)
 800509a:	429a      	cmp	r2, r3
 800509c:	d80f      	bhi.n	80050be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	4b45      	ldr	r3, [pc, #276]	@ (80051bc <HAL_DMA_Init+0x13c>)
 80050a6:	4413      	add	r3, r2
 80050a8:	4a45      	ldr	r2, [pc, #276]	@ (80051c0 <HAL_DMA_Init+0x140>)
 80050aa:	fba2 2303 	umull	r2, r3, r2, r3
 80050ae:	091b      	lsrs	r3, r3, #4
 80050b0:	009a      	lsls	r2, r3, #2
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a42      	ldr	r2, [pc, #264]	@ (80051c4 <HAL_DMA_Init+0x144>)
 80050ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80050bc:	e00e      	b.n	80050dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	461a      	mov	r2, r3
 80050c4:	4b40      	ldr	r3, [pc, #256]	@ (80051c8 <HAL_DMA_Init+0x148>)
 80050c6:	4413      	add	r3, r2
 80050c8:	4a3d      	ldr	r2, [pc, #244]	@ (80051c0 <HAL_DMA_Init+0x140>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	091b      	lsrs	r3, r3, #4
 80050d0:	009a      	lsls	r2, r3, #2
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a3c      	ldr	r2, [pc, #240]	@ (80051cc <HAL_DMA_Init+0x14c>)
 80050da:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80050f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005100:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800510c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005118:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f9be 	bl	80054b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800513c:	d102      	bne.n	8005144 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005158:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d010      	beq.n	8005184 <HAL_DMA_Init+0x104>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b04      	cmp	r3, #4
 8005168:	d80c      	bhi.n	8005184 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f9de 	bl	800552c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005180:	605a      	str	r2, [r3, #4]
 8005182:	e008      	b.n	8005196 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40020407 	.word	0x40020407
 80051bc:	bffdfff8 	.word	0xbffdfff8
 80051c0:	cccccccd 	.word	0xcccccccd
 80051c4:	40020000 	.word	0x40020000
 80051c8:	bffdfbf8 	.word	0xbffdfbf8
 80051cc:	40020400 	.word	0x40020400

080051d0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d005      	beq.n	80051f4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2204      	movs	r2, #4
 80051ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	73fb      	strb	r3, [r7, #15]
 80051f2:	e037      	b.n	8005264 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 020e 	bic.w	r2, r2, #14
 8005202:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800520e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005212:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0201 	bic.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005228:	f003 021f 	and.w	r2, r3, #31
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005230:	2101      	movs	r1, #1
 8005232:	fa01 f202 	lsl.w	r2, r1, r2
 8005236:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005240:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00c      	beq.n	8005264 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005254:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005258:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005262:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005274:	7bfb      	ldrb	r3, [r7, #15]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d00d      	beq.n	80052b6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2204      	movs	r2, #4
 800529e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	73fb      	strb	r3, [r7, #15]
 80052b4:	e047      	b.n	8005346 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 020e 	bic.w	r2, r2, #14
 80052c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0201 	bic.w	r2, r2, #1
 80052d4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ea:	f003 021f 	and.w	r2, r3, #31
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f2:	2101      	movs	r1, #1
 80052f4:	fa01 f202 	lsl.w	r2, r1, r2
 80052f8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005302:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00c      	beq.n	8005326 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005316:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800531a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005324:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	4798      	blx	r3
    }
  }
  return status;
 8005346:	7bfb      	ldrb	r3, [r7, #15]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536c:	f003 031f 	and.w	r3, r3, #31
 8005370:	2204      	movs	r2, #4
 8005372:	409a      	lsls	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4013      	ands	r3, r2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d026      	beq.n	80053ca <HAL_DMA_IRQHandler+0x7a>
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f003 0304 	and.w	r3, r3, #4
 8005382:	2b00      	cmp	r3, #0
 8005384:	d021      	beq.n	80053ca <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b00      	cmp	r3, #0
 8005392:	d107      	bne.n	80053a4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0204 	bic.w	r2, r2, #4
 80053a2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a8:	f003 021f 	and.w	r2, r3, #31
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b0:	2104      	movs	r1, #4
 80053b2:	fa01 f202 	lsl.w	r2, r1, r2
 80053b6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d071      	beq.n	80054a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80053c8:	e06c      	b.n	80054a4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ce:	f003 031f 	and.w	r3, r3, #31
 80053d2:	2202      	movs	r2, #2
 80053d4:	409a      	lsls	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4013      	ands	r3, r2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d02e      	beq.n	800543c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d029      	beq.n	800543c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10b      	bne.n	800540e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 020a 	bic.w	r2, r2, #10
 8005404:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005412:	f003 021f 	and.w	r2, r3, #31
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541a:	2102      	movs	r1, #2
 800541c:	fa01 f202 	lsl.w	r2, r1, r2
 8005420:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542e:	2b00      	cmp	r3, #0
 8005430:	d038      	beq.n	80054a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800543a:	e033      	b.n	80054a4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005440:	f003 031f 	and.w	r3, r3, #31
 8005444:	2208      	movs	r2, #8
 8005446:	409a      	lsls	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4013      	ands	r3, r2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d02a      	beq.n	80054a6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b00      	cmp	r3, #0
 8005458:	d025      	beq.n	80054a6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 020e 	bic.w	r2, r2, #14
 8005468:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546e:	f003 021f 	and.w	r2, r3, #31
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005476:	2101      	movs	r1, #1
 8005478:	fa01 f202 	lsl.w	r2, r1, r2
 800547c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005498:	2b00      	cmp	r3, #0
 800549a:	d004      	beq.n	80054a6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop
}
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	461a      	mov	r2, r3
 80054be:	4b16      	ldr	r3, [pc, #88]	@ (8005518 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d802      	bhi.n	80054ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80054c4:	4b15      	ldr	r3, [pc, #84]	@ (800551c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	e001      	b.n	80054ce <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80054ca:	4b15      	ldr	r3, [pc, #84]	@ (8005520 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80054cc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	3b08      	subs	r3, #8
 80054da:	4a12      	ldr	r2, [pc, #72]	@ (8005524 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80054dc:	fba2 2303 	umull	r2, r3, r2, r3
 80054e0:	091b      	lsrs	r3, r3, #4
 80054e2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e8:	089b      	lsrs	r3, r3, #2
 80054ea:	009a      	lsls	r2, r3, #2
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	4413      	add	r3, r2
 80054f0:	461a      	mov	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a0b      	ldr	r2, [pc, #44]	@ (8005528 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80054fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f003 031f 	and.w	r3, r3, #31
 8005502:	2201      	movs	r2, #1
 8005504:	409a      	lsls	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40020407 	.word	0x40020407
 800551c:	40020800 	.word	0x40020800
 8005520:	40020820 	.word	0x40020820
 8005524:	cccccccd 	.word	0xcccccccd
 8005528:	40020880 	.word	0x40020880

0800552c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	b2db      	uxtb	r3, r3
 800553a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	4b0b      	ldr	r3, [pc, #44]	@ (800556c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	461a      	mov	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a08      	ldr	r2, [pc, #32]	@ (8005570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800554e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3b01      	subs	r3, #1
 8005554:	f003 031f 	and.w	r3, r3, #31
 8005558:	2201      	movs	r2, #1
 800555a:	409a      	lsls	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005560:	bf00      	nop
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	1000823f 	.word	0x1000823f
 8005570:	40020940 	.word	0x40020940

08005574 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e033      	b.n	80055ee <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d106      	bne.n	80055a0 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fc fd64 	bl	8002068 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f854 	bl	8005654 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f822 	bl	80055f6 <FMAC_Reset>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d10c      	bne.n	80055d2 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055bc:	f043 0210 	orr.w	r2, r3, #16
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	22a0      	movs	r2, #160	@ 0xa0
 80055c8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	73fb      	strb	r3, [r7, #15]
 80055d0:	e008      	b.n	80055e4 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 80055e0:	2300      	movs	r3, #0
 80055e2:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b084      	sub	sp, #16
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055fe:	f7fe fb1d 	bl	8003c3c <HAL_GetTick>
 8005602:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691a      	ldr	r2, [r3, #16]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005612:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8005614:	e00f      	b.n	8005636 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8005616:	f7fe fb11 	bl	8003c3c <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005624:	d907      	bls.n	8005636 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800562a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e00a      	b.n	800564c <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e8      	bne.n	8005616 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f807 	bl	8005670 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f81b 	bl	800569e <FMAC_ResetOutputStateAndDataPointers>
}
 8005668:	bf00      	nop
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80056da:	e15a      	b.n	8005992 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	2101      	movs	r1, #1
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	fa01 f303 	lsl.w	r3, r1, r3
 80056e8:	4013      	ands	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 814c 	beq.w	800598c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f003 0303 	and.w	r3, r3, #3
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d005      	beq.n	800570c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005708:	2b02      	cmp	r3, #2
 800570a:	d130      	bne.n	800576e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	2203      	movs	r2, #3
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	43db      	mvns	r3, r3
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4013      	ands	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005742:	2201      	movs	r2, #1
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	43db      	mvns	r3, r3
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4013      	ands	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	091b      	lsrs	r3, r3, #4
 8005758:	f003 0201 	and.w	r2, r3, #1
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	fa02 f303 	lsl.w	r3, r2, r3
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	2b03      	cmp	r3, #3
 8005778:	d017      	beq.n	80057aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	2203      	movs	r2, #3
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	43db      	mvns	r3, r3
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4013      	ands	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	fa02 f303 	lsl.w	r3, r2, r3
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d123      	bne.n	80057fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	08da      	lsrs	r2, r3, #3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3208      	adds	r2, #8
 80057be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	220f      	movs	r2, #15
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	43db      	mvns	r3, r3
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4013      	ands	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	691a      	ldr	r2, [r3, #16]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	08da      	lsrs	r2, r3, #3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3208      	adds	r2, #8
 80057f8:	6939      	ldr	r1, [r7, #16]
 80057fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	2203      	movs	r2, #3
 800580a:	fa02 f303 	lsl.w	r3, r2, r3
 800580e:	43db      	mvns	r3, r3
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	4013      	ands	r3, r2
 8005814:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f003 0203 	and.w	r2, r3, #3
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	fa02 f303 	lsl.w	r3, r2, r3
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 80a6 	beq.w	800598c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005840:	4b5b      	ldr	r3, [pc, #364]	@ (80059b0 <HAL_GPIO_Init+0x2e4>)
 8005842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005844:	4a5a      	ldr	r2, [pc, #360]	@ (80059b0 <HAL_GPIO_Init+0x2e4>)
 8005846:	f043 0301 	orr.w	r3, r3, #1
 800584a:	6613      	str	r3, [r2, #96]	@ 0x60
 800584c:	4b58      	ldr	r3, [pc, #352]	@ (80059b0 <HAL_GPIO_Init+0x2e4>)
 800584e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	60bb      	str	r3, [r7, #8]
 8005856:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005858:	4a56      	ldr	r2, [pc, #344]	@ (80059b4 <HAL_GPIO_Init+0x2e8>)
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	089b      	lsrs	r3, r3, #2
 800585e:	3302      	adds	r3, #2
 8005860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005864:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f003 0303 	and.w	r3, r3, #3
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	220f      	movs	r2, #15
 8005870:	fa02 f303 	lsl.w	r3, r2, r3
 8005874:	43db      	mvns	r3, r3
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4013      	ands	r3, r2
 800587a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005882:	d01f      	beq.n	80058c4 <HAL_GPIO_Init+0x1f8>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a4c      	ldr	r2, [pc, #304]	@ (80059b8 <HAL_GPIO_Init+0x2ec>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d019      	beq.n	80058c0 <HAL_GPIO_Init+0x1f4>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a4b      	ldr	r2, [pc, #300]	@ (80059bc <HAL_GPIO_Init+0x2f0>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d013      	beq.n	80058bc <HAL_GPIO_Init+0x1f0>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a4a      	ldr	r2, [pc, #296]	@ (80059c0 <HAL_GPIO_Init+0x2f4>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00d      	beq.n	80058b8 <HAL_GPIO_Init+0x1ec>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a49      	ldr	r2, [pc, #292]	@ (80059c4 <HAL_GPIO_Init+0x2f8>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d007      	beq.n	80058b4 <HAL_GPIO_Init+0x1e8>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a48      	ldr	r2, [pc, #288]	@ (80059c8 <HAL_GPIO_Init+0x2fc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d101      	bne.n	80058b0 <HAL_GPIO_Init+0x1e4>
 80058ac:	2305      	movs	r3, #5
 80058ae:	e00a      	b.n	80058c6 <HAL_GPIO_Init+0x1fa>
 80058b0:	2306      	movs	r3, #6
 80058b2:	e008      	b.n	80058c6 <HAL_GPIO_Init+0x1fa>
 80058b4:	2304      	movs	r3, #4
 80058b6:	e006      	b.n	80058c6 <HAL_GPIO_Init+0x1fa>
 80058b8:	2303      	movs	r3, #3
 80058ba:	e004      	b.n	80058c6 <HAL_GPIO_Init+0x1fa>
 80058bc:	2302      	movs	r3, #2
 80058be:	e002      	b.n	80058c6 <HAL_GPIO_Init+0x1fa>
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <HAL_GPIO_Init+0x1fa>
 80058c4:	2300      	movs	r3, #0
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	f002 0203 	and.w	r2, r2, #3
 80058cc:	0092      	lsls	r2, r2, #2
 80058ce:	4093      	lsls	r3, r2
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058d6:	4937      	ldr	r1, [pc, #220]	@ (80059b4 <HAL_GPIO_Init+0x2e8>)
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	089b      	lsrs	r3, r3, #2
 80058dc:	3302      	adds	r3, #2
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058e4:	4b39      	ldr	r3, [pc, #228]	@ (80059cc <HAL_GPIO_Init+0x300>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	43db      	mvns	r3, r3
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	4013      	ands	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005908:	4a30      	ldr	r2, [pc, #192]	@ (80059cc <HAL_GPIO_Init+0x300>)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800590e:	4b2f      	ldr	r3, [pc, #188]	@ (80059cc <HAL_GPIO_Init+0x300>)
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	43db      	mvns	r3, r3
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4013      	ands	r3, r2
 800591c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005932:	4a26      	ldr	r2, [pc, #152]	@ (80059cc <HAL_GPIO_Init+0x300>)
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005938:	4b24      	ldr	r3, [pc, #144]	@ (80059cc <HAL_GPIO_Init+0x300>)
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	43db      	mvns	r3, r3
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	4013      	ands	r3, r2
 8005946:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800595c:	4a1b      	ldr	r2, [pc, #108]	@ (80059cc <HAL_GPIO_Init+0x300>)
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005962:	4b1a      	ldr	r3, [pc, #104]	@ (80059cc <HAL_GPIO_Init+0x300>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	43db      	mvns	r3, r3
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4013      	ands	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005986:	4a11      	ldr	r2, [pc, #68]	@ (80059cc <HAL_GPIO_Init+0x300>)
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	3301      	adds	r3, #1
 8005990:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	fa22 f303 	lsr.w	r3, r2, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	f47f ae9d 	bne.w	80056dc <HAL_GPIO_Init+0x10>
  }
}
 80059a2:	bf00      	nop
 80059a4:	bf00      	nop
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	40021000 	.word	0x40021000
 80059b4:	40010000 	.word	0x40010000
 80059b8:	48000400 	.word	0x48000400
 80059bc:	48000800 	.word	0x48000800
 80059c0:	48000c00 	.word	0x48000c00
 80059c4:	48001000 	.word	0x48001000
 80059c8:	48001400 	.word	0x48001400
 80059cc:	40010400 	.word	0x40010400

080059d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	887b      	ldrh	r3, [r7, #2]
 80059e2:	4013      	ands	r3, r2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059e8:	2301      	movs	r3, #1
 80059ea:	73fb      	strb	r3, [r7, #15]
 80059ec:	e001      	b.n	80059f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059ee:	2300      	movs	r3, #0
 80059f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	807b      	strh	r3, [r7, #2]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a10:	787b      	ldrb	r3, [r7, #1]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a16:	887a      	ldrh	r2, [r7, #2]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a1c:	e002      	b.n	8005a24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a1e:	887a      	ldrh	r2, [r7, #2]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e08d      	b.n	8005b5e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d106      	bne.n	8005a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fc fb26 	bl	80020a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2224      	movs	r2, #36	@ 0x24
 8005a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0201 	bic.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005a80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d107      	bne.n	8005aaa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005aa6:	609a      	str	r2, [r3, #8]
 8005aa8:	e006      	b.n	8005ab8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005ab6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d108      	bne.n	8005ad2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ace:	605a      	str	r2, [r3, #4]
 8005ad0:	e007      	b.n	8005ae2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ae0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6812      	ldr	r2, [r2, #0]
 8005aec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005af0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005af4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68da      	ldr	r2, [r3, #12]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691a      	ldr	r2, [r3, #16]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	69d9      	ldr	r1, [r3, #28]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1a      	ldr	r2, [r3, #32]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0201 	orr.w	r2, r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
 8005b6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b20      	cmp	r3, #32
 8005b7a:	d138      	bne.n	8005bee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e032      	b.n	8005bf0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2224      	movs	r2, #36	@ 0x24
 8005b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0201 	bic.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005bb8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6819      	ldr	r1, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0201 	orr.w	r2, r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	e000      	b.n	8005bf0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005bee:	2302      	movs	r3, #2
  }
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b20      	cmp	r3, #32
 8005c10:	d139      	bne.n	8005c86 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e033      	b.n	8005c88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2224      	movs	r2, #36	@ 0x24
 8005c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0201 	bic.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005c4e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 0201 	orr.w	r2, r2, #1
 8005c70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	e000      	b.n	8005c88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c86:	2302      	movs	r3, #2
  }
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e0c0      	b.n	8005e28 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f00a fc2e 	bl	801051c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2203      	movs	r2, #3
 8005cc4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f006 fe54 	bl	800c97a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	73fb      	strb	r3, [r7, #15]
 8005cd6:	e03e      	b.n	8005d56 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005cd8:	7bfa      	ldrb	r2, [r7, #15]
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	440b      	add	r3, r1
 8005ce6:	3311      	adds	r3, #17
 8005ce8:	2201      	movs	r2, #1
 8005cea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005cec:	7bfa      	ldrb	r2, [r7, #15]
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	440b      	add	r3, r1
 8005cfa:	3310      	adds	r3, #16
 8005cfc:	7bfa      	ldrb	r2, [r7, #15]
 8005cfe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005d00:	7bfa      	ldrb	r2, [r7, #15]
 8005d02:	6879      	ldr	r1, [r7, #4]
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	440b      	add	r3, r1
 8005d0e:	3313      	adds	r3, #19
 8005d10:	2200      	movs	r2, #0
 8005d12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005d14:	7bfa      	ldrb	r2, [r7, #15]
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	440b      	add	r3, r1
 8005d22:	3320      	adds	r3, #32
 8005d24:	2200      	movs	r2, #0
 8005d26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005d28:	7bfa      	ldrb	r2, [r7, #15]
 8005d2a:	6879      	ldr	r1, [r7, #4]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	440b      	add	r3, r1
 8005d36:	3324      	adds	r3, #36	@ 0x24
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	4613      	mov	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	440b      	add	r3, r1
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	3301      	adds	r3, #1
 8005d54:	73fb      	strb	r3, [r7, #15]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	791b      	ldrb	r3, [r3, #4]
 8005d5a:	7bfa      	ldrb	r2, [r7, #15]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d3bb      	bcc.n	8005cd8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d60:	2300      	movs	r3, #0
 8005d62:	73fb      	strb	r3, [r7, #15]
 8005d64:	e044      	b.n	8005df0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d66:	7bfa      	ldrb	r2, [r7, #15]
 8005d68:	6879      	ldr	r1, [r7, #4]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	440b      	add	r3, r1
 8005d74:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8005d78:	2200      	movs	r2, #0
 8005d7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d7c:	7bfa      	ldrb	r2, [r7, #15]
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	4613      	mov	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	440b      	add	r3, r1
 8005d8a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005d8e:	7bfa      	ldrb	r2, [r7, #15]
 8005d90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d92:	7bfa      	ldrb	r2, [r7, #15]
 8005d94:	6879      	ldr	r1, [r7, #4]
 8005d96:	4613      	mov	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	00db      	lsls	r3, r3, #3
 8005d9e:	440b      	add	r3, r1
 8005da0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005da8:	7bfa      	ldrb	r2, [r7, #15]
 8005daa:	6879      	ldr	r1, [r7, #4]
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	440b      	add	r3, r1
 8005db6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005dbe:	7bfa      	ldrb	r2, [r7, #15]
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	440b      	add	r3, r1
 8005dcc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005dd4:	7bfa      	ldrb	r2, [r7, #15]
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	440b      	add	r3, r1
 8005de2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	3301      	adds	r3, #1
 8005dee:	73fb      	strb	r3, [r7, #15]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	791b      	ldrb	r3, [r3, #4]
 8005df4:	7bfa      	ldrb	r2, [r7, #15]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d3b5      	bcc.n	8005d66 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6818      	ldr	r0, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3304      	adds	r3, #4
 8005e02:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005e06:	f006 fdd3 	bl	800c9b0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	7a9b      	ldrb	r3, [r3, #10]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d102      	bne.n	8005e26 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f001 fcaa 	bl	800777a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d101      	bne.n	8005e46 <HAL_PCD_Start+0x16>
 8005e42:	2302      	movs	r3, #2
 8005e44:	e012      	b.n	8005e6c <HAL_PCD_Start+0x3c>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f006 fd7a 	bl	800c94c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f008 f96a 	bl	800e136 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d101      	bne.n	8005e8a <HAL_PCD_Stop+0x16>
 8005e86:	2302      	movs	r3, #2
 8005e88:	e012      	b.n	8005eb0 <HAL_PCD_Stop+0x3c>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f006 fd6f 	bl	800c97a <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f008 f95f 	bl	800e164 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f008 f962 	bl	800e18e <USB_ReadInterrupts>
 8005eca:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 faa6 	bl	8006428 <PCD_EP_ISR_Handler>

    return;
 8005edc:	e110      	b.n	8006100 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d013      	beq.n	8005f10 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005efa:	b292      	uxth	r2, r2
 8005efc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f00a fb9c 	bl	801063e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005f06:	2100      	movs	r1, #0
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f8fc 	bl	8006106 <HAL_PCD_SetAddress>

    return;
 8005f0e:	e0f7      	b.n	8006100 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00c      	beq.n	8005f34 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005f2c:	b292      	uxth	r2, r2
 8005f2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005f32:	e0e5      	b.n	8006100 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00c      	beq.n	8005f58 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f50:	b292      	uxth	r2, r2
 8005f52:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005f56:	e0d3      	b.n	8006100 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d034      	beq.n	8005fcc <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 0204 	bic.w	r2, r2, #4
 8005f74:	b292      	uxth	r2, r2
 8005f76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0208 	bic.w	r2, r2, #8
 8005f8c:	b292      	uxth	r2, r2
 8005f8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d107      	bne.n	8005fac <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f00a fd76 	bl	8010a98 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f00a fb7f 	bl	80106b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005fc4:	b292      	uxth	r2, r2
 8005fc6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005fca:	e099      	b.n	8006100 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d027      	beq.n	8006026 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f042 0208 	orr.w	r2, r2, #8
 8005fe8:	b292      	uxth	r2, r2
 8005fea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006000:	b292      	uxth	r2, r2
 8006002:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800600e:	b29a      	uxth	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f042 0204 	orr.w	r2, r2, #4
 8006018:	b292      	uxth	r2, r2
 800601a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f00a fb2c 	bl	801067c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006024:	e06c      	b.n	8006100 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800602c:	2b00      	cmp	r3, #0
 800602e:	d040      	beq.n	80060b2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006038:	b29a      	uxth	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006042:	b292      	uxth	r2, r2
 8006044:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800604e:	2b00      	cmp	r3, #0
 8006050:	d12b      	bne.n	80060aa <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800605a:	b29a      	uxth	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f042 0204 	orr.w	r2, r2, #4
 8006064:	b292      	uxth	r2, r2
 8006066:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006072:	b29a      	uxth	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f042 0208 	orr.w	r2, r2, #8
 800607c:	b292      	uxth	r2, r2
 800607e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006092:	b29b      	uxth	r3, r3
 8006094:	089b      	lsrs	r3, r3, #2
 8006096:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80060a0:	2101      	movs	r1, #1
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f00a fcf8 	bl	8010a98 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80060a8:	e02a      	b.n	8006100 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f00a fae6 	bl	801067c <HAL_PCD_SuspendCallback>
    return;
 80060b0:	e026      	b.n	8006100 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00f      	beq.n	80060dc <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80060ce:	b292      	uxth	r2, r2
 80060d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f00a faa4 	bl	8010622 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80060da:	e011      	b.n	8006100 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00c      	beq.n	8006100 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060f8:	b292      	uxth	r2, r2
 80060fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80060fe:	bf00      	nop
  }
}
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b082      	sub	sp, #8
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	460b      	mov	r3, r1
 8006110:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_PCD_SetAddress+0x1a>
 800611c:	2302      	movs	r3, #2
 800611e:	e012      	b.n	8006146 <HAL_PCD_SetAddress+0x40>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	78fa      	ldrb	r2, [r7, #3]
 800612c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	78fa      	ldrb	r2, [r7, #3]
 8006134:	4611      	mov	r1, r2
 8006136:	4618      	mov	r0, r3
 8006138:	f007 ffe9 	bl	800e10e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	4608      	mov	r0, r1
 8006158:	4611      	mov	r1, r2
 800615a:	461a      	mov	r2, r3
 800615c:	4603      	mov	r3, r0
 800615e:	70fb      	strb	r3, [r7, #3]
 8006160:	460b      	mov	r3, r1
 8006162:	803b      	strh	r3, [r7, #0]
 8006164:	4613      	mov	r3, r2
 8006166:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006168:	2300      	movs	r3, #0
 800616a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800616c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006170:	2b00      	cmp	r3, #0
 8006172:	da0e      	bge.n	8006192 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	f003 0207 	and.w	r2, r3, #7
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	3310      	adds	r3, #16
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	4413      	add	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	705a      	strb	r2, [r3, #1]
 8006190:	e00e      	b.n	80061b0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006192:	78fb      	ldrb	r3, [r7, #3]
 8006194:	f003 0207 	and.w	r2, r3, #7
 8006198:	4613      	mov	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	4413      	add	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80061b0:	78fb      	ldrb	r3, [r7, #3]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80061bc:	883b      	ldrh	r3, [r7, #0]
 80061be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	78ba      	ldrb	r2, [r7, #2]
 80061ca:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80061cc:	78bb      	ldrb	r3, [r7, #2]
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d102      	bne.n	80061d8 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d101      	bne.n	80061e6 <HAL_PCD_EP_Open+0x98>
 80061e2:	2302      	movs	r3, #2
 80061e4:	e00e      	b.n	8006204 <HAL_PCD_EP_Open+0xb6>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68f9      	ldr	r1, [r7, #12]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f006 fbf9 	bl	800c9ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8006202:	7afb      	ldrb	r3, [r7, #11]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	607a      	str	r2, [r7, #4]
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	460b      	mov	r3, r1
 800621a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800621c:	7afb      	ldrb	r3, [r7, #11]
 800621e:	f003 0207 	and.w	r2, r3, #7
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4413      	add	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2200      	movs	r2, #0
 8006244:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2200      	movs	r2, #0
 800624a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800624c:	7afb      	ldrb	r3, [r7, #11]
 800624e:	f003 0307 	and.w	r3, r3, #7
 8006252:	b2da      	uxtb	r2, r3
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6979      	ldr	r1, [r7, #20]
 800625e:	4618      	mov	r0, r3
 8006260:	f007 f8ac 	bl	800d3bc <USB_EPStartXfer>

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3718      	adds	r7, #24
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b086      	sub	sp, #24
 8006272:	af00      	add	r7, sp, #0
 8006274:	60f8      	str	r0, [r7, #12]
 8006276:	607a      	str	r2, [r7, #4]
 8006278:	603b      	str	r3, [r7, #0]
 800627a:	460b      	mov	r3, r1
 800627c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800627e:	7afb      	ldrb	r3, [r7, #11]
 8006280:	f003 0207 	and.w	r2, r3, #7
 8006284:	4613      	mov	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	3310      	adds	r3, #16
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4413      	add	r3, r2
 8006292:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2200      	movs	r2, #0
 80062b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	2201      	movs	r2, #1
 80062b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062ba:	7afb      	ldrb	r3, [r7, #11]
 80062bc:	f003 0307 	and.w	r3, r3, #7
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6979      	ldr	r1, [r7, #20]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f007 f875 	bl	800d3bc <USB_EPStartXfer>

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	f003 0307 	and.w	r3, r3, #7
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	7912      	ldrb	r2, [r2, #4]
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d901      	bls.n	80062fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e03e      	b.n	8006378 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80062fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	da0e      	bge.n	8006320 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006302:	78fb      	ldrb	r3, [r7, #3]
 8006304:	f003 0207 	and.w	r2, r3, #7
 8006308:	4613      	mov	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	3310      	adds	r3, #16
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	4413      	add	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2201      	movs	r2, #1
 800631c:	705a      	strb	r2, [r3, #1]
 800631e:	e00c      	b.n	800633a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006320:	78fa      	ldrb	r2, [r7, #3]
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	4413      	add	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2201      	movs	r2, #1
 800633e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	b2da      	uxtb	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006352:	2b01      	cmp	r3, #1
 8006354:	d101      	bne.n	800635a <HAL_PCD_EP_SetStall+0x7e>
 8006356:	2302      	movs	r3, #2
 8006358:	e00e      	b.n	8006378 <HAL_PCD_EP_SetStall+0x9c>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68f9      	ldr	r1, [r7, #12]
 8006368:	4618      	mov	r0, r3
 800636a:	f007 fdd6 	bl	800df1a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	460b      	mov	r3, r1
 800638a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800638c:	78fb      	ldrb	r3, [r7, #3]
 800638e:	f003 030f 	and.w	r3, r3, #15
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	7912      	ldrb	r2, [r2, #4]
 8006396:	4293      	cmp	r3, r2
 8006398:	d901      	bls.n	800639e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e040      	b.n	8006420 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800639e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	da0e      	bge.n	80063c4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063a6:	78fb      	ldrb	r3, [r7, #3]
 80063a8:	f003 0207 	and.w	r2, r3, #7
 80063ac:	4613      	mov	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	3310      	adds	r3, #16
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	4413      	add	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2201      	movs	r2, #1
 80063c0:	705a      	strb	r2, [r3, #1]
 80063c2:	e00e      	b.n	80063e2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	f003 0207 	and.w	r2, r3, #7
 80063ca:	4613      	mov	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	00db      	lsls	r3, r3, #3
 80063d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	4413      	add	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	f003 0307 	and.w	r3, r3, #7
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_PCD_EP_ClrStall+0x82>
 80063fe:	2302      	movs	r3, #2
 8006400:	e00e      	b.n	8006420 <HAL_PCD_EP_ClrStall+0xa0>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68f9      	ldr	r1, [r7, #12]
 8006410:	4618      	mov	r0, r3
 8006412:	f007 fdd3 	bl	800dfbc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b092      	sub	sp, #72	@ 0x48
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006430:	e333      	b.n	8006a9a <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800643a:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800643c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800643e:	b2db      	uxtb	r3, r3
 8006440:	f003 030f 	and.w	r3, r3, #15
 8006444:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8006448:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800644c:	2b00      	cmp	r3, #0
 800644e:	f040 8108 	bne.w	8006662 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006452:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006454:	f003 0310 	and.w	r3, r3, #16
 8006458:	2b00      	cmp	r3, #0
 800645a:	d14c      	bne.n	80064f6 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	b29b      	uxth	r3, r3
 8006464:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006468:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800646c:	813b      	strh	r3, [r7, #8]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	893b      	ldrh	r3, [r7, #8]
 8006474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800647c:	b29b      	uxth	r3, r3
 800647e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3310      	adds	r3, #16
 8006484:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800648e:	b29b      	uxth	r3, r3
 8006490:	461a      	mov	r2, r3
 8006492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	4413      	add	r3, r2
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	6812      	ldr	r2, [r2, #0]
 800649e:	4413      	add	r3, r2
 80064a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80064aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80064ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064b0:	695a      	ldr	r2, [r3, #20]
 80064b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	441a      	add	r2, r3
 80064b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064ba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80064bc:	2100      	movs	r1, #0
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f00a f895 	bl	80105ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	7b1b      	ldrb	r3, [r3, #12]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 82e5 	beq.w	8006a9a <PCD_EP_ISR_Handler+0x672>
 80064d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f040 82e0 	bne.w	8006a9a <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	7b1b      	ldrb	r3, [r3, #12]
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	731a      	strb	r2, [r3, #12]
 80064f4:	e2d1      	b.n	8006a9a <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80064fc:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006506:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800650c:	2b00      	cmp	r3, #0
 800650e:	d032      	beq.n	8006576 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006518:	b29b      	uxth	r3, r3
 800651a:	461a      	mov	r2, r3
 800651c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	4413      	add	r3, r2
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6812      	ldr	r2, [r2, #0]
 8006528:	4413      	add	r3, r2
 800652a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006536:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6818      	ldr	r0, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8006542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006544:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006548:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800654a:	b29b      	uxth	r3, r3
 800654c:	f007 fe72 	bl	800e234 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	b29a      	uxth	r2, r3
 8006558:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800655c:	4013      	ands	r3, r2
 800655e:	817b      	strh	r3, [r7, #10]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	897a      	ldrh	r2, [r7, #10]
 8006566:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800656a:	b292      	uxth	r2, r2
 800656c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f00a f810 	bl	8010594 <HAL_PCD_SetupStageCallback>
 8006574:	e291      	b.n	8006a9a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006576:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800657a:	2b00      	cmp	r3, #0
 800657c:	f280 828d 	bge.w	8006a9a <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b29a      	uxth	r2, r3
 8006588:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800658c:	4013      	ands	r3, r2
 800658e:	81fb      	strh	r3, [r7, #14]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	89fa      	ldrh	r2, [r7, #14]
 8006596:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800659a:	b292      	uxth	r2, r2
 800659c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	461a      	mov	r2, r3
 80065aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	4413      	add	r3, r2
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	6812      	ldr	r2, [r2, #0]
 80065b6:	4413      	add	r3, r2
 80065b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80065c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065c4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80065c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d019      	beq.n	8006602 <PCD_EP_ISR_Handler+0x1da>
 80065ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d015      	beq.n	8006602 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6818      	ldr	r0, [r3, #0]
 80065da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065dc:	6959      	ldr	r1, [r3, #20]
 80065de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065e0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80065e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065e4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	f007 fe24 	bl	800e234 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80065ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065ee:	695a      	ldr	r2, [r3, #20]
 80065f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	441a      	add	r2, r3
 80065f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065f8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80065fa:	2100      	movs	r1, #0
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f009 ffdb 	bl	80105b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800660a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800660c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006610:	2b00      	cmp	r3, #0
 8006612:	f040 8242 	bne.w	8006a9a <PCD_EP_ISR_Handler+0x672>
 8006616:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006618:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800661c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006620:	f000 823b 	beq.w	8006a9a <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	b29b      	uxth	r3, r3
 800662c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006630:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006634:	81bb      	strh	r3, [r7, #12]
 8006636:	89bb      	ldrh	r3, [r7, #12]
 8006638:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800663c:	81bb      	strh	r3, [r7, #12]
 800663e:	89bb      	ldrh	r3, [r7, #12]
 8006640:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006644:	81bb      	strh	r3, [r7, #12]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	89bb      	ldrh	r3, [r7, #12]
 800664c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006650:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006654:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800665c:	b29b      	uxth	r3, r3
 800665e:	8013      	strh	r3, [r2, #0]
 8006660:	e21b      	b.n	8006a9a <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006674:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006678:	2b00      	cmp	r3, #0
 800667a:	f280 80f1 	bge.w	8006860 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	b29a      	uxth	r2, r3
 8006690:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006694:	4013      	ands	r3, r2
 8006696:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	461a      	mov	r2, r3
 800669e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80066a8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80066ac:	b292      	uxth	r2, r2
 80066ae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80066b0:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	4413      	add	r3, r2
 80066c4:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80066c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066c8:	7b1b      	ldrb	r3, [r3, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d123      	bne.n	8006716 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	4413      	add	r3, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6812      	ldr	r2, [r2, #0]
 80066e6:	4413      	add	r3, r2
 80066e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066f2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80066f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 808b 	beq.w	8006816 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6818      	ldr	r0, [r3, #0]
 8006704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006706:	6959      	ldr	r1, [r3, #20]
 8006708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800670a:	88da      	ldrh	r2, [r3, #6]
 800670c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006710:	f007 fd90 	bl	800e234 <USB_ReadPMA>
 8006714:	e07f      	b.n	8006816 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006718:	78db      	ldrb	r3, [r3, #3]
 800671a:	2b02      	cmp	r3, #2
 800671c:	d109      	bne.n	8006732 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800671e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006720:	461a      	mov	r2, r3
 8006722:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f9c6 	bl	8006ab6 <HAL_PCD_EP_DB_Receive>
 800672a:	4603      	mov	r3, r0
 800672c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006730:	e071      	b.n	8006816 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	461a      	mov	r2, r3
 8006738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	b29b      	uxth	r3, r3
 8006744:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800674c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	441a      	add	r2, r3
 800675c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800675e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006762:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800676a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800676e:	b29b      	uxth	r3, r3
 8006770:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	881b      	ldrh	r3, [r3, #0]
 8006782:	b29b      	uxth	r3, r3
 8006784:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d022      	beq.n	80067d2 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006794:	b29b      	uxth	r3, r3
 8006796:	461a      	mov	r2, r3
 8006798:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	4413      	add	r3, r2
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6812      	ldr	r2, [r2, #0]
 80067a4:	4413      	add	r3, r2
 80067a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80067aa:	881b      	ldrh	r3, [r3, #0]
 80067ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067b0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80067b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d02c      	beq.n	8006816 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6818      	ldr	r0, [r3, #0]
 80067c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067c2:	6959      	ldr	r1, [r3, #20]
 80067c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067c6:	891a      	ldrh	r2, [r3, #8]
 80067c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80067cc:	f007 fd32 	bl	800e234 <USB_ReadPMA>
 80067d0:	e021      	b.n	8006816 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067da:	b29b      	uxth	r3, r3
 80067dc:	461a      	mov	r2, r3
 80067de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	4413      	add	r3, r2
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6812      	ldr	r2, [r2, #0]
 80067ea:	4413      	add	r3, r2
 80067ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067f6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80067fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d009      	beq.n	8006816 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6818      	ldr	r0, [r3, #0]
 8006806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006808:	6959      	ldr	r1, [r3, #20]
 800680a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800680c:	895a      	ldrh	r2, [r3, #10]
 800680e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006812:	f007 fd0f 	bl	800e234 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006818:	69da      	ldr	r2, [r3, #28]
 800681a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800681e:	441a      	add	r2, r3
 8006820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006822:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006826:	695a      	ldr	r2, [r3, #20]
 8006828:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800682c:	441a      	add	r2, r3
 800682e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006830:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d005      	beq.n	8006846 <PCD_EP_ISR_Handler+0x41e>
 800683a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800683e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	429a      	cmp	r2, r3
 8006844:	d206      	bcs.n	8006854 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006846:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f009 feb3 	bl	80105b8 <HAL_PCD_DataOutStageCallback>
 8006852:	e005      	b.n	8006860 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800685a:	4618      	mov	r0, r3
 800685c:	f006 fdae 	bl	800d3bc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006860:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 8117 	beq.w	8006a9a <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800686c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006870:	4613      	mov	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	3310      	adds	r3, #16
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	4413      	add	r3, r2
 800687e:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	461a      	mov	r2, r3
 8006886:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800689a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	461a      	mov	r2, r3
 80068a2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	441a      	add	r2, r3
 80068aa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80068ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80068b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068ba:	78db      	ldrb	r3, [r3, #3]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	f040 80a1 	bne.w	8006a04 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80068c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068c4:	2200      	movs	r2, #0
 80068c6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80068c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068ca:	7b1b      	ldrb	r3, [r3, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 8092 	beq.w	80069f6 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80068d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80068d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d046      	beq.n	800696a <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80068dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068de:	785b      	ldrb	r3, [r3, #1]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d126      	bne.n	8006932 <PCD_EP_ISR_Handler+0x50a>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	617b      	str	r3, [r7, #20]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	461a      	mov	r2, r3
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	4413      	add	r3, r2
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	00da      	lsls	r2, r3, #3
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	4413      	add	r3, r2
 8006906:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800690a:	613b      	str	r3, [r7, #16]
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006916:	b29a      	uxth	r2, r3
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	801a      	strh	r2, [r3, #0]
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	b29b      	uxth	r3, r3
 8006922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800692a:	b29a      	uxth	r2, r3
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	801a      	strh	r2, [r3, #0]
 8006930:	e061      	b.n	80069f6 <PCD_EP_ISR_Handler+0x5ce>
 8006932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006934:	785b      	ldrb	r3, [r3, #1]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d15d      	bne.n	80069f6 <PCD_EP_ISR_Handler+0x5ce>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	61fb      	str	r3, [r7, #28]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006948:	b29b      	uxth	r3, r3
 800694a:	461a      	mov	r2, r3
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	4413      	add	r3, r2
 8006950:	61fb      	str	r3, [r7, #28]
 8006952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	00da      	lsls	r2, r3, #3
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	4413      	add	r3, r2
 800695c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006960:	61bb      	str	r3, [r7, #24]
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	2200      	movs	r2, #0
 8006966:	801a      	strh	r2, [r3, #0]
 8006968:	e045      	b.n	80069f6 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d126      	bne.n	80069c6 <PCD_EP_ISR_Handler+0x59e>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	627b      	str	r3, [r7, #36]	@ 0x24
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006986:	b29b      	uxth	r3, r3
 8006988:	461a      	mov	r2, r3
 800698a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698c:	4413      	add	r3, r2
 800698e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006990:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	00da      	lsls	r2, r3, #3
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	4413      	add	r3, r2
 800699a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800699e:	623b      	str	r3, [r7, #32]
 80069a0:	6a3b      	ldr	r3, [r7, #32]
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	801a      	strh	r2, [r3, #0]
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069be:	b29a      	uxth	r2, r3
 80069c0:	6a3b      	ldr	r3, [r7, #32]
 80069c2:	801a      	strh	r2, [r3, #0]
 80069c4:	e017      	b.n	80069f6 <PCD_EP_ISR_Handler+0x5ce>
 80069c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069c8:	785b      	ldrb	r3, [r3, #1]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d113      	bne.n	80069f6 <PCD_EP_ISR_Handler+0x5ce>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	461a      	mov	r2, r3
 80069da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069dc:	4413      	add	r3, r2
 80069de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	00da      	lsls	r2, r3, #3
 80069e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e8:	4413      	add	r3, r2
 80069ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80069ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f2:	2200      	movs	r2, #0
 80069f4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80069f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f009 fdf6 	bl	80105ee <HAL_PCD_DataInStageCallback>
 8006a02:	e04a      	b.n	8006a9a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006a04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d13f      	bne.n	8006a8e <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	4413      	add	r3, r2
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	6812      	ldr	r2, [r2, #0]
 8006a26:	4413      	add	r3, r2
 8006a28:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a32:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8006a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a36:	699a      	ldr	r2, [r3, #24]
 8006a38:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d906      	bls.n	8006a4c <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8006a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a40:	699a      	ldr	r2, [r3, #24]
 8006a42:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006a44:	1ad2      	subs	r2, r2, r3
 8006a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a48:	619a      	str	r2, [r3, #24]
 8006a4a:	e002      	b.n	8006a52 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8006a4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a4e:	2200      	movs	r2, #0
 8006a50:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f009 fdc4 	bl	80105ee <HAL_PCD_DataInStageCallback>
 8006a66:	e018      	b.n	8006a9a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006a68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a6a:	695a      	ldr	r2, [r3, #20]
 8006a6c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006a6e:	441a      	add	r2, r3
 8006a70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a72:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a76:	69da      	ldr	r2, [r3, #28]
 8006a78:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006a7a:	441a      	add	r2, r3
 8006a7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a7e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a86:	4618      	mov	r0, r3
 8006a88:	f006 fc98 	bl	800d3bc <USB_EPStartXfer>
 8006a8c:	e005      	b.n	8006a9a <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006a8e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006a90:	461a      	mov	r2, r3
 8006a92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f917 	bl	8006cc8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	b21b      	sxth	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f6ff acc3 	blt.w	8006432 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3748      	adds	r7, #72	@ 0x48
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b088      	sub	sp, #32
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006ac4:	88fb      	ldrh	r3, [r7, #6]
 8006ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d07c      	beq.n	8006bc8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	461a      	mov	r2, r3
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	4413      	add	r3, r2
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	6812      	ldr	r2, [r2, #0]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006af2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	699a      	ldr	r2, [r3, #24]
 8006af8:	8b7b      	ldrh	r3, [r7, #26]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d306      	bcc.n	8006b0c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	699a      	ldr	r2, [r3, #24]
 8006b02:	8b7b      	ldrh	r3, [r7, #26]
 8006b04:	1ad2      	subs	r2, r2, r3
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	619a      	str	r2, [r3, #24]
 8006b0a:	e002      	b.n	8006b12 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d123      	bne.n	8006b62 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b34:	833b      	strh	r3, [r7, #24]
 8006b36:	8b3b      	ldrh	r3, [r7, #24]
 8006b38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b3c:	833b      	strh	r3, [r7, #24]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	441a      	add	r2, r3
 8006b4c:	8b3b      	ldrh	r3, [r7, #24]
 8006b4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01f      	beq.n	8006bac <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	461a      	mov	r2, r3
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b86:	82fb      	strh	r3, [r7, #22]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	441a      	add	r2, r3
 8006b96:	8afb      	ldrh	r3, [r7, #22]
 8006b98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ba0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ba4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006bac:	8b7b      	ldrh	r3, [r7, #26]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 8085 	beq.w	8006cbe <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6818      	ldr	r0, [r3, #0]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	6959      	ldr	r1, [r3, #20]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	891a      	ldrh	r2, [r3, #8]
 8006bc0:	8b7b      	ldrh	r3, [r7, #26]
 8006bc2:	f007 fb37 	bl	800e234 <USB_ReadPMA>
 8006bc6:	e07a      	b.n	8006cbe <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	00db      	lsls	r3, r3, #3
 8006bda:	4413      	add	r3, r2
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	6812      	ldr	r2, [r2, #0]
 8006be0:	4413      	add	r3, r2
 8006be2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	699a      	ldr	r2, [r3, #24]
 8006bf2:	8b7b      	ldrh	r3, [r7, #26]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d306      	bcc.n	8006c06 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	699a      	ldr	r2, [r3, #24]
 8006bfc:	8b7b      	ldrh	r3, [r7, #26]
 8006bfe:	1ad2      	subs	r2, r2, r3
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	619a      	str	r2, [r3, #24]
 8006c04:	e002      	b.n	8006c0c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d123      	bne.n	8006c5c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c2e:	83fb      	strh	r3, [r7, #30]
 8006c30:	8bfb      	ldrh	r3, [r7, #30]
 8006c32:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006c36:	83fb      	strh	r3, [r7, #30]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	441a      	add	r2, r3
 8006c46:	8bfb      	ldrh	r3, [r7, #30]
 8006c48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006c5c:	88fb      	ldrh	r3, [r7, #6]
 8006c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d11f      	bne.n	8006ca6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c80:	83bb      	strh	r3, [r7, #28]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	441a      	add	r2, r3
 8006c90:	8bbb      	ldrh	r3, [r7, #28]
 8006c92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006ca6:	8b7b      	ldrh	r3, [r7, #26]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d008      	beq.n	8006cbe <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	6959      	ldr	r1, [r3, #20]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	895a      	ldrh	r2, [r3, #10]
 8006cb8:	8b7b      	ldrh	r3, [r7, #26]
 8006cba:	f007 fabb 	bl	800e234 <USB_ReadPMA>
    }
  }

  return count;
 8006cbe:	8b7b      	ldrh	r3, [r7, #26]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3720      	adds	r7, #32
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b0a6      	sub	sp, #152	@ 0x98
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006cd6:	88fb      	ldrh	r3, [r7, #6]
 8006cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 81f7 	beq.w	80070d0 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	461a      	mov	r2, r3
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	4413      	add	r3, r2
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	6812      	ldr	r2, [r2, #0]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d06:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	699a      	ldr	r2, [r3, #24]
 8006d0e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d907      	bls.n	8006d26 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	699a      	ldr	r2, [r3, #24]
 8006d1a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006d1e:	1ad2      	subs	r2, r2, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	619a      	str	r2, [r3, #24]
 8006d24:	e002      	b.n	8006d2c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f040 80e1 	bne.w	8006ef8 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	785b      	ldrb	r3, [r3, #1]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d126      	bne.n	8006d8c <HAL_PCD_EP_DB_Transmit+0xc4>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	461a      	mov	r2, r3
 8006d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d52:	4413      	add	r3, r2
 8006d54:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	00da      	lsls	r2, r3, #3
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5e:	4413      	add	r3, r2
 8006d60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d74:	801a      	strh	r2, [r3, #0]
 8006d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d88:	801a      	strh	r2, [r3, #0]
 8006d8a:	e01a      	b.n	8006dc2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	785b      	ldrb	r3, [r3, #1]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d116      	bne.n	8006dc2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	461a      	mov	r2, r3
 8006da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da8:	4413      	add	r3, r2
 8006daa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	00da      	lsls	r2, r3, #3
 8006db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db4:	4413      	add	r3, r2
 8006db6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006dba:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	785b      	ldrb	r3, [r3, #1]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d126      	bne.n	8006e1e <HAL_PCD_EP_DB_Transmit+0x156>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	623b      	str	r3, [r7, #32]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	461a      	mov	r2, r3
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	4413      	add	r3, r2
 8006de6:	623b      	str	r3, [r7, #32]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	00da      	lsls	r2, r3, #3
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	4413      	add	r3, r2
 8006df2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006df6:	61fb      	str	r3, [r7, #28]
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	801a      	strh	r2, [r3, #0]
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	881b      	ldrh	r3, [r3, #0]
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	801a      	strh	r2, [r3, #0]
 8006e1c:	e017      	b.n	8006e4e <HAL_PCD_EP_DB_Transmit+0x186>
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	785b      	ldrb	r3, [r3, #1]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d113      	bne.n	8006e4e <HAL_PCD_EP_DB_Transmit+0x186>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	461a      	mov	r2, r3
 8006e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e34:	4413      	add	r3, r2
 8006e36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	00da      	lsls	r2, r3, #3
 8006e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e40:	4413      	add	r3, r2
 8006e42:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	78db      	ldrb	r3, [r3, #3]
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d123      	bne.n	8006e9e <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e70:	837b      	strh	r3, [r7, #26]
 8006e72:	8b7b      	ldrh	r3, [r7, #26]
 8006e74:	f083 0320 	eor.w	r3, r3, #32
 8006e78:	837b      	strh	r3, [r7, #26]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	441a      	add	r2, r3
 8006e88:	8b7b      	ldrh	r3, [r7, #26]
 8006e8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f009 fba2 	bl	80105ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006eaa:	88fb      	ldrh	r3, [r7, #6]
 8006eac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d01f      	beq.n	8006ef4 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ece:	833b      	strh	r3, [r7, #24]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	441a      	add	r2, r3
 8006ede:	8b3b      	ldrh	r3, [r7, #24]
 8006ee0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ee4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ee8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006eec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e31f      	b.n	8007538 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006ef8:	88fb      	ldrh	r3, [r7, #6]
 8006efa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d021      	beq.n	8006f46 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	461a      	mov	r2, r3
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f1c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	441a      	add	r2, r3
 8006f2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	f040 82ca 	bne.w	80074e6 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	695a      	ldr	r2, [r3, #20]
 8006f56:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006f5a:	441a      	add	r2, r3
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	69da      	ldr	r2, [r3, #28]
 8006f64:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006f68:	441a      	add	r2, r3
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	6a1a      	ldr	r2, [r3, #32]
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d309      	bcc.n	8006f8e <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	6a1a      	ldr	r2, [r3, #32]
 8006f84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f86:	1ad2      	subs	r2, r2, r3
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	621a      	str	r2, [r3, #32]
 8006f8c:	e015      	b.n	8006fba <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d107      	bne.n	8006fa6 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8006f96:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006f9a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006fa4:	e009      	b.n	8006fba <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	785b      	ldrb	r3, [r3, #1]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d15f      	bne.n	8007082 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fd6:	4413      	add	r3, r2
 8006fd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	00da      	lsls	r2, r3, #3
 8006fe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ff8:	801a      	strh	r2, [r3, #0]
 8006ffa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10a      	bne.n	8007016 <HAL_PCD_EP_DB_Transmit+0x34e>
 8007000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	b29b      	uxth	r3, r3
 8007006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800700a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800700e:	b29a      	uxth	r2, r3
 8007010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007012:	801a      	strh	r2, [r3, #0]
 8007014:	e051      	b.n	80070ba <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007016:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007018:	2b3e      	cmp	r3, #62	@ 0x3e
 800701a:	d816      	bhi.n	800704a <HAL_PCD_EP_DB_Transmit+0x382>
 800701c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800701e:	085b      	lsrs	r3, r3, #1
 8007020:	653b      	str	r3, [r7, #80]	@ 0x50
 8007022:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <HAL_PCD_EP_DB_Transmit+0x36a>
 800702c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800702e:	3301      	adds	r3, #1
 8007030:	653b      	str	r3, [r7, #80]	@ 0x50
 8007032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	b29a      	uxth	r2, r3
 8007038:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800703a:	b29b      	uxth	r3, r3
 800703c:	029b      	lsls	r3, r3, #10
 800703e:	b29b      	uxth	r3, r3
 8007040:	4313      	orrs	r3, r2
 8007042:	b29a      	uxth	r2, r3
 8007044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007046:	801a      	strh	r2, [r3, #0]
 8007048:	e037      	b.n	80070ba <HAL_PCD_EP_DB_Transmit+0x3f2>
 800704a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800704c:	095b      	lsrs	r3, r3, #5
 800704e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007050:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007052:	f003 031f 	and.w	r3, r3, #31
 8007056:	2b00      	cmp	r3, #0
 8007058:	d102      	bne.n	8007060 <HAL_PCD_EP_DB_Transmit+0x398>
 800705a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800705c:	3b01      	subs	r3, #1
 800705e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	b29a      	uxth	r2, r3
 8007066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007068:	b29b      	uxth	r3, r3
 800706a:	029b      	lsls	r3, r3, #10
 800706c:	b29b      	uxth	r3, r3
 800706e:	4313      	orrs	r3, r2
 8007070:	b29b      	uxth	r3, r3
 8007072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800707a:	b29a      	uxth	r2, r3
 800707c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800707e:	801a      	strh	r2, [r3, #0]
 8007080:	e01b      	b.n	80070ba <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	785b      	ldrb	r3, [r3, #1]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d117      	bne.n	80070ba <HAL_PCD_EP_DB_Transmit+0x3f2>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007098:	b29b      	uxth	r3, r3
 800709a:	461a      	mov	r2, r3
 800709c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800709e:	4413      	add	r3, r2
 80070a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	00da      	lsls	r2, r3, #3
 80070a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070aa:	4413      	add	r3, r2
 80070ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80070b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80070b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070b8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6818      	ldr	r0, [r3, #0]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	6959      	ldr	r1, [r3, #20]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	891a      	ldrh	r2, [r3, #8]
 80070c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f007 f870 	bl	800e1ae <USB_WritePMA>
 80070ce:	e20a      	b.n	80074e6 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070d8:	b29b      	uxth	r3, r3
 80070da:	461a      	mov	r2, r3
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	00db      	lsls	r3, r3, #3
 80070e2:	4413      	add	r3, r2
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	6812      	ldr	r2, [r2, #0]
 80070e8:	4413      	add	r3, r2
 80070ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070f4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	699a      	ldr	r2, [r3, #24]
 80070fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007100:	429a      	cmp	r2, r3
 8007102:	d307      	bcc.n	8007114 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	699a      	ldr	r2, [r3, #24]
 8007108:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800710c:	1ad2      	subs	r2, r2, r3
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	619a      	str	r2, [r3, #24]
 8007112:	e002      	b.n	800711a <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2200      	movs	r2, #0
 8007118:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	2b00      	cmp	r3, #0
 8007120:	f040 80f6 	bne.w	8007310 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	785b      	ldrb	r3, [r3, #1]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d126      	bne.n	800717a <HAL_PCD_EP_DB_Transmit+0x4b2>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	677b      	str	r3, [r7, #116]	@ 0x74
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800713a:	b29b      	uxth	r3, r3
 800713c:	461a      	mov	r2, r3
 800713e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007140:	4413      	add	r3, r2
 8007142:	677b      	str	r3, [r7, #116]	@ 0x74
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	00da      	lsls	r2, r3, #3
 800714a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800714c:	4413      	add	r3, r2
 800714e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007152:	673b      	str	r3, [r7, #112]	@ 0x70
 8007154:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	b29b      	uxth	r3, r3
 800715a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800715e:	b29a      	uxth	r2, r3
 8007160:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007162:	801a      	strh	r2, [r3, #0]
 8007164:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	b29b      	uxth	r3, r3
 800716a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800716e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007172:	b29a      	uxth	r2, r3
 8007174:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007176:	801a      	strh	r2, [r3, #0]
 8007178:	e01a      	b.n	80071b0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	785b      	ldrb	r3, [r3, #1]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d116      	bne.n	80071b0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007190:	b29b      	uxth	r3, r3
 8007192:	461a      	mov	r2, r3
 8007194:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007196:	4413      	add	r3, r2
 8007198:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	00da      	lsls	r2, r3, #3
 80071a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80071a2:	4413      	add	r3, r2
 80071a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80071a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80071aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071ac:	2200      	movs	r2, #0
 80071ae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	785b      	ldrb	r3, [r3, #1]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d12f      	bne.n	8007220 <HAL_PCD_EP_DB_Transmit+0x558>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	461a      	mov	r2, r3
 80071d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071d8:	4413      	add	r3, r2
 80071da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	00da      	lsls	r2, r3, #3
 80071e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071e8:	4413      	add	r3, r2
 80071ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80071ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071fe:	b29a      	uxth	r2, r3
 8007200:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007204:	801a      	strh	r2, [r3, #0]
 8007206:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	b29b      	uxth	r3, r3
 800720e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007216:	b29a      	uxth	r2, r3
 8007218:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800721c:	801a      	strh	r2, [r3, #0]
 800721e:	e01c      	b.n	800725a <HAL_PCD_EP_DB_Transmit+0x592>
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	785b      	ldrb	r3, [r3, #1]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d118      	bne.n	800725a <HAL_PCD_EP_DB_Transmit+0x592>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007230:	b29b      	uxth	r3, r3
 8007232:	461a      	mov	r2, r3
 8007234:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007238:	4413      	add	r3, r2
 800723a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	00da      	lsls	r2, r3, #3
 8007244:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007248:	4413      	add	r3, r2
 800724a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800724e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007252:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007256:	2200      	movs	r2, #0
 8007258:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	78db      	ldrb	r3, [r3, #3]
 800725e:	2b02      	cmp	r3, #2
 8007260:	d127      	bne.n	80072b2 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	b29b      	uxth	r3, r3
 8007274:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007278:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800727c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007280:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007284:	f083 0320 	eor.w	r3, r3, #32
 8007288:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	461a      	mov	r2, r3
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	441a      	add	r2, r3
 800729a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800729e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	4619      	mov	r1, r3
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f009 f998 	bl	80105ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80072be:	88fb      	ldrh	r3, [r7, #6]
 80072c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d121      	bne.n	800730c <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072e2:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	441a      	add	r2, r3
 80072f4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80072f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007300:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007308:	b29b      	uxth	r3, r3
 800730a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	e113      	b.n	8007538 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007310:	88fb      	ldrh	r3, [r7, #6]
 8007312:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d121      	bne.n	800735e <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	881b      	ldrh	r3, [r3, #0]
 800732a:	b29b      	uxth	r3, r3
 800732c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007334:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	441a      	add	r2, r3
 8007346:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800734a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800734e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007352:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800735a:	b29b      	uxth	r3, r3
 800735c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007364:	2b01      	cmp	r3, #1
 8007366:	f040 80be 	bne.w	80074e6 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	695a      	ldr	r2, [r3, #20]
 800736e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007372:	441a      	add	r2, r3
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	69da      	ldr	r2, [r3, #28]
 800737c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007380:	441a      	add	r2, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	6a1a      	ldr	r2, [r3, #32]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	429a      	cmp	r2, r3
 8007390:	d309      	bcc.n	80073a6 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	6a1a      	ldr	r2, [r3, #32]
 800739c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800739e:	1ad2      	subs	r2, r2, r3
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	621a      	str	r2, [r3, #32]
 80073a4:	e015      	b.n	80073d2 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d107      	bne.n	80073be <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80073ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80073b2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80073bc:	e009      	b.n	80073d2 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	2200      	movs	r2, #0
 80073c8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	785b      	ldrb	r3, [r3, #1]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d15f      	bne.n	80074a0 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	461a      	mov	r2, r3
 80073f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073f4:	4413      	add	r3, r2
 80073f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	00da      	lsls	r2, r3, #3
 80073fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007400:	4413      	add	r3, r2
 8007402:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007406:	667b      	str	r3, [r7, #100]	@ 0x64
 8007408:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	b29b      	uxth	r3, r3
 800740e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007412:	b29a      	uxth	r2, r3
 8007414:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007416:	801a      	strh	r2, [r3, #0]
 8007418:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10a      	bne.n	8007434 <HAL_PCD_EP_DB_Transmit+0x76c>
 800741e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	b29b      	uxth	r3, r3
 8007424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800742c:	b29a      	uxth	r2, r3
 800742e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007430:	801a      	strh	r2, [r3, #0]
 8007432:	e04e      	b.n	80074d2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007434:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007436:	2b3e      	cmp	r3, #62	@ 0x3e
 8007438:	d816      	bhi.n	8007468 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800743a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800743c:	085b      	lsrs	r3, r3, #1
 800743e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007440:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <HAL_PCD_EP_DB_Transmit+0x788>
 800744a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800744c:	3301      	adds	r3, #1
 800744e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007452:	881b      	ldrh	r3, [r3, #0]
 8007454:	b29a      	uxth	r2, r3
 8007456:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007458:	b29b      	uxth	r3, r3
 800745a:	029b      	lsls	r3, r3, #10
 800745c:	b29b      	uxth	r3, r3
 800745e:	4313      	orrs	r3, r2
 8007460:	b29a      	uxth	r2, r3
 8007462:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007464:	801a      	strh	r2, [r3, #0]
 8007466:	e034      	b.n	80074d2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007468:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800746a:	095b      	lsrs	r3, r3, #5
 800746c:	663b      	str	r3, [r7, #96]	@ 0x60
 800746e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007470:	f003 031f 	and.w	r3, r3, #31
 8007474:	2b00      	cmp	r3, #0
 8007476:	d102      	bne.n	800747e <HAL_PCD_EP_DB_Transmit+0x7b6>
 8007478:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800747a:	3b01      	subs	r3, #1
 800747c:	663b      	str	r3, [r7, #96]	@ 0x60
 800747e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007480:	881b      	ldrh	r3, [r3, #0]
 8007482:	b29a      	uxth	r2, r3
 8007484:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007486:	b29b      	uxth	r3, r3
 8007488:	029b      	lsls	r3, r3, #10
 800748a:	b29b      	uxth	r3, r3
 800748c:	4313      	orrs	r3, r2
 800748e:	b29b      	uxth	r3, r3
 8007490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007498:	b29a      	uxth	r2, r3
 800749a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800749c:	801a      	strh	r2, [r3, #0]
 800749e:	e018      	b.n	80074d2 <HAL_PCD_EP_DB_Transmit+0x80a>
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	785b      	ldrb	r3, [r3, #1]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d114      	bne.n	80074d2 <HAL_PCD_EP_DB_Transmit+0x80a>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	461a      	mov	r2, r3
 80074b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074b6:	4413      	add	r3, r2
 80074b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	00da      	lsls	r2, r3, #3
 80074c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074c2:	4413      	add	r3, r2
 80074c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80074ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074d0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6818      	ldr	r0, [r3, #0]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	6959      	ldr	r1, [r3, #20]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	895a      	ldrh	r2, [r3, #10]
 80074de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f006 fe64 	bl	800e1ae <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	461a      	mov	r2, r3
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007500:	82fb      	strh	r3, [r7, #22]
 8007502:	8afb      	ldrh	r3, [r7, #22]
 8007504:	f083 0310 	eor.w	r3, r3, #16
 8007508:	82fb      	strh	r3, [r7, #22]
 800750a:	8afb      	ldrh	r3, [r7, #22]
 800750c:	f083 0320 	eor.w	r3, r3, #32
 8007510:	82fb      	strh	r3, [r7, #22]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	441a      	add	r2, r3
 8007520:	8afb      	ldrh	r3, [r7, #22]
 8007522:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007526:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800752a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800752e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007532:	b29b      	uxth	r3, r3
 8007534:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3798      	adds	r7, #152	@ 0x98
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	607b      	str	r3, [r7, #4]
 800754a:	460b      	mov	r3, r1
 800754c:	817b      	strh	r3, [r7, #10]
 800754e:	4613      	mov	r3, r2
 8007550:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007552:	897b      	ldrh	r3, [r7, #10]
 8007554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007558:	b29b      	uxth	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00b      	beq.n	8007576 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800755e:	897b      	ldrh	r3, [r7, #10]
 8007560:	f003 0207 	and.w	r2, r3, #7
 8007564:	4613      	mov	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	00db      	lsls	r3, r3, #3
 800756c:	3310      	adds	r3, #16
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	4413      	add	r3, r2
 8007572:	617b      	str	r3, [r7, #20]
 8007574:	e009      	b.n	800758a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007576:	897a      	ldrh	r2, [r7, #10]
 8007578:	4613      	mov	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	4413      	add	r3, r2
 8007588:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800758a:	893b      	ldrh	r3, [r7, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d107      	bne.n	80075a0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	2200      	movs	r2, #0
 8007594:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	b29a      	uxth	r2, r3
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	80da      	strh	r2, [r3, #6]
 800759e:	e00b      	b.n	80075b8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	2201      	movs	r2, #1
 80075a4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	0c1b      	lsrs	r3, r3, #16
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	371c      	adds	r7, #28
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b085      	sub	sp, #20
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4

  /* Enable BCD feature */
  USBx->BCDR |= USB_BCDR_BCDEN;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	f043 0301 	orr.w	r3, r3, #1
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  /* Enable DCD : Data Contact Detect */
  USBx->BCDR &= ~(USB_BCDR_PDEN);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	f023 0304 	bic.w	r3, r3, #4
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  USBx->BCDR &= ~(USB_BCDR_SDEN);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800760a:	b29b      	uxth	r3, r3
 800760c:	f023 0308 	bic.w	r3, r3, #8
 8007610:	b29a      	uxth	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  USBx->BCDR |= USB_BCDR_DCDEN;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800761e:	b29b      	uxth	r3, r3
 8007620:	f043 0302 	orr.w	r3, r3, #2
 8007624:	b29a      	uxth	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <HAL_PCDEx_DeActivateBCD>:
  * @brief  Deactivate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_DeActivateBCD(PCD_HandleTypeDef *hpcd)
{
 800763a:	b480      	push	{r7}
 800763c:	b085      	sub	sp, #20
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 0U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4

  /* Disable BCD feature */
  USBx->BCDR &= ~(USB_BCDR_BCDEN);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007656:	b29b      	uxth	r3, r3
 8007658:	f023 0301 	bic.w	r3, r3, #1
 800765c:	b29a      	uxth	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <HAL_PCDEx_BCD_VBUSDetect>:
  * @brief  Handle BatteryCharging Process.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCDEx_BCD_VBUSDetect(PCD_HandleTypeDef *hpcd)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = HAL_GetTick();
 8007680:	f7fc fadc 	bl	8003c3c <HAL_GetTick>
 8007684:	60b8      	str	r0, [r7, #8]

  /* Wait for Min DCD Timeout */
  HAL_Delay(300U);
 8007686:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800768a:	f7fc fae3 	bl	8003c54 <HAL_Delay>

  /* Data Pin Contact ? Check Detect flag */
  if ((USBx->BCDR & USB_BCDR_DCDET) == USB_BCDR_DCDET)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007694:	b29b      	uxth	r3, r3
 8007696:	f003 0310 	and.w	r3, r3, #16
 800769a:	2b10      	cmp	r3, #16
 800769c:	d103      	bne.n	80076a6 <HAL_PCDEx_BCD_VBUSDetect+0x34>
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_CONTACT_DETECTION);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CONTACT_DETECTION);
 800769e:	21fe      	movs	r1, #254	@ 0xfe
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f009 f821 	bl	80106e8 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }
  /* Primary detection: checks if connected to Standard Downstream Port
  (without charging capability) */
  USBx->BCDR &= ~(USB_BCDR_DCDEN);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	f023 0302 	bic.w	r3, r3, #2
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  HAL_Delay(50U);
 80076ba:	2032      	movs	r0, #50	@ 0x32
 80076bc:	f7fc faca 	bl	8003c54 <HAL_Delay>
  USBx->BCDR |= (USB_BCDR_PDEN);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	f043 0304 	orr.w	r3, r3, #4
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  HAL_Delay(50U);
 80076d4:	2032      	movs	r0, #50	@ 0x32
 80076d6:	f7fc fabd 	bl	8003c54 <HAL_Delay>

  /* If Charger detect ? */
  if ((USBx->BCDR & USB_BCDR_PDET) == USB_BCDR_PDET)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	f003 0320 	and.w	r3, r3, #32
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d12b      	bne.n	8007742 <HAL_PCDEx_BCD_VBUSDetect+0xd0>
  {
    /* Start secondary detection to check connection to Charging Downstream
    Port or Dedicated Charging Port */
    USBx->BCDR &= ~(USB_BCDR_PDEN);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	f023 0304 	bic.w	r3, r3, #4
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    HAL_Delay(50U);
 80076fe:	2032      	movs	r0, #50	@ 0x32
 8007700:	f7fc faa8 	bl	8003c54 <HAL_Delay>
    USBx->BCDR |= (USB_BCDR_SDEN);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800770a:	b29b      	uxth	r3, r3
 800770c:	f043 0308 	orr.w	r3, r3, #8
 8007710:	b29a      	uxth	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    HAL_Delay(50U);
 8007718:	2032      	movs	r0, #50	@ 0x32
 800771a:	f7fc fa9b 	bl	8003c54 <HAL_Delay>

    /* If CDP ? */
    if ((USBx->BCDR & USB_BCDR_SDET) == USB_BCDR_SDET)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007724:	b29b      	uxth	r3, r3
 8007726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800772a:	2b40      	cmp	r3, #64	@ 0x40
 800772c:	d104      	bne.n	8007738 <HAL_PCDEx_BCD_VBUSDetect+0xc6>
    {
      /* Dedicated Downstream Port DCP */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->BCDCallback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
#else
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
 800772e:	21fb      	movs	r1, #251	@ 0xfb
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f008 ffd9 	bl	80106e8 <HAL_PCDEx_BCD_Callback>
 8007736:	e008      	b.n	800774a <HAL_PCDEx_BCD_VBUSDetect+0xd8>
    {
      /* Charging Downstream Port CDP */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->BCDCallback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
#else
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
 8007738:	21fc      	movs	r1, #252	@ 0xfc
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f008 ffd4 	bl	80106e8 <HAL_PCDEx_BCD_Callback>
 8007740:	e003      	b.n	800774a <HAL_PCDEx_BCD_VBUSDetect+0xd8>
  {
    /* Standard Downstream Port */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
 8007742:	21fd      	movs	r1, #253	@ 0xfd
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f008 ffcf 	bl	80106e8 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Battery Charging capability discovery finished Start Enumeration */
  (void)HAL_PCDEx_DeActivateBCD(hpcd);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7ff ff75 	bl	800763a <HAL_PCDEx_DeActivateBCD>

  /* Check for the Timeout, else start USB Device */
  if ((HAL_GetTick() - tickstart) > 1000U)
 8007750:	f7fc fa74 	bl	8003c3c <HAL_GetTick>
 8007754:	4602      	mov	r2, r0
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800775e:	d904      	bls.n	800776a <HAL_PCDEx_BCD_VBUSDetect+0xf8>
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_ERROR);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_ERROR);
 8007760:	21ff      	movs	r1, #255	@ 0xff
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f008 ffc0 	bl	80106e8 <HAL_PCDEx_BCD_Callback>
    hpcd->BCDCallback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }
}
 8007768:	e003      	b.n	8007772 <HAL_PCDEx_BCD_VBUSDetect+0x100>
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
 800776a:	2100      	movs	r1, #0
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f008 ffbb 	bl	80106e8 <HAL_PCDEx_BCD_Callback>
}
 8007772:	bf00      	nop
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800777a:	b480      	push	{r7}
 800777c:	b085      	sub	sp, #20
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800779e:	b29b      	uxth	r3, r3
 80077a0:	f043 0301 	orr.w	r3, r3, #1
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	f043 0302 	orr.w	r3, r3, #2
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
	...

080077d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80077d0:	b480      	push	{r7}
 80077d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077d4:	4b05      	ldr	r3, [pc, #20]	@ (80077ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a04      	ldr	r2, [pc, #16]	@ (80077ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80077da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077de:	6013      	str	r3, [r2, #0]
}
 80077e0:	bf00      	nop
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	40007000 	.word	0x40007000

080077f0 <HAL_PWR_DisableBkUpAccess>:
  * @brief Disable access to the backup domain
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 80077f4:	4b05      	ldr	r3, [pc, #20]	@ (800780c <HAL_PWR_DisableBkUpAccess+0x1c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a04      	ldr	r2, [pc, #16]	@ (800780c <HAL_PWR_DisableBkUpAccess+0x1c>)
 80077fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077fe:	6013      	str	r3, [r2, #0]
}
 8007800:	bf00      	nop
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	40007000 	.word	0x40007000

08007810 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8007818:	4b2b      	ldr	r3, [pc, #172]	@ (80078c8 <HAL_PWR_ConfigPVD+0xb8>)
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f023 020e 	bic.w	r2, r3, #14
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4928      	ldr	r1, [pc, #160]	@ (80078c8 <HAL_PWR_ConfigPVD+0xb8>)
 8007826:	4313      	orrs	r3, r2
 8007828:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800782a:	4b28      	ldr	r3, [pc, #160]	@ (80078cc <HAL_PWR_ConfigPVD+0xbc>)
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	4a27      	ldr	r2, [pc, #156]	@ (80078cc <HAL_PWR_ConfigPVD+0xbc>)
 8007830:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007834:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8007836:	4b25      	ldr	r3, [pc, #148]	@ (80078cc <HAL_PWR_ConfigPVD+0xbc>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a24      	ldr	r2, [pc, #144]	@ (80078cc <HAL_PWR_ConfigPVD+0xbc>)
 800783c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007840:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8007842:	4b22      	ldr	r3, [pc, #136]	@ (80078cc <HAL_PWR_ConfigPVD+0xbc>)
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	4a21      	ldr	r2, [pc, #132]	@ (80078cc <HAL_PWR_ConfigPVD+0xbc>)
 8007848:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800784c:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800784e:	4b1f      	ldr	r3, [pc, #124]	@ (80078cc <HAL_PWR_ConfigPVD+0xbc>)
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	4a1e      	ldr	r2, [pc, #120]	@ (80078cc <HAL_PWR_ConfigPVD+0xbc>)
 8007854:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007858:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d005      	beq.n	8007872 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8007866:	4b19      	ldr	r3, [pc, #100]	@ (80078cc <HAL_PWR_ConfigPVD+0xbc>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a18      	ldr	r2, [pc, #96]	@ (80078cc <HAL_PWR_ConfigPVD+0xbc>)
 800786c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007870:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d005      	beq.n	800788a <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800787e:	4b13      	ldr	r3, [pc, #76]	@ (80078cc <HAL_PWR_ConfigPVD+0xbc>)
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	4a12      	ldr	r2, [pc, #72]	@ (80078cc <HAL_PWR_ConfigPVD+0xbc>)
 8007884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007888:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d005      	beq.n	80078a2 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8007896:	4b0d      	ldr	r3, [pc, #52]	@ (80078cc <HAL_PWR_ConfigPVD+0xbc>)
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	4a0c      	ldr	r2, [pc, #48]	@ (80078cc <HAL_PWR_ConfigPVD+0xbc>)
 800789c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078a0:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d005      	beq.n	80078ba <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80078ae:	4b07      	ldr	r3, [pc, #28]	@ (80078cc <HAL_PWR_ConfigPVD+0xbc>)
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	4a06      	ldr	r2, [pc, #24]	@ (80078cc <HAL_PWR_ConfigPVD+0xbc>)
 80078b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078b8:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	40007000 	.word	0x40007000
 80078cc:	40010400 	.word	0x40010400

080078d0 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80078d0:	b480      	push	{r7}
 80078d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 80078d4:	4b05      	ldr	r3, [pc, #20]	@ (80078ec <HAL_PWR_EnablePVD+0x1c>)
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	4a04      	ldr	r2, [pc, #16]	@ (80078ec <HAL_PWR_EnablePVD+0x1c>)
 80078da:	f043 0301 	orr.w	r3, r3, #1
 80078de:	6053      	str	r3, [r2, #4]
}
 80078e0:	bf00      	nop
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	40007000 	.word	0x40007000

080078f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d141      	bne.n	8007982 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80078fe:	4b4b      	ldr	r3, [pc, #300]	@ (8007a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007906:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800790a:	d131      	bne.n	8007970 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800790c:	4b47      	ldr	r3, [pc, #284]	@ (8007a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800790e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007912:	4a46      	ldr	r2, [pc, #280]	@ (8007a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007918:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800791c:	4b43      	ldr	r3, [pc, #268]	@ (8007a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007924:	4a41      	ldr	r2, [pc, #260]	@ (8007a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007926:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800792a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800792c:	4b40      	ldr	r3, [pc, #256]	@ (8007a30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2232      	movs	r2, #50	@ 0x32
 8007932:	fb02 f303 	mul.w	r3, r2, r3
 8007936:	4a3f      	ldr	r2, [pc, #252]	@ (8007a34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007938:	fba2 2303 	umull	r2, r3, r2, r3
 800793c:	0c9b      	lsrs	r3, r3, #18
 800793e:	3301      	adds	r3, #1
 8007940:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007942:	e002      	b.n	800794a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	3b01      	subs	r3, #1
 8007948:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800794a:	4b38      	ldr	r3, [pc, #224]	@ (8007a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007956:	d102      	bne.n	800795e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1f2      	bne.n	8007944 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800795e:	4b33      	ldr	r3, [pc, #204]	@ (8007a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007966:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800796a:	d158      	bne.n	8007a1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e057      	b.n	8007a20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007970:	4b2e      	ldr	r3, [pc, #184]	@ (8007a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007976:	4a2d      	ldr	r2, [pc, #180]	@ (8007a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800797c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007980:	e04d      	b.n	8007a1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007988:	d141      	bne.n	8007a0e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800798a:	4b28      	ldr	r3, [pc, #160]	@ (8007a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007996:	d131      	bne.n	80079fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007998:	4b24      	ldr	r3, [pc, #144]	@ (8007a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800799a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800799e:	4a23      	ldr	r2, [pc, #140]	@ (8007a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80079a8:	4b20      	ldr	r3, [pc, #128]	@ (8007a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80079b0:	4a1e      	ldr	r2, [pc, #120]	@ (8007a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80079b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80079b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007a30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2232      	movs	r2, #50	@ 0x32
 80079be:	fb02 f303 	mul.w	r3, r2, r3
 80079c2:	4a1c      	ldr	r2, [pc, #112]	@ (8007a34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80079c4:	fba2 2303 	umull	r2, r3, r2, r3
 80079c8:	0c9b      	lsrs	r3, r3, #18
 80079ca:	3301      	adds	r3, #1
 80079cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80079ce:	e002      	b.n	80079d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80079d6:	4b15      	ldr	r3, [pc, #84]	@ (8007a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079e2:	d102      	bne.n	80079ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1f2      	bne.n	80079d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80079ea:	4b10      	ldr	r3, [pc, #64]	@ (8007a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079f6:	d112      	bne.n	8007a1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e011      	b.n	8007a20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80079fc:	4b0b      	ldr	r3, [pc, #44]	@ (8007a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a02:	4a0a      	ldr	r2, [pc, #40]	@ (8007a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007a0c:	e007      	b.n	8007a1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007a0e:	4b07      	ldr	r3, [pc, #28]	@ (8007a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007a16:	4a05      	ldr	r2, [pc, #20]	@ (8007a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007a1c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr
 8007a2c:	40007000 	.word	0x40007000
 8007a30:	20000000 	.word	0x20000000
 8007a34:	431bde83 	.word	0x431bde83

08007a38 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007a3c:	4b05      	ldr	r3, [pc, #20]	@ (8007a54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	4a04      	ldr	r2, [pc, #16]	@ (8007a54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007a42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a46:	6093      	str	r3, [r2, #8]
}
 8007a48:	bf00      	nop
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	40007000 	.word	0x40007000

08007a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b088      	sub	sp, #32
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e2fe      	b.n	8008068 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d075      	beq.n	8007b62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a76:	4b97      	ldr	r3, [pc, #604]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f003 030c 	and.w	r3, r3, #12
 8007a7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a80:	4b94      	ldr	r3, [pc, #592]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	f003 0303 	and.w	r3, r3, #3
 8007a88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	2b0c      	cmp	r3, #12
 8007a8e:	d102      	bne.n	8007a96 <HAL_RCC_OscConfig+0x3e>
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d002      	beq.n	8007a9c <HAL_RCC_OscConfig+0x44>
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	2b08      	cmp	r3, #8
 8007a9a:	d10b      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a9c:	4b8d      	ldr	r3, [pc, #564]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d05b      	beq.n	8007b60 <HAL_RCC_OscConfig+0x108>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d157      	bne.n	8007b60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e2d9      	b.n	8008068 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007abc:	d106      	bne.n	8007acc <HAL_RCC_OscConfig+0x74>
 8007abe:	4b85      	ldr	r3, [pc, #532]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a84      	ldr	r2, [pc, #528]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ac8:	6013      	str	r3, [r2, #0]
 8007aca:	e01d      	b.n	8007b08 <HAL_RCC_OscConfig+0xb0>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ad4:	d10c      	bne.n	8007af0 <HAL_RCC_OscConfig+0x98>
 8007ad6:	4b7f      	ldr	r3, [pc, #508]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a7e      	ldr	r2, [pc, #504]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007adc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ae0:	6013      	str	r3, [r2, #0]
 8007ae2:	4b7c      	ldr	r3, [pc, #496]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a7b      	ldr	r2, [pc, #492]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007aec:	6013      	str	r3, [r2, #0]
 8007aee:	e00b      	b.n	8007b08 <HAL_RCC_OscConfig+0xb0>
 8007af0:	4b78      	ldr	r3, [pc, #480]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a77      	ldr	r2, [pc, #476]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007af6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	4b75      	ldr	r3, [pc, #468]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a74      	ldr	r2, [pc, #464]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007b02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d013      	beq.n	8007b38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b10:	f7fc f894 	bl	8003c3c <HAL_GetTick>
 8007b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b16:	e008      	b.n	8007b2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b18:	f7fc f890 	bl	8003c3c <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	2b64      	cmp	r3, #100	@ 0x64
 8007b24:	d901      	bls.n	8007b2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e29e      	b.n	8008068 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b2a:	4b6a      	ldr	r3, [pc, #424]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d0f0      	beq.n	8007b18 <HAL_RCC_OscConfig+0xc0>
 8007b36:	e014      	b.n	8007b62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b38:	f7fc f880 	bl	8003c3c <HAL_GetTick>
 8007b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007b3e:	e008      	b.n	8007b52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b40:	f7fc f87c 	bl	8003c3c <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	2b64      	cmp	r3, #100	@ 0x64
 8007b4c:	d901      	bls.n	8007b52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e28a      	b.n	8008068 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007b52:	4b60      	ldr	r3, [pc, #384]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1f0      	bne.n	8007b40 <HAL_RCC_OscConfig+0xe8>
 8007b5e:	e000      	b.n	8007b62 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d075      	beq.n	8007c5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b6e:	4b59      	ldr	r3, [pc, #356]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f003 030c 	and.w	r3, r3, #12
 8007b76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b78:	4b56      	ldr	r3, [pc, #344]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	f003 0303 	and.w	r3, r3, #3
 8007b80:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	2b0c      	cmp	r3, #12
 8007b86:	d102      	bne.n	8007b8e <HAL_RCC_OscConfig+0x136>
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d002      	beq.n	8007b94 <HAL_RCC_OscConfig+0x13c>
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	2b04      	cmp	r3, #4
 8007b92:	d11f      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b94:	4b4f      	ldr	r3, [pc, #316]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d005      	beq.n	8007bac <HAL_RCC_OscConfig+0x154>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e25d      	b.n	8008068 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bac:	4b49      	ldr	r3, [pc, #292]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	061b      	lsls	r3, r3, #24
 8007bba:	4946      	ldr	r1, [pc, #280]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007bc0:	4b45      	ldr	r3, [pc, #276]	@ (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fa fe01 	bl	80027cc <HAL_InitTick>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d043      	beq.n	8007c58 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e249      	b.n	8008068 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d023      	beq.n	8007c24 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007bdc:	4b3d      	ldr	r3, [pc, #244]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a3c      	ldr	r2, [pc, #240]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be8:	f7fc f828 	bl	8003c3c <HAL_GetTick>
 8007bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007bee:	e008      	b.n	8007c02 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bf0:	f7fc f824 	bl	8003c3c <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d901      	bls.n	8007c02 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e232      	b.n	8008068 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c02:	4b34      	ldr	r3, [pc, #208]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0f0      	beq.n	8007bf0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c0e:	4b31      	ldr	r3, [pc, #196]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	061b      	lsls	r3, r3, #24
 8007c1c:	492d      	ldr	r1, [pc, #180]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	604b      	str	r3, [r1, #4]
 8007c22:	e01a      	b.n	8007c5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c24:	4b2b      	ldr	r3, [pc, #172]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a2a      	ldr	r2, [pc, #168]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007c2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c30:	f7fc f804 	bl	8003c3c <HAL_GetTick>
 8007c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007c36:	e008      	b.n	8007c4a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c38:	f7fc f800 	bl	8003c3c <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d901      	bls.n	8007c4a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e20e      	b.n	8008068 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007c4a:	4b22      	ldr	r3, [pc, #136]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1f0      	bne.n	8007c38 <HAL_RCC_OscConfig+0x1e0>
 8007c56:	e000      	b.n	8007c5a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0308 	and.w	r3, r3, #8
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d041      	beq.n	8007cea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d01c      	beq.n	8007ca8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c6e:	4b19      	ldr	r3, [pc, #100]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c74:	4a17      	ldr	r2, [pc, #92]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007c76:	f043 0301 	orr.w	r3, r3, #1
 8007c7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c7e:	f7fb ffdd 	bl	8003c3c <HAL_GetTick>
 8007c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c84:	e008      	b.n	8007c98 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c86:	f7fb ffd9 	bl	8003c3c <HAL_GetTick>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d901      	bls.n	8007c98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e1e7      	b.n	8008068 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c98:	4b0e      	ldr	r3, [pc, #56]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c9e:	f003 0302 	and.w	r3, r3, #2
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d0ef      	beq.n	8007c86 <HAL_RCC_OscConfig+0x22e>
 8007ca6:	e020      	b.n	8007cea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cae:	4a09      	ldr	r2, [pc, #36]	@ (8007cd4 <HAL_RCC_OscConfig+0x27c>)
 8007cb0:	f023 0301 	bic.w	r3, r3, #1
 8007cb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cb8:	f7fb ffc0 	bl	8003c3c <HAL_GetTick>
 8007cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007cbe:	e00d      	b.n	8007cdc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cc0:	f7fb ffbc 	bl	8003c3c <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d906      	bls.n	8007cdc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e1ca      	b.n	8008068 <HAL_RCC_OscConfig+0x610>
 8007cd2:	bf00      	nop
 8007cd4:	40021000 	.word	0x40021000
 8007cd8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007cdc:	4b8c      	ldr	r3, [pc, #560]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ce2:	f003 0302 	and.w	r3, r3, #2
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1ea      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0304 	and.w	r3, r3, #4
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f000 80a6 	beq.w	8007e44 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007cfc:	4b84      	ldr	r3, [pc, #528]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <HAL_RCC_OscConfig+0x2b4>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e000      	b.n	8007d0e <HAL_RCC_OscConfig+0x2b6>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00d      	beq.n	8007d2e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d12:	4b7f      	ldr	r3, [pc, #508]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d16:	4a7e      	ldr	r2, [pc, #504]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d1e:	4b7c      	ldr	r3, [pc, #496]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d26:	60fb      	str	r3, [r7, #12]
 8007d28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d2e:	4b79      	ldr	r3, [pc, #484]	@ (8007f14 <HAL_RCC_OscConfig+0x4bc>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d118      	bne.n	8007d6c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d3a:	4b76      	ldr	r3, [pc, #472]	@ (8007f14 <HAL_RCC_OscConfig+0x4bc>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a75      	ldr	r2, [pc, #468]	@ (8007f14 <HAL_RCC_OscConfig+0x4bc>)
 8007d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d46:	f7fb ff79 	bl	8003c3c <HAL_GetTick>
 8007d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d4c:	e008      	b.n	8007d60 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d4e:	f7fb ff75 	bl	8003c3c <HAL_GetTick>
 8007d52:	4602      	mov	r2, r0
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d901      	bls.n	8007d60 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e183      	b.n	8008068 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d60:	4b6c      	ldr	r3, [pc, #432]	@ (8007f14 <HAL_RCC_OscConfig+0x4bc>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d0f0      	beq.n	8007d4e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d108      	bne.n	8007d86 <HAL_RCC_OscConfig+0x32e>
 8007d74:	4b66      	ldr	r3, [pc, #408]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d7a:	4a65      	ldr	r2, [pc, #404]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007d7c:	f043 0301 	orr.w	r3, r3, #1
 8007d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007d84:	e024      	b.n	8007dd0 <HAL_RCC_OscConfig+0x378>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	2b05      	cmp	r3, #5
 8007d8c:	d110      	bne.n	8007db0 <HAL_RCC_OscConfig+0x358>
 8007d8e:	4b60      	ldr	r3, [pc, #384]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d94:	4a5e      	ldr	r2, [pc, #376]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007d96:	f043 0304 	orr.w	r3, r3, #4
 8007d9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007d9e:	4b5c      	ldr	r3, [pc, #368]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007da4:	4a5a      	ldr	r2, [pc, #360]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007da6:	f043 0301 	orr.w	r3, r3, #1
 8007daa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007dae:	e00f      	b.n	8007dd0 <HAL_RCC_OscConfig+0x378>
 8007db0:	4b57      	ldr	r3, [pc, #348]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007db6:	4a56      	ldr	r2, [pc, #344]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007db8:	f023 0301 	bic.w	r3, r3, #1
 8007dbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007dc0:	4b53      	ldr	r3, [pc, #332]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dc6:	4a52      	ldr	r2, [pc, #328]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007dc8:	f023 0304 	bic.w	r3, r3, #4
 8007dcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d016      	beq.n	8007e06 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dd8:	f7fb ff30 	bl	8003c3c <HAL_GetTick>
 8007ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dde:	e00a      	b.n	8007df6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007de0:	f7fb ff2c 	bl	8003c3c <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d901      	bls.n	8007df6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e138      	b.n	8008068 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007df6:	4b46      	ldr	r3, [pc, #280]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d0ed      	beq.n	8007de0 <HAL_RCC_OscConfig+0x388>
 8007e04:	e015      	b.n	8007e32 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e06:	f7fb ff19 	bl	8003c3c <HAL_GetTick>
 8007e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007e0c:	e00a      	b.n	8007e24 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e0e:	f7fb ff15 	bl	8003c3c <HAL_GetTick>
 8007e12:	4602      	mov	r2, r0
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d901      	bls.n	8007e24 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e121      	b.n	8008068 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007e24:	4b3a      	ldr	r3, [pc, #232]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e2a:	f003 0302 	and.w	r3, r3, #2
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1ed      	bne.n	8007e0e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e32:	7ffb      	ldrb	r3, [r7, #31]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d105      	bne.n	8007e44 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e38:	4b35      	ldr	r3, [pc, #212]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e3c:	4a34      	ldr	r2, [pc, #208]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007e3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e42:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0320 	and.w	r3, r3, #32
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d03c      	beq.n	8007eca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d01c      	beq.n	8007e92 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e58:	4b2d      	ldr	r3, [pc, #180]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007e5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e5e:	4a2c      	ldr	r2, [pc, #176]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007e60:	f043 0301 	orr.w	r3, r3, #1
 8007e64:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e68:	f7fb fee8 	bl	8003c3c <HAL_GetTick>
 8007e6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007e6e:	e008      	b.n	8007e82 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e70:	f7fb fee4 	bl	8003c3c <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d901      	bls.n	8007e82 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e0f2      	b.n	8008068 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007e82:	4b23      	ldr	r3, [pc, #140]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007e84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d0ef      	beq.n	8007e70 <HAL_RCC_OscConfig+0x418>
 8007e90:	e01b      	b.n	8007eca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007e92:	4b1f      	ldr	r3, [pc, #124]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007e94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e98:	4a1d      	ldr	r2, [pc, #116]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007e9a:	f023 0301 	bic.w	r3, r3, #1
 8007e9e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ea2:	f7fb fecb 	bl	8003c3c <HAL_GetTick>
 8007ea6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ea8:	e008      	b.n	8007ebc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007eaa:	f7fb fec7 	bl	8003c3c <HAL_GetTick>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d901      	bls.n	8007ebc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e0d5      	b.n	8008068 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ebc:	4b14      	ldr	r3, [pc, #80]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007ebe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1ef      	bne.n	8007eaa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	69db      	ldr	r3, [r3, #28]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 80c9 	beq.w	8008066 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f003 030c 	and.w	r3, r3, #12
 8007edc:	2b0c      	cmp	r3, #12
 8007ede:	f000 8083 	beq.w	8007fe8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d15e      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eea:	4b09      	ldr	r3, [pc, #36]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a08      	ldr	r2, [pc, #32]	@ (8007f10 <HAL_RCC_OscConfig+0x4b8>)
 8007ef0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ef6:	f7fb fea1 	bl	8003c3c <HAL_GetTick>
 8007efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007efc:	e00c      	b.n	8007f18 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007efe:	f7fb fe9d 	bl	8003c3c <HAL_GetTick>
 8007f02:	4602      	mov	r2, r0
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d905      	bls.n	8007f18 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e0ab      	b.n	8008068 <HAL_RCC_OscConfig+0x610>
 8007f10:	40021000 	.word	0x40021000
 8007f14:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f18:	4b55      	ldr	r3, [pc, #340]	@ (8008070 <HAL_RCC_OscConfig+0x618>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1ec      	bne.n	8007efe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f24:	4b52      	ldr	r3, [pc, #328]	@ (8008070 <HAL_RCC_OscConfig+0x618>)
 8007f26:	68da      	ldr	r2, [r3, #12]
 8007f28:	4b52      	ldr	r3, [pc, #328]	@ (8008074 <HAL_RCC_OscConfig+0x61c>)
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	6a11      	ldr	r1, [r2, #32]
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007f34:	3a01      	subs	r2, #1
 8007f36:	0112      	lsls	r2, r2, #4
 8007f38:	4311      	orrs	r1, r2
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007f3e:	0212      	lsls	r2, r2, #8
 8007f40:	4311      	orrs	r1, r2
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007f46:	0852      	lsrs	r2, r2, #1
 8007f48:	3a01      	subs	r2, #1
 8007f4a:	0552      	lsls	r2, r2, #21
 8007f4c:	4311      	orrs	r1, r2
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007f52:	0852      	lsrs	r2, r2, #1
 8007f54:	3a01      	subs	r2, #1
 8007f56:	0652      	lsls	r2, r2, #25
 8007f58:	4311      	orrs	r1, r2
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007f5e:	06d2      	lsls	r2, r2, #27
 8007f60:	430a      	orrs	r2, r1
 8007f62:	4943      	ldr	r1, [pc, #268]	@ (8008070 <HAL_RCC_OscConfig+0x618>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f68:	4b41      	ldr	r3, [pc, #260]	@ (8008070 <HAL_RCC_OscConfig+0x618>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a40      	ldr	r2, [pc, #256]	@ (8008070 <HAL_RCC_OscConfig+0x618>)
 8007f6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f72:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007f74:	4b3e      	ldr	r3, [pc, #248]	@ (8008070 <HAL_RCC_OscConfig+0x618>)
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	4a3d      	ldr	r2, [pc, #244]	@ (8008070 <HAL_RCC_OscConfig+0x618>)
 8007f7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f80:	f7fb fe5c 	bl	8003c3c <HAL_GetTick>
 8007f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f86:	e008      	b.n	8007f9a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f88:	f7fb fe58 	bl	8003c3c <HAL_GetTick>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d901      	bls.n	8007f9a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e066      	b.n	8008068 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f9a:	4b35      	ldr	r3, [pc, #212]	@ (8008070 <HAL_RCC_OscConfig+0x618>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d0f0      	beq.n	8007f88 <HAL_RCC_OscConfig+0x530>
 8007fa6:	e05e      	b.n	8008066 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fa8:	4b31      	ldr	r3, [pc, #196]	@ (8008070 <HAL_RCC_OscConfig+0x618>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a30      	ldr	r2, [pc, #192]	@ (8008070 <HAL_RCC_OscConfig+0x618>)
 8007fae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb4:	f7fb fe42 	bl	8003c3c <HAL_GetTick>
 8007fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007fba:	e008      	b.n	8007fce <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fbc:	f7fb fe3e 	bl	8003c3c <HAL_GetTick>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d901      	bls.n	8007fce <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e04c      	b.n	8008068 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007fce:	4b28      	ldr	r3, [pc, #160]	@ (8008070 <HAL_RCC_OscConfig+0x618>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1f0      	bne.n	8007fbc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007fda:	4b25      	ldr	r3, [pc, #148]	@ (8008070 <HAL_RCC_OscConfig+0x618>)
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	4924      	ldr	r1, [pc, #144]	@ (8008070 <HAL_RCC_OscConfig+0x618>)
 8007fe0:	4b25      	ldr	r3, [pc, #148]	@ (8008078 <HAL_RCC_OscConfig+0x620>)
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	60cb      	str	r3, [r1, #12]
 8007fe6:	e03e      	b.n	8008066 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	69db      	ldr	r3, [r3, #28]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d101      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e039      	b.n	8008068 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8008070 <HAL_RCC_OscConfig+0x618>)
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f003 0203 	and.w	r2, r3, #3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a1b      	ldr	r3, [r3, #32]
 8008004:	429a      	cmp	r2, r3
 8008006:	d12c      	bne.n	8008062 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008012:	3b01      	subs	r3, #1
 8008014:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008016:	429a      	cmp	r2, r3
 8008018:	d123      	bne.n	8008062 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008024:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008026:	429a      	cmp	r2, r3
 8008028:	d11b      	bne.n	8008062 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008034:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008036:	429a      	cmp	r2, r3
 8008038:	d113      	bne.n	8008062 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008044:	085b      	lsrs	r3, r3, #1
 8008046:	3b01      	subs	r3, #1
 8008048:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800804a:	429a      	cmp	r2, r3
 800804c:	d109      	bne.n	8008062 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008058:	085b      	lsrs	r3, r3, #1
 800805a:	3b01      	subs	r3, #1
 800805c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800805e:	429a      	cmp	r2, r3
 8008060:	d001      	beq.n	8008066 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e000      	b.n	8008068 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3720      	adds	r7, #32
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	40021000 	.word	0x40021000
 8008074:	019f800c 	.word	0x019f800c
 8008078:	feeefffc 	.word	0xfeeefffc

0800807c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008086:	2300      	movs	r3, #0
 8008088:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e11e      	b.n	80082d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008094:	4b91      	ldr	r3, [pc, #580]	@ (80082dc <HAL_RCC_ClockConfig+0x260>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 030f 	and.w	r3, r3, #15
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d910      	bls.n	80080c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080a2:	4b8e      	ldr	r3, [pc, #568]	@ (80082dc <HAL_RCC_ClockConfig+0x260>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f023 020f 	bic.w	r2, r3, #15
 80080aa:	498c      	ldr	r1, [pc, #560]	@ (80082dc <HAL_RCC_ClockConfig+0x260>)
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080b2:	4b8a      	ldr	r3, [pc, #552]	@ (80082dc <HAL_RCC_ClockConfig+0x260>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 030f 	and.w	r3, r3, #15
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d001      	beq.n	80080c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e106      	b.n	80082d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d073      	beq.n	80081b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d129      	bne.n	800812c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080d8:	4b81      	ldr	r3, [pc, #516]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e0f4      	b.n	80082d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80080e8:	f000 fa16 	bl	8008518 <RCC_GetSysClockFreqFromPLLSource>
 80080ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	4a7c      	ldr	r2, [pc, #496]	@ (80082e4 <HAL_RCC_ClockConfig+0x268>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d93f      	bls.n	8008176 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80080f6:	4b7a      	ldr	r3, [pc, #488]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d009      	beq.n	8008116 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800810a:	2b00      	cmp	r3, #0
 800810c:	d033      	beq.n	8008176 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008112:	2b00      	cmp	r3, #0
 8008114:	d12f      	bne.n	8008176 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008116:	4b72      	ldr	r3, [pc, #456]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800811e:	4a70      	ldr	r2, [pc, #448]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 8008120:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008124:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008126:	2380      	movs	r3, #128	@ 0x80
 8008128:	617b      	str	r3, [r7, #20]
 800812a:	e024      	b.n	8008176 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	2b02      	cmp	r3, #2
 8008132:	d107      	bne.n	8008144 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008134:	4b6a      	ldr	r3, [pc, #424]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d109      	bne.n	8008154 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	e0c6      	b.n	80082d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008144:	4b66      	ldr	r3, [pc, #408]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e0be      	b.n	80082d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008154:	f000 f914 	bl	8008380 <HAL_RCC_GetSysClockFreq>
 8008158:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	4a61      	ldr	r2, [pc, #388]	@ (80082e4 <HAL_RCC_ClockConfig+0x268>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d909      	bls.n	8008176 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008162:	4b5f      	ldr	r3, [pc, #380]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800816a:	4a5d      	ldr	r2, [pc, #372]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 800816c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008170:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008172:	2380      	movs	r3, #128	@ 0x80
 8008174:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008176:	4b5a      	ldr	r3, [pc, #360]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	f023 0203 	bic.w	r2, r3, #3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	4957      	ldr	r1, [pc, #348]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 8008184:	4313      	orrs	r3, r2
 8008186:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008188:	f7fb fd58 	bl	8003c3c <HAL_GetTick>
 800818c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800818e:	e00a      	b.n	80081a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008190:	f7fb fd54 	bl	8003c3c <HAL_GetTick>
 8008194:	4602      	mov	r2, r0
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800819e:	4293      	cmp	r3, r2
 80081a0:	d901      	bls.n	80081a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e095      	b.n	80082d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081a6:	4b4e      	ldr	r3, [pc, #312]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f003 020c 	and.w	r2, r3, #12
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d1eb      	bne.n	8008190 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0302 	and.w	r3, r3, #2
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d023      	beq.n	800820c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0304 	and.w	r3, r3, #4
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d005      	beq.n	80081dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081d0:	4b43      	ldr	r3, [pc, #268]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	4a42      	ldr	r2, [pc, #264]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 80081d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80081da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0308 	and.w	r3, r3, #8
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d007      	beq.n	80081f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80081e8:	4b3d      	ldr	r3, [pc, #244]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80081f0:	4a3b      	ldr	r2, [pc, #236]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 80081f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80081f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081f8:	4b39      	ldr	r3, [pc, #228]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	4936      	ldr	r1, [pc, #216]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 8008206:	4313      	orrs	r3, r2
 8008208:	608b      	str	r3, [r1, #8]
 800820a:	e008      	b.n	800821e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	2b80      	cmp	r3, #128	@ 0x80
 8008210:	d105      	bne.n	800821e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008212:	4b33      	ldr	r3, [pc, #204]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	4a32      	ldr	r2, [pc, #200]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 8008218:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800821c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800821e:	4b2f      	ldr	r3, [pc, #188]	@ (80082dc <HAL_RCC_ClockConfig+0x260>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 030f 	and.w	r3, r3, #15
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	429a      	cmp	r2, r3
 800822a:	d21d      	bcs.n	8008268 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800822c:	4b2b      	ldr	r3, [pc, #172]	@ (80082dc <HAL_RCC_ClockConfig+0x260>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f023 020f 	bic.w	r2, r3, #15
 8008234:	4929      	ldr	r1, [pc, #164]	@ (80082dc <HAL_RCC_ClockConfig+0x260>)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	4313      	orrs	r3, r2
 800823a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800823c:	f7fb fcfe 	bl	8003c3c <HAL_GetTick>
 8008240:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008242:	e00a      	b.n	800825a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008244:	f7fb fcfa 	bl	8003c3c <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008252:	4293      	cmp	r3, r2
 8008254:	d901      	bls.n	800825a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e03b      	b.n	80082d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800825a:	4b20      	ldr	r3, [pc, #128]	@ (80082dc <HAL_RCC_ClockConfig+0x260>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 030f 	and.w	r3, r3, #15
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	429a      	cmp	r2, r3
 8008266:	d1ed      	bne.n	8008244 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0304 	and.w	r3, r3, #4
 8008270:	2b00      	cmp	r3, #0
 8008272:	d008      	beq.n	8008286 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008274:	4b1a      	ldr	r3, [pc, #104]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	4917      	ldr	r1, [pc, #92]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 8008282:	4313      	orrs	r3, r2
 8008284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0308 	and.w	r3, r3, #8
 800828e:	2b00      	cmp	r3, #0
 8008290:	d009      	beq.n	80082a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008292:	4b13      	ldr	r3, [pc, #76]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	00db      	lsls	r3, r3, #3
 80082a0:	490f      	ldr	r1, [pc, #60]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80082a6:	f000 f86b 	bl	8008380 <HAL_RCC_GetSysClockFreq>
 80082aa:	4602      	mov	r2, r0
 80082ac:	4b0c      	ldr	r3, [pc, #48]	@ (80082e0 <HAL_RCC_ClockConfig+0x264>)
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	091b      	lsrs	r3, r3, #4
 80082b2:	f003 030f 	and.w	r3, r3, #15
 80082b6:	490c      	ldr	r1, [pc, #48]	@ (80082e8 <HAL_RCC_ClockConfig+0x26c>)
 80082b8:	5ccb      	ldrb	r3, [r1, r3]
 80082ba:	f003 031f 	and.w	r3, r3, #31
 80082be:	fa22 f303 	lsr.w	r3, r2, r3
 80082c2:	4a0a      	ldr	r2, [pc, #40]	@ (80082ec <HAL_RCC_ClockConfig+0x270>)
 80082c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80082c6:	4b0a      	ldr	r3, [pc, #40]	@ (80082f0 <HAL_RCC_ClockConfig+0x274>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fa fa7e 	bl	80027cc <HAL_InitTick>
 80082d0:	4603      	mov	r3, r0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3718      	adds	r7, #24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	40022000 	.word	0x40022000
 80082e0:	40021000 	.word	0x40021000
 80082e4:	04c4b400 	.word	0x04c4b400
 80082e8:	0801371c 	.word	0x0801371c
 80082ec:	20000000 	.word	0x20000000
 80082f0:	20000004 	.word	0x20000004

080082f4 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08c      	sub	sp, #48	@ 0x30
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8008300:	2302      	movs	r3, #2
 8008302:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8008304:	2303      	movs	r3, #3
 8008306:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8008308:	2300      	movs	r3, #0
 800830a:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008312:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	0c1b      	lsrs	r3, r3, #16
 8008318:	f003 030f 	and.w	r3, r3, #15
 800831c:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8008320:	029b      	lsls	r3, r3, #10
 8008322:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	0c1b      	lsrs	r3, r3, #16
 8008328:	f003 030f 	and.w	r3, r3, #15
 800832c:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 800832e:	4b13      	ldr	r3, [pc, #76]	@ (800837c <HAL_RCC_MCOConfig+0x88>)
 8008330:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008332:	2101      	movs	r1, #1
 8008334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008336:	fa01 f303 	lsl.w	r3, r1, r3
 800833a:	4910      	ldr	r1, [pc, #64]	@ (800837c <HAL_RCC_MCOConfig+0x88>)
 800833c:	4313      	orrs	r3, r2
 800833e:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	b29b      	uxth	r3, r3
 8008344:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	0d1b      	lsrs	r3, r3, #20
 800834a:	b2db      	uxtb	r3, r3
 800834c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 800834e:	f107 0310 	add.w	r3, r7, #16
 8008352:	4619      	mov	r1, r3
 8008354:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008356:	f7fd f9b9 	bl	80056cc <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 800835a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800835c:	2b00      	cmp	r3, #0
 800835e:	d109      	bne.n	8008374 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8008360:	4b06      	ldr	r3, [pc, #24]	@ (800837c <HAL_RCC_MCOConfig+0x88>)
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008368:	68b9      	ldr	r1, [r7, #8]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	430b      	orrs	r3, r1
 800836e:	4903      	ldr	r1, [pc, #12]	@ (800837c <HAL_RCC_MCOConfig+0x88>)
 8008370:	4313      	orrs	r3, r2
 8008372:	608b      	str	r3, [r1, #8]
  }
}
 8008374:	bf00      	nop
 8008376:	3730      	adds	r7, #48	@ 0x30
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	40021000 	.word	0x40021000

08008380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008380:	b480      	push	{r7}
 8008382:	b087      	sub	sp, #28
 8008384:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008386:	4b2c      	ldr	r3, [pc, #176]	@ (8008438 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f003 030c 	and.w	r3, r3, #12
 800838e:	2b04      	cmp	r3, #4
 8008390:	d102      	bne.n	8008398 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008392:	4b2a      	ldr	r3, [pc, #168]	@ (800843c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008394:	613b      	str	r3, [r7, #16]
 8008396:	e047      	b.n	8008428 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008398:	4b27      	ldr	r3, [pc, #156]	@ (8008438 <HAL_RCC_GetSysClockFreq+0xb8>)
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	f003 030c 	and.w	r3, r3, #12
 80083a0:	2b08      	cmp	r3, #8
 80083a2:	d102      	bne.n	80083aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80083a4:	4b26      	ldr	r3, [pc, #152]	@ (8008440 <HAL_RCC_GetSysClockFreq+0xc0>)
 80083a6:	613b      	str	r3, [r7, #16]
 80083a8:	e03e      	b.n	8008428 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80083aa:	4b23      	ldr	r3, [pc, #140]	@ (8008438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f003 030c 	and.w	r3, r3, #12
 80083b2:	2b0c      	cmp	r3, #12
 80083b4:	d136      	bne.n	8008424 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80083b6:	4b20      	ldr	r3, [pc, #128]	@ (8008438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	f003 0303 	and.w	r3, r3, #3
 80083be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80083c0:	4b1d      	ldr	r3, [pc, #116]	@ (8008438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	091b      	lsrs	r3, r3, #4
 80083c6:	f003 030f 	and.w	r3, r3, #15
 80083ca:	3301      	adds	r3, #1
 80083cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2b03      	cmp	r3, #3
 80083d2:	d10c      	bne.n	80083ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80083d4:	4a1a      	ldr	r2, [pc, #104]	@ (8008440 <HAL_RCC_GetSysClockFreq+0xc0>)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083dc:	4a16      	ldr	r2, [pc, #88]	@ (8008438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80083de:	68d2      	ldr	r2, [r2, #12]
 80083e0:	0a12      	lsrs	r2, r2, #8
 80083e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80083e6:	fb02 f303 	mul.w	r3, r2, r3
 80083ea:	617b      	str	r3, [r7, #20]
      break;
 80083ec:	e00c      	b.n	8008408 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80083ee:	4a13      	ldr	r2, [pc, #76]	@ (800843c <HAL_RCC_GetSysClockFreq+0xbc>)
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f6:	4a10      	ldr	r2, [pc, #64]	@ (8008438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80083f8:	68d2      	ldr	r2, [r2, #12]
 80083fa:	0a12      	lsrs	r2, r2, #8
 80083fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008400:	fb02 f303 	mul.w	r3, r2, r3
 8008404:	617b      	str	r3, [r7, #20]
      break;
 8008406:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008408:	4b0b      	ldr	r3, [pc, #44]	@ (8008438 <HAL_RCC_GetSysClockFreq+0xb8>)
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	0e5b      	lsrs	r3, r3, #25
 800840e:	f003 0303 	and.w	r3, r3, #3
 8008412:	3301      	adds	r3, #1
 8008414:	005b      	lsls	r3, r3, #1
 8008416:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008418:	697a      	ldr	r2, [r7, #20]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008420:	613b      	str	r3, [r7, #16]
 8008422:	e001      	b.n	8008428 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008424:	2300      	movs	r3, #0
 8008426:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008428:	693b      	ldr	r3, [r7, #16]
}
 800842a:	4618      	mov	r0, r3
 800842c:	371c      	adds	r7, #28
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	40021000 	.word	0x40021000
 800843c:	00f42400 	.word	0x00f42400
 8008440:	007a1200 	.word	0x007a1200

08008444 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008444:	b480      	push	{r7}
 8008446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008448:	4b03      	ldr	r3, [pc, #12]	@ (8008458 <HAL_RCC_GetHCLKFreq+0x14>)
 800844a:	681b      	ldr	r3, [r3, #0]
}
 800844c:	4618      	mov	r0, r3
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	20000000 	.word	0x20000000

0800845c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008460:	f7ff fff0 	bl	8008444 <HAL_RCC_GetHCLKFreq>
 8008464:	4602      	mov	r2, r0
 8008466:	4b06      	ldr	r3, [pc, #24]	@ (8008480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	0a1b      	lsrs	r3, r3, #8
 800846c:	f003 0307 	and.w	r3, r3, #7
 8008470:	4904      	ldr	r1, [pc, #16]	@ (8008484 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008472:	5ccb      	ldrb	r3, [r1, r3]
 8008474:	f003 031f 	and.w	r3, r3, #31
 8008478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800847c:	4618      	mov	r0, r3
 800847e:	bd80      	pop	{r7, pc}
 8008480:	40021000 	.word	0x40021000
 8008484:	0801372c 	.word	0x0801372c

08008488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800848c:	f7ff ffda 	bl	8008444 <HAL_RCC_GetHCLKFreq>
 8008490:	4602      	mov	r2, r0
 8008492:	4b06      	ldr	r3, [pc, #24]	@ (80084ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	0adb      	lsrs	r3, r3, #11
 8008498:	f003 0307 	and.w	r3, r3, #7
 800849c:	4904      	ldr	r1, [pc, #16]	@ (80084b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800849e:	5ccb      	ldrb	r3, [r1, r3]
 80084a0:	f003 031f 	and.w	r3, r3, #31
 80084a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	40021000 	.word	0x40021000
 80084b0:	0801372c 	.word	0x0801372c

080084b4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	220f      	movs	r2, #15
 80084c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80084c4:	4b12      	ldr	r3, [pc, #72]	@ (8008510 <HAL_RCC_GetClockConfig+0x5c>)
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f003 0203 	and.w	r2, r3, #3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80084d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008510 <HAL_RCC_GetClockConfig+0x5c>)
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80084dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008510 <HAL_RCC_GetClockConfig+0x5c>)
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80084e8:	4b09      	ldr	r3, [pc, #36]	@ (8008510 <HAL_RCC_GetClockConfig+0x5c>)
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	08db      	lsrs	r3, r3, #3
 80084ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80084f6:	4b07      	ldr	r3, [pc, #28]	@ (8008514 <HAL_RCC_GetClockConfig+0x60>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 020f 	and.w	r2, r3, #15
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	601a      	str	r2, [r3, #0]
}
 8008502:	bf00      	nop
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	40021000 	.word	0x40021000
 8008514:	40022000 	.word	0x40022000

08008518 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008518:	b480      	push	{r7}
 800851a:	b087      	sub	sp, #28
 800851c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800851e:	4b1e      	ldr	r3, [pc, #120]	@ (8008598 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	f003 0303 	and.w	r3, r3, #3
 8008526:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008528:	4b1b      	ldr	r3, [pc, #108]	@ (8008598 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	091b      	lsrs	r3, r3, #4
 800852e:	f003 030f 	and.w	r3, r3, #15
 8008532:	3301      	adds	r3, #1
 8008534:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	2b03      	cmp	r3, #3
 800853a:	d10c      	bne.n	8008556 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800853c:	4a17      	ldr	r2, [pc, #92]	@ (800859c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	fbb2 f3f3 	udiv	r3, r2, r3
 8008544:	4a14      	ldr	r2, [pc, #80]	@ (8008598 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008546:	68d2      	ldr	r2, [r2, #12]
 8008548:	0a12      	lsrs	r2, r2, #8
 800854a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800854e:	fb02 f303 	mul.w	r3, r2, r3
 8008552:	617b      	str	r3, [r7, #20]
    break;
 8008554:	e00c      	b.n	8008570 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008556:	4a12      	ldr	r2, [pc, #72]	@ (80085a0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	fbb2 f3f3 	udiv	r3, r2, r3
 800855e:	4a0e      	ldr	r2, [pc, #56]	@ (8008598 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008560:	68d2      	ldr	r2, [r2, #12]
 8008562:	0a12      	lsrs	r2, r2, #8
 8008564:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008568:	fb02 f303 	mul.w	r3, r2, r3
 800856c:	617b      	str	r3, [r7, #20]
    break;
 800856e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008570:	4b09      	ldr	r3, [pc, #36]	@ (8008598 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	0e5b      	lsrs	r3, r3, #25
 8008576:	f003 0303 	and.w	r3, r3, #3
 800857a:	3301      	adds	r3, #1
 800857c:	005b      	lsls	r3, r3, #1
 800857e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	fbb2 f3f3 	udiv	r3, r2, r3
 8008588:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800858a:	687b      	ldr	r3, [r7, #4]
}
 800858c:	4618      	mov	r0, r3
 800858e:	371c      	adds	r7, #28
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr
 8008598:	40021000 	.word	0x40021000
 800859c:	007a1200 	.word	0x007a1200
 80085a0:	00f42400 	.word	0x00f42400

080085a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80085ac:	2300      	movs	r3, #0
 80085ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80085b0:	2300      	movs	r3, #0
 80085b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 8098 	beq.w	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085c2:	2300      	movs	r3, #0
 80085c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085c6:	4b43      	ldr	r3, [pc, #268]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10d      	bne.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085d2:	4b40      	ldr	r3, [pc, #256]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085d6:	4a3f      	ldr	r2, [pc, #252]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80085de:	4b3d      	ldr	r3, [pc, #244]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085e6:	60bb      	str	r3, [r7, #8]
 80085e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085ea:	2301      	movs	r3, #1
 80085ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085ee:	4b3a      	ldr	r3, [pc, #232]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a39      	ldr	r2, [pc, #228]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80085f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80085fa:	f7fb fb1f 	bl	8003c3c <HAL_GetTick>
 80085fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008600:	e009      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008602:	f7fb fb1b 	bl	8003c3c <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	2b02      	cmp	r3, #2
 800860e:	d902      	bls.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	74fb      	strb	r3, [r7, #19]
        break;
 8008614:	e005      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008616:	4b30      	ldr	r3, [pc, #192]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800861e:	2b00      	cmp	r3, #0
 8008620:	d0ef      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008622:	7cfb      	ldrb	r3, [r7, #19]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d159      	bne.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008628:	4b2a      	ldr	r3, [pc, #168]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800862a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800862e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008632:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d01e      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	429a      	cmp	r2, r3
 8008642:	d019      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008644:	4b23      	ldr	r3, [pc, #140]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800864a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800864e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008650:	4b20      	ldr	r3, [pc, #128]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008656:	4a1f      	ldr	r2, [pc, #124]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800865c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008660:	4b1c      	ldr	r3, [pc, #112]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008666:	4a1b      	ldr	r2, [pc, #108]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008668:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800866c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008670:	4a18      	ldr	r2, [pc, #96]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	2b00      	cmp	r3, #0
 8008680:	d016      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008682:	f7fb fadb 	bl	8003c3c <HAL_GetTick>
 8008686:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008688:	e00b      	b.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800868a:	f7fb fad7 	bl	8003c3c <HAL_GetTick>
 800868e:	4602      	mov	r2, r0
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008698:	4293      	cmp	r3, r2
 800869a:	d902      	bls.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	74fb      	strb	r3, [r7, #19]
            break;
 80086a0:	e006      	b.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086a2:	4b0c      	ldr	r3, [pc, #48]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086a8:	f003 0302 	and.w	r3, r3, #2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d0ec      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80086b0:	7cfb      	ldrb	r3, [r7, #19]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10b      	bne.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086b6:	4b07      	ldr	r3, [pc, #28]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086c4:	4903      	ldr	r1, [pc, #12]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086c6:	4313      	orrs	r3, r2
 80086c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80086cc:	e008      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80086ce:	7cfb      	ldrb	r3, [r7, #19]
 80086d0:	74bb      	strb	r3, [r7, #18]
 80086d2:	e005      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80086d4:	40021000 	.word	0x40021000
 80086d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086dc:	7cfb      	ldrb	r3, [r7, #19]
 80086de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80086e0:	7c7b      	ldrb	r3, [r7, #17]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d105      	bne.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086e6:	4ba7      	ldr	r3, [pc, #668]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086ea:	4aa6      	ldr	r2, [pc, #664]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80086f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00a      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80086fe:	4ba1      	ldr	r3, [pc, #644]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008704:	f023 0203 	bic.w	r2, r3, #3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	499d      	ldr	r1, [pc, #628]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800870e:	4313      	orrs	r3, r2
 8008710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0302 	and.w	r3, r3, #2
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00a      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008720:	4b98      	ldr	r3, [pc, #608]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008726:	f023 020c 	bic.w	r2, r3, #12
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	4995      	ldr	r1, [pc, #596]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008730:	4313      	orrs	r3, r2
 8008732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 0304 	and.w	r3, r3, #4
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00a      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008742:	4b90      	ldr	r3, [pc, #576]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008748:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	498c      	ldr	r1, [pc, #560]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008752:	4313      	orrs	r3, r2
 8008754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0308 	and.w	r3, r3, #8
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00a      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008764:	4b87      	ldr	r3, [pc, #540]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800876a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	4984      	ldr	r1, [pc, #528]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008774:	4313      	orrs	r3, r2
 8008776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 0310 	and.w	r3, r3, #16
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00a      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008786:	4b7f      	ldr	r3, [pc, #508]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800878c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	497b      	ldr	r1, [pc, #492]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008796:	4313      	orrs	r3, r2
 8008798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0320 	and.w	r3, r3, #32
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00a      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80087a8:	4b76      	ldr	r3, [pc, #472]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	4973      	ldr	r1, [pc, #460]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00a      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80087ca:	4b6e      	ldr	r3, [pc, #440]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	69db      	ldr	r3, [r3, #28]
 80087d8:	496a      	ldr	r1, [pc, #424]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00a      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80087ec:	4b65      	ldr	r3, [pc, #404]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	4962      	ldr	r1, [pc, #392]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00a      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800880e:	4b5d      	ldr	r3, [pc, #372]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008814:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800881c:	4959      	ldr	r1, [pc, #356]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800881e:	4313      	orrs	r3, r2
 8008820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00a      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008830:	4b54      	ldr	r3, [pc, #336]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008836:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800883e:	4951      	ldr	r1, [pc, #324]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008840:	4313      	orrs	r3, r2
 8008842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800884e:	2b00      	cmp	r3, #0
 8008850:	d015      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008852:	4b4c      	ldr	r3, [pc, #304]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008858:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008860:	4948      	ldr	r1, [pc, #288]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008862:	4313      	orrs	r3, r2
 8008864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008870:	d105      	bne.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008872:	4b44      	ldr	r3, [pc, #272]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	4a43      	ldr	r2, [pc, #268]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008878:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800887c:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008886:	2b00      	cmp	r3, #0
 8008888:	d015      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800888a:	4b3e      	ldr	r3, [pc, #248]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800888c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008890:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008898:	493a      	ldr	r1, [pc, #232]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800889a:	4313      	orrs	r3, r2
 800889c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088a8:	d105      	bne.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088aa:	4b36      	ldr	r3, [pc, #216]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	4a35      	ldr	r2, [pc, #212]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088b4:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d015      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80088c2:	4b30      	ldr	r3, [pc, #192]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088c8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088d0:	492c      	ldr	r1, [pc, #176]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088d2:	4313      	orrs	r3, r2
 80088d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088e0:	d105      	bne.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088e2:	4b28      	ldr	r3, [pc, #160]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	4a27      	ldr	r2, [pc, #156]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088ec:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d015      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80088fa:	4b22      	ldr	r3, [pc, #136]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008900:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008908:	491e      	ldr	r1, [pc, #120]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800890a:	4313      	orrs	r3, r2
 800890c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008914:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008918:	d105      	bne.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800891a:	4b1a      	ldr	r3, [pc, #104]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	4a19      	ldr	r2, [pc, #100]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008920:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008924:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800892e:	2b00      	cmp	r3, #0
 8008930:	d015      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008932:	4b14      	ldr	r3, [pc, #80]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008938:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008940:	4910      	ldr	r1, [pc, #64]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008942:	4313      	orrs	r3, r2
 8008944:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800894c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008950:	d105      	bne.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008952:	4b0c      	ldr	r3, [pc, #48]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	4a0b      	ldr	r2, [pc, #44]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008958:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800895c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d018      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800896a:	4b06      	ldr	r3, [pc, #24]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800896c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008970:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008978:	4902      	ldr	r1, [pc, #8]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800897a:	4313      	orrs	r3, r2
 800897c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	e001      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008984:	40021000 	.word	0x40021000
 8008988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800898a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800898e:	d105      	bne.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008990:	4b21      	ldr	r3, [pc, #132]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	4a20      	ldr	r2, [pc, #128]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800899a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d015      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80089a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80089aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089ae:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089b6:	4918      	ldr	r1, [pc, #96]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80089b8:	4313      	orrs	r3, r2
 80089ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089c6:	d105      	bne.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80089c8:	4b13      	ldr	r3, [pc, #76]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	4a12      	ldr	r2, [pc, #72]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80089ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089d2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d015      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80089e0:	4b0d      	ldr	r3, [pc, #52]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80089e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80089e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089ee:	490a      	ldr	r1, [pc, #40]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80089f0:	4313      	orrs	r3, r2
 80089f2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089fe:	d105      	bne.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a00:	4b05      	ldr	r3, [pc, #20]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	4a04      	ldr	r2, [pc, #16]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008a06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a0a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008a0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3718      	adds	r7, #24
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	40021000 	.word	0x40021000

08008a1c <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b08a      	sub	sp, #40	@ 0x28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8008a24:	2300      	movs	r3, #0
 8008a26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  FlagStatus       backupchanged = RESET;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  __LSCO_CLK_ENABLE();
 8008a30:	4b2d      	ldr	r3, [pc, #180]	@ (8008ae8 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a34:	4a2c      	ldr	r2, [pc, #176]	@ (8008ae8 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008a36:	f043 0301 	orr.w	r3, r3, #1
 8008a3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8008ae8 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	60fb      	str	r3, [r7, #12]
 8008a46:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 8008a48:	2304      	movs	r3, #4
 8008a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008a50:	2302      	movs	r3, #2
 8008a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a54:	2300      	movs	r3, #0
 8008a56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 8008a58:	f107 0310 	add.w	r3, r7, #16
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008a62:	f7fc fe33 	bl	80056cc <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a66:	4b20      	ldr	r3, [pc, #128]	@ (8008ae8 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10e      	bne.n	8008a90 <HAL_RCCEx_EnableLSCO+0x74>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008a72:	4b1d      	ldr	r3, [pc, #116]	@ (8008ae8 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a76:	4a1c      	ldr	r2, [pc, #112]	@ (8008ae8 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ae8 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a86:	60bb      	str	r3, [r7, #8]
 8008a88:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a90:	4b16      	ldr	r3, [pc, #88]	@ (8008aec <HAL_RCCEx_EnableLSCO+0xd0>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d104      	bne.n	8008aa6 <HAL_RCCEx_EnableLSCO+0x8a>
  {
    HAL_PWR_EnableBkUpAccess();
 8008a9c:	f7fe fe98 	bl	80077d0 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8008aa6:	4b10      	ldr	r3, [pc, #64]	@ (8008ae8 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aac:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	4a0c      	ldr	r2, [pc, #48]	@ (8008ae8 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008ab6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008aba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  if(backupchanged == SET)
 8008abe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d101      	bne.n	8008aca <HAL_RCCEx_EnableLSCO+0xae>
  {
    HAL_PWR_DisableBkUpAccess();
 8008ac6:	f7fe fe93 	bl	80077f0 <HAL_PWR_DisableBkUpAccess>
  }
  if(pwrclkchanged == SET)
 8008aca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d105      	bne.n	8008ade <HAL_RCCEx_EnableLSCO+0xc2>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8008ad2:	4b05      	ldr	r3, [pc, #20]	@ (8008ae8 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ad6:	4a04      	ldr	r2, [pc, #16]	@ (8008ae8 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008ad8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008adc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
}
 8008ade:	bf00      	nop
 8008ae0:	3728      	adds	r7, #40	@ 0x28
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	40021000 	.word	0x40021000
 8008aec:	40007000 	.word	0x40007000

08008af0 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8008af8:	4b1c      	ldr	r3, [pc, #112]	@ (8008b6c <HAL_RCCEx_CRSConfig+0x7c>)
 8008afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008afc:	4a1b      	ldr	r2, [pc, #108]	@ (8008b6c <HAL_RCCEx_CRSConfig+0x7c>)
 8008afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b02:	6393      	str	r3, [r2, #56]	@ 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 8008b04:	4b19      	ldr	r3, [pc, #100]	@ (8008b6c <HAL_RCCEx_CRSConfig+0x7c>)
 8008b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b08:	4a18      	ldr	r2, [pc, #96]	@ (8008b6c <HAL_RCCEx_CRSConfig+0x7c>)
 8008b0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b0e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	431a      	orrs	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	041b      	lsls	r3, r3, #16
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8008b38:	4a0d      	ldr	r2, [pc, #52]	@ (8008b70 <HAL_RCCEx_CRSConfig+0x80>)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8008b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8008b70 <HAL_RCCEx_CRSConfig+0x80>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	021b      	lsls	r3, r3, #8
 8008b4c:	4908      	ldr	r1, [pc, #32]	@ (8008b70 <HAL_RCCEx_CRSConfig+0x80>)
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8008b52:	4b07      	ldr	r3, [pc, #28]	@ (8008b70 <HAL_RCCEx_CRSConfig+0x80>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a06      	ldr	r2, [pc, #24]	@ (8008b70 <HAL_RCCEx_CRSConfig+0x80>)
 8008b58:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008b5c:	6013      	str	r3, [r2, #0]
}
 8008b5e:	bf00      	nop
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	40021000 	.word	0x40021000
 8008b70:	40002000 	.word	0x40002000

08008b74 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e027      	b.n	8008bd6 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	7a5b      	ldrb	r3, [r3, #9]
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d105      	bne.n	8008b9c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7f9 fae0 	bl	800215c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f023 0108 	bic.w	r1, r3, #8
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	430a      	orrs	r2, r1
 8008bb6:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f042 0204 	orr.w	r2, r2, #4
 8008bc6:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d070      	beq.n	8008cd2 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d106      	bne.n	8008c0a <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7f9 fadd 	bl	80021c4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2202      	movs	r2, #2
 8008c0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	f003 0310 	and.w	r3, r3, #16
 8008c1c:	2b10      	cmp	r3, #16
 8008c1e:	d04f      	beq.n	8008cc0 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	22ca      	movs	r2, #202	@ 0xca
 8008c26:	625a      	str	r2, [r3, #36]	@ 0x24
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2253      	movs	r2, #83	@ 0x53
 8008c2e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f877 	bl	8008d24 <RTC_EnterInitMode>
 8008c36:	4603      	mov	r3, r0
 8008c38:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008c3a:	7bfb      	ldrb	r3, [r7, #15]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d126      	bne.n	8008c8e <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	6812      	ldr	r2, [r2, #0]
 8008c4a:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8008c4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c52:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6999      	ldr	r1, [r3, #24]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	431a      	orrs	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	431a      	orrs	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	68d9      	ldr	r1, [r3, #12]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	041a      	lsls	r2, r3, #16
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	430a      	orrs	r2, r1
 8008c82:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f883 	bl	8008d90 <RTC_ExitInitMode>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8008c8e:	7bfb      	ldrb	r3, [r7, #15]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d110      	bne.n	8008cb6 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a1a      	ldr	r2, [r3, #32]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	431a      	orrs	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	695b      	ldr	r3, [r3, #20]
 8008cac:	431a      	orrs	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	22ff      	movs	r2, #255	@ 0xff
 8008cbc:	625a      	str	r2, [r3, #36]	@ 0x24
 8008cbe:	e001      	b.n	8008cc4 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d103      	bne.n	8008cd2 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8008d20 <HAL_RTC_WaitForSynchro+0x44>)
 8008cea:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008cec:	f7fa ffa6 	bl	8003c3c <HAL_GetTick>
 8008cf0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8008cf2:	e009      	b.n	8008d08 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008cf4:	f7fa ffa2 	bl	8003c3c <HAL_GetTick>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d02:	d901      	bls.n	8008d08 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e007      	b.n	8008d18 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	f003 0320 	and.w	r3, r3, #32
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d0ee      	beq.n	8008cf4 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	0001005f 	.word	0x0001005f

08008d24 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d123      	bne.n	8008d86 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68da      	ldr	r2, [r3, #12]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008d4c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008d4e:	f7fa ff75 	bl	8003c3c <HAL_GetTick>
 8008d52:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008d54:	e00d      	b.n	8008d72 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008d56:	f7fa ff71 	bl	8003c3c <HAL_GetTick>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d64:	d905      	bls.n	8008d72 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8008d66:	2303      	movs	r3, #3
 8008d68:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2203      	movs	r2, #3
 8008d6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d102      	bne.n	8008d86 <RTC_EnterInitMode+0x62>
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	d1e7      	bne.n	8008d56 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8008d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68da      	ldr	r2, [r3, #12]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008daa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	f003 0320 	and.w	r3, r3, #32
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10c      	bne.n	8008dd4 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff ff8e 	bl	8008cdc <HAL_RTC_WaitForSynchro>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d022      	beq.n	8008e0c <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2203      	movs	r2, #3
 8008dca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	73fb      	strb	r3, [r7, #15]
 8008dd2:	e01b      	b.n	8008e0c <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	699a      	ldr	r2, [r3, #24]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f022 0220 	bic.w	r2, r2, #32
 8008de2:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f7ff ff79 	bl	8008cdc <HAL_RTC_WaitForSynchro>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d005      	beq.n	8008dfc <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2203      	movs	r2, #3
 8008df4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	699a      	ldr	r2, [r3, #24]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f042 0220 	orr.w	r2, r2, #32
 8008e0a:	619a      	str	r2, [r3, #24]
  }

  return status;
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b084      	sub	sp, #16
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d101      	bne.n	8008e2c <HAL_RTCEx_SetRefClock+0x16>
 8008e28:	2302      	movs	r3, #2
 8008e2a:	e034      	b.n	8008e96 <HAL_RTCEx_SetRefClock+0x80>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2202      	movs	r2, #2
 8008e38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	22ca      	movs	r2, #202	@ 0xca
 8008e42:	625a      	str	r2, [r3, #36]	@ 0x24
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2253      	movs	r2, #83	@ 0x53
 8008e4a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f7ff ff69 	bl	8008d24 <RTC_EnterInitMode>
 8008e52:	4603      	mov	r3, r0
 8008e54:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d10c      	bne.n	8008e76 <HAL_RTCEx_SetRefClock+0x60>
  {
    /* Enable clockref detection */
    SET_BIT(hrtc->Instance->CR, RTC_CR_REFCKON);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	699a      	ldr	r2, [r3, #24]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f042 0210 	orr.w	r2, r2, #16
 8008e6a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7ff ff8f 	bl	8008d90 <RTC_ExitInitMode>
 8008e72:	4603      	mov	r3, r0
 8008e74:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	22ff      	movs	r2, #255	@ 0xff
 8008e7c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d103      	bne.n	8008e8c <HAL_RTCEx_SetRefClock+0x76>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d101      	bne.n	8008eb0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e09d      	b.n	8008fec <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d108      	bne.n	8008eca <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ec0:	d009      	beq.n	8008ed6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	61da      	str	r2, [r3, #28]
 8008ec8:	e005      	b.n	8008ed6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d106      	bne.n	8008ef6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7f9 f9c9 	bl	8002288 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2202      	movs	r2, #2
 8008efa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f0c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008f16:	d902      	bls.n	8008f1e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	60fb      	str	r3, [r7, #12]
 8008f1c:	e002      	b.n	8008f24 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008f1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008f22:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008f2c:	d007      	beq.n	8008f3e <HAL_SPI_Init+0xa0>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008f36:	d002      	beq.n	8008f3e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	f003 0302 	and.w	r3, r3, #2
 8008f58:	431a      	orrs	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	f003 0301 	and.w	r3, r3, #1
 8008f62:	431a      	orrs	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	69db      	ldr	r3, [r3, #28]
 8008f72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f76:	431a      	orrs	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a1b      	ldr	r3, [r3, #32]
 8008f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f80:	ea42 0103 	orr.w	r1, r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	430a      	orrs	r2, r1
 8008f92:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	0c1b      	lsrs	r3, r3, #16
 8008f9a:	f003 0204 	and.w	r2, r3, #4
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa2:	f003 0310 	and.w	r3, r3, #16
 8008fa6:	431a      	orrs	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fac:	f003 0308 	and.w	r3, r3, #8
 8008fb0:	431a      	orrs	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008fba:	ea42 0103 	orr.w	r1, r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	430a      	orrs	r2, r1
 8008fca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	69da      	ldr	r2, [r3, #28]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008fda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	603b      	str	r3, [r7, #0]
 8009000:	4613      	mov	r3, r2
 8009002:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009004:	f7fa fe1a 	bl	8003c3c <HAL_GetTick>
 8009008:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800900a:	88fb      	ldrh	r3, [r7, #6]
 800900c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b01      	cmp	r3, #1
 8009018:	d001      	beq.n	800901e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800901a:	2302      	movs	r3, #2
 800901c:	e15c      	b.n	80092d8 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d002      	beq.n	800902a <HAL_SPI_Transmit+0x36>
 8009024:	88fb      	ldrh	r3, [r7, #6]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d101      	bne.n	800902e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e154      	b.n	80092d8 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009034:	2b01      	cmp	r3, #1
 8009036:	d101      	bne.n	800903c <HAL_SPI_Transmit+0x48>
 8009038:	2302      	movs	r3, #2
 800903a:	e14d      	b.n	80092d8 <HAL_SPI_Transmit+0x2e4>
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2203      	movs	r2, #3
 8009048:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2200      	movs	r2, #0
 8009050:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	68ba      	ldr	r2, [r7, #8]
 8009056:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	88fa      	ldrh	r2, [r7, #6]
 800905c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	88fa      	ldrh	r2, [r7, #6]
 8009062:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800908e:	d10f      	bne.n	80090b0 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800909e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80090ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ba:	2b40      	cmp	r3, #64	@ 0x40
 80090bc:	d007      	beq.n	80090ce <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80090d6:	d952      	bls.n	800917e <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <HAL_SPI_Transmit+0xf2>
 80090e0:	8b7b      	ldrh	r3, [r7, #26]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d145      	bne.n	8009172 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ea:	881a      	ldrh	r2, [r3, #0]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f6:	1c9a      	adds	r2, r3, #2
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009100:	b29b      	uxth	r3, r3
 8009102:	3b01      	subs	r3, #1
 8009104:	b29a      	uxth	r2, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800910a:	e032      	b.n	8009172 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f003 0302 	and.w	r3, r3, #2
 8009116:	2b02      	cmp	r3, #2
 8009118:	d112      	bne.n	8009140 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800911e:	881a      	ldrh	r2, [r3, #0]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800912a:	1c9a      	adds	r2, r3, #2
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009134:	b29b      	uxth	r3, r3
 8009136:	3b01      	subs	r3, #1
 8009138:	b29a      	uxth	r2, r3
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800913e:	e018      	b.n	8009172 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009140:	f7fa fd7c 	bl	8003c3c <HAL_GetTick>
 8009144:	4602      	mov	r2, r0
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	429a      	cmp	r2, r3
 800914e:	d803      	bhi.n	8009158 <HAL_SPI_Transmit+0x164>
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009156:	d102      	bne.n	800915e <HAL_SPI_Transmit+0x16a>
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d109      	bne.n	8009172 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2201      	movs	r2, #1
 8009162:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800916e:	2303      	movs	r3, #3
 8009170:	e0b2      	b.n	80092d8 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009176:	b29b      	uxth	r3, r3
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1c7      	bne.n	800910c <HAL_SPI_Transmit+0x118>
 800917c:	e083      	b.n	8009286 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d002      	beq.n	800918c <HAL_SPI_Transmit+0x198>
 8009186:	8b7b      	ldrh	r3, [r7, #26]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d177      	bne.n	800927c <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009190:	b29b      	uxth	r3, r3
 8009192:	2b01      	cmp	r3, #1
 8009194:	d912      	bls.n	80091bc <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800919a:	881a      	ldrh	r2, [r3, #0]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a6:	1c9a      	adds	r2, r3, #2
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	3b02      	subs	r3, #2
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80091ba:	e05f      	b.n	800927c <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	330c      	adds	r3, #12
 80091c6:	7812      	ldrb	r2, [r2, #0]
 80091c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091d8:	b29b      	uxth	r3, r3
 80091da:	3b01      	subs	r3, #1
 80091dc:	b29a      	uxth	r2, r3
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80091e2:	e04b      	b.n	800927c <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f003 0302 	and.w	r3, r3, #2
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d12b      	bne.n	800924a <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d912      	bls.n	8009222 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009200:	881a      	ldrh	r2, [r3, #0]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800920c:	1c9a      	adds	r2, r3, #2
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009216:	b29b      	uxth	r3, r3
 8009218:	3b02      	subs	r3, #2
 800921a:	b29a      	uxth	r2, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009220:	e02c      	b.n	800927c <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	330c      	adds	r3, #12
 800922c:	7812      	ldrb	r2, [r2, #0]
 800922e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009234:	1c5a      	adds	r2, r3, #1
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800923e:	b29b      	uxth	r3, r3
 8009240:	3b01      	subs	r3, #1
 8009242:	b29a      	uxth	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009248:	e018      	b.n	800927c <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800924a:	f7fa fcf7 	bl	8003c3c <HAL_GetTick>
 800924e:	4602      	mov	r2, r0
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	429a      	cmp	r2, r3
 8009258:	d803      	bhi.n	8009262 <HAL_SPI_Transmit+0x26e>
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009260:	d102      	bne.n	8009268 <HAL_SPI_Transmit+0x274>
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d109      	bne.n	800927c <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009278:	2303      	movs	r3, #3
 800927a:	e02d      	b.n	80092d8 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009280:	b29b      	uxth	r3, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1ae      	bne.n	80091e4 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009286:	69fa      	ldr	r2, [r7, #28]
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	68f8      	ldr	r0, [r7, #12]
 800928c:	f000 fcf6 	bl	8009c7c <SPI_EndRxTxTransaction>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d002      	beq.n	800929c <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2220      	movs	r2, #32
 800929a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10a      	bne.n	80092ba <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092a4:	2300      	movs	r3, #0
 80092a6:	617b      	str	r3, [r7, #20]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	617b      	str	r3, [r7, #20]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	617b      	str	r3, [r7, #20]
 80092b8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e000      	b.n	80092d8 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80092d6:	2300      	movs	r3, #0
  }
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3720      	adds	r7, #32
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b088      	sub	sp, #32
 80092e4:	af02      	add	r7, sp, #8
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	603b      	str	r3, [r7, #0]
 80092ec:	4613      	mov	r3, r2
 80092ee:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d001      	beq.n	8009300 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80092fc:	2302      	movs	r3, #2
 80092fe:	e123      	b.n	8009548 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d002      	beq.n	800930c <HAL_SPI_Receive+0x2c>
 8009306:	88fb      	ldrh	r3, [r7, #6]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d101      	bne.n	8009310 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	e11b      	b.n	8009548 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009318:	d112      	bne.n	8009340 <HAL_SPI_Receive+0x60>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10e      	bne.n	8009340 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2204      	movs	r2, #4
 8009326:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800932a:	88fa      	ldrh	r2, [r7, #6]
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	4613      	mov	r3, r2
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	68b9      	ldr	r1, [r7, #8]
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f000 f90a 	bl	8009550 <HAL_SPI_TransmitReceive>
 800933c:	4603      	mov	r3, r0
 800933e:	e103      	b.n	8009548 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009340:	f7fa fc7c 	bl	8003c3c <HAL_GetTick>
 8009344:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800934c:	2b01      	cmp	r3, #1
 800934e:	d101      	bne.n	8009354 <HAL_SPI_Receive+0x74>
 8009350:	2302      	movs	r3, #2
 8009352:	e0f9      	b.n	8009548 <HAL_SPI_Receive+0x268>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2204      	movs	r2, #4
 8009360:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2200      	movs	r2, #0
 8009368:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	88fa      	ldrh	r2, [r7, #6]
 8009374:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	88fa      	ldrh	r2, [r7, #6]
 800937c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80093a6:	d908      	bls.n	80093ba <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80093b6:	605a      	str	r2, [r3, #4]
 80093b8:	e007      	b.n	80093ca <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	685a      	ldr	r2, [r3, #4]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80093c8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093d2:	d10f      	bne.n	80093f4 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80093f2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093fe:	2b40      	cmp	r3, #64	@ 0x40
 8009400:	d007      	beq.n	8009412 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009410:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800941a:	d875      	bhi.n	8009508 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800941c:	e037      	b.n	800948e <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f003 0301 	and.w	r3, r3, #1
 8009428:	2b01      	cmp	r3, #1
 800942a:	d117      	bne.n	800945c <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f103 020c 	add.w	r2, r3, #12
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009438:	7812      	ldrb	r2, [r2, #0]
 800943a:	b2d2      	uxtb	r2, r2
 800943c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009442:	1c5a      	adds	r2, r3, #1
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800944e:	b29b      	uxth	r3, r3
 8009450:	3b01      	subs	r3, #1
 8009452:	b29a      	uxth	r2, r3
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800945a:	e018      	b.n	800948e <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800945c:	f7fa fbee 	bl	8003c3c <HAL_GetTick>
 8009460:	4602      	mov	r2, r0
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	683a      	ldr	r2, [r7, #0]
 8009468:	429a      	cmp	r2, r3
 800946a:	d803      	bhi.n	8009474 <HAL_SPI_Receive+0x194>
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009472:	d102      	bne.n	800947a <HAL_SPI_Receive+0x19a>
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d109      	bne.n	800948e <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e05c      	b.n	8009548 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009494:	b29b      	uxth	r3, r3
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1c1      	bne.n	800941e <HAL_SPI_Receive+0x13e>
 800949a:	e03b      	b.n	8009514 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f003 0301 	and.w	r3, r3, #1
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d115      	bne.n	80094d6 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68da      	ldr	r2, [r3, #12]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094b4:	b292      	uxth	r2, r2
 80094b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094bc:	1c9a      	adds	r2, r3, #2
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	3b01      	subs	r3, #1
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80094d4:	e018      	b.n	8009508 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094d6:	f7fa fbb1 	bl	8003c3c <HAL_GetTick>
 80094da:	4602      	mov	r2, r0
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d803      	bhi.n	80094ee <HAL_SPI_Receive+0x20e>
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ec:	d102      	bne.n	80094f4 <HAL_SPI_Receive+0x214>
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d109      	bne.n	8009508 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009504:	2303      	movs	r3, #3
 8009506:	e01f      	b.n	8009548 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800950e:	b29b      	uxth	r3, r3
 8009510:	2b00      	cmp	r3, #0
 8009512:	d1c3      	bne.n	800949c <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009514:	697a      	ldr	r2, [r7, #20]
 8009516:	6839      	ldr	r1, [r7, #0]
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f000 fb57 	bl	8009bcc <SPI_EndRxTransaction>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d002      	beq.n	800952a <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2220      	movs	r2, #32
 8009528:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	e000      	b.n	8009548 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8009546:	2300      	movs	r3, #0
  }
}
 8009548:	4618      	mov	r0, r3
 800954a:	3718      	adds	r7, #24
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b08a      	sub	sp, #40	@ 0x28
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
 800955c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800955e:	2301      	movs	r3, #1
 8009560:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009562:	f7fa fb6b 	bl	8003c3c <HAL_GetTick>
 8009566:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800956e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009576:	887b      	ldrh	r3, [r7, #2]
 8009578:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800957a:	887b      	ldrh	r3, [r7, #2]
 800957c:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800957e:	7ffb      	ldrb	r3, [r7, #31]
 8009580:	2b01      	cmp	r3, #1
 8009582:	d00c      	beq.n	800959e <HAL_SPI_TransmitReceive+0x4e>
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800958a:	d106      	bne.n	800959a <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d102      	bne.n	800959a <HAL_SPI_TransmitReceive+0x4a>
 8009594:	7ffb      	ldrb	r3, [r7, #31]
 8009596:	2b04      	cmp	r3, #4
 8009598:	d001      	beq.n	800959e <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800959a:	2302      	movs	r3, #2
 800959c:	e1f3      	b.n	8009986 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d005      	beq.n	80095b0 <HAL_SPI_TransmitReceive+0x60>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d002      	beq.n	80095b0 <HAL_SPI_TransmitReceive+0x60>
 80095aa:	887b      	ldrh	r3, [r7, #2]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d101      	bne.n	80095b4 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	e1e8      	b.n	8009986 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d101      	bne.n	80095c2 <HAL_SPI_TransmitReceive+0x72>
 80095be:	2302      	movs	r3, #2
 80095c0:	e1e1      	b.n	8009986 <HAL_SPI_TransmitReceive+0x436>
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2b04      	cmp	r3, #4
 80095d4:	d003      	beq.n	80095de <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2205      	movs	r2, #5
 80095da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2200      	movs	r2, #0
 80095e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	887a      	ldrh	r2, [r7, #2]
 80095ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	887a      	ldrh	r2, [r7, #2]
 80095f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	887a      	ldrh	r2, [r7, #2]
 8009604:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	887a      	ldrh	r2, [r7, #2]
 800960a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009620:	d802      	bhi.n	8009628 <HAL_SPI_TransmitReceive+0xd8>
 8009622:	8abb      	ldrh	r3, [r7, #20]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d908      	bls.n	800963a <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	685a      	ldr	r2, [r3, #4]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009636:	605a      	str	r2, [r3, #4]
 8009638:	e007      	b.n	800964a <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009648:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009654:	2b40      	cmp	r3, #64	@ 0x40
 8009656:	d007      	beq.n	8009668 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009666:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009670:	f240 8083 	bls.w	800977a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d002      	beq.n	8009682 <HAL_SPI_TransmitReceive+0x132>
 800967c:	8afb      	ldrh	r3, [r7, #22]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d16f      	bne.n	8009762 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009686:	881a      	ldrh	r2, [r3, #0]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009692:	1c9a      	adds	r2, r3, #2
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800969c:	b29b      	uxth	r3, r3
 800969e:	3b01      	subs	r3, #1
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096a6:	e05c      	b.n	8009762 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f003 0302 	and.w	r3, r3, #2
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d11b      	bne.n	80096ee <HAL_SPI_TransmitReceive+0x19e>
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d016      	beq.n	80096ee <HAL_SPI_TransmitReceive+0x19e>
 80096c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d113      	bne.n	80096ee <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ca:	881a      	ldrh	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096d6:	1c9a      	adds	r2, r3, #2
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	3b01      	subs	r3, #1
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80096ea:	2300      	movs	r3, #0
 80096ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	f003 0301 	and.w	r3, r3, #1
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d11c      	bne.n	8009736 <HAL_SPI_TransmitReceive+0x1e6>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009702:	b29b      	uxth	r3, r3
 8009704:	2b00      	cmp	r3, #0
 8009706:	d016      	beq.n	8009736 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68da      	ldr	r2, [r3, #12]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009712:	b292      	uxth	r2, r2
 8009714:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800971a:	1c9a      	adds	r2, r3, #2
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009726:	b29b      	uxth	r3, r3
 8009728:	3b01      	subs	r3, #1
 800972a:	b29a      	uxth	r2, r3
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009732:	2301      	movs	r3, #1
 8009734:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009736:	f7fa fa81 	bl	8003c3c <HAL_GetTick>
 800973a:	4602      	mov	r2, r0
 800973c:	6a3b      	ldr	r3, [r7, #32]
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009742:	429a      	cmp	r2, r3
 8009744:	d80d      	bhi.n	8009762 <HAL_SPI_TransmitReceive+0x212>
 8009746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800974c:	d009      	beq.n	8009762 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2201      	movs	r2, #1
 8009752:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800975e:	2303      	movs	r3, #3
 8009760:	e111      	b.n	8009986 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009766:	b29b      	uxth	r3, r3
 8009768:	2b00      	cmp	r3, #0
 800976a:	d19d      	bne.n	80096a8 <HAL_SPI_TransmitReceive+0x158>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009772:	b29b      	uxth	r3, r3
 8009774:	2b00      	cmp	r3, #0
 8009776:	d197      	bne.n	80096a8 <HAL_SPI_TransmitReceive+0x158>
 8009778:	e0e5      	b.n	8009946 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d003      	beq.n	800978a <HAL_SPI_TransmitReceive+0x23a>
 8009782:	8afb      	ldrh	r3, [r7, #22]
 8009784:	2b01      	cmp	r3, #1
 8009786:	f040 80d1 	bne.w	800992c <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800978e:	b29b      	uxth	r3, r3
 8009790:	2b01      	cmp	r3, #1
 8009792:	d912      	bls.n	80097ba <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009798:	881a      	ldrh	r2, [r3, #0]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097a4:	1c9a      	adds	r2, r3, #2
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	3b02      	subs	r3, #2
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80097b8:	e0b8      	b.n	800992c <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	330c      	adds	r3, #12
 80097c4:	7812      	ldrb	r2, [r2, #0]
 80097c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097cc:	1c5a      	adds	r2, r3, #1
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	3b01      	subs	r3, #1
 80097da:	b29a      	uxth	r2, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097e0:	e0a4      	b.n	800992c <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f003 0302 	and.w	r3, r3, #2
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d134      	bne.n	800985a <HAL_SPI_TransmitReceive+0x30a>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d02f      	beq.n	800985a <HAL_SPI_TransmitReceive+0x30a>
 80097fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d12c      	bne.n	800985a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009804:	b29b      	uxth	r3, r3
 8009806:	2b01      	cmp	r3, #1
 8009808:	d912      	bls.n	8009830 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800980e:	881a      	ldrh	r2, [r3, #0]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800981a:	1c9a      	adds	r2, r3, #2
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009824:	b29b      	uxth	r3, r3
 8009826:	3b02      	subs	r3, #2
 8009828:	b29a      	uxth	r2, r3
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800982e:	e012      	b.n	8009856 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	330c      	adds	r3, #12
 800983a:	7812      	ldrb	r2, [r2, #0]
 800983c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009842:	1c5a      	adds	r2, r3, #1
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800984c:	b29b      	uxth	r3, r3
 800984e:	3b01      	subs	r3, #1
 8009850:	b29a      	uxth	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009856:	2300      	movs	r3, #0
 8009858:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	f003 0301 	and.w	r3, r3, #1
 8009864:	2b01      	cmp	r3, #1
 8009866:	d148      	bne.n	80098fa <HAL_SPI_TransmitReceive+0x3aa>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800986e:	b29b      	uxth	r3, r3
 8009870:	2b00      	cmp	r3, #0
 8009872:	d042      	beq.n	80098fa <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800987a:	b29b      	uxth	r3, r3
 800987c:	2b01      	cmp	r3, #1
 800987e:	d923      	bls.n	80098c8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68da      	ldr	r2, [r3, #12]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800988a:	b292      	uxth	r2, r2
 800988c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009892:	1c9a      	adds	r2, r3, #2
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800989e:	b29b      	uxth	r3, r3
 80098a0:	3b02      	subs	r3, #2
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d81f      	bhi.n	80098f6 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	685a      	ldr	r2, [r3, #4]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80098c4:	605a      	str	r2, [r3, #4]
 80098c6:	e016      	b.n	80098f6 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f103 020c 	add.w	r2, r3, #12
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098d4:	7812      	ldrb	r2, [r2, #0]
 80098d6:	b2d2      	uxtb	r2, r2
 80098d8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	3b01      	subs	r3, #1
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80098f6:	2301      	movs	r3, #1
 80098f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80098fa:	f7fa f99f 	bl	8003c3c <HAL_GetTick>
 80098fe:	4602      	mov	r2, r0
 8009900:	6a3b      	ldr	r3, [r7, #32]
 8009902:	1ad3      	subs	r3, r2, r3
 8009904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009906:	429a      	cmp	r2, r3
 8009908:	d803      	bhi.n	8009912 <HAL_SPI_TransmitReceive+0x3c2>
 800990a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009910:	d102      	bne.n	8009918 <HAL_SPI_TransmitReceive+0x3c8>
 8009912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009914:	2b00      	cmp	r3, #0
 8009916:	d109      	bne.n	800992c <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009928:	2303      	movs	r3, #3
 800992a:	e02c      	b.n	8009986 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009930:	b29b      	uxth	r3, r3
 8009932:	2b00      	cmp	r3, #0
 8009934:	f47f af55 	bne.w	80097e2 <HAL_SPI_TransmitReceive+0x292>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800993e:	b29b      	uxth	r3, r3
 8009940:	2b00      	cmp	r3, #0
 8009942:	f47f af4e 	bne.w	80097e2 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009946:	6a3a      	ldr	r2, [r7, #32]
 8009948:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f000 f996 	bl	8009c7c <SPI_EndRxTxTransaction>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d008      	beq.n	8009968 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2220      	movs	r2, #32
 800995a:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	e00e      	b.n	8009986 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800997c:	2b00      	cmp	r3, #0
 800997e:	d001      	beq.n	8009984 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e000      	b.n	8009986 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009984:	2300      	movs	r3, #0
  }
}
 8009986:	4618      	mov	r0, r3
 8009988:	3728      	adds	r7, #40	@ 0x28
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
	...

08009990 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b088      	sub	sp, #32
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	603b      	str	r3, [r7, #0]
 800999c:	4613      	mov	r3, r2
 800999e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80099a0:	f7fa f94c 	bl	8003c3c <HAL_GetTick>
 80099a4:	4602      	mov	r2, r0
 80099a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a8:	1a9b      	subs	r3, r3, r2
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	4413      	add	r3, r2
 80099ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80099b0:	f7fa f944 	bl	8003c3c <HAL_GetTick>
 80099b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80099b6:	4b39      	ldr	r3, [pc, #228]	@ (8009a9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	015b      	lsls	r3, r3, #5
 80099bc:	0d1b      	lsrs	r3, r3, #20
 80099be:	69fa      	ldr	r2, [r7, #28]
 80099c0:	fb02 f303 	mul.w	r3, r2, r3
 80099c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80099c6:	e054      	b.n	8009a72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ce:	d050      	beq.n	8009a72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80099d0:	f7fa f934 	bl	8003c3c <HAL_GetTick>
 80099d4:	4602      	mov	r2, r0
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	69fa      	ldr	r2, [r7, #28]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d902      	bls.n	80099e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d13d      	bne.n	8009a62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80099f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80099fe:	d111      	bne.n	8009a24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a08:	d004      	beq.n	8009a14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a12:	d107      	bne.n	8009a24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a2c:	d10f      	bne.n	8009a4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009a4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2201      	movs	r2, #1
 8009a52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	e017      	b.n	8009a92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d101      	bne.n	8009a6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	689a      	ldr	r2, [r3, #8]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	bf0c      	ite	eq
 8009a82:	2301      	moveq	r3, #1
 8009a84:	2300      	movne	r3, #0
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	461a      	mov	r2, r3
 8009a8a:	79fb      	ldrb	r3, [r7, #7]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d19b      	bne.n	80099c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3720      	adds	r7, #32
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	20000000 	.word	0x20000000

08009aa0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b08a      	sub	sp, #40	@ 0x28
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
 8009aac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009ab2:	f7fa f8c3 	bl	8003c3c <HAL_GetTick>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aba:	1a9b      	subs	r3, r3, r2
 8009abc:	683a      	ldr	r2, [r7, #0]
 8009abe:	4413      	add	r3, r2
 8009ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009ac2:	f7fa f8bb 	bl	8003c3c <HAL_GetTick>
 8009ac6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	330c      	adds	r3, #12
 8009ace:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009ad0:	4b3d      	ldr	r3, [pc, #244]	@ (8009bc8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	4613      	mov	r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	4413      	add	r3, r2
 8009ada:	00da      	lsls	r2, r3, #3
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	0d1b      	lsrs	r3, r3, #20
 8009ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ae2:	fb02 f303 	mul.w	r3, r2, r3
 8009ae6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009ae8:	e060      	b.n	8009bac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009af0:	d107      	bne.n	8009b02 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d104      	bne.n	8009b02 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009b00:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b08:	d050      	beq.n	8009bac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b0a:	f7fa f897 	bl	8003c3c <HAL_GetTick>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	6a3b      	ldr	r3, [r7, #32]
 8009b12:	1ad3      	subs	r3, r2, r3
 8009b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d902      	bls.n	8009b20 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d13d      	bne.n	8009b9c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	685a      	ldr	r2, [r3, #4]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009b2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b38:	d111      	bne.n	8009b5e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b42:	d004      	beq.n	8009b4e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b4c:	d107      	bne.n	8009b5e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b66:	d10f      	bne.n	8009b88 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009b76:	601a      	str	r2, [r3, #0]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	e010      	b.n	8009bbe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d101      	bne.n	8009ba6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	689a      	ldr	r2, [r3, #8]
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d196      	bne.n	8009aea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3728      	adds	r7, #40	@ 0x28
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	20000000 	.word	0x20000000

08009bcc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b086      	sub	sp, #24
 8009bd0:	af02      	add	r7, sp, #8
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009be0:	d111      	bne.n	8009c06 <SPI_EndRxTransaction+0x3a>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bea:	d004      	beq.n	8009bf6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bf4:	d107      	bne.n	8009c06 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c04:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	2180      	movs	r1, #128	@ 0x80
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f7ff febd 	bl	8009990 <SPI_WaitFlagStateUntilTimeout>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d007      	beq.n	8009c2c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c20:	f043 0220 	orr.w	r2, r3, #32
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e023      	b.n	8009c74 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c34:	d11d      	bne.n	8009c72 <SPI_EndRxTransaction+0xa6>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c3e:	d004      	beq.n	8009c4a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c48:	d113      	bne.n	8009c72 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	9300      	str	r3, [sp, #0]
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f7ff ff22 	bl	8009aa0 <SPI_WaitFifoStateUntilTimeout>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d007      	beq.n	8009c72 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c66:	f043 0220 	orr.w	r2, r3, #32
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	e000      	b.n	8009c74 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b086      	sub	sp, #24
 8009c80:	af02      	add	r7, sp, #8
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	9300      	str	r3, [sp, #0]
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f7ff ff03 	bl	8009aa0 <SPI_WaitFifoStateUntilTimeout>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d007      	beq.n	8009cb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ca4:	f043 0220 	orr.w	r2, r3, #32
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e027      	b.n	8009d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	2180      	movs	r1, #128	@ 0x80
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f7ff fe68 	bl	8009990 <SPI_WaitFlagStateUntilTimeout>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d007      	beq.n	8009cd6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cca:	f043 0220 	orr.w	r2, r3, #32
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e014      	b.n	8009d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f7ff fedc 	bl	8009aa0 <SPI_WaitFifoStateUntilTimeout>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d007      	beq.n	8009cfe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cf2:	f043 0220 	orr.w	r2, r3, #32
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	e000      	b.n	8009d00 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d101      	bne.n	8009d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	e049      	b.n	8009dae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d106      	bne.n	8009d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f7f8 fb7e 	bl	8002430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2202      	movs	r2, #2
 8009d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	3304      	adds	r3, #4
 8009d44:	4619      	mov	r1, r3
 8009d46:	4610      	mov	r0, r2
 8009d48:	f000 fd32 	bl	800a7b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
	...

08009db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d001      	beq.n	8009dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e04f      	b.n	8009e70 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68da      	ldr	r2, [r3, #12]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f042 0201 	orr.w	r2, r2, #1
 8009de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a23      	ldr	r2, [pc, #140]	@ (8009e7c <HAL_TIM_Base_Start_IT+0xc4>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d01d      	beq.n	8009e2e <HAL_TIM_Base_Start_IT+0x76>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dfa:	d018      	beq.n	8009e2e <HAL_TIM_Base_Start_IT+0x76>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a1f      	ldr	r2, [pc, #124]	@ (8009e80 <HAL_TIM_Base_Start_IT+0xc8>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d013      	beq.n	8009e2e <HAL_TIM_Base_Start_IT+0x76>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8009e84 <HAL_TIM_Base_Start_IT+0xcc>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d00e      	beq.n	8009e2e <HAL_TIM_Base_Start_IT+0x76>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a1c      	ldr	r2, [pc, #112]	@ (8009e88 <HAL_TIM_Base_Start_IT+0xd0>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d009      	beq.n	8009e2e <HAL_TIM_Base_Start_IT+0x76>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8009e8c <HAL_TIM_Base_Start_IT+0xd4>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d004      	beq.n	8009e2e <HAL_TIM_Base_Start_IT+0x76>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a19      	ldr	r2, [pc, #100]	@ (8009e90 <HAL_TIM_Base_Start_IT+0xd8>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d115      	bne.n	8009e5a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	689a      	ldr	r2, [r3, #8]
 8009e34:	4b17      	ldr	r3, [pc, #92]	@ (8009e94 <HAL_TIM_Base_Start_IT+0xdc>)
 8009e36:	4013      	ands	r3, r2
 8009e38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2b06      	cmp	r3, #6
 8009e3e:	d015      	beq.n	8009e6c <HAL_TIM_Base_Start_IT+0xb4>
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e46:	d011      	beq.n	8009e6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f042 0201 	orr.w	r2, r2, #1
 8009e56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e58:	e008      	b.n	8009e6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f042 0201 	orr.w	r2, r2, #1
 8009e68:	601a      	str	r2, [r3, #0]
 8009e6a:	e000      	b.n	8009e6e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	40012c00 	.word	0x40012c00
 8009e80:	40000400 	.word	0x40000400
 8009e84:	40000800 	.word	0x40000800
 8009e88:	40013400 	.word	0x40013400
 8009e8c:	40014000 	.word	0x40014000
 8009e90:	40015000 	.word	0x40015000
 8009e94:	00010007 	.word	0x00010007

08009e98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d101      	bne.n	8009eaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e049      	b.n	8009f3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d106      	bne.n	8009ec4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f7f8 fafe 	bl	80024c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2202      	movs	r2, #2
 8009ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	3304      	adds	r3, #4
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	4610      	mov	r0, r2
 8009ed8:	f000 fc6a 	bl	800a7b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b086      	sub	sp, #24
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d101      	bne.n	8009f5a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e097      	b.n	800a08a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d106      	bne.n	8009f74 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f7f8 f9ce 	bl	8002310 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2202      	movs	r2, #2
 8009f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	6812      	ldr	r2, [r2, #0]
 8009f86:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8009f8a:	f023 0307 	bic.w	r3, r3, #7
 8009f8e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	3304      	adds	r3, #4
 8009f98:	4619      	mov	r1, r3
 8009f9a:	4610      	mov	r0, r2
 8009f9c:	f000 fc08 	bl	800a7b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	699b      	ldr	r3, [r3, #24]
 8009fae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
 8009fb6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	697a      	ldr	r2, [r7, #20]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fc8:	f023 0303 	bic.w	r3, r3, #3
 8009fcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	689a      	ldr	r2, [r3, #8]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	699b      	ldr	r3, [r3, #24]
 8009fd6:	021b      	lsls	r3, r3, #8
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009fe6:	f023 030c 	bic.w	r3, r3, #12
 8009fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009ff2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	68da      	ldr	r2, [r3, #12]
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	69db      	ldr	r3, [r3, #28]
 800a000:	021b      	lsls	r3, r3, #8
 800a002:	4313      	orrs	r3, r2
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	4313      	orrs	r3, r2
 800a008:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	011a      	lsls	r2, r3, #4
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	6a1b      	ldr	r3, [r3, #32]
 800a014:	031b      	lsls	r3, r3, #12
 800a016:	4313      	orrs	r3, r2
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a024:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a02c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	685a      	ldr	r2, [r3, #4]
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	695b      	ldr	r3, [r3, #20]
 800a036:	011b      	lsls	r3, r3, #4
 800a038:	4313      	orrs	r3, r2
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	693a      	ldr	r2, [r7, #16]
 800a04e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2201      	movs	r2, #1
 800a074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3718      	adds	r7, #24
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b084      	sub	sp, #16
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	f003 0302 	and.w	r3, r3, #2
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d020      	beq.n	800a0f6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f003 0302 	and.w	r3, r3, #2
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d01b      	beq.n	800a0f6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f06f 0202 	mvn.w	r2, #2
 800a0c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	f003 0303 	and.w	r3, r3, #3
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d003      	beq.n	800a0e4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 fb49 	bl	800a774 <HAL_TIM_IC_CaptureCallback>
 800a0e2:	e005      	b.n	800a0f0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 fb3b 	bl	800a760 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fb4c 	bl	800a788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	f003 0304 	and.w	r3, r3, #4
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d020      	beq.n	800a142 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f003 0304 	and.w	r3, r3, #4
 800a106:	2b00      	cmp	r3, #0
 800a108:	d01b      	beq.n	800a142 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f06f 0204 	mvn.w	r2, #4
 800a112:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2202      	movs	r2, #2
 800a118:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a124:	2b00      	cmp	r3, #0
 800a126:	d003      	beq.n	800a130 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 fb23 	bl	800a774 <HAL_TIM_IC_CaptureCallback>
 800a12e:	e005      	b.n	800a13c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 fb15 	bl	800a760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fb26 	bl	800a788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	f003 0308 	and.w	r3, r3, #8
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d020      	beq.n	800a18e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f003 0308 	and.w	r3, r3, #8
 800a152:	2b00      	cmp	r3, #0
 800a154:	d01b      	beq.n	800a18e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f06f 0208 	mvn.w	r2, #8
 800a15e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2204      	movs	r2, #4
 800a164:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	69db      	ldr	r3, [r3, #28]
 800a16c:	f003 0303 	and.w	r3, r3, #3
 800a170:	2b00      	cmp	r3, #0
 800a172:	d003      	beq.n	800a17c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 fafd 	bl	800a774 <HAL_TIM_IC_CaptureCallback>
 800a17a:	e005      	b.n	800a188 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 faef 	bl	800a760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 fb00 	bl	800a788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	f003 0310 	and.w	r3, r3, #16
 800a194:	2b00      	cmp	r3, #0
 800a196:	d020      	beq.n	800a1da <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f003 0310 	and.w	r3, r3, #16
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d01b      	beq.n	800a1da <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f06f 0210 	mvn.w	r2, #16
 800a1aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2208      	movs	r2, #8
 800a1b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	69db      	ldr	r3, [r3, #28]
 800a1b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d003      	beq.n	800a1c8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 fad7 	bl	800a774 <HAL_TIM_IC_CaptureCallback>
 800a1c6:	e005      	b.n	800a1d4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fac9 	bl	800a760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fada 	bl	800a788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	f003 0301 	and.w	r3, r3, #1
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00c      	beq.n	800a1fe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f003 0301 	and.w	r3, r3, #1
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d007      	beq.n	800a1fe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f06f 0201 	mvn.w	r2, #1
 800a1f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f7f7 fe71 	bl	8001ee0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a204:	2b00      	cmp	r3, #0
 800a206:	d104      	bne.n	800a212 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00c      	beq.n	800a22c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d007      	beq.n	800a22c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f001 f899 	bl	800b35e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00c      	beq.n	800a250 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d007      	beq.n	800a250 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f001 f891 	bl	800b372 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00c      	beq.n	800a274 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a260:	2b00      	cmp	r3, #0
 800a262:	d007      	beq.n	800a274 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a26c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 fa94 	bl	800a79c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	f003 0320 	and.w	r3, r3, #32
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00c      	beq.n	800a298 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f003 0320 	and.w	r3, r3, #32
 800a284:	2b00      	cmp	r3, #0
 800a286:	d007      	beq.n	800a298 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f06f 0220 	mvn.w	r2, #32
 800a290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f001 f859 	bl	800b34a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00c      	beq.n	800a2bc <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d007      	beq.n	800a2bc <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a2b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f001 f865 	bl	800b386 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00c      	beq.n	800a2e0 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d007      	beq.n	800a2e0 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a2d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f001 f85d 	bl	800b39a <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00c      	beq.n	800a304 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d007      	beq.n	800a304 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a2fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f001 f855 	bl	800b3ae <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00c      	beq.n	800a328 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a314:	2b00      	cmp	r3, #0
 800a316:	d007      	beq.n	800a328 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f001 f84d 	bl	800b3c2 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a328:	bf00      	nop
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b086      	sub	sp, #24
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a33c:	2300      	movs	r3, #0
 800a33e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a346:	2b01      	cmp	r3, #1
 800a348:	d101      	bne.n	800a34e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a34a:	2302      	movs	r3, #2
 800a34c:	e0ff      	b.n	800a54e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2201      	movs	r2, #1
 800a352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2b14      	cmp	r3, #20
 800a35a:	f200 80f0 	bhi.w	800a53e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a35e:	a201      	add	r2, pc, #4	@ (adr r2, 800a364 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a364:	0800a3b9 	.word	0x0800a3b9
 800a368:	0800a53f 	.word	0x0800a53f
 800a36c:	0800a53f 	.word	0x0800a53f
 800a370:	0800a53f 	.word	0x0800a53f
 800a374:	0800a3f9 	.word	0x0800a3f9
 800a378:	0800a53f 	.word	0x0800a53f
 800a37c:	0800a53f 	.word	0x0800a53f
 800a380:	0800a53f 	.word	0x0800a53f
 800a384:	0800a43b 	.word	0x0800a43b
 800a388:	0800a53f 	.word	0x0800a53f
 800a38c:	0800a53f 	.word	0x0800a53f
 800a390:	0800a53f 	.word	0x0800a53f
 800a394:	0800a47b 	.word	0x0800a47b
 800a398:	0800a53f 	.word	0x0800a53f
 800a39c:	0800a53f 	.word	0x0800a53f
 800a3a0:	0800a53f 	.word	0x0800a53f
 800a3a4:	0800a4bd 	.word	0x0800a4bd
 800a3a8:	0800a53f 	.word	0x0800a53f
 800a3ac:	0800a53f 	.word	0x0800a53f
 800a3b0:	0800a53f 	.word	0x0800a53f
 800a3b4:	0800a4fd 	.word	0x0800a4fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68b9      	ldr	r1, [r7, #8]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f000 faa0 	bl	800a904 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	699a      	ldr	r2, [r3, #24]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f042 0208 	orr.w	r2, r2, #8
 800a3d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	699a      	ldr	r2, [r3, #24]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f022 0204 	bic.w	r2, r2, #4
 800a3e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	6999      	ldr	r1, [r3, #24]
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	691a      	ldr	r2, [r3, #16]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	430a      	orrs	r2, r1
 800a3f4:	619a      	str	r2, [r3, #24]
      break;
 800a3f6:	e0a5      	b.n	800a544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68b9      	ldr	r1, [r7, #8]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f000 fb1a 	bl	800aa38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	699a      	ldr	r2, [r3, #24]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	699a      	ldr	r2, [r3, #24]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6999      	ldr	r1, [r3, #24]
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	021a      	lsls	r2, r3, #8
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	430a      	orrs	r2, r1
 800a436:	619a      	str	r2, [r3, #24]
      break;
 800a438:	e084      	b.n	800a544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	68b9      	ldr	r1, [r7, #8]
 800a440:	4618      	mov	r0, r3
 800a442:	f000 fb8d 	bl	800ab60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	69da      	ldr	r2, [r3, #28]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f042 0208 	orr.w	r2, r2, #8
 800a454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	69da      	ldr	r2, [r3, #28]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f022 0204 	bic.w	r2, r2, #4
 800a464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	69d9      	ldr	r1, [r3, #28]
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	691a      	ldr	r2, [r3, #16]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	430a      	orrs	r2, r1
 800a476:	61da      	str	r2, [r3, #28]
      break;
 800a478:	e064      	b.n	800a544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68b9      	ldr	r1, [r7, #8]
 800a480:	4618      	mov	r0, r3
 800a482:	f000 fbff 	bl	800ac84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	69da      	ldr	r2, [r3, #28]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	69da      	ldr	r2, [r3, #28]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a4a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	69d9      	ldr	r1, [r3, #28]
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	021a      	lsls	r2, r3, #8
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	430a      	orrs	r2, r1
 800a4b8:	61da      	str	r2, [r3, #28]
      break;
 800a4ba:	e043      	b.n	800a544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68b9      	ldr	r1, [r7, #8]
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f000 fc72 	bl	800adac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f042 0208 	orr.w	r2, r2, #8
 800a4d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f022 0204 	bic.w	r2, r2, #4
 800a4e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	691a      	ldr	r2, [r3, #16]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	430a      	orrs	r2, r1
 800a4f8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a4fa:	e023      	b.n	800a544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68b9      	ldr	r1, [r7, #8]
 800a502:	4618      	mov	r0, r3
 800a504:	f000 fcbc 	bl	800ae80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a516:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a526:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	021a      	lsls	r2, r3, #8
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	430a      	orrs	r2, r1
 800a53a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a53c:	e002      	b.n	800a544 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	75fb      	strb	r3, [r7, #23]
      break;
 800a542:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a54c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3718      	adds	r7, #24
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop

0800a558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a562:	2300      	movs	r3, #0
 800a564:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d101      	bne.n	800a574 <HAL_TIM_ConfigClockSource+0x1c>
 800a570:	2302      	movs	r3, #2
 800a572:	e0e6      	b.n	800a742 <HAL_TIM_ConfigClockSource+0x1ea>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2202      	movs	r2, #2
 800a580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a592:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a59e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	68ba      	ldr	r2, [r7, #8]
 800a5a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a67      	ldr	r2, [pc, #412]	@ (800a74c <HAL_TIM_ConfigClockSource+0x1f4>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	f000 80b1 	beq.w	800a716 <HAL_TIM_ConfigClockSource+0x1be>
 800a5b4:	4a65      	ldr	r2, [pc, #404]	@ (800a74c <HAL_TIM_ConfigClockSource+0x1f4>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	f200 80b6 	bhi.w	800a728 <HAL_TIM_ConfigClockSource+0x1d0>
 800a5bc:	4a64      	ldr	r2, [pc, #400]	@ (800a750 <HAL_TIM_ConfigClockSource+0x1f8>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	f000 80a9 	beq.w	800a716 <HAL_TIM_ConfigClockSource+0x1be>
 800a5c4:	4a62      	ldr	r2, [pc, #392]	@ (800a750 <HAL_TIM_ConfigClockSource+0x1f8>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	f200 80ae 	bhi.w	800a728 <HAL_TIM_ConfigClockSource+0x1d0>
 800a5cc:	4a61      	ldr	r2, [pc, #388]	@ (800a754 <HAL_TIM_ConfigClockSource+0x1fc>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	f000 80a1 	beq.w	800a716 <HAL_TIM_ConfigClockSource+0x1be>
 800a5d4:	4a5f      	ldr	r2, [pc, #380]	@ (800a754 <HAL_TIM_ConfigClockSource+0x1fc>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	f200 80a6 	bhi.w	800a728 <HAL_TIM_ConfigClockSource+0x1d0>
 800a5dc:	4a5e      	ldr	r2, [pc, #376]	@ (800a758 <HAL_TIM_ConfigClockSource+0x200>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	f000 8099 	beq.w	800a716 <HAL_TIM_ConfigClockSource+0x1be>
 800a5e4:	4a5c      	ldr	r2, [pc, #368]	@ (800a758 <HAL_TIM_ConfigClockSource+0x200>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	f200 809e 	bhi.w	800a728 <HAL_TIM_ConfigClockSource+0x1d0>
 800a5ec:	4a5b      	ldr	r2, [pc, #364]	@ (800a75c <HAL_TIM_ConfigClockSource+0x204>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	f000 8091 	beq.w	800a716 <HAL_TIM_ConfigClockSource+0x1be>
 800a5f4:	4a59      	ldr	r2, [pc, #356]	@ (800a75c <HAL_TIM_ConfigClockSource+0x204>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	f200 8096 	bhi.w	800a728 <HAL_TIM_ConfigClockSource+0x1d0>
 800a5fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a600:	f000 8089 	beq.w	800a716 <HAL_TIM_ConfigClockSource+0x1be>
 800a604:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a608:	f200 808e 	bhi.w	800a728 <HAL_TIM_ConfigClockSource+0x1d0>
 800a60c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a610:	d03e      	beq.n	800a690 <HAL_TIM_ConfigClockSource+0x138>
 800a612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a616:	f200 8087 	bhi.w	800a728 <HAL_TIM_ConfigClockSource+0x1d0>
 800a61a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a61e:	f000 8086 	beq.w	800a72e <HAL_TIM_ConfigClockSource+0x1d6>
 800a622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a626:	d87f      	bhi.n	800a728 <HAL_TIM_ConfigClockSource+0x1d0>
 800a628:	2b70      	cmp	r3, #112	@ 0x70
 800a62a:	d01a      	beq.n	800a662 <HAL_TIM_ConfigClockSource+0x10a>
 800a62c:	2b70      	cmp	r3, #112	@ 0x70
 800a62e:	d87b      	bhi.n	800a728 <HAL_TIM_ConfigClockSource+0x1d0>
 800a630:	2b60      	cmp	r3, #96	@ 0x60
 800a632:	d050      	beq.n	800a6d6 <HAL_TIM_ConfigClockSource+0x17e>
 800a634:	2b60      	cmp	r3, #96	@ 0x60
 800a636:	d877      	bhi.n	800a728 <HAL_TIM_ConfigClockSource+0x1d0>
 800a638:	2b50      	cmp	r3, #80	@ 0x50
 800a63a:	d03c      	beq.n	800a6b6 <HAL_TIM_ConfigClockSource+0x15e>
 800a63c:	2b50      	cmp	r3, #80	@ 0x50
 800a63e:	d873      	bhi.n	800a728 <HAL_TIM_ConfigClockSource+0x1d0>
 800a640:	2b40      	cmp	r3, #64	@ 0x40
 800a642:	d058      	beq.n	800a6f6 <HAL_TIM_ConfigClockSource+0x19e>
 800a644:	2b40      	cmp	r3, #64	@ 0x40
 800a646:	d86f      	bhi.n	800a728 <HAL_TIM_ConfigClockSource+0x1d0>
 800a648:	2b30      	cmp	r3, #48	@ 0x30
 800a64a:	d064      	beq.n	800a716 <HAL_TIM_ConfigClockSource+0x1be>
 800a64c:	2b30      	cmp	r3, #48	@ 0x30
 800a64e:	d86b      	bhi.n	800a728 <HAL_TIM_ConfigClockSource+0x1d0>
 800a650:	2b20      	cmp	r3, #32
 800a652:	d060      	beq.n	800a716 <HAL_TIM_ConfigClockSource+0x1be>
 800a654:	2b20      	cmp	r3, #32
 800a656:	d867      	bhi.n	800a728 <HAL_TIM_ConfigClockSource+0x1d0>
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d05c      	beq.n	800a716 <HAL_TIM_ConfigClockSource+0x1be>
 800a65c:	2b10      	cmp	r3, #16
 800a65e:	d05a      	beq.n	800a716 <HAL_TIM_ConfigClockSource+0x1be>
 800a660:	e062      	b.n	800a728 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a672:	f000 fced 	bl	800b050 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a684:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	609a      	str	r2, [r3, #8]
      break;
 800a68e:	e04f      	b.n	800a730 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a6a0:	f000 fcd6 	bl	800b050 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	689a      	ldr	r2, [r3, #8]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a6b2:	609a      	str	r2, [r3, #8]
      break;
 800a6b4:	e03c      	b.n	800a730 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f000 fc48 	bl	800af58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2150      	movs	r1, #80	@ 0x50
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 fca1 	bl	800b016 <TIM_ITRx_SetConfig>
      break;
 800a6d4:	e02c      	b.n	800a730 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	f000 fc67 	bl	800afb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2160      	movs	r1, #96	@ 0x60
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 fc91 	bl	800b016 <TIM_ITRx_SetConfig>
      break;
 800a6f4:	e01c      	b.n	800a730 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a702:	461a      	mov	r2, r3
 800a704:	f000 fc28 	bl	800af58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2140      	movs	r1, #64	@ 0x40
 800a70e:	4618      	mov	r0, r3
 800a710:	f000 fc81 	bl	800b016 <TIM_ITRx_SetConfig>
      break;
 800a714:	e00c      	b.n	800a730 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4619      	mov	r1, r3
 800a720:	4610      	mov	r0, r2
 800a722:	f000 fc78 	bl	800b016 <TIM_ITRx_SetConfig>
      break;
 800a726:	e003      	b.n	800a730 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	73fb      	strb	r3, [r7, #15]
      break;
 800a72c:	e000      	b.n	800a730 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800a72e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a740:	7bfb      	ldrb	r3, [r7, #15]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	00100070 	.word	0x00100070
 800a750:	00100050 	.word	0x00100050
 800a754:	00100040 	.word	0x00100040
 800a758:	00100030 	.word	0x00100030
 800a75c:	00100020 	.word	0x00100020

0800a760 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a77c:	bf00      	nop
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a790:	bf00      	nop
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a7a4:	bf00      	nop
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a48      	ldr	r2, [pc, #288]	@ (800a8e4 <TIM_Base_SetConfig+0x134>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d013      	beq.n	800a7f0 <TIM_Base_SetConfig+0x40>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7ce:	d00f      	beq.n	800a7f0 <TIM_Base_SetConfig+0x40>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a45      	ldr	r2, [pc, #276]	@ (800a8e8 <TIM_Base_SetConfig+0x138>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d00b      	beq.n	800a7f0 <TIM_Base_SetConfig+0x40>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a44      	ldr	r2, [pc, #272]	@ (800a8ec <TIM_Base_SetConfig+0x13c>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d007      	beq.n	800a7f0 <TIM_Base_SetConfig+0x40>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a43      	ldr	r2, [pc, #268]	@ (800a8f0 <TIM_Base_SetConfig+0x140>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d003      	beq.n	800a7f0 <TIM_Base_SetConfig+0x40>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a42      	ldr	r2, [pc, #264]	@ (800a8f4 <TIM_Base_SetConfig+0x144>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d108      	bne.n	800a802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a37      	ldr	r2, [pc, #220]	@ (800a8e4 <TIM_Base_SetConfig+0x134>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d01f      	beq.n	800a84a <TIM_Base_SetConfig+0x9a>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a810:	d01b      	beq.n	800a84a <TIM_Base_SetConfig+0x9a>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a34      	ldr	r2, [pc, #208]	@ (800a8e8 <TIM_Base_SetConfig+0x138>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d017      	beq.n	800a84a <TIM_Base_SetConfig+0x9a>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a33      	ldr	r2, [pc, #204]	@ (800a8ec <TIM_Base_SetConfig+0x13c>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d013      	beq.n	800a84a <TIM_Base_SetConfig+0x9a>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a32      	ldr	r2, [pc, #200]	@ (800a8f0 <TIM_Base_SetConfig+0x140>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d00f      	beq.n	800a84a <TIM_Base_SetConfig+0x9a>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a32      	ldr	r2, [pc, #200]	@ (800a8f8 <TIM_Base_SetConfig+0x148>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d00b      	beq.n	800a84a <TIM_Base_SetConfig+0x9a>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a31      	ldr	r2, [pc, #196]	@ (800a8fc <TIM_Base_SetConfig+0x14c>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d007      	beq.n	800a84a <TIM_Base_SetConfig+0x9a>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a30      	ldr	r2, [pc, #192]	@ (800a900 <TIM_Base_SetConfig+0x150>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d003      	beq.n	800a84a <TIM_Base_SetConfig+0x9a>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a2b      	ldr	r2, [pc, #172]	@ (800a8f4 <TIM_Base_SetConfig+0x144>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d108      	bne.n	800a85c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	4313      	orrs	r3, r2
 800a85a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	695b      	ldr	r3, [r3, #20]
 800a866:	4313      	orrs	r3, r2
 800a868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	689a      	ldr	r2, [r3, #8]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a18      	ldr	r2, [pc, #96]	@ (800a8e4 <TIM_Base_SetConfig+0x134>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d013      	beq.n	800a8b0 <TIM_Base_SetConfig+0x100>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4a19      	ldr	r2, [pc, #100]	@ (800a8f0 <TIM_Base_SetConfig+0x140>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d00f      	beq.n	800a8b0 <TIM_Base_SetConfig+0x100>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a19      	ldr	r2, [pc, #100]	@ (800a8f8 <TIM_Base_SetConfig+0x148>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d00b      	beq.n	800a8b0 <TIM_Base_SetConfig+0x100>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a18      	ldr	r2, [pc, #96]	@ (800a8fc <TIM_Base_SetConfig+0x14c>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d007      	beq.n	800a8b0 <TIM_Base_SetConfig+0x100>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	4a17      	ldr	r2, [pc, #92]	@ (800a900 <TIM_Base_SetConfig+0x150>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d003      	beq.n	800a8b0 <TIM_Base_SetConfig+0x100>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a12      	ldr	r2, [pc, #72]	@ (800a8f4 <TIM_Base_SetConfig+0x144>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d103      	bne.n	800a8b8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	691a      	ldr	r2, [r3, #16]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	f003 0301 	and.w	r3, r3, #1
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d105      	bne.n	800a8d6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	f023 0201 	bic.w	r2, r3, #1
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	611a      	str	r2, [r3, #16]
  }
}
 800a8d6:	bf00      	nop
 800a8d8:	3714      	adds	r7, #20
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	40012c00 	.word	0x40012c00
 800a8e8:	40000400 	.word	0x40000400
 800a8ec:	40000800 	.word	0x40000800
 800a8f0:	40013400 	.word	0x40013400
 800a8f4:	40015000 	.word	0x40015000
 800a8f8:	40014000 	.word	0x40014000
 800a8fc:	40014400 	.word	0x40014400
 800a900:	40014800 	.word	0x40014800

0800a904 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a904:	b480      	push	{r7}
 800a906:	b087      	sub	sp, #28
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a1b      	ldr	r3, [r3, #32]
 800a912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a1b      	ldr	r3, [r3, #32]
 800a918:	f023 0201 	bic.w	r2, r3, #1
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	699b      	ldr	r3, [r3, #24]
 800a92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f023 0303 	bic.w	r3, r3, #3
 800a93e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	4313      	orrs	r3, r2
 800a948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f023 0302 	bic.w	r3, r3, #2
 800a950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	697a      	ldr	r2, [r7, #20]
 800a958:	4313      	orrs	r3, r2
 800a95a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4a30      	ldr	r2, [pc, #192]	@ (800aa20 <TIM_OC1_SetConfig+0x11c>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d013      	beq.n	800a98c <TIM_OC1_SetConfig+0x88>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a2f      	ldr	r2, [pc, #188]	@ (800aa24 <TIM_OC1_SetConfig+0x120>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d00f      	beq.n	800a98c <TIM_OC1_SetConfig+0x88>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a2e      	ldr	r2, [pc, #184]	@ (800aa28 <TIM_OC1_SetConfig+0x124>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d00b      	beq.n	800a98c <TIM_OC1_SetConfig+0x88>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a2d      	ldr	r2, [pc, #180]	@ (800aa2c <TIM_OC1_SetConfig+0x128>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d007      	beq.n	800a98c <TIM_OC1_SetConfig+0x88>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a2c      	ldr	r2, [pc, #176]	@ (800aa30 <TIM_OC1_SetConfig+0x12c>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d003      	beq.n	800a98c <TIM_OC1_SetConfig+0x88>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a2b      	ldr	r2, [pc, #172]	@ (800aa34 <TIM_OC1_SetConfig+0x130>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d10c      	bne.n	800a9a6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	f023 0308 	bic.w	r3, r3, #8
 800a992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	697a      	ldr	r2, [r7, #20]
 800a99a:	4313      	orrs	r3, r2
 800a99c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	f023 0304 	bic.w	r3, r3, #4
 800a9a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4a1d      	ldr	r2, [pc, #116]	@ (800aa20 <TIM_OC1_SetConfig+0x11c>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d013      	beq.n	800a9d6 <TIM_OC1_SetConfig+0xd2>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4a1c      	ldr	r2, [pc, #112]	@ (800aa24 <TIM_OC1_SetConfig+0x120>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d00f      	beq.n	800a9d6 <TIM_OC1_SetConfig+0xd2>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4a1b      	ldr	r2, [pc, #108]	@ (800aa28 <TIM_OC1_SetConfig+0x124>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d00b      	beq.n	800a9d6 <TIM_OC1_SetConfig+0xd2>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4a1a      	ldr	r2, [pc, #104]	@ (800aa2c <TIM_OC1_SetConfig+0x128>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d007      	beq.n	800a9d6 <TIM_OC1_SetConfig+0xd2>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	4a19      	ldr	r2, [pc, #100]	@ (800aa30 <TIM_OC1_SetConfig+0x12c>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d003      	beq.n	800a9d6 <TIM_OC1_SetConfig+0xd2>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	4a18      	ldr	r2, [pc, #96]	@ (800aa34 <TIM_OC1_SetConfig+0x130>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d111      	bne.n	800a9fa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a9dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a9e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	695b      	ldr	r3, [r3, #20]
 800a9ea:	693a      	ldr	r2, [r7, #16]
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	699b      	ldr	r3, [r3, #24]
 800a9f4:	693a      	ldr	r2, [r7, #16]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	693a      	ldr	r2, [r7, #16]
 800a9fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	685a      	ldr	r2, [r3, #4]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	621a      	str	r2, [r3, #32]
}
 800aa14:	bf00      	nop
 800aa16:	371c      	adds	r7, #28
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr
 800aa20:	40012c00 	.word	0x40012c00
 800aa24:	40013400 	.word	0x40013400
 800aa28:	40014000 	.word	0x40014000
 800aa2c:	40014400 	.word	0x40014400
 800aa30:	40014800 	.word	0x40014800
 800aa34:	40015000 	.word	0x40015000

0800aa38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b087      	sub	sp, #28
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a1b      	ldr	r3, [r3, #32]
 800aa46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a1b      	ldr	r3, [r3, #32]
 800aa4c:	f023 0210 	bic.w	r2, r3, #16
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	021b      	lsls	r3, r3, #8
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	f023 0320 	bic.w	r3, r3, #32
 800aa86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	011b      	lsls	r3, r3, #4
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4a2c      	ldr	r2, [pc, #176]	@ (800ab48 <TIM_OC2_SetConfig+0x110>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d007      	beq.n	800aaac <TIM_OC2_SetConfig+0x74>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	4a2b      	ldr	r2, [pc, #172]	@ (800ab4c <TIM_OC2_SetConfig+0x114>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d003      	beq.n	800aaac <TIM_OC2_SetConfig+0x74>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	4a2a      	ldr	r2, [pc, #168]	@ (800ab50 <TIM_OC2_SetConfig+0x118>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d10d      	bne.n	800aac8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	011b      	lsls	r3, r3, #4
 800aaba:	697a      	ldr	r2, [r7, #20]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aac6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a1f      	ldr	r2, [pc, #124]	@ (800ab48 <TIM_OC2_SetConfig+0x110>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d013      	beq.n	800aaf8 <TIM_OC2_SetConfig+0xc0>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a1e      	ldr	r2, [pc, #120]	@ (800ab4c <TIM_OC2_SetConfig+0x114>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d00f      	beq.n	800aaf8 <TIM_OC2_SetConfig+0xc0>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	4a1e      	ldr	r2, [pc, #120]	@ (800ab54 <TIM_OC2_SetConfig+0x11c>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d00b      	beq.n	800aaf8 <TIM_OC2_SetConfig+0xc0>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4a1d      	ldr	r2, [pc, #116]	@ (800ab58 <TIM_OC2_SetConfig+0x120>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d007      	beq.n	800aaf8 <TIM_OC2_SetConfig+0xc0>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	4a1c      	ldr	r2, [pc, #112]	@ (800ab5c <TIM_OC2_SetConfig+0x124>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d003      	beq.n	800aaf8 <TIM_OC2_SetConfig+0xc0>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a17      	ldr	r2, [pc, #92]	@ (800ab50 <TIM_OC2_SetConfig+0x118>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d113      	bne.n	800ab20 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aafe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ab06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	695b      	ldr	r3, [r3, #20]
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	693a      	ldr	r2, [r7, #16]
 800ab10:	4313      	orrs	r3, r2
 800ab12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	699b      	ldr	r3, [r3, #24]
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	693a      	ldr	r2, [r7, #16]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	693a      	ldr	r2, [r7, #16]
 800ab24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	685a      	ldr	r2, [r3, #4]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	697a      	ldr	r2, [r7, #20]
 800ab38:	621a      	str	r2, [r3, #32]
}
 800ab3a:	bf00      	nop
 800ab3c:	371c      	adds	r7, #28
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	40012c00 	.word	0x40012c00
 800ab4c:	40013400 	.word	0x40013400
 800ab50:	40015000 	.word	0x40015000
 800ab54:	40014000 	.word	0x40014000
 800ab58:	40014400 	.word	0x40014400
 800ab5c:	40014800 	.word	0x40014800

0800ab60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b087      	sub	sp, #28
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a1b      	ldr	r3, [r3, #32]
 800ab6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a1b      	ldr	r3, [r3, #32]
 800ab74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	69db      	ldr	r3, [r3, #28]
 800ab86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f023 0303 	bic.w	r3, r3, #3
 800ab9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800abac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	021b      	lsls	r3, r3, #8
 800abb4:	697a      	ldr	r2, [r7, #20]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a2b      	ldr	r2, [pc, #172]	@ (800ac6c <TIM_OC3_SetConfig+0x10c>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d007      	beq.n	800abd2 <TIM_OC3_SetConfig+0x72>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a2a      	ldr	r2, [pc, #168]	@ (800ac70 <TIM_OC3_SetConfig+0x110>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d003      	beq.n	800abd2 <TIM_OC3_SetConfig+0x72>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a29      	ldr	r2, [pc, #164]	@ (800ac74 <TIM_OC3_SetConfig+0x114>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d10d      	bne.n	800abee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800abd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	021b      	lsls	r3, r3, #8
 800abe0:	697a      	ldr	r2, [r7, #20]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800abec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4a1e      	ldr	r2, [pc, #120]	@ (800ac6c <TIM_OC3_SetConfig+0x10c>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d013      	beq.n	800ac1e <TIM_OC3_SetConfig+0xbe>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a1d      	ldr	r2, [pc, #116]	@ (800ac70 <TIM_OC3_SetConfig+0x110>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d00f      	beq.n	800ac1e <TIM_OC3_SetConfig+0xbe>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a1d      	ldr	r2, [pc, #116]	@ (800ac78 <TIM_OC3_SetConfig+0x118>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d00b      	beq.n	800ac1e <TIM_OC3_SetConfig+0xbe>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a1c      	ldr	r2, [pc, #112]	@ (800ac7c <TIM_OC3_SetConfig+0x11c>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d007      	beq.n	800ac1e <TIM_OC3_SetConfig+0xbe>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a1b      	ldr	r2, [pc, #108]	@ (800ac80 <TIM_OC3_SetConfig+0x120>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d003      	beq.n	800ac1e <TIM_OC3_SetConfig+0xbe>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a16      	ldr	r2, [pc, #88]	@ (800ac74 <TIM_OC3_SetConfig+0x114>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d113      	bne.n	800ac46 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ac2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	695b      	ldr	r3, [r3, #20]
 800ac32:	011b      	lsls	r3, r3, #4
 800ac34:	693a      	ldr	r2, [r7, #16]
 800ac36:	4313      	orrs	r3, r2
 800ac38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	699b      	ldr	r3, [r3, #24]
 800ac3e:	011b      	lsls	r3, r3, #4
 800ac40:	693a      	ldr	r2, [r7, #16]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	685a      	ldr	r2, [r3, #4]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	697a      	ldr	r2, [r7, #20]
 800ac5e:	621a      	str	r2, [r3, #32]
}
 800ac60:	bf00      	nop
 800ac62:	371c      	adds	r7, #28
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr
 800ac6c:	40012c00 	.word	0x40012c00
 800ac70:	40013400 	.word	0x40013400
 800ac74:	40015000 	.word	0x40015000
 800ac78:	40014000 	.word	0x40014000
 800ac7c:	40014400 	.word	0x40014400
 800ac80:	40014800 	.word	0x40014800

0800ac84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b087      	sub	sp, #28
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6a1b      	ldr	r3, [r3, #32]
 800ac92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a1b      	ldr	r3, [r3, #32]
 800ac98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	69db      	ldr	r3, [r3, #28]
 800acaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800acb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800acbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	021b      	lsls	r3, r3, #8
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	4313      	orrs	r3, r2
 800acca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800acd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	031b      	lsls	r3, r3, #12
 800acda:	697a      	ldr	r2, [r7, #20]
 800acdc:	4313      	orrs	r3, r2
 800acde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	4a2c      	ldr	r2, [pc, #176]	@ (800ad94 <TIM_OC4_SetConfig+0x110>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d007      	beq.n	800acf8 <TIM_OC4_SetConfig+0x74>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	4a2b      	ldr	r2, [pc, #172]	@ (800ad98 <TIM_OC4_SetConfig+0x114>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d003      	beq.n	800acf8 <TIM_OC4_SetConfig+0x74>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4a2a      	ldr	r2, [pc, #168]	@ (800ad9c <TIM_OC4_SetConfig+0x118>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d10d      	bne.n	800ad14 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800acfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	031b      	lsls	r3, r3, #12
 800ad06:	697a      	ldr	r2, [r7, #20]
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a1f      	ldr	r2, [pc, #124]	@ (800ad94 <TIM_OC4_SetConfig+0x110>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d013      	beq.n	800ad44 <TIM_OC4_SetConfig+0xc0>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a1e      	ldr	r2, [pc, #120]	@ (800ad98 <TIM_OC4_SetConfig+0x114>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d00f      	beq.n	800ad44 <TIM_OC4_SetConfig+0xc0>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a1e      	ldr	r2, [pc, #120]	@ (800ada0 <TIM_OC4_SetConfig+0x11c>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d00b      	beq.n	800ad44 <TIM_OC4_SetConfig+0xc0>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a1d      	ldr	r2, [pc, #116]	@ (800ada4 <TIM_OC4_SetConfig+0x120>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d007      	beq.n	800ad44 <TIM_OC4_SetConfig+0xc0>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a1c      	ldr	r2, [pc, #112]	@ (800ada8 <TIM_OC4_SetConfig+0x124>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d003      	beq.n	800ad44 <TIM_OC4_SetConfig+0xc0>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a17      	ldr	r2, [pc, #92]	@ (800ad9c <TIM_OC4_SetConfig+0x118>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d113      	bne.n	800ad6c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad4a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ad52:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	695b      	ldr	r3, [r3, #20]
 800ad58:	019b      	lsls	r3, r3, #6
 800ad5a:	693a      	ldr	r2, [r7, #16]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	699b      	ldr	r3, [r3, #24]
 800ad64:	019b      	lsls	r3, r3, #6
 800ad66:	693a      	ldr	r2, [r7, #16]
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	693a      	ldr	r2, [r7, #16]
 800ad70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	685a      	ldr	r2, [r3, #4]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	621a      	str	r2, [r3, #32]
}
 800ad86:	bf00      	nop
 800ad88:	371c      	adds	r7, #28
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	40012c00 	.word	0x40012c00
 800ad98:	40013400 	.word	0x40013400
 800ad9c:	40015000 	.word	0x40015000
 800ada0:	40014000 	.word	0x40014000
 800ada4:	40014400 	.word	0x40014400
 800ada8:	40014800 	.word	0x40014800

0800adac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800adac:	b480      	push	{r7}
 800adae:	b087      	sub	sp, #28
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a1b      	ldr	r3, [r3, #32]
 800adba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a1b      	ldr	r3, [r3, #32]
 800adc0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800add2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800adda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	4313      	orrs	r3, r2
 800ade8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800adf0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	041b      	lsls	r3, r3, #16
 800adf8:	693a      	ldr	r2, [r7, #16]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4a19      	ldr	r2, [pc, #100]	@ (800ae68 <TIM_OC5_SetConfig+0xbc>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d013      	beq.n	800ae2e <TIM_OC5_SetConfig+0x82>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4a18      	ldr	r2, [pc, #96]	@ (800ae6c <TIM_OC5_SetConfig+0xc0>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d00f      	beq.n	800ae2e <TIM_OC5_SetConfig+0x82>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a17      	ldr	r2, [pc, #92]	@ (800ae70 <TIM_OC5_SetConfig+0xc4>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d00b      	beq.n	800ae2e <TIM_OC5_SetConfig+0x82>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4a16      	ldr	r2, [pc, #88]	@ (800ae74 <TIM_OC5_SetConfig+0xc8>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d007      	beq.n	800ae2e <TIM_OC5_SetConfig+0x82>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4a15      	ldr	r2, [pc, #84]	@ (800ae78 <TIM_OC5_SetConfig+0xcc>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d003      	beq.n	800ae2e <TIM_OC5_SetConfig+0x82>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a14      	ldr	r2, [pc, #80]	@ (800ae7c <TIM_OC5_SetConfig+0xd0>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d109      	bne.n	800ae42 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	695b      	ldr	r3, [r3, #20]
 800ae3a:	021b      	lsls	r3, r3, #8
 800ae3c:	697a      	ldr	r2, [r7, #20]
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	697a      	ldr	r2, [r7, #20]
 800ae46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	685a      	ldr	r2, [r3, #4]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	693a      	ldr	r2, [r7, #16]
 800ae5a:	621a      	str	r2, [r3, #32]
}
 800ae5c:	bf00      	nop
 800ae5e:	371c      	adds	r7, #28
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr
 800ae68:	40012c00 	.word	0x40012c00
 800ae6c:	40013400 	.word	0x40013400
 800ae70:	40014000 	.word	0x40014000
 800ae74:	40014400 	.word	0x40014400
 800ae78:	40014800 	.word	0x40014800
 800ae7c:	40015000 	.word	0x40015000

0800ae80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b087      	sub	sp, #28
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a1b      	ldr	r3, [r3, #32]
 800ae8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a1b      	ldr	r3, [r3, #32]
 800ae94:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aeae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aeb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	021b      	lsls	r3, r3, #8
 800aeba:	68fa      	ldr	r2, [r7, #12]
 800aebc:	4313      	orrs	r3, r2
 800aebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	051b      	lsls	r3, r3, #20
 800aece:	693a      	ldr	r2, [r7, #16]
 800aed0:	4313      	orrs	r3, r2
 800aed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a1a      	ldr	r2, [pc, #104]	@ (800af40 <TIM_OC6_SetConfig+0xc0>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d013      	beq.n	800af04 <TIM_OC6_SetConfig+0x84>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a19      	ldr	r2, [pc, #100]	@ (800af44 <TIM_OC6_SetConfig+0xc4>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d00f      	beq.n	800af04 <TIM_OC6_SetConfig+0x84>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a18      	ldr	r2, [pc, #96]	@ (800af48 <TIM_OC6_SetConfig+0xc8>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d00b      	beq.n	800af04 <TIM_OC6_SetConfig+0x84>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4a17      	ldr	r2, [pc, #92]	@ (800af4c <TIM_OC6_SetConfig+0xcc>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d007      	beq.n	800af04 <TIM_OC6_SetConfig+0x84>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a16      	ldr	r2, [pc, #88]	@ (800af50 <TIM_OC6_SetConfig+0xd0>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d003      	beq.n	800af04 <TIM_OC6_SetConfig+0x84>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a15      	ldr	r2, [pc, #84]	@ (800af54 <TIM_OC6_SetConfig+0xd4>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d109      	bne.n	800af18 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800af0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	695b      	ldr	r3, [r3, #20]
 800af10:	029b      	lsls	r3, r3, #10
 800af12:	697a      	ldr	r2, [r7, #20]
 800af14:	4313      	orrs	r3, r2
 800af16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	697a      	ldr	r2, [r7, #20]
 800af1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	685a      	ldr	r2, [r3, #4]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	693a      	ldr	r2, [r7, #16]
 800af30:	621a      	str	r2, [r3, #32]
}
 800af32:	bf00      	nop
 800af34:	371c      	adds	r7, #28
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	40012c00 	.word	0x40012c00
 800af44:	40013400 	.word	0x40013400
 800af48:	40014000 	.word	0x40014000
 800af4c:	40014400 	.word	0x40014400
 800af50:	40014800 	.word	0x40014800
 800af54:	40015000 	.word	0x40015000

0800af58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af58:	b480      	push	{r7}
 800af5a:	b087      	sub	sp, #28
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6a1b      	ldr	r3, [r3, #32]
 800af68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	6a1b      	ldr	r3, [r3, #32]
 800af6e:	f023 0201 	bic.w	r2, r3, #1
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	699b      	ldr	r3, [r3, #24]
 800af7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800af82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	011b      	lsls	r3, r3, #4
 800af88:	693a      	ldr	r2, [r7, #16]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f023 030a 	bic.w	r3, r3, #10
 800af94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af96:	697a      	ldr	r2, [r7, #20]
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	4313      	orrs	r3, r2
 800af9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	693a      	ldr	r2, [r7, #16]
 800afa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	697a      	ldr	r2, [r7, #20]
 800afa8:	621a      	str	r2, [r3, #32]
}
 800afaa:	bf00      	nop
 800afac:	371c      	adds	r7, #28
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr

0800afb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afb6:	b480      	push	{r7}
 800afb8:	b087      	sub	sp, #28
 800afba:	af00      	add	r7, sp, #0
 800afbc:	60f8      	str	r0, [r7, #12]
 800afbe:	60b9      	str	r1, [r7, #8]
 800afc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	6a1b      	ldr	r3, [r3, #32]
 800afc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6a1b      	ldr	r3, [r3, #32]
 800afcc:	f023 0210 	bic.w	r2, r3, #16
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	699b      	ldr	r3, [r3, #24]
 800afd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800afe0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	031b      	lsls	r3, r3, #12
 800afe6:	693a      	ldr	r2, [r7, #16]
 800afe8:	4313      	orrs	r3, r2
 800afea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800aff2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	011b      	lsls	r3, r3, #4
 800aff8:	697a      	ldr	r2, [r7, #20]
 800affa:	4313      	orrs	r3, r2
 800affc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	693a      	ldr	r2, [r7, #16]
 800b002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	621a      	str	r2, [r3, #32]
}
 800b00a:	bf00      	nop
 800b00c:	371c      	adds	r7, #28
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr

0800b016 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b016:	b480      	push	{r7}
 800b018:	b085      	sub	sp, #20
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
 800b01e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b02c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b030:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b032:	683a      	ldr	r2, [r7, #0]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	4313      	orrs	r3, r2
 800b038:	f043 0307 	orr.w	r3, r3, #7
 800b03c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	609a      	str	r2, [r3, #8]
}
 800b044:	bf00      	nop
 800b046:	3714      	adds	r7, #20
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b050:	b480      	push	{r7}
 800b052:	b087      	sub	sp, #28
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	607a      	str	r2, [r7, #4]
 800b05c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b06a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	021a      	lsls	r2, r3, #8
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	431a      	orrs	r2, r3
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	4313      	orrs	r3, r2
 800b078:	697a      	ldr	r2, [r7, #20]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	697a      	ldr	r2, [r7, #20]
 800b082:	609a      	str	r2, [r3, #8]
}
 800b084:	bf00      	nop
 800b086:	371c      	adds	r7, #28
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d101      	bne.n	800b0a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0a4:	2302      	movs	r3, #2
 800b0a6:	e06f      	b.n	800b188 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2202      	movs	r2, #2
 800b0b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a31      	ldr	r2, [pc, #196]	@ (800b194 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d009      	beq.n	800b0e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a30      	ldr	r2, [pc, #192]	@ (800b198 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d004      	beq.n	800b0e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a2e      	ldr	r2, [pc, #184]	@ (800b19c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d108      	bne.n	800b0f8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b0ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b0fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	4313      	orrs	r3, r2
 800b10c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a1e      	ldr	r2, [pc, #120]	@ (800b194 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d01d      	beq.n	800b15c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b128:	d018      	beq.n	800b15c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4a1c      	ldr	r2, [pc, #112]	@ (800b1a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d013      	beq.n	800b15c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a1a      	ldr	r2, [pc, #104]	@ (800b1a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d00e      	beq.n	800b15c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4a15      	ldr	r2, [pc, #84]	@ (800b198 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d009      	beq.n	800b15c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4a16      	ldr	r2, [pc, #88]	@ (800b1a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d004      	beq.n	800b15c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a11      	ldr	r2, [pc, #68]	@ (800b19c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d10c      	bne.n	800b176 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b162:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	68ba      	ldr	r2, [r7, #8]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2201      	movs	r2, #1
 800b17a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3714      	adds	r7, #20
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr
 800b194:	40012c00 	.word	0x40012c00
 800b198:	40013400 	.word	0x40013400
 800b19c:	40015000 	.word	0x40015000
 800b1a0:	40000400 	.word	0x40000400
 800b1a4:	40000800 	.word	0x40000800
 800b1a8:	40014000 	.word	0x40014000

0800b1ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d101      	bne.n	800b1c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b1c4:	2302      	movs	r3, #2
 800b1c6:	e078      	b.n	800b2ba <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4313      	orrs	r3, r2
 800b206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	4313      	orrs	r3, r2
 800b214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	695b      	ldr	r3, [r3, #20]
 800b220:	4313      	orrs	r3, r2
 800b222:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b22e:	4313      	orrs	r3, r2
 800b230:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	699b      	ldr	r3, [r3, #24]
 800b23c:	041b      	lsls	r3, r3, #16
 800b23e:	4313      	orrs	r3, r2
 800b240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	69db      	ldr	r3, [r3, #28]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a1c      	ldr	r2, [pc, #112]	@ (800b2c8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d009      	beq.n	800b26e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a1b      	ldr	r2, [pc, #108]	@ (800b2cc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d004      	beq.n	800b26e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a19      	ldr	r2, [pc, #100]	@ (800b2d0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d11c      	bne.n	800b2a8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b278:	051b      	lsls	r3, r3, #20
 800b27a:	4313      	orrs	r3, r2
 800b27c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	6a1b      	ldr	r3, [r3, #32]
 800b288:	4313      	orrs	r3, r2
 800b28a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b296:	4313      	orrs	r3, r2
 800b298:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3714      	adds	r7, #20
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop
 800b2c8:	40012c00 	.word	0x40012c00
 800b2cc:	40013400 	.word	0x40013400
 800b2d0:	40015000 	.word	0x40015000

0800b2d4 <HAL_TIMEx_ConfigEncoderIndex>:
  * @param  sEncoderIndexConfig Encoder index configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigEncoderIndex(TIM_HandleTypeDef *htim,
                                               TIMEx_EncoderIndexConfigTypeDef *sEncoderIndexConfig)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FUNCTIONAL_STATE(sEncoderIndexConfig->FirstIndexEnable));
  assert_param(IS_TIM_ENCODERINDEX_POSITION(sEncoderIndexConfig->Position));
  assert_param(IS_TIM_ENCODERINDEX_DIRECTION(sEncoderIndexConfig->Direction));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d101      	bne.n	800b2ec <HAL_TIMEx_ConfigEncoderIndex+0x18>
 800b2e8:	2302      	movs	r3, #2
 800b2ea:	e02a      	b.n	800b342 <HAL_TIMEx_ConfigEncoderIndex+0x6e>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Configures the TIMx External Trigger (ETR) which is used as Index input */
  TIM_ETR_SetConfig(htim->Instance,
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6818      	ldr	r0, [r3, #0]
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	6859      	ldr	r1, [r3, #4]
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	f7ff fea4 	bl	800b050 <TIM_ETR_SetConfig>
                    sEncoderIndexConfig->Prescaler,
                    sEncoderIndexConfig->Polarity,
                    sEncoderIndexConfig->Filter);

  /* Configures the encoder index */
  MODIFY_REG(htim->Instance->ECR,
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b30e:	f023 02e6 	bic.w	r2, r3, #230	@ 0xe6
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	695b      	ldr	r3, [r3, #20]
 800b316:	6839      	ldr	r1, [r7, #0]
 800b318:	7b09      	ldrb	r1, [r1, #12]
 800b31a:	2901      	cmp	r1, #1
 800b31c:	d101      	bne.n	800b322 <HAL_TIMEx_ConfigEncoderIndex+0x4e>
 800b31e:	2120      	movs	r1, #32
 800b320:	e000      	b.n	800b324 <HAL_TIMEx_ConfigEncoderIndex+0x50>
 800b322:	2100      	movs	r1, #0
 800b324:	4319      	orrs	r1, r3
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	430b      	orrs	r3, r1
 800b32c:	431a      	orrs	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f042 0201 	orr.w	r2, r2, #1
 800b336:	659a      	str	r2, [r3, #88]	@ 0x58
             (sEncoderIndexConfig->Direction |
              ((sEncoderIndexConfig->FirstIndexEnable == ENABLE) ? (0x1U << TIM_ECR_FIDX_Pos) : 0U) |
              sEncoderIndexConfig->Position |
              TIM_ECR_IE));

  __HAL_UNLOCK(htim);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b340:	2300      	movs	r3, #0
}
 800b342:	4618      	mov	r0, r3
 800b344:	3708      	adds	r7, #8
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b34a:	b480      	push	{r7}
 800b34c:	b083      	sub	sp, #12
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b352:	bf00      	nop
 800b354:	370c      	adds	r7, #12
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr

0800b35e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b35e:	b480      	push	{r7}
 800b360:	b083      	sub	sp, #12
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b366:	bf00      	nop
 800b368:	370c      	adds	r7, #12
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr

0800b372 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b372:	b480      	push	{r7}
 800b374:	b083      	sub	sp, #12
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b37a:	bf00      	nop
 800b37c:	370c      	adds	r7, #12
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr

0800b386 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b386:	b480      	push	{r7}
 800b388:	b083      	sub	sp, #12
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b38e:	bf00      	nop
 800b390:	370c      	adds	r7, #12
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr

0800b39a <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b39a:	b480      	push	{r7}
 800b39c:	b083      	sub	sp, #12
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b3a2:	bf00      	nop
 800b3a4:	370c      	adds	r7, #12
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr

0800b3ae <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b3ae:	b480      	push	{r7}
 800b3b0:	b083      	sub	sp, #12
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b3b6:	bf00      	nop
 800b3b8:	370c      	adds	r7, #12
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr

0800b3c2 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b3c2:	b480      	push	{r7}
 800b3c4:	b083      	sub	sp, #12
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b3ca:	bf00      	nop
 800b3cc:	370c      	adds	r7, #12
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b082      	sub	sp, #8
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d101      	bne.n	800b3e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e042      	b.n	800b46e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d106      	bne.n	800b400 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f7f7 f8fa 	bl	80025f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2224      	movs	r2, #36	@ 0x24
 800b404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f022 0201 	bic.w	r2, r2, #1
 800b416:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d002      	beq.n	800b426 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 ff15 	bl	800c250 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 fc16 	bl	800bc58 <UART_SetConfig>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d101      	bne.n	800b436 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b432:	2301      	movs	r3, #1
 800b434:	e01b      	b.n	800b46e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	685a      	ldr	r2, [r3, #4]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b444:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	689a      	ldr	r2, [r3, #8]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b454:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f042 0201 	orr.w	r2, r2, #1
 800b464:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 ff94 	bl	800c394 <UART_CheckIdleState>
 800b46c:	4603      	mov	r3, r0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3708      	adds	r7, #8
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b08a      	sub	sp, #40	@ 0x28
 800b47a:	af02      	add	r7, sp, #8
 800b47c:	60f8      	str	r0, [r7, #12]
 800b47e:	60b9      	str	r1, [r7, #8]
 800b480:	603b      	str	r3, [r7, #0]
 800b482:	4613      	mov	r3, r2
 800b484:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b48c:	2b20      	cmp	r3, #32
 800b48e:	d17b      	bne.n	800b588 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d002      	beq.n	800b49c <HAL_UART_Transmit+0x26>
 800b496:	88fb      	ldrh	r3, [r7, #6]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d101      	bne.n	800b4a0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	e074      	b.n	800b58a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2221      	movs	r2, #33	@ 0x21
 800b4ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b4b0:	f7f8 fbc4 	bl	8003c3c <HAL_GetTick>
 800b4b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	88fa      	ldrh	r2, [r7, #6]
 800b4ba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	88fa      	ldrh	r2, [r7, #6]
 800b4c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4ce:	d108      	bne.n	800b4e2 <HAL_UART_Transmit+0x6c>
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	691b      	ldr	r3, [r3, #16]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d104      	bne.n	800b4e2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	61bb      	str	r3, [r7, #24]
 800b4e0:	e003      	b.n	800b4ea <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b4ea:	e030      	b.n	800b54e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	2180      	movs	r1, #128	@ 0x80
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f000 fff6 	bl	800c4e8 <UART_WaitOnFlagUntilTimeout>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d005      	beq.n	800b50e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2220      	movs	r2, #32
 800b506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b50a:	2303      	movs	r3, #3
 800b50c:	e03d      	b.n	800b58a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b50e:	69fb      	ldr	r3, [r7, #28]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d10b      	bne.n	800b52c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b514:	69bb      	ldr	r3, [r7, #24]
 800b516:	881b      	ldrh	r3, [r3, #0]
 800b518:	461a      	mov	r2, r3
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b522:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	3302      	adds	r3, #2
 800b528:	61bb      	str	r3, [r7, #24]
 800b52a:	e007      	b.n	800b53c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	781a      	ldrb	r2, [r3, #0]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	3301      	adds	r3, #1
 800b53a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b542:	b29b      	uxth	r3, r3
 800b544:	3b01      	subs	r3, #1
 800b546:	b29a      	uxth	r2, r3
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b554:	b29b      	uxth	r3, r3
 800b556:	2b00      	cmp	r3, #0
 800b558:	d1c8      	bne.n	800b4ec <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	9300      	str	r3, [sp, #0]
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	2200      	movs	r2, #0
 800b562:	2140      	movs	r1, #64	@ 0x40
 800b564:	68f8      	ldr	r0, [r7, #12]
 800b566:	f000 ffbf 	bl	800c4e8 <UART_WaitOnFlagUntilTimeout>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d005      	beq.n	800b57c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2220      	movs	r2, #32
 800b574:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b578:	2303      	movs	r3, #3
 800b57a:	e006      	b.n	800b58a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2220      	movs	r2, #32
 800b580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b584:	2300      	movs	r3, #0
 800b586:	e000      	b.n	800b58a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b588:	2302      	movs	r3, #2
  }
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3720      	adds	r7, #32
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
	...

0800b594 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b0ba      	sub	sp, #232	@ 0xe8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	69db      	ldr	r3, [r3, #28]
 800b5a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b5ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b5be:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b5c2:	4013      	ands	r3, r2
 800b5c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b5c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d11b      	bne.n	800b608 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b5d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5d4:	f003 0320 	and.w	r3, r3, #32
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d015      	beq.n	800b608 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b5dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5e0:	f003 0320 	and.w	r3, r3, #32
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d105      	bne.n	800b5f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b5e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d009      	beq.n	800b608 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	f000 8300 	beq.w	800bbfe <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	4798      	blx	r3
      }
      return;
 800b606:	e2fa      	b.n	800bbfe <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b608:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f000 8123 	beq.w	800b858 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b612:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b616:	4b8d      	ldr	r3, [pc, #564]	@ (800b84c <HAL_UART_IRQHandler+0x2b8>)
 800b618:	4013      	ands	r3, r2
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d106      	bne.n	800b62c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b61e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b622:	4b8b      	ldr	r3, [pc, #556]	@ (800b850 <HAL_UART_IRQHandler+0x2bc>)
 800b624:	4013      	ands	r3, r2
 800b626:	2b00      	cmp	r3, #0
 800b628:	f000 8116 	beq.w	800b858 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b62c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b630:	f003 0301 	and.w	r3, r3, #1
 800b634:	2b00      	cmp	r3, #0
 800b636:	d011      	beq.n	800b65c <HAL_UART_IRQHandler+0xc8>
 800b638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b63c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00b      	beq.n	800b65c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2201      	movs	r2, #1
 800b64a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b652:	f043 0201 	orr.w	r2, r3, #1
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b65c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b660:	f003 0302 	and.w	r3, r3, #2
 800b664:	2b00      	cmp	r3, #0
 800b666:	d011      	beq.n	800b68c <HAL_UART_IRQHandler+0xf8>
 800b668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b66c:	f003 0301 	and.w	r3, r3, #1
 800b670:	2b00      	cmp	r3, #0
 800b672:	d00b      	beq.n	800b68c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2202      	movs	r2, #2
 800b67a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b682:	f043 0204 	orr.w	r2, r3, #4
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b68c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b690:	f003 0304 	and.w	r3, r3, #4
 800b694:	2b00      	cmp	r3, #0
 800b696:	d011      	beq.n	800b6bc <HAL_UART_IRQHandler+0x128>
 800b698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b69c:	f003 0301 	and.w	r3, r3, #1
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d00b      	beq.n	800b6bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2204      	movs	r2, #4
 800b6aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6b2:	f043 0202 	orr.w	r2, r3, #2
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b6bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6c0:	f003 0308 	and.w	r3, r3, #8
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d017      	beq.n	800b6f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b6c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6cc:	f003 0320 	and.w	r3, r3, #32
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d105      	bne.n	800b6e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b6d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b6d8:	4b5c      	ldr	r3, [pc, #368]	@ (800b84c <HAL_UART_IRQHandler+0x2b8>)
 800b6da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00b      	beq.n	800b6f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2208      	movs	r2, #8
 800b6e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6ee:	f043 0208 	orr.w	r2, r3, #8
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b6f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b700:	2b00      	cmp	r3, #0
 800b702:	d012      	beq.n	800b72a <HAL_UART_IRQHandler+0x196>
 800b704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b708:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d00c      	beq.n	800b72a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b718:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b720:	f043 0220 	orr.w	r2, r3, #32
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b730:	2b00      	cmp	r3, #0
 800b732:	f000 8266 	beq.w	800bc02 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b73a:	f003 0320 	and.w	r3, r3, #32
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d013      	beq.n	800b76a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b746:	f003 0320 	and.w	r3, r3, #32
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d105      	bne.n	800b75a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b74e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b756:	2b00      	cmp	r3, #0
 800b758:	d007      	beq.n	800b76a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d003      	beq.n	800b76a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b770:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b77e:	2b40      	cmp	r3, #64	@ 0x40
 800b780:	d005      	beq.n	800b78e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b786:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d054      	beq.n	800b838 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 ff17 	bl	800c5c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b79e:	2b40      	cmp	r3, #64	@ 0x40
 800b7a0:	d146      	bne.n	800b830 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	3308      	adds	r3, #8
 800b7a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b7b0:	e853 3f00 	ldrex	r3, [r3]
 800b7b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b7b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b7bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	3308      	adds	r3, #8
 800b7ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b7ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b7d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b7da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b7de:	e841 2300 	strex	r3, r2, [r1]
 800b7e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b7e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1d9      	bne.n	800b7a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d017      	beq.n	800b828 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7fe:	4a15      	ldr	r2, [pc, #84]	@ (800b854 <HAL_UART_IRQHandler+0x2c0>)
 800b800:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b808:	4618      	mov	r0, r3
 800b80a:	f7f9 fd3a 	bl	8005282 <HAL_DMA_Abort_IT>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d019      	beq.n	800b848 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b81a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b822:	4610      	mov	r0, r2
 800b824:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b826:	e00f      	b.n	800b848 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 f9ff 	bl	800bc2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b82e:	e00b      	b.n	800b848 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 f9fb 	bl	800bc2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b836:	e007      	b.n	800b848 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 f9f7 	bl	800bc2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2200      	movs	r2, #0
 800b842:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b846:	e1dc      	b.n	800bc02 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b848:	bf00      	nop
    return;
 800b84a:	e1da      	b.n	800bc02 <HAL_UART_IRQHandler+0x66e>
 800b84c:	10000001 	.word	0x10000001
 800b850:	04000120 	.word	0x04000120
 800b854:	0800c68f 	.word	0x0800c68f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	f040 8170 	bne.w	800bb42 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b866:	f003 0310 	and.w	r3, r3, #16
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f000 8169 	beq.w	800bb42 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b874:	f003 0310 	and.w	r3, r3, #16
 800b878:	2b00      	cmp	r3, #0
 800b87a:	f000 8162 	beq.w	800bb42 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2210      	movs	r2, #16
 800b884:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b890:	2b40      	cmp	r3, #64	@ 0x40
 800b892:	f040 80d8 	bne.w	800ba46 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b8a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	f000 80af 	beq.w	800ba0c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b8b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	f080 80a7 	bcs.w	800ba0c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b8c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f003 0320 	and.w	r3, r3, #32
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	f040 8087 	bne.w	800b9ea <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b8e8:	e853 3f00 	ldrex	r3, [r3]
 800b8ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b8f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b8f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b8f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	461a      	mov	r2, r3
 800b902:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b906:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b90a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b912:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b916:	e841 2300 	strex	r3, r2, [r1]
 800b91a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b91e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b922:	2b00      	cmp	r3, #0
 800b924:	d1da      	bne.n	800b8dc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	3308      	adds	r3, #8
 800b92c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b930:	e853 3f00 	ldrex	r3, [r3]
 800b934:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b936:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b938:	f023 0301 	bic.w	r3, r3, #1
 800b93c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	3308      	adds	r3, #8
 800b946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b94a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b94e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b950:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b952:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b956:	e841 2300 	strex	r3, r2, [r1]
 800b95a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b95c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1e1      	bne.n	800b926 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	3308      	adds	r3, #8
 800b968:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b96a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b96c:	e853 3f00 	ldrex	r3, [r3]
 800b970:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b978:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	3308      	adds	r3, #8
 800b982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b986:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b988:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b98a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b98c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b98e:	e841 2300 	strex	r3, r2, [r1]
 800b992:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b994:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b996:	2b00      	cmp	r3, #0
 800b998:	d1e3      	bne.n	800b962 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2220      	movs	r2, #32
 800b99e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9b0:	e853 3f00 	ldrex	r3, [r3]
 800b9b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b9b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9b8:	f023 0310 	bic.w	r3, r3, #16
 800b9bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b9ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b9cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b9d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b9d2:	e841 2300 	strex	r3, r2, [r1]
 800b9d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b9d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d1e4      	bne.n	800b9a8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7f9 fbf3 	bl	80051d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2202      	movs	r2, #2
 800b9ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	1ad3      	subs	r3, r2, r3
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	4619      	mov	r1, r3
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 f91b 	bl	800bc40 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ba0a:	e0fc      	b.n	800bc06 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ba12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ba16:	429a      	cmp	r2, r3
 800ba18:	f040 80f5 	bne.w	800bc06 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f003 0320 	and.w	r3, r3, #32
 800ba2a:	2b20      	cmp	r3, #32
 800ba2c:	f040 80eb 	bne.w	800bc06 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2202      	movs	r2, #2
 800ba34:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 f8fe 	bl	800bc40 <HAL_UARTEx_RxEventCallback>
      return;
 800ba44:	e0df      	b.n	800bc06 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	1ad3      	subs	r3, r2, r3
 800ba56:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f000 80d1 	beq.w	800bc0a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800ba68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f000 80cc 	beq.w	800bc0a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba7a:	e853 3f00 	ldrex	r3, [r3]
 800ba7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ba80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba94:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ba9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba9c:	e841 2300 	strex	r3, r2, [r1]
 800baa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800baa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d1e4      	bne.n	800ba72 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	3308      	adds	r3, #8
 800baae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab2:	e853 3f00 	ldrex	r3, [r3]
 800bab6:	623b      	str	r3, [r7, #32]
   return(result);
 800bab8:	6a3b      	ldr	r3, [r7, #32]
 800baba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800babe:	f023 0301 	bic.w	r3, r3, #1
 800bac2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	3308      	adds	r3, #8
 800bacc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bad0:	633a      	str	r2, [r7, #48]	@ 0x30
 800bad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bad4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bad8:	e841 2300 	strex	r3, r2, [r1]
 800badc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d1e1      	bne.n	800baa8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2220      	movs	r2, #32
 800bae8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2200      	movs	r2, #0
 800baf6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	e853 3f00 	ldrex	r3, [r3]
 800bb04:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f023 0310 	bic.w	r3, r3, #16
 800bb0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	461a      	mov	r2, r3
 800bb16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bb1a:	61fb      	str	r3, [r7, #28]
 800bb1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb1e:	69b9      	ldr	r1, [r7, #24]
 800bb20:	69fa      	ldr	r2, [r7, #28]
 800bb22:	e841 2300 	strex	r3, r2, [r1]
 800bb26:	617b      	str	r3, [r7, #20]
   return(result);
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d1e4      	bne.n	800baf8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2202      	movs	r2, #2
 800bb32:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bb34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bb38:	4619      	mov	r1, r3
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 f880 	bl	800bc40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bb40:	e063      	b.n	800bc0a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bb42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00e      	beq.n	800bb6c <HAL_UART_IRQHandler+0x5d8>
 800bb4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d008      	beq.n	800bb6c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800bb62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fdcf 	bl	800c708 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb6a:	e051      	b.n	800bc10 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bb6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d014      	beq.n	800bba2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bb78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d105      	bne.n	800bb90 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bb84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d008      	beq.n	800bba2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d03a      	beq.n	800bc0e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	4798      	blx	r3
    }
    return;
 800bba0:	e035      	b.n	800bc0e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d009      	beq.n	800bbc2 <HAL_UART_IRQHandler+0x62e>
 800bbae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d003      	beq.n	800bbc2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 fd79 	bl	800c6b2 <UART_EndTransmit_IT>
    return;
 800bbc0:	e026      	b.n	800bc10 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bbc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bbc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d009      	beq.n	800bbe2 <HAL_UART_IRQHandler+0x64e>
 800bbce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbd2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d003      	beq.n	800bbe2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 fda8 	bl	800c730 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bbe0:	e016      	b.n	800bc10 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bbe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bbe6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d010      	beq.n	800bc10 <HAL_UART_IRQHandler+0x67c>
 800bbee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	da0c      	bge.n	800bc10 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 fd90 	bl	800c71c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bbfc:	e008      	b.n	800bc10 <HAL_UART_IRQHandler+0x67c>
      return;
 800bbfe:	bf00      	nop
 800bc00:	e006      	b.n	800bc10 <HAL_UART_IRQHandler+0x67c>
    return;
 800bc02:	bf00      	nop
 800bc04:	e004      	b.n	800bc10 <HAL_UART_IRQHandler+0x67c>
      return;
 800bc06:	bf00      	nop
 800bc08:	e002      	b.n	800bc10 <HAL_UART_IRQHandler+0x67c>
      return;
 800bc0a:	bf00      	nop
 800bc0c:	e000      	b.n	800bc10 <HAL_UART_IRQHandler+0x67c>
    return;
 800bc0e:	bf00      	nop
  }
}
 800bc10:	37e8      	adds	r7, #232	@ 0xe8
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop

0800bc18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bc20:	bf00      	nop
 800bc22:	370c      	adds	r7, #12
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bc34:	bf00      	nop
 800bc36:	370c      	adds	r7, #12
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	460b      	mov	r3, r1
 800bc4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bc4c:	bf00      	nop
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc5c:	b08c      	sub	sp, #48	@ 0x30
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc62:	2300      	movs	r3, #0
 800bc64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	689a      	ldr	r2, [r3, #8]
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	691b      	ldr	r3, [r3, #16]
 800bc70:	431a      	orrs	r2, r3
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	695b      	ldr	r3, [r3, #20]
 800bc76:	431a      	orrs	r2, r3
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	69db      	ldr	r3, [r3, #28]
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	4baa      	ldr	r3, [pc, #680]	@ (800bf30 <UART_SetConfig+0x2d8>)
 800bc88:	4013      	ands	r3, r2
 800bc8a:	697a      	ldr	r2, [r7, #20]
 800bc8c:	6812      	ldr	r2, [r2, #0]
 800bc8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bc90:	430b      	orrs	r3, r1
 800bc92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	68da      	ldr	r2, [r3, #12]
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	430a      	orrs	r2, r1
 800bca8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	699b      	ldr	r3, [r3, #24]
 800bcae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a9f      	ldr	r2, [pc, #636]	@ (800bf34 <UART_SetConfig+0x2dc>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d004      	beq.n	800bcc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	6a1b      	ldr	r3, [r3, #32]
 800bcbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800bcce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800bcd2:	697a      	ldr	r2, [r7, #20]
 800bcd4:	6812      	ldr	r2, [r2, #0]
 800bcd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bcd8:	430b      	orrs	r3, r1
 800bcda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bce2:	f023 010f 	bic.w	r1, r3, #15
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	430a      	orrs	r2, r1
 800bcf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a90      	ldr	r2, [pc, #576]	@ (800bf38 <UART_SetConfig+0x2e0>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d125      	bne.n	800bd48 <UART_SetConfig+0xf0>
 800bcfc:	4b8f      	ldr	r3, [pc, #572]	@ (800bf3c <UART_SetConfig+0x2e4>)
 800bcfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd02:	f003 0303 	and.w	r3, r3, #3
 800bd06:	2b03      	cmp	r3, #3
 800bd08:	d81a      	bhi.n	800bd40 <UART_SetConfig+0xe8>
 800bd0a:	a201      	add	r2, pc, #4	@ (adr r2, 800bd10 <UART_SetConfig+0xb8>)
 800bd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd10:	0800bd21 	.word	0x0800bd21
 800bd14:	0800bd31 	.word	0x0800bd31
 800bd18:	0800bd29 	.word	0x0800bd29
 800bd1c:	0800bd39 	.word	0x0800bd39
 800bd20:	2301      	movs	r3, #1
 800bd22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bd26:	e116      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800bd28:	2302      	movs	r3, #2
 800bd2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bd2e:	e112      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800bd30:	2304      	movs	r3, #4
 800bd32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bd36:	e10e      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800bd38:	2308      	movs	r3, #8
 800bd3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bd3e:	e10a      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800bd40:	2310      	movs	r3, #16
 800bd42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bd46:	e106      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a7c      	ldr	r2, [pc, #496]	@ (800bf40 <UART_SetConfig+0x2e8>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d138      	bne.n	800bdc4 <UART_SetConfig+0x16c>
 800bd52:	4b7a      	ldr	r3, [pc, #488]	@ (800bf3c <UART_SetConfig+0x2e4>)
 800bd54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd58:	f003 030c 	and.w	r3, r3, #12
 800bd5c:	2b0c      	cmp	r3, #12
 800bd5e:	d82d      	bhi.n	800bdbc <UART_SetConfig+0x164>
 800bd60:	a201      	add	r2, pc, #4	@ (adr r2, 800bd68 <UART_SetConfig+0x110>)
 800bd62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd66:	bf00      	nop
 800bd68:	0800bd9d 	.word	0x0800bd9d
 800bd6c:	0800bdbd 	.word	0x0800bdbd
 800bd70:	0800bdbd 	.word	0x0800bdbd
 800bd74:	0800bdbd 	.word	0x0800bdbd
 800bd78:	0800bdad 	.word	0x0800bdad
 800bd7c:	0800bdbd 	.word	0x0800bdbd
 800bd80:	0800bdbd 	.word	0x0800bdbd
 800bd84:	0800bdbd 	.word	0x0800bdbd
 800bd88:	0800bda5 	.word	0x0800bda5
 800bd8c:	0800bdbd 	.word	0x0800bdbd
 800bd90:	0800bdbd 	.word	0x0800bdbd
 800bd94:	0800bdbd 	.word	0x0800bdbd
 800bd98:	0800bdb5 	.word	0x0800bdb5
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bda2:	e0d8      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800bda4:	2302      	movs	r3, #2
 800bda6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bdaa:	e0d4      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800bdac:	2304      	movs	r3, #4
 800bdae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bdb2:	e0d0      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800bdb4:	2308      	movs	r3, #8
 800bdb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bdba:	e0cc      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800bdbc:	2310      	movs	r3, #16
 800bdbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bdc2:	e0c8      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a5e      	ldr	r2, [pc, #376]	@ (800bf44 <UART_SetConfig+0x2ec>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d125      	bne.n	800be1a <UART_SetConfig+0x1c2>
 800bdce:	4b5b      	ldr	r3, [pc, #364]	@ (800bf3c <UART_SetConfig+0x2e4>)
 800bdd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdd4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bdd8:	2b30      	cmp	r3, #48	@ 0x30
 800bdda:	d016      	beq.n	800be0a <UART_SetConfig+0x1b2>
 800bddc:	2b30      	cmp	r3, #48	@ 0x30
 800bdde:	d818      	bhi.n	800be12 <UART_SetConfig+0x1ba>
 800bde0:	2b20      	cmp	r3, #32
 800bde2:	d00a      	beq.n	800bdfa <UART_SetConfig+0x1a2>
 800bde4:	2b20      	cmp	r3, #32
 800bde6:	d814      	bhi.n	800be12 <UART_SetConfig+0x1ba>
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d002      	beq.n	800bdf2 <UART_SetConfig+0x19a>
 800bdec:	2b10      	cmp	r3, #16
 800bdee:	d008      	beq.n	800be02 <UART_SetConfig+0x1aa>
 800bdf0:	e00f      	b.n	800be12 <UART_SetConfig+0x1ba>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bdf8:	e0ad      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800bdfa:	2302      	movs	r3, #2
 800bdfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800be00:	e0a9      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800be02:	2304      	movs	r3, #4
 800be04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800be08:	e0a5      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800be0a:	2308      	movs	r3, #8
 800be0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800be10:	e0a1      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800be12:	2310      	movs	r3, #16
 800be14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800be18:	e09d      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a4a      	ldr	r2, [pc, #296]	@ (800bf48 <UART_SetConfig+0x2f0>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d125      	bne.n	800be70 <UART_SetConfig+0x218>
 800be24:	4b45      	ldr	r3, [pc, #276]	@ (800bf3c <UART_SetConfig+0x2e4>)
 800be26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800be2e:	2bc0      	cmp	r3, #192	@ 0xc0
 800be30:	d016      	beq.n	800be60 <UART_SetConfig+0x208>
 800be32:	2bc0      	cmp	r3, #192	@ 0xc0
 800be34:	d818      	bhi.n	800be68 <UART_SetConfig+0x210>
 800be36:	2b80      	cmp	r3, #128	@ 0x80
 800be38:	d00a      	beq.n	800be50 <UART_SetConfig+0x1f8>
 800be3a:	2b80      	cmp	r3, #128	@ 0x80
 800be3c:	d814      	bhi.n	800be68 <UART_SetConfig+0x210>
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d002      	beq.n	800be48 <UART_SetConfig+0x1f0>
 800be42:	2b40      	cmp	r3, #64	@ 0x40
 800be44:	d008      	beq.n	800be58 <UART_SetConfig+0x200>
 800be46:	e00f      	b.n	800be68 <UART_SetConfig+0x210>
 800be48:	2300      	movs	r3, #0
 800be4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800be4e:	e082      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800be50:	2302      	movs	r3, #2
 800be52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800be56:	e07e      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800be58:	2304      	movs	r3, #4
 800be5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800be5e:	e07a      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800be60:	2308      	movs	r3, #8
 800be62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800be66:	e076      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800be68:	2310      	movs	r3, #16
 800be6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800be6e:	e072      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a35      	ldr	r2, [pc, #212]	@ (800bf4c <UART_SetConfig+0x2f4>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d12a      	bne.n	800bed0 <UART_SetConfig+0x278>
 800be7a:	4b30      	ldr	r3, [pc, #192]	@ (800bf3c <UART_SetConfig+0x2e4>)
 800be7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be88:	d01a      	beq.n	800bec0 <UART_SetConfig+0x268>
 800be8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be8e:	d81b      	bhi.n	800bec8 <UART_SetConfig+0x270>
 800be90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be94:	d00c      	beq.n	800beb0 <UART_SetConfig+0x258>
 800be96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be9a:	d815      	bhi.n	800bec8 <UART_SetConfig+0x270>
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d003      	beq.n	800bea8 <UART_SetConfig+0x250>
 800bea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bea4:	d008      	beq.n	800beb8 <UART_SetConfig+0x260>
 800bea6:	e00f      	b.n	800bec8 <UART_SetConfig+0x270>
 800bea8:	2300      	movs	r3, #0
 800beaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800beae:	e052      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800beb0:	2302      	movs	r3, #2
 800beb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800beb6:	e04e      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800beb8:	2304      	movs	r3, #4
 800beba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bebe:	e04a      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800bec0:	2308      	movs	r3, #8
 800bec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bec6:	e046      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800bec8:	2310      	movs	r3, #16
 800beca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bece:	e042      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4a17      	ldr	r2, [pc, #92]	@ (800bf34 <UART_SetConfig+0x2dc>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d13a      	bne.n	800bf50 <UART_SetConfig+0x2f8>
 800beda:	4b18      	ldr	r3, [pc, #96]	@ (800bf3c <UART_SetConfig+0x2e4>)
 800bedc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bee0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bee4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bee8:	d01a      	beq.n	800bf20 <UART_SetConfig+0x2c8>
 800beea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800beee:	d81b      	bhi.n	800bf28 <UART_SetConfig+0x2d0>
 800bef0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bef4:	d00c      	beq.n	800bf10 <UART_SetConfig+0x2b8>
 800bef6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800befa:	d815      	bhi.n	800bf28 <UART_SetConfig+0x2d0>
 800befc:	2b00      	cmp	r3, #0
 800befe:	d003      	beq.n	800bf08 <UART_SetConfig+0x2b0>
 800bf00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf04:	d008      	beq.n	800bf18 <UART_SetConfig+0x2c0>
 800bf06:	e00f      	b.n	800bf28 <UART_SetConfig+0x2d0>
 800bf08:	2300      	movs	r3, #0
 800bf0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf0e:	e022      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800bf10:	2302      	movs	r3, #2
 800bf12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf16:	e01e      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800bf18:	2304      	movs	r3, #4
 800bf1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf1e:	e01a      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800bf20:	2308      	movs	r3, #8
 800bf22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf26:	e016      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800bf28:	2310      	movs	r3, #16
 800bf2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf2e:	e012      	b.n	800bf56 <UART_SetConfig+0x2fe>
 800bf30:	cfff69f3 	.word	0xcfff69f3
 800bf34:	40008000 	.word	0x40008000
 800bf38:	40013800 	.word	0x40013800
 800bf3c:	40021000 	.word	0x40021000
 800bf40:	40004400 	.word	0x40004400
 800bf44:	40004800 	.word	0x40004800
 800bf48:	40004c00 	.word	0x40004c00
 800bf4c:	40005000 	.word	0x40005000
 800bf50:	2310      	movs	r3, #16
 800bf52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4aae      	ldr	r2, [pc, #696]	@ (800c214 <UART_SetConfig+0x5bc>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	f040 8097 	bne.w	800c090 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bf62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bf66:	2b08      	cmp	r3, #8
 800bf68:	d823      	bhi.n	800bfb2 <UART_SetConfig+0x35a>
 800bf6a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf70 <UART_SetConfig+0x318>)
 800bf6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf70:	0800bf95 	.word	0x0800bf95
 800bf74:	0800bfb3 	.word	0x0800bfb3
 800bf78:	0800bf9d 	.word	0x0800bf9d
 800bf7c:	0800bfb3 	.word	0x0800bfb3
 800bf80:	0800bfa3 	.word	0x0800bfa3
 800bf84:	0800bfb3 	.word	0x0800bfb3
 800bf88:	0800bfb3 	.word	0x0800bfb3
 800bf8c:	0800bfb3 	.word	0x0800bfb3
 800bf90:	0800bfab 	.word	0x0800bfab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf94:	f7fc fa62 	bl	800845c <HAL_RCC_GetPCLK1Freq>
 800bf98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bf9a:	e010      	b.n	800bfbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf9c:	4b9e      	ldr	r3, [pc, #632]	@ (800c218 <UART_SetConfig+0x5c0>)
 800bf9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bfa0:	e00d      	b.n	800bfbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bfa2:	f7fc f9ed 	bl	8008380 <HAL_RCC_GetSysClockFreq>
 800bfa6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bfa8:	e009      	b.n	800bfbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bfaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bfae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bfb0:	e005      	b.n	800bfbe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bfbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	f000 8130 	beq.w	800c226 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfca:	4a94      	ldr	r2, [pc, #592]	@ (800c21c <UART_SetConfig+0x5c4>)
 800bfcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfd8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	685a      	ldr	r2, [r3, #4]
 800bfde:	4613      	mov	r3, r2
 800bfe0:	005b      	lsls	r3, r3, #1
 800bfe2:	4413      	add	r3, r2
 800bfe4:	69ba      	ldr	r2, [r7, #24]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d305      	bcc.n	800bff6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bff0:	69ba      	ldr	r2, [r7, #24]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d903      	bls.n	800bffe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800bff6:	2301      	movs	r3, #1
 800bff8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bffc:	e113      	b.n	800c226 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c000:	2200      	movs	r2, #0
 800c002:	60bb      	str	r3, [r7, #8]
 800c004:	60fa      	str	r2, [r7, #12]
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c00a:	4a84      	ldr	r2, [pc, #528]	@ (800c21c <UART_SetConfig+0x5c4>)
 800c00c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c010:	b29b      	uxth	r3, r3
 800c012:	2200      	movs	r2, #0
 800c014:	603b      	str	r3, [r7, #0]
 800c016:	607a      	str	r2, [r7, #4]
 800c018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c01c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c020:	f7f4 fdea 	bl	8000bf8 <__aeabi_uldivmod>
 800c024:	4602      	mov	r2, r0
 800c026:	460b      	mov	r3, r1
 800c028:	4610      	mov	r0, r2
 800c02a:	4619      	mov	r1, r3
 800c02c:	f04f 0200 	mov.w	r2, #0
 800c030:	f04f 0300 	mov.w	r3, #0
 800c034:	020b      	lsls	r3, r1, #8
 800c036:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c03a:	0202      	lsls	r2, r0, #8
 800c03c:	6979      	ldr	r1, [r7, #20]
 800c03e:	6849      	ldr	r1, [r1, #4]
 800c040:	0849      	lsrs	r1, r1, #1
 800c042:	2000      	movs	r0, #0
 800c044:	460c      	mov	r4, r1
 800c046:	4605      	mov	r5, r0
 800c048:	eb12 0804 	adds.w	r8, r2, r4
 800c04c:	eb43 0905 	adc.w	r9, r3, r5
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	2200      	movs	r2, #0
 800c056:	469a      	mov	sl, r3
 800c058:	4693      	mov	fp, r2
 800c05a:	4652      	mov	r2, sl
 800c05c:	465b      	mov	r3, fp
 800c05e:	4640      	mov	r0, r8
 800c060:	4649      	mov	r1, r9
 800c062:	f7f4 fdc9 	bl	8000bf8 <__aeabi_uldivmod>
 800c066:	4602      	mov	r2, r0
 800c068:	460b      	mov	r3, r1
 800c06a:	4613      	mov	r3, r2
 800c06c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c06e:	6a3b      	ldr	r3, [r7, #32]
 800c070:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c074:	d308      	bcc.n	800c088 <UART_SetConfig+0x430>
 800c076:	6a3b      	ldr	r3, [r7, #32]
 800c078:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c07c:	d204      	bcs.n	800c088 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	6a3a      	ldr	r2, [r7, #32]
 800c084:	60da      	str	r2, [r3, #12]
 800c086:	e0ce      	b.n	800c226 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c088:	2301      	movs	r3, #1
 800c08a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c08e:	e0ca      	b.n	800c226 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	69db      	ldr	r3, [r3, #28]
 800c094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c098:	d166      	bne.n	800c168 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c09a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c09e:	2b08      	cmp	r3, #8
 800c0a0:	d827      	bhi.n	800c0f2 <UART_SetConfig+0x49a>
 800c0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0a8 <UART_SetConfig+0x450>)
 800c0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a8:	0800c0cd 	.word	0x0800c0cd
 800c0ac:	0800c0d5 	.word	0x0800c0d5
 800c0b0:	0800c0dd 	.word	0x0800c0dd
 800c0b4:	0800c0f3 	.word	0x0800c0f3
 800c0b8:	0800c0e3 	.word	0x0800c0e3
 800c0bc:	0800c0f3 	.word	0x0800c0f3
 800c0c0:	0800c0f3 	.word	0x0800c0f3
 800c0c4:	0800c0f3 	.word	0x0800c0f3
 800c0c8:	0800c0eb 	.word	0x0800c0eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0cc:	f7fc f9c6 	bl	800845c <HAL_RCC_GetPCLK1Freq>
 800c0d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c0d2:	e014      	b.n	800c0fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c0d4:	f7fc f9d8 	bl	8008488 <HAL_RCC_GetPCLK2Freq>
 800c0d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c0da:	e010      	b.n	800c0fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c0dc:	4b4e      	ldr	r3, [pc, #312]	@ (800c218 <UART_SetConfig+0x5c0>)
 800c0de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c0e0:	e00d      	b.n	800c0fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c0e2:	f7fc f94d 	bl	8008380 <HAL_RCC_GetSysClockFreq>
 800c0e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c0e8:	e009      	b.n	800c0fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c0ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c0f0:	e005      	b.n	800c0fe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c0fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c100:	2b00      	cmp	r3, #0
 800c102:	f000 8090 	beq.w	800c226 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c10a:	4a44      	ldr	r2, [pc, #272]	@ (800c21c <UART_SetConfig+0x5c4>)
 800c10c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c110:	461a      	mov	r2, r3
 800c112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c114:	fbb3 f3f2 	udiv	r3, r3, r2
 800c118:	005a      	lsls	r2, r3, #1
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	085b      	lsrs	r3, r3, #1
 800c120:	441a      	add	r2, r3
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	fbb2 f3f3 	udiv	r3, r2, r3
 800c12a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c12c:	6a3b      	ldr	r3, [r7, #32]
 800c12e:	2b0f      	cmp	r3, #15
 800c130:	d916      	bls.n	800c160 <UART_SetConfig+0x508>
 800c132:	6a3b      	ldr	r3, [r7, #32]
 800c134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c138:	d212      	bcs.n	800c160 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c13a:	6a3b      	ldr	r3, [r7, #32]
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	f023 030f 	bic.w	r3, r3, #15
 800c142:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c144:	6a3b      	ldr	r3, [r7, #32]
 800c146:	085b      	lsrs	r3, r3, #1
 800c148:	b29b      	uxth	r3, r3
 800c14a:	f003 0307 	and.w	r3, r3, #7
 800c14e:	b29a      	uxth	r2, r3
 800c150:	8bfb      	ldrh	r3, [r7, #30]
 800c152:	4313      	orrs	r3, r2
 800c154:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	8bfa      	ldrh	r2, [r7, #30]
 800c15c:	60da      	str	r2, [r3, #12]
 800c15e:	e062      	b.n	800c226 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c160:	2301      	movs	r3, #1
 800c162:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c166:	e05e      	b.n	800c226 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c168:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c16c:	2b08      	cmp	r3, #8
 800c16e:	d828      	bhi.n	800c1c2 <UART_SetConfig+0x56a>
 800c170:	a201      	add	r2, pc, #4	@ (adr r2, 800c178 <UART_SetConfig+0x520>)
 800c172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c176:	bf00      	nop
 800c178:	0800c19d 	.word	0x0800c19d
 800c17c:	0800c1a5 	.word	0x0800c1a5
 800c180:	0800c1ad 	.word	0x0800c1ad
 800c184:	0800c1c3 	.word	0x0800c1c3
 800c188:	0800c1b3 	.word	0x0800c1b3
 800c18c:	0800c1c3 	.word	0x0800c1c3
 800c190:	0800c1c3 	.word	0x0800c1c3
 800c194:	0800c1c3 	.word	0x0800c1c3
 800c198:	0800c1bb 	.word	0x0800c1bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c19c:	f7fc f95e 	bl	800845c <HAL_RCC_GetPCLK1Freq>
 800c1a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c1a2:	e014      	b.n	800c1ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1a4:	f7fc f970 	bl	8008488 <HAL_RCC_GetPCLK2Freq>
 800c1a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c1aa:	e010      	b.n	800c1ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c1ac:	4b1a      	ldr	r3, [pc, #104]	@ (800c218 <UART_SetConfig+0x5c0>)
 800c1ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c1b0:	e00d      	b.n	800c1ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c1b2:	f7fc f8e5 	bl	8008380 <HAL_RCC_GetSysClockFreq>
 800c1b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c1b8:	e009      	b.n	800c1ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c1be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c1c0:	e005      	b.n	800c1ce <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c1cc:	bf00      	nop
    }

    if (pclk != 0U)
 800c1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d028      	beq.n	800c226 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1d8:	4a10      	ldr	r2, [pc, #64]	@ (800c21c <UART_SetConfig+0x5c4>)
 800c1da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1de:	461a      	mov	r2, r3
 800c1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e2:	fbb3 f2f2 	udiv	r2, r3, r2
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	085b      	lsrs	r3, r3, #1
 800c1ec:	441a      	add	r2, r3
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c1f8:	6a3b      	ldr	r3, [r7, #32]
 800c1fa:	2b0f      	cmp	r3, #15
 800c1fc:	d910      	bls.n	800c220 <UART_SetConfig+0x5c8>
 800c1fe:	6a3b      	ldr	r3, [r7, #32]
 800c200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c204:	d20c      	bcs.n	800c220 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c206:	6a3b      	ldr	r3, [r7, #32]
 800c208:	b29a      	uxth	r2, r3
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	60da      	str	r2, [r3, #12]
 800c210:	e009      	b.n	800c226 <UART_SetConfig+0x5ce>
 800c212:	bf00      	nop
 800c214:	40008000 	.word	0x40008000
 800c218:	00f42400 	.word	0x00f42400
 800c21c:	08013734 	.word	0x08013734
      }
      else
      {
        ret = HAL_ERROR;
 800c220:	2301      	movs	r3, #1
 800c222:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	2201      	movs	r2, #1
 800c22a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	2201      	movs	r2, #1
 800c232:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	2200      	movs	r2, #0
 800c23a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	2200      	movs	r2, #0
 800c240:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c242:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c246:	4618      	mov	r0, r3
 800c248:	3730      	adds	r7, #48	@ 0x30
 800c24a:	46bd      	mov	sp, r7
 800c24c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c250 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c25c:	f003 0308 	and.w	r3, r3, #8
 800c260:	2b00      	cmp	r3, #0
 800c262:	d00a      	beq.n	800c27a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	430a      	orrs	r2, r1
 800c278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c27e:	f003 0301 	and.w	r3, r3, #1
 800c282:	2b00      	cmp	r3, #0
 800c284:	d00a      	beq.n	800c29c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	430a      	orrs	r2, r1
 800c29a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2a0:	f003 0302 	and.w	r3, r3, #2
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d00a      	beq.n	800c2be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	430a      	orrs	r2, r1
 800c2bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2c2:	f003 0304 	and.w	r3, r3, #4
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d00a      	beq.n	800c2e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	430a      	orrs	r2, r1
 800c2de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2e4:	f003 0310 	and.w	r3, r3, #16
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00a      	beq.n	800c302 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	689b      	ldr	r3, [r3, #8]
 800c2f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	430a      	orrs	r2, r1
 800c300:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c306:	f003 0320 	and.w	r3, r3, #32
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00a      	beq.n	800c324 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	689b      	ldr	r3, [r3, #8]
 800c314:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	430a      	orrs	r2, r1
 800c322:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d01a      	beq.n	800c366 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	430a      	orrs	r2, r1
 800c344:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c34a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c34e:	d10a      	bne.n	800c366 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	430a      	orrs	r2, r1
 800c364:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c36a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00a      	beq.n	800c388 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	430a      	orrs	r2, r1
 800c386:	605a      	str	r2, [r3, #4]
  }
}
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b098      	sub	sp, #96	@ 0x60
 800c398:	af02      	add	r7, sp, #8
 800c39a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c3a4:	f7f7 fc4a 	bl	8003c3c <HAL_GetTick>
 800c3a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f003 0308 	and.w	r3, r3, #8
 800c3b4:	2b08      	cmp	r3, #8
 800c3b6:	d12f      	bne.n	800c418 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c3bc:	9300      	str	r3, [sp, #0]
 800c3be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 f88e 	bl	800c4e8 <UART_WaitOnFlagUntilTimeout>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d022      	beq.n	800c418 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3da:	e853 3f00 	ldrex	r3, [r3]
 800c3de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c3e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c3e6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c3f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c3f8:	e841 2300 	strex	r3, r2, [r1]
 800c3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c3fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c400:	2b00      	cmp	r3, #0
 800c402:	d1e6      	bne.n	800c3d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2220      	movs	r2, #32
 800c408:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2200      	movs	r2, #0
 800c410:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c414:	2303      	movs	r3, #3
 800c416:	e063      	b.n	800c4e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f003 0304 	and.w	r3, r3, #4
 800c422:	2b04      	cmp	r3, #4
 800c424:	d149      	bne.n	800c4ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c426:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c42a:	9300      	str	r3, [sp, #0]
 800c42c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c42e:	2200      	movs	r2, #0
 800c430:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 f857 	bl	800c4e8 <UART_WaitOnFlagUntilTimeout>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d03c      	beq.n	800c4ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c448:	e853 3f00 	ldrex	r3, [r3]
 800c44c:	623b      	str	r3, [r7, #32]
   return(result);
 800c44e:	6a3b      	ldr	r3, [r7, #32]
 800c450:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c454:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	461a      	mov	r2, r3
 800c45c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c45e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c460:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c462:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c466:	e841 2300 	strex	r3, r2, [r1]
 800c46a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d1e6      	bne.n	800c440 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	3308      	adds	r3, #8
 800c478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	e853 3f00 	ldrex	r3, [r3]
 800c480:	60fb      	str	r3, [r7, #12]
   return(result);
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f023 0301 	bic.w	r3, r3, #1
 800c488:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	3308      	adds	r3, #8
 800c490:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c492:	61fa      	str	r2, [r7, #28]
 800c494:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c496:	69b9      	ldr	r1, [r7, #24]
 800c498:	69fa      	ldr	r2, [r7, #28]
 800c49a:	e841 2300 	strex	r3, r2, [r1]
 800c49e:	617b      	str	r3, [r7, #20]
   return(result);
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d1e5      	bne.n	800c472 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2220      	movs	r2, #32
 800c4aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4b6:	2303      	movs	r3, #3
 800c4b8:	e012      	b.n	800c4e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2220      	movs	r2, #32
 800c4be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2220      	movs	r2, #32
 800c4c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c4de:	2300      	movs	r3, #0
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3758      	adds	r7, #88	@ 0x58
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	603b      	str	r3, [r7, #0]
 800c4f4:	4613      	mov	r3, r2
 800c4f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4f8:	e04f      	b.n	800c59a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4fa:	69bb      	ldr	r3, [r7, #24]
 800c4fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c500:	d04b      	beq.n	800c59a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c502:	f7f7 fb9b 	bl	8003c3c <HAL_GetTick>
 800c506:	4602      	mov	r2, r0
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	1ad3      	subs	r3, r2, r3
 800c50c:	69ba      	ldr	r2, [r7, #24]
 800c50e:	429a      	cmp	r2, r3
 800c510:	d302      	bcc.n	800c518 <UART_WaitOnFlagUntilTimeout+0x30>
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d101      	bne.n	800c51c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c518:	2303      	movs	r3, #3
 800c51a:	e04e      	b.n	800c5ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f003 0304 	and.w	r3, r3, #4
 800c526:	2b00      	cmp	r3, #0
 800c528:	d037      	beq.n	800c59a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	2b80      	cmp	r3, #128	@ 0x80
 800c52e:	d034      	beq.n	800c59a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	2b40      	cmp	r3, #64	@ 0x40
 800c534:	d031      	beq.n	800c59a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	69db      	ldr	r3, [r3, #28]
 800c53c:	f003 0308 	and.w	r3, r3, #8
 800c540:	2b08      	cmp	r3, #8
 800c542:	d110      	bne.n	800c566 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	2208      	movs	r2, #8
 800c54a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c54c:	68f8      	ldr	r0, [r7, #12]
 800c54e:	f000 f838 	bl	800c5c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2208      	movs	r2, #8
 800c556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2200      	movs	r2, #0
 800c55e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c562:	2301      	movs	r3, #1
 800c564:	e029      	b.n	800c5ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	69db      	ldr	r3, [r3, #28]
 800c56c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c570:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c574:	d111      	bne.n	800c59a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c57e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c580:	68f8      	ldr	r0, [r7, #12]
 800c582:	f000 f81e 	bl	800c5c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2220      	movs	r2, #32
 800c58a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2200      	movs	r2, #0
 800c592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c596:	2303      	movs	r3, #3
 800c598:	e00f      	b.n	800c5ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	69da      	ldr	r2, [r3, #28]
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	4013      	ands	r3, r2
 800c5a4:	68ba      	ldr	r2, [r7, #8]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	bf0c      	ite	eq
 800c5aa:	2301      	moveq	r3, #1
 800c5ac:	2300      	movne	r3, #0
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	79fb      	ldrb	r3, [r7, #7]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d0a0      	beq.n	800c4fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c5b8:	2300      	movs	r3, #0
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c5c2:	b480      	push	{r7}
 800c5c4:	b095      	sub	sp, #84	@ 0x54
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5d2:	e853 3f00 	ldrex	r3, [r3]
 800c5d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c5de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5e8:	643b      	str	r3, [r7, #64]	@ 0x40
 800c5ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c5ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c5f0:	e841 2300 	strex	r3, r2, [r1]
 800c5f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d1e6      	bne.n	800c5ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	3308      	adds	r3, #8
 800c602:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c604:	6a3b      	ldr	r3, [r7, #32]
 800c606:	e853 3f00 	ldrex	r3, [r3]
 800c60a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c612:	f023 0301 	bic.w	r3, r3, #1
 800c616:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	3308      	adds	r3, #8
 800c61e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c620:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c622:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c624:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c628:	e841 2300 	strex	r3, r2, [r1]
 800c62c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1e3      	bne.n	800c5fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d118      	bne.n	800c66e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	e853 3f00 	ldrex	r3, [r3]
 800c648:	60bb      	str	r3, [r7, #8]
   return(result);
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	f023 0310 	bic.w	r3, r3, #16
 800c650:	647b      	str	r3, [r7, #68]	@ 0x44
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	461a      	mov	r2, r3
 800c658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c65a:	61bb      	str	r3, [r7, #24]
 800c65c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c65e:	6979      	ldr	r1, [r7, #20]
 800c660:	69ba      	ldr	r2, [r7, #24]
 800c662:	e841 2300 	strex	r3, r2, [r1]
 800c666:	613b      	str	r3, [r7, #16]
   return(result);
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d1e6      	bne.n	800c63c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2220      	movs	r2, #32
 800c672:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c682:	bf00      	nop
 800c684:	3754      	adds	r7, #84	@ 0x54
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr

0800c68e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c68e:	b580      	push	{r7, lr}
 800c690:	b084      	sub	sp, #16
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c69a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f7ff fac1 	bl	800bc2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6aa:	bf00      	nop
 800c6ac:	3710      	adds	r7, #16
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}

0800c6b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c6b2:	b580      	push	{r7, lr}
 800c6b4:	b088      	sub	sp, #32
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	e853 3f00 	ldrex	r3, [r3]
 800c6c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c6ce:	61fb      	str	r3, [r7, #28]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	69fb      	ldr	r3, [r7, #28]
 800c6d8:	61bb      	str	r3, [r7, #24]
 800c6da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6dc:	6979      	ldr	r1, [r7, #20]
 800c6de:	69ba      	ldr	r2, [r7, #24]
 800c6e0:	e841 2300 	strex	r3, r2, [r1]
 800c6e4:	613b      	str	r3, [r7, #16]
   return(result);
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d1e6      	bne.n	800c6ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2220      	movs	r2, #32
 800c6f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f7ff fa8c 	bl	800bc18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c700:	bf00      	nop
 800c702:	3720      	adds	r7, #32
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c708:	b480      	push	{r7}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c710:	bf00      	nop
 800c712:	370c      	adds	r7, #12
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b083      	sub	sp, #12
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c724:	bf00      	nop
 800c726:	370c      	adds	r7, #12
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr

0800c730 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c738:	bf00      	nop
 800c73a:	370c      	adds	r7, #12
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr

0800c744 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c744:	b480      	push	{r7}
 800c746:	b085      	sub	sp, #20
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c752:	2b01      	cmp	r3, #1
 800c754:	d101      	bne.n	800c75a <HAL_UARTEx_DisableFifoMode+0x16>
 800c756:	2302      	movs	r3, #2
 800c758:	e027      	b.n	800c7aa <HAL_UARTEx_DisableFifoMode+0x66>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2201      	movs	r2, #1
 800c75e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2224      	movs	r2, #36	@ 0x24
 800c766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f022 0201 	bic.w	r2, r2, #1
 800c780:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c788:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2200      	movs	r2, #0
 800c78e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2220      	movs	r2, #32
 800c79c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c7a8:	2300      	movs	r3, #0
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3714      	adds	r7, #20
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr

0800c7b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b084      	sub	sp, #16
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d101      	bne.n	800c7ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c7ca:	2302      	movs	r3, #2
 800c7cc:	e02d      	b.n	800c82a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2224      	movs	r2, #36	@ 0x24
 800c7da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	681a      	ldr	r2, [r3, #0]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f022 0201 	bic.w	r2, r2, #1
 800c7f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	683a      	ldr	r2, [r7, #0]
 800c806:	430a      	orrs	r2, r1
 800c808:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 f850 	bl	800c8b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2220      	movs	r2, #32
 800c81c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c828:	2300      	movs	r3, #0
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b084      	sub	sp, #16
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
 800c83a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c842:	2b01      	cmp	r3, #1
 800c844:	d101      	bne.n	800c84a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c846:	2302      	movs	r3, #2
 800c848:	e02d      	b.n	800c8a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2201      	movs	r2, #1
 800c84e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2224      	movs	r2, #36	@ 0x24
 800c856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f022 0201 	bic.w	r2, r2, #1
 800c870:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	683a      	ldr	r2, [r7, #0]
 800c882:	430a      	orrs	r2, r1
 800c884:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 f812 	bl	800c8b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	68fa      	ldr	r2, [r7, #12]
 800c892:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2220      	movs	r2, #32
 800c898:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c8a4:	2300      	movs	r3, #0
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3710      	adds	r7, #16
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
	...

0800c8b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b085      	sub	sp, #20
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d108      	bne.n	800c8d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c8d0:	e031      	b.n	800c936 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c8d2:	2308      	movs	r3, #8
 800c8d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c8d6:	2308      	movs	r3, #8
 800c8d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	689b      	ldr	r3, [r3, #8]
 800c8e0:	0e5b      	lsrs	r3, r3, #25
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	f003 0307 	and.w	r3, r3, #7
 800c8e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	689b      	ldr	r3, [r3, #8]
 800c8f0:	0f5b      	lsrs	r3, r3, #29
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	f003 0307 	and.w	r3, r3, #7
 800c8f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8fa:	7bbb      	ldrb	r3, [r7, #14]
 800c8fc:	7b3a      	ldrb	r2, [r7, #12]
 800c8fe:	4911      	ldr	r1, [pc, #68]	@ (800c944 <UARTEx_SetNbDataToProcess+0x94>)
 800c900:	5c8a      	ldrb	r2, [r1, r2]
 800c902:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c906:	7b3a      	ldrb	r2, [r7, #12]
 800c908:	490f      	ldr	r1, [pc, #60]	@ (800c948 <UARTEx_SetNbDataToProcess+0x98>)
 800c90a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c90c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c910:	b29a      	uxth	r2, r3
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c918:	7bfb      	ldrb	r3, [r7, #15]
 800c91a:	7b7a      	ldrb	r2, [r7, #13]
 800c91c:	4909      	ldr	r1, [pc, #36]	@ (800c944 <UARTEx_SetNbDataToProcess+0x94>)
 800c91e:	5c8a      	ldrb	r2, [r1, r2]
 800c920:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c924:	7b7a      	ldrb	r2, [r7, #13]
 800c926:	4908      	ldr	r1, [pc, #32]	@ (800c948 <UARTEx_SetNbDataToProcess+0x98>)
 800c928:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c92a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c92e:	b29a      	uxth	r2, r3
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c936:	bf00      	nop
 800c938:	3714      	adds	r7, #20
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr
 800c942:	bf00      	nop
 800c944:	0801374c 	.word	0x0801374c
 800c948:	08013754 	.word	0x08013754

0800c94c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b085      	sub	sp, #20
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2200      	movs	r2, #0
 800c958:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c95c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c960:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	b29a      	uxth	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3714      	adds	r7, #20
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr

0800c97a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c97a:	b480      	push	{r7}
 800c97c:	b085      	sub	sp, #20
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c982:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c986:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c98e:	b29a      	uxth	r2, r3
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	b29b      	uxth	r3, r3
 800c994:	43db      	mvns	r3, r3
 800c996:	b29b      	uxth	r3, r3
 800c998:	4013      	ands	r3, r2
 800c99a:	b29a      	uxth	r2, r3
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c9a2:	2300      	movs	r3, #0
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3714      	adds	r7, #20
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b085      	sub	sp, #20
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	1d3b      	adds	r3, r7, #4
 800c9ba:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800c9de:	2300      	movs	r3, #0
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3714      	adds	r7, #20
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b0a7      	sub	sp, #156	@ 0x9c
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	4413      	add	r3, r2
 800ca06:	881b      	ldrh	r3, [r3, #0]
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800ca0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca12:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	78db      	ldrb	r3, [r3, #3]
 800ca1a:	2b03      	cmp	r3, #3
 800ca1c:	d81f      	bhi.n	800ca5e <USB_ActivateEndpoint+0x72>
 800ca1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ca24 <USB_ActivateEndpoint+0x38>)
 800ca20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca24:	0800ca35 	.word	0x0800ca35
 800ca28:	0800ca51 	.word	0x0800ca51
 800ca2c:	0800ca67 	.word	0x0800ca67
 800ca30:	0800ca43 	.word	0x0800ca43
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ca34:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ca38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ca3c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800ca40:	e012      	b.n	800ca68 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ca42:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ca46:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800ca4a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800ca4e:	e00b      	b.n	800ca68 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ca50:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ca54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ca58:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800ca5c:	e004      	b.n	800ca68 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800ca64:	e000      	b.n	800ca68 <USB_ActivateEndpoint+0x7c>
      break;
 800ca66:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	441a      	add	r2, r3
 800ca72:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ca76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	009b      	lsls	r3, r3, #2
 800ca92:	4413      	add	r3, r2
 800ca94:	881b      	ldrh	r3, [r3, #0]
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	b21b      	sxth	r3, r3
 800ca9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caa2:	b21a      	sxth	r2, r3
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	b21b      	sxth	r3, r3
 800caaa:	4313      	orrs	r3, r2
 800caac:	b21b      	sxth	r3, r3
 800caae:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	441a      	add	r2, r3
 800cabc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800cac0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cac4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cac8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cacc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	7b1b      	ldrb	r3, [r3, #12]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	f040 8180 	bne.w	800cdde <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	785b      	ldrb	r3, [r3, #1]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	f000 8084 	beq.w	800cbf0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	61bb      	str	r3, [r7, #24]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	461a      	mov	r2, r3
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	4413      	add	r3, r2
 800cafa:	61bb      	str	r3, [r7, #24]
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	00da      	lsls	r2, r3, #3
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	4413      	add	r3, r2
 800cb06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cb0a:	617b      	str	r3, [r7, #20]
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	88db      	ldrh	r3, [r3, #6]
 800cb10:	085b      	lsrs	r3, r3, #1
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	005b      	lsls	r3, r3, #1
 800cb16:	b29a      	uxth	r2, r3
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cb1c:	687a      	ldr	r2, [r7, #4]
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	009b      	lsls	r3, r3, #2
 800cb24:	4413      	add	r3, r2
 800cb26:	881b      	ldrh	r3, [r3, #0]
 800cb28:	827b      	strh	r3, [r7, #18]
 800cb2a:	8a7b      	ldrh	r3, [r7, #18]
 800cb2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d01b      	beq.n	800cb6c <USB_ActivateEndpoint+0x180>
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	009b      	lsls	r3, r3, #2
 800cb3c:	4413      	add	r3, r2
 800cb3e:	881b      	ldrh	r3, [r3, #0]
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb4a:	823b      	strh	r3, [r7, #16]
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	441a      	add	r2, r3
 800cb56:	8a3b      	ldrh	r3, [r7, #16]
 800cb58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb64:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	78db      	ldrb	r3, [r3, #3]
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d020      	beq.n	800cbb6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	4413      	add	r3, r2
 800cb7e:	881b      	ldrh	r3, [r3, #0]
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb8a:	81bb      	strh	r3, [r7, #12]
 800cb8c:	89bb      	ldrh	r3, [r7, #12]
 800cb8e:	f083 0320 	eor.w	r3, r3, #32
 800cb92:	81bb      	strh	r3, [r7, #12]
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	009b      	lsls	r3, r3, #2
 800cb9c:	441a      	add	r2, r3
 800cb9e:	89bb      	ldrh	r3, [r7, #12]
 800cba0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cba4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cba8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	8013      	strh	r3, [r2, #0]
 800cbb4:	e3f9      	b.n	800d3aa <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	4413      	add	r3, r2
 800cbc0:	881b      	ldrh	r3, [r3, #0]
 800cbc2:	b29b      	uxth	r3, r3
 800cbc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbcc:	81fb      	strh	r3, [r7, #14]
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	441a      	add	r2, r3
 800cbd8:	89fb      	ldrh	r3, [r7, #14]
 800cbda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	8013      	strh	r3, [r2, #0]
 800cbee:	e3dc      	b.n	800d3aa <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc00:	4413      	add	r3, r2
 800cc02:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	00da      	lsls	r2, r3, #3
 800cc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc0c:	4413      	add	r3, r2
 800cc0e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800cc12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	88db      	ldrh	r3, [r3, #6]
 800cc18:	085b      	lsrs	r3, r3, #1
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	005b      	lsls	r3, r3, #1
 800cc1e:	b29a      	uxth	r2, r3
 800cc20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc22:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	461a      	mov	r2, r3
 800cc32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc34:	4413      	add	r3, r2
 800cc36:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	00da      	lsls	r2, r3, #3
 800cc3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc40:	4413      	add	r3, r2
 800cc42:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cc46:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4a:	881b      	ldrh	r3, [r3, #0]
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc56:	801a      	strh	r2, [r3, #0]
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	691b      	ldr	r3, [r3, #16]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d10a      	bne.n	800cc76 <USB_ActivateEndpoint+0x28a>
 800cc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc62:	881b      	ldrh	r3, [r3, #0]
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc6e:	b29a      	uxth	r2, r3
 800cc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc72:	801a      	strh	r2, [r3, #0]
 800cc74:	e041      	b.n	800ccfa <USB_ActivateEndpoint+0x30e>
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	691b      	ldr	r3, [r3, #16]
 800cc7a:	2b3e      	cmp	r3, #62	@ 0x3e
 800cc7c:	d81c      	bhi.n	800ccb8 <USB_ActivateEndpoint+0x2cc>
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	691b      	ldr	r3, [r3, #16]
 800cc82:	085b      	lsrs	r3, r3, #1
 800cc84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	691b      	ldr	r3, [r3, #16]
 800cc8c:	f003 0301 	and.w	r3, r3, #1
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d004      	beq.n	800cc9e <USB_ActivateEndpoint+0x2b2>
 800cc94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cc98:	3301      	adds	r3, #1
 800cc9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cca0:	881b      	ldrh	r3, [r3, #0]
 800cca2:	b29a      	uxth	r2, r3
 800cca4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	029b      	lsls	r3, r3, #10
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	b29a      	uxth	r2, r3
 800ccb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb4:	801a      	strh	r2, [r3, #0]
 800ccb6:	e020      	b.n	800ccfa <USB_ActivateEndpoint+0x30e>
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	691b      	ldr	r3, [r3, #16]
 800ccbc:	095b      	lsrs	r3, r3, #5
 800ccbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	691b      	ldr	r3, [r3, #16]
 800ccc6:	f003 031f 	and.w	r3, r3, #31
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d104      	bne.n	800ccd8 <USB_ActivateEndpoint+0x2ec>
 800ccce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ccd2:	3b01      	subs	r3, #1
 800ccd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ccd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccda:	881b      	ldrh	r3, [r3, #0]
 800ccdc:	b29a      	uxth	r2, r3
 800ccde:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cce2:	b29b      	uxth	r3, r3
 800cce4:	029b      	lsls	r3, r3, #10
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	4313      	orrs	r3, r2
 800ccea:	b29b      	uxth	r3, r3
 800ccec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccf4:	b29a      	uxth	r2, r3
 800ccf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ccfa:	687a      	ldr	r2, [r7, #4]
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	4413      	add	r3, r2
 800cd04:	881b      	ldrh	r3, [r3, #0]
 800cd06:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cd08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cd0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d01b      	beq.n	800cd4a <USB_ActivateEndpoint+0x35e>
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	009b      	lsls	r3, r3, #2
 800cd1a:	4413      	add	r3, r2
 800cd1c:	881b      	ldrh	r3, [r3, #0]
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd28:	843b      	strh	r3, [r7, #32]
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	009b      	lsls	r3, r3, #2
 800cd32:	441a      	add	r2, r3
 800cd34:	8c3b      	ldrh	r3, [r7, #32]
 800cd36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cd42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d124      	bne.n	800cd9c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	4413      	add	r3, r2
 800cd5c:	881b      	ldrh	r3, [r3, #0]
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cd64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd68:	83bb      	strh	r3, [r7, #28]
 800cd6a:	8bbb      	ldrh	r3, [r7, #28]
 800cd6c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cd70:	83bb      	strh	r3, [r7, #28]
 800cd72:	8bbb      	ldrh	r3, [r7, #28]
 800cd74:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cd78:	83bb      	strh	r3, [r7, #28]
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	441a      	add	r2, r3
 800cd84:	8bbb      	ldrh	r3, [r7, #28]
 800cd86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	8013      	strh	r3, [r2, #0]
 800cd9a:	e306      	b.n	800d3aa <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	4413      	add	r3, r2
 800cda6:	881b      	ldrh	r3, [r3, #0]
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cdae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdb2:	83fb      	strh	r3, [r7, #30]
 800cdb4:	8bfb      	ldrh	r3, [r7, #30]
 800cdb6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cdba:	83fb      	strh	r3, [r7, #30]
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	441a      	add	r2, r3
 800cdc6:	8bfb      	ldrh	r3, [r7, #30]
 800cdc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cdd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdd8:	b29b      	uxth	r3, r3
 800cdda:	8013      	strh	r3, [r2, #0]
 800cddc:	e2e5      	b.n	800d3aa <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	78db      	ldrb	r3, [r3, #3]
 800cde2:	2b02      	cmp	r3, #2
 800cde4:	d11e      	bne.n	800ce24 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	4413      	add	r3, r2
 800cdf0:	881b      	ldrh	r3, [r3, #0]
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cdf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdfc:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	441a      	add	r2, r3
 800ce0a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800ce0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce16:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ce1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	8013      	strh	r3, [r2, #0]
 800ce22:	e01d      	b.n	800ce60 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ce24:	687a      	ldr	r2, [r7, #4]
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	4413      	add	r3, r2
 800ce2e:	881b      	ldrh	r3, [r3, #0]
 800ce30:	b29b      	uxth	r3, r3
 800ce32:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ce36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce3a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	009b      	lsls	r3, r3, #2
 800ce46:	441a      	add	r2, r3
 800ce48:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800ce4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ce70:	4413      	add	r3, r2
 800ce72:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	00da      	lsls	r2, r3, #3
 800ce7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ce7c:	4413      	add	r3, r2
 800ce7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ce82:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	891b      	ldrh	r3, [r3, #8]
 800ce88:	085b      	lsrs	r3, r3, #1
 800ce8a:	b29b      	uxth	r3, r3
 800ce8c:	005b      	lsls	r3, r3, #1
 800ce8e:	b29a      	uxth	r2, r3
 800ce90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce92:	801a      	strh	r2, [r3, #0]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	677b      	str	r3, [r7, #116]	@ 0x74
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce9e:	b29b      	uxth	r3, r3
 800cea0:	461a      	mov	r2, r3
 800cea2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cea4:	4413      	add	r3, r2
 800cea6:	677b      	str	r3, [r7, #116]	@ 0x74
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	00da      	lsls	r2, r3, #3
 800ceae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ceb0:	4413      	add	r3, r2
 800ceb2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ceb6:	673b      	str	r3, [r7, #112]	@ 0x70
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	895b      	ldrh	r3, [r3, #10]
 800cebc:	085b      	lsrs	r3, r3, #1
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	005b      	lsls	r3, r3, #1
 800cec2:	b29a      	uxth	r2, r3
 800cec4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cec6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	785b      	ldrb	r3, [r3, #1]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f040 81af 	bne.w	800d230 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	009b      	lsls	r3, r3, #2
 800ceda:	4413      	add	r3, r2
 800cedc:	881b      	ldrh	r3, [r3, #0]
 800cede:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800cee2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800cee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d01d      	beq.n	800cf2a <USB_ActivateEndpoint+0x53e>
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	4413      	add	r3, r2
 800cef8:	881b      	ldrh	r3, [r3, #0]
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf04:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	441a      	add	r2, r3
 800cf12:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800cf16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cf22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf26:	b29b      	uxth	r3, r3
 800cf28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	4413      	add	r3, r2
 800cf34:	881b      	ldrh	r3, [r3, #0]
 800cf36:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800cf3a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800cf3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d01d      	beq.n	800cf82 <USB_ActivateEndpoint+0x596>
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	4413      	add	r3, r2
 800cf50:	881b      	ldrh	r3, [r3, #0]
 800cf52:	b29b      	uxth	r3, r3
 800cf54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf5c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	009b      	lsls	r3, r3, #2
 800cf68:	441a      	add	r2, r3
 800cf6a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800cf6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf7a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	785b      	ldrb	r3, [r3, #1]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d16b      	bne.n	800d062 <USB_ActivateEndpoint+0x676>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	461a      	mov	r2, r3
 800cf98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf9a:	4413      	add	r3, r2
 800cf9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	00da      	lsls	r2, r3, #3
 800cfa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfa6:	4413      	add	r3, r2
 800cfa8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cfac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cfae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfb0:	881b      	ldrh	r3, [r3, #0]
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cfb8:	b29a      	uxth	r2, r3
 800cfba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfbc:	801a      	strh	r2, [r3, #0]
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d10a      	bne.n	800cfdc <USB_ActivateEndpoint+0x5f0>
 800cfc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfc8:	881b      	ldrh	r3, [r3, #0]
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfd4:	b29a      	uxth	r2, r3
 800cfd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfd8:	801a      	strh	r2, [r3, #0]
 800cfda:	e05d      	b.n	800d098 <USB_ActivateEndpoint+0x6ac>
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	691b      	ldr	r3, [r3, #16]
 800cfe0:	2b3e      	cmp	r3, #62	@ 0x3e
 800cfe2:	d81c      	bhi.n	800d01e <USB_ActivateEndpoint+0x632>
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	691b      	ldr	r3, [r3, #16]
 800cfe8:	085b      	lsrs	r3, r3, #1
 800cfea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	691b      	ldr	r3, [r3, #16]
 800cff2:	f003 0301 	and.w	r3, r3, #1
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d004      	beq.n	800d004 <USB_ActivateEndpoint+0x618>
 800cffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cffe:	3301      	adds	r3, #1
 800d000:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d004:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d006:	881b      	ldrh	r3, [r3, #0]
 800d008:	b29a      	uxth	r2, r3
 800d00a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d00e:	b29b      	uxth	r3, r3
 800d010:	029b      	lsls	r3, r3, #10
 800d012:	b29b      	uxth	r3, r3
 800d014:	4313      	orrs	r3, r2
 800d016:	b29a      	uxth	r2, r3
 800d018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d01a:	801a      	strh	r2, [r3, #0]
 800d01c:	e03c      	b.n	800d098 <USB_ActivateEndpoint+0x6ac>
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	691b      	ldr	r3, [r3, #16]
 800d022:	095b      	lsrs	r3, r3, #5
 800d024:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	691b      	ldr	r3, [r3, #16]
 800d02c:	f003 031f 	and.w	r3, r3, #31
 800d030:	2b00      	cmp	r3, #0
 800d032:	d104      	bne.n	800d03e <USB_ActivateEndpoint+0x652>
 800d034:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d038:	3b01      	subs	r3, #1
 800d03a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d03e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d040:	881b      	ldrh	r3, [r3, #0]
 800d042:	b29a      	uxth	r2, r3
 800d044:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d048:	b29b      	uxth	r3, r3
 800d04a:	029b      	lsls	r3, r3, #10
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	4313      	orrs	r3, r2
 800d050:	b29b      	uxth	r3, r3
 800d052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d05a:	b29a      	uxth	r2, r3
 800d05c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d05e:	801a      	strh	r2, [r3, #0]
 800d060:	e01a      	b.n	800d098 <USB_ActivateEndpoint+0x6ac>
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	785b      	ldrb	r3, [r3, #1]
 800d066:	2b01      	cmp	r3, #1
 800d068:	d116      	bne.n	800d098 <USB_ActivateEndpoint+0x6ac>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	657b      	str	r3, [r7, #84]	@ 0x54
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d074:	b29b      	uxth	r3, r3
 800d076:	461a      	mov	r2, r3
 800d078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d07a:	4413      	add	r3, r2
 800d07c:	657b      	str	r3, [r7, #84]	@ 0x54
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	00da      	lsls	r2, r3, #3
 800d084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d086:	4413      	add	r3, r2
 800d088:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d08c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	691b      	ldr	r3, [r3, #16]
 800d092:	b29a      	uxth	r2, r3
 800d094:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d096:	801a      	strh	r2, [r3, #0]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	785b      	ldrb	r3, [r3, #1]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d16b      	bne.n	800d17c <USB_ActivateEndpoint+0x790>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	461a      	mov	r2, r3
 800d0b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0b4:	4413      	add	r3, r2
 800d0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	00da      	lsls	r2, r3, #3
 800d0be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0c0:	4413      	add	r3, r2
 800d0c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d0c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ca:	881b      	ldrh	r3, [r3, #0]
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d0d2:	b29a      	uxth	r2, r3
 800d0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0d6:	801a      	strh	r2, [r3, #0]
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	691b      	ldr	r3, [r3, #16]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d10a      	bne.n	800d0f6 <USB_ActivateEndpoint+0x70a>
 800d0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e2:	881b      	ldrh	r3, [r3, #0]
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0ee:	b29a      	uxth	r2, r3
 800d0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f2:	801a      	strh	r2, [r3, #0]
 800d0f4:	e05b      	b.n	800d1ae <USB_ActivateEndpoint+0x7c2>
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	691b      	ldr	r3, [r3, #16]
 800d0fa:	2b3e      	cmp	r3, #62	@ 0x3e
 800d0fc:	d81c      	bhi.n	800d138 <USB_ActivateEndpoint+0x74c>
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	691b      	ldr	r3, [r3, #16]
 800d102:	085b      	lsrs	r3, r3, #1
 800d104:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	f003 0301 	and.w	r3, r3, #1
 800d110:	2b00      	cmp	r3, #0
 800d112:	d004      	beq.n	800d11e <USB_ActivateEndpoint+0x732>
 800d114:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d118:	3301      	adds	r3, #1
 800d11a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d120:	881b      	ldrh	r3, [r3, #0]
 800d122:	b29a      	uxth	r2, r3
 800d124:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d128:	b29b      	uxth	r3, r3
 800d12a:	029b      	lsls	r3, r3, #10
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	4313      	orrs	r3, r2
 800d130:	b29a      	uxth	r2, r3
 800d132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d134:	801a      	strh	r2, [r3, #0]
 800d136:	e03a      	b.n	800d1ae <USB_ActivateEndpoint+0x7c2>
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	691b      	ldr	r3, [r3, #16]
 800d13c:	095b      	lsrs	r3, r3, #5
 800d13e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	691b      	ldr	r3, [r3, #16]
 800d146:	f003 031f 	and.w	r3, r3, #31
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d104      	bne.n	800d158 <USB_ActivateEndpoint+0x76c>
 800d14e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d152:	3b01      	subs	r3, #1
 800d154:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d15a:	881b      	ldrh	r3, [r3, #0]
 800d15c:	b29a      	uxth	r2, r3
 800d15e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d162:	b29b      	uxth	r3, r3
 800d164:	029b      	lsls	r3, r3, #10
 800d166:	b29b      	uxth	r3, r3
 800d168:	4313      	orrs	r3, r2
 800d16a:	b29b      	uxth	r3, r3
 800d16c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d174:	b29a      	uxth	r2, r3
 800d176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d178:	801a      	strh	r2, [r3, #0]
 800d17a:	e018      	b.n	800d1ae <USB_ActivateEndpoint+0x7c2>
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	785b      	ldrb	r3, [r3, #1]
 800d180:	2b01      	cmp	r3, #1
 800d182:	d114      	bne.n	800d1ae <USB_ActivateEndpoint+0x7c2>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d18a:	b29b      	uxth	r3, r3
 800d18c:	461a      	mov	r2, r3
 800d18e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d190:	4413      	add	r3, r2
 800d192:	647b      	str	r3, [r7, #68]	@ 0x44
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	00da      	lsls	r2, r3, #3
 800d19a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d19c:	4413      	add	r3, r2
 800d19e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d1a2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	691b      	ldr	r3, [r3, #16]
 800d1a8:	b29a      	uxth	r2, r3
 800d1aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1ac:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	4413      	add	r3, r2
 800d1b8:	881b      	ldrh	r3, [r3, #0]
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d1c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d1c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d1c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d1c8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d1cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d1ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d1d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d1d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d1d6:	687a      	ldr	r2, [r7, #4]
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	441a      	add	r2, r3
 800d1e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d1e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d1ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1f2:	b29b      	uxth	r3, r3
 800d1f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d1f6:	687a      	ldr	r2, [r7, #4]
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	4413      	add	r3, r2
 800d200:	881b      	ldrh	r3, [r3, #0]
 800d202:	b29b      	uxth	r3, r3
 800d204:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d208:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d20c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	441a      	add	r2, r3
 800d218:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d21a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d21e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d222:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	8013      	strh	r3, [r2, #0]
 800d22e:	e0bc      	b.n	800d3aa <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d230:	687a      	ldr	r2, [r7, #4]
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	4413      	add	r3, r2
 800d23a:	881b      	ldrh	r3, [r3, #0]
 800d23c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800d240:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d244:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d01d      	beq.n	800d288 <USB_ActivateEndpoint+0x89c>
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	4413      	add	r3, r2
 800d256:	881b      	ldrh	r3, [r3, #0]
 800d258:	b29b      	uxth	r3, r3
 800d25a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d25e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d262:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800d266:	687a      	ldr	r2, [r7, #4]
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	441a      	add	r2, r3
 800d270:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d274:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d278:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d27c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d284:	b29b      	uxth	r3, r3
 800d286:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d288:	687a      	ldr	r2, [r7, #4]
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	4413      	add	r3, r2
 800d292:	881b      	ldrh	r3, [r3, #0]
 800d294:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800d298:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800d29c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d01d      	beq.n	800d2e0 <USB_ActivateEndpoint+0x8f4>
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	009b      	lsls	r3, r3, #2
 800d2ac:	4413      	add	r3, r2
 800d2ae:	881b      	ldrh	r3, [r3, #0]
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d2b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2ba:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	441a      	add	r2, r3
 800d2c8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800d2cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d2d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d2d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d2d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	78db      	ldrb	r3, [r3, #3]
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d024      	beq.n	800d332 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	4413      	add	r3, r2
 800d2f2:	881b      	ldrh	r3, [r3, #0]
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d2fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d2fe:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d302:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d306:	f083 0320 	eor.w	r3, r3, #32
 800d30a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	009b      	lsls	r3, r3, #2
 800d316:	441a      	add	r2, r3
 800d318:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d31c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d320:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d324:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d328:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d32c:	b29b      	uxth	r3, r3
 800d32e:	8013      	strh	r3, [r2, #0]
 800d330:	e01d      	b.n	800d36e <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	4413      	add	r3, r2
 800d33c:	881b      	ldrh	r3, [r3, #0]
 800d33e:	b29b      	uxth	r3, r3
 800d340:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d344:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d348:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800d34c:	687a      	ldr	r2, [r7, #4]
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	781b      	ldrb	r3, [r3, #0]
 800d352:	009b      	lsls	r3, r3, #2
 800d354:	441a      	add	r2, r3
 800d356:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800d35a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d35e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d362:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	009b      	lsls	r3, r3, #2
 800d376:	4413      	add	r3, r2
 800d378:	881b      	ldrh	r3, [r3, #0]
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d380:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d384:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d388:	687a      	ldr	r2, [r7, #4]
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	441a      	add	r2, r3
 800d392:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d396:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d39a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d39e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d3aa:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	379c      	adds	r7, #156	@ 0x9c
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b8:	4770      	bx	lr
 800d3ba:	bf00      	nop

0800d3bc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b0ac      	sub	sp, #176	@ 0xb0
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	785b      	ldrb	r3, [r3, #1]
 800d3ca:	2b01      	cmp	r3, #1
 800d3cc:	f040 84ca 	bne.w	800dd64 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	699a      	ldr	r2, [r3, #24]
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	691b      	ldr	r3, [r3, #16]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d904      	bls.n	800d3e6 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	691b      	ldr	r3, [r3, #16]
 800d3e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d3e4:	e003      	b.n	800d3ee <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	699b      	ldr	r3, [r3, #24]
 800d3ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	7b1b      	ldrb	r3, [r3, #12]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d122      	bne.n	800d43c <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	6959      	ldr	r1, [r3, #20]
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	88da      	ldrh	r2, [r3, #6]
 800d3fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d402:	b29b      	uxth	r3, r3
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 fed2 	bl	800e1ae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	613b      	str	r3, [r7, #16]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d414:	b29b      	uxth	r3, r3
 800d416:	461a      	mov	r2, r3
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	4413      	add	r3, r2
 800d41c:	613b      	str	r3, [r7, #16]
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	00da      	lsls	r2, r3, #3
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	4413      	add	r3, r2
 800d428:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d42c:	60fb      	str	r3, [r7, #12]
 800d42e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d432:	b29a      	uxth	r2, r3
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	801a      	strh	r2, [r3, #0]
 800d438:	f000 bc6f 	b.w	800dd1a <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	78db      	ldrb	r3, [r3, #3]
 800d440:	2b02      	cmp	r3, #2
 800d442:	f040 831e 	bne.w	800da82 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	6a1a      	ldr	r2, [r3, #32]
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	691b      	ldr	r3, [r3, #16]
 800d44e:	429a      	cmp	r2, r3
 800d450:	f240 82cf 	bls.w	800d9f2 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	4413      	add	r3, r2
 800d45e:	881b      	ldrh	r3, [r3, #0]
 800d460:	b29b      	uxth	r3, r3
 800d462:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d46a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	009b      	lsls	r3, r3, #2
 800d476:	441a      	add	r2, r3
 800d478:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d47c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d480:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d484:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d488:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	6a1a      	ldr	r2, [r3, #32]
 800d494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d498:	1ad2      	subs	r2, r2, r3
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	009b      	lsls	r3, r3, #2
 800d4a6:	4413      	add	r3, r2
 800d4a8:	881b      	ldrh	r3, [r3, #0]
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	f000 814f 	beq.w	800d754 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	785b      	ldrb	r3, [r3, #1]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d16b      	bne.n	800d59a <USB_EPStartXfer+0x1de>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4cc:	b29b      	uxth	r3, r3
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4d2:	4413      	add	r3, r2
 800d4d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	00da      	lsls	r2, r3, #3
 800d4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4de:	4413      	add	r3, r2
 800d4e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d4e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e8:	881b      	ldrh	r3, [r3, #0]
 800d4ea:	b29b      	uxth	r3, r3
 800d4ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f4:	801a      	strh	r2, [r3, #0]
 800d4f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d10a      	bne.n	800d514 <USB_EPStartXfer+0x158>
 800d4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d500:	881b      	ldrh	r3, [r3, #0]
 800d502:	b29b      	uxth	r3, r3
 800d504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d50c:	b29a      	uxth	r2, r3
 800d50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d510:	801a      	strh	r2, [r3, #0]
 800d512:	e05b      	b.n	800d5cc <USB_EPStartXfer+0x210>
 800d514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d518:	2b3e      	cmp	r3, #62	@ 0x3e
 800d51a:	d81c      	bhi.n	800d556 <USB_EPStartXfer+0x19a>
 800d51c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d520:	085b      	lsrs	r3, r3, #1
 800d522:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d52a:	f003 0301 	and.w	r3, r3, #1
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d004      	beq.n	800d53c <USB_EPStartXfer+0x180>
 800d532:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d536:	3301      	adds	r3, #1
 800d538:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d53e:	881b      	ldrh	r3, [r3, #0]
 800d540:	b29a      	uxth	r2, r3
 800d542:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d546:	b29b      	uxth	r3, r3
 800d548:	029b      	lsls	r3, r3, #10
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	4313      	orrs	r3, r2
 800d54e:	b29a      	uxth	r2, r3
 800d550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d552:	801a      	strh	r2, [r3, #0]
 800d554:	e03a      	b.n	800d5cc <USB_EPStartXfer+0x210>
 800d556:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d55a:	095b      	lsrs	r3, r3, #5
 800d55c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d564:	f003 031f 	and.w	r3, r3, #31
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d104      	bne.n	800d576 <USB_EPStartXfer+0x1ba>
 800d56c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d570:	3b01      	subs	r3, #1
 800d572:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d578:	881b      	ldrh	r3, [r3, #0]
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d580:	b29b      	uxth	r3, r3
 800d582:	029b      	lsls	r3, r3, #10
 800d584:	b29b      	uxth	r3, r3
 800d586:	4313      	orrs	r3, r2
 800d588:	b29b      	uxth	r3, r3
 800d58a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d58e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d592:	b29a      	uxth	r2, r3
 800d594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d596:	801a      	strh	r2, [r3, #0]
 800d598:	e018      	b.n	800d5cc <USB_EPStartXfer+0x210>
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	785b      	ldrb	r3, [r3, #1]
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d114      	bne.n	800d5cc <USB_EPStartXfer+0x210>
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d5a8:	b29b      	uxth	r3, r3
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ae:	4413      	add	r3, r2
 800d5b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	781b      	ldrb	r3, [r3, #0]
 800d5b6:	00da      	lsls	r2, r3, #3
 800d5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ba:	4413      	add	r3, r2
 800d5bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d5c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d5c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d5c6:	b29a      	uxth	r2, r3
 800d5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	895b      	ldrh	r3, [r3, #10]
 800d5d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	6959      	ldr	r1, [r3, #20]
 800d5d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 fde3 	bl	800e1ae <USB_WritePMA>
            ep->xfer_buff += len;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	695a      	ldr	r2, [r3, #20]
 800d5ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d5f0:	441a      	add	r2, r3
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	6a1a      	ldr	r2, [r3, #32]
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	691b      	ldr	r3, [r3, #16]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d907      	bls.n	800d612 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	6a1a      	ldr	r2, [r3, #32]
 800d606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d60a:	1ad2      	subs	r2, r2, r3
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	621a      	str	r2, [r3, #32]
 800d610:	e006      	b.n	800d620 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	6a1b      	ldr	r3, [r3, #32]
 800d616:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	2200      	movs	r2, #0
 800d61e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	785b      	ldrb	r3, [r3, #1]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d16b      	bne.n	800d700 <USB_EPStartXfer+0x344>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	61bb      	str	r3, [r7, #24]
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d632:	b29b      	uxth	r3, r3
 800d634:	461a      	mov	r2, r3
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	4413      	add	r3, r2
 800d63a:	61bb      	str	r3, [r7, #24]
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	00da      	lsls	r2, r3, #3
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	4413      	add	r3, r2
 800d646:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d64a:	617b      	str	r3, [r7, #20]
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	881b      	ldrh	r3, [r3, #0]
 800d650:	b29b      	uxth	r3, r3
 800d652:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d656:	b29a      	uxth	r2, r3
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	801a      	strh	r2, [r3, #0]
 800d65c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d660:	2b00      	cmp	r3, #0
 800d662:	d10a      	bne.n	800d67a <USB_EPStartXfer+0x2be>
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	881b      	ldrh	r3, [r3, #0]
 800d668:	b29b      	uxth	r3, r3
 800d66a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d66e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d672:	b29a      	uxth	r2, r3
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	801a      	strh	r2, [r3, #0]
 800d678:	e05d      	b.n	800d736 <USB_EPStartXfer+0x37a>
 800d67a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d67e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d680:	d81c      	bhi.n	800d6bc <USB_EPStartXfer+0x300>
 800d682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d686:	085b      	lsrs	r3, r3, #1
 800d688:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d68c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d690:	f003 0301 	and.w	r3, r3, #1
 800d694:	2b00      	cmp	r3, #0
 800d696:	d004      	beq.n	800d6a2 <USB_EPStartXfer+0x2e6>
 800d698:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d69c:	3301      	adds	r3, #1
 800d69e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	881b      	ldrh	r3, [r3, #0]
 800d6a6:	b29a      	uxth	r2, r3
 800d6a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	029b      	lsls	r3, r3, #10
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	4313      	orrs	r3, r2
 800d6b4:	b29a      	uxth	r2, r3
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	801a      	strh	r2, [r3, #0]
 800d6ba:	e03c      	b.n	800d736 <USB_EPStartXfer+0x37a>
 800d6bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d6c0:	095b      	lsrs	r3, r3, #5
 800d6c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d6c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d6ca:	f003 031f 	and.w	r3, r3, #31
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d104      	bne.n	800d6dc <USB_EPStartXfer+0x320>
 800d6d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	881b      	ldrh	r3, [r3, #0]
 800d6e0:	b29a      	uxth	r2, r3
 800d6e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	029b      	lsls	r3, r3, #10
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	801a      	strh	r2, [r3, #0]
 800d6fe:	e01a      	b.n	800d736 <USB_EPStartXfer+0x37a>
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	785b      	ldrb	r3, [r3, #1]
 800d704:	2b01      	cmp	r3, #1
 800d706:	d116      	bne.n	800d736 <USB_EPStartXfer+0x37a>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	623b      	str	r3, [r7, #32]
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d712:	b29b      	uxth	r3, r3
 800d714:	461a      	mov	r2, r3
 800d716:	6a3b      	ldr	r3, [r7, #32]
 800d718:	4413      	add	r3, r2
 800d71a:	623b      	str	r3, [r7, #32]
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	00da      	lsls	r2, r3, #3
 800d722:	6a3b      	ldr	r3, [r7, #32]
 800d724:	4413      	add	r3, r2
 800d726:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d72a:	61fb      	str	r3, [r7, #28]
 800d72c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d730:	b29a      	uxth	r2, r3
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	891b      	ldrh	r3, [r3, #8]
 800d73a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	6959      	ldr	r1, [r3, #20]
 800d742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d746:	b29b      	uxth	r3, r3
 800d748:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f000 fd2e 	bl	800e1ae <USB_WritePMA>
 800d752:	e2e2      	b.n	800dd1a <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	785b      	ldrb	r3, [r3, #1]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d16b      	bne.n	800d834 <USB_EPStartXfer+0x478>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d766:	b29b      	uxth	r3, r3
 800d768:	461a      	mov	r2, r3
 800d76a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d76c:	4413      	add	r3, r2
 800d76e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	00da      	lsls	r2, r3, #3
 800d776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d778:	4413      	add	r3, r2
 800d77a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d77e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d782:	881b      	ldrh	r3, [r3, #0]
 800d784:	b29b      	uxth	r3, r3
 800d786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d78a:	b29a      	uxth	r2, r3
 800d78c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d78e:	801a      	strh	r2, [r3, #0]
 800d790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d794:	2b00      	cmp	r3, #0
 800d796:	d10a      	bne.n	800d7ae <USB_EPStartXfer+0x3f2>
 800d798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d79a:	881b      	ldrh	r3, [r3, #0]
 800d79c:	b29b      	uxth	r3, r3
 800d79e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7a6:	b29a      	uxth	r2, r3
 800d7a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7aa:	801a      	strh	r2, [r3, #0]
 800d7ac:	e05d      	b.n	800d86a <USB_EPStartXfer+0x4ae>
 800d7ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7b2:	2b3e      	cmp	r3, #62	@ 0x3e
 800d7b4:	d81c      	bhi.n	800d7f0 <USB_EPStartXfer+0x434>
 800d7b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7ba:	085b      	lsrs	r3, r3, #1
 800d7bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d7c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7c4:	f003 0301 	and.w	r3, r3, #1
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d004      	beq.n	800d7d6 <USB_EPStartXfer+0x41a>
 800d7cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d7d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7d8:	881b      	ldrh	r3, [r3, #0]
 800d7da:	b29a      	uxth	r2, r3
 800d7dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d7e0:	b29b      	uxth	r3, r3
 800d7e2:	029b      	lsls	r3, r3, #10
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	b29a      	uxth	r2, r3
 800d7ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7ec:	801a      	strh	r2, [r3, #0]
 800d7ee:	e03c      	b.n	800d86a <USB_EPStartXfer+0x4ae>
 800d7f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7f4:	095b      	lsrs	r3, r3, #5
 800d7f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d7fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7fe:	f003 031f 	and.w	r3, r3, #31
 800d802:	2b00      	cmp	r3, #0
 800d804:	d104      	bne.n	800d810 <USB_EPStartXfer+0x454>
 800d806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d80a:	3b01      	subs	r3, #1
 800d80c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d812:	881b      	ldrh	r3, [r3, #0]
 800d814:	b29a      	uxth	r2, r3
 800d816:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	029b      	lsls	r3, r3, #10
 800d81e:	b29b      	uxth	r3, r3
 800d820:	4313      	orrs	r3, r2
 800d822:	b29b      	uxth	r3, r3
 800d824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d82c:	b29a      	uxth	r2, r3
 800d82e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d830:	801a      	strh	r2, [r3, #0]
 800d832:	e01a      	b.n	800d86a <USB_EPStartXfer+0x4ae>
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	785b      	ldrb	r3, [r3, #1]
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d116      	bne.n	800d86a <USB_EPStartXfer+0x4ae>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d846:	b29b      	uxth	r3, r3
 800d848:	461a      	mov	r2, r3
 800d84a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d84c:	4413      	add	r3, r2
 800d84e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	00da      	lsls	r2, r3, #3
 800d856:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d858:	4413      	add	r3, r2
 800d85a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d85e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d860:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d864:	b29a      	uxth	r2, r3
 800d866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d868:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	891b      	ldrh	r3, [r3, #8]
 800d86e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	6959      	ldr	r1, [r3, #20]
 800d876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f000 fc94 	bl	800e1ae <USB_WritePMA>
            ep->xfer_buff += len;
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	695a      	ldr	r2, [r3, #20]
 800d88a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d88e:	441a      	add	r2, r3
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	6a1a      	ldr	r2, [r3, #32]
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	691b      	ldr	r3, [r3, #16]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d907      	bls.n	800d8b0 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	6a1a      	ldr	r2, [r3, #32]
 800d8a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d8a8:	1ad2      	subs	r2, r2, r3
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	621a      	str	r2, [r3, #32]
 800d8ae:	e006      	b.n	800d8be <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	6a1b      	ldr	r3, [r3, #32]
 800d8b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	643b      	str	r3, [r7, #64]	@ 0x40
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	785b      	ldrb	r3, [r3, #1]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d16b      	bne.n	800d9a2 <USB_EPStartXfer+0x5e6>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8da:	4413      	add	r3, r2
 800d8dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	00da      	lsls	r2, r3, #3
 800d8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8e6:	4413      	add	r3, r2
 800d8e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d8ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8f0:	881b      	ldrh	r3, [r3, #0]
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d8f8:	b29a      	uxth	r2, r3
 800d8fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8fc:	801a      	strh	r2, [r3, #0]
 800d8fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d902:	2b00      	cmp	r3, #0
 800d904:	d10a      	bne.n	800d91c <USB_EPStartXfer+0x560>
 800d906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d908:	881b      	ldrh	r3, [r3, #0]
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d914:	b29a      	uxth	r2, r3
 800d916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d918:	801a      	strh	r2, [r3, #0]
 800d91a:	e05b      	b.n	800d9d4 <USB_EPStartXfer+0x618>
 800d91c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d920:	2b3e      	cmp	r3, #62	@ 0x3e
 800d922:	d81c      	bhi.n	800d95e <USB_EPStartXfer+0x5a2>
 800d924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d928:	085b      	lsrs	r3, r3, #1
 800d92a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d92e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d932:	f003 0301 	and.w	r3, r3, #1
 800d936:	2b00      	cmp	r3, #0
 800d938:	d004      	beq.n	800d944 <USB_EPStartXfer+0x588>
 800d93a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d93e:	3301      	adds	r3, #1
 800d940:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d946:	881b      	ldrh	r3, [r3, #0]
 800d948:	b29a      	uxth	r2, r3
 800d94a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d94e:	b29b      	uxth	r3, r3
 800d950:	029b      	lsls	r3, r3, #10
 800d952:	b29b      	uxth	r3, r3
 800d954:	4313      	orrs	r3, r2
 800d956:	b29a      	uxth	r2, r3
 800d958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d95a:	801a      	strh	r2, [r3, #0]
 800d95c:	e03a      	b.n	800d9d4 <USB_EPStartXfer+0x618>
 800d95e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d962:	095b      	lsrs	r3, r3, #5
 800d964:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d96c:	f003 031f 	and.w	r3, r3, #31
 800d970:	2b00      	cmp	r3, #0
 800d972:	d104      	bne.n	800d97e <USB_EPStartXfer+0x5c2>
 800d974:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d978:	3b01      	subs	r3, #1
 800d97a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d97e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d980:	881b      	ldrh	r3, [r3, #0]
 800d982:	b29a      	uxth	r2, r3
 800d984:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d988:	b29b      	uxth	r3, r3
 800d98a:	029b      	lsls	r3, r3, #10
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	4313      	orrs	r3, r2
 800d990:	b29b      	uxth	r3, r3
 800d992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d99a:	b29a      	uxth	r2, r3
 800d99c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d99e:	801a      	strh	r2, [r3, #0]
 800d9a0:	e018      	b.n	800d9d4 <USB_EPStartXfer+0x618>
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	785b      	ldrb	r3, [r3, #1]
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d114      	bne.n	800d9d4 <USB_EPStartXfer+0x618>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d9b6:	4413      	add	r3, r2
 800d9b8:	643b      	str	r3, [r7, #64]	@ 0x40
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	00da      	lsls	r2, r3, #3
 800d9c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d9c2:	4413      	add	r3, r2
 800d9c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d9c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d9ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9ce:	b29a      	uxth	r2, r3
 800d9d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	895b      	ldrh	r3, [r3, #10]
 800d9d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	6959      	ldr	r1, [r3, #20]
 800d9e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 fbdf 	bl	800e1ae <USB_WritePMA>
 800d9f0:	e193      	b.n	800dd1a <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	6a1b      	ldr	r3, [r3, #32]
 800d9f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d9fa:	687a      	ldr	r2, [r7, #4]
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	009b      	lsls	r3, r3, #2
 800da02:	4413      	add	r3, r2
 800da04:	881b      	ldrh	r3, [r3, #0]
 800da06:	b29b      	uxth	r3, r3
 800da08:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800da0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da10:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	009b      	lsls	r3, r3, #2
 800da1c:	441a      	add	r2, r3
 800da1e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800da22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da32:	b29b      	uxth	r3, r3
 800da34:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da40:	b29b      	uxth	r3, r3
 800da42:	461a      	mov	r2, r3
 800da44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da46:	4413      	add	r3, r2
 800da48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	00da      	lsls	r2, r3, #3
 800da50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da52:	4413      	add	r3, r2
 800da54:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800da58:	65bb      	str	r3, [r7, #88]	@ 0x58
 800da5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da5e:	b29a      	uxth	r2, r3
 800da60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800da62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	891b      	ldrh	r3, [r3, #8]
 800da68:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	6959      	ldr	r1, [r3, #20]
 800da70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da74:	b29b      	uxth	r3, r3
 800da76:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f000 fb97 	bl	800e1ae <USB_WritePMA>
 800da80:	e14b      	b.n	800dd1a <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	6a1a      	ldr	r2, [r3, #32]
 800da86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da8a:	1ad2      	subs	r2, r2, r3
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	009b      	lsls	r3, r3, #2
 800da98:	4413      	add	r3, r2
 800da9a:	881b      	ldrh	r3, [r3, #0]
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	f000 809a 	beq.w	800dbdc <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	673b      	str	r3, [r7, #112]	@ 0x70
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	785b      	ldrb	r3, [r3, #1]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d16b      	bne.n	800db8c <USB_EPStartXfer+0x7d0>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dabe:	b29b      	uxth	r3, r3
 800dac0:	461a      	mov	r2, r3
 800dac2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dac4:	4413      	add	r3, r2
 800dac6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	00da      	lsls	r2, r3, #3
 800dace:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dad0:	4413      	add	r3, r2
 800dad2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dad6:	667b      	str	r3, [r7, #100]	@ 0x64
 800dad8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dada:	881b      	ldrh	r3, [r3, #0]
 800dadc:	b29b      	uxth	r3, r3
 800dade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dae2:	b29a      	uxth	r2, r3
 800dae4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dae6:	801a      	strh	r2, [r3, #0]
 800dae8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800daec:	2b00      	cmp	r3, #0
 800daee:	d10a      	bne.n	800db06 <USB_EPStartXfer+0x74a>
 800daf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800daf2:	881b      	ldrh	r3, [r3, #0]
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dafa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dafe:	b29a      	uxth	r2, r3
 800db00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db02:	801a      	strh	r2, [r3, #0]
 800db04:	e05b      	b.n	800dbbe <USB_EPStartXfer+0x802>
 800db06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db0a:	2b3e      	cmp	r3, #62	@ 0x3e
 800db0c:	d81c      	bhi.n	800db48 <USB_EPStartXfer+0x78c>
 800db0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db12:	085b      	lsrs	r3, r3, #1
 800db14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800db18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db1c:	f003 0301 	and.w	r3, r3, #1
 800db20:	2b00      	cmp	r3, #0
 800db22:	d004      	beq.n	800db2e <USB_EPStartXfer+0x772>
 800db24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db28:	3301      	adds	r3, #1
 800db2a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800db2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db30:	881b      	ldrh	r3, [r3, #0]
 800db32:	b29a      	uxth	r2, r3
 800db34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db38:	b29b      	uxth	r3, r3
 800db3a:	029b      	lsls	r3, r3, #10
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	4313      	orrs	r3, r2
 800db40:	b29a      	uxth	r2, r3
 800db42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db44:	801a      	strh	r2, [r3, #0]
 800db46:	e03a      	b.n	800dbbe <USB_EPStartXfer+0x802>
 800db48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db4c:	095b      	lsrs	r3, r3, #5
 800db4e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800db52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db56:	f003 031f 	and.w	r3, r3, #31
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d104      	bne.n	800db68 <USB_EPStartXfer+0x7ac>
 800db5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db62:	3b01      	subs	r3, #1
 800db64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800db68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db6a:	881b      	ldrh	r3, [r3, #0]
 800db6c:	b29a      	uxth	r2, r3
 800db6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db72:	b29b      	uxth	r3, r3
 800db74:	029b      	lsls	r3, r3, #10
 800db76:	b29b      	uxth	r3, r3
 800db78:	4313      	orrs	r3, r2
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db84:	b29a      	uxth	r2, r3
 800db86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db88:	801a      	strh	r2, [r3, #0]
 800db8a:	e018      	b.n	800dbbe <USB_EPStartXfer+0x802>
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	785b      	ldrb	r3, [r3, #1]
 800db90:	2b01      	cmp	r3, #1
 800db92:	d114      	bne.n	800dbbe <USB_EPStartXfer+0x802>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	461a      	mov	r2, r3
 800db9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dba0:	4413      	add	r3, r2
 800dba2:	673b      	str	r3, [r7, #112]	@ 0x70
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	00da      	lsls	r2, r3, #3
 800dbaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dbac:	4413      	add	r3, r2
 800dbae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dbb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dbb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dbb8:	b29a      	uxth	r2, r3
 800dbba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbbc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	895b      	ldrh	r3, [r3, #10]
 800dbc2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	6959      	ldr	r1, [r3, #20]
 800dbca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f000 faea 	bl	800e1ae <USB_WritePMA>
 800dbda:	e09e      	b.n	800dd1a <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	785b      	ldrb	r3, [r3, #1]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d16b      	bne.n	800dcbc <USB_EPStartXfer+0x900>
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dbf4:	4413      	add	r3, r2
 800dbf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	00da      	lsls	r2, r3, #3
 800dbfe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dc00:	4413      	add	r3, r2
 800dc02:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dc06:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dc08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc0a:	881b      	ldrh	r3, [r3, #0]
 800dc0c:	b29b      	uxth	r3, r3
 800dc0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc12:	b29a      	uxth	r2, r3
 800dc14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc16:	801a      	strh	r2, [r3, #0]
 800dc18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d10a      	bne.n	800dc36 <USB_EPStartXfer+0x87a>
 800dc20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc22:	881b      	ldrh	r3, [r3, #0]
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc2e:	b29a      	uxth	r2, r3
 800dc30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc32:	801a      	strh	r2, [r3, #0]
 800dc34:	e063      	b.n	800dcfe <USB_EPStartXfer+0x942>
 800dc36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc3a:	2b3e      	cmp	r3, #62	@ 0x3e
 800dc3c:	d81c      	bhi.n	800dc78 <USB_EPStartXfer+0x8bc>
 800dc3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc42:	085b      	lsrs	r3, r3, #1
 800dc44:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dc48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc4c:	f003 0301 	and.w	r3, r3, #1
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d004      	beq.n	800dc5e <USB_EPStartXfer+0x8a2>
 800dc54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800dc58:	3301      	adds	r3, #1
 800dc5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dc5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc60:	881b      	ldrh	r3, [r3, #0]
 800dc62:	b29a      	uxth	r2, r3
 800dc64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800dc68:	b29b      	uxth	r3, r3
 800dc6a:	029b      	lsls	r3, r3, #10
 800dc6c:	b29b      	uxth	r3, r3
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	b29a      	uxth	r2, r3
 800dc72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc74:	801a      	strh	r2, [r3, #0]
 800dc76:	e042      	b.n	800dcfe <USB_EPStartXfer+0x942>
 800dc78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc7c:	095b      	lsrs	r3, r3, #5
 800dc7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dc82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc86:	f003 031f 	and.w	r3, r3, #31
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d104      	bne.n	800dc98 <USB_EPStartXfer+0x8dc>
 800dc8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800dc92:	3b01      	subs	r3, #1
 800dc94:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dc98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc9a:	881b      	ldrh	r3, [r3, #0]
 800dc9c:	b29a      	uxth	r2, r3
 800dc9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800dca2:	b29b      	uxth	r3, r3
 800dca4:	029b      	lsls	r3, r3, #10
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	4313      	orrs	r3, r2
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcb4:	b29a      	uxth	r2, r3
 800dcb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dcb8:	801a      	strh	r2, [r3, #0]
 800dcba:	e020      	b.n	800dcfe <USB_EPStartXfer+0x942>
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	785b      	ldrb	r3, [r3, #1]
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	d11c      	bne.n	800dcfe <USB_EPStartXfer+0x942>
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dcd0:	b29b      	uxth	r3, r3
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dcd8:	4413      	add	r3, r2
 800dcda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	00da      	lsls	r2, r3, #3
 800dce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dce8:	4413      	add	r3, r2
 800dcea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dcee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dcf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dcf6:	b29a      	uxth	r2, r3
 800dcf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dcfc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	891b      	ldrh	r3, [r3, #8]
 800dd02:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	6959      	ldr	r1, [r3, #20]
 800dd0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f000 fa4a 	bl	800e1ae <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	009b      	lsls	r3, r3, #2
 800dd22:	4413      	add	r3, r2
 800dd24:	881b      	ldrh	r3, [r3, #0]
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dd2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd30:	817b      	strh	r3, [r7, #10]
 800dd32:	897b      	ldrh	r3, [r7, #10]
 800dd34:	f083 0310 	eor.w	r3, r3, #16
 800dd38:	817b      	strh	r3, [r7, #10]
 800dd3a:	897b      	ldrh	r3, [r7, #10]
 800dd3c:	f083 0320 	eor.w	r3, r3, #32
 800dd40:	817b      	strh	r3, [r7, #10]
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	009b      	lsls	r3, r3, #2
 800dd4a:	441a      	add	r2, r3
 800dd4c:	897b      	ldrh	r3, [r7, #10]
 800dd4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	8013      	strh	r3, [r2, #0]
 800dd62:	e0d5      	b.n	800df10 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	7b1b      	ldrb	r3, [r3, #12]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d156      	bne.n	800de1a <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	699b      	ldr	r3, [r3, #24]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d122      	bne.n	800ddba <USB_EPStartXfer+0x9fe>
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	78db      	ldrb	r3, [r3, #3]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d11e      	bne.n	800ddba <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800dd7c:	687a      	ldr	r2, [r7, #4]
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	4413      	add	r3, r2
 800dd86:	881b      	ldrh	r3, [r3, #0]
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dd8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd92:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800dd96:	687a      	ldr	r2, [r7, #4]
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	009b      	lsls	r3, r3, #2
 800dd9e:	441a      	add	r2, r3
 800dda0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800dda4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dda8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ddac:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ddb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	8013      	strh	r3, [r2, #0]
 800ddb8:	e01d      	b.n	800ddf6 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	4413      	add	r3, r2
 800ddc4:	881b      	ldrh	r3, [r3, #0]
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ddcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ddd0:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800ddd4:	687a      	ldr	r2, [r7, #4]
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	009b      	lsls	r3, r3, #2
 800dddc:	441a      	add	r2, r3
 800ddde:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800dde2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dde6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ddea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ddee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	699a      	ldr	r2, [r3, #24]
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	691b      	ldr	r3, [r3, #16]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d907      	bls.n	800de12 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	699a      	ldr	r2, [r3, #24]
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	691b      	ldr	r3, [r3, #16]
 800de0a:	1ad2      	subs	r2, r2, r3
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	619a      	str	r2, [r3, #24]
 800de10:	e054      	b.n	800debc <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	2200      	movs	r2, #0
 800de16:	619a      	str	r2, [r3, #24]
 800de18:	e050      	b.n	800debc <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	78db      	ldrb	r3, [r3, #3]
 800de1e:	2b02      	cmp	r3, #2
 800de20:	d142      	bne.n	800dea8 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	69db      	ldr	r3, [r3, #28]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d048      	beq.n	800debc <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	009b      	lsls	r3, r3, #2
 800de32:	4413      	add	r3, r2
 800de34:	881b      	ldrh	r3, [r3, #0]
 800de36:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800de3a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800de3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800de42:	2b00      	cmp	r3, #0
 800de44:	d005      	beq.n	800de52 <USB_EPStartXfer+0xa96>
 800de46:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800de4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d10b      	bne.n	800de6a <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800de52:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800de56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d12e      	bne.n	800debc <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800de5e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800de62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de66:	2b00      	cmp	r3, #0
 800de68:	d128      	bne.n	800debc <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	009b      	lsls	r3, r3, #2
 800de72:	4413      	add	r3, r2
 800de74:	881b      	ldrh	r3, [r3, #0]
 800de76:	b29b      	uxth	r3, r3
 800de78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800de7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de80:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	781b      	ldrb	r3, [r3, #0]
 800de8a:	009b      	lsls	r3, r3, #2
 800de8c:	441a      	add	r2, r3
 800de8e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800de92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800de96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800de9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	8013      	strh	r3, [r2, #0]
 800dea6:	e009      	b.n	800debc <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	78db      	ldrb	r3, [r3, #3]
 800deac:	2b01      	cmp	r3, #1
 800deae:	d103      	bne.n	800deb8 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	2200      	movs	r2, #0
 800deb4:	619a      	str	r2, [r3, #24]
 800deb6:	e001      	b.n	800debc <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800deb8:	2301      	movs	r3, #1
 800deba:	e02a      	b.n	800df12 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	009b      	lsls	r3, r3, #2
 800dec4:	4413      	add	r3, r2
 800dec6:	881b      	ldrh	r3, [r3, #0]
 800dec8:	b29b      	uxth	r3, r3
 800deca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ded2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ded6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800deda:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800dede:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800dee2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dee6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800deea:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800deee:	687a      	ldr	r2, [r7, #4]
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	009b      	lsls	r3, r3, #2
 800def6:	441a      	add	r2, r3
 800def8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800defc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800df04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df0c:	b29b      	uxth	r3, r3
 800df0e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800df10:	2300      	movs	r3, #0
}
 800df12:	4618      	mov	r0, r3
 800df14:	37b0      	adds	r7, #176	@ 0xb0
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}

0800df1a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800df1a:	b480      	push	{r7}
 800df1c:	b085      	sub	sp, #20
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
 800df22:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	785b      	ldrb	r3, [r3, #1]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d020      	beq.n	800df6e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800df2c:	687a      	ldr	r2, [r7, #4]
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	781b      	ldrb	r3, [r3, #0]
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	4413      	add	r3, r2
 800df36:	881b      	ldrh	r3, [r3, #0]
 800df38:	b29b      	uxth	r3, r3
 800df3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800df3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df42:	81bb      	strh	r3, [r7, #12]
 800df44:	89bb      	ldrh	r3, [r7, #12]
 800df46:	f083 0310 	eor.w	r3, r3, #16
 800df4a:	81bb      	strh	r3, [r7, #12]
 800df4c:	687a      	ldr	r2, [r7, #4]
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	441a      	add	r2, r3
 800df56:	89bb      	ldrh	r3, [r7, #12]
 800df58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800df60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df68:	b29b      	uxth	r3, r3
 800df6a:	8013      	strh	r3, [r2, #0]
 800df6c:	e01f      	b.n	800dfae <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	009b      	lsls	r3, r3, #2
 800df76:	4413      	add	r3, r2
 800df78:	881b      	ldrh	r3, [r3, #0]
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800df80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df84:	81fb      	strh	r3, [r7, #14]
 800df86:	89fb      	ldrh	r3, [r7, #14]
 800df88:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800df8c:	81fb      	strh	r3, [r7, #14]
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	441a      	add	r2, r3
 800df98:	89fb      	ldrh	r3, [r7, #14]
 800df9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dfa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dfa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800dfae:	2300      	movs	r3, #0
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3714      	adds	r7, #20
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr

0800dfbc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b087      	sub	sp, #28
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	785b      	ldrb	r3, [r3, #1]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d04c      	beq.n	800e068 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dfce:	687a      	ldr	r2, [r7, #4]
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	4413      	add	r3, r2
 800dfd8:	881b      	ldrh	r3, [r3, #0]
 800dfda:	823b      	strh	r3, [r7, #16]
 800dfdc:	8a3b      	ldrh	r3, [r7, #16]
 800dfde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d01b      	beq.n	800e01e <USB_EPClearStall+0x62>
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	4413      	add	r3, r2
 800dff0:	881b      	ldrh	r3, [r3, #0]
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dff8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dffc:	81fb      	strh	r3, [r7, #14]
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	009b      	lsls	r3, r3, #2
 800e006:	441a      	add	r2, r3
 800e008:	89fb      	ldrh	r3, [r7, #14]
 800e00a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e00e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e016:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	78db      	ldrb	r3, [r3, #3]
 800e022:	2b01      	cmp	r3, #1
 800e024:	d06c      	beq.n	800e100 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	4413      	add	r3, r2
 800e030:	881b      	ldrh	r3, [r3, #0]
 800e032:	b29b      	uxth	r3, r3
 800e034:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e038:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e03c:	81bb      	strh	r3, [r7, #12]
 800e03e:	89bb      	ldrh	r3, [r7, #12]
 800e040:	f083 0320 	eor.w	r3, r3, #32
 800e044:	81bb      	strh	r3, [r7, #12]
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	441a      	add	r2, r3
 800e050:	89bb      	ldrh	r3, [r7, #12]
 800e052:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e056:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e05a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e05e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e062:	b29b      	uxth	r3, r3
 800e064:	8013      	strh	r3, [r2, #0]
 800e066:	e04b      	b.n	800e100 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e068:	687a      	ldr	r2, [r7, #4]
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	009b      	lsls	r3, r3, #2
 800e070:	4413      	add	r3, r2
 800e072:	881b      	ldrh	r3, [r3, #0]
 800e074:	82fb      	strh	r3, [r7, #22]
 800e076:	8afb      	ldrh	r3, [r7, #22]
 800e078:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d01b      	beq.n	800e0b8 <USB_EPClearStall+0xfc>
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	009b      	lsls	r3, r3, #2
 800e088:	4413      	add	r3, r2
 800e08a:	881b      	ldrh	r3, [r3, #0]
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e096:	82bb      	strh	r3, [r7, #20]
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	009b      	lsls	r3, r3, #2
 800e0a0:	441a      	add	r2, r3
 800e0a2:	8abb      	ldrh	r3, [r7, #20]
 800e0a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e0a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e0ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e0b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	4413      	add	r3, r2
 800e0c2:	881b      	ldrh	r3, [r3, #0]
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e0ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e0ce:	827b      	strh	r3, [r7, #18]
 800e0d0:	8a7b      	ldrh	r3, [r7, #18]
 800e0d2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e0d6:	827b      	strh	r3, [r7, #18]
 800e0d8:	8a7b      	ldrh	r3, [r7, #18]
 800e0da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e0de:	827b      	strh	r3, [r7, #18]
 800e0e0:	687a      	ldr	r2, [r7, #4]
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	441a      	add	r2, r3
 800e0ea:	8a7b      	ldrh	r3, [r7, #18]
 800e0ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e0f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e0f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e0f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0fc:	b29b      	uxth	r3, r3
 800e0fe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e100:	2300      	movs	r3, #0
}
 800e102:	4618      	mov	r0, r3
 800e104:	371c      	adds	r7, #28
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr

0800e10e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e10e:	b480      	push	{r7}
 800e110:	b083      	sub	sp, #12
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
 800e116:	460b      	mov	r3, r1
 800e118:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e11a:	78fb      	ldrb	r3, [r7, #3]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d103      	bne.n	800e128 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2280      	movs	r2, #128	@ 0x80
 800e124:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e128:	2300      	movs	r3, #0
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	370c      	adds	r7, #12
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr

0800e136 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e136:	b480      	push	{r7}
 800e138:	b083      	sub	sp, #12
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e144:	b29b      	uxth	r3, r3
 800e146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e14a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e14e:	b29a      	uxth	r2, r3
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e156:	2300      	movs	r3, #0
}
 800e158:	4618      	mov	r0, r3
 800e15a:	370c      	adds	r7, #12
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr

0800e164 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800e164:	b480      	push	{r7}
 800e166:	b083      	sub	sp, #12
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e172:	b29b      	uxth	r3, r3
 800e174:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e178:	b29a      	uxth	r2, r3
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e180:	2300      	movs	r3, #0
}
 800e182:	4618      	mov	r0, r3
 800e184:	370c      	adds	r7, #12
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr

0800e18e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e18e:	b480      	push	{r7}
 800e190:	b085      	sub	sp, #20
 800e192:	af00      	add	r7, sp, #0
 800e194:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3714      	adds	r7, #20
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ac:	4770      	bx	lr

0800e1ae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e1ae:	b480      	push	{r7}
 800e1b0:	b08b      	sub	sp, #44	@ 0x2c
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	60f8      	str	r0, [r7, #12]
 800e1b6:	60b9      	str	r1, [r7, #8]
 800e1b8:	4611      	mov	r1, r2
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	460b      	mov	r3, r1
 800e1be:	80fb      	strh	r3, [r7, #6]
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e1c4:	88bb      	ldrh	r3, [r7, #4]
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	085b      	lsrs	r3, r3, #1
 800e1ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e1d4:	88fa      	ldrh	r2, [r7, #6]
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	4413      	add	r3, r2
 800e1da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e1de:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e1e0:	69bb      	ldr	r3, [r7, #24]
 800e1e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e1e4:	e01c      	b.n	800e220 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e1ec:	69fb      	ldr	r3, [r7, #28]
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	b21b      	sxth	r3, r3
 800e1f4:	021b      	lsls	r3, r3, #8
 800e1f6:	b21a      	sxth	r2, r3
 800e1f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	b21b      	sxth	r3, r3
 800e200:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e202:	6a3b      	ldr	r3, [r7, #32]
 800e204:	8a7a      	ldrh	r2, [r7, #18]
 800e206:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e208:	6a3b      	ldr	r3, [r7, #32]
 800e20a:	3302      	adds	r3, #2
 800e20c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e20e:	69fb      	ldr	r3, [r7, #28]
 800e210:	3301      	adds	r3, #1
 800e212:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e214:	69fb      	ldr	r3, [r7, #28]
 800e216:	3301      	adds	r3, #1
 800e218:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e21c:	3b01      	subs	r3, #1
 800e21e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e222:	2b00      	cmp	r3, #0
 800e224:	d1df      	bne.n	800e1e6 <USB_WritePMA+0x38>
  }
}
 800e226:	bf00      	nop
 800e228:	bf00      	nop
 800e22a:	372c      	adds	r7, #44	@ 0x2c
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr

0800e234 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e234:	b480      	push	{r7}
 800e236:	b08b      	sub	sp, #44	@ 0x2c
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	4611      	mov	r1, r2
 800e240:	461a      	mov	r2, r3
 800e242:	460b      	mov	r3, r1
 800e244:	80fb      	strh	r3, [r7, #6]
 800e246:	4613      	mov	r3, r2
 800e248:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e24a:	88bb      	ldrh	r3, [r7, #4]
 800e24c:	085b      	lsrs	r3, r3, #1
 800e24e:	b29b      	uxth	r3, r3
 800e250:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e25a:	88fa      	ldrh	r2, [r7, #6]
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	4413      	add	r3, r2
 800e260:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e264:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e266:	69bb      	ldr	r3, [r7, #24]
 800e268:	627b      	str	r3, [r7, #36]	@ 0x24
 800e26a:	e018      	b.n	800e29e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e26c:	6a3b      	ldr	r3, [r7, #32]
 800e26e:	881b      	ldrh	r3, [r3, #0]
 800e270:	b29b      	uxth	r3, r3
 800e272:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e274:	6a3b      	ldr	r3, [r7, #32]
 800e276:	3302      	adds	r3, #2
 800e278:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	b2da      	uxtb	r2, r3
 800e27e:	69fb      	ldr	r3, [r7, #28]
 800e280:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e282:	69fb      	ldr	r3, [r7, #28]
 800e284:	3301      	adds	r3, #1
 800e286:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	0a1b      	lsrs	r3, r3, #8
 800e28c:	b2da      	uxtb	r2, r3
 800e28e:	69fb      	ldr	r3, [r7, #28]
 800e290:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e292:	69fb      	ldr	r3, [r7, #28]
 800e294:	3301      	adds	r3, #1
 800e296:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e29a:	3b01      	subs	r3, #1
 800e29c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d1e3      	bne.n	800e26c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e2a4:	88bb      	ldrh	r3, [r7, #4]
 800e2a6:	f003 0301 	and.w	r3, r3, #1
 800e2aa:	b29b      	uxth	r3, r3
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d007      	beq.n	800e2c0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e2b0:	6a3b      	ldr	r3, [r7, #32]
 800e2b2:	881b      	ldrh	r3, [r3, #0]
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	b2da      	uxtb	r2, r3
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	701a      	strb	r2, [r3, #0]
  }
}
 800e2c0:	bf00      	nop
 800e2c2:	372c      	adds	r7, #44	@ 0x2c
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr

0800e2cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800e2d0:	f3bf 8f4f 	dsb	sy
}
 800e2d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800e2d6:	4b06      	ldr	r3, [pc, #24]	@ (800e2f0 <__NVIC_SystemReset+0x24>)
 800e2d8:	68db      	ldr	r3, [r3, #12]
 800e2da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800e2de:	4904      	ldr	r1, [pc, #16]	@ (800e2f0 <__NVIC_SystemReset+0x24>)
 800e2e0:	4b04      	ldr	r3, [pc, #16]	@ (800e2f4 <__NVIC_SystemReset+0x28>)
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e2e6:	f3bf 8f4f 	dsb	sy
}
 800e2ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800e2ec:	bf00      	nop
 800e2ee:	e7fd      	b.n	800e2ec <__NVIC_SystemReset+0x20>
 800e2f0:	e000ed00 	.word	0xe000ed00
 800e2f4:	05fa0004 	.word	0x05fa0004

0800e2f8 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	460b      	mov	r3, r1
 800e302:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 800e304:	f240 401c 	movw	r0, #1052	@ 0x41c
 800e308:	f002 fbfc 	bl	8010b04 <USBD_static_malloc>
 800e30c:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d105      	bne.n	800e320 <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2200      	movs	r2, #0
 800e318:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800e31c:	2302      	movs	r3, #2
 800e31e:	e03f      	b.n	800e3a0 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	68fa      	ldr	r2, [r7, #12]
 800e324:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2200      	movs	r2, #0
 800e32c:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800e336:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2200      	movs	r2, #0
 800e33e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2200      	movs	r2, #0
 800e346:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2200      	movs	r2, #0
 800e34e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2202      	movs	r2, #2
 800e356:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2200      	movs	r2, #0
 800e35e:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2200      	movs	r2, #0
 800e366:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	2200      	movs	r2, #0
 800e36e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	2200      	movs	r2, #0
 800e376:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	2202      	movs	r2, #2
 800e37e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2200      	movs	r2, #0
 800e386:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	4798      	blx	r3
 800e394:	4603      	mov	r3, r0
 800e396:	2b00      	cmp	r3, #0
 800e398:	d001      	beq.n	800e39e <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 800e39a:	2303      	movs	r3, #3
 800e39c:	e000      	b.n	800e3a0 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 800e39e:	2300      	movs	r3, #0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3710      	adds	r7, #16
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b084      	sub	sp, #16
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	460b      	mov	r3, r1
 800e3b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d101      	bne.n	800e3c2 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 800e3be:	2302      	movs	r3, #2
 800e3c0:	e027      	b.n	800e412 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e3c8:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	2202      	movs	r2, #2
 800e3de:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2202      	movs	r2, #2
 800e3ee:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e3f8:	689b      	ldr	r3, [r3, #8]
 800e3fa:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e402:	4618      	mov	r0, r3
 800e404:	f002 fb8c 	bl	8010b20 <USBD_static_free>
  pdev->pClassData = NULL;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2200      	movs	r2, #0
 800e40c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 800e410:	2300      	movs	r3, #0
}
 800e412:	4618      	mov	r0, r3
 800e414:	3710      	adds	r7, #16
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
	...

0800e41c <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b088      	sub	sp, #32
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e42c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800e42e:	2300      	movs	r3, #0
 800e430:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 800e432:	2300      	movs	r3, #0
 800e434:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 800e436:	2300      	movs	r3, #0
 800e438:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 800e43a:	2300      	movs	r3, #0
 800e43c:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d101      	bne.n	800e448 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800e444:	2303      	movs	r3, #3
 800e446:	e0d5      	b.n	800e5f4 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e450:	2b00      	cmp	r3, #0
 800e452:	d03e      	beq.n	800e4d2 <USBD_DFU_Setup+0xb6>
 800e454:	2b20      	cmp	r3, #32
 800e456:	f040 80c5 	bne.w	800e5e4 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	785b      	ldrb	r3, [r3, #1]
 800e45e:	2b06      	cmp	r3, #6
 800e460:	d82f      	bhi.n	800e4c2 <USBD_DFU_Setup+0xa6>
 800e462:	a201      	add	r2, pc, #4	@ (adr r2, 800e468 <USBD_DFU_Setup+0x4c>)
 800e464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e468:	0800e4b9 	.word	0x0800e4b9
 800e46c:	0800e485 	.word	0x0800e485
 800e470:	0800e48f 	.word	0x0800e48f
 800e474:	0800e499 	.word	0x0800e499
 800e478:	0800e4a1 	.word	0x0800e4a1
 800e47c:	0800e4a9 	.word	0x0800e4a9
 800e480:	0800e4b1 	.word	0x0800e4b1
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 800e484:	6839      	ldr	r1, [r7, #0]
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f000 fa6c 	bl	800e964 <DFU_Download>
          break;
 800e48c:	e020      	b.n	800e4d0 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 800e48e:	6839      	ldr	r1, [r7, #0]
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f000 fad3 	bl	800ea3c <DFU_Upload>
          break;
 800e496:	e01b      	b.n	800e4d0 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f000 fba9 	bl	800ebf0 <DFU_GetStatus>
          break;
 800e49e:	e017      	b.n	800e4d0 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f000 fc5b 	bl	800ed5c <DFU_ClearStatus>
          break;
 800e4a6:	e013      	b.n	800e4d0 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f000 fcab 	bl	800ee04 <DFU_GetState>
          break;
 800e4ae:	e00f      	b.n	800e4d0 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f000 fcbf 	bl	800ee34 <DFU_Abort>
          break;
 800e4b6:	e00b      	b.n	800e4d0 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 800e4b8:	6839      	ldr	r1, [r7, #0]
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f000 f9ee 	bl	800e89c <DFU_Detach>
          break;
 800e4c0:	e006      	b.n	800e4d0 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 800e4c2:	6839      	ldr	r1, [r7, #0]
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f001 fdb1 	bl	801002c <USBD_CtlError>
          ret = USBD_FAIL;
 800e4ca:	2303      	movs	r3, #3
 800e4cc:	77fb      	strb	r3, [r7, #31]
          break;
 800e4ce:	bf00      	nop
      }
      break;
 800e4d0:	e08f      	b.n	800e5f2 <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	785b      	ldrb	r3, [r3, #1]
 800e4d6:	2b0b      	cmp	r3, #11
 800e4d8:	d87b      	bhi.n	800e5d2 <USBD_DFU_Setup+0x1b6>
 800e4da:	a201      	add	r2, pc, #4	@ (adr r2, 800e4e0 <USBD_DFU_Setup+0xc4>)
 800e4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4e0:	0800e511 	.word	0x0800e511
 800e4e4:	0800e5e1 	.word	0x0800e5e1
 800e4e8:	0800e5d3 	.word	0x0800e5d3
 800e4ec:	0800e5d3 	.word	0x0800e5d3
 800e4f0:	0800e5d3 	.word	0x0800e5d3
 800e4f4:	0800e5d3 	.word	0x0800e5d3
 800e4f8:	0800e53b 	.word	0x0800e53b
 800e4fc:	0800e5d3 	.word	0x0800e5d3
 800e500:	0800e5d3 	.word	0x0800e5d3
 800e504:	0800e5d3 	.word	0x0800e5d3
 800e508:	0800e565 	.word	0x0800e565
 800e50c:	0800e591 	.word	0x0800e591
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e516:	b2db      	uxtb	r3, r3
 800e518:	2b03      	cmp	r3, #3
 800e51a:	d107      	bne.n	800e52c <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e51c:	f107 030e 	add.w	r3, r7, #14
 800e520:	2202      	movs	r2, #2
 800e522:	4619      	mov	r1, r3
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f001 fdf2 	bl	801010e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e52a:	e05a      	b.n	800e5e2 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800e52c:	6839      	ldr	r1, [r7, #0]
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f001 fd7c 	bl	801002c <USBD_CtlError>
            ret = USBD_FAIL;
 800e534:	2303      	movs	r3, #3
 800e536:	77fb      	strb	r3, [r7, #31]
          break;
 800e538:	e053      	b.n	800e5e2 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	885b      	ldrh	r3, [r3, #2]
 800e53e:	0a1b      	lsrs	r3, r3, #8
 800e540:	b29b      	uxth	r3, r3
 800e542:	2b21      	cmp	r3, #33	@ 0x21
 800e544:	d107      	bne.n	800e556 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 800e546:	4b2d      	ldr	r3, [pc, #180]	@ (800e5fc <USBD_DFU_Setup+0x1e0>)
 800e548:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	88db      	ldrh	r3, [r3, #6]
 800e54e:	2b09      	cmp	r3, #9
 800e550:	bf28      	it	cs
 800e552:	2309      	movcs	r3, #9
 800e554:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800e556:	8afb      	ldrh	r3, [r7, #22]
 800e558:	461a      	mov	r2, r3
 800e55a:	69b9      	ldr	r1, [r7, #24]
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f001 fdd6 	bl	801010e <USBD_CtlSendData>
          break;
 800e562:	e03e      	b.n	800e5e2 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	2b03      	cmp	r3, #3
 800e56e:	d108      	bne.n	800e582 <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800e576:	2201      	movs	r2, #1
 800e578:	4619      	mov	r1, r3
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f001 fdc7 	bl	801010e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e580:	e02f      	b.n	800e5e2 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800e582:	6839      	ldr	r1, [r7, #0]
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f001 fd51 	bl	801002c <USBD_CtlError>
            ret = USBD_FAIL;
 800e58a:	2303      	movs	r3, #3
 800e58c:	77fb      	strb	r3, [r7, #31]
          break;
 800e58e:	e028      	b.n	800e5e2 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	885b      	ldrh	r3, [r3, #2]
 800e594:	b2db      	uxtb	r3, r3
 800e596:	2b00      	cmp	r3, #0
 800e598:	d114      	bne.n	800e5c4 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e5a0:	b2db      	uxtb	r3, r3
 800e5a2:	2b03      	cmp	r3, #3
 800e5a4:	d107      	bne.n	800e5b6 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	885b      	ldrh	r3, [r3, #2]
 800e5aa:	b2db      	uxtb	r3, r3
 800e5ac:	461a      	mov	r2, r3
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e5b4:	e015      	b.n	800e5e2 <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 800e5b6:	6839      	ldr	r1, [r7, #0]
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f001 fd37 	bl	801002c <USBD_CtlError>
              ret = USBD_FAIL;
 800e5be:	2303      	movs	r3, #3
 800e5c0:	77fb      	strb	r3, [r7, #31]
          break;
 800e5c2:	e00e      	b.n	800e5e2 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800e5c4:	6839      	ldr	r1, [r7, #0]
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f001 fd30 	bl	801002c <USBD_CtlError>
            ret = USBD_FAIL;
 800e5cc:	2303      	movs	r3, #3
 800e5ce:	77fb      	strb	r3, [r7, #31]
          break;
 800e5d0:	e007      	b.n	800e5e2 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e5d2:	6839      	ldr	r1, [r7, #0]
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f001 fd29 	bl	801002c <USBD_CtlError>
          ret = USBD_FAIL;
 800e5da:	2303      	movs	r3, #3
 800e5dc:	77fb      	strb	r3, [r7, #31]
          break;
 800e5de:	e000      	b.n	800e5e2 <USBD_DFU_Setup+0x1c6>
          break;
 800e5e0:	bf00      	nop
      }
      break;
 800e5e2:	e006      	b.n	800e5f2 <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 800e5e4:	6839      	ldr	r1, [r7, #0]
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f001 fd20 	bl	801002c <USBD_CtlError>
      ret = USBD_FAIL;
 800e5ec:	2303      	movs	r3, #3
 800e5ee:	77fb      	strb	r3, [r7, #31]
      break;
 800e5f0:	bf00      	nop
  }

  return (uint8_t)ret;
 800e5f2:	7ffb      	ldrb	r3, [r7, #31]
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3720      	adds	r7, #32
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}
 800e5fc:	2000005a 	.word	0x2000005a

0800e600 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 800e600:	b480      	push	{r7}
 800e602:	b083      	sub	sp, #12
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	221b      	movs	r2, #27
 800e60c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 800e60e:	4b03      	ldr	r3, [pc, #12]	@ (800e61c <USBD_DFU_GetCfgDesc+0x1c>)
}
 800e610:	4618      	mov	r0, r3
 800e612:	370c      	adds	r7, #12
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr
 800e61c:	20000048 	.word	0x20000048

0800e620 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e620:	b480      	push	{r7}
 800e622:	b083      	sub	sp, #12
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800e628:	2300      	movs	r3, #0
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	370c      	adds	r7, #12
 800e62e:	46bd      	mov	sp, r7
 800e630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e634:	4770      	bx	lr

0800e636 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800e636:	b580      	push	{r7, lr}
 800e638:	b088      	sub	sp, #32
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e644:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e64c:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 800e64e:	69fb      	ldr	r3, [r7, #28]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d101      	bne.n	800e658 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e654:	2303      	movs	r3, #3
 800e656:	e0ce      	b.n	800e7f6 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800e65e:	2b04      	cmp	r3, #4
 800e660:	f040 80bd 	bne.w	800e7de <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 800e664:	69fb      	ldr	r3, [r7, #28]
 800e666:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d17c      	bne.n	800e768 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 800e66e:	69fb      	ldr	r3, [r7, #28]
 800e670:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800e674:	2b01      	cmp	r3, #1
 800e676:	f000 8093 	beq.w	800e7a0 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 800e67a:	69fb      	ldr	r3, [r7, #28]
 800e67c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800e680:	2b05      	cmp	r3, #5
 800e682:	d15e      	bne.n	800e742 <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 800e684:	69fb      	ldr	r3, [r7, #28]
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	2b21      	cmp	r3, #33	@ 0x21
 800e68a:	d124      	bne.n	800e6d6 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800e68c:	69fb      	ldr	r3, [r7, #28]
 800e68e:	785b      	ldrb	r3, [r3, #1]
 800e690:	461a      	mov	r2, r3
 800e692:	69fb      	ldr	r3, [r7, #28]
 800e694:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800e698:	69fb      	ldr	r3, [r7, #28]
 800e69a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800e69e:	69fb      	ldr	r3, [r7, #28]
 800e6a0:	789b      	ldrb	r3, [r3, #2]
 800e6a2:	021b      	lsls	r3, r3, #8
 800e6a4:	441a      	add	r2, r3
 800e6a6:	69fb      	ldr	r3, [r7, #28]
 800e6a8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800e6b2:	69fb      	ldr	r3, [r7, #28]
 800e6b4:	78db      	ldrb	r3, [r3, #3]
 800e6b6:	041b      	lsls	r3, r3, #16
 800e6b8:	441a      	add	r2, r3
 800e6ba:	69fb      	ldr	r3, [r7, #28]
 800e6bc:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800e6c0:	69fb      	ldr	r3, [r7, #28]
 800e6c2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800e6c6:	69fb      	ldr	r3, [r7, #28]
 800e6c8:	791b      	ldrb	r3, [r3, #4]
 800e6ca:	061b      	lsls	r3, r3, #24
 800e6cc:	441a      	add	r2, r3
 800e6ce:	69fb      	ldr	r3, [r7, #28]
 800e6d0:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 800e6d4:	e064      	b.n	800e7a0 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 800e6d6:	69fb      	ldr	r3, [r7, #28]
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	2b41      	cmp	r3, #65	@ 0x41
 800e6dc:	d12f      	bne.n	800e73e <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800e6de:	69fb      	ldr	r3, [r7, #28]
 800e6e0:	785b      	ldrb	r3, [r3, #1]
 800e6e2:	461a      	mov	r2, r3
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	789b      	ldrb	r3, [r3, #2]
 800e6f4:	021b      	lsls	r3, r3, #8
 800e6f6:	441a      	add	r2, r3
 800e6f8:	69fb      	ldr	r3, [r7, #28]
 800e6fa:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800e6fe:	69fb      	ldr	r3, [r7, #28]
 800e700:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800e704:	69fb      	ldr	r3, [r7, #28]
 800e706:	78db      	ldrb	r3, [r3, #3]
 800e708:	041b      	lsls	r3, r3, #16
 800e70a:	441a      	add	r2, r3
 800e70c:	69fb      	ldr	r3, [r7, #28]
 800e70e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800e718:	69fb      	ldr	r3, [r7, #28]
 800e71a:	791b      	ldrb	r3, [r3, #4]
 800e71c:	061b      	lsls	r3, r3, #24
 800e71e:	441a      	add	r2, r3
 800e720:	69fb      	ldr	r3, [r7, #28]
 800e722:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	68db      	ldr	r3, [r3, #12]
 800e72a:	69fa      	ldr	r2, [r7, #28]
 800e72c:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 800e730:	4610      	mov	r0, r2
 800e732:	4798      	blx	r3
 800e734:	4603      	mov	r3, r0
 800e736:	2b00      	cmp	r3, #0
 800e738:	d032      	beq.n	800e7a0 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 800e73a:	2303      	movs	r3, #3
 800e73c:	e05b      	b.n	800e7f6 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 800e73e:	2303      	movs	r3, #3
 800e740:	e059      	b.n	800e7f6 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	2200      	movs	r2, #0
 800e746:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 800e74a:	69fb      	ldr	r3, [r7, #28]
 800e74c:	2200      	movs	r2, #0
 800e74e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 800e752:	2300      	movs	r3, #0
 800e754:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 800e756:	2301      	movs	r3, #1
 800e758:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 800e75a:	f107 030c 	add.w	r3, r7, #12
 800e75e:	4619      	mov	r1, r3
 800e760:	6878      	ldr	r0, [r7, #4]
 800e762:	f001 fc63 	bl	801002c <USBD_CtlError>
 800e766:	e01b      	b.n	800e7a0 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800e76e:	2b01      	cmp	r3, #1
 800e770:	d916      	bls.n	800e7a0 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800e772:	69fb      	ldr	r3, [r7, #28]
 800e774:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800e778:	3b02      	subs	r3, #2
 800e77a:	029a      	lsls	r2, r3, #10
 800e77c:	69fb      	ldr	r3, [r7, #28]
 800e77e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800e782:	4413      	add	r3, r2
 800e784:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	691b      	ldr	r3, [r3, #16]
 800e78a:	69f8      	ldr	r0, [r7, #28]
 800e78c:	6979      	ldr	r1, [r7, #20]
 800e78e:	69fa      	ldr	r2, [r7, #28]
 800e790:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 800e794:	4798      	blx	r3
 800e796:	4603      	mov	r3, r0
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d001      	beq.n	800e7a0 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 800e79c:	2303      	movs	r3, #3
 800e79e:	e02a      	b.n	800e7f6 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800e7a0:	69fb      	ldr	r3, [r7, #28]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 800e7a8:	69fb      	ldr	r3, [r7, #28]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800e7b0:	69fb      	ldr	r3, [r7, #28]
 800e7b2:	2203      	movs	r2, #3
 800e7b4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800e7b8:	69fb      	ldr	r3, [r7, #28]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800e7c0:	69fb      	ldr	r3, [r7, #28]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800e7d0:	69fb      	ldr	r3, [r7, #28]
 800e7d2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800e7d6:	69fb      	ldr	r3, [r7, #28]
 800e7d8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800e7dc:	e00a      	b.n	800e7f4 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800e7de:	69fb      	ldr	r3, [r7, #28]
 800e7e0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800e7e4:	2b07      	cmp	r3, #7
 800e7e6:	d103      	bne.n	800e7f0 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f000 fb75 	bl	800eed8 <DFU_Leave>
 800e7ee:	e001      	b.n	800e7f4 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 800e7f0:	2303      	movs	r3, #3
 800e7f2:	e000      	b.n	800e7f6 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 800e7f4:	2300      	movs	r3, #0
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3720      	adds	r7, #32
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}

0800e7fe <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800e7fe:	b480      	push	{r7}
 800e800:	b083      	sub	sp, #12
 800e802:	af00      	add	r7, sp, #0
 800e804:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800e806:	2300      	movs	r3, #0
}
 800e808:	4618      	mov	r0, r3
 800e80a:	370c      	adds	r7, #12
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr

0800e814 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800e814:	b480      	push	{r7}
 800e816:	b083      	sub	sp, #12
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	220a      	movs	r2, #10
 800e820:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800e822:	4b03      	ldr	r3, [pc, #12]	@ (800e830 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800e824:	4618      	mov	r0, r3
 800e826:	370c      	adds	r7, #12
 800e828:	46bd      	mov	sp, r7
 800e82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82e:	4770      	bx	lr
 800e830:	20000064 	.word	0x20000064

0800e834 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b086      	sub	sp, #24
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	460b      	mov	r3, r1
 800e83e:	607a      	str	r2, [r7, #4]
 800e840:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e848:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800e84a:	7afb      	ldrb	r3, [r7, #11]
 800e84c:	2b06      	cmp	r3, #6
 800e84e:	d808      	bhi.n	800e862 <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	4905      	ldr	r1, [pc, #20]	@ (800e86c <USBD_DFU_GetUsrStringDesc+0x38>)
 800e858:	4618      	mov	r0, r3
 800e85a:	f001 fbf8 	bl	801004e <USBD_GetString>
    return USBD_StrDesc;
 800e85e:	4b03      	ldr	r3, [pc, #12]	@ (800e86c <USBD_DFU_GetUsrStringDesc+0x38>)
 800e860:	e000      	b.n	800e864 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800e862:	2300      	movs	r3, #0
  }
}
 800e864:	4618      	mov	r0, r3
 800e866:	3718      	adds	r7, #24
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}
 800e86c:	2000086c 	.word	0x2000086c

0800e870 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 800e870:	b480      	push	{r7}
 800e872:	b083      	sub	sp, #12
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d101      	bne.n	800e884 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e880:	2303      	movs	r3, #3
 800e882:	e004      	b.n	800e88e <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	683a      	ldr	r2, [r7, #0]
 800e888:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800e88c:	2300      	movs	r3, #0
}
 800e88e:	4618      	mov	r0, r3
 800e890:	370c      	adds	r7, #12
 800e892:	46bd      	mov	sp, r7
 800e894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e898:	4770      	bx	lr
	...

0800e89c <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b084      	sub	sp, #16
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e8ac:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d051      	beq.n	800e958 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800e8ba:	2b02      	cmp	r3, #2
 800e8bc:	d013      	beq.n	800e8e6 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800e8c4:	2b03      	cmp	r3, #3
 800e8c6:	d00e      	beq.n	800e8e6 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800e8ce:	2b05      	cmp	r3, #5
 800e8d0:	d009      	beq.n	800e8e6 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800e8d8:	2b06      	cmp	r3, #6
 800e8da:	d004      	beq.n	800e8e6 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800e8e2:	2b09      	cmp	r3, #9
 800e8e4:	d125      	bne.n	800e932 <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2202      	movs	r2, #2
 800e8ea:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2200      	movs	r2, #0
 800e902:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	2200      	movs	r2, #0
 800e90a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2200      	movs	r2, #0
 800e91e:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2200      	movs	r2, #0
 800e926:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2200      	movs	r2, #0
 800e92e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 800e932:	4b0b      	ldr	r3, [pc, #44]	@ (800e960 <DFU_Detach+0xc4>)
 800e934:	7d5b      	ldrb	r3, [r3, #21]
 800e936:	f003 0310 	and.w	r3, r3, #16
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d006      	beq.n	800e94c <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f000 fb7b 	bl	800f03a <USBD_Stop>
    (void)USBD_Start(pdev);
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f000 fb6c 	bl	800f022 <USBD_Start>
 800e94a:	e006      	b.n	800e95a <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	885b      	ldrh	r3, [r3, #2]
 800e950:	4618      	mov	r0, r3
 800e952:	f7f5 f97f 	bl	8003c54 <HAL_Delay>
 800e956:	e000      	b.n	800e95a <DFU_Detach+0xbe>
    return;
 800e958:	bf00      	nop
  }
}
 800e95a:	3710      	adds	r7, #16
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}
 800e960:	20000048 	.word	0x20000048

0800e964 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b084      	sub	sp, #16
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e974:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d05b      	beq.n	800ea34 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	88db      	ldrh	r3, [r3, #6]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d02d      	beq.n	800e9e0 <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800e98a:	2b02      	cmp	r3, #2
 800e98c:	d004      	beq.n	800e998 <DFU_Download+0x34>
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800e994:	2b05      	cmp	r3, #5
 800e996:	d11e      	bne.n	800e9d6 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	885b      	ldrh	r3, [r3, #2]
 800e99c:	461a      	mov	r2, r3
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	88db      	ldrh	r3, [r3, #6]
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2203      	movs	r2, #3
 800e9b4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 800e9c4:	68f9      	ldr	r1, [r7, #12]
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f001 fbc9 	bl	8010166 <USBD_CtlPrepareRx>
 800e9d4:	e02f      	b.n	800ea36 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800e9d6:	6839      	ldr	r1, [r7, #0]
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f001 fb27 	bl	801002c <USBD_CtlError>
 800e9de:	e02a      	b.n	800ea36 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800e9e6:	2b05      	cmp	r3, #5
 800e9e8:	d004      	beq.n	800e9f4 <DFU_Download+0x90>
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800e9f0:	2b02      	cmp	r3, #2
 800e9f2:	d11a      	bne.n	800ea2a <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	2206      	movs	r2, #6
 800ea00:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2200      	movs	r2, #0
 800ea08:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2200      	movs	r2, #0
 800ea18:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800ea28:	e005      	b.n	800ea36 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800ea2a:	6839      	ldr	r1, [r7, #0]
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f001 fafd 	bl	801002c <USBD_CtlError>
 800ea32:	e000      	b.n	800ea36 <DFU_Download+0xd2>
    return;
 800ea34:	bf00      	nop
    }
  }
}
 800ea36:	3710      	adds	r7, #16
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b086      	sub	sp, #24
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ea4c:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ea54:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	f000 80c4 	beq.w	800ebe6 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	88db      	ldrh	r3, [r3, #6]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	f000 80a8 	beq.w	800ebb8 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800ea6e:	2b02      	cmp	r3, #2
 800ea70:	d005      	beq.n	800ea7e <DFU_Upload+0x42>
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800ea78:	2b09      	cmp	r3, #9
 800ea7a:	f040 8090 	bne.w	800eb9e <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	885b      	ldrh	r3, [r3, #2]
 800ea82:	461a      	mov	r2, r3
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	88db      	ldrh	r3, [r3, #6]
 800ea8e:	461a      	mov	r2, r3
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d12c      	bne.n	800eafa <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800eaa6:	2b03      	cmp	r3, #3
 800eaa8:	d901      	bls.n	800eaae <DFU_Upload+0x72>
 800eaaa:	2202      	movs	r2, #2
 800eaac:	e000      	b.n	800eab0 <DFU_Upload+0x74>
 800eaae:	2209      	movs	r2, #9
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	2200      	movs	r2, #0
 800eaba:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	2200      	movs	r2, #0
 800eac2:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	2200      	movs	r2, #0
 800eade:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	2221      	movs	r2, #33	@ 0x21
 800eae4:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	2241      	movs	r2, #65	@ 0x41
 800eaea:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	2203      	movs	r2, #3
 800eaf0:	4619      	mov	r1, r3
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f001 fb0b 	bl	801010e <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800eaf8:	e076      	b.n	800ebe8 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	d931      	bls.n	800eb68 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	2209      	movs	r2, #9
 800eb08:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	2200      	movs	r2, #0
 800eb18:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800eb36:	3b02      	subs	r3, #2
 800eb38:	029a      	lsls	r2, r3, #10
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800eb40:	4413      	add	r3, r2
 800eb42:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	695b      	ldr	r3, [r3, #20]
 800eb48:	68f8      	ldr	r0, [r7, #12]
 800eb4a:	6979      	ldr	r1, [r7, #20]
 800eb4c:	697a      	ldr	r2, [r7, #20]
 800eb4e:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 800eb52:	4798      	blx	r3
 800eb54:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800eb5c:	461a      	mov	r2, r3
 800eb5e:	68b9      	ldr	r1, [r7, #8]
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f001 fad4 	bl	801010e <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800eb66:	e03f      	b.n	800ebe8 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	220f      	movs	r2, #15
 800eb6c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	2200      	movs	r2, #0
 800eb74:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	2200      	movs	r2, #0
 800eb84:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 800eb94:	6839      	ldr	r1, [r7, #0]
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f001 fa48 	bl	801002c <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800eb9c:	e024      	b.n	800ebe8 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	2200      	movs	r2, #0
 800eba2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800ebae:	6839      	ldr	r1, [r7, #0]
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f001 fa3b 	bl	801002c <USBD_CtlError>
 800ebb6:	e017      	b.n	800ebe8 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	2202      	movs	r2, #2
 800ebbc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800ebd8:	697b      	ldr	r3, [r7, #20]
 800ebda:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800ebe4:	e000      	b.n	800ebe8 <DFU_Upload+0x1ac>
    return;
 800ebe6:	bf00      	nop
  }
}
 800ebe8:	3718      	adds	r7, #24
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
	...

0800ebf0 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ebfe:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ec06:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	f000 80a0 	beq.w	800ed50 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800ec16:	2b03      	cmp	r3, #3
 800ec18:	d002      	beq.n	800ec20 <DFU_GetStatus+0x30>
 800ec1a:	2b06      	cmp	r3, #6
 800ec1c:	d051      	beq.n	800ecc2 <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 800ec1e:	e08e      	b.n	800ed3e <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d034      	beq.n	800ec94 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2204      	movs	r2, #4
 800ec2e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2200      	movs	r2, #0
 800ec36:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2200      	movs	r2, #0
 800ec46:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d10e      	bne.n	800ec7e <DFU_GetStatus+0x8e>
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	2b41      	cmp	r3, #65	@ 0x41
 800ec66:	d10a      	bne.n	800ec7e <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	699b      	ldr	r3, [r3, #24]
 800ec6c:	68fa      	ldr	r2, [r7, #12]
 800ec6e:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 800ec72:	68fa      	ldr	r2, [r7, #12]
 800ec74:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 800ec78:	2100      	movs	r1, #0
 800ec7a:	4798      	blx	r3
      break;
 800ec7c:	e05f      	b.n	800ed3e <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	699b      	ldr	r3, [r3, #24]
 800ec82:	68fa      	ldr	r2, [r7, #12]
 800ec84:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 800ec88:	68fa      	ldr	r2, [r7, #12]
 800ec8a:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 800ec8e:	2101      	movs	r1, #1
 800ec90:	4798      	blx	r3
      break;
 800ec92:	e054      	b.n	800ed3e <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	2205      	movs	r2, #5
 800ec98:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2200      	movs	r2, #0
 800eca8:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800ecc0:	e03d      	b.n	800ed3e <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d116      	bne.n	800ecfa <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2207      	movs	r2, #7
 800ecd0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2200      	movs	r2, #0
 800ece0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2200      	movs	r2, #0
 800ece8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800ecf8:	e020      	b.n	800ed3c <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d11b      	bne.n	800ed3c <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 800ed04:	4b14      	ldr	r3, [pc, #80]	@ (800ed58 <DFU_GetStatus+0x168>)
 800ed06:	7d1b      	ldrb	r3, [r3, #20]
 800ed08:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d015      	beq.n	800ed3c <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2202      	movs	r2, #2
 800ed14:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2200      	movs	r2, #0
 800ed24:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800ed3c:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 800ed44:	2206      	movs	r2, #6
 800ed46:	4619      	mov	r1, r3
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f001 f9e0 	bl	801010e <USBD_CtlSendData>
 800ed4e:	e000      	b.n	800ed52 <DFU_GetStatus+0x162>
    return;
 800ed50:	bf00      	nop
}
 800ed52:	3710      	adds	r7, #16
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}
 800ed58:	20000048 	.word	0x20000048

0800ed5c <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b085      	sub	sp, #20
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ed6a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d042      	beq.n	800edf8 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800ed78:	2b0a      	cmp	r3, #10
 800ed7a:	d11e      	bne.n	800edba <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2202      	movs	r2, #2
 800ed80:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2200      	movs	r2, #0
 800ed88:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	2200      	movs	r2, #0
 800ed98:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2200      	movs	r2, #0
 800edb4:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 800edb8:	e01f      	b.n	800edfa <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	220a      	movs	r2, #10
 800edbe:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	220e      	movs	r2, #14
 800edc6:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	2200      	movs	r2, #0
 800edce:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2200      	movs	r2, #0
 800edd6:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2200      	movs	r2, #0
 800edde:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2200      	movs	r2, #0
 800edf2:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 800edf6:	e000      	b.n	800edfa <DFU_ClearStatus+0x9e>
    return;
 800edf8:	bf00      	nop
  }
}
 800edfa:	3714      	adds	r7, #20
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr

0800ee04 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b084      	sub	sp, #16
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ee12:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d008      	beq.n	800ee2c <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 800ee20:	2201      	movs	r2, #1
 800ee22:	4619      	mov	r1, r3
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f001 f972 	bl	801010e <USBD_CtlSendData>
 800ee2a:	e000      	b.n	800ee2e <DFU_GetState+0x2a>
    return;
 800ee2c:	bf00      	nop
}
 800ee2e:	3710      	adds	r7, #16
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 800ee34:	b480      	push	{r7}
 800ee36:	b085      	sub	sp, #20
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ee42:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d03f      	beq.n	800eeca <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800ee50:	2b02      	cmp	r3, #2
 800ee52:	d013      	beq.n	800ee7c <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800ee5a:	2b03      	cmp	r3, #3
 800ee5c:	d00e      	beq.n	800ee7c <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800ee64:	2b05      	cmp	r3, #5
 800ee66:	d009      	beq.n	800ee7c <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800ee6e:	2b06      	cmp	r3, #6
 800ee70:	d004      	beq.n	800ee7c <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800ee78:	2b09      	cmp	r3, #9
 800ee7a:	d127      	bne.n	800eecc <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	2202      	movs	r2, #2
 800ee80:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	2200      	movs	r2, #0
 800ee88:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2200      	movs	r2, #0
 800ee98:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	2200      	movs	r2, #0
 800eebc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	2200      	movs	r2, #0
 800eec4:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800eec8:	e000      	b.n	800eecc <DFU_Abort+0x98>
    return;
 800eeca:	bf00      	nop
  }
}
 800eecc:	3714      	adds	r7, #20
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr
	...

0800eed8 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b084      	sub	sp, #16
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eee6:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d03b      	beq.n	800ef66 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	2200      	movs	r2, #0
 800eef2:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 800eef6:	4b1e      	ldr	r3, [pc, #120]	@ (800ef70 <DFU_Leave+0x98>)
 800eef8:	7d1b      	ldrb	r3, [r3, #20]
 800eefa:	f003 0304 	and.w	r3, r3, #4
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d016      	beq.n	800ef30 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2206      	movs	r2, #6
 800ef06:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	2200      	movs	r2, #0
 800ef16:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 800ef2e:	e01b      	b.n	800ef68 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	2208      	movs	r2, #8
 800ef34:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2200      	movs	r2, #0
 800ef44:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f000 f86c 	bl	800f03a <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800ef62:	f7ff f9b3 	bl	800e2cc <__NVIC_SystemReset>
    return;
 800ef66:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 800ef68:	3710      	adds	r7, #16
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}
 800ef6e:	bf00      	nop
 800ef70:	20000048 	.word	0x20000048

0800ef74 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b086      	sub	sp, #24
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	60f8      	str	r0, [r7, #12]
 800ef7c:	60b9      	str	r1, [r7, #8]
 800ef7e:	4613      	mov	r3, r2
 800ef80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d101      	bne.n	800ef8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ef88:	2303      	movs	r3, #3
 800ef8a:	e01f      	b.n	800efcc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2200      	movs	r2, #0
 800ef98:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d003      	beq.n	800efb2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	68ba      	ldr	r2, [r7, #8]
 800efae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	2201      	movs	r2, #1
 800efb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	79fa      	ldrb	r2, [r7, #7]
 800efbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800efc0:	68f8      	ldr	r0, [r7, #12]
 800efc2:	f001 fbd9 	bl	8010778 <USBD_LL_Init>
 800efc6:	4603      	mov	r3, r0
 800efc8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800efca:	7dfb      	ldrb	r3, [r7, #23]
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3718      	adds	r7, #24
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}

0800efd4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b084      	sub	sp, #16
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
 800efdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800efde:	2300      	movs	r3, #0
 800efe0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d101      	bne.n	800efec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800efe8:	2303      	movs	r3, #3
 800efea:	e016      	b.n	800f01a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	683a      	ldr	r2, [r7, #0]
 800eff0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800effa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800effc:	2b00      	cmp	r3, #0
 800effe:	d00b      	beq.n	800f018 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f008:	f107 020e 	add.w	r2, r7, #14
 800f00c:	4610      	mov	r0, r2
 800f00e:	4798      	blx	r3
 800f010:	4602      	mov	r2, r0
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f018:	2300      	movs	r3, #0
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3710      	adds	r7, #16
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}

0800f022 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f022:	b580      	push	{r7, lr}
 800f024:	b082      	sub	sp, #8
 800f026:	af00      	add	r7, sp, #0
 800f028:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f001 fbea 	bl	8010804 <USBD_LL_Start>
 800f030:	4603      	mov	r3, r0
}
 800f032:	4618      	mov	r0, r3
 800f034:	3708      	adds	r7, #8
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800f03a:	b580      	push	{r7, lr}
 800f03c:	b082      	sub	sp, #8
 800f03e:	af00      	add	r7, sp, #0
 800f040:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f001 fbf9 	bl	801083a <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d009      	beq.n	800f066 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f058:	685b      	ldr	r3, [r3, #4]
 800f05a:	687a      	ldr	r2, [r7, #4]
 800f05c:	6852      	ldr	r2, [r2, #4]
 800f05e:	b2d2      	uxtb	r2, r2
 800f060:	4611      	mov	r1, r2
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	4798      	blx	r3
  }

  return USBD_OK;
 800f066:	2300      	movs	r3, #0
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3708      	adds	r7, #8
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f070:	b480      	push	{r7}
 800f072:	b083      	sub	sp, #12
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f078:	2300      	movs	r3, #0
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	370c      	adds	r7, #12
 800f07e:	46bd      	mov	sp, r7
 800f080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f084:	4770      	bx	lr

0800f086 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f086:	b580      	push	{r7, lr}
 800f088:	b084      	sub	sp, #16
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	6078      	str	r0, [r7, #4]
 800f08e:	460b      	mov	r3, r1
 800f090:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f092:	2303      	movs	r3, #3
 800f094:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d009      	beq.n	800f0b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	78fa      	ldrb	r2, [r7, #3]
 800f0aa:	4611      	mov	r1, r2
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	4798      	blx	r3
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3710      	adds	r7, #16
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}

0800f0be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f0be:	b580      	push	{r7, lr}
 800f0c0:	b082      	sub	sp, #8
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
 800f0c6:	460b      	mov	r3, r1
 800f0c8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d007      	beq.n	800f0e4 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	78fa      	ldrb	r2, [r7, #3]
 800f0de:	4611      	mov	r1, r2
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	4798      	blx	r3
  }

  return USBD_OK;
 800f0e4:	2300      	movs	r3, #0
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3708      	adds	r7, #8
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}

0800f0ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f0ee:	b580      	push	{r7, lr}
 800f0f0:	b084      	sub	sp, #16
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	6078      	str	r0, [r7, #4]
 800f0f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f0fe:	6839      	ldr	r1, [r7, #0]
 800f100:	4618      	mov	r0, r3
 800f102:	f000 ff59 	bl	800ffb8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2201      	movs	r2, #1
 800f10a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f114:	461a      	mov	r2, r3
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f122:	f003 031f 	and.w	r3, r3, #31
 800f126:	2b02      	cmp	r3, #2
 800f128:	d01a      	beq.n	800f160 <USBD_LL_SetupStage+0x72>
 800f12a:	2b02      	cmp	r3, #2
 800f12c:	d822      	bhi.n	800f174 <USBD_LL_SetupStage+0x86>
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d002      	beq.n	800f138 <USBD_LL_SetupStage+0x4a>
 800f132:	2b01      	cmp	r3, #1
 800f134:	d00a      	beq.n	800f14c <USBD_LL_SetupStage+0x5e>
 800f136:	e01d      	b.n	800f174 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f13e:	4619      	mov	r1, r3
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f000 f9ef 	bl	800f524 <USBD_StdDevReq>
 800f146:	4603      	mov	r3, r0
 800f148:	73fb      	strb	r3, [r7, #15]
      break;
 800f14a:	e020      	b.n	800f18e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f152:	4619      	mov	r1, r3
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f000 fa53 	bl	800f600 <USBD_StdItfReq>
 800f15a:	4603      	mov	r3, r0
 800f15c:	73fb      	strb	r3, [r7, #15]
      break;
 800f15e:	e016      	b.n	800f18e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f166:	4619      	mov	r1, r3
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f000 fa92 	bl	800f692 <USBD_StdEPReq>
 800f16e:	4603      	mov	r3, r0
 800f170:	73fb      	strb	r3, [r7, #15]
      break;
 800f172:	e00c      	b.n	800f18e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f17a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	4619      	mov	r1, r3
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f001 fb9a 	bl	80108bc <USBD_LL_StallEP>
 800f188:	4603      	mov	r3, r0
 800f18a:	73fb      	strb	r3, [r7, #15]
      break;
 800f18c:	bf00      	nop
  }

  return ret;
 800f18e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f190:	4618      	mov	r0, r3
 800f192:	3710      	adds	r7, #16
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}

0800f198 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b086      	sub	sp, #24
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	60f8      	str	r0, [r7, #12]
 800f1a0:	460b      	mov	r3, r1
 800f1a2:	607a      	str	r2, [r7, #4]
 800f1a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f1a6:	7afb      	ldrb	r3, [r7, #11]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d138      	bne.n	800f21e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f1b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f1ba:	2b03      	cmp	r3, #3
 800f1bc:	d14a      	bne.n	800f254 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	689a      	ldr	r2, [r3, #8]
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	68db      	ldr	r3, [r3, #12]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d913      	bls.n	800f1f2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	689a      	ldr	r2, [r3, #8]
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	68db      	ldr	r3, [r3, #12]
 800f1d2:	1ad2      	subs	r2, r2, r3
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	68da      	ldr	r2, [r3, #12]
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	689b      	ldr	r3, [r3, #8]
 800f1e0:	4293      	cmp	r3, r2
 800f1e2:	bf28      	it	cs
 800f1e4:	4613      	movcs	r3, r2
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	6879      	ldr	r1, [r7, #4]
 800f1ea:	68f8      	ldr	r0, [r7, #12]
 800f1ec:	f000 ffd8 	bl	80101a0 <USBD_CtlContinueRx>
 800f1f0:	e030      	b.n	800f254 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1f8:	b2db      	uxtb	r3, r3
 800f1fa:	2b03      	cmp	r3, #3
 800f1fc:	d10b      	bne.n	800f216 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f204:	691b      	ldr	r3, [r3, #16]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d005      	beq.n	800f216 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f210:	691b      	ldr	r3, [r3, #16]
 800f212:	68f8      	ldr	r0, [r7, #12]
 800f214:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f216:	68f8      	ldr	r0, [r7, #12]
 800f218:	f000 ffd3 	bl	80101c2 <USBD_CtlSendStatus>
 800f21c:	e01a      	b.n	800f254 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f224:	b2db      	uxtb	r3, r3
 800f226:	2b03      	cmp	r3, #3
 800f228:	d114      	bne.n	800f254 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f230:	699b      	ldr	r3, [r3, #24]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d00e      	beq.n	800f254 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f23c:	699b      	ldr	r3, [r3, #24]
 800f23e:	7afa      	ldrb	r2, [r7, #11]
 800f240:	4611      	mov	r1, r2
 800f242:	68f8      	ldr	r0, [r7, #12]
 800f244:	4798      	blx	r3
 800f246:	4603      	mov	r3, r0
 800f248:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f24a:	7dfb      	ldrb	r3, [r7, #23]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d001      	beq.n	800f254 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f250:	7dfb      	ldrb	r3, [r7, #23]
 800f252:	e000      	b.n	800f256 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f254:	2300      	movs	r3, #0
}
 800f256:	4618      	mov	r0, r3
 800f258:	3718      	adds	r7, #24
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}

0800f25e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f25e:	b580      	push	{r7, lr}
 800f260:	b086      	sub	sp, #24
 800f262:	af00      	add	r7, sp, #0
 800f264:	60f8      	str	r0, [r7, #12]
 800f266:	460b      	mov	r3, r1
 800f268:	607a      	str	r2, [r7, #4]
 800f26a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f26c:	7afb      	ldrb	r3, [r7, #11]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d16b      	bne.n	800f34a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	3314      	adds	r3, #20
 800f276:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f27e:	2b02      	cmp	r3, #2
 800f280:	d156      	bne.n	800f330 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	689a      	ldr	r2, [r3, #8]
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	68db      	ldr	r3, [r3, #12]
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d914      	bls.n	800f2b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	689a      	ldr	r2, [r3, #8]
 800f292:	693b      	ldr	r3, [r7, #16]
 800f294:	68db      	ldr	r3, [r3, #12]
 800f296:	1ad2      	subs	r2, r2, r3
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f29c:	693b      	ldr	r3, [r7, #16]
 800f29e:	689b      	ldr	r3, [r3, #8]
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	6879      	ldr	r1, [r7, #4]
 800f2a4:	68f8      	ldr	r0, [r7, #12]
 800f2a6:	f000 ff4d 	bl	8010144 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	2100      	movs	r1, #0
 800f2b0:	68f8      	ldr	r0, [r7, #12]
 800f2b2:	f001 fbad 	bl	8010a10 <USBD_LL_PrepareReceive>
 800f2b6:	e03b      	b.n	800f330 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f2b8:	693b      	ldr	r3, [r7, #16]
 800f2ba:	68da      	ldr	r2, [r3, #12]
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	689b      	ldr	r3, [r3, #8]
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d11c      	bne.n	800f2fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f2c4:	693b      	ldr	r3, [r7, #16]
 800f2c6:	685a      	ldr	r2, [r3, #4]
 800f2c8:	693b      	ldr	r3, [r7, #16]
 800f2ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d316      	bcc.n	800f2fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	685a      	ldr	r2, [r3, #4]
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d20f      	bcs.n	800f2fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f2de:	2200      	movs	r2, #0
 800f2e0:	2100      	movs	r1, #0
 800f2e2:	68f8      	ldr	r0, [r7, #12]
 800f2e4:	f000 ff2e 	bl	8010144 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	2100      	movs	r1, #0
 800f2f6:	68f8      	ldr	r0, [r7, #12]
 800f2f8:	f001 fb8a 	bl	8010a10 <USBD_LL_PrepareReceive>
 800f2fc:	e018      	b.n	800f330 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f304:	b2db      	uxtb	r3, r3
 800f306:	2b03      	cmp	r3, #3
 800f308:	d10b      	bne.n	800f322 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f310:	68db      	ldr	r3, [r3, #12]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d005      	beq.n	800f322 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f31c:	68db      	ldr	r3, [r3, #12]
 800f31e:	68f8      	ldr	r0, [r7, #12]
 800f320:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f322:	2180      	movs	r1, #128	@ 0x80
 800f324:	68f8      	ldr	r0, [r7, #12]
 800f326:	f001 fac9 	bl	80108bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f32a:	68f8      	ldr	r0, [r7, #12]
 800f32c:	f000 ff5c 	bl	80101e8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f336:	2b01      	cmp	r3, #1
 800f338:	d122      	bne.n	800f380 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f33a:	68f8      	ldr	r0, [r7, #12]
 800f33c:	f7ff fe98 	bl	800f070 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	2200      	movs	r2, #0
 800f344:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f348:	e01a      	b.n	800f380 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f350:	b2db      	uxtb	r3, r3
 800f352:	2b03      	cmp	r3, #3
 800f354:	d114      	bne.n	800f380 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f35c:	695b      	ldr	r3, [r3, #20]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d00e      	beq.n	800f380 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f368:	695b      	ldr	r3, [r3, #20]
 800f36a:	7afa      	ldrb	r2, [r7, #11]
 800f36c:	4611      	mov	r1, r2
 800f36e:	68f8      	ldr	r0, [r7, #12]
 800f370:	4798      	blx	r3
 800f372:	4603      	mov	r3, r0
 800f374:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f376:	7dfb      	ldrb	r3, [r7, #23]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d001      	beq.n	800f380 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f37c:	7dfb      	ldrb	r3, [r7, #23]
 800f37e:	e000      	b.n	800f382 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f380:	2300      	movs	r3, #0
}
 800f382:	4618      	mov	r0, r3
 800f384:	3718      	adds	r7, #24
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}

0800f38a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f38a:	b580      	push	{r7, lr}
 800f38c:	b082      	sub	sp, #8
 800f38e:	af00      	add	r7, sp, #0
 800f390:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2201      	movs	r2, #1
 800f396:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2200      	movs	r2, #0
 800f39e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d101      	bne.n	800f3be <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f3ba:	2303      	movs	r3, #3
 800f3bc:	e02f      	b.n	800f41e <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d00f      	beq.n	800f3e8 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d009      	beq.n	800f3e8 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3da:	685b      	ldr	r3, [r3, #4]
 800f3dc:	687a      	ldr	r2, [r7, #4]
 800f3de:	6852      	ldr	r2, [r2, #4]
 800f3e0:	b2d2      	uxtb	r2, r2
 800f3e2:	4611      	mov	r1, r2
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f3e8:	2340      	movs	r3, #64	@ 0x40
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	2100      	movs	r1, #0
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f001 fa3e 	bl	8010870 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2201      	movs	r2, #1
 800f3f8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2240      	movs	r2, #64	@ 0x40
 800f400:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f404:	2340      	movs	r3, #64	@ 0x40
 800f406:	2200      	movs	r2, #0
 800f408:	2180      	movs	r1, #128	@ 0x80
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f001 fa30 	bl	8010870 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2201      	movs	r2, #1
 800f414:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2240      	movs	r2, #64	@ 0x40
 800f41a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f41c:	2300      	movs	r3, #0
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3708      	adds	r7, #8
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}

0800f426 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f426:	b480      	push	{r7}
 800f428:	b083      	sub	sp, #12
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	6078      	str	r0, [r7, #4]
 800f42e:	460b      	mov	r3, r1
 800f430:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	78fa      	ldrb	r2, [r7, #3]
 800f436:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f438:	2300      	movs	r3, #0
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	370c      	adds	r7, #12
 800f43e:	46bd      	mov	sp, r7
 800f440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f444:	4770      	bx	lr

0800f446 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f446:	b480      	push	{r7}
 800f448:	b083      	sub	sp, #12
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f454:	b2da      	uxtb	r2, r3
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2204      	movs	r2, #4
 800f460:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f464:	2300      	movs	r3, #0
}
 800f466:	4618      	mov	r0, r3
 800f468:	370c      	adds	r7, #12
 800f46a:	46bd      	mov	sp, r7
 800f46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f470:	4770      	bx	lr

0800f472 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f472:	b480      	push	{r7}
 800f474:	b083      	sub	sp, #12
 800f476:	af00      	add	r7, sp, #0
 800f478:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f480:	b2db      	uxtb	r3, r3
 800f482:	2b04      	cmp	r3, #4
 800f484:	d106      	bne.n	800f494 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f48c:	b2da      	uxtb	r2, r3
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f494:	2300      	movs	r3, #0
}
 800f496:	4618      	mov	r0, r3
 800f498:	370c      	adds	r7, #12
 800f49a:	46bd      	mov	sp, r7
 800f49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a0:	4770      	bx	lr

0800f4a2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f4a2:	b580      	push	{r7, lr}
 800f4a4:	b082      	sub	sp, #8
 800f4a6:	af00      	add	r7, sp, #0
 800f4a8:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d101      	bne.n	800f4b8 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f4b4:	2303      	movs	r3, #3
 800f4b6:	e012      	b.n	800f4de <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4be:	b2db      	uxtb	r3, r3
 800f4c0:	2b03      	cmp	r3, #3
 800f4c2:	d10b      	bne.n	800f4dc <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4ca:	69db      	ldr	r3, [r3, #28]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d005      	beq.n	800f4dc <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4d6:	69db      	ldr	r3, [r3, #28]
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f4dc:	2300      	movs	r3, #0
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	3708      	adds	r7, #8
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}

0800f4e6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f4e6:	b480      	push	{r7}
 800f4e8:	b087      	sub	sp, #28
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	781b      	ldrb	r3, [r3, #0]
 800f502:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f504:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f508:	021b      	lsls	r3, r3, #8
 800f50a:	b21a      	sxth	r2, r3
 800f50c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f510:	4313      	orrs	r3, r2
 800f512:	b21b      	sxth	r3, r3
 800f514:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f516:	89fb      	ldrh	r3, [r7, #14]
}
 800f518:	4618      	mov	r0, r3
 800f51a:	371c      	adds	r7, #28
 800f51c:	46bd      	mov	sp, r7
 800f51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f522:	4770      	bx	lr

0800f524 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f52e:	2300      	movs	r3, #0
 800f530:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f53a:	2b40      	cmp	r3, #64	@ 0x40
 800f53c:	d005      	beq.n	800f54a <USBD_StdDevReq+0x26>
 800f53e:	2b40      	cmp	r3, #64	@ 0x40
 800f540:	d853      	bhi.n	800f5ea <USBD_StdDevReq+0xc6>
 800f542:	2b00      	cmp	r3, #0
 800f544:	d00b      	beq.n	800f55e <USBD_StdDevReq+0x3a>
 800f546:	2b20      	cmp	r3, #32
 800f548:	d14f      	bne.n	800f5ea <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f550:	689b      	ldr	r3, [r3, #8]
 800f552:	6839      	ldr	r1, [r7, #0]
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	4798      	blx	r3
 800f558:	4603      	mov	r3, r0
 800f55a:	73fb      	strb	r3, [r7, #15]
      break;
 800f55c:	e04a      	b.n	800f5f4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	785b      	ldrb	r3, [r3, #1]
 800f562:	2b09      	cmp	r3, #9
 800f564:	d83b      	bhi.n	800f5de <USBD_StdDevReq+0xba>
 800f566:	a201      	add	r2, pc, #4	@ (adr r2, 800f56c <USBD_StdDevReq+0x48>)
 800f568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f56c:	0800f5c1 	.word	0x0800f5c1
 800f570:	0800f5d5 	.word	0x0800f5d5
 800f574:	0800f5df 	.word	0x0800f5df
 800f578:	0800f5cb 	.word	0x0800f5cb
 800f57c:	0800f5df 	.word	0x0800f5df
 800f580:	0800f59f 	.word	0x0800f59f
 800f584:	0800f595 	.word	0x0800f595
 800f588:	0800f5df 	.word	0x0800f5df
 800f58c:	0800f5b7 	.word	0x0800f5b7
 800f590:	0800f5a9 	.word	0x0800f5a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f594:	6839      	ldr	r1, [r7, #0]
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f000 f9de 	bl	800f958 <USBD_GetDescriptor>
          break;
 800f59c:	e024      	b.n	800f5e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f59e:	6839      	ldr	r1, [r7, #0]
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f000 fb7f 	bl	800fca4 <USBD_SetAddress>
          break;
 800f5a6:	e01f      	b.n	800f5e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f5a8:	6839      	ldr	r1, [r7, #0]
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f000 fbbe 	bl	800fd2c <USBD_SetConfig>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	73fb      	strb	r3, [r7, #15]
          break;
 800f5b4:	e018      	b.n	800f5e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f5b6:	6839      	ldr	r1, [r7, #0]
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	f000 fc5d 	bl	800fe78 <USBD_GetConfig>
          break;
 800f5be:	e013      	b.n	800f5e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f5c0:	6839      	ldr	r1, [r7, #0]
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f000 fc8e 	bl	800fee4 <USBD_GetStatus>
          break;
 800f5c8:	e00e      	b.n	800f5e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f5ca:	6839      	ldr	r1, [r7, #0]
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f000 fcbd 	bl	800ff4c <USBD_SetFeature>
          break;
 800f5d2:	e009      	b.n	800f5e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f5d4:	6839      	ldr	r1, [r7, #0]
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f000 fccc 	bl	800ff74 <USBD_ClrFeature>
          break;
 800f5dc:	e004      	b.n	800f5e8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f5de:	6839      	ldr	r1, [r7, #0]
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f000 fd23 	bl	801002c <USBD_CtlError>
          break;
 800f5e6:	bf00      	nop
      }
      break;
 800f5e8:	e004      	b.n	800f5f4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f5ea:	6839      	ldr	r1, [r7, #0]
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f000 fd1d 	bl	801002c <USBD_CtlError>
      break;
 800f5f2:	bf00      	nop
  }

  return ret;
 800f5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3710      	adds	r7, #16
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop

0800f600 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b084      	sub	sp, #16
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
 800f608:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f60a:	2300      	movs	r3, #0
 800f60c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	781b      	ldrb	r3, [r3, #0]
 800f612:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f616:	2b40      	cmp	r3, #64	@ 0x40
 800f618:	d005      	beq.n	800f626 <USBD_StdItfReq+0x26>
 800f61a:	2b40      	cmp	r3, #64	@ 0x40
 800f61c:	d82f      	bhi.n	800f67e <USBD_StdItfReq+0x7e>
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d001      	beq.n	800f626 <USBD_StdItfReq+0x26>
 800f622:	2b20      	cmp	r3, #32
 800f624:	d12b      	bne.n	800f67e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f62c:	b2db      	uxtb	r3, r3
 800f62e:	3b01      	subs	r3, #1
 800f630:	2b02      	cmp	r3, #2
 800f632:	d81d      	bhi.n	800f670 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	889b      	ldrh	r3, [r3, #4]
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	2b01      	cmp	r3, #1
 800f63c:	d813      	bhi.n	800f666 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f644:	689b      	ldr	r3, [r3, #8]
 800f646:	6839      	ldr	r1, [r7, #0]
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	4798      	blx	r3
 800f64c:	4603      	mov	r3, r0
 800f64e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	88db      	ldrh	r3, [r3, #6]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d110      	bne.n	800f67a <USBD_StdItfReq+0x7a>
 800f658:	7bfb      	ldrb	r3, [r7, #15]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d10d      	bne.n	800f67a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f000 fdaf 	bl	80101c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f664:	e009      	b.n	800f67a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f666:	6839      	ldr	r1, [r7, #0]
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f000 fcdf 	bl	801002c <USBD_CtlError>
          break;
 800f66e:	e004      	b.n	800f67a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f670:	6839      	ldr	r1, [r7, #0]
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f000 fcda 	bl	801002c <USBD_CtlError>
          break;
 800f678:	e000      	b.n	800f67c <USBD_StdItfReq+0x7c>
          break;
 800f67a:	bf00      	nop
      }
      break;
 800f67c:	e004      	b.n	800f688 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f67e:	6839      	ldr	r1, [r7, #0]
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f000 fcd3 	bl	801002c <USBD_CtlError>
      break;
 800f686:	bf00      	nop
  }

  return ret;
 800f688:	7bfb      	ldrb	r3, [r7, #15]
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	3710      	adds	r7, #16
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}

0800f692 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f692:	b580      	push	{r7, lr}
 800f694:	b084      	sub	sp, #16
 800f696:	af00      	add	r7, sp, #0
 800f698:	6078      	str	r0, [r7, #4]
 800f69a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f69c:	2300      	movs	r3, #0
 800f69e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	889b      	ldrh	r3, [r3, #4]
 800f6a4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	781b      	ldrb	r3, [r3, #0]
 800f6aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f6ae:	2b40      	cmp	r3, #64	@ 0x40
 800f6b0:	d007      	beq.n	800f6c2 <USBD_StdEPReq+0x30>
 800f6b2:	2b40      	cmp	r3, #64	@ 0x40
 800f6b4:	f200 8145 	bhi.w	800f942 <USBD_StdEPReq+0x2b0>
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d00c      	beq.n	800f6d6 <USBD_StdEPReq+0x44>
 800f6bc:	2b20      	cmp	r3, #32
 800f6be:	f040 8140 	bne.w	800f942 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6c8:	689b      	ldr	r3, [r3, #8]
 800f6ca:	6839      	ldr	r1, [r7, #0]
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	4798      	blx	r3
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	73fb      	strb	r3, [r7, #15]
      break;
 800f6d4:	e13a      	b.n	800f94c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	785b      	ldrb	r3, [r3, #1]
 800f6da:	2b03      	cmp	r3, #3
 800f6dc:	d007      	beq.n	800f6ee <USBD_StdEPReq+0x5c>
 800f6de:	2b03      	cmp	r3, #3
 800f6e0:	f300 8129 	bgt.w	800f936 <USBD_StdEPReq+0x2a4>
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d07f      	beq.n	800f7e8 <USBD_StdEPReq+0x156>
 800f6e8:	2b01      	cmp	r3, #1
 800f6ea:	d03c      	beq.n	800f766 <USBD_StdEPReq+0xd4>
 800f6ec:	e123      	b.n	800f936 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6f4:	b2db      	uxtb	r3, r3
 800f6f6:	2b02      	cmp	r3, #2
 800f6f8:	d002      	beq.n	800f700 <USBD_StdEPReq+0x6e>
 800f6fa:	2b03      	cmp	r3, #3
 800f6fc:	d016      	beq.n	800f72c <USBD_StdEPReq+0x9a>
 800f6fe:	e02c      	b.n	800f75a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f700:	7bbb      	ldrb	r3, [r7, #14]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00d      	beq.n	800f722 <USBD_StdEPReq+0x90>
 800f706:	7bbb      	ldrb	r3, [r7, #14]
 800f708:	2b80      	cmp	r3, #128	@ 0x80
 800f70a:	d00a      	beq.n	800f722 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f70c:	7bbb      	ldrb	r3, [r7, #14]
 800f70e:	4619      	mov	r1, r3
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f001 f8d3 	bl	80108bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f716:	2180      	movs	r1, #128	@ 0x80
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f001 f8cf 	bl	80108bc <USBD_LL_StallEP>
 800f71e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f720:	e020      	b.n	800f764 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f722:	6839      	ldr	r1, [r7, #0]
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f000 fc81 	bl	801002c <USBD_CtlError>
              break;
 800f72a:	e01b      	b.n	800f764 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	885b      	ldrh	r3, [r3, #2]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d10e      	bne.n	800f752 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f734:	7bbb      	ldrb	r3, [r7, #14]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d00b      	beq.n	800f752 <USBD_StdEPReq+0xc0>
 800f73a:	7bbb      	ldrb	r3, [r7, #14]
 800f73c:	2b80      	cmp	r3, #128	@ 0x80
 800f73e:	d008      	beq.n	800f752 <USBD_StdEPReq+0xc0>
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	88db      	ldrh	r3, [r3, #6]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d104      	bne.n	800f752 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f748:	7bbb      	ldrb	r3, [r7, #14]
 800f74a:	4619      	mov	r1, r3
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f001 f8b5 	bl	80108bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f000 fd35 	bl	80101c2 <USBD_CtlSendStatus>

              break;
 800f758:	e004      	b.n	800f764 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f75a:	6839      	ldr	r1, [r7, #0]
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f000 fc65 	bl	801002c <USBD_CtlError>
              break;
 800f762:	bf00      	nop
          }
          break;
 800f764:	e0ec      	b.n	800f940 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f76c:	b2db      	uxtb	r3, r3
 800f76e:	2b02      	cmp	r3, #2
 800f770:	d002      	beq.n	800f778 <USBD_StdEPReq+0xe6>
 800f772:	2b03      	cmp	r3, #3
 800f774:	d016      	beq.n	800f7a4 <USBD_StdEPReq+0x112>
 800f776:	e030      	b.n	800f7da <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f778:	7bbb      	ldrb	r3, [r7, #14]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d00d      	beq.n	800f79a <USBD_StdEPReq+0x108>
 800f77e:	7bbb      	ldrb	r3, [r7, #14]
 800f780:	2b80      	cmp	r3, #128	@ 0x80
 800f782:	d00a      	beq.n	800f79a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f784:	7bbb      	ldrb	r3, [r7, #14]
 800f786:	4619      	mov	r1, r3
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f001 f897 	bl	80108bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f78e:	2180      	movs	r1, #128	@ 0x80
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f001 f893 	bl	80108bc <USBD_LL_StallEP>
 800f796:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f798:	e025      	b.n	800f7e6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f79a:	6839      	ldr	r1, [r7, #0]
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f000 fc45 	bl	801002c <USBD_CtlError>
              break;
 800f7a2:	e020      	b.n	800f7e6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	885b      	ldrh	r3, [r3, #2]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d11b      	bne.n	800f7e4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f7ac:	7bbb      	ldrb	r3, [r7, #14]
 800f7ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d004      	beq.n	800f7c0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f7b6:	7bbb      	ldrb	r3, [r7, #14]
 800f7b8:	4619      	mov	r1, r3
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f001 f89d 	bl	80108fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f000 fcfe 	bl	80101c2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7cc:	689b      	ldr	r3, [r3, #8]
 800f7ce:	6839      	ldr	r1, [r7, #0]
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	4798      	blx	r3
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f7d8:	e004      	b.n	800f7e4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f7da:	6839      	ldr	r1, [r7, #0]
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f000 fc25 	bl	801002c <USBD_CtlError>
              break;
 800f7e2:	e000      	b.n	800f7e6 <USBD_StdEPReq+0x154>
              break;
 800f7e4:	bf00      	nop
          }
          break;
 800f7e6:	e0ab      	b.n	800f940 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7ee:	b2db      	uxtb	r3, r3
 800f7f0:	2b02      	cmp	r3, #2
 800f7f2:	d002      	beq.n	800f7fa <USBD_StdEPReq+0x168>
 800f7f4:	2b03      	cmp	r3, #3
 800f7f6:	d032      	beq.n	800f85e <USBD_StdEPReq+0x1cc>
 800f7f8:	e097      	b.n	800f92a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f7fa:	7bbb      	ldrb	r3, [r7, #14]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d007      	beq.n	800f810 <USBD_StdEPReq+0x17e>
 800f800:	7bbb      	ldrb	r3, [r7, #14]
 800f802:	2b80      	cmp	r3, #128	@ 0x80
 800f804:	d004      	beq.n	800f810 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f806:	6839      	ldr	r1, [r7, #0]
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f000 fc0f 	bl	801002c <USBD_CtlError>
                break;
 800f80e:	e091      	b.n	800f934 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f810:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f814:	2b00      	cmp	r3, #0
 800f816:	da0b      	bge.n	800f830 <USBD_StdEPReq+0x19e>
 800f818:	7bbb      	ldrb	r3, [r7, #14]
 800f81a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f81e:	4613      	mov	r3, r2
 800f820:	009b      	lsls	r3, r3, #2
 800f822:	4413      	add	r3, r2
 800f824:	009b      	lsls	r3, r3, #2
 800f826:	3310      	adds	r3, #16
 800f828:	687a      	ldr	r2, [r7, #4]
 800f82a:	4413      	add	r3, r2
 800f82c:	3304      	adds	r3, #4
 800f82e:	e00b      	b.n	800f848 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f830:	7bbb      	ldrb	r3, [r7, #14]
 800f832:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f836:	4613      	mov	r3, r2
 800f838:	009b      	lsls	r3, r3, #2
 800f83a:	4413      	add	r3, r2
 800f83c:	009b      	lsls	r3, r3, #2
 800f83e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f842:	687a      	ldr	r2, [r7, #4]
 800f844:	4413      	add	r3, r2
 800f846:	3304      	adds	r3, #4
 800f848:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	2200      	movs	r2, #0
 800f84e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	2202      	movs	r2, #2
 800f854:	4619      	mov	r1, r3
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f000 fc59 	bl	801010e <USBD_CtlSendData>
              break;
 800f85c:	e06a      	b.n	800f934 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f85e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f862:	2b00      	cmp	r3, #0
 800f864:	da11      	bge.n	800f88a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f866:	7bbb      	ldrb	r3, [r7, #14]
 800f868:	f003 020f 	and.w	r2, r3, #15
 800f86c:	6879      	ldr	r1, [r7, #4]
 800f86e:	4613      	mov	r3, r2
 800f870:	009b      	lsls	r3, r3, #2
 800f872:	4413      	add	r3, r2
 800f874:	009b      	lsls	r3, r3, #2
 800f876:	440b      	add	r3, r1
 800f878:	3324      	adds	r3, #36	@ 0x24
 800f87a:	881b      	ldrh	r3, [r3, #0]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d117      	bne.n	800f8b0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f880:	6839      	ldr	r1, [r7, #0]
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f000 fbd2 	bl	801002c <USBD_CtlError>
                  break;
 800f888:	e054      	b.n	800f934 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f88a:	7bbb      	ldrb	r3, [r7, #14]
 800f88c:	f003 020f 	and.w	r2, r3, #15
 800f890:	6879      	ldr	r1, [r7, #4]
 800f892:	4613      	mov	r3, r2
 800f894:	009b      	lsls	r3, r3, #2
 800f896:	4413      	add	r3, r2
 800f898:	009b      	lsls	r3, r3, #2
 800f89a:	440b      	add	r3, r1
 800f89c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f8a0:	881b      	ldrh	r3, [r3, #0]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d104      	bne.n	800f8b0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f8a6:	6839      	ldr	r1, [r7, #0]
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f000 fbbf 	bl	801002c <USBD_CtlError>
                  break;
 800f8ae:	e041      	b.n	800f934 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f8b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	da0b      	bge.n	800f8d0 <USBD_StdEPReq+0x23e>
 800f8b8:	7bbb      	ldrb	r3, [r7, #14]
 800f8ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f8be:	4613      	mov	r3, r2
 800f8c0:	009b      	lsls	r3, r3, #2
 800f8c2:	4413      	add	r3, r2
 800f8c4:	009b      	lsls	r3, r3, #2
 800f8c6:	3310      	adds	r3, #16
 800f8c8:	687a      	ldr	r2, [r7, #4]
 800f8ca:	4413      	add	r3, r2
 800f8cc:	3304      	adds	r3, #4
 800f8ce:	e00b      	b.n	800f8e8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f8d0:	7bbb      	ldrb	r3, [r7, #14]
 800f8d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f8d6:	4613      	mov	r3, r2
 800f8d8:	009b      	lsls	r3, r3, #2
 800f8da:	4413      	add	r3, r2
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f8e2:	687a      	ldr	r2, [r7, #4]
 800f8e4:	4413      	add	r3, r2
 800f8e6:	3304      	adds	r3, #4
 800f8e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f8ea:	7bbb      	ldrb	r3, [r7, #14]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d002      	beq.n	800f8f6 <USBD_StdEPReq+0x264>
 800f8f0:	7bbb      	ldrb	r3, [r7, #14]
 800f8f2:	2b80      	cmp	r3, #128	@ 0x80
 800f8f4:	d103      	bne.n	800f8fe <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	601a      	str	r2, [r3, #0]
 800f8fc:	e00e      	b.n	800f91c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f8fe:	7bbb      	ldrb	r3, [r7, #14]
 800f900:	4619      	mov	r1, r3
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f001 f818 	bl	8010938 <USBD_LL_IsStallEP>
 800f908:	4603      	mov	r3, r0
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d003      	beq.n	800f916 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f90e:	68bb      	ldr	r3, [r7, #8]
 800f910:	2201      	movs	r2, #1
 800f912:	601a      	str	r2, [r3, #0]
 800f914:	e002      	b.n	800f91c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	2200      	movs	r2, #0
 800f91a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	2202      	movs	r2, #2
 800f920:	4619      	mov	r1, r3
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f000 fbf3 	bl	801010e <USBD_CtlSendData>
              break;
 800f928:	e004      	b.n	800f934 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f92a:	6839      	ldr	r1, [r7, #0]
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f000 fb7d 	bl	801002c <USBD_CtlError>
              break;
 800f932:	bf00      	nop
          }
          break;
 800f934:	e004      	b.n	800f940 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f936:	6839      	ldr	r1, [r7, #0]
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f000 fb77 	bl	801002c <USBD_CtlError>
          break;
 800f93e:	bf00      	nop
      }
      break;
 800f940:	e004      	b.n	800f94c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f942:	6839      	ldr	r1, [r7, #0]
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f000 fb71 	bl	801002c <USBD_CtlError>
      break;
 800f94a:	bf00      	nop
  }

  return ret;
 800f94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3710      	adds	r7, #16
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
	...

0800f958 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b084      	sub	sp, #16
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
 800f960:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f962:	2300      	movs	r3, #0
 800f964:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f966:	2300      	movs	r3, #0
 800f968:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f96a:	2300      	movs	r3, #0
 800f96c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	885b      	ldrh	r3, [r3, #2]
 800f972:	0a1b      	lsrs	r3, r3, #8
 800f974:	b29b      	uxth	r3, r3
 800f976:	3b01      	subs	r3, #1
 800f978:	2b0e      	cmp	r3, #14
 800f97a:	f200 8165 	bhi.w	800fc48 <USBD_GetDescriptor+0x2f0>
 800f97e:	a201      	add	r2, pc, #4	@ (adr r2, 800f984 <USBD_GetDescriptor+0x2c>)
 800f980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f984:	0800f9f5 	.word	0x0800f9f5
 800f988:	0800fa0d 	.word	0x0800fa0d
 800f98c:	0800fa4d 	.word	0x0800fa4d
 800f990:	0800fc49 	.word	0x0800fc49
 800f994:	0800fc49 	.word	0x0800fc49
 800f998:	0800fbe9 	.word	0x0800fbe9
 800f99c:	0800fc15 	.word	0x0800fc15
 800f9a0:	0800fc49 	.word	0x0800fc49
 800f9a4:	0800fc49 	.word	0x0800fc49
 800f9a8:	0800fc49 	.word	0x0800fc49
 800f9ac:	0800fc49 	.word	0x0800fc49
 800f9b0:	0800fc49 	.word	0x0800fc49
 800f9b4:	0800fc49 	.word	0x0800fc49
 800f9b8:	0800fc49 	.word	0x0800fc49
 800f9bc:	0800f9c1 	.word	0x0800f9c1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9c6:	69db      	ldr	r3, [r3, #28]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d00b      	beq.n	800f9e4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9d2:	69db      	ldr	r3, [r3, #28]
 800f9d4:	687a      	ldr	r2, [r7, #4]
 800f9d6:	7c12      	ldrb	r2, [r2, #16]
 800f9d8:	f107 0108 	add.w	r1, r7, #8
 800f9dc:	4610      	mov	r0, r2
 800f9de:	4798      	blx	r3
 800f9e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f9e2:	e139      	b.n	800fc58 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 800f9e4:	6839      	ldr	r1, [r7, #0]
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f000 fb20 	bl	801002c <USBD_CtlError>
        err++;
 800f9ec:	7afb      	ldrb	r3, [r7, #11]
 800f9ee:	3301      	adds	r3, #1
 800f9f0:	72fb      	strb	r3, [r7, #11]
      break;
 800f9f2:	e131      	b.n	800fc58 <USBD_GetDescriptor+0x300>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	687a      	ldr	r2, [r7, #4]
 800f9fe:	7c12      	ldrb	r2, [r2, #16]
 800fa00:	f107 0108 	add.w	r1, r7, #8
 800fa04:	4610      	mov	r0, r2
 800fa06:	4798      	blx	r3
 800fa08:	60f8      	str	r0, [r7, #12]
      break;
 800fa0a:	e125      	b.n	800fc58 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	7c1b      	ldrb	r3, [r3, #16]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d10d      	bne.n	800fa30 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa1c:	f107 0208 	add.w	r2, r7, #8
 800fa20:	4610      	mov	r0, r2
 800fa22:	4798      	blx	r3
 800fa24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	3301      	adds	r3, #1
 800fa2a:	2202      	movs	r2, #2
 800fa2c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fa2e:	e113      	b.n	800fc58 <USBD_GetDescriptor+0x300>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa38:	f107 0208 	add.w	r2, r7, #8
 800fa3c:	4610      	mov	r0, r2
 800fa3e:	4798      	blx	r3
 800fa40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	3301      	adds	r3, #1
 800fa46:	2202      	movs	r2, #2
 800fa48:	701a      	strb	r2, [r3, #0]
      break;
 800fa4a:	e105      	b.n	800fc58 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	885b      	ldrh	r3, [r3, #2]
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	2b05      	cmp	r3, #5
 800fa54:	f200 80ac 	bhi.w	800fbb0 <USBD_GetDescriptor+0x258>
 800fa58:	a201      	add	r2, pc, #4	@ (adr r2, 800fa60 <USBD_GetDescriptor+0x108>)
 800fa5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa5e:	bf00      	nop
 800fa60:	0800fa79 	.word	0x0800fa79
 800fa64:	0800faad 	.word	0x0800faad
 800fa68:	0800fae1 	.word	0x0800fae1
 800fa6c:	0800fb15 	.word	0x0800fb15
 800fa70:	0800fb49 	.word	0x0800fb49
 800fa74:	0800fb7d 	.word	0x0800fb7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa7e:	685b      	ldr	r3, [r3, #4]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d00b      	beq.n	800fa9c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	687a      	ldr	r2, [r7, #4]
 800fa8e:	7c12      	ldrb	r2, [r2, #16]
 800fa90:	f107 0108 	add.w	r1, r7, #8
 800fa94:	4610      	mov	r0, r2
 800fa96:	4798      	blx	r3
 800fa98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa9a:	e0a4      	b.n	800fbe6 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800fa9c:	6839      	ldr	r1, [r7, #0]
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f000 fac4 	bl	801002c <USBD_CtlError>
            err++;
 800faa4:	7afb      	ldrb	r3, [r7, #11]
 800faa6:	3301      	adds	r3, #1
 800faa8:	72fb      	strb	r3, [r7, #11]
          break;
 800faaa:	e09c      	b.n	800fbe6 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fab2:	689b      	ldr	r3, [r3, #8]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d00b      	beq.n	800fad0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fabe:	689b      	ldr	r3, [r3, #8]
 800fac0:	687a      	ldr	r2, [r7, #4]
 800fac2:	7c12      	ldrb	r2, [r2, #16]
 800fac4:	f107 0108 	add.w	r1, r7, #8
 800fac8:	4610      	mov	r0, r2
 800faca:	4798      	blx	r3
 800facc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800face:	e08a      	b.n	800fbe6 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800fad0:	6839      	ldr	r1, [r7, #0]
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f000 faaa 	bl	801002c <USBD_CtlError>
            err++;
 800fad8:	7afb      	ldrb	r3, [r7, #11]
 800fada:	3301      	adds	r3, #1
 800fadc:	72fb      	strb	r3, [r7, #11]
          break;
 800fade:	e082      	b.n	800fbe6 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d00b      	beq.n	800fb04 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800faf2:	68db      	ldr	r3, [r3, #12]
 800faf4:	687a      	ldr	r2, [r7, #4]
 800faf6:	7c12      	ldrb	r2, [r2, #16]
 800faf8:	f107 0108 	add.w	r1, r7, #8
 800fafc:	4610      	mov	r0, r2
 800fafe:	4798      	blx	r3
 800fb00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb02:	e070      	b.n	800fbe6 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800fb04:	6839      	ldr	r1, [r7, #0]
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f000 fa90 	bl	801002c <USBD_CtlError>
            err++;
 800fb0c:	7afb      	ldrb	r3, [r7, #11]
 800fb0e:	3301      	adds	r3, #1
 800fb10:	72fb      	strb	r3, [r7, #11]
          break;
 800fb12:	e068      	b.n	800fbe6 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb1a:	691b      	ldr	r3, [r3, #16]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d00b      	beq.n	800fb38 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb26:	691b      	ldr	r3, [r3, #16]
 800fb28:	687a      	ldr	r2, [r7, #4]
 800fb2a:	7c12      	ldrb	r2, [r2, #16]
 800fb2c:	f107 0108 	add.w	r1, r7, #8
 800fb30:	4610      	mov	r0, r2
 800fb32:	4798      	blx	r3
 800fb34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb36:	e056      	b.n	800fbe6 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800fb38:	6839      	ldr	r1, [r7, #0]
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f000 fa76 	bl	801002c <USBD_CtlError>
            err++;
 800fb40:	7afb      	ldrb	r3, [r7, #11]
 800fb42:	3301      	adds	r3, #1
 800fb44:	72fb      	strb	r3, [r7, #11]
          break;
 800fb46:	e04e      	b.n	800fbe6 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb4e:	695b      	ldr	r3, [r3, #20]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d00b      	beq.n	800fb6c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb5a:	695b      	ldr	r3, [r3, #20]
 800fb5c:	687a      	ldr	r2, [r7, #4]
 800fb5e:	7c12      	ldrb	r2, [r2, #16]
 800fb60:	f107 0108 	add.w	r1, r7, #8
 800fb64:	4610      	mov	r0, r2
 800fb66:	4798      	blx	r3
 800fb68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb6a:	e03c      	b.n	800fbe6 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800fb6c:	6839      	ldr	r1, [r7, #0]
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f000 fa5c 	bl	801002c <USBD_CtlError>
            err++;
 800fb74:	7afb      	ldrb	r3, [r7, #11]
 800fb76:	3301      	adds	r3, #1
 800fb78:	72fb      	strb	r3, [r7, #11]
          break;
 800fb7a:	e034      	b.n	800fbe6 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb82:	699b      	ldr	r3, [r3, #24]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d00b      	beq.n	800fba0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb8e:	699b      	ldr	r3, [r3, #24]
 800fb90:	687a      	ldr	r2, [r7, #4]
 800fb92:	7c12      	ldrb	r2, [r2, #16]
 800fb94:	f107 0108 	add.w	r1, r7, #8
 800fb98:	4610      	mov	r0, r2
 800fb9a:	4798      	blx	r3
 800fb9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb9e:	e022      	b.n	800fbe6 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800fba0:	6839      	ldr	r1, [r7, #0]
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f000 fa42 	bl	801002c <USBD_CtlError>
            err++;
 800fba8:	7afb      	ldrb	r3, [r7, #11]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	72fb      	strb	r3, [r7, #11]
          break;
 800fbae:	e01a      	b.n	800fbe6 <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fbb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d00c      	beq.n	800fbd6 <USBD_GetDescriptor+0x27e>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fbc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbc4:	683a      	ldr	r2, [r7, #0]
 800fbc6:	8852      	ldrh	r2, [r2, #2]
 800fbc8:	b2d1      	uxtb	r1, r2
 800fbca:	f107 0208 	add.w	r2, r7, #8
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	4798      	blx	r3
 800fbd2:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800fbd4:	e006      	b.n	800fbe4 <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 800fbd6:	6839      	ldr	r1, [r7, #0]
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f000 fa27 	bl	801002c <USBD_CtlError>
            err++;
 800fbde:	7afb      	ldrb	r3, [r7, #11]
 800fbe0:	3301      	adds	r3, #1
 800fbe2:	72fb      	strb	r3, [r7, #11]
          break;
 800fbe4:	bf00      	nop
      }
      break;
 800fbe6:	e037      	b.n	800fc58 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	7c1b      	ldrb	r3, [r3, #16]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d109      	bne.n	800fc04 <USBD_GetDescriptor+0x2ac>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fbf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbf8:	f107 0208 	add.w	r2, r7, #8
 800fbfc:	4610      	mov	r0, r2
 800fbfe:	4798      	blx	r3
 800fc00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc02:	e029      	b.n	800fc58 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 800fc04:	6839      	ldr	r1, [r7, #0]
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f000 fa10 	bl	801002c <USBD_CtlError>
        err++;
 800fc0c:	7afb      	ldrb	r3, [r7, #11]
 800fc0e:	3301      	adds	r3, #1
 800fc10:	72fb      	strb	r3, [r7, #11]
      break;
 800fc12:	e021      	b.n	800fc58 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	7c1b      	ldrb	r3, [r3, #16]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d10d      	bne.n	800fc38 <USBD_GetDescriptor+0x2e0>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc24:	f107 0208 	add.w	r2, r7, #8
 800fc28:	4610      	mov	r0, r2
 800fc2a:	4798      	blx	r3
 800fc2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	3301      	adds	r3, #1
 800fc32:	2207      	movs	r2, #7
 800fc34:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc36:	e00f      	b.n	800fc58 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 800fc38:	6839      	ldr	r1, [r7, #0]
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f000 f9f6 	bl	801002c <USBD_CtlError>
        err++;
 800fc40:	7afb      	ldrb	r3, [r7, #11]
 800fc42:	3301      	adds	r3, #1
 800fc44:	72fb      	strb	r3, [r7, #11]
      break;
 800fc46:	e007      	b.n	800fc58 <USBD_GetDescriptor+0x300>

    default:
      USBD_CtlError(pdev, req);
 800fc48:	6839      	ldr	r1, [r7, #0]
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f000 f9ee 	bl	801002c <USBD_CtlError>
      err++;
 800fc50:	7afb      	ldrb	r3, [r7, #11]
 800fc52:	3301      	adds	r3, #1
 800fc54:	72fb      	strb	r3, [r7, #11]
      break;
 800fc56:	bf00      	nop
  }

  if (err != 0U)
 800fc58:	7afb      	ldrb	r3, [r7, #11]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d11e      	bne.n	800fc9c <USBD_GetDescriptor+0x344>
  {
    return;
  }

  if (req->wLength != 0U)
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	88db      	ldrh	r3, [r3, #6]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d016      	beq.n	800fc94 <USBD_GetDescriptor+0x33c>
  {
    if (len != 0U)
 800fc66:	893b      	ldrh	r3, [r7, #8]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d00e      	beq.n	800fc8a <USBD_GetDescriptor+0x332>
    {
      len = MIN(len, req->wLength);
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	88da      	ldrh	r2, [r3, #6]
 800fc70:	893b      	ldrh	r3, [r7, #8]
 800fc72:	4293      	cmp	r3, r2
 800fc74:	bf28      	it	cs
 800fc76:	4613      	movcs	r3, r2
 800fc78:	b29b      	uxth	r3, r3
 800fc7a:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fc7c:	893b      	ldrh	r3, [r7, #8]
 800fc7e:	461a      	mov	r2, r3
 800fc80:	68f9      	ldr	r1, [r7, #12]
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f000 fa43 	bl	801010e <USBD_CtlSendData>
 800fc88:	e009      	b.n	800fc9e <USBD_GetDescriptor+0x346>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fc8a:	6839      	ldr	r1, [r7, #0]
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	f000 f9cd 	bl	801002c <USBD_CtlError>
 800fc92:	e004      	b.n	800fc9e <USBD_GetDescriptor+0x346>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f000 fa94 	bl	80101c2 <USBD_CtlSendStatus>
 800fc9a:	e000      	b.n	800fc9e <USBD_GetDescriptor+0x346>
    return;
 800fc9c:	bf00      	nop
  }
}
 800fc9e:	3710      	adds	r7, #16
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}

0800fca4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b084      	sub	sp, #16
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	889b      	ldrh	r3, [r3, #4]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d131      	bne.n	800fd1a <USBD_SetAddress+0x76>
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	88db      	ldrh	r3, [r3, #6]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d12d      	bne.n	800fd1a <USBD_SetAddress+0x76>
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	885b      	ldrh	r3, [r3, #2]
 800fcc2:	2b7f      	cmp	r3, #127	@ 0x7f
 800fcc4:	d829      	bhi.n	800fd1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	885b      	ldrh	r3, [r3, #2]
 800fcca:	b2db      	uxtb	r3, r3
 800fccc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fcd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	2b03      	cmp	r3, #3
 800fcdc:	d104      	bne.n	800fce8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fcde:	6839      	ldr	r1, [r7, #0]
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f000 f9a3 	bl	801002c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fce6:	e01d      	b.n	800fd24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	7bfa      	ldrb	r2, [r7, #15]
 800fcec:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fcf0:	7bfb      	ldrb	r3, [r7, #15]
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f000 fe4b 	bl	8010990 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f000 fa61 	bl	80101c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fd00:	7bfb      	ldrb	r3, [r7, #15]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d004      	beq.n	800fd10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2202      	movs	r2, #2
 800fd0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd0e:	e009      	b.n	800fd24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2201      	movs	r2, #1
 800fd14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd18:	e004      	b.n	800fd24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fd1a:	6839      	ldr	r1, [r7, #0]
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f000 f985 	bl	801002c <USBD_CtlError>
  }
}
 800fd22:	bf00      	nop
 800fd24:	bf00      	nop
 800fd26:	3710      	adds	r7, #16
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}

0800fd2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b084      	sub	sp, #16
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd36:	2300      	movs	r3, #0
 800fd38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	885b      	ldrh	r3, [r3, #2]
 800fd3e:	b2da      	uxtb	r2, r3
 800fd40:	4b4c      	ldr	r3, [pc, #304]	@ (800fe74 <USBD_SetConfig+0x148>)
 800fd42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fd44:	4b4b      	ldr	r3, [pc, #300]	@ (800fe74 <USBD_SetConfig+0x148>)
 800fd46:	781b      	ldrb	r3, [r3, #0]
 800fd48:	2b01      	cmp	r3, #1
 800fd4a:	d905      	bls.n	800fd58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fd4c:	6839      	ldr	r1, [r7, #0]
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	f000 f96c 	bl	801002c <USBD_CtlError>
    return USBD_FAIL;
 800fd54:	2303      	movs	r3, #3
 800fd56:	e088      	b.n	800fe6a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd5e:	b2db      	uxtb	r3, r3
 800fd60:	2b02      	cmp	r3, #2
 800fd62:	d002      	beq.n	800fd6a <USBD_SetConfig+0x3e>
 800fd64:	2b03      	cmp	r3, #3
 800fd66:	d025      	beq.n	800fdb4 <USBD_SetConfig+0x88>
 800fd68:	e071      	b.n	800fe4e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fd6a:	4b42      	ldr	r3, [pc, #264]	@ (800fe74 <USBD_SetConfig+0x148>)
 800fd6c:	781b      	ldrb	r3, [r3, #0]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d01c      	beq.n	800fdac <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800fd72:	4b40      	ldr	r3, [pc, #256]	@ (800fe74 <USBD_SetConfig+0x148>)
 800fd74:	781b      	ldrb	r3, [r3, #0]
 800fd76:	461a      	mov	r2, r3
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fd7c:	4b3d      	ldr	r3, [pc, #244]	@ (800fe74 <USBD_SetConfig+0x148>)
 800fd7e:	781b      	ldrb	r3, [r3, #0]
 800fd80:	4619      	mov	r1, r3
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f7ff f97f 	bl	800f086 <USBD_SetClassConfig>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fd8c:	7bfb      	ldrb	r3, [r7, #15]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d004      	beq.n	800fd9c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800fd92:	6839      	ldr	r1, [r7, #0]
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f000 f949 	bl	801002c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fd9a:	e065      	b.n	800fe68 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f000 fa10 	bl	80101c2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2203      	movs	r2, #3
 800fda6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fdaa:	e05d      	b.n	800fe68 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f000 fa08 	bl	80101c2 <USBD_CtlSendStatus>
      break;
 800fdb2:	e059      	b.n	800fe68 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fdb4:	4b2f      	ldr	r3, [pc, #188]	@ (800fe74 <USBD_SetConfig+0x148>)
 800fdb6:	781b      	ldrb	r3, [r3, #0]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d112      	bne.n	800fde2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2202      	movs	r2, #2
 800fdc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800fdc4:	4b2b      	ldr	r3, [pc, #172]	@ (800fe74 <USBD_SetConfig+0x148>)
 800fdc6:	781b      	ldrb	r3, [r3, #0]
 800fdc8:	461a      	mov	r2, r3
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fdce:	4b29      	ldr	r3, [pc, #164]	@ (800fe74 <USBD_SetConfig+0x148>)
 800fdd0:	781b      	ldrb	r3, [r3, #0]
 800fdd2:	4619      	mov	r1, r3
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f7ff f972 	bl	800f0be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f000 f9f1 	bl	80101c2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fde0:	e042      	b.n	800fe68 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800fde2:	4b24      	ldr	r3, [pc, #144]	@ (800fe74 <USBD_SetConfig+0x148>)
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	461a      	mov	r2, r3
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	685b      	ldr	r3, [r3, #4]
 800fdec:	429a      	cmp	r2, r3
 800fdee:	d02a      	beq.n	800fe46 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	685b      	ldr	r3, [r3, #4]
 800fdf4:	b2db      	uxtb	r3, r3
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f7ff f960 	bl	800f0be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fdfe:	4b1d      	ldr	r3, [pc, #116]	@ (800fe74 <USBD_SetConfig+0x148>)
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	461a      	mov	r2, r3
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fe08:	4b1a      	ldr	r3, [pc, #104]	@ (800fe74 <USBD_SetConfig+0x148>)
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f7ff f939 	bl	800f086 <USBD_SetClassConfig>
 800fe14:	4603      	mov	r3, r0
 800fe16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fe18:	7bfb      	ldrb	r3, [r7, #15]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d00f      	beq.n	800fe3e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800fe1e:	6839      	ldr	r1, [r7, #0]
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f000 f903 	bl	801002c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	685b      	ldr	r3, [r3, #4]
 800fe2a:	b2db      	uxtb	r3, r3
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	f7ff f945 	bl	800f0be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2202      	movs	r2, #2
 800fe38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fe3c:	e014      	b.n	800fe68 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f000 f9bf 	bl	80101c2 <USBD_CtlSendStatus>
      break;
 800fe44:	e010      	b.n	800fe68 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f000 f9bb 	bl	80101c2 <USBD_CtlSendStatus>
      break;
 800fe4c:	e00c      	b.n	800fe68 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800fe4e:	6839      	ldr	r1, [r7, #0]
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f000 f8eb 	bl	801002c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fe56:	4b07      	ldr	r3, [pc, #28]	@ (800fe74 <USBD_SetConfig+0x148>)
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f7ff f92e 	bl	800f0be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fe62:	2303      	movs	r3, #3
 800fe64:	73fb      	strb	r3, [r7, #15]
      break;
 800fe66:	bf00      	nop
  }

  return ret;
 800fe68:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	3710      	adds	r7, #16
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}
 800fe72:	bf00      	nop
 800fe74:	2000096b 	.word	0x2000096b

0800fe78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	88db      	ldrh	r3, [r3, #6]
 800fe86:	2b01      	cmp	r3, #1
 800fe88:	d004      	beq.n	800fe94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fe8a:	6839      	ldr	r1, [r7, #0]
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f000 f8cd 	bl	801002c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fe92:	e023      	b.n	800fedc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe9a:	b2db      	uxtb	r3, r3
 800fe9c:	2b02      	cmp	r3, #2
 800fe9e:	dc02      	bgt.n	800fea6 <USBD_GetConfig+0x2e>
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	dc03      	bgt.n	800feac <USBD_GetConfig+0x34>
 800fea4:	e015      	b.n	800fed2 <USBD_GetConfig+0x5a>
 800fea6:	2b03      	cmp	r3, #3
 800fea8:	d00b      	beq.n	800fec2 <USBD_GetConfig+0x4a>
 800feaa:	e012      	b.n	800fed2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2200      	movs	r2, #0
 800feb0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	3308      	adds	r3, #8
 800feb6:	2201      	movs	r2, #1
 800feb8:	4619      	mov	r1, r3
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f000 f927 	bl	801010e <USBD_CtlSendData>
        break;
 800fec0:	e00c      	b.n	800fedc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	3304      	adds	r3, #4
 800fec6:	2201      	movs	r2, #1
 800fec8:	4619      	mov	r1, r3
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f000 f91f 	bl	801010e <USBD_CtlSendData>
        break;
 800fed0:	e004      	b.n	800fedc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fed2:	6839      	ldr	r1, [r7, #0]
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f000 f8a9 	bl	801002c <USBD_CtlError>
        break;
 800feda:	bf00      	nop
}
 800fedc:	bf00      	nop
 800fede:	3708      	adds	r7, #8
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fef4:	b2db      	uxtb	r3, r3
 800fef6:	3b01      	subs	r3, #1
 800fef8:	2b02      	cmp	r3, #2
 800fefa:	d81e      	bhi.n	800ff3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	88db      	ldrh	r3, [r3, #6]
 800ff00:	2b02      	cmp	r3, #2
 800ff02:	d004      	beq.n	800ff0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ff04:	6839      	ldr	r1, [r7, #0]
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f000 f890 	bl	801002c <USBD_CtlError>
        break;
 800ff0c:	e01a      	b.n	800ff44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2201      	movs	r2, #1
 800ff12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d005      	beq.n	800ff2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	68db      	ldr	r3, [r3, #12]
 800ff22:	f043 0202 	orr.w	r2, r3, #2
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	330c      	adds	r3, #12
 800ff2e:	2202      	movs	r2, #2
 800ff30:	4619      	mov	r1, r3
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f000 f8eb 	bl	801010e <USBD_CtlSendData>
      break;
 800ff38:	e004      	b.n	800ff44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ff3a:	6839      	ldr	r1, [r7, #0]
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f000 f875 	bl	801002c <USBD_CtlError>
      break;
 800ff42:	bf00      	nop
  }
}
 800ff44:	bf00      	nop
 800ff46:	3708      	adds	r7, #8
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}

0800ff4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	885b      	ldrh	r3, [r3, #2]
 800ff5a:	2b01      	cmp	r3, #1
 800ff5c:	d106      	bne.n	800ff6c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2201      	movs	r2, #1
 800ff62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f000 f92b 	bl	80101c2 <USBD_CtlSendStatus>
  }
}
 800ff6c:	bf00      	nop
 800ff6e:	3708      	adds	r7, #8
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}

0800ff74 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b082      	sub	sp, #8
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	3b01      	subs	r3, #1
 800ff88:	2b02      	cmp	r3, #2
 800ff8a:	d80b      	bhi.n	800ffa4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	885b      	ldrh	r3, [r3, #2]
 800ff90:	2b01      	cmp	r3, #1
 800ff92:	d10c      	bne.n	800ffae <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2200      	movs	r2, #0
 800ff98:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ff9c:	6878      	ldr	r0, [r7, #4]
 800ff9e:	f000 f910 	bl	80101c2 <USBD_CtlSendStatus>
      }
      break;
 800ffa2:	e004      	b.n	800ffae <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ffa4:	6839      	ldr	r1, [r7, #0]
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f000 f840 	bl	801002c <USBD_CtlError>
      break;
 800ffac:	e000      	b.n	800ffb0 <USBD_ClrFeature+0x3c>
      break;
 800ffae:	bf00      	nop
  }
}
 800ffb0:	bf00      	nop
 800ffb2:	3708      	adds	r7, #8
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}

0800ffb8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b084      	sub	sp, #16
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
 800ffc0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	781a      	ldrb	r2, [r3, #0]
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	3301      	adds	r3, #1
 800ffd2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	781a      	ldrb	r2, [r3, #0]
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	3301      	adds	r3, #1
 800ffe0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ffe2:	68f8      	ldr	r0, [r7, #12]
 800ffe4:	f7ff fa7f 	bl	800f4e6 <SWAPBYTE>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	461a      	mov	r2, r3
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	3301      	adds	r3, #1
 800fff4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	3301      	adds	r3, #1
 800fffa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fffc:	68f8      	ldr	r0, [r7, #12]
 800fffe:	f7ff fa72 	bl	800f4e6 <SWAPBYTE>
 8010002:	4603      	mov	r3, r0
 8010004:	461a      	mov	r2, r3
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	3301      	adds	r3, #1
 801000e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	3301      	adds	r3, #1
 8010014:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010016:	68f8      	ldr	r0, [r7, #12]
 8010018:	f7ff fa65 	bl	800f4e6 <SWAPBYTE>
 801001c:	4603      	mov	r3, r0
 801001e:	461a      	mov	r2, r3
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	80da      	strh	r2, [r3, #6]
}
 8010024:	bf00      	nop
 8010026:	3710      	adds	r7, #16
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}

0801002c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b082      	sub	sp, #8
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010036:	2180      	movs	r1, #128	@ 0x80
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f000 fc3f 	bl	80108bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801003e:	2100      	movs	r1, #0
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f000 fc3b 	bl	80108bc <USBD_LL_StallEP>
}
 8010046:	bf00      	nop
 8010048:	3708      	adds	r7, #8
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}

0801004e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801004e:	b580      	push	{r7, lr}
 8010050:	b086      	sub	sp, #24
 8010052:	af00      	add	r7, sp, #0
 8010054:	60f8      	str	r0, [r7, #12]
 8010056:	60b9      	str	r1, [r7, #8]
 8010058:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801005a:	2300      	movs	r3, #0
 801005c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d036      	beq.n	80100d2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010068:	6938      	ldr	r0, [r7, #16]
 801006a:	f000 f836 	bl	80100da <USBD_GetLen>
 801006e:	4603      	mov	r3, r0
 8010070:	3301      	adds	r3, #1
 8010072:	b29b      	uxth	r3, r3
 8010074:	005b      	lsls	r3, r3, #1
 8010076:	b29a      	uxth	r2, r3
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801007c:	7dfb      	ldrb	r3, [r7, #23]
 801007e:	68ba      	ldr	r2, [r7, #8]
 8010080:	4413      	add	r3, r2
 8010082:	687a      	ldr	r2, [r7, #4]
 8010084:	7812      	ldrb	r2, [r2, #0]
 8010086:	701a      	strb	r2, [r3, #0]
  idx++;
 8010088:	7dfb      	ldrb	r3, [r7, #23]
 801008a:	3301      	adds	r3, #1
 801008c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801008e:	7dfb      	ldrb	r3, [r7, #23]
 8010090:	68ba      	ldr	r2, [r7, #8]
 8010092:	4413      	add	r3, r2
 8010094:	2203      	movs	r2, #3
 8010096:	701a      	strb	r2, [r3, #0]
  idx++;
 8010098:	7dfb      	ldrb	r3, [r7, #23]
 801009a:	3301      	adds	r3, #1
 801009c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801009e:	e013      	b.n	80100c8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80100a0:	7dfb      	ldrb	r3, [r7, #23]
 80100a2:	68ba      	ldr	r2, [r7, #8]
 80100a4:	4413      	add	r3, r2
 80100a6:	693a      	ldr	r2, [r7, #16]
 80100a8:	7812      	ldrb	r2, [r2, #0]
 80100aa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80100ac:	693b      	ldr	r3, [r7, #16]
 80100ae:	3301      	adds	r3, #1
 80100b0:	613b      	str	r3, [r7, #16]
    idx++;
 80100b2:	7dfb      	ldrb	r3, [r7, #23]
 80100b4:	3301      	adds	r3, #1
 80100b6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80100b8:	7dfb      	ldrb	r3, [r7, #23]
 80100ba:	68ba      	ldr	r2, [r7, #8]
 80100bc:	4413      	add	r3, r2
 80100be:	2200      	movs	r2, #0
 80100c0:	701a      	strb	r2, [r3, #0]
    idx++;
 80100c2:	7dfb      	ldrb	r3, [r7, #23]
 80100c4:	3301      	adds	r3, #1
 80100c6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	781b      	ldrb	r3, [r3, #0]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d1e7      	bne.n	80100a0 <USBD_GetString+0x52>
 80100d0:	e000      	b.n	80100d4 <USBD_GetString+0x86>
    return;
 80100d2:	bf00      	nop
  }
}
 80100d4:	3718      	adds	r7, #24
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}

080100da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80100da:	b480      	push	{r7}
 80100dc:	b085      	sub	sp, #20
 80100de:	af00      	add	r7, sp, #0
 80100e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80100e2:	2300      	movs	r3, #0
 80100e4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80100ea:	e005      	b.n	80100f8 <USBD_GetLen+0x1e>
  {
    len++;
 80100ec:	7bfb      	ldrb	r3, [r7, #15]
 80100ee:	3301      	adds	r3, #1
 80100f0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	3301      	adds	r3, #1
 80100f6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d1f5      	bne.n	80100ec <USBD_GetLen+0x12>
  }

  return len;
 8010100:	7bfb      	ldrb	r3, [r7, #15]
}
 8010102:	4618      	mov	r0, r3
 8010104:	3714      	adds	r7, #20
 8010106:	46bd      	mov	sp, r7
 8010108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010c:	4770      	bx	lr

0801010e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801010e:	b580      	push	{r7, lr}
 8010110:	b084      	sub	sp, #16
 8010112:	af00      	add	r7, sp, #0
 8010114:	60f8      	str	r0, [r7, #12]
 8010116:	60b9      	str	r1, [r7, #8]
 8010118:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	2202      	movs	r2, #2
 801011e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	687a      	ldr	r2, [r7, #4]
 8010126:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	687a      	ldr	r2, [r7, #4]
 801012c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	68ba      	ldr	r2, [r7, #8]
 8010132:	2100      	movs	r1, #0
 8010134:	68f8      	ldr	r0, [r7, #12]
 8010136:	f000 fc4a 	bl	80109ce <USBD_LL_Transmit>

  return USBD_OK;
 801013a:	2300      	movs	r3, #0
}
 801013c:	4618      	mov	r0, r3
 801013e:	3710      	adds	r7, #16
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}

08010144 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b084      	sub	sp, #16
 8010148:	af00      	add	r7, sp, #0
 801014a:	60f8      	str	r0, [r7, #12]
 801014c:	60b9      	str	r1, [r7, #8]
 801014e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	68ba      	ldr	r2, [r7, #8]
 8010154:	2100      	movs	r1, #0
 8010156:	68f8      	ldr	r0, [r7, #12]
 8010158:	f000 fc39 	bl	80109ce <USBD_LL_Transmit>

  return USBD_OK;
 801015c:	2300      	movs	r3, #0
}
 801015e:	4618      	mov	r0, r3
 8010160:	3710      	adds	r7, #16
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}

08010166 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010166:	b580      	push	{r7, lr}
 8010168:	b084      	sub	sp, #16
 801016a:	af00      	add	r7, sp, #0
 801016c:	60f8      	str	r0, [r7, #12]
 801016e:	60b9      	str	r1, [r7, #8]
 8010170:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	2203      	movs	r2, #3
 8010176:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	687a      	ldr	r2, [r7, #4]
 801017e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	68ba      	ldr	r2, [r7, #8]
 801018e:	2100      	movs	r1, #0
 8010190:	68f8      	ldr	r0, [r7, #12]
 8010192:	f000 fc3d 	bl	8010a10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010196:	2300      	movs	r3, #0
}
 8010198:	4618      	mov	r0, r3
 801019a:	3710      	adds	r7, #16
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}

080101a0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b084      	sub	sp, #16
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	60f8      	str	r0, [r7, #12]
 80101a8:	60b9      	str	r1, [r7, #8]
 80101aa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	68ba      	ldr	r2, [r7, #8]
 80101b0:	2100      	movs	r1, #0
 80101b2:	68f8      	ldr	r0, [r7, #12]
 80101b4:	f000 fc2c 	bl	8010a10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80101b8:	2300      	movs	r3, #0
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3710      	adds	r7, #16
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}

080101c2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80101c2:	b580      	push	{r7, lr}
 80101c4:	b082      	sub	sp, #8
 80101c6:	af00      	add	r7, sp, #0
 80101c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2204      	movs	r2, #4
 80101ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80101d2:	2300      	movs	r3, #0
 80101d4:	2200      	movs	r2, #0
 80101d6:	2100      	movs	r1, #0
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f000 fbf8 	bl	80109ce <USBD_LL_Transmit>

  return USBD_OK;
 80101de:	2300      	movs	r3, #0
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3708      	adds	r7, #8
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}

080101e8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2205      	movs	r2, #5
 80101f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80101f8:	2300      	movs	r3, #0
 80101fa:	2200      	movs	r2, #0
 80101fc:	2100      	movs	r1, #0
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f000 fc06 	bl	8010a10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010204:	2300      	movs	r3, #0
}
 8010206:	4618      	mov	r0, r3
 8010208:	3708      	adds	r7, #8
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}
	...

08010210 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &DFU_Desc, DEVICE_FS) != USBD_OK) {
 8010214:	2200      	movs	r2, #0
 8010216:	4912      	ldr	r1, [pc, #72]	@ (8010260 <MX_USB_Device_Init+0x50>)
 8010218:	4812      	ldr	r0, [pc, #72]	@ (8010264 <MX_USB_Device_Init+0x54>)
 801021a:	f7fe feab 	bl	800ef74 <USBD_Init>
 801021e:	4603      	mov	r3, r0
 8010220:	2b00      	cmp	r3, #0
 8010222:	d001      	beq.n	8010228 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8010224:	f7f1 fe6e 	bl	8001f04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 8010228:	490f      	ldr	r1, [pc, #60]	@ (8010268 <MX_USB_Device_Init+0x58>)
 801022a:	480e      	ldr	r0, [pc, #56]	@ (8010264 <MX_USB_Device_Init+0x54>)
 801022c:	f7fe fed2 	bl	800efd4 <USBD_RegisterClass>
 8010230:	4603      	mov	r3, r0
 8010232:	2b00      	cmp	r3, #0
 8010234:	d001      	beq.n	801023a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8010236:	f7f1 fe65 	bl	8001f04 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_Flash_fops) != USBD_OK) {
 801023a:	490c      	ldr	r1, [pc, #48]	@ (801026c <MX_USB_Device_Init+0x5c>)
 801023c:	4809      	ldr	r0, [pc, #36]	@ (8010264 <MX_USB_Device_Init+0x54>)
 801023e:	f7fe fb17 	bl	800e870 <USBD_DFU_RegisterMedia>
 8010242:	4603      	mov	r3, r0
 8010244:	2b00      	cmp	r3, #0
 8010246:	d001      	beq.n	801024c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8010248:	f7f1 fe5c 	bl	8001f04 <Error_Handler>
  }
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  if (USBD_LL_BatterryCharging(&hUsbDeviceFS) != USBD_OK) {
 801024c:	4805      	ldr	r0, [pc, #20]	@ (8010264 <MX_USB_Device_Init+0x54>)
 801024e:	f000 fc01 	bl	8010a54 <USBD_LL_BatterryCharging>
 8010252:	4603      	mov	r3, r0
 8010254:	2b00      	cmp	r3, #0
 8010256:	d001      	beq.n	801025c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8010258:	f7f1 fe54 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801025c:	bf00      	nop
 801025e:	bd80      	pop	{r7, pc}
 8010260:	20000070 	.word	0x20000070
 8010264:	2000096c 	.word	0x2000096c
 8010268:	2000000c 	.word	0x2000000c
 801026c:	200000c4 	.word	0x200000c4

08010270 <USBD_DFU_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010270:	b480      	push	{r7}
 8010272:	b083      	sub	sp, #12
 8010274:	af00      	add	r7, sp, #0
 8010276:	4603      	mov	r3, r0
 8010278:	6039      	str	r1, [r7, #0]
 801027a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DFU_DeviceDesc);
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	2212      	movs	r2, #18
 8010280:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceDesc;
 8010282:	4b03      	ldr	r3, [pc, #12]	@ (8010290 <USBD_DFU_DeviceDescriptor+0x20>)
}
 8010284:	4618      	mov	r0, r3
 8010286:	370c      	adds	r7, #12
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr
 8010290:	20000090 	.word	0x20000090

08010294 <USBD_DFU_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010294:	b480      	push	{r7}
 8010296:	b083      	sub	sp, #12
 8010298:	af00      	add	r7, sp, #0
 801029a:	4603      	mov	r3, r0
 801029c:	6039      	str	r1, [r7, #0]
 801029e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	2204      	movs	r2, #4
 80102a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80102a6:	4b03      	ldr	r3, [pc, #12]	@ (80102b4 <USBD_DFU_LangIDStrDescriptor+0x20>)
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	370c      	adds	r7, #12
 80102ac:	46bd      	mov	sp, r7
 80102ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b2:	4770      	bx	lr
 80102b4:	200000a4 	.word	0x200000a4

080102b8 <USBD_DFU_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b082      	sub	sp, #8
 80102bc:	af00      	add	r7, sp, #0
 80102be:	4603      	mov	r3, r0
 80102c0:	6039      	str	r1, [r7, #0]
 80102c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80102c4:	79fb      	ldrb	r3, [r7, #7]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d105      	bne.n	80102d6 <USBD_DFU_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80102ca:	683a      	ldr	r2, [r7, #0]
 80102cc:	4907      	ldr	r1, [pc, #28]	@ (80102ec <USBD_DFU_ProductStrDescriptor+0x34>)
 80102ce:	4808      	ldr	r0, [pc, #32]	@ (80102f0 <USBD_DFU_ProductStrDescriptor+0x38>)
 80102d0:	f7ff febd 	bl	801004e <USBD_GetString>
 80102d4:	e004      	b.n	80102e0 <USBD_DFU_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80102d6:	683a      	ldr	r2, [r7, #0]
 80102d8:	4904      	ldr	r1, [pc, #16]	@ (80102ec <USBD_DFU_ProductStrDescriptor+0x34>)
 80102da:	4805      	ldr	r0, [pc, #20]	@ (80102f0 <USBD_DFU_ProductStrDescriptor+0x38>)
 80102dc:	f7ff feb7 	bl	801004e <USBD_GetString>
  }
  return USBD_StrDesc;
 80102e0:	4b02      	ldr	r3, [pc, #8]	@ (80102ec <USBD_DFU_ProductStrDescriptor+0x34>)
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3708      	adds	r7, #8
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}
 80102ea:	bf00      	nop
 80102ec:	20000c3c 	.word	0x20000c3c
 80102f0:	0801366c 	.word	0x0801366c

080102f4 <USBD_DFU_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	4603      	mov	r3, r0
 80102fc:	6039      	str	r1, [r7, #0]
 80102fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010300:	683a      	ldr	r2, [r7, #0]
 8010302:	4904      	ldr	r1, [pc, #16]	@ (8010314 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
 8010304:	4804      	ldr	r0, [pc, #16]	@ (8010318 <USBD_DFU_ManufacturerStrDescriptor+0x24>)
 8010306:	f7ff fea2 	bl	801004e <USBD_GetString>
  return USBD_StrDesc;
 801030a:	4b02      	ldr	r3, [pc, #8]	@ (8010314 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
}
 801030c:	4618      	mov	r0, r3
 801030e:	3708      	adds	r7, #8
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}
 8010314:	20000c3c 	.word	0x20000c3c
 8010318:	0801368c 	.word	0x0801368c

0801031c <USBD_DFU_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b082      	sub	sp, #8
 8010320:	af00      	add	r7, sp, #0
 8010322:	4603      	mov	r3, r0
 8010324:	6039      	str	r1, [r7, #0]
 8010326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	221a      	movs	r2, #26
 801032c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801032e:	f000 f843 	bl	80103b8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_DFU_SerialStrDescriptor */

  /* USER CODE END USBD_DFU_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8010332:	4b02      	ldr	r3, [pc, #8]	@ (801033c <USBD_DFU_SerialStrDescriptor+0x20>)
}
 8010334:	4618      	mov	r0, r3
 8010336:	3708      	adds	r7, #8
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}
 801033c:	200000a8 	.word	0x200000a8

08010340 <USBD_DFU_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b082      	sub	sp, #8
 8010344:	af00      	add	r7, sp, #0
 8010346:	4603      	mov	r3, r0
 8010348:	6039      	str	r1, [r7, #0]
 801034a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801034c:	79fb      	ldrb	r3, [r7, #7]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d105      	bne.n	801035e <USBD_DFU_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010352:	683a      	ldr	r2, [r7, #0]
 8010354:	4907      	ldr	r1, [pc, #28]	@ (8010374 <USBD_DFU_ConfigStrDescriptor+0x34>)
 8010356:	4808      	ldr	r0, [pc, #32]	@ (8010378 <USBD_DFU_ConfigStrDescriptor+0x38>)
 8010358:	f7ff fe79 	bl	801004e <USBD_GetString>
 801035c:	e004      	b.n	8010368 <USBD_DFU_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801035e:	683a      	ldr	r2, [r7, #0]
 8010360:	4904      	ldr	r1, [pc, #16]	@ (8010374 <USBD_DFU_ConfigStrDescriptor+0x34>)
 8010362:	4805      	ldr	r0, [pc, #20]	@ (8010378 <USBD_DFU_ConfigStrDescriptor+0x38>)
 8010364:	f7ff fe73 	bl	801004e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010368:	4b02      	ldr	r3, [pc, #8]	@ (8010374 <USBD_DFU_ConfigStrDescriptor+0x34>)
}
 801036a:	4618      	mov	r0, r3
 801036c:	3708      	adds	r7, #8
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}
 8010372:	bf00      	nop
 8010374:	20000c3c 	.word	0x20000c3c
 8010378:	080136a0 	.word	0x080136a0

0801037c <USBD_DFU_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0
 8010382:	4603      	mov	r3, r0
 8010384:	6039      	str	r1, [r7, #0]
 8010386:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010388:	79fb      	ldrb	r3, [r7, #7]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d105      	bne.n	801039a <USBD_DFU_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801038e:	683a      	ldr	r2, [r7, #0]
 8010390:	4907      	ldr	r1, [pc, #28]	@ (80103b0 <USBD_DFU_InterfaceStrDescriptor+0x34>)
 8010392:	4808      	ldr	r0, [pc, #32]	@ (80103b4 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 8010394:	f7ff fe5b 	bl	801004e <USBD_GetString>
 8010398:	e004      	b.n	80103a4 <USBD_DFU_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801039a:	683a      	ldr	r2, [r7, #0]
 801039c:	4904      	ldr	r1, [pc, #16]	@ (80103b0 <USBD_DFU_InterfaceStrDescriptor+0x34>)
 801039e:	4805      	ldr	r0, [pc, #20]	@ (80103b4 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 80103a0:	f7ff fe55 	bl	801004e <USBD_GetString>
  }
  return USBD_StrDesc;
 80103a4:	4b02      	ldr	r3, [pc, #8]	@ (80103b0 <USBD_DFU_InterfaceStrDescriptor+0x34>)
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3708      	adds	r7, #8
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
 80103ae:	bf00      	nop
 80103b0:	20000c3c 	.word	0x20000c3c
 80103b4:	080136ac 	.word	0x080136ac

080103b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b084      	sub	sp, #16
 80103bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80103be:	4b0f      	ldr	r3, [pc, #60]	@ (80103fc <Get_SerialNum+0x44>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80103c4:	4b0e      	ldr	r3, [pc, #56]	@ (8010400 <Get_SerialNum+0x48>)
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80103ca:	4b0e      	ldr	r3, [pc, #56]	@ (8010404 <Get_SerialNum+0x4c>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80103d0:	68fa      	ldr	r2, [r7, #12]
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	4413      	add	r3, r2
 80103d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d009      	beq.n	80103f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80103de:	2208      	movs	r2, #8
 80103e0:	4909      	ldr	r1, [pc, #36]	@ (8010408 <Get_SerialNum+0x50>)
 80103e2:	68f8      	ldr	r0, [r7, #12]
 80103e4:	f000 f814 	bl	8010410 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80103e8:	2204      	movs	r2, #4
 80103ea:	4908      	ldr	r1, [pc, #32]	@ (801040c <Get_SerialNum+0x54>)
 80103ec:	68b8      	ldr	r0, [r7, #8]
 80103ee:	f000 f80f 	bl	8010410 <IntToUnicode>
  }
}
 80103f2:	bf00      	nop
 80103f4:	3710      	adds	r7, #16
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}
 80103fa:	bf00      	nop
 80103fc:	1fff7590 	.word	0x1fff7590
 8010400:	1fff7594 	.word	0x1fff7594
 8010404:	1fff7598 	.word	0x1fff7598
 8010408:	200000aa 	.word	0x200000aa
 801040c:	200000ba 	.word	0x200000ba

08010410 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010410:	b480      	push	{r7}
 8010412:	b087      	sub	sp, #28
 8010414:	af00      	add	r7, sp, #0
 8010416:	60f8      	str	r0, [r7, #12]
 8010418:	60b9      	str	r1, [r7, #8]
 801041a:	4613      	mov	r3, r2
 801041c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801041e:	2300      	movs	r3, #0
 8010420:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010422:	2300      	movs	r3, #0
 8010424:	75fb      	strb	r3, [r7, #23]
 8010426:	e027      	b.n	8010478 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	0f1b      	lsrs	r3, r3, #28
 801042c:	2b09      	cmp	r3, #9
 801042e:	d80b      	bhi.n	8010448 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	0f1b      	lsrs	r3, r3, #28
 8010434:	b2da      	uxtb	r2, r3
 8010436:	7dfb      	ldrb	r3, [r7, #23]
 8010438:	005b      	lsls	r3, r3, #1
 801043a:	4619      	mov	r1, r3
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	440b      	add	r3, r1
 8010440:	3230      	adds	r2, #48	@ 0x30
 8010442:	b2d2      	uxtb	r2, r2
 8010444:	701a      	strb	r2, [r3, #0]
 8010446:	e00a      	b.n	801045e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	0f1b      	lsrs	r3, r3, #28
 801044c:	b2da      	uxtb	r2, r3
 801044e:	7dfb      	ldrb	r3, [r7, #23]
 8010450:	005b      	lsls	r3, r3, #1
 8010452:	4619      	mov	r1, r3
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	440b      	add	r3, r1
 8010458:	3237      	adds	r2, #55	@ 0x37
 801045a:	b2d2      	uxtb	r2, r2
 801045c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	011b      	lsls	r3, r3, #4
 8010462:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010464:	7dfb      	ldrb	r3, [r7, #23]
 8010466:	005b      	lsls	r3, r3, #1
 8010468:	3301      	adds	r3, #1
 801046a:	68ba      	ldr	r2, [r7, #8]
 801046c:	4413      	add	r3, r2
 801046e:	2200      	movs	r2, #0
 8010470:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010472:	7dfb      	ldrb	r3, [r7, #23]
 8010474:	3301      	adds	r3, #1
 8010476:	75fb      	strb	r3, [r7, #23]
 8010478:	7dfa      	ldrb	r2, [r7, #23]
 801047a:	79fb      	ldrb	r3, [r7, #7]
 801047c:	429a      	cmp	r2, r3
 801047e:	d3d3      	bcc.n	8010428 <IntToUnicode+0x18>
  }
}
 8010480:	bf00      	nop
 8010482:	bf00      	nop
 8010484:	371c      	adds	r7, #28
 8010486:	46bd      	mov	sp, r7
 8010488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048c:	4770      	bx	lr

0801048e <FLASH_If_Init>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Init(void)
{
 801048e:	b480      	push	{r7}
 8010490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8010492:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8010494:	4618      	mov	r0, r3
 8010496:	46bd      	mov	sp, r7
 8010498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049c:	4770      	bx	lr

0801049e <FLASH_If_DeInit>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t FLASH_If_DeInit(void)
{
 801049e:	b480      	push	{r7}
 80104a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 80104a2:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	46bd      	mov	sp, r7
 80104a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ac:	4770      	bx	lr

080104ae <FLASH_If_Erase>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Erase(uint32_t Add)
{
 80104ae:	b480      	push	{r7}
 80104b0:	b083      	sub	sp, #12
 80104b2:	af00      	add	r7, sp, #0
 80104b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 80104b6:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	370c      	adds	r7, #12
 80104bc:	46bd      	mov	sp, r7
 80104be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c2:	4770      	bx	lr

080104c4 <FLASH_If_Write>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80104c4:	b480      	push	{r7}
 80104c6:	b085      	sub	sp, #20
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	60f8      	str	r0, [r7, #12]
 80104cc:	60b9      	str	r1, [r7, #8]
 80104ce:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 80104d0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80104d2:	4618      	mov	r0, r3
 80104d4:	3714      	adds	r7, #20
 80104d6:	46bd      	mov	sp, r7
 80104d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104dc:	4770      	bx	lr

080104de <FLASH_If_Read>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *FLASH_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80104de:	b480      	push	{r7}
 80104e0:	b085      	sub	sp, #20
 80104e2:	af00      	add	r7, sp, #0
 80104e4:	60f8      	str	r0, [r7, #12]
 80104e6:	60b9      	str	r1, [r7, #8]
 80104e8:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(FLASH_BASE);
 80104ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  /* USER CODE END 4 */
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3714      	adds	r7, #20
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr

080104fa <FLASH_If_GetStatus>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t FLASH_If_GetStatus(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 80104fa:	b480      	push	{r7}
 80104fc:	b085      	sub	sp, #20
 80104fe:	af00      	add	r7, sp, #0
 8010500:	60f8      	str	r0, [r7, #12]
 8010502:	460b      	mov	r3, r1
 8010504:	607a      	str	r2, [r7, #4]
 8010506:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8010508:	7afb      	ldrb	r3, [r7, #11]
 801050a:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 801050c:	bf00      	nop
  }
  return (USBD_OK);
 801050e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010510:	4618      	mov	r0, r3
 8010512:	3714      	adds	r7, #20
 8010514:	46bd      	mov	sp, r7
 8010516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051a:	4770      	bx	lr

0801051c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b098      	sub	sp, #96	@ 0x60
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010524:	f107 0310 	add.w	r3, r7, #16
 8010528:	2250      	movs	r2, #80	@ 0x50
 801052a:	2100      	movs	r1, #0
 801052c:	4618      	mov	r0, r3
 801052e:	f001 f994 	bl	801185a <memset>
  if(pcdHandle->Instance==USB)
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	4a15      	ldr	r2, [pc, #84]	@ (801058c <HAL_PCD_MspInit+0x70>)
 8010538:	4293      	cmp	r3, r2
 801053a:	d122      	bne.n	8010582 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801053c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010540:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010542:	2300      	movs	r3, #0
 8010544:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010546:	f107 0310 	add.w	r3, r7, #16
 801054a:	4618      	mov	r0, r3
 801054c:	f7f8 f82a 	bl	80085a4 <HAL_RCCEx_PeriphCLKConfig>
 8010550:	4603      	mov	r3, r0
 8010552:	2b00      	cmp	r3, #0
 8010554:	d001      	beq.n	801055a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8010556:	f7f1 fcd5 	bl	8001f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801055a:	4b0d      	ldr	r3, [pc, #52]	@ (8010590 <HAL_PCD_MspInit+0x74>)
 801055c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801055e:	4a0c      	ldr	r2, [pc, #48]	@ (8010590 <HAL_PCD_MspInit+0x74>)
 8010560:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010564:	6593      	str	r3, [r2, #88]	@ 0x58
 8010566:	4b0a      	ldr	r3, [pc, #40]	@ (8010590 <HAL_PCD_MspInit+0x74>)
 8010568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801056a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801056e:	60fb      	str	r3, [r7, #12]
 8010570:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8010572:	2200      	movs	r2, #0
 8010574:	2100      	movs	r1, #0
 8010576:	2014      	movs	r0, #20
 8010578:	f7f4 fd5a 	bl	8005030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801057c:	2014      	movs	r0, #20
 801057e:	f7f4 fd71 	bl	8005064 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8010582:	bf00      	nop
 8010584:	3760      	adds	r7, #96	@ 0x60
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
 801058a:	bf00      	nop
 801058c:	40005c00 	.word	0x40005c00
 8010590:	40021000 	.word	0x40021000

08010594 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b082      	sub	sp, #8
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80105a8:	4619      	mov	r1, r3
 80105aa:	4610      	mov	r0, r2
 80105ac:	f7fe fd9f 	bl	800f0ee <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80105b0:	bf00      	nop
 80105b2:	3708      	adds	r7, #8
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}

080105b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b082      	sub	sp, #8
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
 80105c0:	460b      	mov	r3, r1
 80105c2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80105ca:	78fa      	ldrb	r2, [r7, #3]
 80105cc:	6879      	ldr	r1, [r7, #4]
 80105ce:	4613      	mov	r3, r2
 80105d0:	009b      	lsls	r3, r3, #2
 80105d2:	4413      	add	r3, r2
 80105d4:	00db      	lsls	r3, r3, #3
 80105d6:	440b      	add	r3, r1
 80105d8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80105dc:	681a      	ldr	r2, [r3, #0]
 80105de:	78fb      	ldrb	r3, [r7, #3]
 80105e0:	4619      	mov	r1, r3
 80105e2:	f7fe fdd9 	bl	800f198 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80105e6:	bf00      	nop
 80105e8:	3708      	adds	r7, #8
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}

080105ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105ee:	b580      	push	{r7, lr}
 80105f0:	b082      	sub	sp, #8
 80105f2:	af00      	add	r7, sp, #0
 80105f4:	6078      	str	r0, [r7, #4]
 80105f6:	460b      	mov	r3, r1
 80105f8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010600:	78fa      	ldrb	r2, [r7, #3]
 8010602:	6879      	ldr	r1, [r7, #4]
 8010604:	4613      	mov	r3, r2
 8010606:	009b      	lsls	r3, r3, #2
 8010608:	4413      	add	r3, r2
 801060a:	00db      	lsls	r3, r3, #3
 801060c:	440b      	add	r3, r1
 801060e:	3324      	adds	r3, #36	@ 0x24
 8010610:	681a      	ldr	r2, [r3, #0]
 8010612:	78fb      	ldrb	r3, [r7, #3]
 8010614:	4619      	mov	r1, r3
 8010616:	f7fe fe22 	bl	800f25e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801061a:	bf00      	nop
 801061c:	3708      	adds	r7, #8
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}

08010622 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010622:	b580      	push	{r7, lr}
 8010624:	b082      	sub	sp, #8
 8010626:	af00      	add	r7, sp, #0
 8010628:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010630:	4618      	mov	r0, r3
 8010632:	f7fe ff36 	bl	800f4a2 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8010636:	bf00      	nop
 8010638:	3708      	adds	r7, #8
 801063a:	46bd      	mov	sp, r7
 801063c:	bd80      	pop	{r7, pc}

0801063e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801063e:	b580      	push	{r7, lr}
 8010640:	b084      	sub	sp, #16
 8010642:	af00      	add	r7, sp, #0
 8010644:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010646:	2301      	movs	r3, #1
 8010648:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	795b      	ldrb	r3, [r3, #5]
 801064e:	2b02      	cmp	r3, #2
 8010650:	d001      	beq.n	8010656 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010652:	f7f1 fc57 	bl	8001f04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801065c:	7bfa      	ldrb	r2, [r7, #15]
 801065e:	4611      	mov	r1, r2
 8010660:	4618      	mov	r0, r3
 8010662:	f7fe fee0 	bl	800f426 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801066c:	4618      	mov	r0, r3
 801066e:	f7fe fe8c 	bl	800f38a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8010672:	bf00      	nop
 8010674:	3710      	adds	r7, #16
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}
	...

0801067c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b082      	sub	sp, #8
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801068a:	4618      	mov	r0, r3
 801068c:	f7fe fedb 	bl	800f446 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	7a5b      	ldrb	r3, [r3, #9]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d005      	beq.n	80106a4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010698:	4b04      	ldr	r3, [pc, #16]	@ (80106ac <HAL_PCD_SuspendCallback+0x30>)
 801069a:	691b      	ldr	r3, [r3, #16]
 801069c:	4a03      	ldr	r2, [pc, #12]	@ (80106ac <HAL_PCD_SuspendCallback+0x30>)
 801069e:	f043 0306 	orr.w	r3, r3, #6
 80106a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80106a4:	bf00      	nop
 80106a6:	3708      	adds	r7, #8
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}
 80106ac:	e000ed00 	.word	0xe000ed00

080106b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b082      	sub	sp, #8
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	7a5b      	ldrb	r3, [r3, #9]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d007      	beq.n	80106d0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80106c0:	4b08      	ldr	r3, [pc, #32]	@ (80106e4 <HAL_PCD_ResumeCallback+0x34>)
 80106c2:	691b      	ldr	r3, [r3, #16]
 80106c4:	4a07      	ldr	r2, [pc, #28]	@ (80106e4 <HAL_PCD_ResumeCallback+0x34>)
 80106c6:	f023 0306 	bic.w	r3, r3, #6
 80106ca:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80106cc:	f000 fa32 	bl	8010b34 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80106d6:	4618      	mov	r0, r3
 80106d8:	f7fe fecb 	bl	800f472 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80106dc:	bf00      	nop
 80106de:	3708      	adds	r7, #8
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}
 80106e4:	e000ed00 	.word	0xe000ed00

080106e8 <HAL_PCDEx_BCD_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_BCDCallback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
#else
void HAL_PCDEx_BCD_Callback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b082      	sub	sp, #8
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	460b      	mov	r3, r1
 80106f2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCDEx_BCD_Callback_PreTreatment */

  /* USER CODE END HAL_PCDEx_BCD_Callback_PreTreatment */
  switch(msg)
 80106f4:	78fb      	ldrb	r3, [r7, #3]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d026      	beq.n	8010748 <HAL_PCDEx_BCD_Callback+0x60>
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	db34      	blt.n	8010768 <HAL_PCDEx_BCD_Callback+0x80>
 80106fe:	2bff      	cmp	r3, #255	@ 0xff
 8010700:	dc32      	bgt.n	8010768 <HAL_PCDEx_BCD_Callback+0x80>
 8010702:	2bfb      	cmp	r3, #251	@ 0xfb
 8010704:	db30      	blt.n	8010768 <HAL_PCDEx_BCD_Callback+0x80>
 8010706:	3bfb      	subs	r3, #251	@ 0xfb
 8010708:	2b04      	cmp	r3, #4
 801070a:	d82d      	bhi.n	8010768 <HAL_PCDEx_BCD_Callback+0x80>
 801070c:	a201      	add	r2, pc, #4	@ (adr r2, 8010714 <HAL_PCDEx_BCD_Callback+0x2c>)
 801070e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010712:	bf00      	nop
 8010714:	08010741 	.word	0x08010741
 8010718:	08010739 	.word	0x08010739
 801071c:	08010731 	.word	0x08010731
 8010720:	08010729 	.word	0x08010729
 8010724:	08010763 	.word	0x08010763
  {
    case PCD_BCD_CONTACT_DETECTION:
      USBD_BCD_PortState = USB_BCD_CONTACT_DETECTION;
 8010728:	4b12      	ldr	r3, [pc, #72]	@ (8010774 <HAL_PCDEx_BCD_Callback+0x8c>)
 801072a:	22fe      	movs	r2, #254	@ 0xfe
 801072c:	701a      	strb	r2, [r3, #0]
    break;
 801072e:	e01c      	b.n	801076a <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_STD_DOWNSTREAM_PORT:
      USBD_BCD_PortState = USB_BCD_STD_DOWNSTREAM_PORT;
 8010730:	4b10      	ldr	r3, [pc, #64]	@ (8010774 <HAL_PCDEx_BCD_Callback+0x8c>)
 8010732:	22fd      	movs	r2, #253	@ 0xfd
 8010734:	701a      	strb	r2, [r3, #0]
    break;
 8010736:	e018      	b.n	801076a <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_CHARGING_DOWNSTREAM_PORT:
      USBD_BCD_PortState = USB_BCD_CHARGING_DOWNSTREAM_PORT;
 8010738:	4b0e      	ldr	r3, [pc, #56]	@ (8010774 <HAL_PCDEx_BCD_Callback+0x8c>)
 801073a:	22fc      	movs	r2, #252	@ 0xfc
 801073c:	701a      	strb	r2, [r3, #0]
    break;
 801073e:	e014      	b.n	801076a <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_DEDICATED_CHARGING_PORT:
      USBD_BCD_PortState = USB_BCD_DEDICATED_CHARGING_PORT;
 8010740:	4b0c      	ldr	r3, [pc, #48]	@ (8010774 <HAL_PCDEx_BCD_Callback+0x8c>)
 8010742:	22fb      	movs	r2, #251	@ 0xfb
 8010744:	701a      	strb	r2, [r3, #0]
    break;
 8010746:	e010      	b.n	801076a <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_DISCOVERY_COMPLETED:
      HAL_Delay(20);
 8010748:	2014      	movs	r0, #20
 801074a:	f7f3 fa83 	bl	8003c54 <HAL_Delay>
      /* Start USB */
      USBD_Start(hpcd->pData);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010754:	4618      	mov	r0, r3
 8010756:	f7fe fc64 	bl	800f022 <USBD_Start>
      USBD_BCD_PortState = USB_BCD_DISCOVERY_COMPLETED;
 801075a:	4b06      	ldr	r3, [pc, #24]	@ (8010774 <HAL_PCDEx_BCD_Callback+0x8c>)
 801075c:	22fa      	movs	r2, #250	@ 0xfa
 801075e:	701a      	strb	r2, [r3, #0]
    break;
 8010760:	e003      	b.n	801076a <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_ERROR:
      Error_Handler();
 8010762:	f7f1 fbcf 	bl	8001f04 <Error_Handler>
    break;
 8010766:	e000      	b.n	801076a <HAL_PCDEx_BCD_Callback+0x82>

    default:
    break;
 8010768:	bf00      	nop
  }
  /* USER CODE BEGIN HAL_PCDEx_BCD_Callback_PostTreatment */

  /* USER CODE END HAL_PCDEx_BCD_Callback_PostTreatment */
}
 801076a:	bf00      	nop
 801076c:	3708      	adds	r7, #8
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
 8010772:	bf00      	nop
 8010774:	20000e3c 	.word	0x20000e3c

08010778 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b082      	sub	sp, #8
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010780:	4a1e      	ldr	r2, [pc, #120]	@ (80107fc <USBD_LL_Init+0x84>)
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	4a1c      	ldr	r2, [pc, #112]	@ (80107fc <USBD_LL_Init+0x84>)
 801078c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8010790:	4b1a      	ldr	r3, [pc, #104]	@ (80107fc <USBD_LL_Init+0x84>)
 8010792:	4a1b      	ldr	r2, [pc, #108]	@ (8010800 <USBD_LL_Init+0x88>)
 8010794:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010796:	4b19      	ldr	r3, [pc, #100]	@ (80107fc <USBD_LL_Init+0x84>)
 8010798:	2208      	movs	r2, #8
 801079a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801079c:	4b17      	ldr	r3, [pc, #92]	@ (80107fc <USBD_LL_Init+0x84>)
 801079e:	2202      	movs	r2, #2
 80107a0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80107a2:	4b16      	ldr	r3, [pc, #88]	@ (80107fc <USBD_LL_Init+0x84>)
 80107a4:	2202      	movs	r2, #2
 80107a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80107a8:	4b14      	ldr	r3, [pc, #80]	@ (80107fc <USBD_LL_Init+0x84>)
 80107aa:	2200      	movs	r2, #0
 80107ac:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80107ae:	4b13      	ldr	r3, [pc, #76]	@ (80107fc <USBD_LL_Init+0x84>)
 80107b0:	2200      	movs	r2, #0
 80107b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80107b4:	4b11      	ldr	r3, [pc, #68]	@ (80107fc <USBD_LL_Init+0x84>)
 80107b6:	2200      	movs	r2, #0
 80107b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = ENABLE;
 80107ba:	4b10      	ldr	r3, [pc, #64]	@ (80107fc <USBD_LL_Init+0x84>)
 80107bc:	2201      	movs	r2, #1
 80107be:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80107c0:	480e      	ldr	r0, [pc, #56]	@ (80107fc <USBD_LL_Init+0x84>)
 80107c2:	f7f5 fa67 	bl	8005c94 <HAL_PCD_Init>
 80107c6:	4603      	mov	r3, r0
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d001      	beq.n	80107d0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80107cc:	f7f1 fb9a 	bl	8001f04 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80107d6:	2318      	movs	r3, #24
 80107d8:	2200      	movs	r2, #0
 80107da:	2100      	movs	r1, #0
 80107dc:	f7f6 feb0 	bl	8007540 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80107e6:	2358      	movs	r3, #88	@ 0x58
 80107e8:	2200      	movs	r2, #0
 80107ea:	2180      	movs	r1, #128	@ 0x80
 80107ec:	f7f6 fea8 	bl	8007540 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 80107f0:	2300      	movs	r3, #0
}
 80107f2:	4618      	mov	r0, r3
 80107f4:	3708      	adds	r7, #8
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}
 80107fa:	bf00      	nop
 80107fc:	20000e40 	.word	0x20000e40
 8010800:	40005c00 	.word	0x40005c00

08010804 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b084      	sub	sp, #16
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801080c:	2300      	movs	r3, #0
 801080e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010810:	2300      	movs	r3, #0
 8010812:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801081a:	4618      	mov	r0, r3
 801081c:	f7f5 fb08 	bl	8005e30 <HAL_PCD_Start>
 8010820:	4603      	mov	r3, r0
 8010822:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010824:	7bfb      	ldrb	r3, [r7, #15]
 8010826:	4618      	mov	r0, r3
 8010828:	f000 f98a 	bl	8010b40 <USBD_Get_USB_Status>
 801082c:	4603      	mov	r3, r0
 801082e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010830:	7bbb      	ldrb	r3, [r7, #14]
}
 8010832:	4618      	mov	r0, r3
 8010834:	3710      	adds	r7, #16
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}

0801083a <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801083a:	b580      	push	{r7, lr}
 801083c:	b084      	sub	sp, #16
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010842:	2300      	movs	r3, #0
 8010844:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010846:	2300      	movs	r3, #0
 8010848:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010850:	4618      	mov	r0, r3
 8010852:	f7f5 fb0f 	bl	8005e74 <HAL_PCD_Stop>
 8010856:	4603      	mov	r3, r0
 8010858:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801085a:	7bfb      	ldrb	r3, [r7, #15]
 801085c:	4618      	mov	r0, r3
 801085e:	f000 f96f 	bl	8010b40 <USBD_Get_USB_Status>
 8010862:	4603      	mov	r3, r0
 8010864:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010866:	7bbb      	ldrb	r3, [r7, #14]
}
 8010868:	4618      	mov	r0, r3
 801086a:	3710      	adds	r7, #16
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}

08010870 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b084      	sub	sp, #16
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	4608      	mov	r0, r1
 801087a:	4611      	mov	r1, r2
 801087c:	461a      	mov	r2, r3
 801087e:	4603      	mov	r3, r0
 8010880:	70fb      	strb	r3, [r7, #3]
 8010882:	460b      	mov	r3, r1
 8010884:	70bb      	strb	r3, [r7, #2]
 8010886:	4613      	mov	r3, r2
 8010888:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801088a:	2300      	movs	r3, #0
 801088c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801088e:	2300      	movs	r3, #0
 8010890:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010898:	78bb      	ldrb	r3, [r7, #2]
 801089a:	883a      	ldrh	r2, [r7, #0]
 801089c:	78f9      	ldrb	r1, [r7, #3]
 801089e:	f7f5 fc56 	bl	800614e <HAL_PCD_EP_Open>
 80108a2:	4603      	mov	r3, r0
 80108a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108a6:	7bfb      	ldrb	r3, [r7, #15]
 80108a8:	4618      	mov	r0, r3
 80108aa:	f000 f949 	bl	8010b40 <USBD_Get_USB_Status>
 80108ae:	4603      	mov	r3, r0
 80108b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3710      	adds	r7, #16
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b084      	sub	sp, #16
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	460b      	mov	r3, r1
 80108c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108c8:	2300      	movs	r3, #0
 80108ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108cc:	2300      	movs	r3, #0
 80108ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80108d6:	78fa      	ldrb	r2, [r7, #3]
 80108d8:	4611      	mov	r1, r2
 80108da:	4618      	mov	r0, r3
 80108dc:	f7f5 fcfe 	bl	80062dc <HAL_PCD_EP_SetStall>
 80108e0:	4603      	mov	r3, r0
 80108e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108e4:	7bfb      	ldrb	r3, [r7, #15]
 80108e6:	4618      	mov	r0, r3
 80108e8:	f000 f92a 	bl	8010b40 <USBD_Get_USB_Status>
 80108ec:	4603      	mov	r3, r0
 80108ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80108f2:	4618      	mov	r0, r3
 80108f4:	3710      	adds	r7, #16
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}

080108fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108fa:	b580      	push	{r7, lr}
 80108fc:	b084      	sub	sp, #16
 80108fe:	af00      	add	r7, sp, #0
 8010900:	6078      	str	r0, [r7, #4]
 8010902:	460b      	mov	r3, r1
 8010904:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010906:	2300      	movs	r3, #0
 8010908:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801090a:	2300      	movs	r3, #0
 801090c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010914:	78fa      	ldrb	r2, [r7, #3]
 8010916:	4611      	mov	r1, r2
 8010918:	4618      	mov	r0, r3
 801091a:	f7f5 fd31 	bl	8006380 <HAL_PCD_EP_ClrStall>
 801091e:	4603      	mov	r3, r0
 8010920:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010922:	7bfb      	ldrb	r3, [r7, #15]
 8010924:	4618      	mov	r0, r3
 8010926:	f000 f90b 	bl	8010b40 <USBD_Get_USB_Status>
 801092a:	4603      	mov	r3, r0
 801092c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801092e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010930:	4618      	mov	r0, r3
 8010932:	3710      	adds	r7, #16
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}

08010938 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010938:	b480      	push	{r7}
 801093a:	b085      	sub	sp, #20
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
 8010940:	460b      	mov	r3, r1
 8010942:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801094a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801094c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010950:	2b00      	cmp	r3, #0
 8010952:	da0b      	bge.n	801096c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010954:	78fb      	ldrb	r3, [r7, #3]
 8010956:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801095a:	68f9      	ldr	r1, [r7, #12]
 801095c:	4613      	mov	r3, r2
 801095e:	009b      	lsls	r3, r3, #2
 8010960:	4413      	add	r3, r2
 8010962:	00db      	lsls	r3, r3, #3
 8010964:	440b      	add	r3, r1
 8010966:	3312      	adds	r3, #18
 8010968:	781b      	ldrb	r3, [r3, #0]
 801096a:	e00b      	b.n	8010984 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801096c:	78fb      	ldrb	r3, [r7, #3]
 801096e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010972:	68f9      	ldr	r1, [r7, #12]
 8010974:	4613      	mov	r3, r2
 8010976:	009b      	lsls	r3, r3, #2
 8010978:	4413      	add	r3, r2
 801097a:	00db      	lsls	r3, r3, #3
 801097c:	440b      	add	r3, r1
 801097e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8010982:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010984:	4618      	mov	r0, r3
 8010986:	3714      	adds	r7, #20
 8010988:	46bd      	mov	sp, r7
 801098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098e:	4770      	bx	lr

08010990 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b084      	sub	sp, #16
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
 8010998:	460b      	mov	r3, r1
 801099a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801099c:	2300      	movs	r3, #0
 801099e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109a0:	2300      	movs	r3, #0
 80109a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80109aa:	78fa      	ldrb	r2, [r7, #3]
 80109ac:	4611      	mov	r1, r2
 80109ae:	4618      	mov	r0, r3
 80109b0:	f7f5 fba9 	bl	8006106 <HAL_PCD_SetAddress>
 80109b4:	4603      	mov	r3, r0
 80109b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80109b8:	7bfb      	ldrb	r3, [r7, #15]
 80109ba:	4618      	mov	r0, r3
 80109bc:	f000 f8c0 	bl	8010b40 <USBD_Get_USB_Status>
 80109c0:	4603      	mov	r3, r0
 80109c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	3710      	adds	r7, #16
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}

080109ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80109ce:	b580      	push	{r7, lr}
 80109d0:	b086      	sub	sp, #24
 80109d2:	af00      	add	r7, sp, #0
 80109d4:	60f8      	str	r0, [r7, #12]
 80109d6:	607a      	str	r2, [r7, #4]
 80109d8:	603b      	str	r3, [r7, #0]
 80109da:	460b      	mov	r3, r1
 80109dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109de:	2300      	movs	r3, #0
 80109e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109e2:	2300      	movs	r3, #0
 80109e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80109ec:	7af9      	ldrb	r1, [r7, #11]
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	687a      	ldr	r2, [r7, #4]
 80109f2:	f7f5 fc3c 	bl	800626e <HAL_PCD_EP_Transmit>
 80109f6:	4603      	mov	r3, r0
 80109f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80109fa:	7dfb      	ldrb	r3, [r7, #23]
 80109fc:	4618      	mov	r0, r3
 80109fe:	f000 f89f 	bl	8010b40 <USBD_Get_USB_Status>
 8010a02:	4603      	mov	r3, r0
 8010a04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010a06:	7dbb      	ldrb	r3, [r7, #22]
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3718      	adds	r7, #24
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}

08010a10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b086      	sub	sp, #24
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	60f8      	str	r0, [r7, #12]
 8010a18:	607a      	str	r2, [r7, #4]
 8010a1a:	603b      	str	r3, [r7, #0]
 8010a1c:	460b      	mov	r3, r1
 8010a1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a20:	2300      	movs	r3, #0
 8010a22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a24:	2300      	movs	r3, #0
 8010a26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a2e:	7af9      	ldrb	r1, [r7, #11]
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	687a      	ldr	r2, [r7, #4]
 8010a34:	f7f5 fbea 	bl	800620c <HAL_PCD_EP_Receive>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a3c:	7dfb      	ldrb	r3, [r7, #23]
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f000 f87e 	bl	8010b40 <USBD_Get_USB_Status>
 8010a44:	4603      	mov	r3, r0
 8010a46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010a48:	7dbb      	ldrb	r3, [r7, #22]
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	3718      	adds	r7, #24
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}
	...

08010a54 <USBD_LL_BatterryCharging>:
  * @brief
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatterryCharging(USBD_HandleTypeDef *pdev)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1) == GPIO_PIN_SET)
 8010a5c:	2102      	movs	r1, #2
 8010a5e:	480d      	ldr	r0, [pc, #52]	@ (8010a94 <USBD_LL_BatterryCharging+0x40>)
 8010a60:	f7f4 ffb6 	bl	80059d0 <HAL_GPIO_ReadPin>
 8010a64:	4603      	mov	r3, r0
 8010a66:	2b01      	cmp	r3, #1
 8010a68:	d10f      	bne.n	8010a8a <USBD_LL_BatterryCharging+0x36>
  {
    /*wait for bus stabilization*/
    HAL_Delay(450);
 8010a6a:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8010a6e:	f7f3 f8f1 	bl	8003c54 <HAL_Delay>
    /*Start BCD Detect*/
    HAL_PCDEx_ActivateBCD (pdev->pData);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7f6 fda4 	bl	80075c6 <HAL_PCDEx_ActivateBCD>
    HAL_PCDEx_BCD_VBUSDetect(pdev->pData);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7f6 fdf4 	bl	8007672 <HAL_PCDEx_BCD_VBUSDetect>
  }
  return USBD_OK;
 8010a8a:	2300      	movs	r3, #0
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3708      	adds	r7, #8
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}
 8010a94:	48001400 	.word	0x48001400

08010a98 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b082      	sub	sp, #8
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	460b      	mov	r3, r1
 8010aa2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010aa4:	78fb      	ldrb	r3, [r7, #3]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d002      	beq.n	8010ab0 <HAL_PCDEx_LPM_Callback+0x18>
 8010aaa:	2b01      	cmp	r3, #1
 8010aac:	d013      	beq.n	8010ad6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010aae:	e023      	b.n	8010af8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	7a5b      	ldrb	r3, [r3, #9]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d007      	beq.n	8010ac8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010ab8:	f000 f83c 	bl	8010b34 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010abc:	4b10      	ldr	r3, [pc, #64]	@ (8010b00 <HAL_PCDEx_LPM_Callback+0x68>)
 8010abe:	691b      	ldr	r3, [r3, #16]
 8010ac0:	4a0f      	ldr	r2, [pc, #60]	@ (8010b00 <HAL_PCDEx_LPM_Callback+0x68>)
 8010ac2:	f023 0306 	bic.w	r3, r3, #6
 8010ac6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f7fe fccf 	bl	800f472 <USBD_LL_Resume>
    break;
 8010ad4:	e010      	b.n	8010af8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010adc:	4618      	mov	r0, r3
 8010ade:	f7fe fcb2 	bl	800f446 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	7a5b      	ldrb	r3, [r3, #9]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d005      	beq.n	8010af6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010aea:	4b05      	ldr	r3, [pc, #20]	@ (8010b00 <HAL_PCDEx_LPM_Callback+0x68>)
 8010aec:	691b      	ldr	r3, [r3, #16]
 8010aee:	4a04      	ldr	r2, [pc, #16]	@ (8010b00 <HAL_PCDEx_LPM_Callback+0x68>)
 8010af0:	f043 0306 	orr.w	r3, r3, #6
 8010af4:	6113      	str	r3, [r2, #16]
    break;
 8010af6:	bf00      	nop
}
 8010af8:	bf00      	nop
 8010afa:	3708      	adds	r7, #8
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}
 8010b00:	e000ed00 	.word	0xe000ed00

08010b04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010b04:	b480      	push	{r7}
 8010b06:	b083      	sub	sp, #12
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010b0c:	4b03      	ldr	r3, [pc, #12]	@ (8010b1c <USBD_static_malloc+0x18>)
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	370c      	adds	r7, #12
 8010b12:	46bd      	mov	sp, r7
 8010b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b18:	4770      	bx	lr
 8010b1a:	bf00      	nop
 8010b1c:	2000111c 	.word	0x2000111c

08010b20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010b20:	b480      	push	{r7}
 8010b22:	b083      	sub	sp, #12
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]

}
 8010b28:	bf00      	nop
 8010b2a:	370c      	adds	r7, #12
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b32:	4770      	bx	lr

08010b34 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010b38:	f7f0 fb1e 	bl	8001178 <SystemClock_Config>
}
 8010b3c:	bf00      	nop
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010b40:	b480      	push	{r7}
 8010b42:	b085      	sub	sp, #20
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	4603      	mov	r3, r0
 8010b48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010b4e:	79fb      	ldrb	r3, [r7, #7]
 8010b50:	2b03      	cmp	r3, #3
 8010b52:	d817      	bhi.n	8010b84 <USBD_Get_USB_Status+0x44>
 8010b54:	a201      	add	r2, pc, #4	@ (adr r2, 8010b5c <USBD_Get_USB_Status+0x1c>)
 8010b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b5a:	bf00      	nop
 8010b5c:	08010b6d 	.word	0x08010b6d
 8010b60:	08010b73 	.word	0x08010b73
 8010b64:	08010b79 	.word	0x08010b79
 8010b68:	08010b7f 	.word	0x08010b7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	73fb      	strb	r3, [r7, #15]
    break;
 8010b70:	e00b      	b.n	8010b8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010b72:	2303      	movs	r3, #3
 8010b74:	73fb      	strb	r3, [r7, #15]
    break;
 8010b76:	e008      	b.n	8010b8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010b78:	2301      	movs	r3, #1
 8010b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8010b7c:	e005      	b.n	8010b8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010b7e:	2303      	movs	r3, #3
 8010b80:	73fb      	strb	r3, [r7, #15]
    break;
 8010b82:	e002      	b.n	8010b8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010b84:	2303      	movs	r3, #3
 8010b86:	73fb      	strb	r3, [r7, #15]
    break;
 8010b88:	bf00      	nop
  }
  return usb_status;
 8010b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3714      	adds	r7, #20
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr

08010b98 <malloc>:
 8010b98:	4b02      	ldr	r3, [pc, #8]	@ (8010ba4 <malloc+0xc>)
 8010b9a:	4601      	mov	r1, r0
 8010b9c:	6818      	ldr	r0, [r3, #0]
 8010b9e:	f000 b825 	b.w	8010bec <_malloc_r>
 8010ba2:	bf00      	nop
 8010ba4:	200000ec 	.word	0x200000ec

08010ba8 <sbrk_aligned>:
 8010ba8:	b570      	push	{r4, r5, r6, lr}
 8010baa:	4e0f      	ldr	r6, [pc, #60]	@ (8010be8 <sbrk_aligned+0x40>)
 8010bac:	460c      	mov	r4, r1
 8010bae:	6831      	ldr	r1, [r6, #0]
 8010bb0:	4605      	mov	r5, r0
 8010bb2:	b911      	cbnz	r1, 8010bba <sbrk_aligned+0x12>
 8010bb4:	f000 fe92 	bl	80118dc <_sbrk_r>
 8010bb8:	6030      	str	r0, [r6, #0]
 8010bba:	4621      	mov	r1, r4
 8010bbc:	4628      	mov	r0, r5
 8010bbe:	f000 fe8d 	bl	80118dc <_sbrk_r>
 8010bc2:	1c43      	adds	r3, r0, #1
 8010bc4:	d103      	bne.n	8010bce <sbrk_aligned+0x26>
 8010bc6:	f04f 34ff 	mov.w	r4, #4294967295
 8010bca:	4620      	mov	r0, r4
 8010bcc:	bd70      	pop	{r4, r5, r6, pc}
 8010bce:	1cc4      	adds	r4, r0, #3
 8010bd0:	f024 0403 	bic.w	r4, r4, #3
 8010bd4:	42a0      	cmp	r0, r4
 8010bd6:	d0f8      	beq.n	8010bca <sbrk_aligned+0x22>
 8010bd8:	1a21      	subs	r1, r4, r0
 8010bda:	4628      	mov	r0, r5
 8010bdc:	f000 fe7e 	bl	80118dc <_sbrk_r>
 8010be0:	3001      	adds	r0, #1
 8010be2:	d1f2      	bne.n	8010bca <sbrk_aligned+0x22>
 8010be4:	e7ef      	b.n	8010bc6 <sbrk_aligned+0x1e>
 8010be6:	bf00      	nop
 8010be8:	2000153c 	.word	0x2000153c

08010bec <_malloc_r>:
 8010bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bf0:	1ccd      	adds	r5, r1, #3
 8010bf2:	f025 0503 	bic.w	r5, r5, #3
 8010bf6:	3508      	adds	r5, #8
 8010bf8:	2d0c      	cmp	r5, #12
 8010bfa:	bf38      	it	cc
 8010bfc:	250c      	movcc	r5, #12
 8010bfe:	2d00      	cmp	r5, #0
 8010c00:	4606      	mov	r6, r0
 8010c02:	db01      	blt.n	8010c08 <_malloc_r+0x1c>
 8010c04:	42a9      	cmp	r1, r5
 8010c06:	d904      	bls.n	8010c12 <_malloc_r+0x26>
 8010c08:	230c      	movs	r3, #12
 8010c0a:	6033      	str	r3, [r6, #0]
 8010c0c:	2000      	movs	r0, #0
 8010c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010ce8 <_malloc_r+0xfc>
 8010c16:	f000 f869 	bl	8010cec <__malloc_lock>
 8010c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8010c1e:	461c      	mov	r4, r3
 8010c20:	bb44      	cbnz	r4, 8010c74 <_malloc_r+0x88>
 8010c22:	4629      	mov	r1, r5
 8010c24:	4630      	mov	r0, r6
 8010c26:	f7ff ffbf 	bl	8010ba8 <sbrk_aligned>
 8010c2a:	1c43      	adds	r3, r0, #1
 8010c2c:	4604      	mov	r4, r0
 8010c2e:	d158      	bne.n	8010ce2 <_malloc_r+0xf6>
 8010c30:	f8d8 4000 	ldr.w	r4, [r8]
 8010c34:	4627      	mov	r7, r4
 8010c36:	2f00      	cmp	r7, #0
 8010c38:	d143      	bne.n	8010cc2 <_malloc_r+0xd6>
 8010c3a:	2c00      	cmp	r4, #0
 8010c3c:	d04b      	beq.n	8010cd6 <_malloc_r+0xea>
 8010c3e:	6823      	ldr	r3, [r4, #0]
 8010c40:	4639      	mov	r1, r7
 8010c42:	4630      	mov	r0, r6
 8010c44:	eb04 0903 	add.w	r9, r4, r3
 8010c48:	f000 fe48 	bl	80118dc <_sbrk_r>
 8010c4c:	4581      	cmp	r9, r0
 8010c4e:	d142      	bne.n	8010cd6 <_malloc_r+0xea>
 8010c50:	6821      	ldr	r1, [r4, #0]
 8010c52:	1a6d      	subs	r5, r5, r1
 8010c54:	4629      	mov	r1, r5
 8010c56:	4630      	mov	r0, r6
 8010c58:	f7ff ffa6 	bl	8010ba8 <sbrk_aligned>
 8010c5c:	3001      	adds	r0, #1
 8010c5e:	d03a      	beq.n	8010cd6 <_malloc_r+0xea>
 8010c60:	6823      	ldr	r3, [r4, #0]
 8010c62:	442b      	add	r3, r5
 8010c64:	6023      	str	r3, [r4, #0]
 8010c66:	f8d8 3000 	ldr.w	r3, [r8]
 8010c6a:	685a      	ldr	r2, [r3, #4]
 8010c6c:	bb62      	cbnz	r2, 8010cc8 <_malloc_r+0xdc>
 8010c6e:	f8c8 7000 	str.w	r7, [r8]
 8010c72:	e00f      	b.n	8010c94 <_malloc_r+0xa8>
 8010c74:	6822      	ldr	r2, [r4, #0]
 8010c76:	1b52      	subs	r2, r2, r5
 8010c78:	d420      	bmi.n	8010cbc <_malloc_r+0xd0>
 8010c7a:	2a0b      	cmp	r2, #11
 8010c7c:	d917      	bls.n	8010cae <_malloc_r+0xc2>
 8010c7e:	1961      	adds	r1, r4, r5
 8010c80:	42a3      	cmp	r3, r4
 8010c82:	6025      	str	r5, [r4, #0]
 8010c84:	bf18      	it	ne
 8010c86:	6059      	strne	r1, [r3, #4]
 8010c88:	6863      	ldr	r3, [r4, #4]
 8010c8a:	bf08      	it	eq
 8010c8c:	f8c8 1000 	streq.w	r1, [r8]
 8010c90:	5162      	str	r2, [r4, r5]
 8010c92:	604b      	str	r3, [r1, #4]
 8010c94:	4630      	mov	r0, r6
 8010c96:	f000 f82f 	bl	8010cf8 <__malloc_unlock>
 8010c9a:	f104 000b 	add.w	r0, r4, #11
 8010c9e:	1d23      	adds	r3, r4, #4
 8010ca0:	f020 0007 	bic.w	r0, r0, #7
 8010ca4:	1ac2      	subs	r2, r0, r3
 8010ca6:	bf1c      	itt	ne
 8010ca8:	1a1b      	subne	r3, r3, r0
 8010caa:	50a3      	strne	r3, [r4, r2]
 8010cac:	e7af      	b.n	8010c0e <_malloc_r+0x22>
 8010cae:	6862      	ldr	r2, [r4, #4]
 8010cb0:	42a3      	cmp	r3, r4
 8010cb2:	bf0c      	ite	eq
 8010cb4:	f8c8 2000 	streq.w	r2, [r8]
 8010cb8:	605a      	strne	r2, [r3, #4]
 8010cba:	e7eb      	b.n	8010c94 <_malloc_r+0xa8>
 8010cbc:	4623      	mov	r3, r4
 8010cbe:	6864      	ldr	r4, [r4, #4]
 8010cc0:	e7ae      	b.n	8010c20 <_malloc_r+0x34>
 8010cc2:	463c      	mov	r4, r7
 8010cc4:	687f      	ldr	r7, [r7, #4]
 8010cc6:	e7b6      	b.n	8010c36 <_malloc_r+0x4a>
 8010cc8:	461a      	mov	r2, r3
 8010cca:	685b      	ldr	r3, [r3, #4]
 8010ccc:	42a3      	cmp	r3, r4
 8010cce:	d1fb      	bne.n	8010cc8 <_malloc_r+0xdc>
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	6053      	str	r3, [r2, #4]
 8010cd4:	e7de      	b.n	8010c94 <_malloc_r+0xa8>
 8010cd6:	230c      	movs	r3, #12
 8010cd8:	6033      	str	r3, [r6, #0]
 8010cda:	4630      	mov	r0, r6
 8010cdc:	f000 f80c 	bl	8010cf8 <__malloc_unlock>
 8010ce0:	e794      	b.n	8010c0c <_malloc_r+0x20>
 8010ce2:	6005      	str	r5, [r0, #0]
 8010ce4:	e7d6      	b.n	8010c94 <_malloc_r+0xa8>
 8010ce6:	bf00      	nop
 8010ce8:	20001540 	.word	0x20001540

08010cec <__malloc_lock>:
 8010cec:	4801      	ldr	r0, [pc, #4]	@ (8010cf4 <__malloc_lock+0x8>)
 8010cee:	f7f1 bfb8 	b.w	8002c62 <__retarget_lock_acquire_recursive>
 8010cf2:	bf00      	nop
 8010cf4:	20000828 	.word	0x20000828

08010cf8 <__malloc_unlock>:
 8010cf8:	4801      	ldr	r0, [pc, #4]	@ (8010d00 <__malloc_unlock+0x8>)
 8010cfa:	f7f1 bfc7 	b.w	8002c8c <__retarget_lock_release_recursive>
 8010cfe:	bf00      	nop
 8010d00:	20000828 	.word	0x20000828

08010d04 <rand>:
 8010d04:	4b16      	ldr	r3, [pc, #88]	@ (8010d60 <rand+0x5c>)
 8010d06:	b510      	push	{r4, lr}
 8010d08:	681c      	ldr	r4, [r3, #0]
 8010d0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010d0c:	b9b3      	cbnz	r3, 8010d3c <rand+0x38>
 8010d0e:	2018      	movs	r0, #24
 8010d10:	f7ff ff42 	bl	8010b98 <malloc>
 8010d14:	4602      	mov	r2, r0
 8010d16:	6320      	str	r0, [r4, #48]	@ 0x30
 8010d18:	b920      	cbnz	r0, 8010d24 <rand+0x20>
 8010d1a:	4b12      	ldr	r3, [pc, #72]	@ (8010d64 <rand+0x60>)
 8010d1c:	4812      	ldr	r0, [pc, #72]	@ (8010d68 <rand+0x64>)
 8010d1e:	2152      	movs	r1, #82	@ 0x52
 8010d20:	f000 fe36 	bl	8011990 <__assert_func>
 8010d24:	4911      	ldr	r1, [pc, #68]	@ (8010d6c <rand+0x68>)
 8010d26:	4b12      	ldr	r3, [pc, #72]	@ (8010d70 <rand+0x6c>)
 8010d28:	e9c0 1300 	strd	r1, r3, [r0]
 8010d2c:	4b11      	ldr	r3, [pc, #68]	@ (8010d74 <rand+0x70>)
 8010d2e:	6083      	str	r3, [r0, #8]
 8010d30:	230b      	movs	r3, #11
 8010d32:	8183      	strh	r3, [r0, #12]
 8010d34:	2100      	movs	r1, #0
 8010d36:	2001      	movs	r0, #1
 8010d38:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010d3c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010d3e:	480e      	ldr	r0, [pc, #56]	@ (8010d78 <rand+0x74>)
 8010d40:	690b      	ldr	r3, [r1, #16]
 8010d42:	694c      	ldr	r4, [r1, #20]
 8010d44:	4a0d      	ldr	r2, [pc, #52]	@ (8010d7c <rand+0x78>)
 8010d46:	4358      	muls	r0, r3
 8010d48:	fb02 0004 	mla	r0, r2, r4, r0
 8010d4c:	fba3 3202 	umull	r3, r2, r3, r2
 8010d50:	3301      	adds	r3, #1
 8010d52:	eb40 0002 	adc.w	r0, r0, r2
 8010d56:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010d5a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8010d5e:	bd10      	pop	{r4, pc}
 8010d60:	200000ec 	.word	0x200000ec
 8010d64:	0801375c 	.word	0x0801375c
 8010d68:	08013773 	.word	0x08013773
 8010d6c:	abcd330e 	.word	0xabcd330e
 8010d70:	e66d1234 	.word	0xe66d1234
 8010d74:	0005deec 	.word	0x0005deec
 8010d78:	5851f42d 	.word	0x5851f42d
 8010d7c:	4c957f2d 	.word	0x4c957f2d

08010d80 <__cvt>:
 8010d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d84:	ec57 6b10 	vmov	r6, r7, d0
 8010d88:	2f00      	cmp	r7, #0
 8010d8a:	460c      	mov	r4, r1
 8010d8c:	4619      	mov	r1, r3
 8010d8e:	463b      	mov	r3, r7
 8010d90:	bfbb      	ittet	lt
 8010d92:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010d96:	461f      	movlt	r7, r3
 8010d98:	2300      	movge	r3, #0
 8010d9a:	232d      	movlt	r3, #45	@ 0x2d
 8010d9c:	700b      	strb	r3, [r1, #0]
 8010d9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010da0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010da4:	4691      	mov	r9, r2
 8010da6:	f023 0820 	bic.w	r8, r3, #32
 8010daa:	bfbc      	itt	lt
 8010dac:	4632      	movlt	r2, r6
 8010dae:	4616      	movlt	r6, r2
 8010db0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010db4:	d005      	beq.n	8010dc2 <__cvt+0x42>
 8010db6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010dba:	d100      	bne.n	8010dbe <__cvt+0x3e>
 8010dbc:	3401      	adds	r4, #1
 8010dbe:	2102      	movs	r1, #2
 8010dc0:	e000      	b.n	8010dc4 <__cvt+0x44>
 8010dc2:	2103      	movs	r1, #3
 8010dc4:	ab03      	add	r3, sp, #12
 8010dc6:	9301      	str	r3, [sp, #4]
 8010dc8:	ab02      	add	r3, sp, #8
 8010dca:	9300      	str	r3, [sp, #0]
 8010dcc:	ec47 6b10 	vmov	d0, r6, r7
 8010dd0:	4653      	mov	r3, sl
 8010dd2:	4622      	mov	r2, r4
 8010dd4:	f000 fe84 	bl	8011ae0 <_dtoa_r>
 8010dd8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010ddc:	4605      	mov	r5, r0
 8010dde:	d119      	bne.n	8010e14 <__cvt+0x94>
 8010de0:	f019 0f01 	tst.w	r9, #1
 8010de4:	d00e      	beq.n	8010e04 <__cvt+0x84>
 8010de6:	eb00 0904 	add.w	r9, r0, r4
 8010dea:	2200      	movs	r2, #0
 8010dec:	2300      	movs	r3, #0
 8010dee:	4630      	mov	r0, r6
 8010df0:	4639      	mov	r1, r7
 8010df2:	f7ef fe91 	bl	8000b18 <__aeabi_dcmpeq>
 8010df6:	b108      	cbz	r0, 8010dfc <__cvt+0x7c>
 8010df8:	f8cd 900c 	str.w	r9, [sp, #12]
 8010dfc:	2230      	movs	r2, #48	@ 0x30
 8010dfe:	9b03      	ldr	r3, [sp, #12]
 8010e00:	454b      	cmp	r3, r9
 8010e02:	d31e      	bcc.n	8010e42 <__cvt+0xc2>
 8010e04:	9b03      	ldr	r3, [sp, #12]
 8010e06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e08:	1b5b      	subs	r3, r3, r5
 8010e0a:	4628      	mov	r0, r5
 8010e0c:	6013      	str	r3, [r2, #0]
 8010e0e:	b004      	add	sp, #16
 8010e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010e18:	eb00 0904 	add.w	r9, r0, r4
 8010e1c:	d1e5      	bne.n	8010dea <__cvt+0x6a>
 8010e1e:	7803      	ldrb	r3, [r0, #0]
 8010e20:	2b30      	cmp	r3, #48	@ 0x30
 8010e22:	d10a      	bne.n	8010e3a <__cvt+0xba>
 8010e24:	2200      	movs	r2, #0
 8010e26:	2300      	movs	r3, #0
 8010e28:	4630      	mov	r0, r6
 8010e2a:	4639      	mov	r1, r7
 8010e2c:	f7ef fe74 	bl	8000b18 <__aeabi_dcmpeq>
 8010e30:	b918      	cbnz	r0, 8010e3a <__cvt+0xba>
 8010e32:	f1c4 0401 	rsb	r4, r4, #1
 8010e36:	f8ca 4000 	str.w	r4, [sl]
 8010e3a:	f8da 3000 	ldr.w	r3, [sl]
 8010e3e:	4499      	add	r9, r3
 8010e40:	e7d3      	b.n	8010dea <__cvt+0x6a>
 8010e42:	1c59      	adds	r1, r3, #1
 8010e44:	9103      	str	r1, [sp, #12]
 8010e46:	701a      	strb	r2, [r3, #0]
 8010e48:	e7d9      	b.n	8010dfe <__cvt+0x7e>

08010e4a <__exponent>:
 8010e4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e4c:	2900      	cmp	r1, #0
 8010e4e:	bfba      	itte	lt
 8010e50:	4249      	neglt	r1, r1
 8010e52:	232d      	movlt	r3, #45	@ 0x2d
 8010e54:	232b      	movge	r3, #43	@ 0x2b
 8010e56:	2909      	cmp	r1, #9
 8010e58:	7002      	strb	r2, [r0, #0]
 8010e5a:	7043      	strb	r3, [r0, #1]
 8010e5c:	dd29      	ble.n	8010eb2 <__exponent+0x68>
 8010e5e:	f10d 0307 	add.w	r3, sp, #7
 8010e62:	461d      	mov	r5, r3
 8010e64:	270a      	movs	r7, #10
 8010e66:	461a      	mov	r2, r3
 8010e68:	fbb1 f6f7 	udiv	r6, r1, r7
 8010e6c:	fb07 1416 	mls	r4, r7, r6, r1
 8010e70:	3430      	adds	r4, #48	@ 0x30
 8010e72:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010e76:	460c      	mov	r4, r1
 8010e78:	2c63      	cmp	r4, #99	@ 0x63
 8010e7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8010e7e:	4631      	mov	r1, r6
 8010e80:	dcf1      	bgt.n	8010e66 <__exponent+0x1c>
 8010e82:	3130      	adds	r1, #48	@ 0x30
 8010e84:	1e94      	subs	r4, r2, #2
 8010e86:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010e8a:	1c41      	adds	r1, r0, #1
 8010e8c:	4623      	mov	r3, r4
 8010e8e:	42ab      	cmp	r3, r5
 8010e90:	d30a      	bcc.n	8010ea8 <__exponent+0x5e>
 8010e92:	f10d 0309 	add.w	r3, sp, #9
 8010e96:	1a9b      	subs	r3, r3, r2
 8010e98:	42ac      	cmp	r4, r5
 8010e9a:	bf88      	it	hi
 8010e9c:	2300      	movhi	r3, #0
 8010e9e:	3302      	adds	r3, #2
 8010ea0:	4403      	add	r3, r0
 8010ea2:	1a18      	subs	r0, r3, r0
 8010ea4:	b003      	add	sp, #12
 8010ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ea8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010eac:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010eb0:	e7ed      	b.n	8010e8e <__exponent+0x44>
 8010eb2:	2330      	movs	r3, #48	@ 0x30
 8010eb4:	3130      	adds	r1, #48	@ 0x30
 8010eb6:	7083      	strb	r3, [r0, #2]
 8010eb8:	70c1      	strb	r1, [r0, #3]
 8010eba:	1d03      	adds	r3, r0, #4
 8010ebc:	e7f1      	b.n	8010ea2 <__exponent+0x58>
	...

08010ec0 <_printf_float>:
 8010ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ec4:	b08d      	sub	sp, #52	@ 0x34
 8010ec6:	460c      	mov	r4, r1
 8010ec8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010ecc:	4616      	mov	r6, r2
 8010ece:	461f      	mov	r7, r3
 8010ed0:	4605      	mov	r5, r0
 8010ed2:	f000 fccb 	bl	801186c <_localeconv_r>
 8010ed6:	6803      	ldr	r3, [r0, #0]
 8010ed8:	9304      	str	r3, [sp, #16]
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7ef f9f0 	bl	80002c0 <strlen>
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8010ee8:	9005      	str	r0, [sp, #20]
 8010eea:	3307      	adds	r3, #7
 8010eec:	f023 0307 	bic.w	r3, r3, #7
 8010ef0:	f103 0208 	add.w	r2, r3, #8
 8010ef4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010ef8:	f8d4 b000 	ldr.w	fp, [r4]
 8010efc:	f8c8 2000 	str.w	r2, [r8]
 8010f00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f04:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010f08:	9307      	str	r3, [sp, #28]
 8010f0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8010f0e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010f12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010f16:	4b9c      	ldr	r3, [pc, #624]	@ (8011188 <_printf_float+0x2c8>)
 8010f18:	f04f 32ff 	mov.w	r2, #4294967295
 8010f1c:	f7ef fe2e 	bl	8000b7c <__aeabi_dcmpun>
 8010f20:	bb70      	cbnz	r0, 8010f80 <_printf_float+0xc0>
 8010f22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010f26:	4b98      	ldr	r3, [pc, #608]	@ (8011188 <_printf_float+0x2c8>)
 8010f28:	f04f 32ff 	mov.w	r2, #4294967295
 8010f2c:	f7ef fe08 	bl	8000b40 <__aeabi_dcmple>
 8010f30:	bb30      	cbnz	r0, 8010f80 <_printf_float+0xc0>
 8010f32:	2200      	movs	r2, #0
 8010f34:	2300      	movs	r3, #0
 8010f36:	4640      	mov	r0, r8
 8010f38:	4649      	mov	r1, r9
 8010f3a:	f7ef fdf7 	bl	8000b2c <__aeabi_dcmplt>
 8010f3e:	b110      	cbz	r0, 8010f46 <_printf_float+0x86>
 8010f40:	232d      	movs	r3, #45	@ 0x2d
 8010f42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f46:	4a91      	ldr	r2, [pc, #580]	@ (801118c <_printf_float+0x2cc>)
 8010f48:	4b91      	ldr	r3, [pc, #580]	@ (8011190 <_printf_float+0x2d0>)
 8010f4a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010f4e:	bf8c      	ite	hi
 8010f50:	4690      	movhi	r8, r2
 8010f52:	4698      	movls	r8, r3
 8010f54:	2303      	movs	r3, #3
 8010f56:	6123      	str	r3, [r4, #16]
 8010f58:	f02b 0304 	bic.w	r3, fp, #4
 8010f5c:	6023      	str	r3, [r4, #0]
 8010f5e:	f04f 0900 	mov.w	r9, #0
 8010f62:	9700      	str	r7, [sp, #0]
 8010f64:	4633      	mov	r3, r6
 8010f66:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010f68:	4621      	mov	r1, r4
 8010f6a:	4628      	mov	r0, r5
 8010f6c:	f000 f9d2 	bl	8011314 <_printf_common>
 8010f70:	3001      	adds	r0, #1
 8010f72:	f040 808d 	bne.w	8011090 <_printf_float+0x1d0>
 8010f76:	f04f 30ff 	mov.w	r0, #4294967295
 8010f7a:	b00d      	add	sp, #52	@ 0x34
 8010f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f80:	4642      	mov	r2, r8
 8010f82:	464b      	mov	r3, r9
 8010f84:	4640      	mov	r0, r8
 8010f86:	4649      	mov	r1, r9
 8010f88:	f7ef fdf8 	bl	8000b7c <__aeabi_dcmpun>
 8010f8c:	b140      	cbz	r0, 8010fa0 <_printf_float+0xe0>
 8010f8e:	464b      	mov	r3, r9
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	bfbc      	itt	lt
 8010f94:	232d      	movlt	r3, #45	@ 0x2d
 8010f96:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010f9a:	4a7e      	ldr	r2, [pc, #504]	@ (8011194 <_printf_float+0x2d4>)
 8010f9c:	4b7e      	ldr	r3, [pc, #504]	@ (8011198 <_printf_float+0x2d8>)
 8010f9e:	e7d4      	b.n	8010f4a <_printf_float+0x8a>
 8010fa0:	6863      	ldr	r3, [r4, #4]
 8010fa2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010fa6:	9206      	str	r2, [sp, #24]
 8010fa8:	1c5a      	adds	r2, r3, #1
 8010faa:	d13b      	bne.n	8011024 <_printf_float+0x164>
 8010fac:	2306      	movs	r3, #6
 8010fae:	6063      	str	r3, [r4, #4]
 8010fb0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	6022      	str	r2, [r4, #0]
 8010fb8:	9303      	str	r3, [sp, #12]
 8010fba:	ab0a      	add	r3, sp, #40	@ 0x28
 8010fbc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010fc0:	ab09      	add	r3, sp, #36	@ 0x24
 8010fc2:	9300      	str	r3, [sp, #0]
 8010fc4:	6861      	ldr	r1, [r4, #4]
 8010fc6:	ec49 8b10 	vmov	d0, r8, r9
 8010fca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010fce:	4628      	mov	r0, r5
 8010fd0:	f7ff fed6 	bl	8010d80 <__cvt>
 8010fd4:	9b06      	ldr	r3, [sp, #24]
 8010fd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010fd8:	2b47      	cmp	r3, #71	@ 0x47
 8010fda:	4680      	mov	r8, r0
 8010fdc:	d129      	bne.n	8011032 <_printf_float+0x172>
 8010fde:	1cc8      	adds	r0, r1, #3
 8010fe0:	db02      	blt.n	8010fe8 <_printf_float+0x128>
 8010fe2:	6863      	ldr	r3, [r4, #4]
 8010fe4:	4299      	cmp	r1, r3
 8010fe6:	dd41      	ble.n	801106c <_printf_float+0x1ac>
 8010fe8:	f1aa 0a02 	sub.w	sl, sl, #2
 8010fec:	fa5f fa8a 	uxtb.w	sl, sl
 8010ff0:	3901      	subs	r1, #1
 8010ff2:	4652      	mov	r2, sl
 8010ff4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010ff8:	9109      	str	r1, [sp, #36]	@ 0x24
 8010ffa:	f7ff ff26 	bl	8010e4a <__exponent>
 8010ffe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011000:	1813      	adds	r3, r2, r0
 8011002:	2a01      	cmp	r2, #1
 8011004:	4681      	mov	r9, r0
 8011006:	6123      	str	r3, [r4, #16]
 8011008:	dc02      	bgt.n	8011010 <_printf_float+0x150>
 801100a:	6822      	ldr	r2, [r4, #0]
 801100c:	07d2      	lsls	r2, r2, #31
 801100e:	d501      	bpl.n	8011014 <_printf_float+0x154>
 8011010:	3301      	adds	r3, #1
 8011012:	6123      	str	r3, [r4, #16]
 8011014:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011018:	2b00      	cmp	r3, #0
 801101a:	d0a2      	beq.n	8010f62 <_printf_float+0xa2>
 801101c:	232d      	movs	r3, #45	@ 0x2d
 801101e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011022:	e79e      	b.n	8010f62 <_printf_float+0xa2>
 8011024:	9a06      	ldr	r2, [sp, #24]
 8011026:	2a47      	cmp	r2, #71	@ 0x47
 8011028:	d1c2      	bne.n	8010fb0 <_printf_float+0xf0>
 801102a:	2b00      	cmp	r3, #0
 801102c:	d1c0      	bne.n	8010fb0 <_printf_float+0xf0>
 801102e:	2301      	movs	r3, #1
 8011030:	e7bd      	b.n	8010fae <_printf_float+0xee>
 8011032:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011036:	d9db      	bls.n	8010ff0 <_printf_float+0x130>
 8011038:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801103c:	d118      	bne.n	8011070 <_printf_float+0x1b0>
 801103e:	2900      	cmp	r1, #0
 8011040:	6863      	ldr	r3, [r4, #4]
 8011042:	dd0b      	ble.n	801105c <_printf_float+0x19c>
 8011044:	6121      	str	r1, [r4, #16]
 8011046:	b913      	cbnz	r3, 801104e <_printf_float+0x18e>
 8011048:	6822      	ldr	r2, [r4, #0]
 801104a:	07d0      	lsls	r0, r2, #31
 801104c:	d502      	bpl.n	8011054 <_printf_float+0x194>
 801104e:	3301      	adds	r3, #1
 8011050:	440b      	add	r3, r1
 8011052:	6123      	str	r3, [r4, #16]
 8011054:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011056:	f04f 0900 	mov.w	r9, #0
 801105a:	e7db      	b.n	8011014 <_printf_float+0x154>
 801105c:	b913      	cbnz	r3, 8011064 <_printf_float+0x1a4>
 801105e:	6822      	ldr	r2, [r4, #0]
 8011060:	07d2      	lsls	r2, r2, #31
 8011062:	d501      	bpl.n	8011068 <_printf_float+0x1a8>
 8011064:	3302      	adds	r3, #2
 8011066:	e7f4      	b.n	8011052 <_printf_float+0x192>
 8011068:	2301      	movs	r3, #1
 801106a:	e7f2      	b.n	8011052 <_printf_float+0x192>
 801106c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011072:	4299      	cmp	r1, r3
 8011074:	db05      	blt.n	8011082 <_printf_float+0x1c2>
 8011076:	6823      	ldr	r3, [r4, #0]
 8011078:	6121      	str	r1, [r4, #16]
 801107a:	07d8      	lsls	r0, r3, #31
 801107c:	d5ea      	bpl.n	8011054 <_printf_float+0x194>
 801107e:	1c4b      	adds	r3, r1, #1
 8011080:	e7e7      	b.n	8011052 <_printf_float+0x192>
 8011082:	2900      	cmp	r1, #0
 8011084:	bfd4      	ite	le
 8011086:	f1c1 0202 	rsble	r2, r1, #2
 801108a:	2201      	movgt	r2, #1
 801108c:	4413      	add	r3, r2
 801108e:	e7e0      	b.n	8011052 <_printf_float+0x192>
 8011090:	6823      	ldr	r3, [r4, #0]
 8011092:	055a      	lsls	r2, r3, #21
 8011094:	d407      	bmi.n	80110a6 <_printf_float+0x1e6>
 8011096:	6923      	ldr	r3, [r4, #16]
 8011098:	4642      	mov	r2, r8
 801109a:	4631      	mov	r1, r6
 801109c:	4628      	mov	r0, r5
 801109e:	47b8      	blx	r7
 80110a0:	3001      	adds	r0, #1
 80110a2:	d12b      	bne.n	80110fc <_printf_float+0x23c>
 80110a4:	e767      	b.n	8010f76 <_printf_float+0xb6>
 80110a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80110aa:	f240 80dd 	bls.w	8011268 <_printf_float+0x3a8>
 80110ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80110b2:	2200      	movs	r2, #0
 80110b4:	2300      	movs	r3, #0
 80110b6:	f7ef fd2f 	bl	8000b18 <__aeabi_dcmpeq>
 80110ba:	2800      	cmp	r0, #0
 80110bc:	d033      	beq.n	8011126 <_printf_float+0x266>
 80110be:	4a37      	ldr	r2, [pc, #220]	@ (801119c <_printf_float+0x2dc>)
 80110c0:	2301      	movs	r3, #1
 80110c2:	4631      	mov	r1, r6
 80110c4:	4628      	mov	r0, r5
 80110c6:	47b8      	blx	r7
 80110c8:	3001      	adds	r0, #1
 80110ca:	f43f af54 	beq.w	8010f76 <_printf_float+0xb6>
 80110ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80110d2:	4543      	cmp	r3, r8
 80110d4:	db02      	blt.n	80110dc <_printf_float+0x21c>
 80110d6:	6823      	ldr	r3, [r4, #0]
 80110d8:	07d8      	lsls	r0, r3, #31
 80110da:	d50f      	bpl.n	80110fc <_printf_float+0x23c>
 80110dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80110e0:	4631      	mov	r1, r6
 80110e2:	4628      	mov	r0, r5
 80110e4:	47b8      	blx	r7
 80110e6:	3001      	adds	r0, #1
 80110e8:	f43f af45 	beq.w	8010f76 <_printf_float+0xb6>
 80110ec:	f04f 0900 	mov.w	r9, #0
 80110f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80110f4:	f104 0a1a 	add.w	sl, r4, #26
 80110f8:	45c8      	cmp	r8, r9
 80110fa:	dc09      	bgt.n	8011110 <_printf_float+0x250>
 80110fc:	6823      	ldr	r3, [r4, #0]
 80110fe:	079b      	lsls	r3, r3, #30
 8011100:	f100 8103 	bmi.w	801130a <_printf_float+0x44a>
 8011104:	68e0      	ldr	r0, [r4, #12]
 8011106:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011108:	4298      	cmp	r0, r3
 801110a:	bfb8      	it	lt
 801110c:	4618      	movlt	r0, r3
 801110e:	e734      	b.n	8010f7a <_printf_float+0xba>
 8011110:	2301      	movs	r3, #1
 8011112:	4652      	mov	r2, sl
 8011114:	4631      	mov	r1, r6
 8011116:	4628      	mov	r0, r5
 8011118:	47b8      	blx	r7
 801111a:	3001      	adds	r0, #1
 801111c:	f43f af2b 	beq.w	8010f76 <_printf_float+0xb6>
 8011120:	f109 0901 	add.w	r9, r9, #1
 8011124:	e7e8      	b.n	80110f8 <_printf_float+0x238>
 8011126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011128:	2b00      	cmp	r3, #0
 801112a:	dc39      	bgt.n	80111a0 <_printf_float+0x2e0>
 801112c:	4a1b      	ldr	r2, [pc, #108]	@ (801119c <_printf_float+0x2dc>)
 801112e:	2301      	movs	r3, #1
 8011130:	4631      	mov	r1, r6
 8011132:	4628      	mov	r0, r5
 8011134:	47b8      	blx	r7
 8011136:	3001      	adds	r0, #1
 8011138:	f43f af1d 	beq.w	8010f76 <_printf_float+0xb6>
 801113c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011140:	ea59 0303 	orrs.w	r3, r9, r3
 8011144:	d102      	bne.n	801114c <_printf_float+0x28c>
 8011146:	6823      	ldr	r3, [r4, #0]
 8011148:	07d9      	lsls	r1, r3, #31
 801114a:	d5d7      	bpl.n	80110fc <_printf_float+0x23c>
 801114c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011150:	4631      	mov	r1, r6
 8011152:	4628      	mov	r0, r5
 8011154:	47b8      	blx	r7
 8011156:	3001      	adds	r0, #1
 8011158:	f43f af0d 	beq.w	8010f76 <_printf_float+0xb6>
 801115c:	f04f 0a00 	mov.w	sl, #0
 8011160:	f104 0b1a 	add.w	fp, r4, #26
 8011164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011166:	425b      	negs	r3, r3
 8011168:	4553      	cmp	r3, sl
 801116a:	dc01      	bgt.n	8011170 <_printf_float+0x2b0>
 801116c:	464b      	mov	r3, r9
 801116e:	e793      	b.n	8011098 <_printf_float+0x1d8>
 8011170:	2301      	movs	r3, #1
 8011172:	465a      	mov	r2, fp
 8011174:	4631      	mov	r1, r6
 8011176:	4628      	mov	r0, r5
 8011178:	47b8      	blx	r7
 801117a:	3001      	adds	r0, #1
 801117c:	f43f aefb 	beq.w	8010f76 <_printf_float+0xb6>
 8011180:	f10a 0a01 	add.w	sl, sl, #1
 8011184:	e7ee      	b.n	8011164 <_printf_float+0x2a4>
 8011186:	bf00      	nop
 8011188:	7fefffff 	.word	0x7fefffff
 801118c:	080137cf 	.word	0x080137cf
 8011190:	080137cb 	.word	0x080137cb
 8011194:	080137d7 	.word	0x080137d7
 8011198:	080137d3 	.word	0x080137d3
 801119c:	080137db 	.word	0x080137db
 80111a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80111a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80111a6:	4553      	cmp	r3, sl
 80111a8:	bfa8      	it	ge
 80111aa:	4653      	movge	r3, sl
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	4699      	mov	r9, r3
 80111b0:	dc36      	bgt.n	8011220 <_printf_float+0x360>
 80111b2:	f04f 0b00 	mov.w	fp, #0
 80111b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80111ba:	f104 021a 	add.w	r2, r4, #26
 80111be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80111c0:	9306      	str	r3, [sp, #24]
 80111c2:	eba3 0309 	sub.w	r3, r3, r9
 80111c6:	455b      	cmp	r3, fp
 80111c8:	dc31      	bgt.n	801122e <_printf_float+0x36e>
 80111ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111cc:	459a      	cmp	sl, r3
 80111ce:	dc3a      	bgt.n	8011246 <_printf_float+0x386>
 80111d0:	6823      	ldr	r3, [r4, #0]
 80111d2:	07da      	lsls	r2, r3, #31
 80111d4:	d437      	bmi.n	8011246 <_printf_float+0x386>
 80111d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111d8:	ebaa 0903 	sub.w	r9, sl, r3
 80111dc:	9b06      	ldr	r3, [sp, #24]
 80111de:	ebaa 0303 	sub.w	r3, sl, r3
 80111e2:	4599      	cmp	r9, r3
 80111e4:	bfa8      	it	ge
 80111e6:	4699      	movge	r9, r3
 80111e8:	f1b9 0f00 	cmp.w	r9, #0
 80111ec:	dc33      	bgt.n	8011256 <_printf_float+0x396>
 80111ee:	f04f 0800 	mov.w	r8, #0
 80111f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80111f6:	f104 0b1a 	add.w	fp, r4, #26
 80111fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111fc:	ebaa 0303 	sub.w	r3, sl, r3
 8011200:	eba3 0309 	sub.w	r3, r3, r9
 8011204:	4543      	cmp	r3, r8
 8011206:	f77f af79 	ble.w	80110fc <_printf_float+0x23c>
 801120a:	2301      	movs	r3, #1
 801120c:	465a      	mov	r2, fp
 801120e:	4631      	mov	r1, r6
 8011210:	4628      	mov	r0, r5
 8011212:	47b8      	blx	r7
 8011214:	3001      	adds	r0, #1
 8011216:	f43f aeae 	beq.w	8010f76 <_printf_float+0xb6>
 801121a:	f108 0801 	add.w	r8, r8, #1
 801121e:	e7ec      	b.n	80111fa <_printf_float+0x33a>
 8011220:	4642      	mov	r2, r8
 8011222:	4631      	mov	r1, r6
 8011224:	4628      	mov	r0, r5
 8011226:	47b8      	blx	r7
 8011228:	3001      	adds	r0, #1
 801122a:	d1c2      	bne.n	80111b2 <_printf_float+0x2f2>
 801122c:	e6a3      	b.n	8010f76 <_printf_float+0xb6>
 801122e:	2301      	movs	r3, #1
 8011230:	4631      	mov	r1, r6
 8011232:	4628      	mov	r0, r5
 8011234:	9206      	str	r2, [sp, #24]
 8011236:	47b8      	blx	r7
 8011238:	3001      	adds	r0, #1
 801123a:	f43f ae9c 	beq.w	8010f76 <_printf_float+0xb6>
 801123e:	9a06      	ldr	r2, [sp, #24]
 8011240:	f10b 0b01 	add.w	fp, fp, #1
 8011244:	e7bb      	b.n	80111be <_printf_float+0x2fe>
 8011246:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801124a:	4631      	mov	r1, r6
 801124c:	4628      	mov	r0, r5
 801124e:	47b8      	blx	r7
 8011250:	3001      	adds	r0, #1
 8011252:	d1c0      	bne.n	80111d6 <_printf_float+0x316>
 8011254:	e68f      	b.n	8010f76 <_printf_float+0xb6>
 8011256:	9a06      	ldr	r2, [sp, #24]
 8011258:	464b      	mov	r3, r9
 801125a:	4442      	add	r2, r8
 801125c:	4631      	mov	r1, r6
 801125e:	4628      	mov	r0, r5
 8011260:	47b8      	blx	r7
 8011262:	3001      	adds	r0, #1
 8011264:	d1c3      	bne.n	80111ee <_printf_float+0x32e>
 8011266:	e686      	b.n	8010f76 <_printf_float+0xb6>
 8011268:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801126c:	f1ba 0f01 	cmp.w	sl, #1
 8011270:	dc01      	bgt.n	8011276 <_printf_float+0x3b6>
 8011272:	07db      	lsls	r3, r3, #31
 8011274:	d536      	bpl.n	80112e4 <_printf_float+0x424>
 8011276:	2301      	movs	r3, #1
 8011278:	4642      	mov	r2, r8
 801127a:	4631      	mov	r1, r6
 801127c:	4628      	mov	r0, r5
 801127e:	47b8      	blx	r7
 8011280:	3001      	adds	r0, #1
 8011282:	f43f ae78 	beq.w	8010f76 <_printf_float+0xb6>
 8011286:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801128a:	4631      	mov	r1, r6
 801128c:	4628      	mov	r0, r5
 801128e:	47b8      	blx	r7
 8011290:	3001      	adds	r0, #1
 8011292:	f43f ae70 	beq.w	8010f76 <_printf_float+0xb6>
 8011296:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801129a:	2200      	movs	r2, #0
 801129c:	2300      	movs	r3, #0
 801129e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80112a2:	f7ef fc39 	bl	8000b18 <__aeabi_dcmpeq>
 80112a6:	b9c0      	cbnz	r0, 80112da <_printf_float+0x41a>
 80112a8:	4653      	mov	r3, sl
 80112aa:	f108 0201 	add.w	r2, r8, #1
 80112ae:	4631      	mov	r1, r6
 80112b0:	4628      	mov	r0, r5
 80112b2:	47b8      	blx	r7
 80112b4:	3001      	adds	r0, #1
 80112b6:	d10c      	bne.n	80112d2 <_printf_float+0x412>
 80112b8:	e65d      	b.n	8010f76 <_printf_float+0xb6>
 80112ba:	2301      	movs	r3, #1
 80112bc:	465a      	mov	r2, fp
 80112be:	4631      	mov	r1, r6
 80112c0:	4628      	mov	r0, r5
 80112c2:	47b8      	blx	r7
 80112c4:	3001      	adds	r0, #1
 80112c6:	f43f ae56 	beq.w	8010f76 <_printf_float+0xb6>
 80112ca:	f108 0801 	add.w	r8, r8, #1
 80112ce:	45d0      	cmp	r8, sl
 80112d0:	dbf3      	blt.n	80112ba <_printf_float+0x3fa>
 80112d2:	464b      	mov	r3, r9
 80112d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80112d8:	e6df      	b.n	801109a <_printf_float+0x1da>
 80112da:	f04f 0800 	mov.w	r8, #0
 80112de:	f104 0b1a 	add.w	fp, r4, #26
 80112e2:	e7f4      	b.n	80112ce <_printf_float+0x40e>
 80112e4:	2301      	movs	r3, #1
 80112e6:	4642      	mov	r2, r8
 80112e8:	e7e1      	b.n	80112ae <_printf_float+0x3ee>
 80112ea:	2301      	movs	r3, #1
 80112ec:	464a      	mov	r2, r9
 80112ee:	4631      	mov	r1, r6
 80112f0:	4628      	mov	r0, r5
 80112f2:	47b8      	blx	r7
 80112f4:	3001      	adds	r0, #1
 80112f6:	f43f ae3e 	beq.w	8010f76 <_printf_float+0xb6>
 80112fa:	f108 0801 	add.w	r8, r8, #1
 80112fe:	68e3      	ldr	r3, [r4, #12]
 8011300:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011302:	1a5b      	subs	r3, r3, r1
 8011304:	4543      	cmp	r3, r8
 8011306:	dcf0      	bgt.n	80112ea <_printf_float+0x42a>
 8011308:	e6fc      	b.n	8011104 <_printf_float+0x244>
 801130a:	f04f 0800 	mov.w	r8, #0
 801130e:	f104 0919 	add.w	r9, r4, #25
 8011312:	e7f4      	b.n	80112fe <_printf_float+0x43e>

08011314 <_printf_common>:
 8011314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011318:	4616      	mov	r6, r2
 801131a:	4698      	mov	r8, r3
 801131c:	688a      	ldr	r2, [r1, #8]
 801131e:	690b      	ldr	r3, [r1, #16]
 8011320:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011324:	4293      	cmp	r3, r2
 8011326:	bfb8      	it	lt
 8011328:	4613      	movlt	r3, r2
 801132a:	6033      	str	r3, [r6, #0]
 801132c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011330:	4607      	mov	r7, r0
 8011332:	460c      	mov	r4, r1
 8011334:	b10a      	cbz	r2, 801133a <_printf_common+0x26>
 8011336:	3301      	adds	r3, #1
 8011338:	6033      	str	r3, [r6, #0]
 801133a:	6823      	ldr	r3, [r4, #0]
 801133c:	0699      	lsls	r1, r3, #26
 801133e:	bf42      	ittt	mi
 8011340:	6833      	ldrmi	r3, [r6, #0]
 8011342:	3302      	addmi	r3, #2
 8011344:	6033      	strmi	r3, [r6, #0]
 8011346:	6825      	ldr	r5, [r4, #0]
 8011348:	f015 0506 	ands.w	r5, r5, #6
 801134c:	d106      	bne.n	801135c <_printf_common+0x48>
 801134e:	f104 0a19 	add.w	sl, r4, #25
 8011352:	68e3      	ldr	r3, [r4, #12]
 8011354:	6832      	ldr	r2, [r6, #0]
 8011356:	1a9b      	subs	r3, r3, r2
 8011358:	42ab      	cmp	r3, r5
 801135a:	dc26      	bgt.n	80113aa <_printf_common+0x96>
 801135c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011360:	6822      	ldr	r2, [r4, #0]
 8011362:	3b00      	subs	r3, #0
 8011364:	bf18      	it	ne
 8011366:	2301      	movne	r3, #1
 8011368:	0692      	lsls	r2, r2, #26
 801136a:	d42b      	bmi.n	80113c4 <_printf_common+0xb0>
 801136c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011370:	4641      	mov	r1, r8
 8011372:	4638      	mov	r0, r7
 8011374:	47c8      	blx	r9
 8011376:	3001      	adds	r0, #1
 8011378:	d01e      	beq.n	80113b8 <_printf_common+0xa4>
 801137a:	6823      	ldr	r3, [r4, #0]
 801137c:	6922      	ldr	r2, [r4, #16]
 801137e:	f003 0306 	and.w	r3, r3, #6
 8011382:	2b04      	cmp	r3, #4
 8011384:	bf02      	ittt	eq
 8011386:	68e5      	ldreq	r5, [r4, #12]
 8011388:	6833      	ldreq	r3, [r6, #0]
 801138a:	1aed      	subeq	r5, r5, r3
 801138c:	68a3      	ldr	r3, [r4, #8]
 801138e:	bf0c      	ite	eq
 8011390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011394:	2500      	movne	r5, #0
 8011396:	4293      	cmp	r3, r2
 8011398:	bfc4      	itt	gt
 801139a:	1a9b      	subgt	r3, r3, r2
 801139c:	18ed      	addgt	r5, r5, r3
 801139e:	2600      	movs	r6, #0
 80113a0:	341a      	adds	r4, #26
 80113a2:	42b5      	cmp	r5, r6
 80113a4:	d11a      	bne.n	80113dc <_printf_common+0xc8>
 80113a6:	2000      	movs	r0, #0
 80113a8:	e008      	b.n	80113bc <_printf_common+0xa8>
 80113aa:	2301      	movs	r3, #1
 80113ac:	4652      	mov	r2, sl
 80113ae:	4641      	mov	r1, r8
 80113b0:	4638      	mov	r0, r7
 80113b2:	47c8      	blx	r9
 80113b4:	3001      	adds	r0, #1
 80113b6:	d103      	bne.n	80113c0 <_printf_common+0xac>
 80113b8:	f04f 30ff 	mov.w	r0, #4294967295
 80113bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113c0:	3501      	adds	r5, #1
 80113c2:	e7c6      	b.n	8011352 <_printf_common+0x3e>
 80113c4:	18e1      	adds	r1, r4, r3
 80113c6:	1c5a      	adds	r2, r3, #1
 80113c8:	2030      	movs	r0, #48	@ 0x30
 80113ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80113ce:	4422      	add	r2, r4
 80113d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80113d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80113d8:	3302      	adds	r3, #2
 80113da:	e7c7      	b.n	801136c <_printf_common+0x58>
 80113dc:	2301      	movs	r3, #1
 80113de:	4622      	mov	r2, r4
 80113e0:	4641      	mov	r1, r8
 80113e2:	4638      	mov	r0, r7
 80113e4:	47c8      	blx	r9
 80113e6:	3001      	adds	r0, #1
 80113e8:	d0e6      	beq.n	80113b8 <_printf_common+0xa4>
 80113ea:	3601      	adds	r6, #1
 80113ec:	e7d9      	b.n	80113a2 <_printf_common+0x8e>
	...

080113f0 <_printf_i>:
 80113f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80113f4:	7e0f      	ldrb	r7, [r1, #24]
 80113f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80113f8:	2f78      	cmp	r7, #120	@ 0x78
 80113fa:	4691      	mov	r9, r2
 80113fc:	4680      	mov	r8, r0
 80113fe:	460c      	mov	r4, r1
 8011400:	469a      	mov	sl, r3
 8011402:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011406:	d807      	bhi.n	8011418 <_printf_i+0x28>
 8011408:	2f62      	cmp	r7, #98	@ 0x62
 801140a:	d80a      	bhi.n	8011422 <_printf_i+0x32>
 801140c:	2f00      	cmp	r7, #0
 801140e:	f000 80d1 	beq.w	80115b4 <_printf_i+0x1c4>
 8011412:	2f58      	cmp	r7, #88	@ 0x58
 8011414:	f000 80b8 	beq.w	8011588 <_printf_i+0x198>
 8011418:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801141c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011420:	e03a      	b.n	8011498 <_printf_i+0xa8>
 8011422:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011426:	2b15      	cmp	r3, #21
 8011428:	d8f6      	bhi.n	8011418 <_printf_i+0x28>
 801142a:	a101      	add	r1, pc, #4	@ (adr r1, 8011430 <_printf_i+0x40>)
 801142c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011430:	08011489 	.word	0x08011489
 8011434:	0801149d 	.word	0x0801149d
 8011438:	08011419 	.word	0x08011419
 801143c:	08011419 	.word	0x08011419
 8011440:	08011419 	.word	0x08011419
 8011444:	08011419 	.word	0x08011419
 8011448:	0801149d 	.word	0x0801149d
 801144c:	08011419 	.word	0x08011419
 8011450:	08011419 	.word	0x08011419
 8011454:	08011419 	.word	0x08011419
 8011458:	08011419 	.word	0x08011419
 801145c:	0801159b 	.word	0x0801159b
 8011460:	080114c7 	.word	0x080114c7
 8011464:	08011555 	.word	0x08011555
 8011468:	08011419 	.word	0x08011419
 801146c:	08011419 	.word	0x08011419
 8011470:	080115bd 	.word	0x080115bd
 8011474:	08011419 	.word	0x08011419
 8011478:	080114c7 	.word	0x080114c7
 801147c:	08011419 	.word	0x08011419
 8011480:	08011419 	.word	0x08011419
 8011484:	0801155d 	.word	0x0801155d
 8011488:	6833      	ldr	r3, [r6, #0]
 801148a:	1d1a      	adds	r2, r3, #4
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	6032      	str	r2, [r6, #0]
 8011490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011494:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011498:	2301      	movs	r3, #1
 801149a:	e09c      	b.n	80115d6 <_printf_i+0x1e6>
 801149c:	6833      	ldr	r3, [r6, #0]
 801149e:	6820      	ldr	r0, [r4, #0]
 80114a0:	1d19      	adds	r1, r3, #4
 80114a2:	6031      	str	r1, [r6, #0]
 80114a4:	0606      	lsls	r6, r0, #24
 80114a6:	d501      	bpl.n	80114ac <_printf_i+0xbc>
 80114a8:	681d      	ldr	r5, [r3, #0]
 80114aa:	e003      	b.n	80114b4 <_printf_i+0xc4>
 80114ac:	0645      	lsls	r5, r0, #25
 80114ae:	d5fb      	bpl.n	80114a8 <_printf_i+0xb8>
 80114b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80114b4:	2d00      	cmp	r5, #0
 80114b6:	da03      	bge.n	80114c0 <_printf_i+0xd0>
 80114b8:	232d      	movs	r3, #45	@ 0x2d
 80114ba:	426d      	negs	r5, r5
 80114bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80114c0:	4858      	ldr	r0, [pc, #352]	@ (8011624 <_printf_i+0x234>)
 80114c2:	230a      	movs	r3, #10
 80114c4:	e011      	b.n	80114ea <_printf_i+0xfa>
 80114c6:	6821      	ldr	r1, [r4, #0]
 80114c8:	6833      	ldr	r3, [r6, #0]
 80114ca:	0608      	lsls	r0, r1, #24
 80114cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80114d0:	d402      	bmi.n	80114d8 <_printf_i+0xe8>
 80114d2:	0649      	lsls	r1, r1, #25
 80114d4:	bf48      	it	mi
 80114d6:	b2ad      	uxthmi	r5, r5
 80114d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80114da:	4852      	ldr	r0, [pc, #328]	@ (8011624 <_printf_i+0x234>)
 80114dc:	6033      	str	r3, [r6, #0]
 80114de:	bf14      	ite	ne
 80114e0:	230a      	movne	r3, #10
 80114e2:	2308      	moveq	r3, #8
 80114e4:	2100      	movs	r1, #0
 80114e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80114ea:	6866      	ldr	r6, [r4, #4]
 80114ec:	60a6      	str	r6, [r4, #8]
 80114ee:	2e00      	cmp	r6, #0
 80114f0:	db05      	blt.n	80114fe <_printf_i+0x10e>
 80114f2:	6821      	ldr	r1, [r4, #0]
 80114f4:	432e      	orrs	r6, r5
 80114f6:	f021 0104 	bic.w	r1, r1, #4
 80114fa:	6021      	str	r1, [r4, #0]
 80114fc:	d04b      	beq.n	8011596 <_printf_i+0x1a6>
 80114fe:	4616      	mov	r6, r2
 8011500:	fbb5 f1f3 	udiv	r1, r5, r3
 8011504:	fb03 5711 	mls	r7, r3, r1, r5
 8011508:	5dc7      	ldrb	r7, [r0, r7]
 801150a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801150e:	462f      	mov	r7, r5
 8011510:	42bb      	cmp	r3, r7
 8011512:	460d      	mov	r5, r1
 8011514:	d9f4      	bls.n	8011500 <_printf_i+0x110>
 8011516:	2b08      	cmp	r3, #8
 8011518:	d10b      	bne.n	8011532 <_printf_i+0x142>
 801151a:	6823      	ldr	r3, [r4, #0]
 801151c:	07df      	lsls	r7, r3, #31
 801151e:	d508      	bpl.n	8011532 <_printf_i+0x142>
 8011520:	6923      	ldr	r3, [r4, #16]
 8011522:	6861      	ldr	r1, [r4, #4]
 8011524:	4299      	cmp	r1, r3
 8011526:	bfde      	ittt	le
 8011528:	2330      	movle	r3, #48	@ 0x30
 801152a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801152e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011532:	1b92      	subs	r2, r2, r6
 8011534:	6122      	str	r2, [r4, #16]
 8011536:	f8cd a000 	str.w	sl, [sp]
 801153a:	464b      	mov	r3, r9
 801153c:	aa03      	add	r2, sp, #12
 801153e:	4621      	mov	r1, r4
 8011540:	4640      	mov	r0, r8
 8011542:	f7ff fee7 	bl	8011314 <_printf_common>
 8011546:	3001      	adds	r0, #1
 8011548:	d14a      	bne.n	80115e0 <_printf_i+0x1f0>
 801154a:	f04f 30ff 	mov.w	r0, #4294967295
 801154e:	b004      	add	sp, #16
 8011550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011554:	6823      	ldr	r3, [r4, #0]
 8011556:	f043 0320 	orr.w	r3, r3, #32
 801155a:	6023      	str	r3, [r4, #0]
 801155c:	4832      	ldr	r0, [pc, #200]	@ (8011628 <_printf_i+0x238>)
 801155e:	2778      	movs	r7, #120	@ 0x78
 8011560:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011564:	6823      	ldr	r3, [r4, #0]
 8011566:	6831      	ldr	r1, [r6, #0]
 8011568:	061f      	lsls	r7, r3, #24
 801156a:	f851 5b04 	ldr.w	r5, [r1], #4
 801156e:	d402      	bmi.n	8011576 <_printf_i+0x186>
 8011570:	065f      	lsls	r7, r3, #25
 8011572:	bf48      	it	mi
 8011574:	b2ad      	uxthmi	r5, r5
 8011576:	6031      	str	r1, [r6, #0]
 8011578:	07d9      	lsls	r1, r3, #31
 801157a:	bf44      	itt	mi
 801157c:	f043 0320 	orrmi.w	r3, r3, #32
 8011580:	6023      	strmi	r3, [r4, #0]
 8011582:	b11d      	cbz	r5, 801158c <_printf_i+0x19c>
 8011584:	2310      	movs	r3, #16
 8011586:	e7ad      	b.n	80114e4 <_printf_i+0xf4>
 8011588:	4826      	ldr	r0, [pc, #152]	@ (8011624 <_printf_i+0x234>)
 801158a:	e7e9      	b.n	8011560 <_printf_i+0x170>
 801158c:	6823      	ldr	r3, [r4, #0]
 801158e:	f023 0320 	bic.w	r3, r3, #32
 8011592:	6023      	str	r3, [r4, #0]
 8011594:	e7f6      	b.n	8011584 <_printf_i+0x194>
 8011596:	4616      	mov	r6, r2
 8011598:	e7bd      	b.n	8011516 <_printf_i+0x126>
 801159a:	6833      	ldr	r3, [r6, #0]
 801159c:	6825      	ldr	r5, [r4, #0]
 801159e:	6961      	ldr	r1, [r4, #20]
 80115a0:	1d18      	adds	r0, r3, #4
 80115a2:	6030      	str	r0, [r6, #0]
 80115a4:	062e      	lsls	r6, r5, #24
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	d501      	bpl.n	80115ae <_printf_i+0x1be>
 80115aa:	6019      	str	r1, [r3, #0]
 80115ac:	e002      	b.n	80115b4 <_printf_i+0x1c4>
 80115ae:	0668      	lsls	r0, r5, #25
 80115b0:	d5fb      	bpl.n	80115aa <_printf_i+0x1ba>
 80115b2:	8019      	strh	r1, [r3, #0]
 80115b4:	2300      	movs	r3, #0
 80115b6:	6123      	str	r3, [r4, #16]
 80115b8:	4616      	mov	r6, r2
 80115ba:	e7bc      	b.n	8011536 <_printf_i+0x146>
 80115bc:	6833      	ldr	r3, [r6, #0]
 80115be:	1d1a      	adds	r2, r3, #4
 80115c0:	6032      	str	r2, [r6, #0]
 80115c2:	681e      	ldr	r6, [r3, #0]
 80115c4:	6862      	ldr	r2, [r4, #4]
 80115c6:	2100      	movs	r1, #0
 80115c8:	4630      	mov	r0, r6
 80115ca:	f7ee fe29 	bl	8000220 <memchr>
 80115ce:	b108      	cbz	r0, 80115d4 <_printf_i+0x1e4>
 80115d0:	1b80      	subs	r0, r0, r6
 80115d2:	6060      	str	r0, [r4, #4]
 80115d4:	6863      	ldr	r3, [r4, #4]
 80115d6:	6123      	str	r3, [r4, #16]
 80115d8:	2300      	movs	r3, #0
 80115da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80115de:	e7aa      	b.n	8011536 <_printf_i+0x146>
 80115e0:	6923      	ldr	r3, [r4, #16]
 80115e2:	4632      	mov	r2, r6
 80115e4:	4649      	mov	r1, r9
 80115e6:	4640      	mov	r0, r8
 80115e8:	47d0      	blx	sl
 80115ea:	3001      	adds	r0, #1
 80115ec:	d0ad      	beq.n	801154a <_printf_i+0x15a>
 80115ee:	6823      	ldr	r3, [r4, #0]
 80115f0:	079b      	lsls	r3, r3, #30
 80115f2:	d413      	bmi.n	801161c <_printf_i+0x22c>
 80115f4:	68e0      	ldr	r0, [r4, #12]
 80115f6:	9b03      	ldr	r3, [sp, #12]
 80115f8:	4298      	cmp	r0, r3
 80115fa:	bfb8      	it	lt
 80115fc:	4618      	movlt	r0, r3
 80115fe:	e7a6      	b.n	801154e <_printf_i+0x15e>
 8011600:	2301      	movs	r3, #1
 8011602:	4632      	mov	r2, r6
 8011604:	4649      	mov	r1, r9
 8011606:	4640      	mov	r0, r8
 8011608:	47d0      	blx	sl
 801160a:	3001      	adds	r0, #1
 801160c:	d09d      	beq.n	801154a <_printf_i+0x15a>
 801160e:	3501      	adds	r5, #1
 8011610:	68e3      	ldr	r3, [r4, #12]
 8011612:	9903      	ldr	r1, [sp, #12]
 8011614:	1a5b      	subs	r3, r3, r1
 8011616:	42ab      	cmp	r3, r5
 8011618:	dcf2      	bgt.n	8011600 <_printf_i+0x210>
 801161a:	e7eb      	b.n	80115f4 <_printf_i+0x204>
 801161c:	2500      	movs	r5, #0
 801161e:	f104 0619 	add.w	r6, r4, #25
 8011622:	e7f5      	b.n	8011610 <_printf_i+0x220>
 8011624:	080137dd 	.word	0x080137dd
 8011628:	080137ee 	.word	0x080137ee

0801162c <std>:
 801162c:	2300      	movs	r3, #0
 801162e:	b510      	push	{r4, lr}
 8011630:	4604      	mov	r4, r0
 8011632:	e9c0 3300 	strd	r3, r3, [r0]
 8011636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801163a:	6083      	str	r3, [r0, #8]
 801163c:	8181      	strh	r1, [r0, #12]
 801163e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011640:	81c2      	strh	r2, [r0, #14]
 8011642:	6183      	str	r3, [r0, #24]
 8011644:	4619      	mov	r1, r3
 8011646:	2208      	movs	r2, #8
 8011648:	305c      	adds	r0, #92	@ 0x5c
 801164a:	f000 f906 	bl	801185a <memset>
 801164e:	4b0d      	ldr	r3, [pc, #52]	@ (8011684 <std+0x58>)
 8011650:	6263      	str	r3, [r4, #36]	@ 0x24
 8011652:	4b0d      	ldr	r3, [pc, #52]	@ (8011688 <std+0x5c>)
 8011654:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011656:	4b0d      	ldr	r3, [pc, #52]	@ (801168c <std+0x60>)
 8011658:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801165a:	4b0d      	ldr	r3, [pc, #52]	@ (8011690 <std+0x64>)
 801165c:	6323      	str	r3, [r4, #48]	@ 0x30
 801165e:	4b0d      	ldr	r3, [pc, #52]	@ (8011694 <std+0x68>)
 8011660:	6224      	str	r4, [r4, #32]
 8011662:	429c      	cmp	r4, r3
 8011664:	d006      	beq.n	8011674 <std+0x48>
 8011666:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801166a:	4294      	cmp	r4, r2
 801166c:	d002      	beq.n	8011674 <std+0x48>
 801166e:	33d0      	adds	r3, #208	@ 0xd0
 8011670:	429c      	cmp	r4, r3
 8011672:	d105      	bne.n	8011680 <std+0x54>
 8011674:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801167c:	f7f1 baca 	b.w	8002c14 <__retarget_lock_init_recursive>
 8011680:	bd10      	pop	{r4, pc}
 8011682:	bf00      	nop
 8011684:	080117d5 	.word	0x080117d5
 8011688:	080117f7 	.word	0x080117f7
 801168c:	0801182f 	.word	0x0801182f
 8011690:	08011853 	.word	0x08011853
 8011694:	20001544 	.word	0x20001544

08011698 <stdio_exit_handler>:
 8011698:	4a02      	ldr	r2, [pc, #8]	@ (80116a4 <stdio_exit_handler+0xc>)
 801169a:	4903      	ldr	r1, [pc, #12]	@ (80116a8 <stdio_exit_handler+0x10>)
 801169c:	4803      	ldr	r0, [pc, #12]	@ (80116ac <stdio_exit_handler+0x14>)
 801169e:	f000 b869 	b.w	8011774 <_fwalk_sglue>
 80116a2:	bf00      	nop
 80116a4:	200000e0 	.word	0x200000e0
 80116a8:	08013195 	.word	0x08013195
 80116ac:	200000f0 	.word	0x200000f0

080116b0 <cleanup_stdio>:
 80116b0:	6841      	ldr	r1, [r0, #4]
 80116b2:	4b0c      	ldr	r3, [pc, #48]	@ (80116e4 <cleanup_stdio+0x34>)
 80116b4:	4299      	cmp	r1, r3
 80116b6:	b510      	push	{r4, lr}
 80116b8:	4604      	mov	r4, r0
 80116ba:	d001      	beq.n	80116c0 <cleanup_stdio+0x10>
 80116bc:	f001 fd6a 	bl	8013194 <_fflush_r>
 80116c0:	68a1      	ldr	r1, [r4, #8]
 80116c2:	4b09      	ldr	r3, [pc, #36]	@ (80116e8 <cleanup_stdio+0x38>)
 80116c4:	4299      	cmp	r1, r3
 80116c6:	d002      	beq.n	80116ce <cleanup_stdio+0x1e>
 80116c8:	4620      	mov	r0, r4
 80116ca:	f001 fd63 	bl	8013194 <_fflush_r>
 80116ce:	68e1      	ldr	r1, [r4, #12]
 80116d0:	4b06      	ldr	r3, [pc, #24]	@ (80116ec <cleanup_stdio+0x3c>)
 80116d2:	4299      	cmp	r1, r3
 80116d4:	d004      	beq.n	80116e0 <cleanup_stdio+0x30>
 80116d6:	4620      	mov	r0, r4
 80116d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116dc:	f001 bd5a 	b.w	8013194 <_fflush_r>
 80116e0:	bd10      	pop	{r4, pc}
 80116e2:	bf00      	nop
 80116e4:	20001544 	.word	0x20001544
 80116e8:	200015ac 	.word	0x200015ac
 80116ec:	20001614 	.word	0x20001614

080116f0 <global_stdio_init.part.0>:
 80116f0:	b510      	push	{r4, lr}
 80116f2:	4b0b      	ldr	r3, [pc, #44]	@ (8011720 <global_stdio_init.part.0+0x30>)
 80116f4:	4c0b      	ldr	r4, [pc, #44]	@ (8011724 <global_stdio_init.part.0+0x34>)
 80116f6:	4a0c      	ldr	r2, [pc, #48]	@ (8011728 <global_stdio_init.part.0+0x38>)
 80116f8:	601a      	str	r2, [r3, #0]
 80116fa:	4620      	mov	r0, r4
 80116fc:	2200      	movs	r2, #0
 80116fe:	2104      	movs	r1, #4
 8011700:	f7ff ff94 	bl	801162c <std>
 8011704:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011708:	2201      	movs	r2, #1
 801170a:	2109      	movs	r1, #9
 801170c:	f7ff ff8e 	bl	801162c <std>
 8011710:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011714:	2202      	movs	r2, #2
 8011716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801171a:	2112      	movs	r1, #18
 801171c:	f7ff bf86 	b.w	801162c <std>
 8011720:	2000167c 	.word	0x2000167c
 8011724:	20001544 	.word	0x20001544
 8011728:	08011699 	.word	0x08011699

0801172c <__sfp_lock_acquire>:
 801172c:	4801      	ldr	r0, [pc, #4]	@ (8011734 <__sfp_lock_acquire+0x8>)
 801172e:	f7f1 ba98 	b.w	8002c62 <__retarget_lock_acquire_recursive>
 8011732:	bf00      	nop
 8011734:	20000824 	.word	0x20000824

08011738 <__sfp_lock_release>:
 8011738:	4801      	ldr	r0, [pc, #4]	@ (8011740 <__sfp_lock_release+0x8>)
 801173a:	f7f1 baa7 	b.w	8002c8c <__retarget_lock_release_recursive>
 801173e:	bf00      	nop
 8011740:	20000824 	.word	0x20000824

08011744 <__sinit>:
 8011744:	b510      	push	{r4, lr}
 8011746:	4604      	mov	r4, r0
 8011748:	f7ff fff0 	bl	801172c <__sfp_lock_acquire>
 801174c:	6a23      	ldr	r3, [r4, #32]
 801174e:	b11b      	cbz	r3, 8011758 <__sinit+0x14>
 8011750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011754:	f7ff bff0 	b.w	8011738 <__sfp_lock_release>
 8011758:	4b04      	ldr	r3, [pc, #16]	@ (801176c <__sinit+0x28>)
 801175a:	6223      	str	r3, [r4, #32]
 801175c:	4b04      	ldr	r3, [pc, #16]	@ (8011770 <__sinit+0x2c>)
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d1f5      	bne.n	8011750 <__sinit+0xc>
 8011764:	f7ff ffc4 	bl	80116f0 <global_stdio_init.part.0>
 8011768:	e7f2      	b.n	8011750 <__sinit+0xc>
 801176a:	bf00      	nop
 801176c:	080116b1 	.word	0x080116b1
 8011770:	2000167c 	.word	0x2000167c

08011774 <_fwalk_sglue>:
 8011774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011778:	4607      	mov	r7, r0
 801177a:	4688      	mov	r8, r1
 801177c:	4614      	mov	r4, r2
 801177e:	2600      	movs	r6, #0
 8011780:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011784:	f1b9 0901 	subs.w	r9, r9, #1
 8011788:	d505      	bpl.n	8011796 <_fwalk_sglue+0x22>
 801178a:	6824      	ldr	r4, [r4, #0]
 801178c:	2c00      	cmp	r4, #0
 801178e:	d1f7      	bne.n	8011780 <_fwalk_sglue+0xc>
 8011790:	4630      	mov	r0, r6
 8011792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011796:	89ab      	ldrh	r3, [r5, #12]
 8011798:	2b01      	cmp	r3, #1
 801179a:	d907      	bls.n	80117ac <_fwalk_sglue+0x38>
 801179c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80117a0:	3301      	adds	r3, #1
 80117a2:	d003      	beq.n	80117ac <_fwalk_sglue+0x38>
 80117a4:	4629      	mov	r1, r5
 80117a6:	4638      	mov	r0, r7
 80117a8:	47c0      	blx	r8
 80117aa:	4306      	orrs	r6, r0
 80117ac:	3568      	adds	r5, #104	@ 0x68
 80117ae:	e7e9      	b.n	8011784 <_fwalk_sglue+0x10>

080117b0 <iprintf>:
 80117b0:	b40f      	push	{r0, r1, r2, r3}
 80117b2:	b507      	push	{r0, r1, r2, lr}
 80117b4:	4906      	ldr	r1, [pc, #24]	@ (80117d0 <iprintf+0x20>)
 80117b6:	ab04      	add	r3, sp, #16
 80117b8:	6808      	ldr	r0, [r1, #0]
 80117ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80117be:	6881      	ldr	r1, [r0, #8]
 80117c0:	9301      	str	r3, [sp, #4]
 80117c2:	f001 fb4b 	bl	8012e5c <_vfiprintf_r>
 80117c6:	b003      	add	sp, #12
 80117c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80117cc:	b004      	add	sp, #16
 80117ce:	4770      	bx	lr
 80117d0:	200000ec 	.word	0x200000ec

080117d4 <__sread>:
 80117d4:	b510      	push	{r4, lr}
 80117d6:	460c      	mov	r4, r1
 80117d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117dc:	f000 f86c 	bl	80118b8 <_read_r>
 80117e0:	2800      	cmp	r0, #0
 80117e2:	bfab      	itete	ge
 80117e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80117e6:	89a3      	ldrhlt	r3, [r4, #12]
 80117e8:	181b      	addge	r3, r3, r0
 80117ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80117ee:	bfac      	ite	ge
 80117f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80117f2:	81a3      	strhlt	r3, [r4, #12]
 80117f4:	bd10      	pop	{r4, pc}

080117f6 <__swrite>:
 80117f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117fa:	461f      	mov	r7, r3
 80117fc:	898b      	ldrh	r3, [r1, #12]
 80117fe:	05db      	lsls	r3, r3, #23
 8011800:	4605      	mov	r5, r0
 8011802:	460c      	mov	r4, r1
 8011804:	4616      	mov	r6, r2
 8011806:	d505      	bpl.n	8011814 <__swrite+0x1e>
 8011808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801180c:	2302      	movs	r3, #2
 801180e:	2200      	movs	r2, #0
 8011810:	f000 f840 	bl	8011894 <_lseek_r>
 8011814:	89a3      	ldrh	r3, [r4, #12]
 8011816:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801181a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801181e:	81a3      	strh	r3, [r4, #12]
 8011820:	4632      	mov	r2, r6
 8011822:	463b      	mov	r3, r7
 8011824:	4628      	mov	r0, r5
 8011826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801182a:	f000 b867 	b.w	80118fc <_write_r>

0801182e <__sseek>:
 801182e:	b510      	push	{r4, lr}
 8011830:	460c      	mov	r4, r1
 8011832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011836:	f000 f82d 	bl	8011894 <_lseek_r>
 801183a:	1c43      	adds	r3, r0, #1
 801183c:	89a3      	ldrh	r3, [r4, #12]
 801183e:	bf15      	itete	ne
 8011840:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011842:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011846:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801184a:	81a3      	strheq	r3, [r4, #12]
 801184c:	bf18      	it	ne
 801184e:	81a3      	strhne	r3, [r4, #12]
 8011850:	bd10      	pop	{r4, pc}

08011852 <__sclose>:
 8011852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011856:	f000 b80d 	b.w	8011874 <_close_r>

0801185a <memset>:
 801185a:	4402      	add	r2, r0
 801185c:	4603      	mov	r3, r0
 801185e:	4293      	cmp	r3, r2
 8011860:	d100      	bne.n	8011864 <memset+0xa>
 8011862:	4770      	bx	lr
 8011864:	f803 1b01 	strb.w	r1, [r3], #1
 8011868:	e7f9      	b.n	801185e <memset+0x4>
	...

0801186c <_localeconv_r>:
 801186c:	4800      	ldr	r0, [pc, #0]	@ (8011870 <_localeconv_r+0x4>)
 801186e:	4770      	bx	lr
 8011870:	2000022c 	.word	0x2000022c

08011874 <_close_r>:
 8011874:	b538      	push	{r3, r4, r5, lr}
 8011876:	4d06      	ldr	r5, [pc, #24]	@ (8011890 <_close_r+0x1c>)
 8011878:	2300      	movs	r3, #0
 801187a:	4604      	mov	r4, r0
 801187c:	4608      	mov	r0, r1
 801187e:	602b      	str	r3, [r5, #0]
 8011880:	f7f1 f8a8 	bl	80029d4 <_close>
 8011884:	1c43      	adds	r3, r0, #1
 8011886:	d102      	bne.n	801188e <_close_r+0x1a>
 8011888:	682b      	ldr	r3, [r5, #0]
 801188a:	b103      	cbz	r3, 801188e <_close_r+0x1a>
 801188c:	6023      	str	r3, [r4, #0]
 801188e:	bd38      	pop	{r3, r4, r5, pc}
 8011890:	20001680 	.word	0x20001680

08011894 <_lseek_r>:
 8011894:	b538      	push	{r3, r4, r5, lr}
 8011896:	4d07      	ldr	r5, [pc, #28]	@ (80118b4 <_lseek_r+0x20>)
 8011898:	4604      	mov	r4, r0
 801189a:	4608      	mov	r0, r1
 801189c:	4611      	mov	r1, r2
 801189e:	2200      	movs	r2, #0
 80118a0:	602a      	str	r2, [r5, #0]
 80118a2:	461a      	mov	r2, r3
 80118a4:	f7f1 f8bd 	bl	8002a22 <_lseek>
 80118a8:	1c43      	adds	r3, r0, #1
 80118aa:	d102      	bne.n	80118b2 <_lseek_r+0x1e>
 80118ac:	682b      	ldr	r3, [r5, #0]
 80118ae:	b103      	cbz	r3, 80118b2 <_lseek_r+0x1e>
 80118b0:	6023      	str	r3, [r4, #0]
 80118b2:	bd38      	pop	{r3, r4, r5, pc}
 80118b4:	20001680 	.word	0x20001680

080118b8 <_read_r>:
 80118b8:	b538      	push	{r3, r4, r5, lr}
 80118ba:	4d07      	ldr	r5, [pc, #28]	@ (80118d8 <_read_r+0x20>)
 80118bc:	4604      	mov	r4, r0
 80118be:	4608      	mov	r0, r1
 80118c0:	4611      	mov	r1, r2
 80118c2:	2200      	movs	r2, #0
 80118c4:	602a      	str	r2, [r5, #0]
 80118c6:	461a      	mov	r2, r3
 80118c8:	f7f1 f867 	bl	800299a <_read>
 80118cc:	1c43      	adds	r3, r0, #1
 80118ce:	d102      	bne.n	80118d6 <_read_r+0x1e>
 80118d0:	682b      	ldr	r3, [r5, #0]
 80118d2:	b103      	cbz	r3, 80118d6 <_read_r+0x1e>
 80118d4:	6023      	str	r3, [r4, #0]
 80118d6:	bd38      	pop	{r3, r4, r5, pc}
 80118d8:	20001680 	.word	0x20001680

080118dc <_sbrk_r>:
 80118dc:	b538      	push	{r3, r4, r5, lr}
 80118de:	4d06      	ldr	r5, [pc, #24]	@ (80118f8 <_sbrk_r+0x1c>)
 80118e0:	2300      	movs	r3, #0
 80118e2:	4604      	mov	r4, r0
 80118e4:	4608      	mov	r0, r1
 80118e6:	602b      	str	r3, [r5, #0]
 80118e8:	f7f1 f8a8 	bl	8002a3c <_sbrk>
 80118ec:	1c43      	adds	r3, r0, #1
 80118ee:	d102      	bne.n	80118f6 <_sbrk_r+0x1a>
 80118f0:	682b      	ldr	r3, [r5, #0]
 80118f2:	b103      	cbz	r3, 80118f6 <_sbrk_r+0x1a>
 80118f4:	6023      	str	r3, [r4, #0]
 80118f6:	bd38      	pop	{r3, r4, r5, pc}
 80118f8:	20001680 	.word	0x20001680

080118fc <_write_r>:
 80118fc:	b538      	push	{r3, r4, r5, lr}
 80118fe:	4d07      	ldr	r5, [pc, #28]	@ (801191c <_write_r+0x20>)
 8011900:	4604      	mov	r4, r0
 8011902:	4608      	mov	r0, r1
 8011904:	4611      	mov	r1, r2
 8011906:	2200      	movs	r2, #0
 8011908:	602a      	str	r2, [r5, #0]
 801190a:	461a      	mov	r2, r3
 801190c:	f7ef fb0a 	bl	8000f24 <_write>
 8011910:	1c43      	adds	r3, r0, #1
 8011912:	d102      	bne.n	801191a <_write_r+0x1e>
 8011914:	682b      	ldr	r3, [r5, #0]
 8011916:	b103      	cbz	r3, 801191a <_write_r+0x1e>
 8011918:	6023      	str	r3, [r4, #0]
 801191a:	bd38      	pop	{r3, r4, r5, pc}
 801191c:	20001680 	.word	0x20001680

08011920 <__errno>:
 8011920:	4b01      	ldr	r3, [pc, #4]	@ (8011928 <__errno+0x8>)
 8011922:	6818      	ldr	r0, [r3, #0]
 8011924:	4770      	bx	lr
 8011926:	bf00      	nop
 8011928:	200000ec 	.word	0x200000ec

0801192c <__libc_init_array>:
 801192c:	b570      	push	{r4, r5, r6, lr}
 801192e:	4d0d      	ldr	r5, [pc, #52]	@ (8011964 <__libc_init_array+0x38>)
 8011930:	4c0d      	ldr	r4, [pc, #52]	@ (8011968 <__libc_init_array+0x3c>)
 8011932:	1b64      	subs	r4, r4, r5
 8011934:	10a4      	asrs	r4, r4, #2
 8011936:	2600      	movs	r6, #0
 8011938:	42a6      	cmp	r6, r4
 801193a:	d109      	bne.n	8011950 <__libc_init_array+0x24>
 801193c:	4d0b      	ldr	r5, [pc, #44]	@ (801196c <__libc_init_array+0x40>)
 801193e:	4c0c      	ldr	r4, [pc, #48]	@ (8011970 <__libc_init_array+0x44>)
 8011940:	f001 fdf8 	bl	8013534 <_init>
 8011944:	1b64      	subs	r4, r4, r5
 8011946:	10a4      	asrs	r4, r4, #2
 8011948:	2600      	movs	r6, #0
 801194a:	42a6      	cmp	r6, r4
 801194c:	d105      	bne.n	801195a <__libc_init_array+0x2e>
 801194e:	bd70      	pop	{r4, r5, r6, pc}
 8011950:	f855 3b04 	ldr.w	r3, [r5], #4
 8011954:	4798      	blx	r3
 8011956:	3601      	adds	r6, #1
 8011958:	e7ee      	b.n	8011938 <__libc_init_array+0xc>
 801195a:	f855 3b04 	ldr.w	r3, [r5], #4
 801195e:	4798      	blx	r3
 8011960:	3601      	adds	r6, #1
 8011962:	e7f2      	b.n	801194a <__libc_init_array+0x1e>
 8011964:	08013b30 	.word	0x08013b30
 8011968:	08013b30 	.word	0x08013b30
 801196c:	08013b30 	.word	0x08013b30
 8011970:	08013b34 	.word	0x08013b34

08011974 <memcpy>:
 8011974:	440a      	add	r2, r1
 8011976:	4291      	cmp	r1, r2
 8011978:	f100 33ff 	add.w	r3, r0, #4294967295
 801197c:	d100      	bne.n	8011980 <memcpy+0xc>
 801197e:	4770      	bx	lr
 8011980:	b510      	push	{r4, lr}
 8011982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011986:	f803 4f01 	strb.w	r4, [r3, #1]!
 801198a:	4291      	cmp	r1, r2
 801198c:	d1f9      	bne.n	8011982 <memcpy+0xe>
 801198e:	bd10      	pop	{r4, pc}

08011990 <__assert_func>:
 8011990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011992:	4614      	mov	r4, r2
 8011994:	461a      	mov	r2, r3
 8011996:	4b09      	ldr	r3, [pc, #36]	@ (80119bc <__assert_func+0x2c>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	4605      	mov	r5, r0
 801199c:	68d8      	ldr	r0, [r3, #12]
 801199e:	b14c      	cbz	r4, 80119b4 <__assert_func+0x24>
 80119a0:	4b07      	ldr	r3, [pc, #28]	@ (80119c0 <__assert_func+0x30>)
 80119a2:	9100      	str	r1, [sp, #0]
 80119a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80119a8:	4906      	ldr	r1, [pc, #24]	@ (80119c4 <__assert_func+0x34>)
 80119aa:	462b      	mov	r3, r5
 80119ac:	f001 fc1a 	bl	80131e4 <fiprintf>
 80119b0:	f001 fcbe 	bl	8013330 <abort>
 80119b4:	4b04      	ldr	r3, [pc, #16]	@ (80119c8 <__assert_func+0x38>)
 80119b6:	461c      	mov	r4, r3
 80119b8:	e7f3      	b.n	80119a2 <__assert_func+0x12>
 80119ba:	bf00      	nop
 80119bc:	200000ec 	.word	0x200000ec
 80119c0:	080137ff 	.word	0x080137ff
 80119c4:	0801380c 	.word	0x0801380c
 80119c8:	0801383a 	.word	0x0801383a

080119cc <quorem>:
 80119cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119d0:	6903      	ldr	r3, [r0, #16]
 80119d2:	690c      	ldr	r4, [r1, #16]
 80119d4:	42a3      	cmp	r3, r4
 80119d6:	4607      	mov	r7, r0
 80119d8:	db7e      	blt.n	8011ad8 <quorem+0x10c>
 80119da:	3c01      	subs	r4, #1
 80119dc:	f101 0814 	add.w	r8, r1, #20
 80119e0:	00a3      	lsls	r3, r4, #2
 80119e2:	f100 0514 	add.w	r5, r0, #20
 80119e6:	9300      	str	r3, [sp, #0]
 80119e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80119ec:	9301      	str	r3, [sp, #4]
 80119ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80119f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80119f6:	3301      	adds	r3, #1
 80119f8:	429a      	cmp	r2, r3
 80119fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80119fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8011a02:	d32e      	bcc.n	8011a62 <quorem+0x96>
 8011a04:	f04f 0a00 	mov.w	sl, #0
 8011a08:	46c4      	mov	ip, r8
 8011a0a:	46ae      	mov	lr, r5
 8011a0c:	46d3      	mov	fp, sl
 8011a0e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011a12:	b298      	uxth	r0, r3
 8011a14:	fb06 a000 	mla	r0, r6, r0, sl
 8011a18:	0c02      	lsrs	r2, r0, #16
 8011a1a:	0c1b      	lsrs	r3, r3, #16
 8011a1c:	fb06 2303 	mla	r3, r6, r3, r2
 8011a20:	f8de 2000 	ldr.w	r2, [lr]
 8011a24:	b280      	uxth	r0, r0
 8011a26:	b292      	uxth	r2, r2
 8011a28:	1a12      	subs	r2, r2, r0
 8011a2a:	445a      	add	r2, fp
 8011a2c:	f8de 0000 	ldr.w	r0, [lr]
 8011a30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011a34:	b29b      	uxth	r3, r3
 8011a36:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011a3a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011a3e:	b292      	uxth	r2, r2
 8011a40:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011a44:	45e1      	cmp	r9, ip
 8011a46:	f84e 2b04 	str.w	r2, [lr], #4
 8011a4a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011a4e:	d2de      	bcs.n	8011a0e <quorem+0x42>
 8011a50:	9b00      	ldr	r3, [sp, #0]
 8011a52:	58eb      	ldr	r3, [r5, r3]
 8011a54:	b92b      	cbnz	r3, 8011a62 <quorem+0x96>
 8011a56:	9b01      	ldr	r3, [sp, #4]
 8011a58:	3b04      	subs	r3, #4
 8011a5a:	429d      	cmp	r5, r3
 8011a5c:	461a      	mov	r2, r3
 8011a5e:	d32f      	bcc.n	8011ac0 <quorem+0xf4>
 8011a60:	613c      	str	r4, [r7, #16]
 8011a62:	4638      	mov	r0, r7
 8011a64:	f001 f8c8 	bl	8012bf8 <__mcmp>
 8011a68:	2800      	cmp	r0, #0
 8011a6a:	db25      	blt.n	8011ab8 <quorem+0xec>
 8011a6c:	4629      	mov	r1, r5
 8011a6e:	2000      	movs	r0, #0
 8011a70:	f858 2b04 	ldr.w	r2, [r8], #4
 8011a74:	f8d1 c000 	ldr.w	ip, [r1]
 8011a78:	fa1f fe82 	uxth.w	lr, r2
 8011a7c:	fa1f f38c 	uxth.w	r3, ip
 8011a80:	eba3 030e 	sub.w	r3, r3, lr
 8011a84:	4403      	add	r3, r0
 8011a86:	0c12      	lsrs	r2, r2, #16
 8011a88:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011a8c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011a90:	b29b      	uxth	r3, r3
 8011a92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a96:	45c1      	cmp	r9, r8
 8011a98:	f841 3b04 	str.w	r3, [r1], #4
 8011a9c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011aa0:	d2e6      	bcs.n	8011a70 <quorem+0xa4>
 8011aa2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011aa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011aaa:	b922      	cbnz	r2, 8011ab6 <quorem+0xea>
 8011aac:	3b04      	subs	r3, #4
 8011aae:	429d      	cmp	r5, r3
 8011ab0:	461a      	mov	r2, r3
 8011ab2:	d30b      	bcc.n	8011acc <quorem+0x100>
 8011ab4:	613c      	str	r4, [r7, #16]
 8011ab6:	3601      	adds	r6, #1
 8011ab8:	4630      	mov	r0, r6
 8011aba:	b003      	add	sp, #12
 8011abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ac0:	6812      	ldr	r2, [r2, #0]
 8011ac2:	3b04      	subs	r3, #4
 8011ac4:	2a00      	cmp	r2, #0
 8011ac6:	d1cb      	bne.n	8011a60 <quorem+0x94>
 8011ac8:	3c01      	subs	r4, #1
 8011aca:	e7c6      	b.n	8011a5a <quorem+0x8e>
 8011acc:	6812      	ldr	r2, [r2, #0]
 8011ace:	3b04      	subs	r3, #4
 8011ad0:	2a00      	cmp	r2, #0
 8011ad2:	d1ef      	bne.n	8011ab4 <quorem+0xe8>
 8011ad4:	3c01      	subs	r4, #1
 8011ad6:	e7ea      	b.n	8011aae <quorem+0xe2>
 8011ad8:	2000      	movs	r0, #0
 8011ada:	e7ee      	b.n	8011aba <quorem+0xee>
 8011adc:	0000      	movs	r0, r0
	...

08011ae0 <_dtoa_r>:
 8011ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ae4:	69c7      	ldr	r7, [r0, #28]
 8011ae6:	b097      	sub	sp, #92	@ 0x5c
 8011ae8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8011aec:	ec55 4b10 	vmov	r4, r5, d0
 8011af0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8011af2:	9107      	str	r1, [sp, #28]
 8011af4:	4681      	mov	r9, r0
 8011af6:	920c      	str	r2, [sp, #48]	@ 0x30
 8011af8:	9311      	str	r3, [sp, #68]	@ 0x44
 8011afa:	b97f      	cbnz	r7, 8011b1c <_dtoa_r+0x3c>
 8011afc:	2010      	movs	r0, #16
 8011afe:	f7ff f84b 	bl	8010b98 <malloc>
 8011b02:	4602      	mov	r2, r0
 8011b04:	f8c9 001c 	str.w	r0, [r9, #28]
 8011b08:	b920      	cbnz	r0, 8011b14 <_dtoa_r+0x34>
 8011b0a:	4ba9      	ldr	r3, [pc, #676]	@ (8011db0 <_dtoa_r+0x2d0>)
 8011b0c:	21ef      	movs	r1, #239	@ 0xef
 8011b0e:	48a9      	ldr	r0, [pc, #676]	@ (8011db4 <_dtoa_r+0x2d4>)
 8011b10:	f7ff ff3e 	bl	8011990 <__assert_func>
 8011b14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011b18:	6007      	str	r7, [r0, #0]
 8011b1a:	60c7      	str	r7, [r0, #12]
 8011b1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011b20:	6819      	ldr	r1, [r3, #0]
 8011b22:	b159      	cbz	r1, 8011b3c <_dtoa_r+0x5c>
 8011b24:	685a      	ldr	r2, [r3, #4]
 8011b26:	604a      	str	r2, [r1, #4]
 8011b28:	2301      	movs	r3, #1
 8011b2a:	4093      	lsls	r3, r2
 8011b2c:	608b      	str	r3, [r1, #8]
 8011b2e:	4648      	mov	r0, r9
 8011b30:	f000 fe30 	bl	8012794 <_Bfree>
 8011b34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011b38:	2200      	movs	r2, #0
 8011b3a:	601a      	str	r2, [r3, #0]
 8011b3c:	1e2b      	subs	r3, r5, #0
 8011b3e:	bfb9      	ittee	lt
 8011b40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011b44:	9305      	strlt	r3, [sp, #20]
 8011b46:	2300      	movge	r3, #0
 8011b48:	6033      	strge	r3, [r6, #0]
 8011b4a:	9f05      	ldr	r7, [sp, #20]
 8011b4c:	4b9a      	ldr	r3, [pc, #616]	@ (8011db8 <_dtoa_r+0x2d8>)
 8011b4e:	bfbc      	itt	lt
 8011b50:	2201      	movlt	r2, #1
 8011b52:	6032      	strlt	r2, [r6, #0]
 8011b54:	43bb      	bics	r3, r7
 8011b56:	d112      	bne.n	8011b7e <_dtoa_r+0x9e>
 8011b58:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011b5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011b5e:	6013      	str	r3, [r2, #0]
 8011b60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011b64:	4323      	orrs	r3, r4
 8011b66:	f000 855a 	beq.w	801261e <_dtoa_r+0xb3e>
 8011b6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011b6c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8011dcc <_dtoa_r+0x2ec>
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	f000 855c 	beq.w	801262e <_dtoa_r+0xb4e>
 8011b76:	f10a 0303 	add.w	r3, sl, #3
 8011b7a:	f000 bd56 	b.w	801262a <_dtoa_r+0xb4a>
 8011b7e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011b82:	2200      	movs	r2, #0
 8011b84:	ec51 0b17 	vmov	r0, r1, d7
 8011b88:	2300      	movs	r3, #0
 8011b8a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8011b8e:	f7ee ffc3 	bl	8000b18 <__aeabi_dcmpeq>
 8011b92:	4680      	mov	r8, r0
 8011b94:	b158      	cbz	r0, 8011bae <_dtoa_r+0xce>
 8011b96:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011b98:	2301      	movs	r3, #1
 8011b9a:	6013      	str	r3, [r2, #0]
 8011b9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011b9e:	b113      	cbz	r3, 8011ba6 <_dtoa_r+0xc6>
 8011ba0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011ba2:	4b86      	ldr	r3, [pc, #536]	@ (8011dbc <_dtoa_r+0x2dc>)
 8011ba4:	6013      	str	r3, [r2, #0]
 8011ba6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8011dd0 <_dtoa_r+0x2f0>
 8011baa:	f000 bd40 	b.w	801262e <_dtoa_r+0xb4e>
 8011bae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8011bb2:	aa14      	add	r2, sp, #80	@ 0x50
 8011bb4:	a915      	add	r1, sp, #84	@ 0x54
 8011bb6:	4648      	mov	r0, r9
 8011bb8:	f001 f8ce 	bl	8012d58 <__d2b>
 8011bbc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011bc0:	9002      	str	r0, [sp, #8]
 8011bc2:	2e00      	cmp	r6, #0
 8011bc4:	d078      	beq.n	8011cb8 <_dtoa_r+0x1d8>
 8011bc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011bc8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8011bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011bd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011bd4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011bd8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011bdc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011be0:	4619      	mov	r1, r3
 8011be2:	2200      	movs	r2, #0
 8011be4:	4b76      	ldr	r3, [pc, #472]	@ (8011dc0 <_dtoa_r+0x2e0>)
 8011be6:	f7ee fb77 	bl	80002d8 <__aeabi_dsub>
 8011bea:	a36b      	add	r3, pc, #428	@ (adr r3, 8011d98 <_dtoa_r+0x2b8>)
 8011bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf0:	f7ee fd2a 	bl	8000648 <__aeabi_dmul>
 8011bf4:	a36a      	add	r3, pc, #424	@ (adr r3, 8011da0 <_dtoa_r+0x2c0>)
 8011bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bfa:	f7ee fb6f 	bl	80002dc <__adddf3>
 8011bfe:	4604      	mov	r4, r0
 8011c00:	4630      	mov	r0, r6
 8011c02:	460d      	mov	r5, r1
 8011c04:	f7ee fcb6 	bl	8000574 <__aeabi_i2d>
 8011c08:	a367      	add	r3, pc, #412	@ (adr r3, 8011da8 <_dtoa_r+0x2c8>)
 8011c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c0e:	f7ee fd1b 	bl	8000648 <__aeabi_dmul>
 8011c12:	4602      	mov	r2, r0
 8011c14:	460b      	mov	r3, r1
 8011c16:	4620      	mov	r0, r4
 8011c18:	4629      	mov	r1, r5
 8011c1a:	f7ee fb5f 	bl	80002dc <__adddf3>
 8011c1e:	4604      	mov	r4, r0
 8011c20:	460d      	mov	r5, r1
 8011c22:	f7ee ffc1 	bl	8000ba8 <__aeabi_d2iz>
 8011c26:	2200      	movs	r2, #0
 8011c28:	4607      	mov	r7, r0
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	4629      	mov	r1, r5
 8011c30:	f7ee ff7c 	bl	8000b2c <__aeabi_dcmplt>
 8011c34:	b140      	cbz	r0, 8011c48 <_dtoa_r+0x168>
 8011c36:	4638      	mov	r0, r7
 8011c38:	f7ee fc9c 	bl	8000574 <__aeabi_i2d>
 8011c3c:	4622      	mov	r2, r4
 8011c3e:	462b      	mov	r3, r5
 8011c40:	f7ee ff6a 	bl	8000b18 <__aeabi_dcmpeq>
 8011c44:	b900      	cbnz	r0, 8011c48 <_dtoa_r+0x168>
 8011c46:	3f01      	subs	r7, #1
 8011c48:	2f16      	cmp	r7, #22
 8011c4a:	d852      	bhi.n	8011cf2 <_dtoa_r+0x212>
 8011c4c:	4b5d      	ldr	r3, [pc, #372]	@ (8011dc4 <_dtoa_r+0x2e4>)
 8011c4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011c5a:	f7ee ff67 	bl	8000b2c <__aeabi_dcmplt>
 8011c5e:	2800      	cmp	r0, #0
 8011c60:	d049      	beq.n	8011cf6 <_dtoa_r+0x216>
 8011c62:	3f01      	subs	r7, #1
 8011c64:	2300      	movs	r3, #0
 8011c66:	9310      	str	r3, [sp, #64]	@ 0x40
 8011c68:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011c6a:	1b9b      	subs	r3, r3, r6
 8011c6c:	1e5a      	subs	r2, r3, #1
 8011c6e:	bf45      	ittet	mi
 8011c70:	f1c3 0301 	rsbmi	r3, r3, #1
 8011c74:	9300      	strmi	r3, [sp, #0]
 8011c76:	2300      	movpl	r3, #0
 8011c78:	2300      	movmi	r3, #0
 8011c7a:	9206      	str	r2, [sp, #24]
 8011c7c:	bf54      	ite	pl
 8011c7e:	9300      	strpl	r3, [sp, #0]
 8011c80:	9306      	strmi	r3, [sp, #24]
 8011c82:	2f00      	cmp	r7, #0
 8011c84:	db39      	blt.n	8011cfa <_dtoa_r+0x21a>
 8011c86:	9b06      	ldr	r3, [sp, #24]
 8011c88:	970d      	str	r7, [sp, #52]	@ 0x34
 8011c8a:	443b      	add	r3, r7
 8011c8c:	9306      	str	r3, [sp, #24]
 8011c8e:	2300      	movs	r3, #0
 8011c90:	9308      	str	r3, [sp, #32]
 8011c92:	9b07      	ldr	r3, [sp, #28]
 8011c94:	2b09      	cmp	r3, #9
 8011c96:	d863      	bhi.n	8011d60 <_dtoa_r+0x280>
 8011c98:	2b05      	cmp	r3, #5
 8011c9a:	bfc4      	itt	gt
 8011c9c:	3b04      	subgt	r3, #4
 8011c9e:	9307      	strgt	r3, [sp, #28]
 8011ca0:	9b07      	ldr	r3, [sp, #28]
 8011ca2:	f1a3 0302 	sub.w	r3, r3, #2
 8011ca6:	bfcc      	ite	gt
 8011ca8:	2400      	movgt	r4, #0
 8011caa:	2401      	movle	r4, #1
 8011cac:	2b03      	cmp	r3, #3
 8011cae:	d863      	bhi.n	8011d78 <_dtoa_r+0x298>
 8011cb0:	e8df f003 	tbb	[pc, r3]
 8011cb4:	2b375452 	.word	0x2b375452
 8011cb8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8011cbc:	441e      	add	r6, r3
 8011cbe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011cc2:	2b20      	cmp	r3, #32
 8011cc4:	bfc1      	itttt	gt
 8011cc6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011cca:	409f      	lslgt	r7, r3
 8011ccc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011cd0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011cd4:	bfd6      	itet	le
 8011cd6:	f1c3 0320 	rsble	r3, r3, #32
 8011cda:	ea47 0003 	orrgt.w	r0, r7, r3
 8011cde:	fa04 f003 	lslle.w	r0, r4, r3
 8011ce2:	f7ee fc37 	bl	8000554 <__aeabi_ui2d>
 8011ce6:	2201      	movs	r2, #1
 8011ce8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011cec:	3e01      	subs	r6, #1
 8011cee:	9212      	str	r2, [sp, #72]	@ 0x48
 8011cf0:	e776      	b.n	8011be0 <_dtoa_r+0x100>
 8011cf2:	2301      	movs	r3, #1
 8011cf4:	e7b7      	b.n	8011c66 <_dtoa_r+0x186>
 8011cf6:	9010      	str	r0, [sp, #64]	@ 0x40
 8011cf8:	e7b6      	b.n	8011c68 <_dtoa_r+0x188>
 8011cfa:	9b00      	ldr	r3, [sp, #0]
 8011cfc:	1bdb      	subs	r3, r3, r7
 8011cfe:	9300      	str	r3, [sp, #0]
 8011d00:	427b      	negs	r3, r7
 8011d02:	9308      	str	r3, [sp, #32]
 8011d04:	2300      	movs	r3, #0
 8011d06:	930d      	str	r3, [sp, #52]	@ 0x34
 8011d08:	e7c3      	b.n	8011c92 <_dtoa_r+0x1b2>
 8011d0a:	2301      	movs	r3, #1
 8011d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011d10:	eb07 0b03 	add.w	fp, r7, r3
 8011d14:	f10b 0301 	add.w	r3, fp, #1
 8011d18:	2b01      	cmp	r3, #1
 8011d1a:	9303      	str	r3, [sp, #12]
 8011d1c:	bfb8      	it	lt
 8011d1e:	2301      	movlt	r3, #1
 8011d20:	e006      	b.n	8011d30 <_dtoa_r+0x250>
 8011d22:	2301      	movs	r3, #1
 8011d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	dd28      	ble.n	8011d7e <_dtoa_r+0x29e>
 8011d2c:	469b      	mov	fp, r3
 8011d2e:	9303      	str	r3, [sp, #12]
 8011d30:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8011d34:	2100      	movs	r1, #0
 8011d36:	2204      	movs	r2, #4
 8011d38:	f102 0514 	add.w	r5, r2, #20
 8011d3c:	429d      	cmp	r5, r3
 8011d3e:	d926      	bls.n	8011d8e <_dtoa_r+0x2ae>
 8011d40:	6041      	str	r1, [r0, #4]
 8011d42:	4648      	mov	r0, r9
 8011d44:	f000 fce6 	bl	8012714 <_Balloc>
 8011d48:	4682      	mov	sl, r0
 8011d4a:	2800      	cmp	r0, #0
 8011d4c:	d142      	bne.n	8011dd4 <_dtoa_r+0x2f4>
 8011d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8011dc8 <_dtoa_r+0x2e8>)
 8011d50:	4602      	mov	r2, r0
 8011d52:	f240 11af 	movw	r1, #431	@ 0x1af
 8011d56:	e6da      	b.n	8011b0e <_dtoa_r+0x2e>
 8011d58:	2300      	movs	r3, #0
 8011d5a:	e7e3      	b.n	8011d24 <_dtoa_r+0x244>
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	e7d5      	b.n	8011d0c <_dtoa_r+0x22c>
 8011d60:	2401      	movs	r4, #1
 8011d62:	2300      	movs	r3, #0
 8011d64:	9307      	str	r3, [sp, #28]
 8011d66:	9409      	str	r4, [sp, #36]	@ 0x24
 8011d68:	f04f 3bff 	mov.w	fp, #4294967295
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	f8cd b00c 	str.w	fp, [sp, #12]
 8011d72:	2312      	movs	r3, #18
 8011d74:	920c      	str	r2, [sp, #48]	@ 0x30
 8011d76:	e7db      	b.n	8011d30 <_dtoa_r+0x250>
 8011d78:	2301      	movs	r3, #1
 8011d7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d7c:	e7f4      	b.n	8011d68 <_dtoa_r+0x288>
 8011d7e:	f04f 0b01 	mov.w	fp, #1
 8011d82:	f8cd b00c 	str.w	fp, [sp, #12]
 8011d86:	465b      	mov	r3, fp
 8011d88:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8011d8c:	e7d0      	b.n	8011d30 <_dtoa_r+0x250>
 8011d8e:	3101      	adds	r1, #1
 8011d90:	0052      	lsls	r2, r2, #1
 8011d92:	e7d1      	b.n	8011d38 <_dtoa_r+0x258>
 8011d94:	f3af 8000 	nop.w
 8011d98:	636f4361 	.word	0x636f4361
 8011d9c:	3fd287a7 	.word	0x3fd287a7
 8011da0:	8b60c8b3 	.word	0x8b60c8b3
 8011da4:	3fc68a28 	.word	0x3fc68a28
 8011da8:	509f79fb 	.word	0x509f79fb
 8011dac:	3fd34413 	.word	0x3fd34413
 8011db0:	0801375c 	.word	0x0801375c
 8011db4:	08013848 	.word	0x08013848
 8011db8:	7ff00000 	.word	0x7ff00000
 8011dbc:	080137dc 	.word	0x080137dc
 8011dc0:	3ff80000 	.word	0x3ff80000
 8011dc4:	08013a60 	.word	0x08013a60
 8011dc8:	080138a0 	.word	0x080138a0
 8011dcc:	08013844 	.word	0x08013844
 8011dd0:	080137db 	.word	0x080137db
 8011dd4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011dd8:	6018      	str	r0, [r3, #0]
 8011dda:	9b03      	ldr	r3, [sp, #12]
 8011ddc:	2b0e      	cmp	r3, #14
 8011dde:	f200 80a1 	bhi.w	8011f24 <_dtoa_r+0x444>
 8011de2:	2c00      	cmp	r4, #0
 8011de4:	f000 809e 	beq.w	8011f24 <_dtoa_r+0x444>
 8011de8:	2f00      	cmp	r7, #0
 8011dea:	dd33      	ble.n	8011e54 <_dtoa_r+0x374>
 8011dec:	4b9c      	ldr	r3, [pc, #624]	@ (8012060 <_dtoa_r+0x580>)
 8011dee:	f007 020f 	and.w	r2, r7, #15
 8011df2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011df6:	ed93 7b00 	vldr	d7, [r3]
 8011dfa:	05f8      	lsls	r0, r7, #23
 8011dfc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8011e00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011e04:	d516      	bpl.n	8011e34 <_dtoa_r+0x354>
 8011e06:	4b97      	ldr	r3, [pc, #604]	@ (8012064 <_dtoa_r+0x584>)
 8011e08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011e0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011e10:	f7ee fd44 	bl	800089c <__aeabi_ddiv>
 8011e14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011e18:	f004 040f 	and.w	r4, r4, #15
 8011e1c:	2603      	movs	r6, #3
 8011e1e:	4d91      	ldr	r5, [pc, #580]	@ (8012064 <_dtoa_r+0x584>)
 8011e20:	b954      	cbnz	r4, 8011e38 <_dtoa_r+0x358>
 8011e22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011e26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011e2a:	f7ee fd37 	bl	800089c <__aeabi_ddiv>
 8011e2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011e32:	e028      	b.n	8011e86 <_dtoa_r+0x3a6>
 8011e34:	2602      	movs	r6, #2
 8011e36:	e7f2      	b.n	8011e1e <_dtoa_r+0x33e>
 8011e38:	07e1      	lsls	r1, r4, #31
 8011e3a:	d508      	bpl.n	8011e4e <_dtoa_r+0x36e>
 8011e3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011e40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011e44:	f7ee fc00 	bl	8000648 <__aeabi_dmul>
 8011e48:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011e4c:	3601      	adds	r6, #1
 8011e4e:	1064      	asrs	r4, r4, #1
 8011e50:	3508      	adds	r5, #8
 8011e52:	e7e5      	b.n	8011e20 <_dtoa_r+0x340>
 8011e54:	f000 80af 	beq.w	8011fb6 <_dtoa_r+0x4d6>
 8011e58:	427c      	negs	r4, r7
 8011e5a:	4b81      	ldr	r3, [pc, #516]	@ (8012060 <_dtoa_r+0x580>)
 8011e5c:	4d81      	ldr	r5, [pc, #516]	@ (8012064 <_dtoa_r+0x584>)
 8011e5e:	f004 020f 	and.w	r2, r4, #15
 8011e62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011e6e:	f7ee fbeb 	bl	8000648 <__aeabi_dmul>
 8011e72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011e76:	1124      	asrs	r4, r4, #4
 8011e78:	2300      	movs	r3, #0
 8011e7a:	2602      	movs	r6, #2
 8011e7c:	2c00      	cmp	r4, #0
 8011e7e:	f040 808f 	bne.w	8011fa0 <_dtoa_r+0x4c0>
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d1d3      	bne.n	8011e2e <_dtoa_r+0x34e>
 8011e86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011e88:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	f000 8094 	beq.w	8011fba <_dtoa_r+0x4da>
 8011e92:	4b75      	ldr	r3, [pc, #468]	@ (8012068 <_dtoa_r+0x588>)
 8011e94:	2200      	movs	r2, #0
 8011e96:	4620      	mov	r0, r4
 8011e98:	4629      	mov	r1, r5
 8011e9a:	f7ee fe47 	bl	8000b2c <__aeabi_dcmplt>
 8011e9e:	2800      	cmp	r0, #0
 8011ea0:	f000 808b 	beq.w	8011fba <_dtoa_r+0x4da>
 8011ea4:	9b03      	ldr	r3, [sp, #12]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	f000 8087 	beq.w	8011fba <_dtoa_r+0x4da>
 8011eac:	f1bb 0f00 	cmp.w	fp, #0
 8011eb0:	dd34      	ble.n	8011f1c <_dtoa_r+0x43c>
 8011eb2:	4620      	mov	r0, r4
 8011eb4:	4b6d      	ldr	r3, [pc, #436]	@ (801206c <_dtoa_r+0x58c>)
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	4629      	mov	r1, r5
 8011eba:	f7ee fbc5 	bl	8000648 <__aeabi_dmul>
 8011ebe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011ec2:	f107 38ff 	add.w	r8, r7, #4294967295
 8011ec6:	3601      	adds	r6, #1
 8011ec8:	465c      	mov	r4, fp
 8011eca:	4630      	mov	r0, r6
 8011ecc:	f7ee fb52 	bl	8000574 <__aeabi_i2d>
 8011ed0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ed4:	f7ee fbb8 	bl	8000648 <__aeabi_dmul>
 8011ed8:	4b65      	ldr	r3, [pc, #404]	@ (8012070 <_dtoa_r+0x590>)
 8011eda:	2200      	movs	r2, #0
 8011edc:	f7ee f9fe 	bl	80002dc <__adddf3>
 8011ee0:	4605      	mov	r5, r0
 8011ee2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011ee6:	2c00      	cmp	r4, #0
 8011ee8:	d16a      	bne.n	8011fc0 <_dtoa_r+0x4e0>
 8011eea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011eee:	4b61      	ldr	r3, [pc, #388]	@ (8012074 <_dtoa_r+0x594>)
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	f7ee f9f1 	bl	80002d8 <__aeabi_dsub>
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	460b      	mov	r3, r1
 8011efa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011efe:	462a      	mov	r2, r5
 8011f00:	4633      	mov	r3, r6
 8011f02:	f7ee fe31 	bl	8000b68 <__aeabi_dcmpgt>
 8011f06:	2800      	cmp	r0, #0
 8011f08:	f040 8298 	bne.w	801243c <_dtoa_r+0x95c>
 8011f0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011f10:	462a      	mov	r2, r5
 8011f12:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011f16:	f7ee fe09 	bl	8000b2c <__aeabi_dcmplt>
 8011f1a:	bb38      	cbnz	r0, 8011f6c <_dtoa_r+0x48c>
 8011f1c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8011f20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011f24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	f2c0 8157 	blt.w	80121da <_dtoa_r+0x6fa>
 8011f2c:	2f0e      	cmp	r7, #14
 8011f2e:	f300 8154 	bgt.w	80121da <_dtoa_r+0x6fa>
 8011f32:	4b4b      	ldr	r3, [pc, #300]	@ (8012060 <_dtoa_r+0x580>)
 8011f34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011f38:	ed93 7b00 	vldr	d7, [r3]
 8011f3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	ed8d 7b00 	vstr	d7, [sp]
 8011f44:	f280 80e5 	bge.w	8012112 <_dtoa_r+0x632>
 8011f48:	9b03      	ldr	r3, [sp, #12]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	f300 80e1 	bgt.w	8012112 <_dtoa_r+0x632>
 8011f50:	d10c      	bne.n	8011f6c <_dtoa_r+0x48c>
 8011f52:	4b48      	ldr	r3, [pc, #288]	@ (8012074 <_dtoa_r+0x594>)
 8011f54:	2200      	movs	r2, #0
 8011f56:	ec51 0b17 	vmov	r0, r1, d7
 8011f5a:	f7ee fb75 	bl	8000648 <__aeabi_dmul>
 8011f5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f62:	f7ee fdf7 	bl	8000b54 <__aeabi_dcmpge>
 8011f66:	2800      	cmp	r0, #0
 8011f68:	f000 8266 	beq.w	8012438 <_dtoa_r+0x958>
 8011f6c:	2400      	movs	r4, #0
 8011f6e:	4625      	mov	r5, r4
 8011f70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011f72:	4656      	mov	r6, sl
 8011f74:	ea6f 0803 	mvn.w	r8, r3
 8011f78:	2700      	movs	r7, #0
 8011f7a:	4621      	mov	r1, r4
 8011f7c:	4648      	mov	r0, r9
 8011f7e:	f000 fc09 	bl	8012794 <_Bfree>
 8011f82:	2d00      	cmp	r5, #0
 8011f84:	f000 80bd 	beq.w	8012102 <_dtoa_r+0x622>
 8011f88:	b12f      	cbz	r7, 8011f96 <_dtoa_r+0x4b6>
 8011f8a:	42af      	cmp	r7, r5
 8011f8c:	d003      	beq.n	8011f96 <_dtoa_r+0x4b6>
 8011f8e:	4639      	mov	r1, r7
 8011f90:	4648      	mov	r0, r9
 8011f92:	f000 fbff 	bl	8012794 <_Bfree>
 8011f96:	4629      	mov	r1, r5
 8011f98:	4648      	mov	r0, r9
 8011f9a:	f000 fbfb 	bl	8012794 <_Bfree>
 8011f9e:	e0b0      	b.n	8012102 <_dtoa_r+0x622>
 8011fa0:	07e2      	lsls	r2, r4, #31
 8011fa2:	d505      	bpl.n	8011fb0 <_dtoa_r+0x4d0>
 8011fa4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011fa8:	f7ee fb4e 	bl	8000648 <__aeabi_dmul>
 8011fac:	3601      	adds	r6, #1
 8011fae:	2301      	movs	r3, #1
 8011fb0:	1064      	asrs	r4, r4, #1
 8011fb2:	3508      	adds	r5, #8
 8011fb4:	e762      	b.n	8011e7c <_dtoa_r+0x39c>
 8011fb6:	2602      	movs	r6, #2
 8011fb8:	e765      	b.n	8011e86 <_dtoa_r+0x3a6>
 8011fba:	9c03      	ldr	r4, [sp, #12]
 8011fbc:	46b8      	mov	r8, r7
 8011fbe:	e784      	b.n	8011eca <_dtoa_r+0x3ea>
 8011fc0:	4b27      	ldr	r3, [pc, #156]	@ (8012060 <_dtoa_r+0x580>)
 8011fc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011fc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011fc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011fcc:	4454      	add	r4, sl
 8011fce:	2900      	cmp	r1, #0
 8011fd0:	d054      	beq.n	801207c <_dtoa_r+0x59c>
 8011fd2:	4929      	ldr	r1, [pc, #164]	@ (8012078 <_dtoa_r+0x598>)
 8011fd4:	2000      	movs	r0, #0
 8011fd6:	f7ee fc61 	bl	800089c <__aeabi_ddiv>
 8011fda:	4633      	mov	r3, r6
 8011fdc:	462a      	mov	r2, r5
 8011fde:	f7ee f97b 	bl	80002d8 <__aeabi_dsub>
 8011fe2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011fe6:	4656      	mov	r6, sl
 8011fe8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011fec:	f7ee fddc 	bl	8000ba8 <__aeabi_d2iz>
 8011ff0:	4605      	mov	r5, r0
 8011ff2:	f7ee fabf 	bl	8000574 <__aeabi_i2d>
 8011ff6:	4602      	mov	r2, r0
 8011ff8:	460b      	mov	r3, r1
 8011ffa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011ffe:	f7ee f96b 	bl	80002d8 <__aeabi_dsub>
 8012002:	3530      	adds	r5, #48	@ 0x30
 8012004:	4602      	mov	r2, r0
 8012006:	460b      	mov	r3, r1
 8012008:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801200c:	f806 5b01 	strb.w	r5, [r6], #1
 8012010:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012014:	f7ee fd8a 	bl	8000b2c <__aeabi_dcmplt>
 8012018:	2800      	cmp	r0, #0
 801201a:	d172      	bne.n	8012102 <_dtoa_r+0x622>
 801201c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012020:	4911      	ldr	r1, [pc, #68]	@ (8012068 <_dtoa_r+0x588>)
 8012022:	2000      	movs	r0, #0
 8012024:	f7ee f958 	bl	80002d8 <__aeabi_dsub>
 8012028:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801202c:	f7ee fd7e 	bl	8000b2c <__aeabi_dcmplt>
 8012030:	2800      	cmp	r0, #0
 8012032:	f040 80b4 	bne.w	801219e <_dtoa_r+0x6be>
 8012036:	42a6      	cmp	r6, r4
 8012038:	f43f af70 	beq.w	8011f1c <_dtoa_r+0x43c>
 801203c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012040:	4b0a      	ldr	r3, [pc, #40]	@ (801206c <_dtoa_r+0x58c>)
 8012042:	2200      	movs	r2, #0
 8012044:	f7ee fb00 	bl	8000648 <__aeabi_dmul>
 8012048:	4b08      	ldr	r3, [pc, #32]	@ (801206c <_dtoa_r+0x58c>)
 801204a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801204e:	2200      	movs	r2, #0
 8012050:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012054:	f7ee faf8 	bl	8000648 <__aeabi_dmul>
 8012058:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801205c:	e7c4      	b.n	8011fe8 <_dtoa_r+0x508>
 801205e:	bf00      	nop
 8012060:	08013a60 	.word	0x08013a60
 8012064:	08013a38 	.word	0x08013a38
 8012068:	3ff00000 	.word	0x3ff00000
 801206c:	40240000 	.word	0x40240000
 8012070:	401c0000 	.word	0x401c0000
 8012074:	40140000 	.word	0x40140000
 8012078:	3fe00000 	.word	0x3fe00000
 801207c:	4631      	mov	r1, r6
 801207e:	4628      	mov	r0, r5
 8012080:	f7ee fae2 	bl	8000648 <__aeabi_dmul>
 8012084:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012088:	9413      	str	r4, [sp, #76]	@ 0x4c
 801208a:	4656      	mov	r6, sl
 801208c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012090:	f7ee fd8a 	bl	8000ba8 <__aeabi_d2iz>
 8012094:	4605      	mov	r5, r0
 8012096:	f7ee fa6d 	bl	8000574 <__aeabi_i2d>
 801209a:	4602      	mov	r2, r0
 801209c:	460b      	mov	r3, r1
 801209e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80120a2:	f7ee f919 	bl	80002d8 <__aeabi_dsub>
 80120a6:	3530      	adds	r5, #48	@ 0x30
 80120a8:	f806 5b01 	strb.w	r5, [r6], #1
 80120ac:	4602      	mov	r2, r0
 80120ae:	460b      	mov	r3, r1
 80120b0:	42a6      	cmp	r6, r4
 80120b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80120b6:	f04f 0200 	mov.w	r2, #0
 80120ba:	d124      	bne.n	8012106 <_dtoa_r+0x626>
 80120bc:	4baf      	ldr	r3, [pc, #700]	@ (801237c <_dtoa_r+0x89c>)
 80120be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80120c2:	f7ee f90b 	bl	80002dc <__adddf3>
 80120c6:	4602      	mov	r2, r0
 80120c8:	460b      	mov	r3, r1
 80120ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80120ce:	f7ee fd4b 	bl	8000b68 <__aeabi_dcmpgt>
 80120d2:	2800      	cmp	r0, #0
 80120d4:	d163      	bne.n	801219e <_dtoa_r+0x6be>
 80120d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80120da:	49a8      	ldr	r1, [pc, #672]	@ (801237c <_dtoa_r+0x89c>)
 80120dc:	2000      	movs	r0, #0
 80120de:	f7ee f8fb 	bl	80002d8 <__aeabi_dsub>
 80120e2:	4602      	mov	r2, r0
 80120e4:	460b      	mov	r3, r1
 80120e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80120ea:	f7ee fd1f 	bl	8000b2c <__aeabi_dcmplt>
 80120ee:	2800      	cmp	r0, #0
 80120f0:	f43f af14 	beq.w	8011f1c <_dtoa_r+0x43c>
 80120f4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80120f6:	1e73      	subs	r3, r6, #1
 80120f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80120fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80120fe:	2b30      	cmp	r3, #48	@ 0x30
 8012100:	d0f8      	beq.n	80120f4 <_dtoa_r+0x614>
 8012102:	4647      	mov	r7, r8
 8012104:	e03b      	b.n	801217e <_dtoa_r+0x69e>
 8012106:	4b9e      	ldr	r3, [pc, #632]	@ (8012380 <_dtoa_r+0x8a0>)
 8012108:	f7ee fa9e 	bl	8000648 <__aeabi_dmul>
 801210c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012110:	e7bc      	b.n	801208c <_dtoa_r+0x5ac>
 8012112:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8012116:	4656      	mov	r6, sl
 8012118:	e9dd 2300 	ldrd	r2, r3, [sp]
 801211c:	4620      	mov	r0, r4
 801211e:	4629      	mov	r1, r5
 8012120:	f7ee fbbc 	bl	800089c <__aeabi_ddiv>
 8012124:	f7ee fd40 	bl	8000ba8 <__aeabi_d2iz>
 8012128:	4680      	mov	r8, r0
 801212a:	f7ee fa23 	bl	8000574 <__aeabi_i2d>
 801212e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012132:	f7ee fa89 	bl	8000648 <__aeabi_dmul>
 8012136:	4602      	mov	r2, r0
 8012138:	460b      	mov	r3, r1
 801213a:	4620      	mov	r0, r4
 801213c:	4629      	mov	r1, r5
 801213e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012142:	f7ee f8c9 	bl	80002d8 <__aeabi_dsub>
 8012146:	f806 4b01 	strb.w	r4, [r6], #1
 801214a:	9d03      	ldr	r5, [sp, #12]
 801214c:	eba6 040a 	sub.w	r4, r6, sl
 8012150:	42a5      	cmp	r5, r4
 8012152:	4602      	mov	r2, r0
 8012154:	460b      	mov	r3, r1
 8012156:	d133      	bne.n	80121c0 <_dtoa_r+0x6e0>
 8012158:	f7ee f8c0 	bl	80002dc <__adddf3>
 801215c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012160:	4604      	mov	r4, r0
 8012162:	460d      	mov	r5, r1
 8012164:	f7ee fd00 	bl	8000b68 <__aeabi_dcmpgt>
 8012168:	b9c0      	cbnz	r0, 801219c <_dtoa_r+0x6bc>
 801216a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801216e:	4620      	mov	r0, r4
 8012170:	4629      	mov	r1, r5
 8012172:	f7ee fcd1 	bl	8000b18 <__aeabi_dcmpeq>
 8012176:	b110      	cbz	r0, 801217e <_dtoa_r+0x69e>
 8012178:	f018 0f01 	tst.w	r8, #1
 801217c:	d10e      	bne.n	801219c <_dtoa_r+0x6bc>
 801217e:	9902      	ldr	r1, [sp, #8]
 8012180:	4648      	mov	r0, r9
 8012182:	f000 fb07 	bl	8012794 <_Bfree>
 8012186:	2300      	movs	r3, #0
 8012188:	7033      	strb	r3, [r6, #0]
 801218a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801218c:	3701      	adds	r7, #1
 801218e:	601f      	str	r7, [r3, #0]
 8012190:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012192:	2b00      	cmp	r3, #0
 8012194:	f000 824b 	beq.w	801262e <_dtoa_r+0xb4e>
 8012198:	601e      	str	r6, [r3, #0]
 801219a:	e248      	b.n	801262e <_dtoa_r+0xb4e>
 801219c:	46b8      	mov	r8, r7
 801219e:	4633      	mov	r3, r6
 80121a0:	461e      	mov	r6, r3
 80121a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80121a6:	2a39      	cmp	r2, #57	@ 0x39
 80121a8:	d106      	bne.n	80121b8 <_dtoa_r+0x6d8>
 80121aa:	459a      	cmp	sl, r3
 80121ac:	d1f8      	bne.n	80121a0 <_dtoa_r+0x6c0>
 80121ae:	2230      	movs	r2, #48	@ 0x30
 80121b0:	f108 0801 	add.w	r8, r8, #1
 80121b4:	f88a 2000 	strb.w	r2, [sl]
 80121b8:	781a      	ldrb	r2, [r3, #0]
 80121ba:	3201      	adds	r2, #1
 80121bc:	701a      	strb	r2, [r3, #0]
 80121be:	e7a0      	b.n	8012102 <_dtoa_r+0x622>
 80121c0:	4b6f      	ldr	r3, [pc, #444]	@ (8012380 <_dtoa_r+0x8a0>)
 80121c2:	2200      	movs	r2, #0
 80121c4:	f7ee fa40 	bl	8000648 <__aeabi_dmul>
 80121c8:	2200      	movs	r2, #0
 80121ca:	2300      	movs	r3, #0
 80121cc:	4604      	mov	r4, r0
 80121ce:	460d      	mov	r5, r1
 80121d0:	f7ee fca2 	bl	8000b18 <__aeabi_dcmpeq>
 80121d4:	2800      	cmp	r0, #0
 80121d6:	d09f      	beq.n	8012118 <_dtoa_r+0x638>
 80121d8:	e7d1      	b.n	801217e <_dtoa_r+0x69e>
 80121da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80121dc:	2a00      	cmp	r2, #0
 80121de:	f000 80ea 	beq.w	80123b6 <_dtoa_r+0x8d6>
 80121e2:	9a07      	ldr	r2, [sp, #28]
 80121e4:	2a01      	cmp	r2, #1
 80121e6:	f300 80cd 	bgt.w	8012384 <_dtoa_r+0x8a4>
 80121ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80121ec:	2a00      	cmp	r2, #0
 80121ee:	f000 80c1 	beq.w	8012374 <_dtoa_r+0x894>
 80121f2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80121f6:	9c08      	ldr	r4, [sp, #32]
 80121f8:	9e00      	ldr	r6, [sp, #0]
 80121fa:	9a00      	ldr	r2, [sp, #0]
 80121fc:	441a      	add	r2, r3
 80121fe:	9200      	str	r2, [sp, #0]
 8012200:	9a06      	ldr	r2, [sp, #24]
 8012202:	2101      	movs	r1, #1
 8012204:	441a      	add	r2, r3
 8012206:	4648      	mov	r0, r9
 8012208:	9206      	str	r2, [sp, #24]
 801220a:	f000 fb77 	bl	80128fc <__i2b>
 801220e:	4605      	mov	r5, r0
 8012210:	b166      	cbz	r6, 801222c <_dtoa_r+0x74c>
 8012212:	9b06      	ldr	r3, [sp, #24]
 8012214:	2b00      	cmp	r3, #0
 8012216:	dd09      	ble.n	801222c <_dtoa_r+0x74c>
 8012218:	42b3      	cmp	r3, r6
 801221a:	9a00      	ldr	r2, [sp, #0]
 801221c:	bfa8      	it	ge
 801221e:	4633      	movge	r3, r6
 8012220:	1ad2      	subs	r2, r2, r3
 8012222:	9200      	str	r2, [sp, #0]
 8012224:	9a06      	ldr	r2, [sp, #24]
 8012226:	1af6      	subs	r6, r6, r3
 8012228:	1ad3      	subs	r3, r2, r3
 801222a:	9306      	str	r3, [sp, #24]
 801222c:	9b08      	ldr	r3, [sp, #32]
 801222e:	b30b      	cbz	r3, 8012274 <_dtoa_r+0x794>
 8012230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012232:	2b00      	cmp	r3, #0
 8012234:	f000 80c6 	beq.w	80123c4 <_dtoa_r+0x8e4>
 8012238:	2c00      	cmp	r4, #0
 801223a:	f000 80c0 	beq.w	80123be <_dtoa_r+0x8de>
 801223e:	4629      	mov	r1, r5
 8012240:	4622      	mov	r2, r4
 8012242:	4648      	mov	r0, r9
 8012244:	f000 fc12 	bl	8012a6c <__pow5mult>
 8012248:	9a02      	ldr	r2, [sp, #8]
 801224a:	4601      	mov	r1, r0
 801224c:	4605      	mov	r5, r0
 801224e:	4648      	mov	r0, r9
 8012250:	f000 fb6a 	bl	8012928 <__multiply>
 8012254:	9902      	ldr	r1, [sp, #8]
 8012256:	4680      	mov	r8, r0
 8012258:	4648      	mov	r0, r9
 801225a:	f000 fa9b 	bl	8012794 <_Bfree>
 801225e:	9b08      	ldr	r3, [sp, #32]
 8012260:	1b1b      	subs	r3, r3, r4
 8012262:	9308      	str	r3, [sp, #32]
 8012264:	f000 80b1 	beq.w	80123ca <_dtoa_r+0x8ea>
 8012268:	9a08      	ldr	r2, [sp, #32]
 801226a:	4641      	mov	r1, r8
 801226c:	4648      	mov	r0, r9
 801226e:	f000 fbfd 	bl	8012a6c <__pow5mult>
 8012272:	9002      	str	r0, [sp, #8]
 8012274:	2101      	movs	r1, #1
 8012276:	4648      	mov	r0, r9
 8012278:	f000 fb40 	bl	80128fc <__i2b>
 801227c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801227e:	4604      	mov	r4, r0
 8012280:	2b00      	cmp	r3, #0
 8012282:	f000 81d8 	beq.w	8012636 <_dtoa_r+0xb56>
 8012286:	461a      	mov	r2, r3
 8012288:	4601      	mov	r1, r0
 801228a:	4648      	mov	r0, r9
 801228c:	f000 fbee 	bl	8012a6c <__pow5mult>
 8012290:	9b07      	ldr	r3, [sp, #28]
 8012292:	2b01      	cmp	r3, #1
 8012294:	4604      	mov	r4, r0
 8012296:	f300 809f 	bgt.w	80123d8 <_dtoa_r+0x8f8>
 801229a:	9b04      	ldr	r3, [sp, #16]
 801229c:	2b00      	cmp	r3, #0
 801229e:	f040 8097 	bne.w	80123d0 <_dtoa_r+0x8f0>
 80122a2:	9b05      	ldr	r3, [sp, #20]
 80122a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	f040 8093 	bne.w	80123d4 <_dtoa_r+0x8f4>
 80122ae:	9b05      	ldr	r3, [sp, #20]
 80122b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80122b4:	0d1b      	lsrs	r3, r3, #20
 80122b6:	051b      	lsls	r3, r3, #20
 80122b8:	b133      	cbz	r3, 80122c8 <_dtoa_r+0x7e8>
 80122ba:	9b00      	ldr	r3, [sp, #0]
 80122bc:	3301      	adds	r3, #1
 80122be:	9300      	str	r3, [sp, #0]
 80122c0:	9b06      	ldr	r3, [sp, #24]
 80122c2:	3301      	adds	r3, #1
 80122c4:	9306      	str	r3, [sp, #24]
 80122c6:	2301      	movs	r3, #1
 80122c8:	9308      	str	r3, [sp, #32]
 80122ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	f000 81b8 	beq.w	8012642 <_dtoa_r+0xb62>
 80122d2:	6923      	ldr	r3, [r4, #16]
 80122d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80122d8:	6918      	ldr	r0, [r3, #16]
 80122da:	f000 fac3 	bl	8012864 <__hi0bits>
 80122de:	f1c0 0020 	rsb	r0, r0, #32
 80122e2:	9b06      	ldr	r3, [sp, #24]
 80122e4:	4418      	add	r0, r3
 80122e6:	f010 001f 	ands.w	r0, r0, #31
 80122ea:	f000 8082 	beq.w	80123f2 <_dtoa_r+0x912>
 80122ee:	f1c0 0320 	rsb	r3, r0, #32
 80122f2:	2b04      	cmp	r3, #4
 80122f4:	dd73      	ble.n	80123de <_dtoa_r+0x8fe>
 80122f6:	9b00      	ldr	r3, [sp, #0]
 80122f8:	f1c0 001c 	rsb	r0, r0, #28
 80122fc:	4403      	add	r3, r0
 80122fe:	9300      	str	r3, [sp, #0]
 8012300:	9b06      	ldr	r3, [sp, #24]
 8012302:	4403      	add	r3, r0
 8012304:	4406      	add	r6, r0
 8012306:	9306      	str	r3, [sp, #24]
 8012308:	9b00      	ldr	r3, [sp, #0]
 801230a:	2b00      	cmp	r3, #0
 801230c:	dd05      	ble.n	801231a <_dtoa_r+0x83a>
 801230e:	9902      	ldr	r1, [sp, #8]
 8012310:	461a      	mov	r2, r3
 8012312:	4648      	mov	r0, r9
 8012314:	f000 fc04 	bl	8012b20 <__lshift>
 8012318:	9002      	str	r0, [sp, #8]
 801231a:	9b06      	ldr	r3, [sp, #24]
 801231c:	2b00      	cmp	r3, #0
 801231e:	dd05      	ble.n	801232c <_dtoa_r+0x84c>
 8012320:	4621      	mov	r1, r4
 8012322:	461a      	mov	r2, r3
 8012324:	4648      	mov	r0, r9
 8012326:	f000 fbfb 	bl	8012b20 <__lshift>
 801232a:	4604      	mov	r4, r0
 801232c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801232e:	2b00      	cmp	r3, #0
 8012330:	d061      	beq.n	80123f6 <_dtoa_r+0x916>
 8012332:	9802      	ldr	r0, [sp, #8]
 8012334:	4621      	mov	r1, r4
 8012336:	f000 fc5f 	bl	8012bf8 <__mcmp>
 801233a:	2800      	cmp	r0, #0
 801233c:	da5b      	bge.n	80123f6 <_dtoa_r+0x916>
 801233e:	2300      	movs	r3, #0
 8012340:	9902      	ldr	r1, [sp, #8]
 8012342:	220a      	movs	r2, #10
 8012344:	4648      	mov	r0, r9
 8012346:	f000 fa47 	bl	80127d8 <__multadd>
 801234a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801234c:	9002      	str	r0, [sp, #8]
 801234e:	f107 38ff 	add.w	r8, r7, #4294967295
 8012352:	2b00      	cmp	r3, #0
 8012354:	f000 8177 	beq.w	8012646 <_dtoa_r+0xb66>
 8012358:	4629      	mov	r1, r5
 801235a:	2300      	movs	r3, #0
 801235c:	220a      	movs	r2, #10
 801235e:	4648      	mov	r0, r9
 8012360:	f000 fa3a 	bl	80127d8 <__multadd>
 8012364:	f1bb 0f00 	cmp.w	fp, #0
 8012368:	4605      	mov	r5, r0
 801236a:	dc6f      	bgt.n	801244c <_dtoa_r+0x96c>
 801236c:	9b07      	ldr	r3, [sp, #28]
 801236e:	2b02      	cmp	r3, #2
 8012370:	dc49      	bgt.n	8012406 <_dtoa_r+0x926>
 8012372:	e06b      	b.n	801244c <_dtoa_r+0x96c>
 8012374:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012376:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801237a:	e73c      	b.n	80121f6 <_dtoa_r+0x716>
 801237c:	3fe00000 	.word	0x3fe00000
 8012380:	40240000 	.word	0x40240000
 8012384:	9b03      	ldr	r3, [sp, #12]
 8012386:	1e5c      	subs	r4, r3, #1
 8012388:	9b08      	ldr	r3, [sp, #32]
 801238a:	42a3      	cmp	r3, r4
 801238c:	db09      	blt.n	80123a2 <_dtoa_r+0x8c2>
 801238e:	1b1c      	subs	r4, r3, r4
 8012390:	9b03      	ldr	r3, [sp, #12]
 8012392:	2b00      	cmp	r3, #0
 8012394:	f6bf af30 	bge.w	80121f8 <_dtoa_r+0x718>
 8012398:	9b00      	ldr	r3, [sp, #0]
 801239a:	9a03      	ldr	r2, [sp, #12]
 801239c:	1a9e      	subs	r6, r3, r2
 801239e:	2300      	movs	r3, #0
 80123a0:	e72b      	b.n	80121fa <_dtoa_r+0x71a>
 80123a2:	9b08      	ldr	r3, [sp, #32]
 80123a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80123a6:	9408      	str	r4, [sp, #32]
 80123a8:	1ae3      	subs	r3, r4, r3
 80123aa:	441a      	add	r2, r3
 80123ac:	9e00      	ldr	r6, [sp, #0]
 80123ae:	9b03      	ldr	r3, [sp, #12]
 80123b0:	920d      	str	r2, [sp, #52]	@ 0x34
 80123b2:	2400      	movs	r4, #0
 80123b4:	e721      	b.n	80121fa <_dtoa_r+0x71a>
 80123b6:	9c08      	ldr	r4, [sp, #32]
 80123b8:	9e00      	ldr	r6, [sp, #0]
 80123ba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80123bc:	e728      	b.n	8012210 <_dtoa_r+0x730>
 80123be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80123c2:	e751      	b.n	8012268 <_dtoa_r+0x788>
 80123c4:	9a08      	ldr	r2, [sp, #32]
 80123c6:	9902      	ldr	r1, [sp, #8]
 80123c8:	e750      	b.n	801226c <_dtoa_r+0x78c>
 80123ca:	f8cd 8008 	str.w	r8, [sp, #8]
 80123ce:	e751      	b.n	8012274 <_dtoa_r+0x794>
 80123d0:	2300      	movs	r3, #0
 80123d2:	e779      	b.n	80122c8 <_dtoa_r+0x7e8>
 80123d4:	9b04      	ldr	r3, [sp, #16]
 80123d6:	e777      	b.n	80122c8 <_dtoa_r+0x7e8>
 80123d8:	2300      	movs	r3, #0
 80123da:	9308      	str	r3, [sp, #32]
 80123dc:	e779      	b.n	80122d2 <_dtoa_r+0x7f2>
 80123de:	d093      	beq.n	8012308 <_dtoa_r+0x828>
 80123e0:	9a00      	ldr	r2, [sp, #0]
 80123e2:	331c      	adds	r3, #28
 80123e4:	441a      	add	r2, r3
 80123e6:	9200      	str	r2, [sp, #0]
 80123e8:	9a06      	ldr	r2, [sp, #24]
 80123ea:	441a      	add	r2, r3
 80123ec:	441e      	add	r6, r3
 80123ee:	9206      	str	r2, [sp, #24]
 80123f0:	e78a      	b.n	8012308 <_dtoa_r+0x828>
 80123f2:	4603      	mov	r3, r0
 80123f4:	e7f4      	b.n	80123e0 <_dtoa_r+0x900>
 80123f6:	9b03      	ldr	r3, [sp, #12]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	46b8      	mov	r8, r7
 80123fc:	dc20      	bgt.n	8012440 <_dtoa_r+0x960>
 80123fe:	469b      	mov	fp, r3
 8012400:	9b07      	ldr	r3, [sp, #28]
 8012402:	2b02      	cmp	r3, #2
 8012404:	dd1e      	ble.n	8012444 <_dtoa_r+0x964>
 8012406:	f1bb 0f00 	cmp.w	fp, #0
 801240a:	f47f adb1 	bne.w	8011f70 <_dtoa_r+0x490>
 801240e:	4621      	mov	r1, r4
 8012410:	465b      	mov	r3, fp
 8012412:	2205      	movs	r2, #5
 8012414:	4648      	mov	r0, r9
 8012416:	f000 f9df 	bl	80127d8 <__multadd>
 801241a:	4601      	mov	r1, r0
 801241c:	4604      	mov	r4, r0
 801241e:	9802      	ldr	r0, [sp, #8]
 8012420:	f000 fbea 	bl	8012bf8 <__mcmp>
 8012424:	2800      	cmp	r0, #0
 8012426:	f77f ada3 	ble.w	8011f70 <_dtoa_r+0x490>
 801242a:	4656      	mov	r6, sl
 801242c:	2331      	movs	r3, #49	@ 0x31
 801242e:	f806 3b01 	strb.w	r3, [r6], #1
 8012432:	f108 0801 	add.w	r8, r8, #1
 8012436:	e59f      	b.n	8011f78 <_dtoa_r+0x498>
 8012438:	9c03      	ldr	r4, [sp, #12]
 801243a:	46b8      	mov	r8, r7
 801243c:	4625      	mov	r5, r4
 801243e:	e7f4      	b.n	801242a <_dtoa_r+0x94a>
 8012440:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8012444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012446:	2b00      	cmp	r3, #0
 8012448:	f000 8101 	beq.w	801264e <_dtoa_r+0xb6e>
 801244c:	2e00      	cmp	r6, #0
 801244e:	dd05      	ble.n	801245c <_dtoa_r+0x97c>
 8012450:	4629      	mov	r1, r5
 8012452:	4632      	mov	r2, r6
 8012454:	4648      	mov	r0, r9
 8012456:	f000 fb63 	bl	8012b20 <__lshift>
 801245a:	4605      	mov	r5, r0
 801245c:	9b08      	ldr	r3, [sp, #32]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d05c      	beq.n	801251c <_dtoa_r+0xa3c>
 8012462:	6869      	ldr	r1, [r5, #4]
 8012464:	4648      	mov	r0, r9
 8012466:	f000 f955 	bl	8012714 <_Balloc>
 801246a:	4606      	mov	r6, r0
 801246c:	b928      	cbnz	r0, 801247a <_dtoa_r+0x99a>
 801246e:	4b82      	ldr	r3, [pc, #520]	@ (8012678 <_dtoa_r+0xb98>)
 8012470:	4602      	mov	r2, r0
 8012472:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012476:	f7ff bb4a 	b.w	8011b0e <_dtoa_r+0x2e>
 801247a:	692a      	ldr	r2, [r5, #16]
 801247c:	3202      	adds	r2, #2
 801247e:	0092      	lsls	r2, r2, #2
 8012480:	f105 010c 	add.w	r1, r5, #12
 8012484:	300c      	adds	r0, #12
 8012486:	f7ff fa75 	bl	8011974 <memcpy>
 801248a:	2201      	movs	r2, #1
 801248c:	4631      	mov	r1, r6
 801248e:	4648      	mov	r0, r9
 8012490:	f000 fb46 	bl	8012b20 <__lshift>
 8012494:	f10a 0301 	add.w	r3, sl, #1
 8012498:	9300      	str	r3, [sp, #0]
 801249a:	eb0a 030b 	add.w	r3, sl, fp
 801249e:	9308      	str	r3, [sp, #32]
 80124a0:	9b04      	ldr	r3, [sp, #16]
 80124a2:	f003 0301 	and.w	r3, r3, #1
 80124a6:	462f      	mov	r7, r5
 80124a8:	9306      	str	r3, [sp, #24]
 80124aa:	4605      	mov	r5, r0
 80124ac:	9b00      	ldr	r3, [sp, #0]
 80124ae:	9802      	ldr	r0, [sp, #8]
 80124b0:	4621      	mov	r1, r4
 80124b2:	f103 3bff 	add.w	fp, r3, #4294967295
 80124b6:	f7ff fa89 	bl	80119cc <quorem>
 80124ba:	4603      	mov	r3, r0
 80124bc:	3330      	adds	r3, #48	@ 0x30
 80124be:	9003      	str	r0, [sp, #12]
 80124c0:	4639      	mov	r1, r7
 80124c2:	9802      	ldr	r0, [sp, #8]
 80124c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80124c6:	f000 fb97 	bl	8012bf8 <__mcmp>
 80124ca:	462a      	mov	r2, r5
 80124cc:	9004      	str	r0, [sp, #16]
 80124ce:	4621      	mov	r1, r4
 80124d0:	4648      	mov	r0, r9
 80124d2:	f000 fbad 	bl	8012c30 <__mdiff>
 80124d6:	68c2      	ldr	r2, [r0, #12]
 80124d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124da:	4606      	mov	r6, r0
 80124dc:	bb02      	cbnz	r2, 8012520 <_dtoa_r+0xa40>
 80124de:	4601      	mov	r1, r0
 80124e0:	9802      	ldr	r0, [sp, #8]
 80124e2:	f000 fb89 	bl	8012bf8 <__mcmp>
 80124e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124e8:	4602      	mov	r2, r0
 80124ea:	4631      	mov	r1, r6
 80124ec:	4648      	mov	r0, r9
 80124ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80124f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80124f2:	f000 f94f 	bl	8012794 <_Bfree>
 80124f6:	9b07      	ldr	r3, [sp, #28]
 80124f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80124fa:	9e00      	ldr	r6, [sp, #0]
 80124fc:	ea42 0103 	orr.w	r1, r2, r3
 8012500:	9b06      	ldr	r3, [sp, #24]
 8012502:	4319      	orrs	r1, r3
 8012504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012506:	d10d      	bne.n	8012524 <_dtoa_r+0xa44>
 8012508:	2b39      	cmp	r3, #57	@ 0x39
 801250a:	d027      	beq.n	801255c <_dtoa_r+0xa7c>
 801250c:	9a04      	ldr	r2, [sp, #16]
 801250e:	2a00      	cmp	r2, #0
 8012510:	dd01      	ble.n	8012516 <_dtoa_r+0xa36>
 8012512:	9b03      	ldr	r3, [sp, #12]
 8012514:	3331      	adds	r3, #49	@ 0x31
 8012516:	f88b 3000 	strb.w	r3, [fp]
 801251a:	e52e      	b.n	8011f7a <_dtoa_r+0x49a>
 801251c:	4628      	mov	r0, r5
 801251e:	e7b9      	b.n	8012494 <_dtoa_r+0x9b4>
 8012520:	2201      	movs	r2, #1
 8012522:	e7e2      	b.n	80124ea <_dtoa_r+0xa0a>
 8012524:	9904      	ldr	r1, [sp, #16]
 8012526:	2900      	cmp	r1, #0
 8012528:	db04      	blt.n	8012534 <_dtoa_r+0xa54>
 801252a:	9807      	ldr	r0, [sp, #28]
 801252c:	4301      	orrs	r1, r0
 801252e:	9806      	ldr	r0, [sp, #24]
 8012530:	4301      	orrs	r1, r0
 8012532:	d120      	bne.n	8012576 <_dtoa_r+0xa96>
 8012534:	2a00      	cmp	r2, #0
 8012536:	ddee      	ble.n	8012516 <_dtoa_r+0xa36>
 8012538:	9902      	ldr	r1, [sp, #8]
 801253a:	9300      	str	r3, [sp, #0]
 801253c:	2201      	movs	r2, #1
 801253e:	4648      	mov	r0, r9
 8012540:	f000 faee 	bl	8012b20 <__lshift>
 8012544:	4621      	mov	r1, r4
 8012546:	9002      	str	r0, [sp, #8]
 8012548:	f000 fb56 	bl	8012bf8 <__mcmp>
 801254c:	2800      	cmp	r0, #0
 801254e:	9b00      	ldr	r3, [sp, #0]
 8012550:	dc02      	bgt.n	8012558 <_dtoa_r+0xa78>
 8012552:	d1e0      	bne.n	8012516 <_dtoa_r+0xa36>
 8012554:	07da      	lsls	r2, r3, #31
 8012556:	d5de      	bpl.n	8012516 <_dtoa_r+0xa36>
 8012558:	2b39      	cmp	r3, #57	@ 0x39
 801255a:	d1da      	bne.n	8012512 <_dtoa_r+0xa32>
 801255c:	2339      	movs	r3, #57	@ 0x39
 801255e:	f88b 3000 	strb.w	r3, [fp]
 8012562:	4633      	mov	r3, r6
 8012564:	461e      	mov	r6, r3
 8012566:	3b01      	subs	r3, #1
 8012568:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801256c:	2a39      	cmp	r2, #57	@ 0x39
 801256e:	d04e      	beq.n	801260e <_dtoa_r+0xb2e>
 8012570:	3201      	adds	r2, #1
 8012572:	701a      	strb	r2, [r3, #0]
 8012574:	e501      	b.n	8011f7a <_dtoa_r+0x49a>
 8012576:	2a00      	cmp	r2, #0
 8012578:	dd03      	ble.n	8012582 <_dtoa_r+0xaa2>
 801257a:	2b39      	cmp	r3, #57	@ 0x39
 801257c:	d0ee      	beq.n	801255c <_dtoa_r+0xa7c>
 801257e:	3301      	adds	r3, #1
 8012580:	e7c9      	b.n	8012516 <_dtoa_r+0xa36>
 8012582:	9a00      	ldr	r2, [sp, #0]
 8012584:	9908      	ldr	r1, [sp, #32]
 8012586:	f802 3c01 	strb.w	r3, [r2, #-1]
 801258a:	428a      	cmp	r2, r1
 801258c:	d028      	beq.n	80125e0 <_dtoa_r+0xb00>
 801258e:	9902      	ldr	r1, [sp, #8]
 8012590:	2300      	movs	r3, #0
 8012592:	220a      	movs	r2, #10
 8012594:	4648      	mov	r0, r9
 8012596:	f000 f91f 	bl	80127d8 <__multadd>
 801259a:	42af      	cmp	r7, r5
 801259c:	9002      	str	r0, [sp, #8]
 801259e:	f04f 0300 	mov.w	r3, #0
 80125a2:	f04f 020a 	mov.w	r2, #10
 80125a6:	4639      	mov	r1, r7
 80125a8:	4648      	mov	r0, r9
 80125aa:	d107      	bne.n	80125bc <_dtoa_r+0xadc>
 80125ac:	f000 f914 	bl	80127d8 <__multadd>
 80125b0:	4607      	mov	r7, r0
 80125b2:	4605      	mov	r5, r0
 80125b4:	9b00      	ldr	r3, [sp, #0]
 80125b6:	3301      	adds	r3, #1
 80125b8:	9300      	str	r3, [sp, #0]
 80125ba:	e777      	b.n	80124ac <_dtoa_r+0x9cc>
 80125bc:	f000 f90c 	bl	80127d8 <__multadd>
 80125c0:	4629      	mov	r1, r5
 80125c2:	4607      	mov	r7, r0
 80125c4:	2300      	movs	r3, #0
 80125c6:	220a      	movs	r2, #10
 80125c8:	4648      	mov	r0, r9
 80125ca:	f000 f905 	bl	80127d8 <__multadd>
 80125ce:	4605      	mov	r5, r0
 80125d0:	e7f0      	b.n	80125b4 <_dtoa_r+0xad4>
 80125d2:	f1bb 0f00 	cmp.w	fp, #0
 80125d6:	bfcc      	ite	gt
 80125d8:	465e      	movgt	r6, fp
 80125da:	2601      	movle	r6, #1
 80125dc:	4456      	add	r6, sl
 80125de:	2700      	movs	r7, #0
 80125e0:	9902      	ldr	r1, [sp, #8]
 80125e2:	9300      	str	r3, [sp, #0]
 80125e4:	2201      	movs	r2, #1
 80125e6:	4648      	mov	r0, r9
 80125e8:	f000 fa9a 	bl	8012b20 <__lshift>
 80125ec:	4621      	mov	r1, r4
 80125ee:	9002      	str	r0, [sp, #8]
 80125f0:	f000 fb02 	bl	8012bf8 <__mcmp>
 80125f4:	2800      	cmp	r0, #0
 80125f6:	dcb4      	bgt.n	8012562 <_dtoa_r+0xa82>
 80125f8:	d102      	bne.n	8012600 <_dtoa_r+0xb20>
 80125fa:	9b00      	ldr	r3, [sp, #0]
 80125fc:	07db      	lsls	r3, r3, #31
 80125fe:	d4b0      	bmi.n	8012562 <_dtoa_r+0xa82>
 8012600:	4633      	mov	r3, r6
 8012602:	461e      	mov	r6, r3
 8012604:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012608:	2a30      	cmp	r2, #48	@ 0x30
 801260a:	d0fa      	beq.n	8012602 <_dtoa_r+0xb22>
 801260c:	e4b5      	b.n	8011f7a <_dtoa_r+0x49a>
 801260e:	459a      	cmp	sl, r3
 8012610:	d1a8      	bne.n	8012564 <_dtoa_r+0xa84>
 8012612:	2331      	movs	r3, #49	@ 0x31
 8012614:	f108 0801 	add.w	r8, r8, #1
 8012618:	f88a 3000 	strb.w	r3, [sl]
 801261c:	e4ad      	b.n	8011f7a <_dtoa_r+0x49a>
 801261e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012620:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801267c <_dtoa_r+0xb9c>
 8012624:	b11b      	cbz	r3, 801262e <_dtoa_r+0xb4e>
 8012626:	f10a 0308 	add.w	r3, sl, #8
 801262a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801262c:	6013      	str	r3, [r2, #0]
 801262e:	4650      	mov	r0, sl
 8012630:	b017      	add	sp, #92	@ 0x5c
 8012632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012636:	9b07      	ldr	r3, [sp, #28]
 8012638:	2b01      	cmp	r3, #1
 801263a:	f77f ae2e 	ble.w	801229a <_dtoa_r+0x7ba>
 801263e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012640:	9308      	str	r3, [sp, #32]
 8012642:	2001      	movs	r0, #1
 8012644:	e64d      	b.n	80122e2 <_dtoa_r+0x802>
 8012646:	f1bb 0f00 	cmp.w	fp, #0
 801264a:	f77f aed9 	ble.w	8012400 <_dtoa_r+0x920>
 801264e:	4656      	mov	r6, sl
 8012650:	9802      	ldr	r0, [sp, #8]
 8012652:	4621      	mov	r1, r4
 8012654:	f7ff f9ba 	bl	80119cc <quorem>
 8012658:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801265c:	f806 3b01 	strb.w	r3, [r6], #1
 8012660:	eba6 020a 	sub.w	r2, r6, sl
 8012664:	4593      	cmp	fp, r2
 8012666:	ddb4      	ble.n	80125d2 <_dtoa_r+0xaf2>
 8012668:	9902      	ldr	r1, [sp, #8]
 801266a:	2300      	movs	r3, #0
 801266c:	220a      	movs	r2, #10
 801266e:	4648      	mov	r0, r9
 8012670:	f000 f8b2 	bl	80127d8 <__multadd>
 8012674:	9002      	str	r0, [sp, #8]
 8012676:	e7eb      	b.n	8012650 <_dtoa_r+0xb70>
 8012678:	080138a0 	.word	0x080138a0
 801267c:	0801383b 	.word	0x0801383b

08012680 <_free_r>:
 8012680:	b538      	push	{r3, r4, r5, lr}
 8012682:	4605      	mov	r5, r0
 8012684:	2900      	cmp	r1, #0
 8012686:	d041      	beq.n	801270c <_free_r+0x8c>
 8012688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801268c:	1f0c      	subs	r4, r1, #4
 801268e:	2b00      	cmp	r3, #0
 8012690:	bfb8      	it	lt
 8012692:	18e4      	addlt	r4, r4, r3
 8012694:	f7fe fb2a 	bl	8010cec <__malloc_lock>
 8012698:	4a1d      	ldr	r2, [pc, #116]	@ (8012710 <_free_r+0x90>)
 801269a:	6813      	ldr	r3, [r2, #0]
 801269c:	b933      	cbnz	r3, 80126ac <_free_r+0x2c>
 801269e:	6063      	str	r3, [r4, #4]
 80126a0:	6014      	str	r4, [r2, #0]
 80126a2:	4628      	mov	r0, r5
 80126a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126a8:	f7fe bb26 	b.w	8010cf8 <__malloc_unlock>
 80126ac:	42a3      	cmp	r3, r4
 80126ae:	d908      	bls.n	80126c2 <_free_r+0x42>
 80126b0:	6820      	ldr	r0, [r4, #0]
 80126b2:	1821      	adds	r1, r4, r0
 80126b4:	428b      	cmp	r3, r1
 80126b6:	bf01      	itttt	eq
 80126b8:	6819      	ldreq	r1, [r3, #0]
 80126ba:	685b      	ldreq	r3, [r3, #4]
 80126bc:	1809      	addeq	r1, r1, r0
 80126be:	6021      	streq	r1, [r4, #0]
 80126c0:	e7ed      	b.n	801269e <_free_r+0x1e>
 80126c2:	461a      	mov	r2, r3
 80126c4:	685b      	ldr	r3, [r3, #4]
 80126c6:	b10b      	cbz	r3, 80126cc <_free_r+0x4c>
 80126c8:	42a3      	cmp	r3, r4
 80126ca:	d9fa      	bls.n	80126c2 <_free_r+0x42>
 80126cc:	6811      	ldr	r1, [r2, #0]
 80126ce:	1850      	adds	r0, r2, r1
 80126d0:	42a0      	cmp	r0, r4
 80126d2:	d10b      	bne.n	80126ec <_free_r+0x6c>
 80126d4:	6820      	ldr	r0, [r4, #0]
 80126d6:	4401      	add	r1, r0
 80126d8:	1850      	adds	r0, r2, r1
 80126da:	4283      	cmp	r3, r0
 80126dc:	6011      	str	r1, [r2, #0]
 80126de:	d1e0      	bne.n	80126a2 <_free_r+0x22>
 80126e0:	6818      	ldr	r0, [r3, #0]
 80126e2:	685b      	ldr	r3, [r3, #4]
 80126e4:	6053      	str	r3, [r2, #4]
 80126e6:	4408      	add	r0, r1
 80126e8:	6010      	str	r0, [r2, #0]
 80126ea:	e7da      	b.n	80126a2 <_free_r+0x22>
 80126ec:	d902      	bls.n	80126f4 <_free_r+0x74>
 80126ee:	230c      	movs	r3, #12
 80126f0:	602b      	str	r3, [r5, #0]
 80126f2:	e7d6      	b.n	80126a2 <_free_r+0x22>
 80126f4:	6820      	ldr	r0, [r4, #0]
 80126f6:	1821      	adds	r1, r4, r0
 80126f8:	428b      	cmp	r3, r1
 80126fa:	bf04      	itt	eq
 80126fc:	6819      	ldreq	r1, [r3, #0]
 80126fe:	685b      	ldreq	r3, [r3, #4]
 8012700:	6063      	str	r3, [r4, #4]
 8012702:	bf04      	itt	eq
 8012704:	1809      	addeq	r1, r1, r0
 8012706:	6021      	streq	r1, [r4, #0]
 8012708:	6054      	str	r4, [r2, #4]
 801270a:	e7ca      	b.n	80126a2 <_free_r+0x22>
 801270c:	bd38      	pop	{r3, r4, r5, pc}
 801270e:	bf00      	nop
 8012710:	20001540 	.word	0x20001540

08012714 <_Balloc>:
 8012714:	b570      	push	{r4, r5, r6, lr}
 8012716:	69c6      	ldr	r6, [r0, #28]
 8012718:	4604      	mov	r4, r0
 801271a:	460d      	mov	r5, r1
 801271c:	b976      	cbnz	r6, 801273c <_Balloc+0x28>
 801271e:	2010      	movs	r0, #16
 8012720:	f7fe fa3a 	bl	8010b98 <malloc>
 8012724:	4602      	mov	r2, r0
 8012726:	61e0      	str	r0, [r4, #28]
 8012728:	b920      	cbnz	r0, 8012734 <_Balloc+0x20>
 801272a:	4b18      	ldr	r3, [pc, #96]	@ (801278c <_Balloc+0x78>)
 801272c:	4818      	ldr	r0, [pc, #96]	@ (8012790 <_Balloc+0x7c>)
 801272e:	216b      	movs	r1, #107	@ 0x6b
 8012730:	f7ff f92e 	bl	8011990 <__assert_func>
 8012734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012738:	6006      	str	r6, [r0, #0]
 801273a:	60c6      	str	r6, [r0, #12]
 801273c:	69e6      	ldr	r6, [r4, #28]
 801273e:	68f3      	ldr	r3, [r6, #12]
 8012740:	b183      	cbz	r3, 8012764 <_Balloc+0x50>
 8012742:	69e3      	ldr	r3, [r4, #28]
 8012744:	68db      	ldr	r3, [r3, #12]
 8012746:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801274a:	b9b8      	cbnz	r0, 801277c <_Balloc+0x68>
 801274c:	2101      	movs	r1, #1
 801274e:	fa01 f605 	lsl.w	r6, r1, r5
 8012752:	1d72      	adds	r2, r6, #5
 8012754:	0092      	lsls	r2, r2, #2
 8012756:	4620      	mov	r0, r4
 8012758:	f000 fdf1 	bl	801333e <_calloc_r>
 801275c:	b160      	cbz	r0, 8012778 <_Balloc+0x64>
 801275e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012762:	e00e      	b.n	8012782 <_Balloc+0x6e>
 8012764:	2221      	movs	r2, #33	@ 0x21
 8012766:	2104      	movs	r1, #4
 8012768:	4620      	mov	r0, r4
 801276a:	f000 fde8 	bl	801333e <_calloc_r>
 801276e:	69e3      	ldr	r3, [r4, #28]
 8012770:	60f0      	str	r0, [r6, #12]
 8012772:	68db      	ldr	r3, [r3, #12]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d1e4      	bne.n	8012742 <_Balloc+0x2e>
 8012778:	2000      	movs	r0, #0
 801277a:	bd70      	pop	{r4, r5, r6, pc}
 801277c:	6802      	ldr	r2, [r0, #0]
 801277e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012782:	2300      	movs	r3, #0
 8012784:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012788:	e7f7      	b.n	801277a <_Balloc+0x66>
 801278a:	bf00      	nop
 801278c:	0801375c 	.word	0x0801375c
 8012790:	080138b1 	.word	0x080138b1

08012794 <_Bfree>:
 8012794:	b570      	push	{r4, r5, r6, lr}
 8012796:	69c6      	ldr	r6, [r0, #28]
 8012798:	4605      	mov	r5, r0
 801279a:	460c      	mov	r4, r1
 801279c:	b976      	cbnz	r6, 80127bc <_Bfree+0x28>
 801279e:	2010      	movs	r0, #16
 80127a0:	f7fe f9fa 	bl	8010b98 <malloc>
 80127a4:	4602      	mov	r2, r0
 80127a6:	61e8      	str	r0, [r5, #28]
 80127a8:	b920      	cbnz	r0, 80127b4 <_Bfree+0x20>
 80127aa:	4b09      	ldr	r3, [pc, #36]	@ (80127d0 <_Bfree+0x3c>)
 80127ac:	4809      	ldr	r0, [pc, #36]	@ (80127d4 <_Bfree+0x40>)
 80127ae:	218f      	movs	r1, #143	@ 0x8f
 80127b0:	f7ff f8ee 	bl	8011990 <__assert_func>
 80127b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80127b8:	6006      	str	r6, [r0, #0]
 80127ba:	60c6      	str	r6, [r0, #12]
 80127bc:	b13c      	cbz	r4, 80127ce <_Bfree+0x3a>
 80127be:	69eb      	ldr	r3, [r5, #28]
 80127c0:	6862      	ldr	r2, [r4, #4]
 80127c2:	68db      	ldr	r3, [r3, #12]
 80127c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80127c8:	6021      	str	r1, [r4, #0]
 80127ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80127ce:	bd70      	pop	{r4, r5, r6, pc}
 80127d0:	0801375c 	.word	0x0801375c
 80127d4:	080138b1 	.word	0x080138b1

080127d8 <__multadd>:
 80127d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127dc:	690d      	ldr	r5, [r1, #16]
 80127de:	4607      	mov	r7, r0
 80127e0:	460c      	mov	r4, r1
 80127e2:	461e      	mov	r6, r3
 80127e4:	f101 0c14 	add.w	ip, r1, #20
 80127e8:	2000      	movs	r0, #0
 80127ea:	f8dc 3000 	ldr.w	r3, [ip]
 80127ee:	b299      	uxth	r1, r3
 80127f0:	fb02 6101 	mla	r1, r2, r1, r6
 80127f4:	0c1e      	lsrs	r6, r3, #16
 80127f6:	0c0b      	lsrs	r3, r1, #16
 80127f8:	fb02 3306 	mla	r3, r2, r6, r3
 80127fc:	b289      	uxth	r1, r1
 80127fe:	3001      	adds	r0, #1
 8012800:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012804:	4285      	cmp	r5, r0
 8012806:	f84c 1b04 	str.w	r1, [ip], #4
 801280a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801280e:	dcec      	bgt.n	80127ea <__multadd+0x12>
 8012810:	b30e      	cbz	r6, 8012856 <__multadd+0x7e>
 8012812:	68a3      	ldr	r3, [r4, #8]
 8012814:	42ab      	cmp	r3, r5
 8012816:	dc19      	bgt.n	801284c <__multadd+0x74>
 8012818:	6861      	ldr	r1, [r4, #4]
 801281a:	4638      	mov	r0, r7
 801281c:	3101      	adds	r1, #1
 801281e:	f7ff ff79 	bl	8012714 <_Balloc>
 8012822:	4680      	mov	r8, r0
 8012824:	b928      	cbnz	r0, 8012832 <__multadd+0x5a>
 8012826:	4602      	mov	r2, r0
 8012828:	4b0c      	ldr	r3, [pc, #48]	@ (801285c <__multadd+0x84>)
 801282a:	480d      	ldr	r0, [pc, #52]	@ (8012860 <__multadd+0x88>)
 801282c:	21ba      	movs	r1, #186	@ 0xba
 801282e:	f7ff f8af 	bl	8011990 <__assert_func>
 8012832:	6922      	ldr	r2, [r4, #16]
 8012834:	3202      	adds	r2, #2
 8012836:	f104 010c 	add.w	r1, r4, #12
 801283a:	0092      	lsls	r2, r2, #2
 801283c:	300c      	adds	r0, #12
 801283e:	f7ff f899 	bl	8011974 <memcpy>
 8012842:	4621      	mov	r1, r4
 8012844:	4638      	mov	r0, r7
 8012846:	f7ff ffa5 	bl	8012794 <_Bfree>
 801284a:	4644      	mov	r4, r8
 801284c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012850:	3501      	adds	r5, #1
 8012852:	615e      	str	r6, [r3, #20]
 8012854:	6125      	str	r5, [r4, #16]
 8012856:	4620      	mov	r0, r4
 8012858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801285c:	080138a0 	.word	0x080138a0
 8012860:	080138b1 	.word	0x080138b1

08012864 <__hi0bits>:
 8012864:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012868:	4603      	mov	r3, r0
 801286a:	bf36      	itet	cc
 801286c:	0403      	lslcc	r3, r0, #16
 801286e:	2000      	movcs	r0, #0
 8012870:	2010      	movcc	r0, #16
 8012872:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012876:	bf3c      	itt	cc
 8012878:	021b      	lslcc	r3, r3, #8
 801287a:	3008      	addcc	r0, #8
 801287c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012880:	bf3c      	itt	cc
 8012882:	011b      	lslcc	r3, r3, #4
 8012884:	3004      	addcc	r0, #4
 8012886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801288a:	bf3c      	itt	cc
 801288c:	009b      	lslcc	r3, r3, #2
 801288e:	3002      	addcc	r0, #2
 8012890:	2b00      	cmp	r3, #0
 8012892:	db05      	blt.n	80128a0 <__hi0bits+0x3c>
 8012894:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012898:	f100 0001 	add.w	r0, r0, #1
 801289c:	bf08      	it	eq
 801289e:	2020      	moveq	r0, #32
 80128a0:	4770      	bx	lr

080128a2 <__lo0bits>:
 80128a2:	6803      	ldr	r3, [r0, #0]
 80128a4:	4602      	mov	r2, r0
 80128a6:	f013 0007 	ands.w	r0, r3, #7
 80128aa:	d00b      	beq.n	80128c4 <__lo0bits+0x22>
 80128ac:	07d9      	lsls	r1, r3, #31
 80128ae:	d421      	bmi.n	80128f4 <__lo0bits+0x52>
 80128b0:	0798      	lsls	r0, r3, #30
 80128b2:	bf49      	itett	mi
 80128b4:	085b      	lsrmi	r3, r3, #1
 80128b6:	089b      	lsrpl	r3, r3, #2
 80128b8:	2001      	movmi	r0, #1
 80128ba:	6013      	strmi	r3, [r2, #0]
 80128bc:	bf5c      	itt	pl
 80128be:	6013      	strpl	r3, [r2, #0]
 80128c0:	2002      	movpl	r0, #2
 80128c2:	4770      	bx	lr
 80128c4:	b299      	uxth	r1, r3
 80128c6:	b909      	cbnz	r1, 80128cc <__lo0bits+0x2a>
 80128c8:	0c1b      	lsrs	r3, r3, #16
 80128ca:	2010      	movs	r0, #16
 80128cc:	b2d9      	uxtb	r1, r3
 80128ce:	b909      	cbnz	r1, 80128d4 <__lo0bits+0x32>
 80128d0:	3008      	adds	r0, #8
 80128d2:	0a1b      	lsrs	r3, r3, #8
 80128d4:	0719      	lsls	r1, r3, #28
 80128d6:	bf04      	itt	eq
 80128d8:	091b      	lsreq	r3, r3, #4
 80128da:	3004      	addeq	r0, #4
 80128dc:	0799      	lsls	r1, r3, #30
 80128de:	bf04      	itt	eq
 80128e0:	089b      	lsreq	r3, r3, #2
 80128e2:	3002      	addeq	r0, #2
 80128e4:	07d9      	lsls	r1, r3, #31
 80128e6:	d403      	bmi.n	80128f0 <__lo0bits+0x4e>
 80128e8:	085b      	lsrs	r3, r3, #1
 80128ea:	f100 0001 	add.w	r0, r0, #1
 80128ee:	d003      	beq.n	80128f8 <__lo0bits+0x56>
 80128f0:	6013      	str	r3, [r2, #0]
 80128f2:	4770      	bx	lr
 80128f4:	2000      	movs	r0, #0
 80128f6:	4770      	bx	lr
 80128f8:	2020      	movs	r0, #32
 80128fa:	4770      	bx	lr

080128fc <__i2b>:
 80128fc:	b510      	push	{r4, lr}
 80128fe:	460c      	mov	r4, r1
 8012900:	2101      	movs	r1, #1
 8012902:	f7ff ff07 	bl	8012714 <_Balloc>
 8012906:	4602      	mov	r2, r0
 8012908:	b928      	cbnz	r0, 8012916 <__i2b+0x1a>
 801290a:	4b05      	ldr	r3, [pc, #20]	@ (8012920 <__i2b+0x24>)
 801290c:	4805      	ldr	r0, [pc, #20]	@ (8012924 <__i2b+0x28>)
 801290e:	f240 1145 	movw	r1, #325	@ 0x145
 8012912:	f7ff f83d 	bl	8011990 <__assert_func>
 8012916:	2301      	movs	r3, #1
 8012918:	6144      	str	r4, [r0, #20]
 801291a:	6103      	str	r3, [r0, #16]
 801291c:	bd10      	pop	{r4, pc}
 801291e:	bf00      	nop
 8012920:	080138a0 	.word	0x080138a0
 8012924:	080138b1 	.word	0x080138b1

08012928 <__multiply>:
 8012928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801292c:	4617      	mov	r7, r2
 801292e:	690a      	ldr	r2, [r1, #16]
 8012930:	693b      	ldr	r3, [r7, #16]
 8012932:	429a      	cmp	r2, r3
 8012934:	bfa8      	it	ge
 8012936:	463b      	movge	r3, r7
 8012938:	4689      	mov	r9, r1
 801293a:	bfa4      	itt	ge
 801293c:	460f      	movge	r7, r1
 801293e:	4699      	movge	r9, r3
 8012940:	693d      	ldr	r5, [r7, #16]
 8012942:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012946:	68bb      	ldr	r3, [r7, #8]
 8012948:	6879      	ldr	r1, [r7, #4]
 801294a:	eb05 060a 	add.w	r6, r5, sl
 801294e:	42b3      	cmp	r3, r6
 8012950:	b085      	sub	sp, #20
 8012952:	bfb8      	it	lt
 8012954:	3101      	addlt	r1, #1
 8012956:	f7ff fedd 	bl	8012714 <_Balloc>
 801295a:	b930      	cbnz	r0, 801296a <__multiply+0x42>
 801295c:	4602      	mov	r2, r0
 801295e:	4b41      	ldr	r3, [pc, #260]	@ (8012a64 <__multiply+0x13c>)
 8012960:	4841      	ldr	r0, [pc, #260]	@ (8012a68 <__multiply+0x140>)
 8012962:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012966:	f7ff f813 	bl	8011990 <__assert_func>
 801296a:	f100 0414 	add.w	r4, r0, #20
 801296e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8012972:	4623      	mov	r3, r4
 8012974:	2200      	movs	r2, #0
 8012976:	4573      	cmp	r3, lr
 8012978:	d320      	bcc.n	80129bc <__multiply+0x94>
 801297a:	f107 0814 	add.w	r8, r7, #20
 801297e:	f109 0114 	add.w	r1, r9, #20
 8012982:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8012986:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801298a:	9302      	str	r3, [sp, #8]
 801298c:	1beb      	subs	r3, r5, r7
 801298e:	3b15      	subs	r3, #21
 8012990:	f023 0303 	bic.w	r3, r3, #3
 8012994:	3304      	adds	r3, #4
 8012996:	3715      	adds	r7, #21
 8012998:	42bd      	cmp	r5, r7
 801299a:	bf38      	it	cc
 801299c:	2304      	movcc	r3, #4
 801299e:	9301      	str	r3, [sp, #4]
 80129a0:	9b02      	ldr	r3, [sp, #8]
 80129a2:	9103      	str	r1, [sp, #12]
 80129a4:	428b      	cmp	r3, r1
 80129a6:	d80c      	bhi.n	80129c2 <__multiply+0x9a>
 80129a8:	2e00      	cmp	r6, #0
 80129aa:	dd03      	ble.n	80129b4 <__multiply+0x8c>
 80129ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d055      	beq.n	8012a60 <__multiply+0x138>
 80129b4:	6106      	str	r6, [r0, #16]
 80129b6:	b005      	add	sp, #20
 80129b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129bc:	f843 2b04 	str.w	r2, [r3], #4
 80129c0:	e7d9      	b.n	8012976 <__multiply+0x4e>
 80129c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80129c6:	f1ba 0f00 	cmp.w	sl, #0
 80129ca:	d01f      	beq.n	8012a0c <__multiply+0xe4>
 80129cc:	46c4      	mov	ip, r8
 80129ce:	46a1      	mov	r9, r4
 80129d0:	2700      	movs	r7, #0
 80129d2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80129d6:	f8d9 3000 	ldr.w	r3, [r9]
 80129da:	fa1f fb82 	uxth.w	fp, r2
 80129de:	b29b      	uxth	r3, r3
 80129e0:	fb0a 330b 	mla	r3, sl, fp, r3
 80129e4:	443b      	add	r3, r7
 80129e6:	f8d9 7000 	ldr.w	r7, [r9]
 80129ea:	0c12      	lsrs	r2, r2, #16
 80129ec:	0c3f      	lsrs	r7, r7, #16
 80129ee:	fb0a 7202 	mla	r2, sl, r2, r7
 80129f2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80129f6:	b29b      	uxth	r3, r3
 80129f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80129fc:	4565      	cmp	r5, ip
 80129fe:	f849 3b04 	str.w	r3, [r9], #4
 8012a02:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8012a06:	d8e4      	bhi.n	80129d2 <__multiply+0xaa>
 8012a08:	9b01      	ldr	r3, [sp, #4]
 8012a0a:	50e7      	str	r7, [r4, r3]
 8012a0c:	9b03      	ldr	r3, [sp, #12]
 8012a0e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012a12:	3104      	adds	r1, #4
 8012a14:	f1b9 0f00 	cmp.w	r9, #0
 8012a18:	d020      	beq.n	8012a5c <__multiply+0x134>
 8012a1a:	6823      	ldr	r3, [r4, #0]
 8012a1c:	4647      	mov	r7, r8
 8012a1e:	46a4      	mov	ip, r4
 8012a20:	f04f 0a00 	mov.w	sl, #0
 8012a24:	f8b7 b000 	ldrh.w	fp, [r7]
 8012a28:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8012a2c:	fb09 220b 	mla	r2, r9, fp, r2
 8012a30:	4452      	add	r2, sl
 8012a32:	b29b      	uxth	r3, r3
 8012a34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012a38:	f84c 3b04 	str.w	r3, [ip], #4
 8012a3c:	f857 3b04 	ldr.w	r3, [r7], #4
 8012a40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012a44:	f8bc 3000 	ldrh.w	r3, [ip]
 8012a48:	fb09 330a 	mla	r3, r9, sl, r3
 8012a4c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8012a50:	42bd      	cmp	r5, r7
 8012a52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012a56:	d8e5      	bhi.n	8012a24 <__multiply+0xfc>
 8012a58:	9a01      	ldr	r2, [sp, #4]
 8012a5a:	50a3      	str	r3, [r4, r2]
 8012a5c:	3404      	adds	r4, #4
 8012a5e:	e79f      	b.n	80129a0 <__multiply+0x78>
 8012a60:	3e01      	subs	r6, #1
 8012a62:	e7a1      	b.n	80129a8 <__multiply+0x80>
 8012a64:	080138a0 	.word	0x080138a0
 8012a68:	080138b1 	.word	0x080138b1

08012a6c <__pow5mult>:
 8012a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a70:	4615      	mov	r5, r2
 8012a72:	f012 0203 	ands.w	r2, r2, #3
 8012a76:	4607      	mov	r7, r0
 8012a78:	460e      	mov	r6, r1
 8012a7a:	d007      	beq.n	8012a8c <__pow5mult+0x20>
 8012a7c:	4c25      	ldr	r4, [pc, #148]	@ (8012b14 <__pow5mult+0xa8>)
 8012a7e:	3a01      	subs	r2, #1
 8012a80:	2300      	movs	r3, #0
 8012a82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012a86:	f7ff fea7 	bl	80127d8 <__multadd>
 8012a8a:	4606      	mov	r6, r0
 8012a8c:	10ad      	asrs	r5, r5, #2
 8012a8e:	d03d      	beq.n	8012b0c <__pow5mult+0xa0>
 8012a90:	69fc      	ldr	r4, [r7, #28]
 8012a92:	b97c      	cbnz	r4, 8012ab4 <__pow5mult+0x48>
 8012a94:	2010      	movs	r0, #16
 8012a96:	f7fe f87f 	bl	8010b98 <malloc>
 8012a9a:	4602      	mov	r2, r0
 8012a9c:	61f8      	str	r0, [r7, #28]
 8012a9e:	b928      	cbnz	r0, 8012aac <__pow5mult+0x40>
 8012aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8012b18 <__pow5mult+0xac>)
 8012aa2:	481e      	ldr	r0, [pc, #120]	@ (8012b1c <__pow5mult+0xb0>)
 8012aa4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012aa8:	f7fe ff72 	bl	8011990 <__assert_func>
 8012aac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012ab0:	6004      	str	r4, [r0, #0]
 8012ab2:	60c4      	str	r4, [r0, #12]
 8012ab4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012ab8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012abc:	b94c      	cbnz	r4, 8012ad2 <__pow5mult+0x66>
 8012abe:	f240 2171 	movw	r1, #625	@ 0x271
 8012ac2:	4638      	mov	r0, r7
 8012ac4:	f7ff ff1a 	bl	80128fc <__i2b>
 8012ac8:	2300      	movs	r3, #0
 8012aca:	f8c8 0008 	str.w	r0, [r8, #8]
 8012ace:	4604      	mov	r4, r0
 8012ad0:	6003      	str	r3, [r0, #0]
 8012ad2:	f04f 0900 	mov.w	r9, #0
 8012ad6:	07eb      	lsls	r3, r5, #31
 8012ad8:	d50a      	bpl.n	8012af0 <__pow5mult+0x84>
 8012ada:	4631      	mov	r1, r6
 8012adc:	4622      	mov	r2, r4
 8012ade:	4638      	mov	r0, r7
 8012ae0:	f7ff ff22 	bl	8012928 <__multiply>
 8012ae4:	4631      	mov	r1, r6
 8012ae6:	4680      	mov	r8, r0
 8012ae8:	4638      	mov	r0, r7
 8012aea:	f7ff fe53 	bl	8012794 <_Bfree>
 8012aee:	4646      	mov	r6, r8
 8012af0:	106d      	asrs	r5, r5, #1
 8012af2:	d00b      	beq.n	8012b0c <__pow5mult+0xa0>
 8012af4:	6820      	ldr	r0, [r4, #0]
 8012af6:	b938      	cbnz	r0, 8012b08 <__pow5mult+0x9c>
 8012af8:	4622      	mov	r2, r4
 8012afa:	4621      	mov	r1, r4
 8012afc:	4638      	mov	r0, r7
 8012afe:	f7ff ff13 	bl	8012928 <__multiply>
 8012b02:	6020      	str	r0, [r4, #0]
 8012b04:	f8c0 9000 	str.w	r9, [r0]
 8012b08:	4604      	mov	r4, r0
 8012b0a:	e7e4      	b.n	8012ad6 <__pow5mult+0x6a>
 8012b0c:	4630      	mov	r0, r6
 8012b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b12:	bf00      	nop
 8012b14:	08013a28 	.word	0x08013a28
 8012b18:	0801375c 	.word	0x0801375c
 8012b1c:	080138b1 	.word	0x080138b1

08012b20 <__lshift>:
 8012b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b24:	460c      	mov	r4, r1
 8012b26:	6849      	ldr	r1, [r1, #4]
 8012b28:	6923      	ldr	r3, [r4, #16]
 8012b2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012b2e:	68a3      	ldr	r3, [r4, #8]
 8012b30:	4607      	mov	r7, r0
 8012b32:	4691      	mov	r9, r2
 8012b34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012b38:	f108 0601 	add.w	r6, r8, #1
 8012b3c:	42b3      	cmp	r3, r6
 8012b3e:	db0b      	blt.n	8012b58 <__lshift+0x38>
 8012b40:	4638      	mov	r0, r7
 8012b42:	f7ff fde7 	bl	8012714 <_Balloc>
 8012b46:	4605      	mov	r5, r0
 8012b48:	b948      	cbnz	r0, 8012b5e <__lshift+0x3e>
 8012b4a:	4602      	mov	r2, r0
 8012b4c:	4b28      	ldr	r3, [pc, #160]	@ (8012bf0 <__lshift+0xd0>)
 8012b4e:	4829      	ldr	r0, [pc, #164]	@ (8012bf4 <__lshift+0xd4>)
 8012b50:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012b54:	f7fe ff1c 	bl	8011990 <__assert_func>
 8012b58:	3101      	adds	r1, #1
 8012b5a:	005b      	lsls	r3, r3, #1
 8012b5c:	e7ee      	b.n	8012b3c <__lshift+0x1c>
 8012b5e:	2300      	movs	r3, #0
 8012b60:	f100 0114 	add.w	r1, r0, #20
 8012b64:	f100 0210 	add.w	r2, r0, #16
 8012b68:	4618      	mov	r0, r3
 8012b6a:	4553      	cmp	r3, sl
 8012b6c:	db33      	blt.n	8012bd6 <__lshift+0xb6>
 8012b6e:	6920      	ldr	r0, [r4, #16]
 8012b70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012b74:	f104 0314 	add.w	r3, r4, #20
 8012b78:	f019 091f 	ands.w	r9, r9, #31
 8012b7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012b80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012b84:	d02b      	beq.n	8012bde <__lshift+0xbe>
 8012b86:	f1c9 0e20 	rsb	lr, r9, #32
 8012b8a:	468a      	mov	sl, r1
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	6818      	ldr	r0, [r3, #0]
 8012b90:	fa00 f009 	lsl.w	r0, r0, r9
 8012b94:	4310      	orrs	r0, r2
 8012b96:	f84a 0b04 	str.w	r0, [sl], #4
 8012b9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b9e:	459c      	cmp	ip, r3
 8012ba0:	fa22 f20e 	lsr.w	r2, r2, lr
 8012ba4:	d8f3      	bhi.n	8012b8e <__lshift+0x6e>
 8012ba6:	ebac 0304 	sub.w	r3, ip, r4
 8012baa:	3b15      	subs	r3, #21
 8012bac:	f023 0303 	bic.w	r3, r3, #3
 8012bb0:	3304      	adds	r3, #4
 8012bb2:	f104 0015 	add.w	r0, r4, #21
 8012bb6:	4560      	cmp	r0, ip
 8012bb8:	bf88      	it	hi
 8012bba:	2304      	movhi	r3, #4
 8012bbc:	50ca      	str	r2, [r1, r3]
 8012bbe:	b10a      	cbz	r2, 8012bc4 <__lshift+0xa4>
 8012bc0:	f108 0602 	add.w	r6, r8, #2
 8012bc4:	3e01      	subs	r6, #1
 8012bc6:	4638      	mov	r0, r7
 8012bc8:	612e      	str	r6, [r5, #16]
 8012bca:	4621      	mov	r1, r4
 8012bcc:	f7ff fde2 	bl	8012794 <_Bfree>
 8012bd0:	4628      	mov	r0, r5
 8012bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8012bda:	3301      	adds	r3, #1
 8012bdc:	e7c5      	b.n	8012b6a <__lshift+0x4a>
 8012bde:	3904      	subs	r1, #4
 8012be0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012be4:	f841 2f04 	str.w	r2, [r1, #4]!
 8012be8:	459c      	cmp	ip, r3
 8012bea:	d8f9      	bhi.n	8012be0 <__lshift+0xc0>
 8012bec:	e7ea      	b.n	8012bc4 <__lshift+0xa4>
 8012bee:	bf00      	nop
 8012bf0:	080138a0 	.word	0x080138a0
 8012bf4:	080138b1 	.word	0x080138b1

08012bf8 <__mcmp>:
 8012bf8:	690a      	ldr	r2, [r1, #16]
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	6900      	ldr	r0, [r0, #16]
 8012bfe:	1a80      	subs	r0, r0, r2
 8012c00:	b530      	push	{r4, r5, lr}
 8012c02:	d10e      	bne.n	8012c22 <__mcmp+0x2a>
 8012c04:	3314      	adds	r3, #20
 8012c06:	3114      	adds	r1, #20
 8012c08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012c0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012c10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012c14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012c18:	4295      	cmp	r5, r2
 8012c1a:	d003      	beq.n	8012c24 <__mcmp+0x2c>
 8012c1c:	d205      	bcs.n	8012c2a <__mcmp+0x32>
 8012c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8012c22:	bd30      	pop	{r4, r5, pc}
 8012c24:	42a3      	cmp	r3, r4
 8012c26:	d3f3      	bcc.n	8012c10 <__mcmp+0x18>
 8012c28:	e7fb      	b.n	8012c22 <__mcmp+0x2a>
 8012c2a:	2001      	movs	r0, #1
 8012c2c:	e7f9      	b.n	8012c22 <__mcmp+0x2a>
	...

08012c30 <__mdiff>:
 8012c30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c34:	4689      	mov	r9, r1
 8012c36:	4606      	mov	r6, r0
 8012c38:	4611      	mov	r1, r2
 8012c3a:	4648      	mov	r0, r9
 8012c3c:	4614      	mov	r4, r2
 8012c3e:	f7ff ffdb 	bl	8012bf8 <__mcmp>
 8012c42:	1e05      	subs	r5, r0, #0
 8012c44:	d112      	bne.n	8012c6c <__mdiff+0x3c>
 8012c46:	4629      	mov	r1, r5
 8012c48:	4630      	mov	r0, r6
 8012c4a:	f7ff fd63 	bl	8012714 <_Balloc>
 8012c4e:	4602      	mov	r2, r0
 8012c50:	b928      	cbnz	r0, 8012c5e <__mdiff+0x2e>
 8012c52:	4b3f      	ldr	r3, [pc, #252]	@ (8012d50 <__mdiff+0x120>)
 8012c54:	f240 2137 	movw	r1, #567	@ 0x237
 8012c58:	483e      	ldr	r0, [pc, #248]	@ (8012d54 <__mdiff+0x124>)
 8012c5a:	f7fe fe99 	bl	8011990 <__assert_func>
 8012c5e:	2301      	movs	r3, #1
 8012c60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012c64:	4610      	mov	r0, r2
 8012c66:	b003      	add	sp, #12
 8012c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c6c:	bfbc      	itt	lt
 8012c6e:	464b      	movlt	r3, r9
 8012c70:	46a1      	movlt	r9, r4
 8012c72:	4630      	mov	r0, r6
 8012c74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012c78:	bfba      	itte	lt
 8012c7a:	461c      	movlt	r4, r3
 8012c7c:	2501      	movlt	r5, #1
 8012c7e:	2500      	movge	r5, #0
 8012c80:	f7ff fd48 	bl	8012714 <_Balloc>
 8012c84:	4602      	mov	r2, r0
 8012c86:	b918      	cbnz	r0, 8012c90 <__mdiff+0x60>
 8012c88:	4b31      	ldr	r3, [pc, #196]	@ (8012d50 <__mdiff+0x120>)
 8012c8a:	f240 2145 	movw	r1, #581	@ 0x245
 8012c8e:	e7e3      	b.n	8012c58 <__mdiff+0x28>
 8012c90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012c94:	6926      	ldr	r6, [r4, #16]
 8012c96:	60c5      	str	r5, [r0, #12]
 8012c98:	f109 0310 	add.w	r3, r9, #16
 8012c9c:	f109 0514 	add.w	r5, r9, #20
 8012ca0:	f104 0e14 	add.w	lr, r4, #20
 8012ca4:	f100 0b14 	add.w	fp, r0, #20
 8012ca8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012cac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012cb0:	9301      	str	r3, [sp, #4]
 8012cb2:	46d9      	mov	r9, fp
 8012cb4:	f04f 0c00 	mov.w	ip, #0
 8012cb8:	9b01      	ldr	r3, [sp, #4]
 8012cba:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012cbe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012cc2:	9301      	str	r3, [sp, #4]
 8012cc4:	fa1f f38a 	uxth.w	r3, sl
 8012cc8:	4619      	mov	r1, r3
 8012cca:	b283      	uxth	r3, r0
 8012ccc:	1acb      	subs	r3, r1, r3
 8012cce:	0c00      	lsrs	r0, r0, #16
 8012cd0:	4463      	add	r3, ip
 8012cd2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012cd6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012cda:	b29b      	uxth	r3, r3
 8012cdc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012ce0:	4576      	cmp	r6, lr
 8012ce2:	f849 3b04 	str.w	r3, [r9], #4
 8012ce6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012cea:	d8e5      	bhi.n	8012cb8 <__mdiff+0x88>
 8012cec:	1b33      	subs	r3, r6, r4
 8012cee:	3b15      	subs	r3, #21
 8012cf0:	f023 0303 	bic.w	r3, r3, #3
 8012cf4:	3415      	adds	r4, #21
 8012cf6:	3304      	adds	r3, #4
 8012cf8:	42a6      	cmp	r6, r4
 8012cfa:	bf38      	it	cc
 8012cfc:	2304      	movcc	r3, #4
 8012cfe:	441d      	add	r5, r3
 8012d00:	445b      	add	r3, fp
 8012d02:	461e      	mov	r6, r3
 8012d04:	462c      	mov	r4, r5
 8012d06:	4544      	cmp	r4, r8
 8012d08:	d30e      	bcc.n	8012d28 <__mdiff+0xf8>
 8012d0a:	f108 0103 	add.w	r1, r8, #3
 8012d0e:	1b49      	subs	r1, r1, r5
 8012d10:	f021 0103 	bic.w	r1, r1, #3
 8012d14:	3d03      	subs	r5, #3
 8012d16:	45a8      	cmp	r8, r5
 8012d18:	bf38      	it	cc
 8012d1a:	2100      	movcc	r1, #0
 8012d1c:	440b      	add	r3, r1
 8012d1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012d22:	b191      	cbz	r1, 8012d4a <__mdiff+0x11a>
 8012d24:	6117      	str	r7, [r2, #16]
 8012d26:	e79d      	b.n	8012c64 <__mdiff+0x34>
 8012d28:	f854 1b04 	ldr.w	r1, [r4], #4
 8012d2c:	46e6      	mov	lr, ip
 8012d2e:	0c08      	lsrs	r0, r1, #16
 8012d30:	fa1c fc81 	uxtah	ip, ip, r1
 8012d34:	4471      	add	r1, lr
 8012d36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012d3a:	b289      	uxth	r1, r1
 8012d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012d40:	f846 1b04 	str.w	r1, [r6], #4
 8012d44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012d48:	e7dd      	b.n	8012d06 <__mdiff+0xd6>
 8012d4a:	3f01      	subs	r7, #1
 8012d4c:	e7e7      	b.n	8012d1e <__mdiff+0xee>
 8012d4e:	bf00      	nop
 8012d50:	080138a0 	.word	0x080138a0
 8012d54:	080138b1 	.word	0x080138b1

08012d58 <__d2b>:
 8012d58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012d5c:	460f      	mov	r7, r1
 8012d5e:	2101      	movs	r1, #1
 8012d60:	ec59 8b10 	vmov	r8, r9, d0
 8012d64:	4616      	mov	r6, r2
 8012d66:	f7ff fcd5 	bl	8012714 <_Balloc>
 8012d6a:	4604      	mov	r4, r0
 8012d6c:	b930      	cbnz	r0, 8012d7c <__d2b+0x24>
 8012d6e:	4602      	mov	r2, r0
 8012d70:	4b23      	ldr	r3, [pc, #140]	@ (8012e00 <__d2b+0xa8>)
 8012d72:	4824      	ldr	r0, [pc, #144]	@ (8012e04 <__d2b+0xac>)
 8012d74:	f240 310f 	movw	r1, #783	@ 0x30f
 8012d78:	f7fe fe0a 	bl	8011990 <__assert_func>
 8012d7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012d80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012d84:	b10d      	cbz	r5, 8012d8a <__d2b+0x32>
 8012d86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012d8a:	9301      	str	r3, [sp, #4]
 8012d8c:	f1b8 0300 	subs.w	r3, r8, #0
 8012d90:	d023      	beq.n	8012dda <__d2b+0x82>
 8012d92:	4668      	mov	r0, sp
 8012d94:	9300      	str	r3, [sp, #0]
 8012d96:	f7ff fd84 	bl	80128a2 <__lo0bits>
 8012d9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012d9e:	b1d0      	cbz	r0, 8012dd6 <__d2b+0x7e>
 8012da0:	f1c0 0320 	rsb	r3, r0, #32
 8012da4:	fa02 f303 	lsl.w	r3, r2, r3
 8012da8:	430b      	orrs	r3, r1
 8012daa:	40c2      	lsrs	r2, r0
 8012dac:	6163      	str	r3, [r4, #20]
 8012dae:	9201      	str	r2, [sp, #4]
 8012db0:	9b01      	ldr	r3, [sp, #4]
 8012db2:	61a3      	str	r3, [r4, #24]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	bf0c      	ite	eq
 8012db8:	2201      	moveq	r2, #1
 8012dba:	2202      	movne	r2, #2
 8012dbc:	6122      	str	r2, [r4, #16]
 8012dbe:	b1a5      	cbz	r5, 8012dea <__d2b+0x92>
 8012dc0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012dc4:	4405      	add	r5, r0
 8012dc6:	603d      	str	r5, [r7, #0]
 8012dc8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012dcc:	6030      	str	r0, [r6, #0]
 8012dce:	4620      	mov	r0, r4
 8012dd0:	b003      	add	sp, #12
 8012dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012dd6:	6161      	str	r1, [r4, #20]
 8012dd8:	e7ea      	b.n	8012db0 <__d2b+0x58>
 8012dda:	a801      	add	r0, sp, #4
 8012ddc:	f7ff fd61 	bl	80128a2 <__lo0bits>
 8012de0:	9b01      	ldr	r3, [sp, #4]
 8012de2:	6163      	str	r3, [r4, #20]
 8012de4:	3020      	adds	r0, #32
 8012de6:	2201      	movs	r2, #1
 8012de8:	e7e8      	b.n	8012dbc <__d2b+0x64>
 8012dea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012dee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012df2:	6038      	str	r0, [r7, #0]
 8012df4:	6918      	ldr	r0, [r3, #16]
 8012df6:	f7ff fd35 	bl	8012864 <__hi0bits>
 8012dfa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012dfe:	e7e5      	b.n	8012dcc <__d2b+0x74>
 8012e00:	080138a0 	.word	0x080138a0
 8012e04:	080138b1 	.word	0x080138b1

08012e08 <__sfputc_r>:
 8012e08:	6893      	ldr	r3, [r2, #8]
 8012e0a:	3b01      	subs	r3, #1
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	b410      	push	{r4}
 8012e10:	6093      	str	r3, [r2, #8]
 8012e12:	da08      	bge.n	8012e26 <__sfputc_r+0x1e>
 8012e14:	6994      	ldr	r4, [r2, #24]
 8012e16:	42a3      	cmp	r3, r4
 8012e18:	db01      	blt.n	8012e1e <__sfputc_r+0x16>
 8012e1a:	290a      	cmp	r1, #10
 8012e1c:	d103      	bne.n	8012e26 <__sfputc_r+0x1e>
 8012e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e22:	f000 b9f1 	b.w	8013208 <__swbuf_r>
 8012e26:	6813      	ldr	r3, [r2, #0]
 8012e28:	1c58      	adds	r0, r3, #1
 8012e2a:	6010      	str	r0, [r2, #0]
 8012e2c:	7019      	strb	r1, [r3, #0]
 8012e2e:	4608      	mov	r0, r1
 8012e30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e34:	4770      	bx	lr

08012e36 <__sfputs_r>:
 8012e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e38:	4606      	mov	r6, r0
 8012e3a:	460f      	mov	r7, r1
 8012e3c:	4614      	mov	r4, r2
 8012e3e:	18d5      	adds	r5, r2, r3
 8012e40:	42ac      	cmp	r4, r5
 8012e42:	d101      	bne.n	8012e48 <__sfputs_r+0x12>
 8012e44:	2000      	movs	r0, #0
 8012e46:	e007      	b.n	8012e58 <__sfputs_r+0x22>
 8012e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e4c:	463a      	mov	r2, r7
 8012e4e:	4630      	mov	r0, r6
 8012e50:	f7ff ffda 	bl	8012e08 <__sfputc_r>
 8012e54:	1c43      	adds	r3, r0, #1
 8012e56:	d1f3      	bne.n	8012e40 <__sfputs_r+0xa>
 8012e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012e5c <_vfiprintf_r>:
 8012e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e60:	460d      	mov	r5, r1
 8012e62:	b09d      	sub	sp, #116	@ 0x74
 8012e64:	4614      	mov	r4, r2
 8012e66:	4698      	mov	r8, r3
 8012e68:	4606      	mov	r6, r0
 8012e6a:	b118      	cbz	r0, 8012e74 <_vfiprintf_r+0x18>
 8012e6c:	6a03      	ldr	r3, [r0, #32]
 8012e6e:	b90b      	cbnz	r3, 8012e74 <_vfiprintf_r+0x18>
 8012e70:	f7fe fc68 	bl	8011744 <__sinit>
 8012e74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e76:	07d9      	lsls	r1, r3, #31
 8012e78:	d405      	bmi.n	8012e86 <_vfiprintf_r+0x2a>
 8012e7a:	89ab      	ldrh	r3, [r5, #12]
 8012e7c:	059a      	lsls	r2, r3, #22
 8012e7e:	d402      	bmi.n	8012e86 <_vfiprintf_r+0x2a>
 8012e80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012e82:	f7ef feee 	bl	8002c62 <__retarget_lock_acquire_recursive>
 8012e86:	89ab      	ldrh	r3, [r5, #12]
 8012e88:	071b      	lsls	r3, r3, #28
 8012e8a:	d501      	bpl.n	8012e90 <_vfiprintf_r+0x34>
 8012e8c:	692b      	ldr	r3, [r5, #16]
 8012e8e:	b99b      	cbnz	r3, 8012eb8 <_vfiprintf_r+0x5c>
 8012e90:	4629      	mov	r1, r5
 8012e92:	4630      	mov	r0, r6
 8012e94:	f000 f9f6 	bl	8013284 <__swsetup_r>
 8012e98:	b170      	cbz	r0, 8012eb8 <_vfiprintf_r+0x5c>
 8012e9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e9c:	07dc      	lsls	r4, r3, #31
 8012e9e:	d504      	bpl.n	8012eaa <_vfiprintf_r+0x4e>
 8012ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ea4:	b01d      	add	sp, #116	@ 0x74
 8012ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eaa:	89ab      	ldrh	r3, [r5, #12]
 8012eac:	0598      	lsls	r0, r3, #22
 8012eae:	d4f7      	bmi.n	8012ea0 <_vfiprintf_r+0x44>
 8012eb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012eb2:	f7ef feeb 	bl	8002c8c <__retarget_lock_release_recursive>
 8012eb6:	e7f3      	b.n	8012ea0 <_vfiprintf_r+0x44>
 8012eb8:	2300      	movs	r3, #0
 8012eba:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ebc:	2320      	movs	r3, #32
 8012ebe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012ec2:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ec6:	2330      	movs	r3, #48	@ 0x30
 8012ec8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013078 <_vfiprintf_r+0x21c>
 8012ecc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012ed0:	f04f 0901 	mov.w	r9, #1
 8012ed4:	4623      	mov	r3, r4
 8012ed6:	469a      	mov	sl, r3
 8012ed8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012edc:	b10a      	cbz	r2, 8012ee2 <_vfiprintf_r+0x86>
 8012ede:	2a25      	cmp	r2, #37	@ 0x25
 8012ee0:	d1f9      	bne.n	8012ed6 <_vfiprintf_r+0x7a>
 8012ee2:	ebba 0b04 	subs.w	fp, sl, r4
 8012ee6:	d00b      	beq.n	8012f00 <_vfiprintf_r+0xa4>
 8012ee8:	465b      	mov	r3, fp
 8012eea:	4622      	mov	r2, r4
 8012eec:	4629      	mov	r1, r5
 8012eee:	4630      	mov	r0, r6
 8012ef0:	f7ff ffa1 	bl	8012e36 <__sfputs_r>
 8012ef4:	3001      	adds	r0, #1
 8012ef6:	f000 80a7 	beq.w	8013048 <_vfiprintf_r+0x1ec>
 8012efa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012efc:	445a      	add	r2, fp
 8012efe:	9209      	str	r2, [sp, #36]	@ 0x24
 8012f00:	f89a 3000 	ldrb.w	r3, [sl]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	f000 809f 	beq.w	8013048 <_vfiprintf_r+0x1ec>
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8012f10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f14:	f10a 0a01 	add.w	sl, sl, #1
 8012f18:	9304      	str	r3, [sp, #16]
 8012f1a:	9307      	str	r3, [sp, #28]
 8012f1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012f20:	931a      	str	r3, [sp, #104]	@ 0x68
 8012f22:	4654      	mov	r4, sl
 8012f24:	2205      	movs	r2, #5
 8012f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f2a:	4853      	ldr	r0, [pc, #332]	@ (8013078 <_vfiprintf_r+0x21c>)
 8012f2c:	f7ed f978 	bl	8000220 <memchr>
 8012f30:	9a04      	ldr	r2, [sp, #16]
 8012f32:	b9d8      	cbnz	r0, 8012f6c <_vfiprintf_r+0x110>
 8012f34:	06d1      	lsls	r1, r2, #27
 8012f36:	bf44      	itt	mi
 8012f38:	2320      	movmi	r3, #32
 8012f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f3e:	0713      	lsls	r3, r2, #28
 8012f40:	bf44      	itt	mi
 8012f42:	232b      	movmi	r3, #43	@ 0x2b
 8012f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f48:	f89a 3000 	ldrb.w	r3, [sl]
 8012f4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f4e:	d015      	beq.n	8012f7c <_vfiprintf_r+0x120>
 8012f50:	9a07      	ldr	r2, [sp, #28]
 8012f52:	4654      	mov	r4, sl
 8012f54:	2000      	movs	r0, #0
 8012f56:	f04f 0c0a 	mov.w	ip, #10
 8012f5a:	4621      	mov	r1, r4
 8012f5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f60:	3b30      	subs	r3, #48	@ 0x30
 8012f62:	2b09      	cmp	r3, #9
 8012f64:	d94b      	bls.n	8012ffe <_vfiprintf_r+0x1a2>
 8012f66:	b1b0      	cbz	r0, 8012f96 <_vfiprintf_r+0x13a>
 8012f68:	9207      	str	r2, [sp, #28]
 8012f6a:	e014      	b.n	8012f96 <_vfiprintf_r+0x13a>
 8012f6c:	eba0 0308 	sub.w	r3, r0, r8
 8012f70:	fa09 f303 	lsl.w	r3, r9, r3
 8012f74:	4313      	orrs	r3, r2
 8012f76:	9304      	str	r3, [sp, #16]
 8012f78:	46a2      	mov	sl, r4
 8012f7a:	e7d2      	b.n	8012f22 <_vfiprintf_r+0xc6>
 8012f7c:	9b03      	ldr	r3, [sp, #12]
 8012f7e:	1d19      	adds	r1, r3, #4
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	9103      	str	r1, [sp, #12]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	bfbb      	ittet	lt
 8012f88:	425b      	neglt	r3, r3
 8012f8a:	f042 0202 	orrlt.w	r2, r2, #2
 8012f8e:	9307      	strge	r3, [sp, #28]
 8012f90:	9307      	strlt	r3, [sp, #28]
 8012f92:	bfb8      	it	lt
 8012f94:	9204      	strlt	r2, [sp, #16]
 8012f96:	7823      	ldrb	r3, [r4, #0]
 8012f98:	2b2e      	cmp	r3, #46	@ 0x2e
 8012f9a:	d10a      	bne.n	8012fb2 <_vfiprintf_r+0x156>
 8012f9c:	7863      	ldrb	r3, [r4, #1]
 8012f9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012fa0:	d132      	bne.n	8013008 <_vfiprintf_r+0x1ac>
 8012fa2:	9b03      	ldr	r3, [sp, #12]
 8012fa4:	1d1a      	adds	r2, r3, #4
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	9203      	str	r2, [sp, #12]
 8012faa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012fae:	3402      	adds	r4, #2
 8012fb0:	9305      	str	r3, [sp, #20]
 8012fb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013088 <_vfiprintf_r+0x22c>
 8012fb6:	7821      	ldrb	r1, [r4, #0]
 8012fb8:	2203      	movs	r2, #3
 8012fba:	4650      	mov	r0, sl
 8012fbc:	f7ed f930 	bl	8000220 <memchr>
 8012fc0:	b138      	cbz	r0, 8012fd2 <_vfiprintf_r+0x176>
 8012fc2:	9b04      	ldr	r3, [sp, #16]
 8012fc4:	eba0 000a 	sub.w	r0, r0, sl
 8012fc8:	2240      	movs	r2, #64	@ 0x40
 8012fca:	4082      	lsls	r2, r0
 8012fcc:	4313      	orrs	r3, r2
 8012fce:	3401      	adds	r4, #1
 8012fd0:	9304      	str	r3, [sp, #16]
 8012fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fd6:	4829      	ldr	r0, [pc, #164]	@ (801307c <_vfiprintf_r+0x220>)
 8012fd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012fdc:	2206      	movs	r2, #6
 8012fde:	f7ed f91f 	bl	8000220 <memchr>
 8012fe2:	2800      	cmp	r0, #0
 8012fe4:	d03f      	beq.n	8013066 <_vfiprintf_r+0x20a>
 8012fe6:	4b26      	ldr	r3, [pc, #152]	@ (8013080 <_vfiprintf_r+0x224>)
 8012fe8:	bb1b      	cbnz	r3, 8013032 <_vfiprintf_r+0x1d6>
 8012fea:	9b03      	ldr	r3, [sp, #12]
 8012fec:	3307      	adds	r3, #7
 8012fee:	f023 0307 	bic.w	r3, r3, #7
 8012ff2:	3308      	adds	r3, #8
 8012ff4:	9303      	str	r3, [sp, #12]
 8012ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ff8:	443b      	add	r3, r7
 8012ffa:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ffc:	e76a      	b.n	8012ed4 <_vfiprintf_r+0x78>
 8012ffe:	fb0c 3202 	mla	r2, ip, r2, r3
 8013002:	460c      	mov	r4, r1
 8013004:	2001      	movs	r0, #1
 8013006:	e7a8      	b.n	8012f5a <_vfiprintf_r+0xfe>
 8013008:	2300      	movs	r3, #0
 801300a:	3401      	adds	r4, #1
 801300c:	9305      	str	r3, [sp, #20]
 801300e:	4619      	mov	r1, r3
 8013010:	f04f 0c0a 	mov.w	ip, #10
 8013014:	4620      	mov	r0, r4
 8013016:	f810 2b01 	ldrb.w	r2, [r0], #1
 801301a:	3a30      	subs	r2, #48	@ 0x30
 801301c:	2a09      	cmp	r2, #9
 801301e:	d903      	bls.n	8013028 <_vfiprintf_r+0x1cc>
 8013020:	2b00      	cmp	r3, #0
 8013022:	d0c6      	beq.n	8012fb2 <_vfiprintf_r+0x156>
 8013024:	9105      	str	r1, [sp, #20]
 8013026:	e7c4      	b.n	8012fb2 <_vfiprintf_r+0x156>
 8013028:	fb0c 2101 	mla	r1, ip, r1, r2
 801302c:	4604      	mov	r4, r0
 801302e:	2301      	movs	r3, #1
 8013030:	e7f0      	b.n	8013014 <_vfiprintf_r+0x1b8>
 8013032:	ab03      	add	r3, sp, #12
 8013034:	9300      	str	r3, [sp, #0]
 8013036:	462a      	mov	r2, r5
 8013038:	4b12      	ldr	r3, [pc, #72]	@ (8013084 <_vfiprintf_r+0x228>)
 801303a:	a904      	add	r1, sp, #16
 801303c:	4630      	mov	r0, r6
 801303e:	f7fd ff3f 	bl	8010ec0 <_printf_float>
 8013042:	4607      	mov	r7, r0
 8013044:	1c78      	adds	r0, r7, #1
 8013046:	d1d6      	bne.n	8012ff6 <_vfiprintf_r+0x19a>
 8013048:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801304a:	07d9      	lsls	r1, r3, #31
 801304c:	d405      	bmi.n	801305a <_vfiprintf_r+0x1fe>
 801304e:	89ab      	ldrh	r3, [r5, #12]
 8013050:	059a      	lsls	r2, r3, #22
 8013052:	d402      	bmi.n	801305a <_vfiprintf_r+0x1fe>
 8013054:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013056:	f7ef fe19 	bl	8002c8c <__retarget_lock_release_recursive>
 801305a:	89ab      	ldrh	r3, [r5, #12]
 801305c:	065b      	lsls	r3, r3, #25
 801305e:	f53f af1f 	bmi.w	8012ea0 <_vfiprintf_r+0x44>
 8013062:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013064:	e71e      	b.n	8012ea4 <_vfiprintf_r+0x48>
 8013066:	ab03      	add	r3, sp, #12
 8013068:	9300      	str	r3, [sp, #0]
 801306a:	462a      	mov	r2, r5
 801306c:	4b05      	ldr	r3, [pc, #20]	@ (8013084 <_vfiprintf_r+0x228>)
 801306e:	a904      	add	r1, sp, #16
 8013070:	4630      	mov	r0, r6
 8013072:	f7fe f9bd 	bl	80113f0 <_printf_i>
 8013076:	e7e4      	b.n	8013042 <_vfiprintf_r+0x1e6>
 8013078:	0801390a 	.word	0x0801390a
 801307c:	08013914 	.word	0x08013914
 8013080:	08010ec1 	.word	0x08010ec1
 8013084:	08012e37 	.word	0x08012e37
 8013088:	08013910 	.word	0x08013910

0801308c <__sflush_r>:
 801308c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013094:	0716      	lsls	r6, r2, #28
 8013096:	4605      	mov	r5, r0
 8013098:	460c      	mov	r4, r1
 801309a:	d454      	bmi.n	8013146 <__sflush_r+0xba>
 801309c:	684b      	ldr	r3, [r1, #4]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	dc02      	bgt.n	80130a8 <__sflush_r+0x1c>
 80130a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	dd48      	ble.n	801313a <__sflush_r+0xae>
 80130a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80130aa:	2e00      	cmp	r6, #0
 80130ac:	d045      	beq.n	801313a <__sflush_r+0xae>
 80130ae:	2300      	movs	r3, #0
 80130b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80130b4:	682f      	ldr	r7, [r5, #0]
 80130b6:	6a21      	ldr	r1, [r4, #32]
 80130b8:	602b      	str	r3, [r5, #0]
 80130ba:	d030      	beq.n	801311e <__sflush_r+0x92>
 80130bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80130be:	89a3      	ldrh	r3, [r4, #12]
 80130c0:	0759      	lsls	r1, r3, #29
 80130c2:	d505      	bpl.n	80130d0 <__sflush_r+0x44>
 80130c4:	6863      	ldr	r3, [r4, #4]
 80130c6:	1ad2      	subs	r2, r2, r3
 80130c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80130ca:	b10b      	cbz	r3, 80130d0 <__sflush_r+0x44>
 80130cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80130ce:	1ad2      	subs	r2, r2, r3
 80130d0:	2300      	movs	r3, #0
 80130d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80130d4:	6a21      	ldr	r1, [r4, #32]
 80130d6:	4628      	mov	r0, r5
 80130d8:	47b0      	blx	r6
 80130da:	1c43      	adds	r3, r0, #1
 80130dc:	89a3      	ldrh	r3, [r4, #12]
 80130de:	d106      	bne.n	80130ee <__sflush_r+0x62>
 80130e0:	6829      	ldr	r1, [r5, #0]
 80130e2:	291d      	cmp	r1, #29
 80130e4:	d82b      	bhi.n	801313e <__sflush_r+0xb2>
 80130e6:	4a2a      	ldr	r2, [pc, #168]	@ (8013190 <__sflush_r+0x104>)
 80130e8:	40ca      	lsrs	r2, r1
 80130ea:	07d6      	lsls	r6, r2, #31
 80130ec:	d527      	bpl.n	801313e <__sflush_r+0xb2>
 80130ee:	2200      	movs	r2, #0
 80130f0:	6062      	str	r2, [r4, #4]
 80130f2:	04d9      	lsls	r1, r3, #19
 80130f4:	6922      	ldr	r2, [r4, #16]
 80130f6:	6022      	str	r2, [r4, #0]
 80130f8:	d504      	bpl.n	8013104 <__sflush_r+0x78>
 80130fa:	1c42      	adds	r2, r0, #1
 80130fc:	d101      	bne.n	8013102 <__sflush_r+0x76>
 80130fe:	682b      	ldr	r3, [r5, #0]
 8013100:	b903      	cbnz	r3, 8013104 <__sflush_r+0x78>
 8013102:	6560      	str	r0, [r4, #84]	@ 0x54
 8013104:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013106:	602f      	str	r7, [r5, #0]
 8013108:	b1b9      	cbz	r1, 801313a <__sflush_r+0xae>
 801310a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801310e:	4299      	cmp	r1, r3
 8013110:	d002      	beq.n	8013118 <__sflush_r+0x8c>
 8013112:	4628      	mov	r0, r5
 8013114:	f7ff fab4 	bl	8012680 <_free_r>
 8013118:	2300      	movs	r3, #0
 801311a:	6363      	str	r3, [r4, #52]	@ 0x34
 801311c:	e00d      	b.n	801313a <__sflush_r+0xae>
 801311e:	2301      	movs	r3, #1
 8013120:	4628      	mov	r0, r5
 8013122:	47b0      	blx	r6
 8013124:	4602      	mov	r2, r0
 8013126:	1c50      	adds	r0, r2, #1
 8013128:	d1c9      	bne.n	80130be <__sflush_r+0x32>
 801312a:	682b      	ldr	r3, [r5, #0]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d0c6      	beq.n	80130be <__sflush_r+0x32>
 8013130:	2b1d      	cmp	r3, #29
 8013132:	d001      	beq.n	8013138 <__sflush_r+0xac>
 8013134:	2b16      	cmp	r3, #22
 8013136:	d11e      	bne.n	8013176 <__sflush_r+0xea>
 8013138:	602f      	str	r7, [r5, #0]
 801313a:	2000      	movs	r0, #0
 801313c:	e022      	b.n	8013184 <__sflush_r+0xf8>
 801313e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013142:	b21b      	sxth	r3, r3
 8013144:	e01b      	b.n	801317e <__sflush_r+0xf2>
 8013146:	690f      	ldr	r7, [r1, #16]
 8013148:	2f00      	cmp	r7, #0
 801314a:	d0f6      	beq.n	801313a <__sflush_r+0xae>
 801314c:	0793      	lsls	r3, r2, #30
 801314e:	680e      	ldr	r6, [r1, #0]
 8013150:	bf08      	it	eq
 8013152:	694b      	ldreq	r3, [r1, #20]
 8013154:	600f      	str	r7, [r1, #0]
 8013156:	bf18      	it	ne
 8013158:	2300      	movne	r3, #0
 801315a:	eba6 0807 	sub.w	r8, r6, r7
 801315e:	608b      	str	r3, [r1, #8]
 8013160:	f1b8 0f00 	cmp.w	r8, #0
 8013164:	dde9      	ble.n	801313a <__sflush_r+0xae>
 8013166:	6a21      	ldr	r1, [r4, #32]
 8013168:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801316a:	4643      	mov	r3, r8
 801316c:	463a      	mov	r2, r7
 801316e:	4628      	mov	r0, r5
 8013170:	47b0      	blx	r6
 8013172:	2800      	cmp	r0, #0
 8013174:	dc08      	bgt.n	8013188 <__sflush_r+0xfc>
 8013176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801317a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801317e:	81a3      	strh	r3, [r4, #12]
 8013180:	f04f 30ff 	mov.w	r0, #4294967295
 8013184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013188:	4407      	add	r7, r0
 801318a:	eba8 0800 	sub.w	r8, r8, r0
 801318e:	e7e7      	b.n	8013160 <__sflush_r+0xd4>
 8013190:	20400001 	.word	0x20400001

08013194 <_fflush_r>:
 8013194:	b538      	push	{r3, r4, r5, lr}
 8013196:	690b      	ldr	r3, [r1, #16]
 8013198:	4605      	mov	r5, r0
 801319a:	460c      	mov	r4, r1
 801319c:	b913      	cbnz	r3, 80131a4 <_fflush_r+0x10>
 801319e:	2500      	movs	r5, #0
 80131a0:	4628      	mov	r0, r5
 80131a2:	bd38      	pop	{r3, r4, r5, pc}
 80131a4:	b118      	cbz	r0, 80131ae <_fflush_r+0x1a>
 80131a6:	6a03      	ldr	r3, [r0, #32]
 80131a8:	b90b      	cbnz	r3, 80131ae <_fflush_r+0x1a>
 80131aa:	f7fe facb 	bl	8011744 <__sinit>
 80131ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d0f3      	beq.n	801319e <_fflush_r+0xa>
 80131b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80131b8:	07d0      	lsls	r0, r2, #31
 80131ba:	d404      	bmi.n	80131c6 <_fflush_r+0x32>
 80131bc:	0599      	lsls	r1, r3, #22
 80131be:	d402      	bmi.n	80131c6 <_fflush_r+0x32>
 80131c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80131c2:	f7ef fd4e 	bl	8002c62 <__retarget_lock_acquire_recursive>
 80131c6:	4628      	mov	r0, r5
 80131c8:	4621      	mov	r1, r4
 80131ca:	f7ff ff5f 	bl	801308c <__sflush_r>
 80131ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80131d0:	07da      	lsls	r2, r3, #31
 80131d2:	4605      	mov	r5, r0
 80131d4:	d4e4      	bmi.n	80131a0 <_fflush_r+0xc>
 80131d6:	89a3      	ldrh	r3, [r4, #12]
 80131d8:	059b      	lsls	r3, r3, #22
 80131da:	d4e1      	bmi.n	80131a0 <_fflush_r+0xc>
 80131dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80131de:	f7ef fd55 	bl	8002c8c <__retarget_lock_release_recursive>
 80131e2:	e7dd      	b.n	80131a0 <_fflush_r+0xc>

080131e4 <fiprintf>:
 80131e4:	b40e      	push	{r1, r2, r3}
 80131e6:	b503      	push	{r0, r1, lr}
 80131e8:	4601      	mov	r1, r0
 80131ea:	ab03      	add	r3, sp, #12
 80131ec:	4805      	ldr	r0, [pc, #20]	@ (8013204 <fiprintf+0x20>)
 80131ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80131f2:	6800      	ldr	r0, [r0, #0]
 80131f4:	9301      	str	r3, [sp, #4]
 80131f6:	f7ff fe31 	bl	8012e5c <_vfiprintf_r>
 80131fa:	b002      	add	sp, #8
 80131fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013200:	b003      	add	sp, #12
 8013202:	4770      	bx	lr
 8013204:	200000ec 	.word	0x200000ec

08013208 <__swbuf_r>:
 8013208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801320a:	460e      	mov	r6, r1
 801320c:	4614      	mov	r4, r2
 801320e:	4605      	mov	r5, r0
 8013210:	b118      	cbz	r0, 801321a <__swbuf_r+0x12>
 8013212:	6a03      	ldr	r3, [r0, #32]
 8013214:	b90b      	cbnz	r3, 801321a <__swbuf_r+0x12>
 8013216:	f7fe fa95 	bl	8011744 <__sinit>
 801321a:	69a3      	ldr	r3, [r4, #24]
 801321c:	60a3      	str	r3, [r4, #8]
 801321e:	89a3      	ldrh	r3, [r4, #12]
 8013220:	071a      	lsls	r2, r3, #28
 8013222:	d501      	bpl.n	8013228 <__swbuf_r+0x20>
 8013224:	6923      	ldr	r3, [r4, #16]
 8013226:	b943      	cbnz	r3, 801323a <__swbuf_r+0x32>
 8013228:	4621      	mov	r1, r4
 801322a:	4628      	mov	r0, r5
 801322c:	f000 f82a 	bl	8013284 <__swsetup_r>
 8013230:	b118      	cbz	r0, 801323a <__swbuf_r+0x32>
 8013232:	f04f 37ff 	mov.w	r7, #4294967295
 8013236:	4638      	mov	r0, r7
 8013238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801323a:	6823      	ldr	r3, [r4, #0]
 801323c:	6922      	ldr	r2, [r4, #16]
 801323e:	1a98      	subs	r0, r3, r2
 8013240:	6963      	ldr	r3, [r4, #20]
 8013242:	b2f6      	uxtb	r6, r6
 8013244:	4283      	cmp	r3, r0
 8013246:	4637      	mov	r7, r6
 8013248:	dc05      	bgt.n	8013256 <__swbuf_r+0x4e>
 801324a:	4621      	mov	r1, r4
 801324c:	4628      	mov	r0, r5
 801324e:	f7ff ffa1 	bl	8013194 <_fflush_r>
 8013252:	2800      	cmp	r0, #0
 8013254:	d1ed      	bne.n	8013232 <__swbuf_r+0x2a>
 8013256:	68a3      	ldr	r3, [r4, #8]
 8013258:	3b01      	subs	r3, #1
 801325a:	60a3      	str	r3, [r4, #8]
 801325c:	6823      	ldr	r3, [r4, #0]
 801325e:	1c5a      	adds	r2, r3, #1
 8013260:	6022      	str	r2, [r4, #0]
 8013262:	701e      	strb	r6, [r3, #0]
 8013264:	6962      	ldr	r2, [r4, #20]
 8013266:	1c43      	adds	r3, r0, #1
 8013268:	429a      	cmp	r2, r3
 801326a:	d004      	beq.n	8013276 <__swbuf_r+0x6e>
 801326c:	89a3      	ldrh	r3, [r4, #12]
 801326e:	07db      	lsls	r3, r3, #31
 8013270:	d5e1      	bpl.n	8013236 <__swbuf_r+0x2e>
 8013272:	2e0a      	cmp	r6, #10
 8013274:	d1df      	bne.n	8013236 <__swbuf_r+0x2e>
 8013276:	4621      	mov	r1, r4
 8013278:	4628      	mov	r0, r5
 801327a:	f7ff ff8b 	bl	8013194 <_fflush_r>
 801327e:	2800      	cmp	r0, #0
 8013280:	d0d9      	beq.n	8013236 <__swbuf_r+0x2e>
 8013282:	e7d6      	b.n	8013232 <__swbuf_r+0x2a>

08013284 <__swsetup_r>:
 8013284:	b538      	push	{r3, r4, r5, lr}
 8013286:	4b29      	ldr	r3, [pc, #164]	@ (801332c <__swsetup_r+0xa8>)
 8013288:	4605      	mov	r5, r0
 801328a:	6818      	ldr	r0, [r3, #0]
 801328c:	460c      	mov	r4, r1
 801328e:	b118      	cbz	r0, 8013298 <__swsetup_r+0x14>
 8013290:	6a03      	ldr	r3, [r0, #32]
 8013292:	b90b      	cbnz	r3, 8013298 <__swsetup_r+0x14>
 8013294:	f7fe fa56 	bl	8011744 <__sinit>
 8013298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801329c:	0719      	lsls	r1, r3, #28
 801329e:	d422      	bmi.n	80132e6 <__swsetup_r+0x62>
 80132a0:	06da      	lsls	r2, r3, #27
 80132a2:	d407      	bmi.n	80132b4 <__swsetup_r+0x30>
 80132a4:	2209      	movs	r2, #9
 80132a6:	602a      	str	r2, [r5, #0]
 80132a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132ac:	81a3      	strh	r3, [r4, #12]
 80132ae:	f04f 30ff 	mov.w	r0, #4294967295
 80132b2:	e033      	b.n	801331c <__swsetup_r+0x98>
 80132b4:	0758      	lsls	r0, r3, #29
 80132b6:	d512      	bpl.n	80132de <__swsetup_r+0x5a>
 80132b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80132ba:	b141      	cbz	r1, 80132ce <__swsetup_r+0x4a>
 80132bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80132c0:	4299      	cmp	r1, r3
 80132c2:	d002      	beq.n	80132ca <__swsetup_r+0x46>
 80132c4:	4628      	mov	r0, r5
 80132c6:	f7ff f9db 	bl	8012680 <_free_r>
 80132ca:	2300      	movs	r3, #0
 80132cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80132ce:	89a3      	ldrh	r3, [r4, #12]
 80132d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80132d4:	81a3      	strh	r3, [r4, #12]
 80132d6:	2300      	movs	r3, #0
 80132d8:	6063      	str	r3, [r4, #4]
 80132da:	6923      	ldr	r3, [r4, #16]
 80132dc:	6023      	str	r3, [r4, #0]
 80132de:	89a3      	ldrh	r3, [r4, #12]
 80132e0:	f043 0308 	orr.w	r3, r3, #8
 80132e4:	81a3      	strh	r3, [r4, #12]
 80132e6:	6923      	ldr	r3, [r4, #16]
 80132e8:	b94b      	cbnz	r3, 80132fe <__swsetup_r+0x7a>
 80132ea:	89a3      	ldrh	r3, [r4, #12]
 80132ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80132f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80132f4:	d003      	beq.n	80132fe <__swsetup_r+0x7a>
 80132f6:	4621      	mov	r1, r4
 80132f8:	4628      	mov	r0, r5
 80132fa:	f000 f879 	bl	80133f0 <__smakebuf_r>
 80132fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013302:	f013 0201 	ands.w	r2, r3, #1
 8013306:	d00a      	beq.n	801331e <__swsetup_r+0x9a>
 8013308:	2200      	movs	r2, #0
 801330a:	60a2      	str	r2, [r4, #8]
 801330c:	6962      	ldr	r2, [r4, #20]
 801330e:	4252      	negs	r2, r2
 8013310:	61a2      	str	r2, [r4, #24]
 8013312:	6922      	ldr	r2, [r4, #16]
 8013314:	b942      	cbnz	r2, 8013328 <__swsetup_r+0xa4>
 8013316:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801331a:	d1c5      	bne.n	80132a8 <__swsetup_r+0x24>
 801331c:	bd38      	pop	{r3, r4, r5, pc}
 801331e:	0799      	lsls	r1, r3, #30
 8013320:	bf58      	it	pl
 8013322:	6962      	ldrpl	r2, [r4, #20]
 8013324:	60a2      	str	r2, [r4, #8]
 8013326:	e7f4      	b.n	8013312 <__swsetup_r+0x8e>
 8013328:	2000      	movs	r0, #0
 801332a:	e7f7      	b.n	801331c <__swsetup_r+0x98>
 801332c:	200000ec 	.word	0x200000ec

08013330 <abort>:
 8013330:	b508      	push	{r3, lr}
 8013332:	2006      	movs	r0, #6
 8013334:	f000 f8c0 	bl	80134b8 <raise>
 8013338:	2001      	movs	r0, #1
 801333a:	f7ef fb23 	bl	8002984 <_exit>

0801333e <_calloc_r>:
 801333e:	b570      	push	{r4, r5, r6, lr}
 8013340:	fba1 5402 	umull	r5, r4, r1, r2
 8013344:	b934      	cbnz	r4, 8013354 <_calloc_r+0x16>
 8013346:	4629      	mov	r1, r5
 8013348:	f7fd fc50 	bl	8010bec <_malloc_r>
 801334c:	4606      	mov	r6, r0
 801334e:	b928      	cbnz	r0, 801335c <_calloc_r+0x1e>
 8013350:	4630      	mov	r0, r6
 8013352:	bd70      	pop	{r4, r5, r6, pc}
 8013354:	220c      	movs	r2, #12
 8013356:	6002      	str	r2, [r0, #0]
 8013358:	2600      	movs	r6, #0
 801335a:	e7f9      	b.n	8013350 <_calloc_r+0x12>
 801335c:	462a      	mov	r2, r5
 801335e:	4621      	mov	r1, r4
 8013360:	f7fe fa7b 	bl	801185a <memset>
 8013364:	e7f4      	b.n	8013350 <_calloc_r+0x12>

08013366 <__ascii_mbtowc>:
 8013366:	b082      	sub	sp, #8
 8013368:	b901      	cbnz	r1, 801336c <__ascii_mbtowc+0x6>
 801336a:	a901      	add	r1, sp, #4
 801336c:	b142      	cbz	r2, 8013380 <__ascii_mbtowc+0x1a>
 801336e:	b14b      	cbz	r3, 8013384 <__ascii_mbtowc+0x1e>
 8013370:	7813      	ldrb	r3, [r2, #0]
 8013372:	600b      	str	r3, [r1, #0]
 8013374:	7812      	ldrb	r2, [r2, #0]
 8013376:	1e10      	subs	r0, r2, #0
 8013378:	bf18      	it	ne
 801337a:	2001      	movne	r0, #1
 801337c:	b002      	add	sp, #8
 801337e:	4770      	bx	lr
 8013380:	4610      	mov	r0, r2
 8013382:	e7fb      	b.n	801337c <__ascii_mbtowc+0x16>
 8013384:	f06f 0001 	mvn.w	r0, #1
 8013388:	e7f8      	b.n	801337c <__ascii_mbtowc+0x16>

0801338a <__ascii_wctomb>:
 801338a:	4603      	mov	r3, r0
 801338c:	4608      	mov	r0, r1
 801338e:	b141      	cbz	r1, 80133a2 <__ascii_wctomb+0x18>
 8013390:	2aff      	cmp	r2, #255	@ 0xff
 8013392:	d904      	bls.n	801339e <__ascii_wctomb+0x14>
 8013394:	228a      	movs	r2, #138	@ 0x8a
 8013396:	601a      	str	r2, [r3, #0]
 8013398:	f04f 30ff 	mov.w	r0, #4294967295
 801339c:	4770      	bx	lr
 801339e:	700a      	strb	r2, [r1, #0]
 80133a0:	2001      	movs	r0, #1
 80133a2:	4770      	bx	lr

080133a4 <__swhatbuf_r>:
 80133a4:	b570      	push	{r4, r5, r6, lr}
 80133a6:	460c      	mov	r4, r1
 80133a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133ac:	2900      	cmp	r1, #0
 80133ae:	b096      	sub	sp, #88	@ 0x58
 80133b0:	4615      	mov	r5, r2
 80133b2:	461e      	mov	r6, r3
 80133b4:	da0d      	bge.n	80133d2 <__swhatbuf_r+0x2e>
 80133b6:	89a3      	ldrh	r3, [r4, #12]
 80133b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80133bc:	f04f 0100 	mov.w	r1, #0
 80133c0:	bf14      	ite	ne
 80133c2:	2340      	movne	r3, #64	@ 0x40
 80133c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80133c8:	2000      	movs	r0, #0
 80133ca:	6031      	str	r1, [r6, #0]
 80133cc:	602b      	str	r3, [r5, #0]
 80133ce:	b016      	add	sp, #88	@ 0x58
 80133d0:	bd70      	pop	{r4, r5, r6, pc}
 80133d2:	466a      	mov	r2, sp
 80133d4:	f000 f878 	bl	80134c8 <_fstat_r>
 80133d8:	2800      	cmp	r0, #0
 80133da:	dbec      	blt.n	80133b6 <__swhatbuf_r+0x12>
 80133dc:	9901      	ldr	r1, [sp, #4]
 80133de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80133e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80133e6:	4259      	negs	r1, r3
 80133e8:	4159      	adcs	r1, r3
 80133ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80133ee:	e7eb      	b.n	80133c8 <__swhatbuf_r+0x24>

080133f0 <__smakebuf_r>:
 80133f0:	898b      	ldrh	r3, [r1, #12]
 80133f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80133f4:	079d      	lsls	r5, r3, #30
 80133f6:	4606      	mov	r6, r0
 80133f8:	460c      	mov	r4, r1
 80133fa:	d507      	bpl.n	801340c <__smakebuf_r+0x1c>
 80133fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013400:	6023      	str	r3, [r4, #0]
 8013402:	6123      	str	r3, [r4, #16]
 8013404:	2301      	movs	r3, #1
 8013406:	6163      	str	r3, [r4, #20]
 8013408:	b003      	add	sp, #12
 801340a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801340c:	ab01      	add	r3, sp, #4
 801340e:	466a      	mov	r2, sp
 8013410:	f7ff ffc8 	bl	80133a4 <__swhatbuf_r>
 8013414:	9f00      	ldr	r7, [sp, #0]
 8013416:	4605      	mov	r5, r0
 8013418:	4639      	mov	r1, r7
 801341a:	4630      	mov	r0, r6
 801341c:	f7fd fbe6 	bl	8010bec <_malloc_r>
 8013420:	b948      	cbnz	r0, 8013436 <__smakebuf_r+0x46>
 8013422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013426:	059a      	lsls	r2, r3, #22
 8013428:	d4ee      	bmi.n	8013408 <__smakebuf_r+0x18>
 801342a:	f023 0303 	bic.w	r3, r3, #3
 801342e:	f043 0302 	orr.w	r3, r3, #2
 8013432:	81a3      	strh	r3, [r4, #12]
 8013434:	e7e2      	b.n	80133fc <__smakebuf_r+0xc>
 8013436:	89a3      	ldrh	r3, [r4, #12]
 8013438:	6020      	str	r0, [r4, #0]
 801343a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801343e:	81a3      	strh	r3, [r4, #12]
 8013440:	9b01      	ldr	r3, [sp, #4]
 8013442:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013446:	b15b      	cbz	r3, 8013460 <__smakebuf_r+0x70>
 8013448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801344c:	4630      	mov	r0, r6
 801344e:	f000 f84d 	bl	80134ec <_isatty_r>
 8013452:	b128      	cbz	r0, 8013460 <__smakebuf_r+0x70>
 8013454:	89a3      	ldrh	r3, [r4, #12]
 8013456:	f023 0303 	bic.w	r3, r3, #3
 801345a:	f043 0301 	orr.w	r3, r3, #1
 801345e:	81a3      	strh	r3, [r4, #12]
 8013460:	89a3      	ldrh	r3, [r4, #12]
 8013462:	431d      	orrs	r5, r3
 8013464:	81a5      	strh	r5, [r4, #12]
 8013466:	e7cf      	b.n	8013408 <__smakebuf_r+0x18>

08013468 <_raise_r>:
 8013468:	291f      	cmp	r1, #31
 801346a:	b538      	push	{r3, r4, r5, lr}
 801346c:	4605      	mov	r5, r0
 801346e:	460c      	mov	r4, r1
 8013470:	d904      	bls.n	801347c <_raise_r+0x14>
 8013472:	2316      	movs	r3, #22
 8013474:	6003      	str	r3, [r0, #0]
 8013476:	f04f 30ff 	mov.w	r0, #4294967295
 801347a:	bd38      	pop	{r3, r4, r5, pc}
 801347c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801347e:	b112      	cbz	r2, 8013486 <_raise_r+0x1e>
 8013480:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013484:	b94b      	cbnz	r3, 801349a <_raise_r+0x32>
 8013486:	4628      	mov	r0, r5
 8013488:	f000 f852 	bl	8013530 <_getpid_r>
 801348c:	4622      	mov	r2, r4
 801348e:	4601      	mov	r1, r0
 8013490:	4628      	mov	r0, r5
 8013492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013496:	f000 b839 	b.w	801350c <_kill_r>
 801349a:	2b01      	cmp	r3, #1
 801349c:	d00a      	beq.n	80134b4 <_raise_r+0x4c>
 801349e:	1c59      	adds	r1, r3, #1
 80134a0:	d103      	bne.n	80134aa <_raise_r+0x42>
 80134a2:	2316      	movs	r3, #22
 80134a4:	6003      	str	r3, [r0, #0]
 80134a6:	2001      	movs	r0, #1
 80134a8:	e7e7      	b.n	801347a <_raise_r+0x12>
 80134aa:	2100      	movs	r1, #0
 80134ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80134b0:	4620      	mov	r0, r4
 80134b2:	4798      	blx	r3
 80134b4:	2000      	movs	r0, #0
 80134b6:	e7e0      	b.n	801347a <_raise_r+0x12>

080134b8 <raise>:
 80134b8:	4b02      	ldr	r3, [pc, #8]	@ (80134c4 <raise+0xc>)
 80134ba:	4601      	mov	r1, r0
 80134bc:	6818      	ldr	r0, [r3, #0]
 80134be:	f7ff bfd3 	b.w	8013468 <_raise_r>
 80134c2:	bf00      	nop
 80134c4:	200000ec 	.word	0x200000ec

080134c8 <_fstat_r>:
 80134c8:	b538      	push	{r3, r4, r5, lr}
 80134ca:	4d07      	ldr	r5, [pc, #28]	@ (80134e8 <_fstat_r+0x20>)
 80134cc:	2300      	movs	r3, #0
 80134ce:	4604      	mov	r4, r0
 80134d0:	4608      	mov	r0, r1
 80134d2:	4611      	mov	r1, r2
 80134d4:	602b      	str	r3, [r5, #0]
 80134d6:	f7ef fa89 	bl	80029ec <_fstat>
 80134da:	1c43      	adds	r3, r0, #1
 80134dc:	d102      	bne.n	80134e4 <_fstat_r+0x1c>
 80134de:	682b      	ldr	r3, [r5, #0]
 80134e0:	b103      	cbz	r3, 80134e4 <_fstat_r+0x1c>
 80134e2:	6023      	str	r3, [r4, #0]
 80134e4:	bd38      	pop	{r3, r4, r5, pc}
 80134e6:	bf00      	nop
 80134e8:	20001680 	.word	0x20001680

080134ec <_isatty_r>:
 80134ec:	b538      	push	{r3, r4, r5, lr}
 80134ee:	4d06      	ldr	r5, [pc, #24]	@ (8013508 <_isatty_r+0x1c>)
 80134f0:	2300      	movs	r3, #0
 80134f2:	4604      	mov	r4, r0
 80134f4:	4608      	mov	r0, r1
 80134f6:	602b      	str	r3, [r5, #0]
 80134f8:	f7ef fa88 	bl	8002a0c <_isatty>
 80134fc:	1c43      	adds	r3, r0, #1
 80134fe:	d102      	bne.n	8013506 <_isatty_r+0x1a>
 8013500:	682b      	ldr	r3, [r5, #0]
 8013502:	b103      	cbz	r3, 8013506 <_isatty_r+0x1a>
 8013504:	6023      	str	r3, [r4, #0]
 8013506:	bd38      	pop	{r3, r4, r5, pc}
 8013508:	20001680 	.word	0x20001680

0801350c <_kill_r>:
 801350c:	b538      	push	{r3, r4, r5, lr}
 801350e:	4d07      	ldr	r5, [pc, #28]	@ (801352c <_kill_r+0x20>)
 8013510:	2300      	movs	r3, #0
 8013512:	4604      	mov	r4, r0
 8013514:	4608      	mov	r0, r1
 8013516:	4611      	mov	r1, r2
 8013518:	602b      	str	r3, [r5, #0]
 801351a:	f7ef fa23 	bl	8002964 <_kill>
 801351e:	1c43      	adds	r3, r0, #1
 8013520:	d102      	bne.n	8013528 <_kill_r+0x1c>
 8013522:	682b      	ldr	r3, [r5, #0]
 8013524:	b103      	cbz	r3, 8013528 <_kill_r+0x1c>
 8013526:	6023      	str	r3, [r4, #0]
 8013528:	bd38      	pop	{r3, r4, r5, pc}
 801352a:	bf00      	nop
 801352c:	20001680 	.word	0x20001680

08013530 <_getpid_r>:
 8013530:	f7ef ba10 	b.w	8002954 <_getpid>

08013534 <_init>:
 8013534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013536:	bf00      	nop
 8013538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801353a:	bc08      	pop	{r3}
 801353c:	469e      	mov	lr, r3
 801353e:	4770      	bx	lr

08013540 <_fini>:
 8013540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013542:	bf00      	nop
 8013544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013546:	bc08      	pop	{r3}
 8013548:	469e      	mov	lr, r3
 801354a:	4770      	bx	lr
